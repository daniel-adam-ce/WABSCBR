
usb_device.elf:     file format elf32-littlenios2
usb_device.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001c0

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00012534 memsz 0x00012534 flags r-x
    LOAD off    0x00013554 vaddr 0x00012554 paddr 0x0001430c align 2**12
         filesz 0x00001db8 memsz 0x00001db8 flags rw-
    LOAD off    0x000160c4 vaddr 0x000160c4 paddr 0x000160c4 align 2**12
         filesz 0x00000000 memsz 0x00000178 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a0  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000118a4  000001c0  000001c0  000011c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000af0  00011a64  00011a64  00012a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001db8  00012554  0001430c  00013554  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000178  000160c4  000160c4  000160c4  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_0      00000000  0001623c  0001623c  0001530c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0001530c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000fd0  00000000  00000000  00015330  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00025931  00000000  00000000  00016300  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009aaf  00000000  00000000  0003bc31  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c2e7  00000000  00000000  000456e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002734  00000000  00000000  000519c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003c49  00000000  00000000  000540fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000178c0  00000000  00000000  00057d45  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  0006f608  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000018d8  00000000  00000000  0006f658  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007464a  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0007464d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00074652  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00074653  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00074654  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0007465f  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0007466a  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000c  00000000  00000000  00074675  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000003f  00000000  00000000  00074681  2**0
                  CONTENTS, READONLY
 26 .jdi          00004380  00000000  00000000  000746c0  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0006cb11  00000000  00000000  00078a40  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001c0 l    d  .text	00000000 .text
00011a64 l    d  .rodata	00000000 .rodata
00012554 l    d  .rwdata	00000000 .rwdata
000160c4 l    d  .bss	00000000 .bss
0001623c l    d  .sdram_0	00000000 .sdram_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../usb_device_bsp//obj/HAL/src/crt0.o
000001f8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 LCD.c
00000000 l    df *ABS*	00000000 usb_device.c
00000000 l    df *ABS*	00000000 usb_device_control.c
00000f6c l     F .text	00000180 ep2_isr
00000000 l    df *ABS*	00000000 usb_hal.c
000017e8 l     F .text	0000007c hpi_read_words
000018cc l     F .text	0000004c writeable_region
00001768 l     F .text	00000080 hpi_write_words
00000000 l    df *ABS*	00000000 main.c
00012554 l     O .rwdata	000001a2 pcd_asm
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00012006 l     O .rodata	00000010 zeroes.4404
000047e4 l     F .text	000000bc __sbprintf
00012016 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
000049f4 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00006524 l     F .text	00000008 __fp_unlock
00006538 l     F .text	0000019c __sinit.part.1
000066d4 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00012b00 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00012f44 l     O .rwdata	00000020 lc_ctype_charset
00012f24 l     O .rwdata	00000020 lc_message_charset
00012f64 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00012048 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00009270 l     F .text	000000fc __sprint_r.part.0
0001217c l     O .rodata	00000010 blanks.4348
0001216c l     O .rodata	00000010 zeroes.4349
0000a7fc l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000e304 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000e410 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000e43c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000e528 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000e608 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000e6f4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000e8c8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000142f4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000ece8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000ee1c l     F .text	00000034 alt_dev_reg
00013144 l     O .rwdata	00001060 jtag_uart_0
000141a4 l     O .rwdata	00000120 lcd_16207_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000f120 l     F .text	0000020c altera_avalon_jtag_uart_irq
0000f32c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
00014300 l     O .rwdata	00000004 colstart
0000f964 l     F .text	000000b8 lcd_write_command
0000fa1c l     F .text	000000d8 lcd_write_data
0000faf4 l     F .text	000000d0 lcd_clear_screen
0000fbc4 l     F .text	000001ec lcd_repaint_screen
0000fdb0 l     F .text	000000cc lcd_scroll_up
0000fe7c l     F .text	000002ac lcd_handle_escape
00010600 l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00010840 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00010bd8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001104c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0001118c l     F .text	0000003c alt_get_errno
000111c8 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
000123d2 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000320 g     F .text	00000040 LCD_Line1
00008908 g     F .text	00000074 _mprec_log10
000089f4 g     F .text	0000008c __any_on
0000ad98 g     F .text	00000054 _isatty_r
00012054 g     O .rodata	00000028 __mprec_tinytens
0000e804 g     F .text	0000007c alt_main
00002410 g     F .text	000000c0 _puts_r
0001613c g     O .bss	00000100 alt_irq
0000adec g     F .text	00000060 _lseek_r
00000444 g     F .text	0000005c dc_init_struct
0001430c g       *ABS*	00000000 __flash_rwdata_start
0000ce30 g     F .text	00000088 .hidden __eqdf2
0001623c g       *ABS*	00000000 __alt_heap_start
000015ec g     F .text	0000004c hpi_write_reg
000023d4 g     F .text	0000003c printf
0000b004 g     F .text	0000009c _wcrtomb_r
00009130 g     F .text	0000005c __sseek
00006874 g     F .text	00000010 __sinit
0000aeac g     F .text	00000140 __swbuf_r
0000733c g     F .text	0000007c _setlocale_r
00001638 g     F .text	00000030 hpi_read_status
000066dc g     F .text	00000068 __sfmoreglue
0000e8a4 g     F .text	00000024 __malloc_unlock
00001294 g     F .text	00000128 hpi_read_memory
00007800 g     F .text	0000015c memmove
0000685c g     F .text	00000018 _cleanup
00007a84 g     F .text	000000a8 _Balloc
000003a0 g     F .text	000000a4 LCD_Test
000160c4 g     O .bss	00000008 old_button_sw_status
0000ceb8 g     F .text	000000dc .hidden __gtdf2
000113e0 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000001c __reset
00000bd4 g     F .text	00000398 sie2_msg_handler
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000ad3c g     F .text	0000005c _fstat_r
000160d8 g     O .bss	00000004 errno
000004a0 g     F .text	00000090 dc_clear_bug
000090ac g     F .text	00000008 __seofread
000160ec g     O .bss	00000004 alt_argv
0001c2c4 g       *ABS*	00000000 _gp
0000ecb8 g     F .text	00000030 usleep
000015a0 g     F .text	0000004c hpi_read_reg
00012fc4 g     O .rwdata	00000180 alt_fd_list
00011404 g     F .text	00000090 alt_find_dev
000076b8 g     F .text	00000148 memcpy
00000a14 g     F .text	0000014c usb_enable_receive_data
0000652c g     F .text	0000000c _cleanup_r
0000e11c g     F .text	000000dc .hidden __floatsidf
00011110 g     F .text	0000007c alt_io_redirect
0000cf94 g     F .text	000000f4 .hidden __ltdf2
00011a64 g       *ABS*	00000000 __DTOR_END__
000024d0 g     F .text	00000014 puts
00008fe4 g     F .text	00000074 __fpclassifyd
00008864 g     F .text	000000a4 __ratio
0000a7e0 g     F .text	0000001c __vfiprintf_internal
0000f524 g     F .text	0000021c altera_avalon_jtag_uart_read
00001b70 g     F .text	00000014 malloc
000023a4 g     F .text	00000030 _printf_r
00001ab4 g     F .text	00000064 .hidden __udivsi3
0000e564 g     F .text	000000a4 isatty
000120a4 g     O .rodata	000000c8 __mprec_tens
000073b8 g     F .text	0000000c __locale_charset
00011640 g     F .text	00000090 alt_icache_flush
000160d4 g     O .bss	00000004 __malloc_top_pad
000142d4 g     O .rwdata	00000004 __mb_cur_max
000073e8 g     F .text	0000000c _localeconv_r
00007e90 g     F .text	0000003c __i2b
00006cf8 g     F .text	000004bc __sfvwrite_r
000024e4 g     F .text	00000054 _sbrk_r
00001720 g     F .text	00000048 hpi_read_word
0000ae4c g     F .text	00000060 _read_r
000142ec g     O .rwdata	00000004 alt_max_fd
0000aa30 g     F .text	000000f0 _fclose_r
000064f4 g     F .text	00000030 fflush
000160d0 g     O .bss	00000004 __malloc_max_sbrked_mem
0000bc9c g     F .text	000008ac .hidden __adddf3
000010ec g     F .text	00000188 check_button_sw_status
0000860c g     F .text	0000010c __b2d
0000b764 g     F .text	00000538 .hidden __umoddi3
0000e730 g     F .text	000000d4 lseek
000142cc g     O .rwdata	00000004 _global_impure_ptr
00008a80 g     F .text	00000564 _realloc_r
0001623c g       *ABS*	00000000 __bss_end
00010f5c g     F .text	000000f0 alt_iic_isr_register
0000ebb0 g     F .text	00000108 alt_tick
0000b1ec g     F .text	00000578 .hidden __udivdi3
0000ac98 g     F .text	00000024 _fputwc_r
0001207c g     O .rodata	00000028 __mprec_bigtens
00007c74 g     F .text	00000104 __s2b
0000e1f8 g     F .text	000000a8 .hidden __floatunsidf
0000834c g     F .text	00000060 __mcmp
00006894 g     F .text	00000018 __fp_lock_all
00010f10 g     F .text	0000004c alt_ic_irq_enabled
000016a0 g     F .text	00000030 hpi_read_mbx
0000eb14 g     F .text	0000009c alt_alarm_stop
000160fc g     O .bss	00000004 alt_irq_active
00016128 g     O .bss	00000014 device_status
000000ec g     F .exceptions	000000d4 alt_irq_handler
00012f9c g     O .rwdata	00000028 alt_dev_null
00010bb8 g     F .text	00000020 alt_dcache_flush_all
00007d78 g     F .text	00000068 __hi0bits
0000e09c g     F .text	00000080 .hidden __fixdfsi
0001430c g       *ABS*	00000000 __ram_rwdata_end
000142e4 g     O .rwdata	00000008 alt_dev_list
0000ed24 g     F .text	000000f8 write
00012554 g       *ABS*	00000000 __ram_rodata_end
0000e478 g     F .text	000000b0 fstat
0000cf94 g     F .text	000000f4 .hidden __ledf2
000080c4 g     F .text	00000140 __pow5mult
00009384 g     F .text	0000145c ___vfiprintf_internal_r
000160e4 g     O .bss	00000004 __nlocale_changed
00001b18 g     F .text	00000058 .hidden __umodsi3
0001623c g       *ABS*	00000000 end
00010128 g     F .text	000004d8 altera_avalon_lcd_16207_write
00001668 g     F .text	00000038 hpi_write_mbx
0000f060 g     F .text	000000c0 altera_avalon_jtag_uart_init
00011a64 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
000108b8 g     F .text	0000007c alt_avalon_timer_sc_init
0000e2a0 g     F .text	00000064 .hidden __clzsi2
0000f740 g     F .text	00000224 altera_avalon_jtag_uart_write
00006884 g     F .text	00000004 __sfp_lock_acquire
000075d4 g     F .text	000000e4 memchr
000025d0 g     F .text	000021f8 ___vfprintf_internal_r
000069e8 g     F .text	00000310 _free_r
000073c4 g     F .text	00000010 __locale_mb_cur_max
000118b0 g     F .text	00000180 __call_exitprocs
000160e0 g     O .bss	00000004 __mlocale_changed
000142c4 g     O .rwdata	00000004 __malloc_sbrk_base
000001c0 g     F .text	0000003c _start
000160f4 g     O .bss	00000004 _alt_tick_rate
00008204 g     F .text	00000148 __lshift
000160f8 g     O .bss	00000004 _alt_nticks
00001274 g     F .text	00000020 hpi_init
0000e904 g     F .text	000000fc read
000007dc g     F .text	00000104 hpi_command
0000ee88 g     F .text	00000074 alt_sys_init
00011798 g     F .text	00000118 __register_exitproc
00007ecc g     F .text	000001f8 __multiply
0000f3cc g     F .text	00000068 altera_avalon_jtag_uart_close
00012554 g       *ABS*	00000000 __ram_rwdata_start
00011a64 g       *ABS*	00000000 __ram_rodata_start
00016100 g     O .bss	00000028 __malloc_current_mallinfo
00008718 g     F .text	0000014c __d2b
00000b60 g     F .text	00000074 dcProcessEvent
0000eefc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0001159c g     F .text	000000a4 alt_get_fd
00010a60 g     F .text	00000158 alt_busy_sleep
0000a918 g     F .text	00000054 _close_r
0001171c g     F .text	0000007c memcmp
0000efbc g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0001623c g       *ABS*	00000000 __alt_stack_base
0000f00c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000048a0 g     F .text	00000154 __swsetup_r
0000c548 g     F .text	000008e8 .hidden __divdf3
00006744 g     F .text	00000118 __sfp
0000897c g     F .text	00000078 __copybits
000126f8 g     O .rwdata	00000408 __malloc_av_
00006890 g     F .text	00000004 __sinit_lock_release
0000d088 g     F .text	00000718 .hidden __muldf3
00009058 g     F .text	00000054 __sread
00011494 g     F .text	00000108 alt_find_file
00010c14 g     F .text	000000a4 alt_dev_llist_insert
0000e880 g     F .text	00000024 __malloc_lock
0000ea64 g     F .text	000000b0 sbrk
0000069c g     F .text	00000140 dc_download_code
00006498 g     F .text	0000005c _fflush_r
0000a96c g     F .text	000000c4 _calloc_r
000160c4 g       *ABS*	00000000 __bss_start
000001fc g     F .text	000000a0 LCD_Init
0000795c g     F .text	00000128 memset
00001918 g     F .text	000000a4 main
000160f0 g     O .bss	00000004 alt_envp
000160cc g     O .bss	00000004 __malloc_max_total_mem
0000ef5c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000afec g     F .text	00000018 __swbuf
000106ac g     F .text	00000134 altera_avalon_lcd_16207_init
00000360 g     F .text	00000040 LCD_Line2
0000918c g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
0000ab20 g     F .text	00000014 fclose
00004bf4 g     F .text	00001688 _dtoa_r
00001b98 g     F .text	0000080c _malloc_r
0000b160 g     F .text	00000030 __ascii_wctomb
000142f0 g     O .rwdata	00000004 alt_errno
000071b4 g     F .text	000000c4 _fwalk
000019bc g     F .text	00000084 .hidden __divsi3
000068c4 g     F .text	00000124 _malloc_trim_r
00011a64 g       *ABS*	00000000 __CTOR_END__
00009194 g     F .text	000000dc strcmp
00011a64 g       *ABS*	00000000 __flash_rodata_start
00011a64 g       *ABS*	00000000 __DTOR_LIST__
0000ce30 g     F .text	00000088 .hidden __nedf2
0000ee50 g     F .text	00000038 alt_irq_init
0000029c g     F .text	00000084 LCD_Show_Text
0000ea00 g     F .text	00000064 alt_release_fd
0001218c g     O .rodata	00000100 .hidden __clz_tab
000160dc g     O .bss	00000004 _PathLocale
000116d0 g     F .text	00000014 atexit
000013bc g     F .text	000001e4 hpi_write_memory
0000a8b8 g     F .text	00000060 _write_r
000073f4 g     F .text	00000018 setlocale
000142d0 g     O .rwdata	00000004 _impure_ptr
000160e8 g     O .bss	00000004 alt_argc
0000627c g     F .text	0000021c __sflush_r
00010d18 g     F .text	00000060 _do_dtors
000073e0 g     F .text	00000008 __locale_cjk_lang
00000000 g       *ABS*	00000000 __alt_mem_sdram_0
00000020 g       .exceptions	00000000 alt_irq_entry
000085a8 g     F .text	00000064 __ulp
000068ac g     F .text	00000018 __fp_unlock_all
000107e0 g     F .text	00000060 altera_avalon_lcd_16207_write_fd
000142dc g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000740c g     F .text	0000000c localeconv
000008e0 g     F .text	00000134 usb_send_data
00010dac g     F .text	00000050 alt_ic_isr_register
0001430c g       *ABS*	00000000 _edata
0001623c g       *ABS*	00000000 _end
0000ab34 g     F .text	00000164 __fputwc
000001c0 g       *ABS*	00000000 __ram_exceptions_end
0000f434 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00010e84 g     F .text	0000008c alt_ic_irq_disable
000090b4 g     F .text	0000007c __swrite
00000530 g     F .text	0000016c dc_download
000142c8 g     O .rwdata	00000004 __malloc_trim_threshold
000073d4 g     F .text	0000000c __locale_msgcharset
000116e4 g     F .text	00000038 exit
00001864 g     F .text	00000068 get_ushort
00007278 g     F .text	000000c4 _fwalk_reent
000083ac g     F .text	000001fc __mdiff
00001a40 g     F .text	00000074 .hidden __modsi3
00014308 g     O .rwdata	00000004 __ctype_ptr__
08000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00006888 g     F .text	00000004 __sfp_lock_release
000122d1 g     O .rodata	00000101 _ctype_
00011a30 g     F .text	00000034 _exit
00010934 g     F .text	0000012c alt_alarm_start
00007418 g     F .text	000001bc __smakebuf_r
00002538 g     F .text	00000098 strlen
0001128c g     F .text	00000154 open
0000ceb8 g     F .text	000000dc .hidden __gedf2
000142d8 g     O .rwdata	00000004 __wctomb
0000936c g     F .text	00000018 __sprint_r
00010d78 g     F .text	00000034 alt_icache_flush_all
00014304 g     O .rwdata	00000004 alt_priority_mask
00010dfc g     F .text	00000088 alt_ic_irq_enable
000047c8 g     F .text	0000001c __vfprintf_internal
0000b190 g     F .text	0000005c _wctomb_r
0000d7a0 g     F .text	000008fc .hidden __subdf3
00007de0 g     F .text	000000b0 __lo0bits
000142f8 g     O .rwdata	00000008 alt_alarm_list
00010cb8 g     F .text	00000060 _do_ctors
0000b0a0 g     F .text	000000c0 wcrtomb
0000e340 g     F .text	000000d0 close
0000e670 g     F .text	00000084 alt_load
0000acbc g     F .text	00000080 fputwc
00001b84 g     F .text	00000014 free
0000688c g     F .text	00000004 __sinit_lock_acquire
00007b54 g     F .text	00000120 __multadd
000016d0 g     F .text	00000050 hpi_write_word
00007b2c g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_data_end+0xf8000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08407014 	ori	at,at,448
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)

00000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100:	0005313a 	rdctl	r2,ipending
 104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 10c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 114:	00800044 	movi	r2,1
 118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 11c:	e0fffb17 	ldw	r3,-20(fp)
 120:	e0bffc17 	ldw	r2,-16(fp)
 124:	1884703a 	and	r2,r3,r2
 128:	10001426 	beq	r2,zero,17c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	00800074 	movhi	r2,1
 130:	10984f04 	addi	r2,r2,24892
 134:	e0fffd17 	ldw	r3,-12(fp)
 138:	180690fa 	slli	r3,r3,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	10c00017 	ldw	r3,0(r2)
 144:	00800074 	movhi	r2,1
 148:	10984f04 	addi	r2,r2,24892
 14c:	e13ffd17 	ldw	r4,-12(fp)
 150:	200890fa 	slli	r4,r4,3
 154:	1105883a 	add	r2,r2,r4
 158:	10800104 	addi	r2,r2,4
 15c:	10800017 	ldw	r2,0(r2)
 160:	1009883a 	mov	r4,r2
 164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 16c:	0005313a 	rdctl	r2,ipending
 170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	00000706 	br	198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 17c:	e0bffc17 	ldw	r2,-16(fp)
 180:	1085883a 	add	r2,r2,r2
 184:	e0bffc15 	stw	r2,-16(fp)
      i++;
 188:	e0bffd17 	ldw	r2,-12(fp)
 18c:	10800044 	addi	r2,r2,1
 190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 194:	003fe106 	br	11c <__alt_data_end+0xf800011c>

    active = alt_irq_pending ();
 198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 19c:	e0bffb17 	ldw	r2,-20(fp)
 1a0:	103fdb1e 	bne	r2,zero,110 <__alt_data_end+0xf8000110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1a4:	0001883a 	nop
}
 1a8:	0001883a 	nop
 1ac:	e037883a 	mov	sp,fp
 1b0:	dfc00117 	ldw	ra,4(sp)
 1b4:	df000017 	ldw	fp,0(sp)
 1b8:	dec00204 	addi	sp,sp,8
 1bc:	f800283a 	ret

Disassembly of section .text:

000001c0 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1c0:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
     1c4:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     1c8:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1cc:	d6b0b114 	ori	gp,gp,49860
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1d0:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1d4:	10983114 	ori	r2,r2,24772

    movhi r3, %hi(__bss_end)
     1d8:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1dc:	18d88f14 	ori	r3,r3,25148

    beq r2, r3, 1f
     1e0:	10c00326 	beq	r2,r3,1f0 <_start+0x30>

0:
    stw zero, (r2)
     1e4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1e8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1ec:	10fffd36 	bltu	r2,r3,1e4 <__alt_data_end+0xf80001e4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1f0:	000e6700 	call	e670 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1f4:	000e8040 	call	e804 <alt_main>

000001f8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1f8:	003fff06 	br	1f8 <__alt_data_end+0xf80001f8>

000001fc <LCD_Init>:
#include <io.h>
#include "system.h"
#include "LCD.h"
//-------------------------------------------------------------------------
void LCD_Init()
{
     1fc:	defffe04 	addi	sp,sp,-8
     200:	dfc00115 	stw	ra,4(sp)
     204:	df000015 	stw	fp,0(sp)
     208:	d839883a 	mov	fp,sp
  lcd_write_cmd(LCD_BASE,0x38); 
     20c:	00c00e04 	movi	r3,56
     210:	00820034 	movhi	r2,2048
     214:	10802404 	addi	r2,r2,144
     218:	10c00035 	stwio	r3,0(r2)
  usleep(2000);
     21c:	0101f404 	movi	r4,2000
     220:	000ecb80 	call	ecb8 <usleep>
  lcd_write_cmd(LCD_BASE,0x0C);
     224:	00c00304 	movi	r3,12
     228:	00820034 	movhi	r2,2048
     22c:	10802404 	addi	r2,r2,144
     230:	10c00035 	stwio	r3,0(r2)
  usleep(2000);
     234:	0101f404 	movi	r4,2000
     238:	000ecb80 	call	ecb8 <usleep>
  lcd_write_cmd(LCD_BASE,0x01);
     23c:	00c00044 	movi	r3,1
     240:	00820034 	movhi	r2,2048
     244:	10802404 	addi	r2,r2,144
     248:	10c00035 	stwio	r3,0(r2)
  usleep(2000);
     24c:	0101f404 	movi	r4,2000
     250:	000ecb80 	call	ecb8 <usleep>
  lcd_write_cmd(LCD_BASE,0x06);
     254:	00c00184 	movi	r3,6
     258:	00820034 	movhi	r2,2048
     25c:	10802404 	addi	r2,r2,144
     260:	10c00035 	stwio	r3,0(r2)
  usleep(2000);
     264:	0101f404 	movi	r4,2000
     268:	000ecb80 	call	ecb8 <usleep>
  lcd_write_cmd(LCD_BASE,0x80);
     26c:	00c02004 	movi	r3,128
     270:	00820034 	movhi	r2,2048
     274:	10802404 	addi	r2,r2,144
     278:	10c00035 	stwio	r3,0(r2)
  usleep(2000);
     27c:	0101f404 	movi	r4,2000
     280:	000ecb80 	call	ecb8 <usleep>
}
     284:	0001883a 	nop
     288:	e037883a 	mov	sp,fp
     28c:	dfc00117 	ldw	ra,4(sp)
     290:	df000017 	ldw	fp,0(sp)
     294:	dec00204 	addi	sp,sp,8
     298:	f800283a 	ret

0000029c <LCD_Show_Text>:
//-------------------------------------------------------------------------
void LCD_Show_Text(char* Text)
{
     29c:	defffc04 	addi	sp,sp,-16
     2a0:	dfc00315 	stw	ra,12(sp)
     2a4:	df000215 	stw	fp,8(sp)
     2a8:	df000204 	addi	fp,sp,8
     2ac:	e13fff15 	stw	r4,-4(fp)
  int i;
  for(i=0;i<strlen(Text);i++)
     2b0:	e03ffe15 	stw	zero,-8(fp)
     2b4:	00000f06 	br	2f4 <LCD_Show_Text+0x58>
  {
    lcd_write_data(LCD_BASE,Text[i]);
     2b8:	e0bffe17 	ldw	r2,-8(fp)
     2bc:	e0ffff17 	ldw	r3,-4(fp)
     2c0:	1885883a 	add	r2,r3,r2
     2c4:	10800003 	ldbu	r2,0(r2)
     2c8:	10c03fcc 	andi	r3,r2,255
     2cc:	18c0201c 	xori	r3,r3,128
     2d0:	18ffe004 	addi	r3,r3,-128
     2d4:	00820034 	movhi	r2,2048
     2d8:	10802604 	addi	r2,r2,152
     2dc:	10c00035 	stwio	r3,0(r2)
    usleep(2000);
     2e0:	0101f404 	movi	r4,2000
     2e4:	000ecb80 	call	ecb8 <usleep>
}
//-------------------------------------------------------------------------
void LCD_Show_Text(char* Text)
{
  int i;
  for(i=0;i<strlen(Text);i++)
     2e8:	e0bffe17 	ldw	r2,-8(fp)
     2ec:	10800044 	addi	r2,r2,1
     2f0:	e0bffe15 	stw	r2,-8(fp)
     2f4:	e13fff17 	ldw	r4,-4(fp)
     2f8:	00025380 	call	2538 <strlen>
     2fc:	1007883a 	mov	r3,r2
     300:	e0bffe17 	ldw	r2,-8(fp)
     304:	10ffec36 	bltu	r2,r3,2b8 <__alt_data_end+0xf80002b8>
  {
    lcd_write_data(LCD_BASE,Text[i]);
    usleep(2000);
  }
}
     308:	0001883a 	nop
     30c:	e037883a 	mov	sp,fp
     310:	dfc00117 	ldw	ra,4(sp)
     314:	df000017 	ldw	fp,0(sp)
     318:	dec00204 	addi	sp,sp,8
     31c:	f800283a 	ret

00000320 <LCD_Line1>:
//-------------------------------------------------------------------------
void LCD_Line1()
{
     320:	defffe04 	addi	sp,sp,-8
     324:	dfc00115 	stw	ra,4(sp)
     328:	df000015 	stw	fp,0(sp)
     32c:	d839883a 	mov	fp,sp
  lcd_write_cmd(LCD_BASE,0x80);
     330:	00c02004 	movi	r3,128
     334:	00820034 	movhi	r2,2048
     338:	10802404 	addi	r2,r2,144
     33c:	10c00035 	stwio	r3,0(r2)
  usleep(2000);
     340:	0101f404 	movi	r4,2000
     344:	000ecb80 	call	ecb8 <usleep>
}
     348:	0001883a 	nop
     34c:	e037883a 	mov	sp,fp
     350:	dfc00117 	ldw	ra,4(sp)
     354:	df000017 	ldw	fp,0(sp)
     358:	dec00204 	addi	sp,sp,8
     35c:	f800283a 	ret

00000360 <LCD_Line2>:
void LCD_Line2()
{
     360:	defffe04 	addi	sp,sp,-8
     364:	dfc00115 	stw	ra,4(sp)
     368:	df000015 	stw	fp,0(sp)
     36c:	d839883a 	mov	fp,sp
  lcd_write_cmd(LCD_BASE,0xC0);
     370:	00c03004 	movi	r3,192
     374:	00820034 	movhi	r2,2048
     378:	10802404 	addi	r2,r2,144
     37c:	10c00035 	stwio	r3,0(r2)
  usleep(2000);
     380:	0101f404 	movi	r4,2000
     384:	000ecb80 	call	ecb8 <usleep>
}
     388:	0001883a 	nop
     38c:	e037883a 	mov	sp,fp
     390:	dfc00117 	ldw	ra,4(sp)
     394:	df000017 	ldw	fp,0(sp)
     398:	dec00204 	addi	sp,sp,8
     39c:	f800283a 	ret

000003a0 <LCD_Test>:
//-------------------------------------------------------------------------
void LCD_Test()
{
     3a0:	defff604 	addi	sp,sp,-40
     3a4:	dfc00915 	stw	ra,36(sp)
     3a8:	df000815 	stw	fp,32(sp)
     3ac:	df000804 	addi	fp,sp,32
  char Text1[16] = " Altera DE2-115 ";
     3b0:	009d1b34 	movhi	r2,29804
     3b4:	10904804 	addi	r2,r2,16672
     3b8:	e0bff815 	stw	r2,-32(fp)
     3bc:	00881874 	movhi	r2,8289
     3c0:	109c9944 	addi	r2,r2,29285
     3c4:	e0bff915 	stw	r2,-28(fp)
     3c8:	008b4cb4 	movhi	r2,11570
     3cc:	10915104 	addi	r2,r2,17732
     3d0:	e0bffa15 	stw	r2,-24(fp)
     3d4:	00880d74 	movhi	r2,8245
     3d8:	108c4c44 	addi	r2,r2,12593
     3dc:	e0bffb15 	stw	r2,-20(fp)
  char Text2[16] = "USB Device Test ";
     3e0:	008810b4 	movhi	r2,8258
     3e4:	1094d544 	addi	r2,r2,21333
     3e8:	e0bffc15 	stw	r2,-16(fp)
     3ec:	009a5db4 	movhi	r2,26998
     3f0:	10995104 	addi	r2,r2,25924
     3f4:	e0bffd15 	stw	r2,-12(fp)
     3f8:	00950834 	movhi	r2,21536
     3fc:	109958c4 	addi	r2,r2,25955
     400:	e0bffe15 	stw	r2,-8(fp)
     404:	00881d34 	movhi	r2,8308
     408:	109cd944 	addi	r2,r2,29541
     40c:	e0bfff15 	stw	r2,-4(fp)
  //  Initial LCD
  LCD_Init();
     410:	00001fc0 	call	1fc <LCD_Init>
  //  Show Text to LCD
  LCD_Show_Text(Text1);
     414:	e13ff804 	addi	r4,fp,-32
     418:	000029c0 	call	29c <LCD_Show_Text>
  //  Change Line2
  LCD_Line2();
     41c:	00003600 	call	360 <LCD_Line2>
  //  Show Text to LCD
  LCD_Show_Text(Text2);
     420:	e0bffc04 	addi	r2,fp,-16
     424:	1009883a 	mov	r4,r2
     428:	000029c0 	call	29c <LCD_Show_Text>
}
     42c:	0001883a 	nop
     430:	e037883a 	mov	sp,fp
     434:	dfc00117 	ldw	ra,4(sp)
     438:	df000017 	ldw	fp,0(sp)
     43c:	dec00204 	addi	sp,sp,8
     440:	f800283a 	ret

00000444 <dc_init_struct>:

/** local variable **/

DEVICE_STATUS device_status;

void dc_init_struct(void) {
     444:	deffff04 	addi	sp,sp,-4
     448:	df000015 	stw	fp,0(sp)
     44c:	d839883a 	mov	fp,sp
	device_status.hpi_status = 0;
     450:	00800074 	movhi	r2,1
     454:	10984a04 	addi	r2,r2,24872
     458:	1000000d 	sth	zero,0(r2)
	device_status.bEP1InTransfer = FALSE;
     45c:	00800074 	movhi	r2,1
     460:	10984a04 	addi	r2,r2,24872
     464:	10000115 	stw	zero,4(r2)
	device_status.bEP2InTransfer = FALSE;
     468:	00800074 	movhi	r2,1
     46c:	10984a04 	addi	r2,r2,24872
     470:	10000215 	stw	zero,8(r2)
	device_status.EP1_Transfer_Timeout = 0;
     474:	00800074 	movhi	r2,1
     478:	10984a04 	addi	r2,r2,24872
     47c:	10000415 	stw	zero,16(r2)
	device_status.bEP1_Transfer_Judge = FALSE;
     480:	00800074 	movhi	r2,1
     484:	10984a04 	addi	r2,r2,24872
     488:	10000315 	stw	zero,12(r2)
}
     48c:	0001883a 	nop
     490:	e037883a 	mov	sp,fp
     494:	df000017 	ldw	fp,0(sp)
     498:	dec00104 	addi	sp,sp,4
     49c:	f800283a 	ret

000004a0 <dc_clear_bug>:

void dc_clear_bug(void) {
     4a0:	defffd04 	addi	sp,sp,-12
     4a4:	dfc00215 	stw	ra,8(sp)
     4a8:	df000115 	stw	fp,4(sp)
     4ac:	df000104 	addi	fp,sp,4
	DEBUG_OUT("Clear up the interrupt\r\n");
     4b0:	01000074 	movhi	r4,1
     4b4:	21069904 	addi	r4,r4,6756
     4b8:	00023d40 	call	23d4 <printf>
     4bc:	01000074 	movhi	r4,1
     4c0:	21069b04 	addi	r4,r4,6764
     4c4:	00024d00 	call	24d0 <puts>
	alt_u16 intStat;
	hpi_read_mbx();
     4c8:	00016a00 	call	16a0 <hpi_read_mbx>
	hpi_read_status();
     4cc:	00016380 	call	1638 <hpi_read_status>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	hpi_read_reg(HPI_SIE1_MSG_ADR, &intStat);
     4d0:	e17fff04 	addi	r5,fp,-4
     4d4:	01005104 	movi	r4,324
     4d8:	00015a00 	call	15a0 <hpi_read_reg>
	hpi_write_reg(HPI_SIE1_MSG_ADR, 0);
     4dc:	000b883a 	mov	r5,zero
     4e0:	01005104 	movi	r4,324
     4e4:	00015ec0 	call	15ec <hpi_write_reg>
	hpi_read_reg(HPI_SIE2_MSG_ADR, &intStat);
     4e8:	e17fff04 	addi	r5,fp,-4
     4ec:	01005204 	movi	r4,328
     4f0:	00015a00 	call	15a0 <hpi_read_reg>
	hpi_write_reg(HPI_SIE2_MSG_ADR, 0);
     4f4:	000b883a 	mov	r5,zero
     4f8:	01005204 	movi	r4,328
     4fc:	00015ec0 	call	15ec <hpi_write_reg>

	hpi_write_reg(HOST1_STAT_REG, 0xFFFF);
     500:	017fffd4 	movui	r5,65535
     504:	01302414 	movui	r4,49296
     508:	00015ec0 	call	15ec <hpi_write_reg>
	hpi_write_reg(HOST2_STAT_REG, 0xFFFF);
     50c:	017fffd4 	movui	r5,65535
     510:	01302c14 	movui	r4,49328
     514:	00015ec0 	call	15ec <hpi_write_reg>
}
     518:	0001883a 	nop
     51c:	e037883a 	mov	sp,fp
     520:	dfc00117 	ldw	ra,4(sp)
     524:	df000017 	ldw	fp,0(sp)
     528:	dec00204 	addi	sp,sp,8
     52c:	f800283a 	ret

00000530 <dc_download>:
 *
 *  RETURNS: 
 *    SUCCESS         - Success
 *    ERROR           - Failure
 */
int dc_download(char * download_data, int max_try) {
     530:	defff904 	addi	sp,sp,-28
     534:	dfc00615 	stw	ra,24(sp)
     538:	df000515 	stw	fp,20(sp)
     53c:	df000504 	addi	fp,sp,20
     540:	e13ffe15 	stw	r4,-8(fp)
     544:	e17fff15 	stw	r5,-4(fp)
	DEBUG_OUT("+ dc_download ---- \n");
     548:	01000074 	movhi	r4,1
     54c:	21069904 	addi	r4,r4,6756
     550:	00023d40 	call	23d4 <printf>
     554:	01000074 	movhi	r4,1
     558:	2106a104 	addi	r4,r4,6788
     55c:	00024d00 	call	24d0 <puts>
	int try_i = 0;
     560:	e03ffb15 	stw	zero,-20(fp)
	int response = ERROR;
     564:	00bfffc4 	movi	r2,-1
     568:	e0bffc15 	stw	r2,-16(fp)
	unsigned short address;
	unsigned short download_length;

	while ((try_i < max_try) && (response == ERROR)) {
     56c:	00003706 	br	64c <dc_download+0x11c>

		/* Download asm code array to ASIC RAM  */
		if (download_data != NULL) {
     570:	e0bffe17 	ldw	r2,-8(fp)
     574:	10002826 	beq	r2,zero,618 <dc_download+0xe8>
			dc_clear_bug();
     578:	00004a00 	call	4a0 <dc_clear_bug>

			/* Org address */
			address = get_ushort(download_data, 0xe);
     57c:	01400384 	movi	r5,14
     580:	e13ffe17 	ldw	r4,-8(fp)
     584:	00018640 	call	1864 <get_ushort>
     588:	e0bffd0d 	sth	r2,-12(fp)

			download_length = get_ushort(download_data, 0xb) - 2;
     58c:	014002c4 	movi	r5,11
     590:	e13ffe17 	ldw	r4,-8(fp)
     594:	00018640 	call	1864 <get_ushort>
     598:	10bfff84 	addi	r2,r2,-2
     59c:	e0bffd8d 	sth	r2,-10(fp)

			DEBUG_OUT("dc_download: address=0x%x, download_length=0x%x\r\n",
     5a0:	01000074 	movhi	r4,1
     5a4:	21069904 	addi	r4,r4,6756
     5a8:	00023d40 	call	23d4 <printf>
     5ac:	e0bffd0b 	ldhu	r2,-12(fp)
     5b0:	e0fffd8b 	ldhu	r3,-10(fp)
     5b4:	180d883a 	mov	r6,r3
     5b8:	100b883a 	mov	r5,r2
     5bc:	01000074 	movhi	r4,1
     5c0:	2106a604 	addi	r4,r4,6808
     5c4:	00023d40 	call	23d4 <printf>
					address, download_length);

			if ((response = dc_download_code(address, download_length,
     5c8:	e0fffd0b 	ldhu	r3,-12(fp)
     5cc:	e13ffd8b 	ldhu	r4,-10(fp)
     5d0:	e0bffe17 	ldw	r2,-8(fp)
     5d4:	10800404 	addi	r2,r2,16
     5d8:	100d883a 	mov	r6,r2
     5dc:	200b883a 	mov	r5,r4
     5e0:	1809883a 	mov	r4,r3
     5e4:	000069c0 	call	69c <dc_download_code>
     5e8:	e0bffc15 	stw	r2,-16(fp)
     5ec:	e0bffc17 	ldw	r2,-16(fp)
     5f0:	10bfffd8 	cmpnei	r2,r2,-1
     5f4:	10001c1e 	bne	r2,zero,668 <dc_download+0x138>
					&download_data[16])) == ERROR) {
				DEBUG_ERR("dc_download: download error,  try_count=%d\r\n",
     5f8:	01000074 	movhi	r4,1
     5fc:	2106b304 	addi	r4,r4,6860
     600:	00023d40 	call	23d4 <printf>
     604:	e17ffb17 	ldw	r5,-20(fp)
     608:	01000074 	movhi	r4,1
     60c:	2106b604 	addi	r4,r4,6872
     610:	00023d40 	call	23d4 <printf>
     614:	00000806 	br	638 <dc_download+0x108>
			} else {
				goto _Finished_Download;
			}

		} else {
			DEBUG_OUT(
     618:	01000074 	movhi	r4,1
     61c:	21069904 	addi	r4,r4,6756
     620:	00023d40 	call	23d4 <printf>
     624:	01000074 	movhi	r4,1
     628:	2106c204 	addi	r4,r4,6920
     62c:	00023d40 	call	23d4 <printf>
					"dc_download:Null Code--Nothing had being download to the ASIC Ram!!");
			response = ERROR;
     630:	00bfffc4 	movi	r2,-1
     634:	e0bffc15 	stw	r2,-16(fp)
		}
		try_i++;
     638:	e0bffb17 	ldw	r2,-20(fp)
     63c:	10800044 	addi	r2,r2,1
     640:	e0bffb15 	stw	r2,-20(fp)
		usleep(10000);
     644:	0109c404 	movi	r4,10000
     648:	000ecb80 	call	ecb8 <usleep>
	int try_i = 0;
	int response = ERROR;
	unsigned short address;
	unsigned short download_length;

	while ((try_i < max_try) && (response == ERROR)) {
     64c:	e0fffb17 	ldw	r3,-20(fp)
     650:	e0bfff17 	ldw	r2,-4(fp)
     654:	1880050e 	bge	r3,r2,66c <dc_download+0x13c>
     658:	e0bffc17 	ldw	r2,-16(fp)
     65c:	10bfffe0 	cmpeqi	r2,r2,-1
     660:	103fc31e 	bne	r2,zero,570 <__alt_data_end+0xf8000570>
     664:	00000106 	br	66c <dc_download+0x13c>
			if ((response = dc_download_code(address, download_length,
					&download_data[16])) == ERROR) {
				DEBUG_ERR("dc_download: download error,  try_count=%d\r\n",
						try_i);
			} else {
				goto _Finished_Download;
     668:	0001883a 	nop
		}
		try_i++;
		usleep(10000);
	}
	_Finished_Download:
	DEBUG_OUT("- dc_download ---- \n");
     66c:	01000074 	movhi	r4,1
     670:	21069904 	addi	r4,r4,6756
     674:	00023d40 	call	23d4 <printf>
     678:	01000074 	movhi	r4,1
     67c:	2106d304 	addi	r4,r4,6988
     680:	00024d00 	call	24d0 <puts>
	return response;
     684:	e0bffc17 	ldw	r2,-16(fp)

}
     688:	e037883a 	mov	sp,fp
     68c:	dfc00117 	ldw	ra,4(sp)
     690:	df000017 	ldw	fp,0(sp)
     694:	dec00204 	addi	sp,sp,8
     698:	f800283a 	ret

0000069c <dc_download_code>:
 *  RETURNS: 
 *    SUCCESS         - Success
 *    ERROR           - Failure
 */

int dc_download_code(unsigned short chip_addr, int byte_length, char * data) {
     69c:	defff704 	addi	sp,sp,-36
     6a0:	dfc00815 	stw	ra,32(sp)
     6a4:	df000715 	stw	fp,28(sp)
     6a8:	df000704 	addi	fp,sp,28
     6ac:	2005883a 	mov	r2,r4
     6b0:	e17ffe15 	stw	r5,-8(fp)
     6b4:	e1bfff15 	stw	r6,-4(fp)
     6b8:	e0bffd0d 	sth	r2,-12(fp)
	int response = ERROR;
     6bc:	00bfffc4 	movi	r2,-1
     6c0:	e0bff915 	stw	r2,-28(fp)

	if (byte_length > 0) {
     6c4:	e0bffe17 	ldw	r2,-8(fp)
     6c8:	00803e0e 	bge	zero,r2,7c4 <dc_download_code+0x128>

		response = hpi_write_memory(chip_addr, data, byte_length);
     6cc:	e0bffd0b 	ldhu	r2,-12(fp)
     6d0:	e1bffe17 	ldw	r6,-8(fp)
     6d4:	e17fff17 	ldw	r5,-4(fp)
     6d8:	1009883a 	mov	r4,r2
     6dc:	00013bc0 	call	13bc <hpi_write_memory>
     6e0:	e0bff915 	stw	r2,-28(fp)
		char *cmpdata;
		cmpdata = malloc(byte_length);
     6e4:	e0bffe17 	ldw	r2,-8(fp)
     6e8:	1009883a 	mov	r4,r2
     6ec:	0001b700 	call	1b70 <malloc>
     6f0:	e0bffc15 	stw	r2,-16(fp)
		hpi_read_memory(chip_addr, cmpdata, byte_length);
     6f4:	e0bffd0b 	ldhu	r2,-12(fp)
     6f8:	e1bffe17 	ldw	r6,-8(fp)
     6fc:	e17ffc17 	ldw	r5,-16(fp)
     700:	1009883a 	mov	r4,r2
     704:	00012940 	call	1294 <hpi_read_memory>
		int i;
		bool data_checker = TRUE;
     708:	00800044 	movi	r2,1
     70c:	e0bffb15 	stw	r2,-20(fp)
		for (i = 0; i < byte_length; i++) {
     710:	e03ffa15 	stw	zero,-24(fp)
     714:	00001506 	br	76c <dc_download_code+0xd0>
			if (*(data + i) != *(cmpdata + i)) {
     718:	e0bffa17 	ldw	r2,-24(fp)
     71c:	e0ffff17 	ldw	r3,-4(fp)
     720:	1885883a 	add	r2,r3,r2
     724:	11000003 	ldbu	r4,0(r2)
     728:	e0bffa17 	ldw	r2,-24(fp)
     72c:	e0fffc17 	ldw	r3,-16(fp)
     730:	1885883a 	add	r2,r3,r2
     734:	10800003 	ldbu	r2,0(r2)
     738:	20c03fcc 	andi	r3,r4,255
     73c:	18c0201c 	xori	r3,r3,128
     740:	18ffe004 	addi	r3,r3,-128
     744:	10803fcc 	andi	r2,r2,255
     748:	1080201c 	xori	r2,r2,128
     74c:	10bfe004 	addi	r2,r2,-128
     750:	18800326 	beq	r3,r2,760 <dc_download_code+0xc4>
				//DEBUG_OUT("err[%d]: wrdata:0x%02X,rddata :0x%02X\n",i,(char)*(data+i),(char)*(cmpdata+i));
				// DEBUG_OUT("err[%d],",i);
				data_checker = FALSE;
     754:	e03ffb15 	stw	zero,-20(fp)
				response = ERROR;
     758:	00bfffc4 	movi	r2,-1
     75c:	e0bff915 	stw	r2,-28(fp)
		char *cmpdata;
		cmpdata = malloc(byte_length);
		hpi_read_memory(chip_addr, cmpdata, byte_length);
		int i;
		bool data_checker = TRUE;
		for (i = 0; i < byte_length; i++) {
     760:	e0bffa17 	ldw	r2,-24(fp)
     764:	10800044 	addi	r2,r2,1
     768:	e0bffa15 	stw	r2,-24(fp)
     76c:	e0fffa17 	ldw	r3,-24(fp)
     770:	e0bffe17 	ldw	r2,-8(fp)
     774:	18bfe816 	blt	r3,r2,718 <__alt_data_end+0xf8000718>
				data_checker = FALSE;
				response = ERROR;
			}
		}

		free(cmpdata);
     778:	e13ffc17 	ldw	r4,-16(fp)
     77c:	0001b840 	call	1b84 <free>

		if (data_checker == FALSE) {
     780:	e0bffb17 	ldw	r2,-20(fp)
     784:	1000061e 	bne	r2,zero,7a0 <dc_download_code+0x104>
			DEBUG_ERR("Data Checker ERROR! \n");
     788:	01000074 	movhi	r4,1
     78c:	2106b304 	addi	r4,r4,6860
     790:	00023d40 	call	23d4 <printf>
     794:	01000074 	movhi	r4,1
     798:	2106d804 	addi	r4,r4,7008
     79c:	00024d00 	call	24d0 <puts>
		}

		if (response == SUCCESS) {
     7a0:	e0bff917 	ldw	r2,-28(fp)
     7a4:	1000071e 	bne	r2,zero,7c4 <dc_download_code+0x128>

			//COMM_JUMP2CODE flag,it will be cleared when mailbox Ack
			hpi_write_reg(COMM_CODE_ADDR, chip_addr);
     7a8:	e0bffd0b 	ldhu	r2,-12(fp)
     7ac:	100b883a 	mov	r5,r2
     7b0:	01006f04 	movi	r4,444
     7b4:	00015ec0 	call	15ec <hpi_write_reg>

			response = hpi_command(COMM_JUMP2CODE);
     7b8:	01338014 	movui	r4,52736
     7bc:	00007dc0 	call	7dc <hpi_command>
     7c0:	e0bff915 	stw	r2,-28(fp)
		}
	}
	return response;
     7c4:	e0bff917 	ldw	r2,-28(fp)
}
     7c8:	e037883a 	mov	sp,fp
     7cc:	dfc00117 	ldw	ra,4(sp)
     7d0:	df000017 	ldw	fp,0(sp)
     7d4:	dec00204 	addi	sp,sp,8
     7d8:	f800283a 	ret

000007dc <hpi_command>:

int hpi_command(unsigned short cmd) {
     7dc:	defffb04 	addi	sp,sp,-20
     7e0:	dfc00415 	stw	ra,16(sp)
     7e4:	df000315 	stw	fp,12(sp)
     7e8:	df000304 	addi	fp,sp,12
     7ec:	2005883a 	mov	r2,r4
     7f0:	e0bfff0d 	sth	r2,-4(fp)
	alt_u32 Timeout;
	alt_u16 IntStat;

	IntStat = hpi_read_status();  // clear interrupt status register
     7f4:	00016380 	call	1638 <hpi_read_status>
     7f8:	e0bffd0d 	sth	r2,-12(fp)

	device_status.hpi_status |= IntStat; //record into hpi_status
     7fc:	00800074 	movhi	r2,1
     800:	10984a04 	addi	r2,r2,24872
     804:	10c0000b 	ldhu	r3,0(r2)
     808:	e0bffd0b 	ldhu	r2,-12(fp)
     80c:	1884b03a 	or	r2,r3,r2
     810:	1007883a 	mov	r3,r2
     814:	00800074 	movhi	r2,1
     818:	10984a04 	addi	r2,r2,24872
     81c:	10c0000d 	sth	r3,0(r2)

	hpi_write_mbx(cmd);
     820:	e0bfff0b 	ldhu	r2,-4(fp)
     824:	1009883a 	mov	r4,r2
     828:	00016680 	call	1668 <hpi_write_mbx>

	IntStat = hpi_read_status();
     82c:	00016380 	call	1638 <hpi_read_status>
     830:	e0bffd0d 	sth	r2,-12(fp)
	device_status.hpi_status |= IntStat;   //record into hpi_status
     834:	00800074 	movhi	r2,1
     838:	10984a04 	addi	r2,r2,24872
     83c:	10c0000b 	ldhu	r3,0(r2)
     840:	e0bffd0b 	ldhu	r2,-12(fp)
     844:	1884b03a 	or	r2,r3,r2
     848:	1007883a 	mov	r3,r2
     84c:	00800074 	movhi	r2,1
     850:	10984a04 	addi	r2,r2,24872
     854:	10c0000d 	sth	r3,0(r2)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
     858:	d0e78d17 	ldw	r3,-25036(gp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
     85c:	d0a78c17 	ldw	r2,-25040(gp)

	Timeout = alt_nticks() + alt_ticks_per_second();
     860:	1885883a 	add	r2,r3,r2
     864:	e0bffe15 	stw	r2,-8(fp)
	while (((IntStat & MBX_OUT_FLG) == 0) && (alt_nticks() < Timeout)) {
     868:	00000b06 	br	898 <hpi_command+0xbc>
		IntStat = hpi_read_status();
     86c:	00016380 	call	1638 <hpi_read_status>
     870:	e0bffd0d 	sth	r2,-12(fp)
		device_status.hpi_status |= IntStat;   //record into hpi_status
     874:	00800074 	movhi	r2,1
     878:	10984a04 	addi	r2,r2,24872
     87c:	10c0000b 	ldhu	r3,0(r2)
     880:	e0bffd0b 	ldhu	r2,-12(fp)
     884:	1884b03a 	or	r2,r3,r2
     888:	1007883a 	mov	r3,r2
     88c:	00800074 	movhi	r2,1
     890:	10984a04 	addi	r2,r2,24872
     894:	10c0000d 	sth	r3,0(r2)

	IntStat = hpi_read_status();
	device_status.hpi_status |= IntStat;   //record into hpi_status

	Timeout = alt_nticks() + alt_ticks_per_second();
	while (((IntStat & MBX_OUT_FLG) == 0) && (alt_nticks() < Timeout)) {
     898:	e0bffd0b 	ldhu	r2,-12(fp)
     89c:	1080004c 	andi	r2,r2,1
     8a0:	1000031e 	bne	r2,zero,8b0 <hpi_command+0xd4>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
     8a4:	d0e78d17 	ldw	r3,-25036(gp)
     8a8:	e0bffe17 	ldw	r2,-8(fp)
     8ac:	18bfef36 	bltu	r3,r2,86c <__alt_data_end+0xf800086c>
		IntStat = hpi_read_status();
		device_status.hpi_status |= IntStat;   //record into hpi_status
	}

	return ((hpi_read_mbx() == COMM_ACK) ? SUCCESS : ERROR);
     8b0:	00016a00 	call	16a0 <hpi_read_mbx>
     8b4:	10bfffcc 	andi	r2,r2,65535
     8b8:	1083fb58 	cmpnei	r2,r2,4077
     8bc:	1000021e 	bne	r2,zero,8c8 <hpi_command+0xec>
     8c0:	0005883a 	mov	r2,zero
     8c4:	00000106 	br	8cc <hpi_command+0xf0>
     8c8:	00bfffc4 	movi	r2,-1
}
     8cc:	e037883a 	mov	sp,fp
     8d0:	dfc00117 	ldw	ra,4(sp)
     8d4:	df000017 	ldw	fp,0(sp)
     8d8:	dec00204 	addi	sp,sp,8
     8dc:	f800283a 	ret

000008e0 <usb_send_data>:

int usb_send_data(unsigned short endpoint, unsigned short send_buffer_location,
		unsigned char * data,  // 
		int byte_length)

{
     8e0:	defff704 	addi	sp,sp,-36
     8e4:	dfc00815 	stw	ra,32(sp)
     8e8:	df000715 	stw	fp,28(sp)
     8ec:	df000704 	addi	fp,sp,28
     8f0:	2007883a 	mov	r3,r4
     8f4:	2805883a 	mov	r2,r5
     8f8:	e1bffe15 	stw	r6,-8(fp)
     8fc:	e1ffff15 	stw	r7,-4(fp)
     900:	e0fffc0d 	sth	r3,-16(fp)
     904:	e0bffd0d 	sth	r2,-12(fp)
	int response = ERROR;
     908:	00bfffc4 	movi	r2,-1
     90c:	e0bff915 	stw	r2,-28(fp)
	if (endpoint == 1) {
     910:	e0bffc0b 	ldhu	r2,-16(fp)
     914:	10800058 	cmpnei	r2,r2,1
     918:	1000381e 	bne	r2,zero,9fc <usb_send_data+0x11c>

		if (device_status.bEP1InTransfer == FALSE) {
     91c:	00800074 	movhi	r2,1
     920:	10984a04 	addi	r2,r2,24872
     924:	10800117 	ldw	r2,4(r2)
     928:	1000341e 	bne	r2,zero,9fc <usb_send_data+0x11c>
			//you can set bEP1InTransfer TRUE when you want to make sure this transaction to finish
			//then you also need to do something when  you need to send data while endpoint is in transfer (list to send ??)

			TRANSFER_FRAME frame;

			frame.wNextLink = 0;
     92c:	e03ffa0d 	sth	zero,-24(fp)
			frame.wAddress = send_buffer_location;
     930:	e0bffd0b 	ldhu	r2,-12(fp)
     934:	e0bffa8d 	sth	r2,-22(fp)
			frame.wLength = byte_length;
     938:	e0bfff17 	ldw	r2,-4(fp)
     93c:	e0bffb0d 	sth	r2,-20(fp)
			frame.wCallBack = 0;
     940:	e03ffb8d 	sth	zero,-18(fp)

			/* write the data to the RAM buffer */
			hpi_write_memory(send_buffer_location, (char *) data, byte_length);
     944:	e0bffd0b 	ldhu	r2,-12(fp)
     948:	e1bfff17 	ldw	r6,-4(fp)
     94c:	e17ffe17 	ldw	r5,-8(fp)
     950:	1009883a 	mov	r4,r2
     954:	00013bc0 	call	13bc <hpi_write_memory>

			/* Write control structure to the RAM buffer */
			hpi_write_memory(EP1_TRANSFER_STRUCT_ADDRESS, (char*) &frame,
     958:	e0bffa04 	addi	r2,fp,-24
     95c:	01800204 	movi	r6,8
     960:	100b883a 	mov	r5,r2
     964:	01040004 	movi	r4,4096
     968:	00013bc0 	call	13bc <hpi_write_memory>
					sizeof(TRANSFER_FRAME));

			//execute SUSB2_SEND_INT
			hpi_write_reg(COMM_INT_NUM, SUSB2_SEND_INT);
     96c:	01401804 	movi	r5,96
     970:	01007084 	movi	r4,450
     974:	00015ec0 	call	15ec <hpi_write_reg>

			/* Set Register values */
			hpi_write_reg(COMM_R0, 0);
     978:	000b883a 	mov	r5,zero
     97c:	01007104 	movi	r4,452
     980:	00015ec0 	call	15ec <hpi_write_reg>
			hpi_write_reg(COMM_R1, endpoint & 0x000f);
     984:	e0bffc0b 	ldhu	r2,-16(fp)
     988:	108003cc 	andi	r2,r2,15
     98c:	100b883a 	mov	r5,r2
     990:	01007184 	movi	r4,454
     994:	00015ec0 	call	15ec <hpi_write_reg>
			hpi_write_reg(COMM_R8, EP1_TRANSFER_STRUCT_ADDRESS);
     998:	01440004 	movi	r5,4096
     99c:	01007504 	movi	r4,468
     9a0:	00015ec0 	call	15ec <hpi_write_reg>

			response = hpi_command(COMM_EXEC_INT);
     9a4:	01338054 	movui	r4,52737
     9a8:	00007dc0 	call	7dc <hpi_command>
     9ac:	e0bff915 	stw	r2,-28(fp)

			if (response == SUCCESS) {
     9b0:	e0bff917 	ldw	r2,-28(fp)
     9b4:	10000b1e 	bne	r2,zero,9e4 <usb_send_data+0x104>
				DEBUG_OUT("send success!\n");
     9b8:	01000074 	movhi	r4,1
     9bc:	21069904 	addi	r4,r4,6756
     9c0:	00023d40 	call	23d4 <printf>
     9c4:	01000074 	movhi	r4,1
     9c8:	2106de04 	addi	r4,r4,7032
     9cc:	00024d00 	call	24d0 <puts>
				device_status.bEP1InTransfer = TRUE;
     9d0:	00800074 	movhi	r2,1
     9d4:	10984a04 	addi	r2,r2,24872
     9d8:	00c00044 	movi	r3,1
     9dc:	10c00115 	stw	r3,4(r2)
     9e0:	00000606 	br	9fc <usb_send_data+0x11c>
			} else {
				DEBUG_OUT("send failed!\n");
     9e4:	01000074 	movhi	r4,1
     9e8:	21069904 	addi	r4,r4,6756
     9ec:	00023d40 	call	23d4 <printf>
     9f0:	01000074 	movhi	r4,1
     9f4:	2106e204 	addi	r4,r4,7048
     9f8:	00024d00 	call	24d0 <puts>
		}
	} else {
		// Do something here for other endpoint 
		// DEBUG_OUT("usb_send_data: endpoint %d. Nothing had beeing done!\n",endpoint);
	}
	return response;
     9fc:	e0bff917 	ldw	r2,-28(fp)
}
     a00:	e037883a 	mov	sp,fp
     a04:	dfc00117 	ldw	ra,4(sp)
     a08:	df000017 	ldw	fp,0(sp)
     a0c:	dec00204 	addi	sp,sp,8
     a10:	f800283a 	ret

00000a14 <usb_enable_receive_data>:
 */

int usb_enable_receive_data(unsigned short endpoint,
		unsigned short receive_buffer_location, int byte_length)

{
     a14:	defff804 	addi	sp,sp,-32
     a18:	dfc00715 	stw	ra,28(sp)
     a1c:	df000615 	stw	fp,24(sp)
     a20:	df000604 	addi	fp,sp,24
     a24:	2007883a 	mov	r3,r4
     a28:	2805883a 	mov	r2,r5
     a2c:	e1bfff15 	stw	r6,-4(fp)
     a30:	e0fffd0d 	sth	r3,-12(fp)
     a34:	e0bffe0d 	sth	r2,-8(fp)
	int response = ERROR;
     a38:	00bfffc4 	movi	r2,-1
     a3c:	e0bffa15 	stw	r2,-24(fp)
	if (endpoint == 2) {
     a40:	e0bffd0b 	ldhu	r2,-12(fp)
     a44:	10800098 	cmpnei	r2,r2,2
     a48:	1000371e 	bne	r2,zero,b28 <usb_enable_receive_data+0x114>

		if (device_status.bEP2InTransfer == FALSE) {
     a4c:	00800074 	movhi	r2,1
     a50:	10984a04 	addi	r2,r2,24872
     a54:	10800217 	ldw	r2,8(r2)
     a58:	10002c1e 	bne	r2,zero,b0c <usb_enable_receive_data+0xf8>

//            device_status.bEP2InTransfer = TRUE;

			TRANSFER_FRAME frame;

			frame.wNextLink = 0;
     a5c:	e03ffb0d 	sth	zero,-20(fp)
			frame.wAddress = receive_buffer_location;
     a60:	e0bffe0b 	ldhu	r2,-8(fp)
     a64:	e0bffb8d 	sth	r2,-18(fp)
			frame.wLength = byte_length;
     a68:	e0bfff17 	ldw	r2,-4(fp)
     a6c:	e0bffc0d 	sth	r2,-16(fp)
			frame.wCallBack = 0;
     a70:	e03ffc8d 	sth	zero,-14(fp)

			/* Write control structure to the RAM buffer */
			hpi_write_memory(EP2_TRANSFER_STRUCT_ADDRESS, (char*) &frame,
     a74:	e0bffb04 	addi	r2,fp,-20
     a78:	01800204 	movi	r6,8
     a7c:	100b883a 	mov	r5,r2
     a80:	01080004 	movi	r4,8192
     a84:	00013bc0 	call	13bc <hpi_write_memory>
					sizeof(TRANSFER_FRAME));

			//execute SUSB2_SEND_INT
			hpi_write_reg(COMM_INT_NUM, SUSB2_RECEIVE_INT);
     a88:	01401844 	movi	r5,97
     a8c:	01007084 	movi	r4,450
     a90:	00015ec0 	call	15ec <hpi_write_reg>

			/* Set Register values */
			hpi_write_reg(COMM_R0, 0);
     a94:	000b883a 	mov	r5,zero
     a98:	01007104 	movi	r4,452
     a9c:	00015ec0 	call	15ec <hpi_write_reg>
			hpi_write_reg(COMM_R1, endpoint & 0x000f);
     aa0:	e0bffd0b 	ldhu	r2,-12(fp)
     aa4:	108003cc 	andi	r2,r2,15
     aa8:	100b883a 	mov	r5,r2
     aac:	01007184 	movi	r4,454
     ab0:	00015ec0 	call	15ec <hpi_write_reg>
			hpi_write_reg(COMM_R8, EP2_TRANSFER_STRUCT_ADDRESS);
     ab4:	01480004 	movi	r5,8192
     ab8:	01007504 	movi	r4,468
     abc:	00015ec0 	call	15ec <hpi_write_reg>

			response = hpi_command(COMM_EXEC_INT);
     ac0:	01338054 	movui	r4,52737
     ac4:	00007dc0 	call	7dc <hpi_command>
     ac8:	e0bffa15 	stw	r2,-24(fp)
			if (response == SUCCESS) {
     acc:	e0bffa17 	ldw	r2,-24(fp)
     ad0:	1000071e 	bne	r2,zero,af0 <usb_enable_receive_data+0xdc>
				DEBUG_OUT("receive enable success!\n");
     ad4:	01000074 	movhi	r4,1
     ad8:	21069904 	addi	r4,r4,6756
     adc:	00023d40 	call	23d4 <printf>
     ae0:	01000074 	movhi	r4,1
     ae4:	2106e604 	addi	r4,r4,7064
     ae8:	00024d00 	call	24d0 <puts>
     aec:	00001606 	br	b48 <usb_enable_receive_data+0x134>
			} else {
				DEBUG_OUT("Receive enable failed!\n");
     af0:	01000074 	movhi	r4,1
     af4:	21069904 	addi	r4,r4,6756
     af8:	00023d40 	call	23d4 <printf>
     afc:	01000074 	movhi	r4,1
     b00:	2106ec04 	addi	r4,r4,7088
     b04:	00024d00 	call	24d0 <puts>
     b08:	00000f06 	br	b48 <usb_enable_receive_data+0x134>
			}
		} else {
			DEBUG_OUT("usb_receive_data: ep2 is enabled!\n");
     b0c:	01000074 	movhi	r4,1
     b10:	21069904 	addi	r4,r4,6756
     b14:	00023d40 	call	23d4 <printf>
     b18:	01000074 	movhi	r4,1
     b1c:	2106f204 	addi	r4,r4,7112
     b20:	00024d00 	call	24d0 <puts>
     b24:	00000806 	br	b48 <usb_enable_receive_data+0x134>
		}
	} else {
		// Do something here for other endpoint 
		DEBUG_OUT("usb_receive_data: endpoint %d. Nothing had being done!\n",
     b28:	01000074 	movhi	r4,1
     b2c:	21069904 	addi	r4,r4,6756
     b30:	00023d40 	call	23d4 <printf>
     b34:	e0bffd0b 	ldhu	r2,-12(fp)
     b38:	100b883a 	mov	r5,r2
     b3c:	01000074 	movhi	r4,1
     b40:	2106fb04 	addi	r4,r4,7148
     b44:	00023d40 	call	23d4 <printf>
				endpoint);
	}

	return response;
     b48:	e0bffa17 	ldw	r2,-24(fp)
}
     b4c:	e037883a 	mov	sp,fp
     b50:	dfc00117 	ldw	ra,4(sp)
     b54:	df000017 	ldw	fp,0(sp)
     b58:	dec00204 	addi	sp,sp,8
     b5c:	f800283a 	ret

00000b60 <dcProcessEvent>:
 *  DESCRIPTION:
 *    This function read the SIE2 MSG and hanlder it
 *
 *  RETURNS:  void
 */
void dcProcessEvent(void){
     b60:	defffd04 	addi	sp,sp,-12
     b64:	dfc00215 	stw	ra,8(sp)
     b68:	df000115 	stw	fp,4(sp)
     b6c:	df000104 	addi	fp,sp,4
       */
       
        // a loop checker is enough in this demo
                    alt_u16 message;
                    // See which endpoint is interrupting
                    hpi_read_reg(HPI_SIE2_MSG_ADR,(alt_u16 *)&message);
     b70:	e17fff04 	addi	r5,fp,-4
     b74:	01005204 	movi	r4,328
     b78:	00015a00 	call	15a0 <hpi_read_reg>
                    
                    if(message)  hpi_write_reg(HPI_SIE2_MSG_ADR, 0);  //clear the sie mailbox
     b7c:	e0bfff0b 	ldhu	r2,-4(fp)
     b80:	10bfffcc 	andi	r2,r2,65535
     b84:	10000326 	beq	r2,zero,b94 <dcProcessEvent+0x34>
     b88:	000b883a 	mov	r5,zero
     b8c:	01005204 	movi	r4,328
     b90:	00015ec0 	call	15ec <hpi_write_reg>
                    
                    //handle which necessary
                    message &= (SUSB_EP1_MSG | SUSB_EP2_MSG | SUSB_RST_MSG | SUSB_CFG_MSG | SUSB_CLASS_MSG | SUSB_SUS_MSG);
     b94:	e0bfff0b 	ldhu	r2,-4(fp)
     b98:	108b418c 	andi	r2,r2,11526
     b9c:	e0bfff0d 	sth	r2,-4(fp)
                  
                    if(message) 
     ba0:	e0bfff0b 	ldhu	r2,-4(fp)
     ba4:	10bfffcc 	andi	r2,r2,65535
     ba8:	10000426 	beq	r2,zero,bbc <dcProcessEvent+0x5c>
                    {
                        sie2_msg_handler( message); //loop while msg = 0
     bac:	e0bfff0b 	ldhu	r2,-4(fp)
     bb0:	10bfffcc 	andi	r2,r2,65535
     bb4:	1009883a 	mov	r4,r2
     bb8:	0000bd40 	call	bd4 <sie2_msg_handler>
                    }

}
     bbc:	0001883a 	nop
     bc0:	e037883a 	mov	sp,fp
     bc4:	dfc00117 	ldw	ra,4(sp)
     bc8:	df000017 	ldw	fp,0(sp)
     bcc:	dec00204 	addi	sp,sp,8
     bd0:	f800283a 	ret

00000bd4 <sie2_msg_handler>:
 *    This function  handle the SIE2 message
 *
 *  RETURNS:  void
 */
void sie2_msg_handler(unsigned short message)
{
     bd4:	defffb04 	addi	sp,sp,-20
     bd8:	dfc00415 	stw	ra,16(sp)
     bdc:	df000315 	stw	fp,12(sp)
     be0:	dc000215 	stw	r16,8(sp)
     be4:	df000304 	addi	fp,sp,12
     be8:	2005883a 	mov	r2,r4
     bec:	e0bffe0d 	sth	r2,-8(fp)
  alt_u32 Timeout;
	  while(message) {
     bf0:	0000d406 	br	f44 <sie2_msg_handler+0x370>
       
            if(message & SUSB_RST_MSG)
     bf4:	e0bffe0b 	ldhu	r2,-8(fp)
     bf8:	10bfffcc 	andi	r2,r2,65535
     bfc:	1080400c 	andi	r2,r2,256
     c00:	10002626 	beq	r2,zero,c9c <sie2_msg_handler+0xc8>
             {
              DEBUG_OUT("[sie2 msg]:SUSB_RST_MSG\n");
     c04:	01000074 	movhi	r4,1
     c08:	21070904 	addi	r4,r4,7204
     c0c:	00023d40 	call	23d4 <printf>
     c10:	01000074 	movhi	r4,1
     c14:	21070b04 	addi	r4,r4,7212
     c18:	00024d00 	call	24d0 <puts>
     c1c:	d4278d17 	ldw	r16,-25036(gp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
     c20:	d0a78c17 	ldw	r2,-25040(gp)


       	         Timeout = alt_nticks() + alt_ticks_per_second()/3;
     c24:	014000c4 	movi	r5,3
     c28:	1009883a 	mov	r4,r2
     c2c:	0001ab40 	call	1ab4 <__udivsi3>
     c30:	8085883a 	add	r2,r16,r2
     c34:	e0bffd15 	stw	r2,-12(fp)
                 while((hpi_command(COMM_RESET)!= SUCCESS)&&  alt_nticks()<Timeout){
     c38:	00000206 	br	c44 <sie2_msg_handler+0x70>
           	        usleep(1000)  ;
     c3c:	0100fa04 	movi	r4,1000
     c40:	000ecb80 	call	ecb8 <usleep>
             {
              DEBUG_OUT("[sie2 msg]:SUSB_RST_MSG\n");


       	         Timeout = alt_nticks() + alt_ticks_per_second()/3;
                 while((hpi_command(COMM_RESET)!= SUCCESS)&&  alt_nticks()<Timeout){
     c44:	013e9414 	movui	r4,64080
     c48:	00007dc0 	call	7dc <hpi_command>
     c4c:	10000326 	beq	r2,zero,c5c <sie2_msg_handler+0x88>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
     c50:	d0e78d17 	ldw	r3,-25036(gp)
     c54:	e0bffd17 	ldw	r2,-12(fp)
     c58:	18bff836 	bltu	r3,r2,c3c <__alt_data_end+0xf8000c3c>
     c5c:	d0a78d17 	ldw	r2,-25036(gp)
           	        usleep(1000)  ;
                 }
                 if(alt_nticks()>Timeout){
     c60:	e0fffd17 	ldw	r3,-12(fp)
     c64:	1880072e 	bgeu	r3,r2,c84 <sie2_msg_handler+0xb0>
           	          DEBUG_OUT("device COMM_RESET failed\n");
     c68:	01000074 	movhi	r4,1
     c6c:	21070904 	addi	r4,r4,7204
     c70:	00023d40 	call	23d4 <printf>
     c74:	01000074 	movhi	r4,1
     c78:	21071104 	addi	r4,r4,7236
     c7c:	00024d00 	call	24d0 <puts>
     c80:	00000606 	br	c9c <sie2_msg_handler+0xc8>
                 }else{
           	          DEBUG_OUT("device COMM_RESET success !!\n");
     c84:	01000074 	movhi	r4,1
     c88:	21070904 	addi	r4,r4,7204
     c8c:	00023d40 	call	23d4 <printf>
     c90:	01000074 	movhi	r4,1
     c94:	21071804 	addi	r4,r4,7264
     c98:	00024d00 	call	24d0 <puts>
                 }
             }
             if(message & SUSB_SOF_MSG)
     c9c:	e0bffe0b 	ldhu	r2,-8(fp)
     ca0:	10bfffcc 	andi	r2,r2,65535
     ca4:	1080800c 	andi	r2,r2,512
     ca8:	10000626 	beq	r2,zero,cc4 <sie2_msg_handler+0xf0>
             {
              DEBUG_OUT("[sie2 msg]:SUSB_SOF_MSG\n");
     cac:	01000074 	movhi	r4,1
     cb0:	21070904 	addi	r4,r4,7204
     cb4:	00023d40 	call	23d4 <printf>
     cb8:	01000074 	movhi	r4,1
     cbc:	21072004 	addi	r4,r4,7296
     cc0:	00024d00 	call	24d0 <puts>
              // do something
             }
             
            if(message & SUSB_CFG_MSG)
     cc4:	e0bffe0b 	ldhu	r2,-8(fp)
     cc8:	10bfffcc 	andi	r2,r2,65535
     ccc:	1081000c 	andi	r2,r2,1024
     cd0:	10002a26 	beq	r2,zero,d7c <sie2_msg_handler+0x1a8>
               {
               DEBUG_OUT("[sie2 msg]:SUSB_CFG_MSG\n");
     cd4:	01000074 	movhi	r4,1
     cd8:	21070904 	addi	r4,r4,7204
     cdc:	00023d40 	call	23d4 <printf>
     ce0:	01000074 	movhi	r4,1
     ce4:	21072604 	addi	r4,r4,7320
     ce8:	00024d00 	call	24d0 <puts>
               
               dc_init_struct();
     cec:	00004440 	call	444 <dc_init_struct>
             
               //Lcd show default words
               LCD_Test();
     cf0:	00003a00 	call	3a0 <LCD_Test>
               
               //SEG7_8 show default values
               IOWR(SEG7_DISPLAY_BASE,0,0); 
     cf4:	0007883a 	mov	r3,zero
     cf8:	00820034 	movhi	r2,2048
     cfc:	10802804 	addi	r2,r2,160
     d00:	10c00035 	stwio	r3,0(r2)
               
               //LED  all turn off
               IOWR(LED_GREEN_BASE,0,0);
     d04:	0007883a 	mov	r3,zero
     d08:	00820034 	movhi	r2,2048
     d0c:	10801c04 	addi	r2,r2,112
     d10:	10c00035 	stwio	r3,0(r2)
               IOWR(LED_RED_BASE, 0 ,0);
     d14:	0007883a 	mov	r3,zero
     d18:	00820034 	movhi	r2,2048
     d1c:	10802004 	addi	r2,r2,128
     d20:	10c00035 	stwio	r3,0(r2)
               
               old_button_sw_status.button = IORD(BUTTON_PIO_BASE,0)&BUTTON_FLAG;
     d24:	00820034 	movhi	r2,2048
     d28:	10801804 	addi	r2,r2,96
     d2c:	10800037 	ldwio	r2,0(r2)
     d30:	108003cc 	andi	r2,r2,15
     d34:	d0a78005 	stb	r2,-25088(gp)
               old_button_sw_status.sw  =  IORD(SWITCH_PIO_BASE,0)&SW_FLAG;
     d38:	00820034 	movhi	r2,2048
     d3c:	10801404 	addi	r2,r2,80
     d40:	10800037 	ldwio	r2,0(r2)
     d44:	1007883a 	mov	r3,r2
     d48:	00800134 	movhi	r2,4
     d4c:	10bfffc4 	addi	r2,r2,-1
     d50:	1884703a 	and	r2,r3,r2
     d54:	d0a78115 	stw	r2,-25084(gp)
                              
               usb_enable_receive_data(2,EP2_RECEIVE_BUF_ADDRESS,EP2_DATA_DEFAULT_LEN);
     d58:	01801004 	movi	r6,64
     d5c:	01484004 	movi	r5,8448
     d60:	01000084 	movi	r4,2
     d64:	0000a140 	call	a14 <usb_enable_receive_data>

               usb_send_data(1,EP1_SEND_BUF_ADDRESS,(char *)&old_button_sw_status,sizeof(OUT_PACKET)); // send switch and button status to pc
     d68:	01c00204 	movi	r7,8
     d6c:	d1a78004 	addi	r6,gp,-25088
     d70:	01444004 	movi	r5,4352
     d74:	01000044 	movi	r4,1
     d78:	00008e00 	call	8e0 <usb_send_data>
              }

         if(message & SUSB_SUS_MSG)
     d7c:	e0bffe0b 	ldhu	r2,-8(fp)
     d80:	10bfffcc 	andi	r2,r2,65535
     d84:	1082000c 	andi	r2,r2,2048
     d88:	10000626 	beq	r2,zero,da4 <sie2_msg_handler+0x1d0>
           {
            DEBUG_OUT("[sie2 msg]:SUSB_SUS_MSG\n");
     d8c:	01000074 	movhi	r4,1
     d90:	21070904 	addi	r4,r4,7204
     d94:	00023d40 	call	23d4 <printf>
     d98:	01000074 	movhi	r4,1
     d9c:	21072c04 	addi	r4,r4,7344
     da0:	00024d00 	call	24d0 <puts>
            // do something
           }
       
       
           if(message & SUSB_EP0_MSG)
     da4:	e0bffe0b 	ldhu	r2,-8(fp)
     da8:	10bfffcc 	andi	r2,r2,65535
     dac:	1080004c 	andi	r2,r2,1
     db0:	10000626 	beq	r2,zero,dcc <sie2_msg_handler+0x1f8>
            {
              DEBUG_OUT("[sie2 msg]:ep0 msg\n");
     db4:	01000074 	movhi	r4,1
     db8:	21070904 	addi	r4,r4,7204
     dbc:	00023d40 	call	23d4 <printf>
     dc0:	01000074 	movhi	r4,1
     dc4:	21073204 	addi	r4,r4,7368
     dc8:	00024d00 	call	24d0 <puts>
              /* ignore ep0 */
            }
           if(message & SUSB_EP1_MSG)
     dcc:	e0bffe0b 	ldhu	r2,-8(fp)
     dd0:	10bfffcc 	andi	r2,r2,65535
     dd4:	1080008c 	andi	r2,r2,2
     dd8:	10000926 	beq	r2,zero,e00 <sie2_msg_handler+0x22c>
            {
              DEBUG_OUT("[sie2 msg]: ep1 msg: data had been received by host\n");
     ddc:	01000074 	movhi	r4,1
     de0:	21070904 	addi	r4,r4,7204
     de4:	00023d40 	call	23d4 <printf>
     de8:	01000074 	movhi	r4,1
     dec:	21073704 	addi	r4,r4,7388
     df0:	00024d00 	call	24d0 <puts>
              device_status.bEP1InTransfer = FALSE ;
     df4:	00800074 	movhi	r2,1
     df8:	10984a04 	addi	r2,r2,24872
     dfc:	10000115 	stw	zero,4(r2)
            }
           if(message & SUSB_EP2_MSG)
     e00:	e0bffe0b 	ldhu	r2,-8(fp)
     e04:	10bfffcc 	andi	r2,r2,65535
     e08:	1080010c 	andi	r2,r2,4
     e0c:	10000e26 	beq	r2,zero,e48 <sie2_msg_handler+0x274>
            {
              DEBUG_OUT("[sie2 msg]:ep2 msg: receiving host data \n");
     e10:	01000074 	movhi	r4,1
     e14:	21070904 	addi	r4,r4,7204
     e18:	00023d40 	call	23d4 <printf>
     e1c:	01000074 	movhi	r4,1
     e20:	21074404 	addi	r4,r4,7440
     e24:	00024d00 	call	24d0 <puts>
              device_status.bEP2InTransfer = FALSE ;
     e28:	00800074 	movhi	r2,1
     e2c:	10984a04 	addi	r2,r2,24872
     e30:	10000215 	stw	zero,8(r2)
              ep2_isr();
     e34:	0000f6c0 	call	f6c <ep2_isr>
              usb_enable_receive_data(2,EP2_RECEIVE_BUF_ADDRESS,EP2_DATA_DEFAULT_LEN);
     e38:	01801004 	movi	r6,64
     e3c:	01484004 	movi	r5,8448
     e40:	01000084 	movi	r4,2
     e44:	0000a140 	call	a14 <usb_enable_receive_data>
            }
              if(message & SUSB_EP3_MSG)
     e48:	e0bffe0b 	ldhu	r2,-8(fp)
     e4c:	10bfffcc 	andi	r2,r2,65535
     e50:	1080020c 	andi	r2,r2,8
     e54:	10000626 	beq	r2,zero,e70 <sie2_msg_handler+0x29c>
            {
              DEBUG_OUT("[sie2 msg]:ep3 msg\n");
     e58:	01000074 	movhi	r4,1
     e5c:	21070904 	addi	r4,r4,7204
     e60:	00023d40 	call	23d4 <printf>
     e64:	01000074 	movhi	r4,1
     e68:	21074f04 	addi	r4,r4,7484
     e6c:	00024d00 	call	24d0 <puts>
              // do something
            }
               if(message & SUSB_EP4_MSG)
     e70:	e0bffe0b 	ldhu	r2,-8(fp)
     e74:	10bfffcc 	andi	r2,r2,65535
     e78:	1080040c 	andi	r2,r2,16
     e7c:	10000626 	beq	r2,zero,e98 <sie2_msg_handler+0x2c4>
            {
              DEBUG_OUT("[sie2 msg]:ep4 msg\n");
     e80:	01000074 	movhi	r4,1
     e84:	21070904 	addi	r4,r4,7204
     e88:	00023d40 	call	23d4 <printf>
     e8c:	01000074 	movhi	r4,1
     e90:	21075404 	addi	r4,r4,7504
     e94:	00024d00 	call	24d0 <puts>
              // do something
            }
           if(message & SUSB_EP5_MSG)
     e98:	e0bffe0b 	ldhu	r2,-8(fp)
     e9c:	10bfffcc 	andi	r2,r2,65535
     ea0:	1080080c 	andi	r2,r2,32
     ea4:	10000626 	beq	r2,zero,ec0 <sie2_msg_handler+0x2ec>
            {
              DEBUG_OUT("[sie2 msg]:ep5 msg\n");
     ea8:	01000074 	movhi	r4,1
     eac:	21070904 	addi	r4,r4,7204
     eb0:	00023d40 	call	23d4 <printf>
     eb4:	01000074 	movhi	r4,1
     eb8:	21075904 	addi	r4,r4,7524
     ebc:	00024d00 	call	24d0 <puts>
              // do something
            }
              if(message & SUSB_EP6_MSG)
     ec0:	e0bffe0b 	ldhu	r2,-8(fp)
     ec4:	10bfffcc 	andi	r2,r2,65535
     ec8:	1080100c 	andi	r2,r2,64
     ecc:	10000626 	beq	r2,zero,ee8 <sie2_msg_handler+0x314>
            {
              DEBUG_OUT("[sie2 msg]:ep6 msg\n");
     ed0:	01000074 	movhi	r4,1
     ed4:	21070904 	addi	r4,r4,7204
     ed8:	00023d40 	call	23d4 <printf>
     edc:	01000074 	movhi	r4,1
     ee0:	21075e04 	addi	r4,r4,7544
     ee4:	00024d00 	call	24d0 <puts>
              // do something
            }
            if(message & SUSB_EP7_MSG)
     ee8:	e0bffe0b 	ldhu	r2,-8(fp)
     eec:	10bfffcc 	andi	r2,r2,65535
     ef0:	1080200c 	andi	r2,r2,128
     ef4:	10000626 	beq	r2,zero,f10 <sie2_msg_handler+0x33c>
            {
              DEBUG_OUT("[sie2 msg]:ep7 msg\n");
     ef8:	01000074 	movhi	r4,1
     efc:	21070904 	addi	r4,r4,7204
     f00:	00023d40 	call	23d4 <printf>
     f04:	01000074 	movhi	r4,1
     f08:	21076304 	addi	r4,r4,7564
     f0c:	00024d00 	call	24d0 <puts>
              // do something
            }

              hpi_read_reg(HPI_SIE2_MSG_ADR,(alt_u16 *)&message);
     f10:	e0bffe04 	addi	r2,fp,-8
     f14:	100b883a 	mov	r5,r2
     f18:	01005204 	movi	r4,328
     f1c:	00015a00 	call	15a0 <hpi_read_reg>
              
              if(message)  hpi_write_reg(HPI_SIE2_MSG_ADR, 0);
     f20:	e0bffe0b 	ldhu	r2,-8(fp)
     f24:	10bfffcc 	andi	r2,r2,65535
     f28:	10000326 	beq	r2,zero,f38 <sie2_msg_handler+0x364>
     f2c:	000b883a 	mov	r5,zero
     f30:	01005204 	movi	r4,328
     f34:	00015ec0 	call	15ec <hpi_write_reg>
              
              message &= (SUSB_EP1_MSG | SUSB_EP2_MSG | SUSB_RST_MSG | SUSB_CFG_MSG | SUSB_CLASS_MSG | SUSB_SUS_MSG);
     f38:	e0bffe0b 	ldhu	r2,-8(fp)
     f3c:	108b418c 	andi	r2,r2,11526
     f40:	e0bffe0d 	sth	r2,-8(fp)
 *  RETURNS:  void
 */
void sie2_msg_handler(unsigned short message)
{
  alt_u32 Timeout;
	  while(message) {
     f44:	e0bffe0b 	ldhu	r2,-8(fp)
     f48:	10bfffcc 	andi	r2,r2,65535
     f4c:	103f291e 	bne	r2,zero,bf4 <__alt_data_end+0xf8000bf4>
              
              if(message)  hpi_write_reg(HPI_SIE2_MSG_ADR, 0);
              
              message &= (SUSB_EP1_MSG | SUSB_EP2_MSG | SUSB_RST_MSG | SUSB_CFG_MSG | SUSB_CLASS_MSG | SUSB_SUS_MSG);
       }
}
     f50:	0001883a 	nop
     f54:	e6ffff04 	addi	sp,fp,-4
     f58:	dfc00217 	ldw	ra,8(sp)
     f5c:	df000117 	ldw	fp,4(sp)
     f60:	dc000017 	ldw	r16,0(sp)
     f64:	dec00304 	addi	sp,sp,12
     f68:	f800283a 	ret

00000f6c <ep2_isr>:
 *    This function  handle the endpoint 2 packet
 *
 *  RETURNS:  void
 */
 void ep2_isr(void)
 {
     f6c:	defff204 	addi	sp,sp,-56
     f70:	dfc00d15 	stw	ra,52(sp)
     f74:	df000c15 	stw	fp,48(sp)
     f78:	df000c04 	addi	fp,sp,48
     * -----------------------------------------
     *****************************************************************/

   alt_u16 Rx_type; 
   
   Rx_type = hpi_read_word(EP2_RECEIVE_BUF_ADDRESS); // read the first word, we defined as type
     f7c:	01084004 	movi	r4,8448
     f80:	00017200 	call	1720 <hpi_read_word>
     f84:	e0bff40d 	sth	r2,-48(fp)
   
    switch( Rx_type )    {
     f88:	e0bff40b 	ldhu	r2,-48(fp)
     f8c:	10c000a0 	cmpeqi	r3,r2,2
     f90:	18001f1e 	bne	r3,zero,1010 <ep2_isr+0xa4>
     f94:	10c000e0 	cmpeqi	r3,r2,3
     f98:	1800331e 	bne	r3,zero,1068 <ep2_isr+0xfc>
     f9c:	10800060 	cmpeqi	r2,r2,1
     fa0:	10004326 	beq	r2,zero,10b0 <ep2_isr+0x144>
        
        case LED_DISPLAY:
         {     DEBUG_OUT(" Recevie led packet!\n");
     fa4:	01000074 	movhi	r4,1
     fa8:	21070904 	addi	r4,r4,7204
     fac:	00023d40 	call	23d4 <printf>
     fb0:	01000074 	movhi	r4,1
     fb4:	21076804 	addi	r4,r4,7584
     fb8:	00024d00 	call	24d0 <puts>
             LED_PACKET led_packet;
          
          hpi_read_memory(EP2_RECEIVE_BUF_ADDRESS+2,(char *)&led_packet,sizeof(LED_PACKET));
     fbc:	e0bff504 	addi	r2,fp,-44
     fc0:	01800204 	movi	r6,8
     fc4:	100b883a 	mov	r5,r2
     fc8:	01084084 	movi	r4,8450
     fcc:	00012940 	call	1294 <hpi_read_memory>
          
          // change the led status
          IOWR(LED_GREEN_BASE,0,led_packet.ledg&LEDG_FLAG);
     fd0:	e0bff50b 	ldhu	r2,-44(fp)
     fd4:	10bfffcc 	andi	r2,r2,65535
     fd8:	10c07fcc 	andi	r3,r2,511
     fdc:	00820034 	movhi	r2,2048
     fe0:	10801c04 	addi	r2,r2,112
     fe4:	10c00035 	stwio	r3,0(r2)
          
          IOWR(LED_RED_BASE, 0 , led_packet.ledr&LEDR_FLAG);
     fe8:	e0bff617 	ldw	r2,-40(fp)
     fec:	1007883a 	mov	r3,r2
     ff0:	00800134 	movhi	r2,4
     ff4:	10bfffc4 	addi	r2,r2,-1
     ff8:	1886703a 	and	r3,r3,r2
     ffc:	00820034 	movhi	r2,2048
    1000:	10802004 	addi	r2,r2,128
    1004:	10c00035 	stwio	r3,0(r2)
         
         break;}
    1008:	0001883a 	nop
    100c:	00003106 	br	10d4 <ep2_isr+0x168>
         
          case LCD_DISPLAY:
         { 
            DEBUG_OUT(" Recevie lcd packet!\n");
    1010:	01000074 	movhi	r4,1
    1014:	21070904 	addi	r4,r4,7204
    1018:	00023d40 	call	23d4 <printf>
    101c:	01000074 	movhi	r4,1
    1020:	21076e04 	addi	r4,r4,7608
    1024:	00024d00 	call	24d0 <puts>
            LCD_PACKET lcd_packet;
          
          hpi_read_memory(EP2_RECEIVE_BUF_ADDRESS+2,(char *)&lcd_packet,sizeof(LCD_PACKET));
    1028:	e0bff804 	addi	r2,fp,-32
    102c:	01800804 	movi	r6,32
    1030:	100b883a 	mov	r5,r2
    1034:	01084084 	movi	r4,8450
    1038:	00012940 	call	1294 <hpi_read_memory>
          
          // change the lcd status
               LCD_Line1();
    103c:	00003200 	call	320 <LCD_Line1>
              //  Show Text to LCD
              LCD_Show_Text(lcd_packet.Text1);
    1040:	e0bff804 	addi	r2,fp,-32
    1044:	1009883a 	mov	r4,r2
    1048:	000029c0 	call	29c <LCD_Show_Text>
              //  Change Line2
              LCD_Line2();
    104c:	00003600 	call	360 <LCD_Line2>
              //  Show Text to LCD
              LCD_Show_Text(lcd_packet.Text2);
    1050:	e0bff804 	addi	r2,fp,-32
    1054:	10800404 	addi	r2,r2,16
    1058:	1009883a 	mov	r4,r2
    105c:	000029c0 	call	29c <LCD_Show_Text>
          break;}
    1060:	0001883a 	nop
    1064:	00001b06 	br	10d4 <ep2_isr+0x168>
          
          case SEG7_8_DISPLAY:
              {
                 DEBUG_OUT(" Recevie seg7_8 packet!\n");
    1068:	01000074 	movhi	r4,1
    106c:	21070904 	addi	r4,r4,7204
    1070:	00023d40 	call	23d4 <printf>
    1074:	01000074 	movhi	r4,1
    1078:	21077404 	addi	r4,r4,7632
    107c:	00024d00 	call	24d0 <puts>
                 SEG7_8_PACKET seg7_8_packet;
                 
                 hpi_read_memory(EP2_RECEIVE_BUF_ADDRESS+2,(char *)&seg7_8_packet,sizeof(SEG7_8_PACKET));
    1080:	e0bff704 	addi	r2,fp,-36
    1084:	01800104 	movi	r6,4
    1088:	100b883a 	mov	r5,r2
    108c:	01084084 	movi	r4,8450
    1090:	00012940 	call	1294 <hpi_read_memory>
                
                 // seg7_8 display
                 IOWR(SEG7_DISPLAY_BASE,0,seg7_8_packet.seg7_8_value&0xFFFFFFFF); 
    1094:	e0bff717 	ldw	r2,-36(fp)
    1098:	1007883a 	mov	r3,r2
    109c:	00820034 	movhi	r2,2048
    10a0:	10802804 	addi	r2,r2,160
    10a4:	10c00035 	stwio	r3,0(r2)
          
                break;
    10a8:	0001883a 	nop
    10ac:	00000906 	br	10d4 <ep2_isr+0x168>
              }
          
         default :
         {  DEBUG_OUT("Unknow Rx transfer type[0x%02X] !\n",Rx_type);
    10b0:	01000074 	movhi	r4,1
    10b4:	21070904 	addi	r4,r4,7204
    10b8:	00023d40 	call	23d4 <printf>
    10bc:	e0bff40b 	ldhu	r2,-48(fp)
    10c0:	100b883a 	mov	r5,r2
    10c4:	01000074 	movhi	r4,1
    10c8:	21077a04 	addi	r4,r4,7656
    10cc:	00023d40 	call	23d4 <printf>
          break;
    10d0:	0001883a 	nop
          }
      }
 
 }
    10d4:	0001883a 	nop
    10d8:	e037883a 	mov	sp,fp
    10dc:	dfc00117 	ldw	ra,4(sp)
    10e0:	df000017 	ldw	fp,0(sp)
    10e4:	dec00204 	addi	sp,sp,8
    10e8:	f800283a 	ret

000010ec <check_button_sw_status>:


 
void check_button_sw_status(void)
{
    10ec:	defffc04 	addi	sp,sp,-16
    10f0:	dfc00315 	stw	ra,12(sp)
    10f4:	df000215 	stw	fp,8(sp)
    10f8:	df000204 	addi	fp,sp,8
    OUT_PACKET button_sw_status;

   button_sw_status.button = IORD(BUTTON_PIO_BASE,0)&BUTTON_FLAG;
    10fc:	00820034 	movhi	r2,2048
    1100:	10801804 	addi	r2,r2,96
    1104:	10800037 	ldwio	r2,0(r2)
    1108:	108003cc 	andi	r2,r2,15
    110c:	e0bffe05 	stb	r2,-8(fp)
   button_sw_status.sw  =  IORD(SWITCH_PIO_BASE,0)&SW_FLAG;
    1110:	00820034 	movhi	r2,2048
    1114:	10801404 	addi	r2,r2,80
    1118:	10800037 	ldwio	r2,0(r2)
    111c:	1007883a 	mov	r3,r2
    1120:	00800134 	movhi	r2,4
    1124:	10bfffc4 	addi	r2,r2,-1
    1128:	1884703a 	and	r2,r3,r2
    112c:	e0bfff15 	stw	r2,-4(fp)
   
   if( (old_button_sw_status.button != button_sw_status.button)
    1130:	d0e78003 	ldbu	r3,-25088(gp)
    1134:	e0bffe03 	ldbu	r2,-8(fp)
    1138:	18c03fcc 	andi	r3,r3,255
    113c:	10803fcc 	andi	r2,r2,255
    1140:	1880031e 	bne	r3,r2,1150 <check_button_sw_status+0x64>
		   || (old_button_sw_status.sw != button_sw_status.sw)
    1144:	d0e78117 	ldw	r3,-25084(gp)
    1148:	e0bfff17 	ldw	r2,-4(fp)
    114c:	18802826 	beq	r3,r2,11f0 <check_button_sw_status+0x104>
		   )
   {


	   if(device_status.bEP1InTransfer == FALSE) {
    1150:	00800074 	movhi	r2,1
    1154:	10984a04 	addi	r2,r2,24872
    1158:	10800117 	ldw	r2,4(r2)
    115c:	1000241e 	bne	r2,zero,11f0 <check_button_sw_status+0x104>

    	old_button_sw_status.button = button_sw_status.button;
    1160:	e0bffe03 	ldbu	r2,-8(fp)
    1164:	d0a78005 	stb	r2,-25088(gp)
        old_button_sw_status.sw = button_sw_status.sw ;
    1168:	e0bfff17 	ldw	r2,-4(fp)
    116c:	d0a78115 	stw	r2,-25084(gp)
        usb_send_data(1,EP1_SEND_BUF_ADDRESS,(char *)&button_sw_status,sizeof(OUT_PACKET)); // send switch and button status to pc
    1170:	01c00204 	movi	r7,8
    1174:	e1bffe04 	addi	r6,fp,-8
    1178:	01444004 	movi	r5,4352
    117c:	01000044 	movi	r4,1
    1180:	00008e00 	call	8e0 <usb_send_data>
    1184:	d0e78d17 	ldw	r3,-25036(gp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    1188:	d0a78c17 	ldw	r2,-25040(gp)

        device_status.EP1_Transfer_Timeout  = alt_nticks() + alt_ticks_per_second()*1; // 2s TimeOut if host do not responds
    118c:	1887883a 	add	r3,r3,r2
    1190:	00800074 	movhi	r2,1
    1194:	10984a04 	addi	r2,r2,24872
    1198:	10c00415 	stw	r3,16(r2)
        device_status.bEP1_Transfer_Judge   = TRUE;
    119c:	00800074 	movhi	r2,1
    11a0:	10984a04 	addi	r2,r2,24872
    11a4:	00c00044 	movi	r3,1
    11a8:	10c00315 	stw	r3,12(r2)

        DEBUG_OUT(" Switch or Button Status changed !!\n           [SW] 0x%05X,   [Button] 0x%02X\n",(unsigned int)(old_button_sw_status.sw&SW_FLAG),old_button_sw_status.button&BUTTON_FLAG);
    11ac:	01000074 	movhi	r4,1
    11b0:	21070904 	addi	r4,r4,7204
    11b4:	00023d40 	call	23d4 <printf>
    11b8:	d0e78117 	ldw	r3,-25084(gp)
    11bc:	00800134 	movhi	r2,4
    11c0:	10bfffc4 	addi	r2,r2,-1
    11c4:	1886703a 	and	r3,r3,r2
    11c8:	d0a78003 	ldbu	r2,-25088(gp)
    11cc:	10803fcc 	andi	r2,r2,255
    11d0:	108003cc 	andi	r2,r2,15
    11d4:	100d883a 	mov	r6,r2
    11d8:	180b883a 	mov	r5,r3
    11dc:	01000074 	movhi	r4,1
    11e0:	21078304 	addi	r4,r4,7692
    11e4:	00023d40 	call	23d4 <printf>
        usleep(50000);
    11e8:	0130d414 	movui	r4,50000
    11ec:	000ecb80 	call	ecb8 <usleep>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    11f0:	d0e78d17 	ldw	r3,-25036(gp)

	   }
 }


   if(alt_nticks()>device_status.EP1_Transfer_Timeout &&  device_status.bEP1_Transfer_Judge == TRUE && device_status.bEP1InTransfer == TRUE){
    11f4:	00800074 	movhi	r2,1
    11f8:	10984a04 	addi	r2,r2,24872
    11fc:	10800417 	ldw	r2,16(r2)
    1200:	10c0162e 	bgeu	r2,r3,125c <check_button_sw_status+0x170>
    1204:	00800074 	movhi	r2,1
    1208:	10984a04 	addi	r2,r2,24872
    120c:	10800317 	ldw	r2,12(r2)
    1210:	10800058 	cmpnei	r2,r2,1
    1214:	1000111e 	bne	r2,zero,125c <check_button_sw_status+0x170>
    1218:	00800074 	movhi	r2,1
    121c:	10984a04 	addi	r2,r2,24872
    1220:	10800117 	ldw	r2,4(r2)
    1224:	10800058 	cmpnei	r2,r2,1
    1228:	10000c1e 	bne	r2,zero,125c <check_button_sw_status+0x170>
	   device_status.bEP1InTransfer = FALSE;
    122c:	00800074 	movhi	r2,1
    1230:	10984a04 	addi	r2,r2,24872
    1234:	10000115 	stw	zero,4(r2)
	   device_status.bEP1_Transfer_Judge = FALSE;
    1238:	00800074 	movhi	r2,1
    123c:	10984a04 	addi	r2,r2,24872
    1240:	10000315 	stw	zero,12(r2)
       DEBUG_OUT("Host PC not responds ,TimeOut!!\n");
    1244:	01000074 	movhi	r4,1
    1248:	21070904 	addi	r4,r4,7204
    124c:	00023d40 	call	23d4 <printf>
    1250:	01000074 	movhi	r4,1
    1254:	21079704 	addi	r4,r4,7772
    1258:	00024d00 	call	24d0 <puts>

   }

 }
    125c:	0001883a 	nop
    1260:	e037883a 	mov	sp,fp
    1264:	dfc00117 	ldw	ra,4(sp)
    1268:	df000017 	ldw	fp,0(sp)
    126c:	dec00204 	addi	sp,sp,8
    1270:	f800283a 	ret

00001274 <hpi_init>:

/** private data **/

/** public functions **/

int hpi_init(void) {
    1274:	deffff04 	addi	sp,sp,-4
    1278:	df000015 	stw	fp,0(sp)
    127c:	d839883a 	mov	fp,sp

	return SUCCESS;
    1280:	0005883a 	mov	r2,zero
}
    1284:	e037883a 	mov	sp,fp
    1288:	df000017 	ldw	fp,0(sp)
    128c:	dec00104 	addi	sp,sp,4
    1290:	f800283a 	ret

00001294 <hpi_read_memory>:
 *
 *  RETURNS: 
 *    SUCCESS         - Success
 *    ERROR           - Failure
 */
int hpi_read_memory(unsigned short chip_addr, char * data, int byte_length) {
    1294:	defff904 	addi	sp,sp,-28
    1298:	dfc00615 	stw	ra,24(sp)
    129c:	df000515 	stw	fp,20(sp)
    12a0:	df000504 	addi	fp,sp,20
    12a4:	2005883a 	mov	r2,r4
    12a8:	e17ffe15 	stw	r5,-8(fp)
    12ac:	e1bfff15 	stw	r6,-4(fp)
    12b0:	e0bffd0d 	sth	r2,-12(fp)
	int num_words = 0;
    12b4:	e03ffb15 	stw	zero,-20(fp)
	unsigned short short_int;

	/* Check for unaligned address */
	if ((chip_addr & 0x1) == 0x1) {
    12b8:	e0bffd0b 	ldhu	r2,-12(fp)
    12bc:	1080004c 	andi	r2,r2,1
    12c0:	10001226 	beq	r2,zero,130c <hpi_read_memory+0x78>

		/* Read Word */
		short_int = hpi_read_word(chip_addr - 1);
    12c4:	e0bffd0b 	ldhu	r2,-12(fp)
    12c8:	10bfffc4 	addi	r2,r2,-1
    12cc:	10bfffcc 	andi	r2,r2,65535
    12d0:	1009883a 	mov	r4,r2
    12d4:	00017200 	call	1720 <hpi_read_word>
    12d8:	e0bffc0d 	sth	r2,-16(fp)

		/* Save upper byte */
		*data++ = (char) ((unsigned short) short_int >> 0x8);
    12dc:	e0bffe17 	ldw	r2,-8(fp)
    12e0:	10c00044 	addi	r3,r2,1
    12e4:	e0fffe15 	stw	r3,-8(fp)
    12e8:	e0fffc0b 	ldhu	r3,-16(fp)
    12ec:	1806d23a 	srli	r3,r3,8
    12f0:	10c00005 	stb	r3,0(r2)

		/* Update address */
		chip_addr = chip_addr + 1;
    12f4:	e0bffd0b 	ldhu	r2,-12(fp)
    12f8:	10800044 	addi	r2,r2,1
    12fc:	e0bffd0d 	sth	r2,-12(fp)

		/* Update length */
		byte_length--;
    1300:	e0bfff17 	ldw	r2,-4(fp)
    1304:	10bfffc4 	addi	r2,r2,-1
    1308:	e0bfff15 	stw	r2,-4(fp)
	}

	/* Determine number of words to read */
	num_words = byte_length >> 1;
    130c:	e0bfff17 	ldw	r2,-4(fp)
    1310:	1005d07a 	srai	r2,r2,1
    1314:	e0bffb15 	stw	r2,-20(fp)

	/* Check for words to read */
	if (num_words > 0) {
    1318:	e0bffb17 	ldw	r2,-20(fp)
    131c:	0080110e 	bge	zero,r2,1364 <hpi_read_memory+0xd0>

		hpi_read_words(chip_addr, (unsigned short *) data, num_words);
    1320:	e0bffd0b 	ldhu	r2,-12(fp)
    1324:	e1bffb17 	ldw	r6,-20(fp)
    1328:	e17ffe17 	ldw	r5,-8(fp)
    132c:	1009883a 	mov	r4,r2
    1330:	00017e80 	call	17e8 <hpi_read_words>

		byte_length -= (2 * num_words);
    1334:	e0bffb17 	ldw	r2,-20(fp)
    1338:	1085883a 	add	r2,r2,r2
    133c:	1007883a 	mov	r3,r2
    1340:	e0bfff17 	ldw	r2,-4(fp)
    1344:	10c5c83a 	sub	r2,r2,r3
    1348:	e0bfff15 	stw	r2,-4(fp)

		chip_addr += (2 * num_words);
    134c:	e0bffb17 	ldw	r2,-20(fp)
    1350:	1085883a 	add	r2,r2,r2
    1354:	1007883a 	mov	r3,r2
    1358:	e0bffd0b 	ldhu	r2,-12(fp)
    135c:	1885883a 	add	r2,r3,r2
    1360:	e0bffd0d 	sth	r2,-12(fp)
	}

	/* Check for a remaining byte to read*/
	if (byte_length > 0) {
    1364:	e0bfff17 	ldw	r2,-4(fp)
    1368:	00800e0e 	bge	zero,r2,13a4 <hpi_read_memory+0x110>

		/* Read Word */
		short_int = hpi_read_word(chip_addr);
    136c:	e0bffd0b 	ldhu	r2,-12(fp)
    1370:	1009883a 	mov	r4,r2
    1374:	00017200 	call	1720 <hpi_read_word>
    1378:	e0bffc0d 	sth	r2,-16(fp)

		/* Save lower byte */
		*(data + 2 * num_words) = (char) ((unsigned short) short_int >> 0x0);
    137c:	e0bffb17 	ldw	r2,-20(fp)
    1380:	1085883a 	add	r2,r2,r2
    1384:	1007883a 	mov	r3,r2
    1388:	e0bffe17 	ldw	r2,-8(fp)
    138c:	10c5883a 	add	r2,r2,r3
    1390:	e0fffc0b 	ldhu	r3,-16(fp)
    1394:	10c00005 	stb	r3,0(r2)

		/* Update length */
		byte_length--;
    1398:	e0bfff17 	ldw	r2,-4(fp)
    139c:	10bfffc4 	addi	r2,r2,-1
    13a0:	e0bfff15 	stw	r2,-4(fp)
	/* Consistancy check */
	if (byte_length != 0) {
		DEBUG_ERR("hpi_read_memory: Internal error\r\n");
	}

	return (SUCCESS);
    13a4:	0005883a 	mov	r2,zero
}
    13a8:	e037883a 	mov	sp,fp
    13ac:	dfc00117 	ldw	ra,4(sp)
    13b0:	df000017 	ldw	fp,0(sp)
    13b4:	dec00204 	addi	sp,sp,8
    13b8:	f800283a 	ret

000013bc <hpi_write_memory>:
 *
 *  RETURNS: 
 *    SUCCESS         - Success
 *    ERROR           - Failure
 */
int hpi_write_memory(unsigned short chip_addr, char * data, int byte_length) {
    13bc:	defff804 	addi	sp,sp,-32
    13c0:	dfc00715 	stw	ra,28(sp)
    13c4:	df000615 	stw	fp,24(sp)
    13c8:	df000604 	addi	fp,sp,24
    13cc:	2005883a 	mov	r2,r4
    13d0:	e17ffe15 	stw	r5,-8(fp)
    13d4:	e1bfff15 	stw	r6,-4(fp)
    13d8:	e0bffd0d 	sth	r2,-12(fp)
	int response = ERROR;
    13dc:	00bfffc4 	movi	r2,-1
    13e0:	e0bffa15 	stw	r2,-24(fp)
	int num_words = 0;
    13e4:	e03ffb15 	stw	zero,-20(fp)

	DEBUG_OUT("hpi_write_memory.- chip_addr = 0x%x, byte_length = 0x%x\r\n", chip_addr, byte_length);

	/* Check if the memory region is writable or not */

	if (writeable_region(chip_addr, byte_length) == SUCCESS) {
    13e8:	e0bffd0b 	ldhu	r2,-12(fp)
    13ec:	e17fff17 	ldw	r5,-4(fp)
    13f0:	1009883a 	mov	r4,r2
    13f4:	00018cc0 	call	18cc <writeable_region>
    13f8:	1000631e 	bne	r2,zero,1588 <hpi_write_memory+0x1cc>

		/* Check for unaligned address */
		if ((chip_addr & 0x1) == 0x1) {
    13fc:	e0bffd0b 	ldhu	r2,-12(fp)
    1400:	1080004c 	andi	r2,r2,1
    1404:	10002326 	beq	r2,zero,1494 <hpi_write_memory+0xd8>

			/* Read Word */
			short_int = hpi_read_word(chip_addr - 1);
    1408:	e0bffd0b 	ldhu	r2,-12(fp)
    140c:	10bfffc4 	addi	r2,r2,-1
    1410:	10bfffcc 	andi	r2,r2,65535
    1414:	1009883a 	mov	r4,r2
    1418:	00017200 	call	1720 <hpi_read_word>
    141c:	e0bffc0d 	sth	r2,-16(fp)

			/* Modify upper byte */
			tmp_short_int = (unsigned short) (0x00FF & *data++);
    1420:	e0bffe17 	ldw	r2,-8(fp)
    1424:	10c00044 	addi	r3,r2,1
    1428:	e0fffe15 	stw	r3,-8(fp)
    142c:	10800003 	ldbu	r2,0(r2)
    1430:	10803fcc 	andi	r2,r2,255
    1434:	1080201c 	xori	r2,r2,128
    1438:	10bfe004 	addi	r2,r2,-128
    143c:	10803fcc 	andi	r2,r2,255
    1440:	e0bffc8d 	sth	r2,-14(fp)
			short_int = ((0x00FF & short_int) | (tmp_short_int << 8));
    1444:	e0bffc0b 	ldhu	r2,-16(fp)
    1448:	10803fcc 	andi	r2,r2,255
    144c:	1007883a 	mov	r3,r2
    1450:	e0bffc8b 	ldhu	r2,-14(fp)
    1454:	1004923a 	slli	r2,r2,8
    1458:	1884b03a 	or	r2,r3,r2
    145c:	e0bffc0d 	sth	r2,-16(fp)

			/* Write Word */
			hpi_write_word((chip_addr - 1), short_int);
    1460:	e0bffd0b 	ldhu	r2,-12(fp)
    1464:	10bfffc4 	addi	r2,r2,-1
    1468:	10bfffcc 	andi	r2,r2,65535
    146c:	e0fffc0b 	ldhu	r3,-16(fp)
    1470:	180b883a 	mov	r5,r3
    1474:	1009883a 	mov	r4,r2
    1478:	00016d00 	call	16d0 <hpi_write_word>

			/* Update address */
			chip_addr = chip_addr + 1;
    147c:	e0bffd0b 	ldhu	r2,-12(fp)
    1480:	10800044 	addi	r2,r2,1
    1484:	e0bffd0d 	sth	r2,-12(fp)

			/* Update length */
			byte_length--;
    1488:	e0bfff17 	ldw	r2,-4(fp)
    148c:	10bfffc4 	addi	r2,r2,-1
    1490:	e0bfff15 	stw	r2,-4(fp)
		}

		/* Determine number of words to write */
		num_words = (int) byte_length / 2;
    1494:	e0bfff17 	ldw	r2,-4(fp)
    1498:	1006d7fa 	srli	r3,r2,31
    149c:	1885883a 	add	r2,r3,r2
    14a0:	1005d07a 	srai	r2,r2,1
    14a4:	e0bffb15 	stw	r2,-20(fp)

		/* Check for words to write */
		if (num_words > 0) {
    14a8:	e0bffb17 	ldw	r2,-20(fp)
    14ac:	0080170e 	bge	zero,r2,150c <hpi_write_memory+0x150>
			hpi_write_words(chip_addr, (unsigned short *) data, num_words);
    14b0:	e0bffd0b 	ldhu	r2,-12(fp)
    14b4:	e1bffb17 	ldw	r6,-20(fp)
    14b8:	e17ffe17 	ldw	r5,-8(fp)
    14bc:	1009883a 	mov	r4,r2
    14c0:	00017680 	call	1768 <hpi_write_words>

			byte_length -= (2 * num_words);
    14c4:	e0bffb17 	ldw	r2,-20(fp)
    14c8:	1085883a 	add	r2,r2,r2
    14cc:	1007883a 	mov	r3,r2
    14d0:	e0bfff17 	ldw	r2,-4(fp)
    14d4:	10c5c83a 	sub	r2,r2,r3
    14d8:	e0bfff15 	stw	r2,-4(fp)

			chip_addr += (2 * num_words);
    14dc:	e0bffb17 	ldw	r2,-20(fp)
    14e0:	1085883a 	add	r2,r2,r2
    14e4:	1007883a 	mov	r3,r2
    14e8:	e0bffd0b 	ldhu	r2,-12(fp)
    14ec:	1885883a 	add	r2,r3,r2
    14f0:	e0bffd0d 	sth	r2,-12(fp)

			data += (2 * num_words);
    14f4:	e0bffb17 	ldw	r2,-20(fp)
    14f8:	1085883a 	add	r2,r2,r2
    14fc:	1007883a 	mov	r3,r2
    1500:	e0bffe17 	ldw	r2,-8(fp)
    1504:	10c5883a 	add	r2,r2,r3
    1508:	e0bffe15 	stw	r2,-8(fp)
		}

		/* Check for a remaining byte to read*/
		if (byte_length > 0) {
    150c:	e0bfff17 	ldw	r2,-4(fp)
    1510:	00801c0e 	bge	zero,r2,1584 <hpi_write_memory+0x1c8>

			/* Read Word */
			short_int = hpi_read_word(chip_addr);
    1514:	e0bffd0b 	ldhu	r2,-12(fp)
    1518:	1009883a 	mov	r4,r2
    151c:	00017200 	call	1720 <hpi_read_word>
    1520:	e0bffc0d 	sth	r2,-16(fp)

			/* Modify lower byte */
			tmp_short_int = (unsigned short) (0x00FF & *data++);
    1524:	e0bffe17 	ldw	r2,-8(fp)
    1528:	10c00044 	addi	r3,r2,1
    152c:	e0fffe15 	stw	r3,-8(fp)
    1530:	10800003 	ldbu	r2,0(r2)
    1534:	10803fcc 	andi	r2,r2,255
    1538:	1080201c 	xori	r2,r2,128
    153c:	10bfe004 	addi	r2,r2,-128
    1540:	10803fcc 	andi	r2,r2,255
    1544:	e0bffc8d 	sth	r2,-14(fp)
			short_int = ((0xFF00 & short_int) | tmp_short_int);
    1548:	e0fffc0b 	ldhu	r3,-16(fp)
    154c:	00bfc004 	movi	r2,-256
    1550:	1884703a 	and	r2,r3,r2
    1554:	1007883a 	mov	r3,r2
    1558:	e0bffc8b 	ldhu	r2,-14(fp)
    155c:	1884b03a 	or	r2,r3,r2
    1560:	e0bffc0d 	sth	r2,-16(fp)

			/* Write Word */
			hpi_write_word(chip_addr, short_int);
    1564:	e0bffd0b 	ldhu	r2,-12(fp)
    1568:	e0fffc0b 	ldhu	r3,-16(fp)
    156c:	180b883a 	mov	r5,r3
    1570:	1009883a 	mov	r4,r2
    1574:	00016d00 	call	16d0 <hpi_write_word>

			/* Update length */
			byte_length--;
    1578:	e0bfff17 	ldw	r2,-4(fp)
    157c:	10bfffc4 	addi	r2,r2,-1
    1580:	e0bfff15 	stw	r2,-4(fp)
		/* Consistancy check */
		if (byte_length != 0) {
			DEBUG_ERR("hpi_write_memory: Internal error\r\n");
		}

		response = SUCCESS;
    1584:	e03ffa15 	stw	zero,-24(fp)
	} else
		DEBUG_ERR("hpi_write_memory: this memory region is not writable\r\n");

	return (response);
    1588:	e0bffa17 	ldw	r2,-24(fp)
}
    158c:	e037883a 	mov	sp,fp
    1590:	dfc00117 	ldw	ra,4(sp)
    1594:	df000017 	ldw	fp,0(sp)
    1598:	dec00204 	addi	sp,sp,8
    159c:	f800283a 	ret

000015a0 <hpi_read_reg>:
 *
 *  RETURNS: 
 *    SUCCESS         - Success
 *    ERROR           - Failure
 */
int hpi_read_reg(unsigned short reg_addr, unsigned short *reg_value) {
    15a0:	defffc04 	addi	sp,sp,-16
    15a4:	dfc00315 	stw	ra,12(sp)
    15a8:	df000215 	stw	fp,8(sp)
    15ac:	df000204 	addi	fp,sp,8
    15b0:	2005883a 	mov	r2,r4
    15b4:	e17fff15 	stw	r5,-4(fp)
    15b8:	e0bffe0d 	sth	r2,-8(fp)

	/* Hardware Specific Code to Write to Lyberty via HPI Port */
	*reg_value = hpi_read_word(reg_addr);
    15bc:	e0bffe0b 	ldhu	r2,-8(fp)
    15c0:	1009883a 	mov	r4,r2
    15c4:	00017200 	call	1720 <hpi_read_word>
    15c8:	1007883a 	mov	r3,r2
    15cc:	e0bfff17 	ldw	r2,-4(fp)
    15d0:	10c0000d 	sth	r3,0(r2)

	return (SUCCESS);
    15d4:	0005883a 	mov	r2,zero
}
    15d8:	e037883a 	mov	sp,fp
    15dc:	dfc00117 	ldw	ra,4(sp)
    15e0:	df000017 	ldw	fp,0(sp)
    15e4:	dec00204 	addi	sp,sp,8
    15e8:	f800283a 	ret

000015ec <hpi_write_reg>:
 *
 *  RETURNS: 
 *    SUCCESS         - Success
 *    ERROR           - Failure
 */
int hpi_write_reg(unsigned short reg_addr, unsigned short reg_value) {
    15ec:	defffc04 	addi	sp,sp,-16
    15f0:	dfc00315 	stw	ra,12(sp)
    15f4:	df000215 	stw	fp,8(sp)
    15f8:	df000204 	addi	fp,sp,8
    15fc:	2007883a 	mov	r3,r4
    1600:	2805883a 	mov	r2,r5
    1604:	e0fffe0d 	sth	r3,-8(fp)
    1608:	e0bfff0d 	sth	r2,-4(fp)

	hpi_write_word(reg_addr, reg_value);
    160c:	e0bffe0b 	ldhu	r2,-8(fp)
    1610:	e0ffff0b 	ldhu	r3,-4(fp)
    1614:	180b883a 	mov	r5,r3
    1618:	1009883a 	mov	r4,r2
    161c:	00016d00 	call	16d0 <hpi_write_word>

	return (SUCCESS);
    1620:	0005883a 	mov	r2,zero
}
    1624:	e037883a 	mov	sp,fp
    1628:	dfc00117 	ldw	ra,4(sp)
    162c:	df000017 	ldw	fp,0(sp)
    1630:	dec00204 	addi	sp,sp,8
    1634:	f800283a 	ret

00001638 <hpi_read_status>:
 *
 *  RETURNS: 
 *    SUCCESS         - Success
 *    ERROR           - Failure
 */
unsigned short hpi_read_status(void) {
    1638:	defffe04 	addi	sp,sp,-8
    163c:	df000115 	stw	fp,4(sp)
    1640:	df000104 	addi	fp,sp,4
	unsigned short value;

	value = IORD(HPI_NIOSII_BASE_ADDR, HPI_STATUS);
    1644:	00820034 	movhi	r2,2048
    1648:	10801304 	addi	r2,r2,76
    164c:	10800037 	ldwio	r2,0(r2)
    1650:	e0bfff0d 	sth	r2,-4(fp)

	DEBUG_OUT("read_status: value = 0x%04x\r\n", value);

	return value;
    1654:	e0bfff0b 	ldhu	r2,-4(fp)
}
    1658:	e037883a 	mov	sp,fp
    165c:	df000017 	ldw	fp,0(sp)
    1660:	dec00104 	addi	sp,sp,4
    1664:	f800283a 	ret

00001668 <hpi_write_mbx>:
 *
 *  RETURNS: 
 *    SUCCESS         - Success
 *    ERROR           - Failure
 */
void hpi_write_mbx(unsigned short value) {
    1668:	defffe04 	addi	sp,sp,-8
    166c:	df000115 	stw	fp,4(sp)
    1670:	df000104 	addi	fp,sp,4
    1674:	2005883a 	mov	r2,r4
    1678:	e0bfff0d 	sth	r2,-4(fp)
	DEBUG_OUT("write_mbx: 0x%04x\r\n", value);

	IOWR(HPI_NIOSII_BASE_ADDR, HPI_MAILBOX, value);
    167c:	e0ffff0b 	ldhu	r3,-4(fp)
    1680:	00820034 	movhi	r2,2048
    1684:	10801104 	addi	r2,r2,68
    1688:	10c00035 	stwio	r3,0(r2)
}
    168c:	0001883a 	nop
    1690:	e037883a 	mov	sp,fp
    1694:	df000017 	ldw	fp,0(sp)
    1698:	dec00104 	addi	sp,sp,4
    169c:	f800283a 	ret

000016a0 <hpi_read_mbx>:
 *
 *  RETURNS: 
 *    SUCCESS         - Success
 *    ERROR           - Failure
 */
unsigned short hpi_read_mbx(void) {
    16a0:	defffe04 	addi	sp,sp,-8
    16a4:	df000115 	stw	fp,4(sp)
    16a8:	df000104 	addi	fp,sp,4
	unsigned short value;

	value = IORD(HPI_NIOSII_BASE_ADDR, HPI_MAILBOX);
    16ac:	00820034 	movhi	r2,2048
    16b0:	10801104 	addi	r2,r2,68
    16b4:	10800037 	ldwio	r2,0(r2)
    16b8:	e0bfff0d 	sth	r2,-4(fp)

	DEBUG_OUT("read_mbx: 0x%04x\r\n", value);

	return value;
    16bc:	e0bfff0b 	ldhu	r2,-4(fp)
}
    16c0:	e037883a 	mov	sp,fp
    16c4:	df000017 	ldw	fp,0(sp)
    16c8:	dec00104 	addi	sp,sp,4
    16cc:	f800283a 	ret

000016d0 <hpi_write_word>:
 *
 *  RETURNS: 
 *    SUCCESS         - Success
 *    ERROR           - Failure
 */
void hpi_write_word(unsigned short chip_addr, unsigned short value) {
    16d0:	defffd04 	addi	sp,sp,-12
    16d4:	df000215 	stw	fp,8(sp)
    16d8:	df000204 	addi	fp,sp,8
    16dc:	2007883a 	mov	r3,r4
    16e0:	2805883a 	mov	r2,r5
    16e4:	e0fffe0d 	sth	r3,-8(fp)
    16e8:	e0bfff0d 	sth	r2,-4(fp)
	DEBUG_OUT("write_word: addr=0x%04x, value=0x%04x\r\n", chip_addr, value);
	IOWR(HPI_NIOSII_BASE_ADDR, HPI_ADDR, chip_addr);
    16ec:	e0fffe0b 	ldhu	r3,-8(fp)
    16f0:	00820034 	movhi	r2,2048
    16f4:	10801204 	addi	r2,r2,72
    16f8:	10c00035 	stwio	r3,0(r2)
	IOWR(HPI_NIOSII_BASE_ADDR, HPI_DATA, value);
    16fc:	e0ffff0b 	ldhu	r3,-4(fp)
    1700:	00820034 	movhi	r2,2048
    1704:	10801004 	addi	r2,r2,64
    1708:	10c00035 	stwio	r3,0(r2)
}
    170c:	0001883a 	nop
    1710:	e037883a 	mov	sp,fp
    1714:	df000017 	ldw	fp,0(sp)
    1718:	dec00104 	addi	sp,sp,4
    171c:	f800283a 	ret

00001720 <hpi_read_word>:
 *    This function reads from hpi
 *
 *  RETURNS: 
 *    Value of the chip_addr
 */
unsigned short hpi_read_word(unsigned short chip_addr) {
    1720:	defffd04 	addi	sp,sp,-12
    1724:	df000215 	stw	fp,8(sp)
    1728:	df000204 	addi	fp,sp,8
    172c:	2005883a 	mov	r2,r4
    1730:	e0bfff0d 	sth	r2,-4(fp)
	unsigned short value;
	IOWR( HPI_NIOSII_BASE_ADDR, HPI_ADDR, chip_addr);
    1734:	e0ffff0b 	ldhu	r3,-4(fp)
    1738:	00820034 	movhi	r2,2048
    173c:	10801204 	addi	r2,r2,72
    1740:	10c00035 	stwio	r3,0(r2)
	value = IORD( HPI_NIOSII_BASE_ADDR, HPI_DATA);
    1744:	00820034 	movhi	r2,2048
    1748:	10801004 	addi	r2,r2,64
    174c:	10800037 	ldwio	r2,0(r2)
    1750:	e0bffe0d 	sth	r2,-8(fp)
	DEBUG_OUT("read_word: addr=0x%04x, value=0x%04x\r\n", chip_addr, value);
	return value;
    1754:	e0bffe0b 	ldhu	r2,-8(fp)
}
    1758:	e037883a 	mov	sp,fp
    175c:	df000017 	ldw	fp,0(sp)
    1760:	dec00104 	addi	sp,sp,4
    1764:	f800283a 	ret

00001768 <hpi_write_words>:
 *  RETURNS: 
 *    SUCCESS         - Success
 *    ERROR           - Failure
 */
void hpi_write_words(unsigned short chip_addr, unsigned short *data,
		int num_words) {
    1768:	defffb04 	addi	sp,sp,-20
    176c:	df000415 	stw	fp,16(sp)
    1770:	df000404 	addi	fp,sp,16
    1774:	2005883a 	mov	r2,r4
    1778:	e17ffe15 	stw	r5,-8(fp)
    177c:	e1bfff15 	stw	r6,-4(fp)
    1780:	e0bffd0d 	sth	r2,-12(fp)
	int i;

	IOWR( HPI_NIOSII_BASE_ADDR, HPI_ADDR, chip_addr);
    1784:	e0fffd0b 	ldhu	r3,-12(fp)
    1788:	00820034 	movhi	r2,2048
    178c:	10801204 	addi	r2,r2,72
    1790:	10c00035 	stwio	r3,0(r2)

	DEBUG_OUT("write_words addr:0x%04x, num_words:%d", chip_addr, num_words);

	for (i = 0; i < num_words; i++) {
    1794:	e03ffc15 	stw	zero,-16(fp)
    1798:	00000b06 	br	17c8 <hpi_write_words+0x60>
		DEBUG_OUT(" 0x%04x", *data);
		IOWR(HPI_NIOSII_BASE_ADDR, HPI_DATA, *data++);
    179c:	e0bffe17 	ldw	r2,-8(fp)
    17a0:	10c00084 	addi	r3,r2,2
    17a4:	e0fffe15 	stw	r3,-8(fp)
    17a8:	1080000b 	ldhu	r2,0(r2)
    17ac:	10ffffcc 	andi	r3,r2,65535
    17b0:	00820034 	movhi	r2,2048
    17b4:	10801004 	addi	r2,r2,64
    17b8:	10c00035 	stwio	r3,0(r2)

	IOWR( HPI_NIOSII_BASE_ADDR, HPI_ADDR, chip_addr);

	DEBUG_OUT("write_words addr:0x%04x, num_words:%d", chip_addr, num_words);

	for (i = 0; i < num_words; i++) {
    17bc:	e0bffc17 	ldw	r2,-16(fp)
    17c0:	10800044 	addi	r2,r2,1
    17c4:	e0bffc15 	stw	r2,-16(fp)
    17c8:	e0fffc17 	ldw	r3,-16(fp)
    17cc:	e0bfff17 	ldw	r2,-4(fp)
    17d0:	18bff216 	blt	r3,r2,179c <__alt_data_end+0xf800179c>
		DEBUG_OUT(" 0x%04x", *data);
		IOWR(HPI_NIOSII_BASE_ADDR, HPI_DATA, *data++);
	}
}
    17d4:	0001883a 	nop
    17d8:	e037883a 	mov	sp,fp
    17dc:	df000017 	ldw	fp,0(sp)
    17e0:	dec00104 	addi	sp,sp,4
    17e4:	f800283a 	ret

000017e8 <hpi_read_words>:
 *  RETURNS: 
 *    SUCCESS         - Success
 *    ERROR           - Failure
 */
void hpi_read_words(unsigned short chip_addr, unsigned short *data,
		int num_words) {
    17e8:	defffb04 	addi	sp,sp,-20
    17ec:	df000415 	stw	fp,16(sp)
    17f0:	df000404 	addi	fp,sp,16
    17f4:	2005883a 	mov	r2,r4
    17f8:	e17ffe15 	stw	r5,-8(fp)
    17fc:	e1bfff15 	stw	r6,-4(fp)
    1800:	e0bffd0d 	sth	r2,-12(fp)
	int i;

	IOWR( HPI_NIOSII_BASE_ADDR, HPI_ADDR, chip_addr);
    1804:	e0fffd0b 	ldhu	r3,-12(fp)
    1808:	00820034 	movhi	r2,2048
    180c:	10801204 	addi	r2,r2,72
    1810:	10c00035 	stwio	r3,0(r2)

	DEBUG_OUT("read_words addr:0x%04x, num_words:%d", chip_addr, num_words);

	for (i = 0; i < num_words; i++) {
    1814:	e03ffc15 	stw	zero,-16(fp)
    1818:	00000a06 	br	1844 <hpi_read_words+0x5c>
		*data++ = IORD(HPI_NIOSII_BASE_ADDR, HPI_DATA);
    181c:	e0fffe17 	ldw	r3,-8(fp)
    1820:	18800084 	addi	r2,r3,2
    1824:	e0bffe15 	stw	r2,-8(fp)
    1828:	00820034 	movhi	r2,2048
    182c:	10801004 	addi	r2,r2,64
    1830:	10800037 	ldwio	r2,0(r2)
    1834:	1880000d 	sth	r2,0(r3)

	IOWR( HPI_NIOSII_BASE_ADDR, HPI_ADDR, chip_addr);

	DEBUG_OUT("read_words addr:0x%04x, num_words:%d", chip_addr, num_words);

	for (i = 0; i < num_words; i++) {
    1838:	e0bffc17 	ldw	r2,-16(fp)
    183c:	10800044 	addi	r2,r2,1
    1840:	e0bffc15 	stw	r2,-16(fp)
    1844:	e0fffc17 	ldw	r3,-16(fp)
    1848:	e0bfff17 	ldw	r2,-4(fp)
    184c:	18bff316 	blt	r3,r2,181c <__alt_data_end+0xf800181c>
		*data++ = IORD(HPI_NIOSII_BASE_ADDR, HPI_DATA);
		DEBUG_OUT("    0x%04x", *(data-1));
	}
}
    1850:	0001883a 	nop
    1854:	e037883a 	mov	sp,fp
    1858:	df000017 	ldw	fp,0(sp)
    185c:	dec00104 	addi	sp,sp,4
    1860:	f800283a 	ret

00001864 <get_ushort>:
 *
 *  RETURNS: 
 *    An unsigned short.
 */

unsigned short get_ushort(char * data, int start_address) {
    1864:	defffc04 	addi	sp,sp,-16
    1868:	df000315 	stw	fp,12(sp)
    186c:	df000304 	addi	fp,sp,12
    1870:	e13ffe15 	stw	r4,-8(fp)
    1874:	e17fff15 	stw	r5,-4(fp)
	unsigned short value = 0;
    1878:	e03ffd0d 	sth	zero,-12(fp)

	value =
			(((unsigned short) (*(unsigned char*) (data + start_address + 1))
    187c:	e0bfff17 	ldw	r2,-4(fp)
    1880:	10800044 	addi	r2,r2,1
    1884:	e0fffe17 	ldw	r3,-8(fp)
    1888:	1885883a 	add	r2,r3,r2
    188c:	10800003 	ldbu	r2,0(r2)
					<< 8)
    1890:	10803fcc 	andi	r2,r2,255
    1894:	1004923a 	slli	r2,r2,8
 */

unsigned short get_ushort(char * data, int start_address) {
	unsigned short value = 0;

	value =
    1898:	1009883a 	mov	r4,r2
			(((unsigned short) (*(unsigned char*) (data + start_address + 1))
					<< 8)
					| (unsigned short) (*(unsigned char*) (data + start_address)));
    189c:	e0bfff17 	ldw	r2,-4(fp)
    18a0:	e0fffe17 	ldw	r3,-8(fp)
    18a4:	1885883a 	add	r2,r3,r2
    18a8:	10800003 	ldbu	r2,0(r2)
 */

unsigned short get_ushort(char * data, int start_address) {
	unsigned short value = 0;

	value =
    18ac:	10803fcc 	andi	r2,r2,255
    18b0:	2084b03a 	or	r2,r4,r2
    18b4:	e0bffd0d 	sth	r2,-12(fp)
			(((unsigned short) (*(unsigned char*) (data + start_address + 1))
					<< 8)
					| (unsigned short) (*(unsigned char*) (data + start_address)));

	return value;
    18b8:	e0bffd0b 	ldhu	r2,-12(fp)
}
    18bc:	e037883a 	mov	sp,fp
    18c0:	df000017 	ldw	fp,0(sp)
    18c4:	dec00104 	addi	sp,sp,4
    18c8:	f800283a 	ret

000018cc <writeable_region>:
 *
 *  RETURNS: 
 *    SUCCESS         - Success
 *    ERROR           - Failure
 */
int writeable_region(unsigned short chip_addr, int byte_length) {
    18cc:	defffc04 	addi	sp,sp,-16
    18d0:	df000315 	stw	fp,12(sp)
    18d4:	df000304 	addi	fp,sp,12
    18d8:	2005883a 	mov	r2,r4
    18dc:	e17fff15 	stw	r5,-4(fp)
    18e0:	e0bffe0d 	sth	r2,-8(fp)
	int response = ERROR;
    18e4:	00bfffc4 	movi	r2,-1
    18e8:	e0bffd15 	stw	r2,-12(fp)

	/* Check that address is in a valid writable range */
	if (((int) chip_addr + byte_length) <= 0xFFFF)
    18ec:	e0fffe0b 	ldhu	r3,-8(fp)
    18f0:	e0bfff17 	ldw	r2,-4(fp)
    18f4:	1885883a 	add	r2,r3,r2
    18f8:	00ffffd4 	movui	r3,65535
    18fc:	18800116 	blt	r3,r2,1904 <writeable_region+0x38>
		response = SUCCESS;
    1900:	e03ffd15 	stw	zero,-12(fp)

	return response;
    1904:	e0bffd17 	ldw	r2,-12(fp)
}
    1908:	e037883a 	mov	sp,fp
    190c:	df000017 	ldw	fp,0(sp)
    1910:	dec00104 	addi	sp,sp,4
    1914:	f800283a 	ret

00001918 <main>:
#define DEBUG_OUT(format, arg...) 
#endif   

extern DEVICE_STATUS device_status;

int main(void) {
    1918:	defffe04 	addi	sp,sp,-8
    191c:	dfc00115 	stw	ra,4(sp)
    1920:	df000015 	stw	fp,0(sp)
    1924:	d839883a 	mov	fp,sp
	DEBUG_OUT(
    1928:	01000074 	movhi	r4,1
    192c:	21079f04 	addi	r4,r4,7804
    1930:	00024d00 	call	24d0 <puts>
			"========= DE2-115 CY7C67200 USB Device Demo [2011/07/05]=========\n");
	DEBUG_OUT(
    1934:	01000074 	movhi	r4,1
    1938:	2107b004 	addi	r4,r4,7872
    193c:	00024d00 	call	24d0 <puts>
			"=                                                               =\n");
	DEBUG_OUT(
    1940:	01000074 	movhi	r4,1
    1944:	2107c104 	addi	r4,r4,7940
    1948:	00024d00 	call	24d0 <puts>
			"=  This program demo a simply transfer between PC and DE2-115.  =\n");
	DEBUG_OUT(
    194c:	01000074 	movhi	r4,1
    1950:	2107b004 	addi	r4,r4,7872
    1954:	00024d00 	call	24d0 <puts>
			"=                                                               =\n");
	DEBUG_OUT(
    1958:	01000074 	movhi	r4,1
    195c:	2107d204 	addi	r4,r4,8008
    1960:	00024d00 	call	24d0 <puts>
	 * // please move the folder to a new location if you want to generate your code 
	 * // otherwise there will be some error or bug when you use makep.bat 
	 * 
	 * you can see pcd_asm.asm to know the detail process 
	 */
	if (dc_download((char*) pcd_asm,/*max_try*/10) == ERROR) { //fail to init
    1964:	01400284 	movi	r5,10
    1968:	01000074 	movhi	r4,1
    196c:	21095504 	addi	r4,r4,9556
    1970:	00005300 	call	530 <dc_download>
    1974:	10bfffd8 	cmpnei	r2,r2,-1
    1978:	1000051e 	bne	r2,zero,1990 <main+0x78>
		DEBUG_OUT("-DEVICE Init - Failed to download into 67200 Chip.\n");
    197c:	01000074 	movhi	r4,1
    1980:	2107e304 	addi	r4,r4,8076
    1984:	00024d00 	call	24d0 <puts>
		return FALSE;
    1988:	0005883a 	mov	r2,zero
    198c:	00000606 	br	19a8 <main+0x90>
	}
	usleep(100000);
    1990:	010000b4 	movhi	r4,2
    1994:	2121a804 	addi	r4,r4,-31072
    1998:	000ecb80 	call	ecb8 <usleep>
	while (1) {
		/****************************************
		 *  mainly check the SIE2 message
		 *  and then process it according to the message
		 *************************************/
		dcProcessEvent();
    199c:	0000b600 	call	b60 <dcProcessEvent>

		/****************************************
		 *  when the status of switch or button have changed
		 *  send a packet to pc to indicate the change
		 *************************************/
		check_button_sw_status();
    19a0:	00010ec0 	call	10ec <check_button_sw_status>
	}
    19a4:	003ffd06 	br	199c <__alt_data_end+0xf800199c>

	return 0;
}
    19a8:	e037883a 	mov	sp,fp
    19ac:	dfc00117 	ldw	ra,4(sp)
    19b0:	df000017 	ldw	fp,0(sp)
    19b4:	dec00204 	addi	sp,sp,8
    19b8:	f800283a 	ret

000019bc <__divsi3>:
    19bc:	20001b16 	blt	r4,zero,1a2c <__divsi3+0x70>
    19c0:	000f883a 	mov	r7,zero
    19c4:	28001616 	blt	r5,zero,1a20 <__divsi3+0x64>
    19c8:	200d883a 	mov	r6,r4
    19cc:	29001a2e 	bgeu	r5,r4,1a38 <__divsi3+0x7c>
    19d0:	00800804 	movi	r2,32
    19d4:	00c00044 	movi	r3,1
    19d8:	00000106 	br	19e0 <__divsi3+0x24>
    19dc:	10000d26 	beq	r2,zero,1a14 <__divsi3+0x58>
    19e0:	294b883a 	add	r5,r5,r5
    19e4:	10bfffc4 	addi	r2,r2,-1
    19e8:	18c7883a 	add	r3,r3,r3
    19ec:	293ffb36 	bltu	r5,r4,19dc <__alt_data_end+0xf80019dc>
    19f0:	0005883a 	mov	r2,zero
    19f4:	18000726 	beq	r3,zero,1a14 <__divsi3+0x58>
    19f8:	0005883a 	mov	r2,zero
    19fc:	31400236 	bltu	r6,r5,1a08 <__divsi3+0x4c>
    1a00:	314dc83a 	sub	r6,r6,r5
    1a04:	10c4b03a 	or	r2,r2,r3
    1a08:	1806d07a 	srli	r3,r3,1
    1a0c:	280ad07a 	srli	r5,r5,1
    1a10:	183ffa1e 	bne	r3,zero,19fc <__alt_data_end+0xf80019fc>
    1a14:	38000126 	beq	r7,zero,1a1c <__divsi3+0x60>
    1a18:	0085c83a 	sub	r2,zero,r2
    1a1c:	f800283a 	ret
    1a20:	014bc83a 	sub	r5,zero,r5
    1a24:	39c0005c 	xori	r7,r7,1
    1a28:	003fe706 	br	19c8 <__alt_data_end+0xf80019c8>
    1a2c:	0109c83a 	sub	r4,zero,r4
    1a30:	01c00044 	movi	r7,1
    1a34:	003fe306 	br	19c4 <__alt_data_end+0xf80019c4>
    1a38:	00c00044 	movi	r3,1
    1a3c:	003fee06 	br	19f8 <__alt_data_end+0xf80019f8>

00001a40 <__modsi3>:
    1a40:	20001716 	blt	r4,zero,1aa0 <__modsi3+0x60>
    1a44:	000f883a 	mov	r7,zero
    1a48:	2005883a 	mov	r2,r4
    1a4c:	28001216 	blt	r5,zero,1a98 <__modsi3+0x58>
    1a50:	2900162e 	bgeu	r5,r4,1aac <__modsi3+0x6c>
    1a54:	01800804 	movi	r6,32
    1a58:	00c00044 	movi	r3,1
    1a5c:	00000106 	br	1a64 <__modsi3+0x24>
    1a60:	30000a26 	beq	r6,zero,1a8c <__modsi3+0x4c>
    1a64:	294b883a 	add	r5,r5,r5
    1a68:	31bfffc4 	addi	r6,r6,-1
    1a6c:	18c7883a 	add	r3,r3,r3
    1a70:	293ffb36 	bltu	r5,r4,1a60 <__alt_data_end+0xf8001a60>
    1a74:	18000526 	beq	r3,zero,1a8c <__modsi3+0x4c>
    1a78:	1806d07a 	srli	r3,r3,1
    1a7c:	11400136 	bltu	r2,r5,1a84 <__modsi3+0x44>
    1a80:	1145c83a 	sub	r2,r2,r5
    1a84:	280ad07a 	srli	r5,r5,1
    1a88:	183ffb1e 	bne	r3,zero,1a78 <__alt_data_end+0xf8001a78>
    1a8c:	38000126 	beq	r7,zero,1a94 <__modsi3+0x54>
    1a90:	0085c83a 	sub	r2,zero,r2
    1a94:	f800283a 	ret
    1a98:	014bc83a 	sub	r5,zero,r5
    1a9c:	003fec06 	br	1a50 <__alt_data_end+0xf8001a50>
    1aa0:	0109c83a 	sub	r4,zero,r4
    1aa4:	01c00044 	movi	r7,1
    1aa8:	003fe706 	br	1a48 <__alt_data_end+0xf8001a48>
    1aac:	00c00044 	movi	r3,1
    1ab0:	003ff106 	br	1a78 <__alt_data_end+0xf8001a78>

00001ab4 <__udivsi3>:
    1ab4:	200d883a 	mov	r6,r4
    1ab8:	2900152e 	bgeu	r5,r4,1b10 <__udivsi3+0x5c>
    1abc:	28001416 	blt	r5,zero,1b10 <__udivsi3+0x5c>
    1ac0:	00800804 	movi	r2,32
    1ac4:	00c00044 	movi	r3,1
    1ac8:	00000206 	br	1ad4 <__udivsi3+0x20>
    1acc:	10000e26 	beq	r2,zero,1b08 <__udivsi3+0x54>
    1ad0:	28000516 	blt	r5,zero,1ae8 <__udivsi3+0x34>
    1ad4:	294b883a 	add	r5,r5,r5
    1ad8:	10bfffc4 	addi	r2,r2,-1
    1adc:	18c7883a 	add	r3,r3,r3
    1ae0:	293ffa36 	bltu	r5,r4,1acc <__alt_data_end+0xf8001acc>
    1ae4:	18000826 	beq	r3,zero,1b08 <__udivsi3+0x54>
    1ae8:	0005883a 	mov	r2,zero
    1aec:	31400236 	bltu	r6,r5,1af8 <__udivsi3+0x44>
    1af0:	314dc83a 	sub	r6,r6,r5
    1af4:	10c4b03a 	or	r2,r2,r3
    1af8:	1806d07a 	srli	r3,r3,1
    1afc:	280ad07a 	srli	r5,r5,1
    1b00:	183ffa1e 	bne	r3,zero,1aec <__alt_data_end+0xf8001aec>
    1b04:	f800283a 	ret
    1b08:	0005883a 	mov	r2,zero
    1b0c:	f800283a 	ret
    1b10:	00c00044 	movi	r3,1
    1b14:	003ff406 	br	1ae8 <__alt_data_end+0xf8001ae8>

00001b18 <__umodsi3>:
    1b18:	2005883a 	mov	r2,r4
    1b1c:	2900122e 	bgeu	r5,r4,1b68 <__umodsi3+0x50>
    1b20:	28001116 	blt	r5,zero,1b68 <__umodsi3+0x50>
    1b24:	01800804 	movi	r6,32
    1b28:	00c00044 	movi	r3,1
    1b2c:	00000206 	br	1b38 <__umodsi3+0x20>
    1b30:	30000c26 	beq	r6,zero,1b64 <__umodsi3+0x4c>
    1b34:	28000516 	blt	r5,zero,1b4c <__umodsi3+0x34>
    1b38:	294b883a 	add	r5,r5,r5
    1b3c:	31bfffc4 	addi	r6,r6,-1
    1b40:	18c7883a 	add	r3,r3,r3
    1b44:	293ffa36 	bltu	r5,r4,1b30 <__alt_data_end+0xf8001b30>
    1b48:	18000626 	beq	r3,zero,1b64 <__umodsi3+0x4c>
    1b4c:	1806d07a 	srli	r3,r3,1
    1b50:	11400136 	bltu	r2,r5,1b58 <__umodsi3+0x40>
    1b54:	1145c83a 	sub	r2,r2,r5
    1b58:	280ad07a 	srli	r5,r5,1
    1b5c:	183ffb1e 	bne	r3,zero,1b4c <__alt_data_end+0xf8001b4c>
    1b60:	f800283a 	ret
    1b64:	f800283a 	ret
    1b68:	00c00044 	movi	r3,1
    1b6c:	003ff706 	br	1b4c <__alt_data_end+0xf8001b4c>

00001b70 <malloc>:
    1b70:	00800074 	movhi	r2,1
    1b74:	1090b404 	addi	r2,r2,17104
    1b78:	200b883a 	mov	r5,r4
    1b7c:	11000017 	ldw	r4,0(r2)
    1b80:	0001b981 	jmpi	1b98 <_malloc_r>

00001b84 <free>:
    1b84:	00800074 	movhi	r2,1
    1b88:	1090b404 	addi	r2,r2,17104
    1b8c:	200b883a 	mov	r5,r4
    1b90:	11000017 	ldw	r4,0(r2)
    1b94:	00069e81 	jmpi	69e8 <_free_r>

00001b98 <_malloc_r>:
    1b98:	defff504 	addi	sp,sp,-44
    1b9c:	dc800315 	stw	r18,12(sp)
    1ba0:	dfc00a15 	stw	ra,40(sp)
    1ba4:	df000915 	stw	fp,36(sp)
    1ba8:	ddc00815 	stw	r23,32(sp)
    1bac:	dd800715 	stw	r22,28(sp)
    1bb0:	dd400615 	stw	r21,24(sp)
    1bb4:	dd000515 	stw	r20,20(sp)
    1bb8:	dcc00415 	stw	r19,16(sp)
    1bbc:	dc400215 	stw	r17,8(sp)
    1bc0:	dc000115 	stw	r16,4(sp)
    1bc4:	288002c4 	addi	r2,r5,11
    1bc8:	00c00584 	movi	r3,22
    1bcc:	2025883a 	mov	r18,r4
    1bd0:	18807f2e 	bgeu	r3,r2,1dd0 <_malloc_r+0x238>
    1bd4:	047ffe04 	movi	r17,-8
    1bd8:	1462703a 	and	r17,r2,r17
    1bdc:	8800a316 	blt	r17,zero,1e6c <_malloc_r+0x2d4>
    1be0:	8940a236 	bltu	r17,r5,1e6c <_malloc_r+0x2d4>
    1be4:	000e8800 	call	e880 <__malloc_lock>
    1be8:	00807dc4 	movi	r2,503
    1bec:	1441e92e 	bgeu	r2,r17,2394 <_malloc_r+0x7fc>
    1bf0:	8804d27a 	srli	r2,r17,9
    1bf4:	1000a126 	beq	r2,zero,1e7c <_malloc_r+0x2e4>
    1bf8:	00c00104 	movi	r3,4
    1bfc:	18811e36 	bltu	r3,r2,2078 <_malloc_r+0x4e0>
    1c00:	8804d1ba 	srli	r2,r17,6
    1c04:	12000e44 	addi	r8,r2,57
    1c08:	11c00e04 	addi	r7,r2,56
    1c0c:	4209883a 	add	r4,r8,r8
    1c10:	04c00074 	movhi	r19,1
    1c14:	2109883a 	add	r4,r4,r4
    1c18:	9cc9be04 	addi	r19,r19,9976
    1c1c:	2109883a 	add	r4,r4,r4
    1c20:	9909883a 	add	r4,r19,r4
    1c24:	24000117 	ldw	r16,4(r4)
    1c28:	213ffe04 	addi	r4,r4,-8
    1c2c:	24009726 	beq	r4,r16,1e8c <_malloc_r+0x2f4>
    1c30:	80800117 	ldw	r2,4(r16)
    1c34:	01bfff04 	movi	r6,-4
    1c38:	014003c4 	movi	r5,15
    1c3c:	1184703a 	and	r2,r2,r6
    1c40:	1447c83a 	sub	r3,r2,r17
    1c44:	28c00716 	blt	r5,r3,1c64 <_malloc_r+0xcc>
    1c48:	1800920e 	bge	r3,zero,1e94 <_malloc_r+0x2fc>
    1c4c:	84000317 	ldw	r16,12(r16)
    1c50:	24008e26 	beq	r4,r16,1e8c <_malloc_r+0x2f4>
    1c54:	80800117 	ldw	r2,4(r16)
    1c58:	1184703a 	and	r2,r2,r6
    1c5c:	1447c83a 	sub	r3,r2,r17
    1c60:	28fff90e 	bge	r5,r3,1c48 <__alt_data_end+0xf8001c48>
    1c64:	3809883a 	mov	r4,r7
    1c68:	01800074 	movhi	r6,1
    1c6c:	9c000417 	ldw	r16,16(r19)
    1c70:	3189be04 	addi	r6,r6,9976
    1c74:	32000204 	addi	r8,r6,8
    1c78:	82013426 	beq	r16,r8,214c <_malloc_r+0x5b4>
    1c7c:	80c00117 	ldw	r3,4(r16)
    1c80:	00bfff04 	movi	r2,-4
    1c84:	188e703a 	and	r7,r3,r2
    1c88:	3c45c83a 	sub	r2,r7,r17
    1c8c:	00c003c4 	movi	r3,15
    1c90:	18811f16 	blt	r3,r2,2110 <_malloc_r+0x578>
    1c94:	32000515 	stw	r8,20(r6)
    1c98:	32000415 	stw	r8,16(r6)
    1c9c:	10007f0e 	bge	r2,zero,1e9c <_malloc_r+0x304>
    1ca0:	00807fc4 	movi	r2,511
    1ca4:	11c0fd36 	bltu	r2,r7,209c <_malloc_r+0x504>
    1ca8:	3806d0fa 	srli	r3,r7,3
    1cac:	01c00044 	movi	r7,1
    1cb0:	30800117 	ldw	r2,4(r6)
    1cb4:	19400044 	addi	r5,r3,1
    1cb8:	294b883a 	add	r5,r5,r5
    1cbc:	1807d0ba 	srai	r3,r3,2
    1cc0:	294b883a 	add	r5,r5,r5
    1cc4:	294b883a 	add	r5,r5,r5
    1cc8:	298b883a 	add	r5,r5,r6
    1ccc:	38c6983a 	sll	r3,r7,r3
    1cd0:	29c00017 	ldw	r7,0(r5)
    1cd4:	2a7ffe04 	addi	r9,r5,-8
    1cd8:	1886b03a 	or	r3,r3,r2
    1cdc:	82400315 	stw	r9,12(r16)
    1ce0:	81c00215 	stw	r7,8(r16)
    1ce4:	30c00115 	stw	r3,4(r6)
    1ce8:	2c000015 	stw	r16,0(r5)
    1cec:	3c000315 	stw	r16,12(r7)
    1cf0:	2005d0ba 	srai	r2,r4,2
    1cf4:	01400044 	movi	r5,1
    1cf8:	288a983a 	sll	r5,r5,r2
    1cfc:	19406f36 	bltu	r3,r5,1ebc <_malloc_r+0x324>
    1d00:	28c4703a 	and	r2,r5,r3
    1d04:	10000a1e 	bne	r2,zero,1d30 <_malloc_r+0x198>
    1d08:	00bfff04 	movi	r2,-4
    1d0c:	294b883a 	add	r5,r5,r5
    1d10:	2088703a 	and	r4,r4,r2
    1d14:	28c4703a 	and	r2,r5,r3
    1d18:	21000104 	addi	r4,r4,4
    1d1c:	1000041e 	bne	r2,zero,1d30 <_malloc_r+0x198>
    1d20:	294b883a 	add	r5,r5,r5
    1d24:	28c4703a 	and	r2,r5,r3
    1d28:	21000104 	addi	r4,r4,4
    1d2c:	103ffc26 	beq	r2,zero,1d20 <__alt_data_end+0xf8001d20>
    1d30:	02bfff04 	movi	r10,-4
    1d34:	024003c4 	movi	r9,15
    1d38:	21800044 	addi	r6,r4,1
    1d3c:	318d883a 	add	r6,r6,r6
    1d40:	318d883a 	add	r6,r6,r6
    1d44:	318d883a 	add	r6,r6,r6
    1d48:	998d883a 	add	r6,r19,r6
    1d4c:	333ffe04 	addi	r12,r6,-8
    1d50:	2017883a 	mov	r11,r4
    1d54:	31800104 	addi	r6,r6,4
    1d58:	34000017 	ldw	r16,0(r6)
    1d5c:	31fffd04 	addi	r7,r6,-12
    1d60:	81c0041e 	bne	r16,r7,1d74 <_malloc_r+0x1dc>
    1d64:	0000fb06 	br	2154 <_malloc_r+0x5bc>
    1d68:	1801030e 	bge	r3,zero,2178 <_malloc_r+0x5e0>
    1d6c:	84000317 	ldw	r16,12(r16)
    1d70:	81c0f826 	beq	r16,r7,2154 <_malloc_r+0x5bc>
    1d74:	80800117 	ldw	r2,4(r16)
    1d78:	1284703a 	and	r2,r2,r10
    1d7c:	1447c83a 	sub	r3,r2,r17
    1d80:	48fff90e 	bge	r9,r3,1d68 <__alt_data_end+0xf8001d68>
    1d84:	80800317 	ldw	r2,12(r16)
    1d88:	81000217 	ldw	r4,8(r16)
    1d8c:	89400054 	ori	r5,r17,1
    1d90:	81400115 	stw	r5,4(r16)
    1d94:	20800315 	stw	r2,12(r4)
    1d98:	11000215 	stw	r4,8(r2)
    1d9c:	8463883a 	add	r17,r16,r17
    1da0:	9c400515 	stw	r17,20(r19)
    1da4:	9c400415 	stw	r17,16(r19)
    1da8:	18800054 	ori	r2,r3,1
    1dac:	88800115 	stw	r2,4(r17)
    1db0:	8a000315 	stw	r8,12(r17)
    1db4:	8a000215 	stw	r8,8(r17)
    1db8:	88e3883a 	add	r17,r17,r3
    1dbc:	88c00015 	stw	r3,0(r17)
    1dc0:	9009883a 	mov	r4,r18
    1dc4:	000e8a40 	call	e8a4 <__malloc_unlock>
    1dc8:	80800204 	addi	r2,r16,8
    1dcc:	00001b06 	br	1e3c <_malloc_r+0x2a4>
    1dd0:	04400404 	movi	r17,16
    1dd4:	89402536 	bltu	r17,r5,1e6c <_malloc_r+0x2d4>
    1dd8:	000e8800 	call	e880 <__malloc_lock>
    1ddc:	00800184 	movi	r2,6
    1de0:	01000084 	movi	r4,2
    1de4:	04c00074 	movhi	r19,1
    1de8:	1085883a 	add	r2,r2,r2
    1dec:	9cc9be04 	addi	r19,r19,9976
    1df0:	1085883a 	add	r2,r2,r2
    1df4:	9885883a 	add	r2,r19,r2
    1df8:	14000117 	ldw	r16,4(r2)
    1dfc:	10fffe04 	addi	r3,r2,-8
    1e00:	80c0d926 	beq	r16,r3,2168 <_malloc_r+0x5d0>
    1e04:	80c00117 	ldw	r3,4(r16)
    1e08:	81000317 	ldw	r4,12(r16)
    1e0c:	00bfff04 	movi	r2,-4
    1e10:	1884703a 	and	r2,r3,r2
    1e14:	81400217 	ldw	r5,8(r16)
    1e18:	8085883a 	add	r2,r16,r2
    1e1c:	10c00117 	ldw	r3,4(r2)
    1e20:	29000315 	stw	r4,12(r5)
    1e24:	21400215 	stw	r5,8(r4)
    1e28:	18c00054 	ori	r3,r3,1
    1e2c:	10c00115 	stw	r3,4(r2)
    1e30:	9009883a 	mov	r4,r18
    1e34:	000e8a40 	call	e8a4 <__malloc_unlock>
    1e38:	80800204 	addi	r2,r16,8
    1e3c:	dfc00a17 	ldw	ra,40(sp)
    1e40:	df000917 	ldw	fp,36(sp)
    1e44:	ddc00817 	ldw	r23,32(sp)
    1e48:	dd800717 	ldw	r22,28(sp)
    1e4c:	dd400617 	ldw	r21,24(sp)
    1e50:	dd000517 	ldw	r20,20(sp)
    1e54:	dcc00417 	ldw	r19,16(sp)
    1e58:	dc800317 	ldw	r18,12(sp)
    1e5c:	dc400217 	ldw	r17,8(sp)
    1e60:	dc000117 	ldw	r16,4(sp)
    1e64:	dec00b04 	addi	sp,sp,44
    1e68:	f800283a 	ret
    1e6c:	00800304 	movi	r2,12
    1e70:	90800015 	stw	r2,0(r18)
    1e74:	0005883a 	mov	r2,zero
    1e78:	003ff006 	br	1e3c <__alt_data_end+0xf8001e3c>
    1e7c:	01002004 	movi	r4,128
    1e80:	02001004 	movi	r8,64
    1e84:	01c00fc4 	movi	r7,63
    1e88:	003f6106 	br	1c10 <__alt_data_end+0xf8001c10>
    1e8c:	4009883a 	mov	r4,r8
    1e90:	003f7506 	br	1c68 <__alt_data_end+0xf8001c68>
    1e94:	81000317 	ldw	r4,12(r16)
    1e98:	003fde06 	br	1e14 <__alt_data_end+0xf8001e14>
    1e9c:	81c5883a 	add	r2,r16,r7
    1ea0:	11400117 	ldw	r5,4(r2)
    1ea4:	9009883a 	mov	r4,r18
    1ea8:	29400054 	ori	r5,r5,1
    1eac:	11400115 	stw	r5,4(r2)
    1eb0:	000e8a40 	call	e8a4 <__malloc_unlock>
    1eb4:	80800204 	addi	r2,r16,8
    1eb8:	003fe006 	br	1e3c <__alt_data_end+0xf8001e3c>
    1ebc:	9c000217 	ldw	r16,8(r19)
    1ec0:	00bfff04 	movi	r2,-4
    1ec4:	85800117 	ldw	r22,4(r16)
    1ec8:	b0ac703a 	and	r22,r22,r2
    1ecc:	b4400336 	bltu	r22,r17,1edc <_malloc_r+0x344>
    1ed0:	b445c83a 	sub	r2,r22,r17
    1ed4:	00c003c4 	movi	r3,15
    1ed8:	18805d16 	blt	r3,r2,2050 <_malloc_r+0x4b8>
    1edc:	05c00074 	movhi	r23,1
    1ee0:	00800074 	movhi	r2,1
    1ee4:	10983504 	addi	r2,r2,24788
    1ee8:	bdd0b104 	addi	r23,r23,17092
    1eec:	15400017 	ldw	r21,0(r2)
    1ef0:	b8c00017 	ldw	r3,0(r23)
    1ef4:	00bfffc4 	movi	r2,-1
    1ef8:	858d883a 	add	r6,r16,r22
    1efc:	8d6b883a 	add	r21,r17,r21
    1f00:	1880ea26 	beq	r3,r2,22ac <_malloc_r+0x714>
    1f04:	ad4403c4 	addi	r21,r21,4111
    1f08:	00bc0004 	movi	r2,-4096
    1f0c:	a8aa703a 	and	r21,r21,r2
    1f10:	a80b883a 	mov	r5,r21
    1f14:	9009883a 	mov	r4,r18
    1f18:	d9800015 	stw	r6,0(sp)
    1f1c:	00024e40 	call	24e4 <_sbrk_r>
    1f20:	1029883a 	mov	r20,r2
    1f24:	00bfffc4 	movi	r2,-1
    1f28:	d9800017 	ldw	r6,0(sp)
    1f2c:	a080e826 	beq	r20,r2,22d0 <_malloc_r+0x738>
    1f30:	a180a636 	bltu	r20,r6,21cc <_malloc_r+0x634>
    1f34:	07000074 	movhi	fp,1
    1f38:	e7184004 	addi	fp,fp,24832
    1f3c:	e0800017 	ldw	r2,0(fp)
    1f40:	a887883a 	add	r3,r21,r2
    1f44:	e0c00015 	stw	r3,0(fp)
    1f48:	3500e626 	beq	r6,r20,22e4 <_malloc_r+0x74c>
    1f4c:	b9000017 	ldw	r4,0(r23)
    1f50:	00bfffc4 	movi	r2,-1
    1f54:	2080ee26 	beq	r4,r2,2310 <_malloc_r+0x778>
    1f58:	a185c83a 	sub	r2,r20,r6
    1f5c:	10c5883a 	add	r2,r2,r3
    1f60:	e0800015 	stw	r2,0(fp)
    1f64:	a0c001cc 	andi	r3,r20,7
    1f68:	1800bc26 	beq	r3,zero,225c <_malloc_r+0x6c4>
    1f6c:	a0e9c83a 	sub	r20,r20,r3
    1f70:	00840204 	movi	r2,4104
    1f74:	a5000204 	addi	r20,r20,8
    1f78:	10c7c83a 	sub	r3,r2,r3
    1f7c:	a545883a 	add	r2,r20,r21
    1f80:	1083ffcc 	andi	r2,r2,4095
    1f84:	18abc83a 	sub	r21,r3,r2
    1f88:	a80b883a 	mov	r5,r21
    1f8c:	9009883a 	mov	r4,r18
    1f90:	00024e40 	call	24e4 <_sbrk_r>
    1f94:	00ffffc4 	movi	r3,-1
    1f98:	10c0e126 	beq	r2,r3,2320 <_malloc_r+0x788>
    1f9c:	1505c83a 	sub	r2,r2,r20
    1fa0:	1545883a 	add	r2,r2,r21
    1fa4:	10800054 	ori	r2,r2,1
    1fa8:	e0c00017 	ldw	r3,0(fp)
    1fac:	9d000215 	stw	r20,8(r19)
    1fb0:	a0800115 	stw	r2,4(r20)
    1fb4:	a8c7883a 	add	r3,r21,r3
    1fb8:	e0c00015 	stw	r3,0(fp)
    1fbc:	84c00e26 	beq	r16,r19,1ff8 <_malloc_r+0x460>
    1fc0:	018003c4 	movi	r6,15
    1fc4:	3580a72e 	bgeu	r6,r22,2264 <_malloc_r+0x6cc>
    1fc8:	81400117 	ldw	r5,4(r16)
    1fcc:	013ffe04 	movi	r4,-8
    1fd0:	b0bffd04 	addi	r2,r22,-12
    1fd4:	1104703a 	and	r2,r2,r4
    1fd8:	2900004c 	andi	r4,r5,1
    1fdc:	2088b03a 	or	r4,r4,r2
    1fe0:	81000115 	stw	r4,4(r16)
    1fe4:	01400144 	movi	r5,5
    1fe8:	8089883a 	add	r4,r16,r2
    1fec:	21400115 	stw	r5,4(r4)
    1ff0:	21400215 	stw	r5,8(r4)
    1ff4:	3080cd36 	bltu	r6,r2,232c <_malloc_r+0x794>
    1ff8:	00800074 	movhi	r2,1
    1ffc:	10983404 	addi	r2,r2,24784
    2000:	11000017 	ldw	r4,0(r2)
    2004:	20c0012e 	bgeu	r4,r3,200c <_malloc_r+0x474>
    2008:	10c00015 	stw	r3,0(r2)
    200c:	00800074 	movhi	r2,1
    2010:	10983304 	addi	r2,r2,24780
    2014:	11000017 	ldw	r4,0(r2)
    2018:	9c000217 	ldw	r16,8(r19)
    201c:	20c0012e 	bgeu	r4,r3,2024 <_malloc_r+0x48c>
    2020:	10c00015 	stw	r3,0(r2)
    2024:	80c00117 	ldw	r3,4(r16)
    2028:	00bfff04 	movi	r2,-4
    202c:	1886703a 	and	r3,r3,r2
    2030:	1c45c83a 	sub	r2,r3,r17
    2034:	1c400236 	bltu	r3,r17,2040 <_malloc_r+0x4a8>
    2038:	00c003c4 	movi	r3,15
    203c:	18800416 	blt	r3,r2,2050 <_malloc_r+0x4b8>
    2040:	9009883a 	mov	r4,r18
    2044:	000e8a40 	call	e8a4 <__malloc_unlock>
    2048:	0005883a 	mov	r2,zero
    204c:	003f7b06 	br	1e3c <__alt_data_end+0xf8001e3c>
    2050:	88c00054 	ori	r3,r17,1
    2054:	80c00115 	stw	r3,4(r16)
    2058:	8463883a 	add	r17,r16,r17
    205c:	10800054 	ori	r2,r2,1
    2060:	9c400215 	stw	r17,8(r19)
    2064:	88800115 	stw	r2,4(r17)
    2068:	9009883a 	mov	r4,r18
    206c:	000e8a40 	call	e8a4 <__malloc_unlock>
    2070:	80800204 	addi	r2,r16,8
    2074:	003f7106 	br	1e3c <__alt_data_end+0xf8001e3c>
    2078:	00c00504 	movi	r3,20
    207c:	18804a2e 	bgeu	r3,r2,21a8 <_malloc_r+0x610>
    2080:	00c01504 	movi	r3,84
    2084:	18806e36 	bltu	r3,r2,2240 <_malloc_r+0x6a8>
    2088:	8804d33a 	srli	r2,r17,12
    208c:	12001bc4 	addi	r8,r2,111
    2090:	11c01b84 	addi	r7,r2,110
    2094:	4209883a 	add	r4,r8,r8
    2098:	003edd06 	br	1c10 <__alt_data_end+0xf8001c10>
    209c:	3804d27a 	srli	r2,r7,9
    20a0:	00c00104 	movi	r3,4
    20a4:	1880442e 	bgeu	r3,r2,21b8 <_malloc_r+0x620>
    20a8:	00c00504 	movi	r3,20
    20ac:	18808136 	bltu	r3,r2,22b4 <_malloc_r+0x71c>
    20b0:	11401704 	addi	r5,r2,92
    20b4:	10c016c4 	addi	r3,r2,91
    20b8:	294b883a 	add	r5,r5,r5
    20bc:	294b883a 	add	r5,r5,r5
    20c0:	294b883a 	add	r5,r5,r5
    20c4:	994b883a 	add	r5,r19,r5
    20c8:	28800017 	ldw	r2,0(r5)
    20cc:	01800074 	movhi	r6,1
    20d0:	297ffe04 	addi	r5,r5,-8
    20d4:	3189be04 	addi	r6,r6,9976
    20d8:	28806526 	beq	r5,r2,2270 <_malloc_r+0x6d8>
    20dc:	01bfff04 	movi	r6,-4
    20e0:	10c00117 	ldw	r3,4(r2)
    20e4:	1986703a 	and	r3,r3,r6
    20e8:	38c0022e 	bgeu	r7,r3,20f4 <_malloc_r+0x55c>
    20ec:	10800217 	ldw	r2,8(r2)
    20f0:	28bffb1e 	bne	r5,r2,20e0 <__alt_data_end+0xf80020e0>
    20f4:	11400317 	ldw	r5,12(r2)
    20f8:	98c00117 	ldw	r3,4(r19)
    20fc:	81400315 	stw	r5,12(r16)
    2100:	80800215 	stw	r2,8(r16)
    2104:	2c000215 	stw	r16,8(r5)
    2108:	14000315 	stw	r16,12(r2)
    210c:	003ef806 	br	1cf0 <__alt_data_end+0xf8001cf0>
    2110:	88c00054 	ori	r3,r17,1
    2114:	80c00115 	stw	r3,4(r16)
    2118:	8463883a 	add	r17,r16,r17
    211c:	34400515 	stw	r17,20(r6)
    2120:	34400415 	stw	r17,16(r6)
    2124:	10c00054 	ori	r3,r2,1
    2128:	8a000315 	stw	r8,12(r17)
    212c:	8a000215 	stw	r8,8(r17)
    2130:	88c00115 	stw	r3,4(r17)
    2134:	88a3883a 	add	r17,r17,r2
    2138:	88800015 	stw	r2,0(r17)
    213c:	9009883a 	mov	r4,r18
    2140:	000e8a40 	call	e8a4 <__malloc_unlock>
    2144:	80800204 	addi	r2,r16,8
    2148:	003f3c06 	br	1e3c <__alt_data_end+0xf8001e3c>
    214c:	30c00117 	ldw	r3,4(r6)
    2150:	003ee706 	br	1cf0 <__alt_data_end+0xf8001cf0>
    2154:	5ac00044 	addi	r11,r11,1
    2158:	588000cc 	andi	r2,r11,3
    215c:	31800204 	addi	r6,r6,8
    2160:	103efd1e 	bne	r2,zero,1d58 <__alt_data_end+0xf8001d58>
    2164:	00002406 	br	21f8 <_malloc_r+0x660>
    2168:	14000317 	ldw	r16,12(r2)
    216c:	143f251e 	bne	r2,r16,1e04 <__alt_data_end+0xf8001e04>
    2170:	21000084 	addi	r4,r4,2
    2174:	003ebc06 	br	1c68 <__alt_data_end+0xf8001c68>
    2178:	8085883a 	add	r2,r16,r2
    217c:	10c00117 	ldw	r3,4(r2)
    2180:	81000317 	ldw	r4,12(r16)
    2184:	81400217 	ldw	r5,8(r16)
    2188:	18c00054 	ori	r3,r3,1
    218c:	10c00115 	stw	r3,4(r2)
    2190:	29000315 	stw	r4,12(r5)
    2194:	21400215 	stw	r5,8(r4)
    2198:	9009883a 	mov	r4,r18
    219c:	000e8a40 	call	e8a4 <__malloc_unlock>
    21a0:	80800204 	addi	r2,r16,8
    21a4:	003f2506 	br	1e3c <__alt_data_end+0xf8001e3c>
    21a8:	12001704 	addi	r8,r2,92
    21ac:	11c016c4 	addi	r7,r2,91
    21b0:	4209883a 	add	r4,r8,r8
    21b4:	003e9606 	br	1c10 <__alt_data_end+0xf8001c10>
    21b8:	3804d1ba 	srli	r2,r7,6
    21bc:	11400e44 	addi	r5,r2,57
    21c0:	10c00e04 	addi	r3,r2,56
    21c4:	294b883a 	add	r5,r5,r5
    21c8:	003fbc06 	br	20bc <__alt_data_end+0xf80020bc>
    21cc:	84ff5926 	beq	r16,r19,1f34 <__alt_data_end+0xf8001f34>
    21d0:	00800074 	movhi	r2,1
    21d4:	1089be04 	addi	r2,r2,9976
    21d8:	14000217 	ldw	r16,8(r2)
    21dc:	00bfff04 	movi	r2,-4
    21e0:	80c00117 	ldw	r3,4(r16)
    21e4:	1886703a 	and	r3,r3,r2
    21e8:	003f9106 	br	2030 <__alt_data_end+0xf8002030>
    21ec:	60800217 	ldw	r2,8(r12)
    21f0:	213fffc4 	addi	r4,r4,-1
    21f4:	1300651e 	bne	r2,r12,238c <_malloc_r+0x7f4>
    21f8:	208000cc 	andi	r2,r4,3
    21fc:	633ffe04 	addi	r12,r12,-8
    2200:	103ffa1e 	bne	r2,zero,21ec <__alt_data_end+0xf80021ec>
    2204:	98800117 	ldw	r2,4(r19)
    2208:	0146303a 	nor	r3,zero,r5
    220c:	1884703a 	and	r2,r3,r2
    2210:	98800115 	stw	r2,4(r19)
    2214:	294b883a 	add	r5,r5,r5
    2218:	117f2836 	bltu	r2,r5,1ebc <__alt_data_end+0xf8001ebc>
    221c:	283f2726 	beq	r5,zero,1ebc <__alt_data_end+0xf8001ebc>
    2220:	2886703a 	and	r3,r5,r2
    2224:	5809883a 	mov	r4,r11
    2228:	183ec31e 	bne	r3,zero,1d38 <__alt_data_end+0xf8001d38>
    222c:	294b883a 	add	r5,r5,r5
    2230:	2886703a 	and	r3,r5,r2
    2234:	21000104 	addi	r4,r4,4
    2238:	183ffc26 	beq	r3,zero,222c <__alt_data_end+0xf800222c>
    223c:	003ebe06 	br	1d38 <__alt_data_end+0xf8001d38>
    2240:	00c05504 	movi	r3,340
    2244:	18801236 	bltu	r3,r2,2290 <_malloc_r+0x6f8>
    2248:	8804d3fa 	srli	r2,r17,15
    224c:	12001e04 	addi	r8,r2,120
    2250:	11c01dc4 	addi	r7,r2,119
    2254:	4209883a 	add	r4,r8,r8
    2258:	003e6d06 	br	1c10 <__alt_data_end+0xf8001c10>
    225c:	00c40004 	movi	r3,4096
    2260:	003f4606 	br	1f7c <__alt_data_end+0xf8001f7c>
    2264:	00800044 	movi	r2,1
    2268:	a0800115 	stw	r2,4(r20)
    226c:	003f7406 	br	2040 <__alt_data_end+0xf8002040>
    2270:	1805d0ba 	srai	r2,r3,2
    2274:	01c00044 	movi	r7,1
    2278:	30c00117 	ldw	r3,4(r6)
    227c:	388e983a 	sll	r7,r7,r2
    2280:	2805883a 	mov	r2,r5
    2284:	38c6b03a 	or	r3,r7,r3
    2288:	30c00115 	stw	r3,4(r6)
    228c:	003f9b06 	br	20fc <__alt_data_end+0xf80020fc>
    2290:	00c15504 	movi	r3,1364
    2294:	18801a36 	bltu	r3,r2,2300 <_malloc_r+0x768>
    2298:	8804d4ba 	srli	r2,r17,18
    229c:	12001f44 	addi	r8,r2,125
    22a0:	11c01f04 	addi	r7,r2,124
    22a4:	4209883a 	add	r4,r8,r8
    22a8:	003e5906 	br	1c10 <__alt_data_end+0xf8001c10>
    22ac:	ad400404 	addi	r21,r21,16
    22b0:	003f1706 	br	1f10 <__alt_data_end+0xf8001f10>
    22b4:	00c01504 	movi	r3,84
    22b8:	18802336 	bltu	r3,r2,2348 <_malloc_r+0x7b0>
    22bc:	3804d33a 	srli	r2,r7,12
    22c0:	11401bc4 	addi	r5,r2,111
    22c4:	10c01b84 	addi	r3,r2,110
    22c8:	294b883a 	add	r5,r5,r5
    22cc:	003f7b06 	br	20bc <__alt_data_end+0xf80020bc>
    22d0:	9c000217 	ldw	r16,8(r19)
    22d4:	00bfff04 	movi	r2,-4
    22d8:	80c00117 	ldw	r3,4(r16)
    22dc:	1886703a 	and	r3,r3,r2
    22e0:	003f5306 	br	2030 <__alt_data_end+0xf8002030>
    22e4:	3083ffcc 	andi	r2,r6,4095
    22e8:	103f181e 	bne	r2,zero,1f4c <__alt_data_end+0xf8001f4c>
    22ec:	99000217 	ldw	r4,8(r19)
    22f0:	b545883a 	add	r2,r22,r21
    22f4:	10800054 	ori	r2,r2,1
    22f8:	20800115 	stw	r2,4(r4)
    22fc:	003f3e06 	br	1ff8 <__alt_data_end+0xf8001ff8>
    2300:	01003f84 	movi	r4,254
    2304:	02001fc4 	movi	r8,127
    2308:	01c01f84 	movi	r7,126
    230c:	003e4006 	br	1c10 <__alt_data_end+0xf8001c10>
    2310:	00800074 	movhi	r2,1
    2314:	1090b104 	addi	r2,r2,17092
    2318:	15000015 	stw	r20,0(r2)
    231c:	003f1106 	br	1f64 <__alt_data_end+0xf8001f64>
    2320:	00800044 	movi	r2,1
    2324:	002b883a 	mov	r21,zero
    2328:	003f1f06 	br	1fa8 <__alt_data_end+0xf8001fa8>
    232c:	81400204 	addi	r5,r16,8
    2330:	9009883a 	mov	r4,r18
    2334:	00069e80 	call	69e8 <_free_r>
    2338:	00800074 	movhi	r2,1
    233c:	10984004 	addi	r2,r2,24832
    2340:	10c00017 	ldw	r3,0(r2)
    2344:	003f2c06 	br	1ff8 <__alt_data_end+0xf8001ff8>
    2348:	00c05504 	movi	r3,340
    234c:	18800536 	bltu	r3,r2,2364 <_malloc_r+0x7cc>
    2350:	3804d3fa 	srli	r2,r7,15
    2354:	11401e04 	addi	r5,r2,120
    2358:	10c01dc4 	addi	r3,r2,119
    235c:	294b883a 	add	r5,r5,r5
    2360:	003f5606 	br	20bc <__alt_data_end+0xf80020bc>
    2364:	00c15504 	movi	r3,1364
    2368:	18800536 	bltu	r3,r2,2380 <_malloc_r+0x7e8>
    236c:	3804d4ba 	srli	r2,r7,18
    2370:	11401f44 	addi	r5,r2,125
    2374:	10c01f04 	addi	r3,r2,124
    2378:	294b883a 	add	r5,r5,r5
    237c:	003f4f06 	br	20bc <__alt_data_end+0xf80020bc>
    2380:	01403f84 	movi	r5,254
    2384:	00c01f84 	movi	r3,126
    2388:	003f4c06 	br	20bc <__alt_data_end+0xf80020bc>
    238c:	98800117 	ldw	r2,4(r19)
    2390:	003fa006 	br	2214 <__alt_data_end+0xf8002214>
    2394:	8808d0fa 	srli	r4,r17,3
    2398:	20800044 	addi	r2,r4,1
    239c:	1085883a 	add	r2,r2,r2
    23a0:	003e9006 	br	1de4 <__alt_data_end+0xf8001de4>

000023a4 <_printf_r>:
    23a4:	defffd04 	addi	sp,sp,-12
    23a8:	2805883a 	mov	r2,r5
    23ac:	dfc00015 	stw	ra,0(sp)
    23b0:	d9800115 	stw	r6,4(sp)
    23b4:	d9c00215 	stw	r7,8(sp)
    23b8:	21400217 	ldw	r5,8(r4)
    23bc:	d9c00104 	addi	r7,sp,4
    23c0:	100d883a 	mov	r6,r2
    23c4:	00025d00 	call	25d0 <___vfprintf_internal_r>
    23c8:	dfc00017 	ldw	ra,0(sp)
    23cc:	dec00304 	addi	sp,sp,12
    23d0:	f800283a 	ret

000023d4 <printf>:
    23d4:	defffc04 	addi	sp,sp,-16
    23d8:	dfc00015 	stw	ra,0(sp)
    23dc:	d9400115 	stw	r5,4(sp)
    23e0:	d9800215 	stw	r6,8(sp)
    23e4:	d9c00315 	stw	r7,12(sp)
    23e8:	00800074 	movhi	r2,1
    23ec:	1090b404 	addi	r2,r2,17104
    23f0:	10800017 	ldw	r2,0(r2)
    23f4:	200b883a 	mov	r5,r4
    23f8:	d9800104 	addi	r6,sp,4
    23fc:	11000217 	ldw	r4,8(r2)
    2400:	00047c80 	call	47c8 <__vfprintf_internal>
    2404:	dfc00017 	ldw	ra,0(sp)
    2408:	dec00404 	addi	sp,sp,16
    240c:	f800283a 	ret

00002410 <_puts_r>:
    2410:	defff604 	addi	sp,sp,-40
    2414:	dc000715 	stw	r16,28(sp)
    2418:	2021883a 	mov	r16,r4
    241c:	2809883a 	mov	r4,r5
    2420:	dc400815 	stw	r17,32(sp)
    2424:	dfc00915 	stw	ra,36(sp)
    2428:	2823883a 	mov	r17,r5
    242c:	00025380 	call	2538 <strlen>
    2430:	10c00044 	addi	r3,r2,1
    2434:	d8800115 	stw	r2,4(sp)
    2438:	00800074 	movhi	r2,1
    243c:	1087f004 	addi	r2,r2,8128
    2440:	d8800215 	stw	r2,8(sp)
    2444:	00800044 	movi	r2,1
    2448:	d8800315 	stw	r2,12(sp)
    244c:	00800084 	movi	r2,2
    2450:	dc400015 	stw	r17,0(sp)
    2454:	d8c00615 	stw	r3,24(sp)
    2458:	dec00415 	stw	sp,16(sp)
    245c:	d8800515 	stw	r2,20(sp)
    2460:	80000226 	beq	r16,zero,246c <_puts_r+0x5c>
    2464:	80800e17 	ldw	r2,56(r16)
    2468:	10001426 	beq	r2,zero,24bc <_puts_r+0xac>
    246c:	81400217 	ldw	r5,8(r16)
    2470:	2880030b 	ldhu	r2,12(r5)
    2474:	10c8000c 	andi	r3,r2,8192
    2478:	1800061e 	bne	r3,zero,2494 <_puts_r+0x84>
    247c:	29001917 	ldw	r4,100(r5)
    2480:	00f7ffc4 	movi	r3,-8193
    2484:	10880014 	ori	r2,r2,8192
    2488:	20c6703a 	and	r3,r4,r3
    248c:	2880030d 	sth	r2,12(r5)
    2490:	28c01915 	stw	r3,100(r5)
    2494:	d9800404 	addi	r6,sp,16
    2498:	8009883a 	mov	r4,r16
    249c:	0006cf80 	call	6cf8 <__sfvwrite_r>
    24a0:	1000091e 	bne	r2,zero,24c8 <_puts_r+0xb8>
    24a4:	00800284 	movi	r2,10
    24a8:	dfc00917 	ldw	ra,36(sp)
    24ac:	dc400817 	ldw	r17,32(sp)
    24b0:	dc000717 	ldw	r16,28(sp)
    24b4:	dec00a04 	addi	sp,sp,40
    24b8:	f800283a 	ret
    24bc:	8009883a 	mov	r4,r16
    24c0:	00068740 	call	6874 <__sinit>
    24c4:	003fe906 	br	246c <__alt_data_end+0xf800246c>
    24c8:	00bfffc4 	movi	r2,-1
    24cc:	003ff606 	br	24a8 <__alt_data_end+0xf80024a8>

000024d0 <puts>:
    24d0:	00800074 	movhi	r2,1
    24d4:	1090b404 	addi	r2,r2,17104
    24d8:	200b883a 	mov	r5,r4
    24dc:	11000017 	ldw	r4,0(r2)
    24e0:	00024101 	jmpi	2410 <_puts_r>

000024e4 <_sbrk_r>:
    24e4:	defffd04 	addi	sp,sp,-12
    24e8:	dc000015 	stw	r16,0(sp)
    24ec:	04000074 	movhi	r16,1
    24f0:	dc400115 	stw	r17,4(sp)
    24f4:	84183604 	addi	r16,r16,24792
    24f8:	2023883a 	mov	r17,r4
    24fc:	2809883a 	mov	r4,r5
    2500:	dfc00215 	stw	ra,8(sp)
    2504:	80000015 	stw	zero,0(r16)
    2508:	000ea640 	call	ea64 <sbrk>
    250c:	00ffffc4 	movi	r3,-1
    2510:	10c00526 	beq	r2,r3,2528 <_sbrk_r+0x44>
    2514:	dfc00217 	ldw	ra,8(sp)
    2518:	dc400117 	ldw	r17,4(sp)
    251c:	dc000017 	ldw	r16,0(sp)
    2520:	dec00304 	addi	sp,sp,12
    2524:	f800283a 	ret
    2528:	80c00017 	ldw	r3,0(r16)
    252c:	183ff926 	beq	r3,zero,2514 <__alt_data_end+0xf8002514>
    2530:	88c00015 	stw	r3,0(r17)
    2534:	003ff706 	br	2514 <__alt_data_end+0xf8002514>

00002538 <strlen>:
    2538:	208000cc 	andi	r2,r4,3
    253c:	10002026 	beq	r2,zero,25c0 <strlen+0x88>
    2540:	20800007 	ldb	r2,0(r4)
    2544:	10002026 	beq	r2,zero,25c8 <strlen+0x90>
    2548:	2005883a 	mov	r2,r4
    254c:	00000206 	br	2558 <strlen+0x20>
    2550:	10c00007 	ldb	r3,0(r2)
    2554:	18001826 	beq	r3,zero,25b8 <strlen+0x80>
    2558:	10800044 	addi	r2,r2,1
    255c:	10c000cc 	andi	r3,r2,3
    2560:	183ffb1e 	bne	r3,zero,2550 <__alt_data_end+0xf8002550>
    2564:	10c00017 	ldw	r3,0(r2)
    2568:	01ffbff4 	movhi	r7,65279
    256c:	39ffbfc4 	addi	r7,r7,-257
    2570:	00ca303a 	nor	r5,zero,r3
    2574:	01a02074 	movhi	r6,32897
    2578:	19c7883a 	add	r3,r3,r7
    257c:	31a02004 	addi	r6,r6,-32640
    2580:	1946703a 	and	r3,r3,r5
    2584:	1986703a 	and	r3,r3,r6
    2588:	1800091e 	bne	r3,zero,25b0 <strlen+0x78>
    258c:	10800104 	addi	r2,r2,4
    2590:	10c00017 	ldw	r3,0(r2)
    2594:	19cb883a 	add	r5,r3,r7
    2598:	00c6303a 	nor	r3,zero,r3
    259c:	28c6703a 	and	r3,r5,r3
    25a0:	1986703a 	and	r3,r3,r6
    25a4:	183ff926 	beq	r3,zero,258c <__alt_data_end+0xf800258c>
    25a8:	00000106 	br	25b0 <strlen+0x78>
    25ac:	10800044 	addi	r2,r2,1
    25b0:	10c00007 	ldb	r3,0(r2)
    25b4:	183ffd1e 	bne	r3,zero,25ac <__alt_data_end+0xf80025ac>
    25b8:	1105c83a 	sub	r2,r2,r4
    25bc:	f800283a 	ret
    25c0:	2005883a 	mov	r2,r4
    25c4:	003fe706 	br	2564 <__alt_data_end+0xf8002564>
    25c8:	0005883a 	mov	r2,zero
    25cc:	f800283a 	ret

000025d0 <___vfprintf_internal_r>:
    25d0:	deffb804 	addi	sp,sp,-288
    25d4:	dfc04715 	stw	ra,284(sp)
    25d8:	ddc04515 	stw	r23,276(sp)
    25dc:	dd404315 	stw	r21,268(sp)
    25e0:	d9002c15 	stw	r4,176(sp)
    25e4:	282f883a 	mov	r23,r5
    25e8:	302b883a 	mov	r21,r6
    25ec:	d9c02d15 	stw	r7,180(sp)
    25f0:	df004615 	stw	fp,280(sp)
    25f4:	dd804415 	stw	r22,272(sp)
    25f8:	dd004215 	stw	r20,264(sp)
    25fc:	dcc04115 	stw	r19,260(sp)
    2600:	dc804015 	stw	r18,256(sp)
    2604:	dc403f15 	stw	r17,252(sp)
    2608:	dc003e15 	stw	r16,248(sp)
    260c:	00073e80 	call	73e8 <_localeconv_r>
    2610:	10800017 	ldw	r2,0(r2)
    2614:	1009883a 	mov	r4,r2
    2618:	d8803415 	stw	r2,208(sp)
    261c:	00025380 	call	2538 <strlen>
    2620:	d8803715 	stw	r2,220(sp)
    2624:	d8802c17 	ldw	r2,176(sp)
    2628:	10000226 	beq	r2,zero,2634 <___vfprintf_internal_r+0x64>
    262c:	10800e17 	ldw	r2,56(r2)
    2630:	1000f926 	beq	r2,zero,2a18 <___vfprintf_internal_r+0x448>
    2634:	b880030b 	ldhu	r2,12(r23)
    2638:	10c8000c 	andi	r3,r2,8192
    263c:	1800061e 	bne	r3,zero,2658 <___vfprintf_internal_r+0x88>
    2640:	b9001917 	ldw	r4,100(r23)
    2644:	00f7ffc4 	movi	r3,-8193
    2648:	10880014 	ori	r2,r2,8192
    264c:	20c6703a 	and	r3,r4,r3
    2650:	b880030d 	sth	r2,12(r23)
    2654:	b8c01915 	stw	r3,100(r23)
    2658:	10c0020c 	andi	r3,r2,8
    265c:	1800c126 	beq	r3,zero,2964 <___vfprintf_internal_r+0x394>
    2660:	b8c00417 	ldw	r3,16(r23)
    2664:	1800bf26 	beq	r3,zero,2964 <___vfprintf_internal_r+0x394>
    2668:	1080068c 	andi	r2,r2,26
    266c:	00c00284 	movi	r3,10
    2670:	10c0c426 	beq	r2,r3,2984 <___vfprintf_internal_r+0x3b4>
    2674:	d8c00404 	addi	r3,sp,16
    2678:	05000074 	movhi	r20,1
    267c:	d9001e04 	addi	r4,sp,120
    2680:	a5080184 	addi	r20,r20,8198
    2684:	d8c01e15 	stw	r3,120(sp)
    2688:	d8002015 	stw	zero,128(sp)
    268c:	d8001f15 	stw	zero,124(sp)
    2690:	d8003315 	stw	zero,204(sp)
    2694:	d8003615 	stw	zero,216(sp)
    2698:	d8003815 	stw	zero,224(sp)
    269c:	1811883a 	mov	r8,r3
    26a0:	d8003915 	stw	zero,228(sp)
    26a4:	d8003a15 	stw	zero,232(sp)
    26a8:	d8002f15 	stw	zero,188(sp)
    26ac:	d9002815 	stw	r4,160(sp)
    26b0:	a8800007 	ldb	r2,0(r21)
    26b4:	10027b26 	beq	r2,zero,30a4 <___vfprintf_internal_r+0xad4>
    26b8:	00c00944 	movi	r3,37
    26bc:	a821883a 	mov	r16,r21
    26c0:	10c0021e 	bne	r2,r3,26cc <___vfprintf_internal_r+0xfc>
    26c4:	00001406 	br	2718 <___vfprintf_internal_r+0x148>
    26c8:	10c00326 	beq	r2,r3,26d8 <___vfprintf_internal_r+0x108>
    26cc:	84000044 	addi	r16,r16,1
    26d0:	80800007 	ldb	r2,0(r16)
    26d4:	103ffc1e 	bne	r2,zero,26c8 <__alt_data_end+0xf80026c8>
    26d8:	8563c83a 	sub	r17,r16,r21
    26dc:	88000e26 	beq	r17,zero,2718 <___vfprintf_internal_r+0x148>
    26e0:	d8c02017 	ldw	r3,128(sp)
    26e4:	d8801f17 	ldw	r2,124(sp)
    26e8:	45400015 	stw	r21,0(r8)
    26ec:	1c47883a 	add	r3,r3,r17
    26f0:	10800044 	addi	r2,r2,1
    26f4:	d8c02015 	stw	r3,128(sp)
    26f8:	44400115 	stw	r17,4(r8)
    26fc:	d8801f15 	stw	r2,124(sp)
    2700:	00c001c4 	movi	r3,7
    2704:	1880a716 	blt	r3,r2,29a4 <___vfprintf_internal_r+0x3d4>
    2708:	42000204 	addi	r8,r8,8
    270c:	d9402f17 	ldw	r5,188(sp)
    2710:	2c4b883a 	add	r5,r5,r17
    2714:	d9402f15 	stw	r5,188(sp)
    2718:	80800007 	ldb	r2,0(r16)
    271c:	1000a826 	beq	r2,zero,29c0 <___vfprintf_internal_r+0x3f0>
    2720:	84400047 	ldb	r17,1(r16)
    2724:	00bfffc4 	movi	r2,-1
    2728:	85400044 	addi	r21,r16,1
    272c:	d8002785 	stb	zero,158(sp)
    2730:	0007883a 	mov	r3,zero
    2734:	000f883a 	mov	r7,zero
    2738:	d8802915 	stw	r2,164(sp)
    273c:	d8003115 	stw	zero,196(sp)
    2740:	0025883a 	mov	r18,zero
    2744:	01401604 	movi	r5,88
    2748:	01800244 	movi	r6,9
    274c:	02800a84 	movi	r10,42
    2750:	02401b04 	movi	r9,108
    2754:	ad400044 	addi	r21,r21,1
    2758:	88bff804 	addi	r2,r17,-32
    275c:	28830436 	bltu	r5,r2,3370 <___vfprintf_internal_r+0xda0>
    2760:	100490ba 	slli	r2,r2,2
    2764:	01000034 	movhi	r4,0
    2768:	2109de04 	addi	r4,r4,10104
    276c:	1105883a 	add	r2,r2,r4
    2770:	10800017 	ldw	r2,0(r2)
    2774:	1000683a 	jmp	r2
    2778:	00003290 	cmplti	zero,zero,202
    277c:	00003370 	cmpltui	zero,zero,205
    2780:	00003370 	cmpltui	zero,zero,205
    2784:	000032b0 	cmpltui	zero,zero,202
    2788:	00003370 	cmpltui	zero,zero,205
    278c:	00003370 	cmpltui	zero,zero,205
    2790:	00003370 	cmpltui	zero,zero,205
    2794:	00003370 	cmpltui	zero,zero,205
    2798:	00003370 	cmpltui	zero,zero,205
    279c:	00003370 	cmpltui	zero,zero,205
    27a0:	00002a24 	muli	zero,zero,168
    27a4:	000031cc 	andi	zero,zero,199
    27a8:	00003370 	cmpltui	zero,zero,205
    27ac:	000028ec 	andhi	zero,zero,163
    27b0:	00002a4c 	andi	zero,zero,169
    27b4:	00003370 	cmpltui	zero,zero,205
    27b8:	00002a8c 	andi	zero,zero,170
    27bc:	00002a98 	cmpnei	zero,zero,170
    27c0:	00002a98 	cmpnei	zero,zero,170
    27c4:	00002a98 	cmpnei	zero,zero,170
    27c8:	00002a98 	cmpnei	zero,zero,170
    27cc:	00002a98 	cmpnei	zero,zero,170
    27d0:	00002a98 	cmpnei	zero,zero,170
    27d4:	00002a98 	cmpnei	zero,zero,170
    27d8:	00002a98 	cmpnei	zero,zero,170
    27dc:	00002a98 	cmpnei	zero,zero,170
    27e0:	00003370 	cmpltui	zero,zero,205
    27e4:	00003370 	cmpltui	zero,zero,205
    27e8:	00003370 	cmpltui	zero,zero,205
    27ec:	00003370 	cmpltui	zero,zero,205
    27f0:	00003370 	cmpltui	zero,zero,205
    27f4:	00003370 	cmpltui	zero,zero,205
    27f8:	00003370 	cmpltui	zero,zero,205
    27fc:	00003370 	cmpltui	zero,zero,205
    2800:	00003370 	cmpltui	zero,zero,205
    2804:	00003370 	cmpltui	zero,zero,205
    2808:	00002acc 	andi	zero,zero,171
    280c:	00002b88 	cmpgei	zero,zero,174
    2810:	00003370 	cmpltui	zero,zero,205
    2814:	00002b88 	cmpgei	zero,zero,174
    2818:	00003370 	cmpltui	zero,zero,205
    281c:	00003370 	cmpltui	zero,zero,205
    2820:	00003370 	cmpltui	zero,zero,205
    2824:	00003370 	cmpltui	zero,zero,205
    2828:	00002c28 	cmpgeui	zero,zero,176
    282c:	00003370 	cmpltui	zero,zero,205
    2830:	00003370 	cmpltui	zero,zero,205
    2834:	00002c34 	movhi	zero,176
    2838:	00003370 	cmpltui	zero,zero,205
    283c:	00003370 	cmpltui	zero,zero,205
    2840:	00003370 	cmpltui	zero,zero,205
    2844:	00003370 	cmpltui	zero,zero,205
    2848:	00003370 	cmpltui	zero,zero,205
    284c:	000030ac 	andhi	zero,zero,194
    2850:	00003370 	cmpltui	zero,zero,205
    2854:	00003370 	cmpltui	zero,zero,205
    2858:	0000310c 	andi	zero,zero,196
    285c:	00003370 	cmpltui	zero,zero,205
    2860:	00003370 	cmpltui	zero,zero,205
    2864:	00003370 	cmpltui	zero,zero,205
    2868:	00003370 	cmpltui	zero,zero,205
    286c:	00003370 	cmpltui	zero,zero,205
    2870:	00003370 	cmpltui	zero,zero,205
    2874:	00003370 	cmpltui	zero,zero,205
    2878:	00003370 	cmpltui	zero,zero,205
    287c:	00003370 	cmpltui	zero,zero,205
    2880:	00003370 	cmpltui	zero,zero,205
    2884:	0000331c 	xori	zero,zero,204
    2888:	000032bc 	xorhi	zero,zero,202
    288c:	00002b88 	cmpgei	zero,zero,174
    2890:	00002b88 	cmpgei	zero,zero,174
    2894:	00002b88 	cmpgei	zero,zero,174
    2898:	000032cc 	andi	zero,zero,203
    289c:	000032bc 	xorhi	zero,zero,202
    28a0:	00003370 	cmpltui	zero,zero,205
    28a4:	00003370 	cmpltui	zero,zero,205
    28a8:	000032d8 	cmpnei	zero,zero,203
    28ac:	00003370 	cmpltui	zero,zero,205
    28b0:	000032e8 	cmpgeui	zero,zero,203
    28b4:	000031bc 	xorhi	zero,zero,198
    28b8:	000028f8 	rdprs	zero,zero,163
    28bc:	000031dc 	xori	zero,zero,199
    28c0:	00003370 	cmpltui	zero,zero,205
    28c4:	000031e8 	cmpgeui	zero,zero,199
    28c8:	00003370 	cmpltui	zero,zero,205
    28cc:	00003244 	movi	zero,201
    28d0:	00003370 	cmpltui	zero,zero,205
    28d4:	00003370 	cmpltui	zero,zero,205
    28d8:	00003254 	movui	zero,201
    28dc:	d9003117 	ldw	r4,196(sp)
    28e0:	d8802d15 	stw	r2,180(sp)
    28e4:	0109c83a 	sub	r4,zero,r4
    28e8:	d9003115 	stw	r4,196(sp)
    28ec:	94800114 	ori	r18,r18,4
    28f0:	ac400007 	ldb	r17,0(r21)
    28f4:	003f9706 	br	2754 <__alt_data_end+0xf8002754>
    28f8:	00800c04 	movi	r2,48
    28fc:	d9002d17 	ldw	r4,180(sp)
    2900:	d9402917 	ldw	r5,164(sp)
    2904:	d8802705 	stb	r2,156(sp)
    2908:	00801e04 	movi	r2,120
    290c:	d8802745 	stb	r2,157(sp)
    2910:	d8002785 	stb	zero,158(sp)
    2914:	20c00104 	addi	r3,r4,4
    2918:	24c00017 	ldw	r19,0(r4)
    291c:	002d883a 	mov	r22,zero
    2920:	90800094 	ori	r2,r18,2
    2924:	28029a16 	blt	r5,zero,3390 <___vfprintf_internal_r+0xdc0>
    2928:	00bfdfc4 	movi	r2,-129
    292c:	90a4703a 	and	r18,r18,r2
    2930:	d8c02d15 	stw	r3,180(sp)
    2934:	94800094 	ori	r18,r18,2
    2938:	9802871e 	bne	r19,zero,3358 <___vfprintf_internal_r+0xd88>
    293c:	00800074 	movhi	r2,1
    2940:	1087fa04 	addi	r2,r2,8168
    2944:	d8803915 	stw	r2,228(sp)
    2948:	04401e04 	movi	r17,120
    294c:	d8802917 	ldw	r2,164(sp)
    2950:	0039883a 	mov	fp,zero
    2954:	1001e926 	beq	r2,zero,30fc <___vfprintf_internal_r+0xb2c>
    2958:	0027883a 	mov	r19,zero
    295c:	002d883a 	mov	r22,zero
    2960:	00020506 	br	3178 <___vfprintf_internal_r+0xba8>
    2964:	d9002c17 	ldw	r4,176(sp)
    2968:	b80b883a 	mov	r5,r23
    296c:	00048a00 	call	48a0 <__swsetup_r>
    2970:	1005ac1e 	bne	r2,zero,4024 <___vfprintf_internal_r+0x1a54>
    2974:	b880030b 	ldhu	r2,12(r23)
    2978:	00c00284 	movi	r3,10
    297c:	1080068c 	andi	r2,r2,26
    2980:	10ff3c1e 	bne	r2,r3,2674 <__alt_data_end+0xf8002674>
    2984:	b880038f 	ldh	r2,14(r23)
    2988:	103f3a16 	blt	r2,zero,2674 <__alt_data_end+0xf8002674>
    298c:	d9c02d17 	ldw	r7,180(sp)
    2990:	d9002c17 	ldw	r4,176(sp)
    2994:	a80d883a 	mov	r6,r21
    2998:	b80b883a 	mov	r5,r23
    299c:	00047e40 	call	47e4 <__sbprintf>
    29a0:	00001106 	br	29e8 <___vfprintf_internal_r+0x418>
    29a4:	d9002c17 	ldw	r4,176(sp)
    29a8:	d9801e04 	addi	r6,sp,120
    29ac:	b80b883a 	mov	r5,r23
    29b0:	000936c0 	call	936c <__sprint_r>
    29b4:	1000081e 	bne	r2,zero,29d8 <___vfprintf_internal_r+0x408>
    29b8:	da000404 	addi	r8,sp,16
    29bc:	003f5306 	br	270c <__alt_data_end+0xf800270c>
    29c0:	d8802017 	ldw	r2,128(sp)
    29c4:	10000426 	beq	r2,zero,29d8 <___vfprintf_internal_r+0x408>
    29c8:	d9002c17 	ldw	r4,176(sp)
    29cc:	d9801e04 	addi	r6,sp,120
    29d0:	b80b883a 	mov	r5,r23
    29d4:	000936c0 	call	936c <__sprint_r>
    29d8:	b880030b 	ldhu	r2,12(r23)
    29dc:	1080100c 	andi	r2,r2,64
    29e0:	1005901e 	bne	r2,zero,4024 <___vfprintf_internal_r+0x1a54>
    29e4:	d8802f17 	ldw	r2,188(sp)
    29e8:	dfc04717 	ldw	ra,284(sp)
    29ec:	df004617 	ldw	fp,280(sp)
    29f0:	ddc04517 	ldw	r23,276(sp)
    29f4:	dd804417 	ldw	r22,272(sp)
    29f8:	dd404317 	ldw	r21,268(sp)
    29fc:	dd004217 	ldw	r20,264(sp)
    2a00:	dcc04117 	ldw	r19,260(sp)
    2a04:	dc804017 	ldw	r18,256(sp)
    2a08:	dc403f17 	ldw	r17,252(sp)
    2a0c:	dc003e17 	ldw	r16,248(sp)
    2a10:	dec04804 	addi	sp,sp,288
    2a14:	f800283a 	ret
    2a18:	d9002c17 	ldw	r4,176(sp)
    2a1c:	00068740 	call	6874 <__sinit>
    2a20:	003f0406 	br	2634 <__alt_data_end+0xf8002634>
    2a24:	d8802d17 	ldw	r2,180(sp)
    2a28:	d9002d17 	ldw	r4,180(sp)
    2a2c:	10800017 	ldw	r2,0(r2)
    2a30:	d8803115 	stw	r2,196(sp)
    2a34:	20800104 	addi	r2,r4,4
    2a38:	d9003117 	ldw	r4,196(sp)
    2a3c:	203fa716 	blt	r4,zero,28dc <__alt_data_end+0xf80028dc>
    2a40:	d8802d15 	stw	r2,180(sp)
    2a44:	ac400007 	ldb	r17,0(r21)
    2a48:	003f4206 	br	2754 <__alt_data_end+0xf8002754>
    2a4c:	ac400007 	ldb	r17,0(r21)
    2a50:	aac00044 	addi	r11,r21,1
    2a54:	8a872826 	beq	r17,r10,46f8 <___vfprintf_internal_r+0x2128>
    2a58:	88bff404 	addi	r2,r17,-48
    2a5c:	0009883a 	mov	r4,zero
    2a60:	30867d36 	bltu	r6,r2,4458 <___vfprintf_internal_r+0x1e88>
    2a64:	5c400007 	ldb	r17,0(r11)
    2a68:	210002a4 	muli	r4,r4,10
    2a6c:	5d400044 	addi	r21,r11,1
    2a70:	a817883a 	mov	r11,r21
    2a74:	2089883a 	add	r4,r4,r2
    2a78:	88bff404 	addi	r2,r17,-48
    2a7c:	30bff92e 	bgeu	r6,r2,2a64 <__alt_data_end+0xf8002a64>
    2a80:	2005c916 	blt	r4,zero,41a8 <___vfprintf_internal_r+0x1bd8>
    2a84:	d9002915 	stw	r4,164(sp)
    2a88:	003f3306 	br	2758 <__alt_data_end+0xf8002758>
    2a8c:	94802014 	ori	r18,r18,128
    2a90:	ac400007 	ldb	r17,0(r21)
    2a94:	003f2f06 	br	2754 <__alt_data_end+0xf8002754>
    2a98:	a809883a 	mov	r4,r21
    2a9c:	d8003115 	stw	zero,196(sp)
    2aa0:	88bff404 	addi	r2,r17,-48
    2aa4:	0017883a 	mov	r11,zero
    2aa8:	24400007 	ldb	r17,0(r4)
    2aac:	5ac002a4 	muli	r11,r11,10
    2ab0:	ad400044 	addi	r21,r21,1
    2ab4:	a809883a 	mov	r4,r21
    2ab8:	12d7883a 	add	r11,r2,r11
    2abc:	88bff404 	addi	r2,r17,-48
    2ac0:	30bff92e 	bgeu	r6,r2,2aa8 <__alt_data_end+0xf8002aa8>
    2ac4:	dac03115 	stw	r11,196(sp)
    2ac8:	003f2306 	br	2758 <__alt_data_end+0xf8002758>
    2acc:	18c03fcc 	andi	r3,r3,255
    2ad0:	18072b1e 	bne	r3,zero,4780 <___vfprintf_internal_r+0x21b0>
    2ad4:	94800414 	ori	r18,r18,16
    2ad8:	9080080c 	andi	r2,r18,32
    2adc:	10037b26 	beq	r2,zero,38cc <___vfprintf_internal_r+0x12fc>
    2ae0:	d9402d17 	ldw	r5,180(sp)
    2ae4:	28800117 	ldw	r2,4(r5)
    2ae8:	2cc00017 	ldw	r19,0(r5)
    2aec:	29400204 	addi	r5,r5,8
    2af0:	d9402d15 	stw	r5,180(sp)
    2af4:	102d883a 	mov	r22,r2
    2af8:	10044b16 	blt	r2,zero,3c28 <___vfprintf_internal_r+0x1658>
    2afc:	d9402917 	ldw	r5,164(sp)
    2b00:	df002783 	ldbu	fp,158(sp)
    2b04:	2803bc16 	blt	r5,zero,39f8 <___vfprintf_internal_r+0x1428>
    2b08:	00ffdfc4 	movi	r3,-129
    2b0c:	9d84b03a 	or	r2,r19,r22
    2b10:	90e4703a 	and	r18,r18,r3
    2b14:	10017726 	beq	r2,zero,30f4 <___vfprintf_internal_r+0xb24>
    2b18:	b0038326 	beq	r22,zero,3928 <___vfprintf_internal_r+0x1358>
    2b1c:	dc402a15 	stw	r17,168(sp)
    2b20:	dc001e04 	addi	r16,sp,120
    2b24:	b023883a 	mov	r17,r22
    2b28:	402d883a 	mov	r22,r8
    2b2c:	9809883a 	mov	r4,r19
    2b30:	880b883a 	mov	r5,r17
    2b34:	01800284 	movi	r6,10
    2b38:	000f883a 	mov	r7,zero
    2b3c:	000b7640 	call	b764 <__umoddi3>
    2b40:	10800c04 	addi	r2,r2,48
    2b44:	843fffc4 	addi	r16,r16,-1
    2b48:	9809883a 	mov	r4,r19
    2b4c:	880b883a 	mov	r5,r17
    2b50:	80800005 	stb	r2,0(r16)
    2b54:	01800284 	movi	r6,10
    2b58:	000f883a 	mov	r7,zero
    2b5c:	000b1ec0 	call	b1ec <__udivdi3>
    2b60:	1027883a 	mov	r19,r2
    2b64:	10c4b03a 	or	r2,r2,r3
    2b68:	1823883a 	mov	r17,r3
    2b6c:	103fef1e 	bne	r2,zero,2b2c <__alt_data_end+0xf8002b2c>
    2b70:	d8c02817 	ldw	r3,160(sp)
    2b74:	dc402a17 	ldw	r17,168(sp)
    2b78:	b011883a 	mov	r8,r22
    2b7c:	1c07c83a 	sub	r3,r3,r16
    2b80:	d8c02e15 	stw	r3,184(sp)
    2b84:	00005906 	br	2cec <___vfprintf_internal_r+0x71c>
    2b88:	18c03fcc 	andi	r3,r3,255
    2b8c:	1806fa1e 	bne	r3,zero,4778 <___vfprintf_internal_r+0x21a8>
    2b90:	9080020c 	andi	r2,r18,8
    2b94:	10048a26 	beq	r2,zero,3dc0 <___vfprintf_internal_r+0x17f0>
    2b98:	d8c02d17 	ldw	r3,180(sp)
    2b9c:	d9002d17 	ldw	r4,180(sp)
    2ba0:	d9402d17 	ldw	r5,180(sp)
    2ba4:	18c00017 	ldw	r3,0(r3)
    2ba8:	21000117 	ldw	r4,4(r4)
    2bac:	29400204 	addi	r5,r5,8
    2bb0:	d8c03615 	stw	r3,216(sp)
    2bb4:	d9003815 	stw	r4,224(sp)
    2bb8:	d9402d15 	stw	r5,180(sp)
    2bbc:	d9003617 	ldw	r4,216(sp)
    2bc0:	d9403817 	ldw	r5,224(sp)
    2bc4:	da003d15 	stw	r8,244(sp)
    2bc8:	04000044 	movi	r16,1
    2bcc:	0008fe40 	call	8fe4 <__fpclassifyd>
    2bd0:	da003d17 	ldw	r8,244(sp)
    2bd4:	14041f1e 	bne	r2,r16,3c54 <___vfprintf_internal_r+0x1684>
    2bd8:	d9003617 	ldw	r4,216(sp)
    2bdc:	d9403817 	ldw	r5,224(sp)
    2be0:	000d883a 	mov	r6,zero
    2be4:	000f883a 	mov	r7,zero
    2be8:	000cf940 	call	cf94 <__ledf2>
    2bec:	da003d17 	ldw	r8,244(sp)
    2bf0:	1005be16 	blt	r2,zero,42ec <___vfprintf_internal_r+0x1d1c>
    2bf4:	df002783 	ldbu	fp,158(sp)
    2bf8:	008011c4 	movi	r2,71
    2bfc:	1445330e 	bge	r2,r17,40cc <___vfprintf_internal_r+0x1afc>
    2c00:	04000074 	movhi	r16,1
    2c04:	8407f204 	addi	r16,r16,8136
    2c08:	00c000c4 	movi	r3,3
    2c0c:	00bfdfc4 	movi	r2,-129
    2c10:	d8c02a15 	stw	r3,168(sp)
    2c14:	90a4703a 	and	r18,r18,r2
    2c18:	d8c02e15 	stw	r3,184(sp)
    2c1c:	d8002915 	stw	zero,164(sp)
    2c20:	d8003215 	stw	zero,200(sp)
    2c24:	00003706 	br	2d04 <___vfprintf_internal_r+0x734>
    2c28:	94800214 	ori	r18,r18,8
    2c2c:	ac400007 	ldb	r17,0(r21)
    2c30:	003ec806 	br	2754 <__alt_data_end+0xf8002754>
    2c34:	18c03fcc 	andi	r3,r3,255
    2c38:	1806db1e 	bne	r3,zero,47a8 <___vfprintf_internal_r+0x21d8>
    2c3c:	94800414 	ori	r18,r18,16
    2c40:	9080080c 	andi	r2,r18,32
    2c44:	1002d826 	beq	r2,zero,37a8 <___vfprintf_internal_r+0x11d8>
    2c48:	d9402d17 	ldw	r5,180(sp)
    2c4c:	d8c02917 	ldw	r3,164(sp)
    2c50:	d8002785 	stb	zero,158(sp)
    2c54:	28800204 	addi	r2,r5,8
    2c58:	2cc00017 	ldw	r19,0(r5)
    2c5c:	2d800117 	ldw	r22,4(r5)
    2c60:	18048f16 	blt	r3,zero,3ea0 <___vfprintf_internal_r+0x18d0>
    2c64:	013fdfc4 	movi	r4,-129
    2c68:	9d86b03a 	or	r3,r19,r22
    2c6c:	d8802d15 	stw	r2,180(sp)
    2c70:	9124703a 	and	r18,r18,r4
    2c74:	1802d91e 	bne	r3,zero,37dc <___vfprintf_internal_r+0x120c>
    2c78:	d8c02917 	ldw	r3,164(sp)
    2c7c:	0039883a 	mov	fp,zero
    2c80:	1805c326 	beq	r3,zero,4390 <___vfprintf_internal_r+0x1dc0>
    2c84:	0027883a 	mov	r19,zero
    2c88:	002d883a 	mov	r22,zero
    2c8c:	dc001e04 	addi	r16,sp,120
    2c90:	9806d0fa 	srli	r3,r19,3
    2c94:	b008977a 	slli	r4,r22,29
    2c98:	b02cd0fa 	srli	r22,r22,3
    2c9c:	9cc001cc 	andi	r19,r19,7
    2ca0:	98800c04 	addi	r2,r19,48
    2ca4:	843fffc4 	addi	r16,r16,-1
    2ca8:	20e6b03a 	or	r19,r4,r3
    2cac:	80800005 	stb	r2,0(r16)
    2cb0:	9d86b03a 	or	r3,r19,r22
    2cb4:	183ff61e 	bne	r3,zero,2c90 <__alt_data_end+0xf8002c90>
    2cb8:	90c0004c 	andi	r3,r18,1
    2cbc:	18013b26 	beq	r3,zero,31ac <___vfprintf_internal_r+0xbdc>
    2cc0:	10803fcc 	andi	r2,r2,255
    2cc4:	1080201c 	xori	r2,r2,128
    2cc8:	10bfe004 	addi	r2,r2,-128
    2ccc:	00c00c04 	movi	r3,48
    2cd0:	10c13626 	beq	r2,r3,31ac <___vfprintf_internal_r+0xbdc>
    2cd4:	80ffffc5 	stb	r3,-1(r16)
    2cd8:	d8c02817 	ldw	r3,160(sp)
    2cdc:	80bfffc4 	addi	r2,r16,-1
    2ce0:	1021883a 	mov	r16,r2
    2ce4:	1887c83a 	sub	r3,r3,r2
    2ce8:	d8c02e15 	stw	r3,184(sp)
    2cec:	d8802e17 	ldw	r2,184(sp)
    2cf0:	d9002917 	ldw	r4,164(sp)
    2cf4:	1100010e 	bge	r2,r4,2cfc <___vfprintf_internal_r+0x72c>
    2cf8:	2005883a 	mov	r2,r4
    2cfc:	d8802a15 	stw	r2,168(sp)
    2d00:	d8003215 	stw	zero,200(sp)
    2d04:	e7003fcc 	andi	fp,fp,255
    2d08:	e700201c 	xori	fp,fp,128
    2d0c:	e73fe004 	addi	fp,fp,-128
    2d10:	e0000326 	beq	fp,zero,2d20 <___vfprintf_internal_r+0x750>
    2d14:	d8c02a17 	ldw	r3,168(sp)
    2d18:	18c00044 	addi	r3,r3,1
    2d1c:	d8c02a15 	stw	r3,168(sp)
    2d20:	90c0008c 	andi	r3,r18,2
    2d24:	d8c02b15 	stw	r3,172(sp)
    2d28:	18000326 	beq	r3,zero,2d38 <___vfprintf_internal_r+0x768>
    2d2c:	d8c02a17 	ldw	r3,168(sp)
    2d30:	18c00084 	addi	r3,r3,2
    2d34:	d8c02a15 	stw	r3,168(sp)
    2d38:	90c0210c 	andi	r3,r18,132
    2d3c:	d8c03015 	stw	r3,192(sp)
    2d40:	1801a31e 	bne	r3,zero,33d0 <___vfprintf_internal_r+0xe00>
    2d44:	d9003117 	ldw	r4,196(sp)
    2d48:	d8c02a17 	ldw	r3,168(sp)
    2d4c:	20e7c83a 	sub	r19,r4,r3
    2d50:	04c19f0e 	bge	zero,r19,33d0 <___vfprintf_internal_r+0xe00>
    2d54:	02400404 	movi	r9,16
    2d58:	d8c02017 	ldw	r3,128(sp)
    2d5c:	d8801f17 	ldw	r2,124(sp)
    2d60:	4cc50d0e 	bge	r9,r19,4198 <___vfprintf_internal_r+0x1bc8>
    2d64:	01400074 	movhi	r5,1
    2d68:	29480584 	addi	r5,r5,8214
    2d6c:	dc403b15 	stw	r17,236(sp)
    2d70:	d9403515 	stw	r5,212(sp)
    2d74:	9823883a 	mov	r17,r19
    2d78:	482d883a 	mov	r22,r9
    2d7c:	9027883a 	mov	r19,r18
    2d80:	070001c4 	movi	fp,7
    2d84:	8025883a 	mov	r18,r16
    2d88:	dc002c17 	ldw	r16,176(sp)
    2d8c:	00000306 	br	2d9c <___vfprintf_internal_r+0x7cc>
    2d90:	8c7ffc04 	addi	r17,r17,-16
    2d94:	42000204 	addi	r8,r8,8
    2d98:	b440130e 	bge	r22,r17,2de8 <___vfprintf_internal_r+0x818>
    2d9c:	01000074 	movhi	r4,1
    2da0:	18c00404 	addi	r3,r3,16
    2da4:	10800044 	addi	r2,r2,1
    2da8:	21080584 	addi	r4,r4,8214
    2dac:	41000015 	stw	r4,0(r8)
    2db0:	45800115 	stw	r22,4(r8)
    2db4:	d8c02015 	stw	r3,128(sp)
    2db8:	d8801f15 	stw	r2,124(sp)
    2dbc:	e0bff40e 	bge	fp,r2,2d90 <__alt_data_end+0xf8002d90>
    2dc0:	d9801e04 	addi	r6,sp,120
    2dc4:	b80b883a 	mov	r5,r23
    2dc8:	8009883a 	mov	r4,r16
    2dcc:	000936c0 	call	936c <__sprint_r>
    2dd0:	103f011e 	bne	r2,zero,29d8 <__alt_data_end+0xf80029d8>
    2dd4:	8c7ffc04 	addi	r17,r17,-16
    2dd8:	d8c02017 	ldw	r3,128(sp)
    2ddc:	d8801f17 	ldw	r2,124(sp)
    2de0:	da000404 	addi	r8,sp,16
    2de4:	b47fed16 	blt	r22,r17,2d9c <__alt_data_end+0xf8002d9c>
    2de8:	9021883a 	mov	r16,r18
    2dec:	9825883a 	mov	r18,r19
    2df0:	8827883a 	mov	r19,r17
    2df4:	dc403b17 	ldw	r17,236(sp)
    2df8:	d9403517 	ldw	r5,212(sp)
    2dfc:	98c7883a 	add	r3,r19,r3
    2e00:	10800044 	addi	r2,r2,1
    2e04:	41400015 	stw	r5,0(r8)
    2e08:	44c00115 	stw	r19,4(r8)
    2e0c:	d8c02015 	stw	r3,128(sp)
    2e10:	d8801f15 	stw	r2,124(sp)
    2e14:	010001c4 	movi	r4,7
    2e18:	2082a316 	blt	r4,r2,38a8 <___vfprintf_internal_r+0x12d8>
    2e1c:	df002787 	ldb	fp,158(sp)
    2e20:	42000204 	addi	r8,r8,8
    2e24:	e0000c26 	beq	fp,zero,2e58 <___vfprintf_internal_r+0x888>
    2e28:	d8801f17 	ldw	r2,124(sp)
    2e2c:	d9002784 	addi	r4,sp,158
    2e30:	18c00044 	addi	r3,r3,1
    2e34:	10800044 	addi	r2,r2,1
    2e38:	41000015 	stw	r4,0(r8)
    2e3c:	01000044 	movi	r4,1
    2e40:	41000115 	stw	r4,4(r8)
    2e44:	d8c02015 	stw	r3,128(sp)
    2e48:	d8801f15 	stw	r2,124(sp)
    2e4c:	010001c4 	movi	r4,7
    2e50:	20823c16 	blt	r4,r2,3744 <___vfprintf_internal_r+0x1174>
    2e54:	42000204 	addi	r8,r8,8
    2e58:	d8802b17 	ldw	r2,172(sp)
    2e5c:	10000c26 	beq	r2,zero,2e90 <___vfprintf_internal_r+0x8c0>
    2e60:	d8801f17 	ldw	r2,124(sp)
    2e64:	d9002704 	addi	r4,sp,156
    2e68:	18c00084 	addi	r3,r3,2
    2e6c:	10800044 	addi	r2,r2,1
    2e70:	41000015 	stw	r4,0(r8)
    2e74:	01000084 	movi	r4,2
    2e78:	41000115 	stw	r4,4(r8)
    2e7c:	d8c02015 	stw	r3,128(sp)
    2e80:	d8801f15 	stw	r2,124(sp)
    2e84:	010001c4 	movi	r4,7
    2e88:	20823616 	blt	r4,r2,3764 <___vfprintf_internal_r+0x1194>
    2e8c:	42000204 	addi	r8,r8,8
    2e90:	d9003017 	ldw	r4,192(sp)
    2e94:	00802004 	movi	r2,128
    2e98:	20819926 	beq	r4,r2,3500 <___vfprintf_internal_r+0xf30>
    2e9c:	d9402917 	ldw	r5,164(sp)
    2ea0:	d8802e17 	ldw	r2,184(sp)
    2ea4:	28adc83a 	sub	r22,r5,r2
    2ea8:	0580310e 	bge	zero,r22,2f70 <___vfprintf_internal_r+0x9a0>
    2eac:	07000404 	movi	fp,16
    2eb0:	d8801f17 	ldw	r2,124(sp)
    2eb4:	e584140e 	bge	fp,r22,3f08 <___vfprintf_internal_r+0x1938>
    2eb8:	01400074 	movhi	r5,1
    2ebc:	29480184 	addi	r5,r5,8198
    2ec0:	dc402915 	stw	r17,164(sp)
    2ec4:	d9402b15 	stw	r5,172(sp)
    2ec8:	b023883a 	mov	r17,r22
    2ecc:	04c001c4 	movi	r19,7
    2ed0:	a82d883a 	mov	r22,r21
    2ed4:	902b883a 	mov	r21,r18
    2ed8:	8025883a 	mov	r18,r16
    2edc:	dc002c17 	ldw	r16,176(sp)
    2ee0:	00000306 	br	2ef0 <___vfprintf_internal_r+0x920>
    2ee4:	8c7ffc04 	addi	r17,r17,-16
    2ee8:	42000204 	addi	r8,r8,8
    2eec:	e440110e 	bge	fp,r17,2f34 <___vfprintf_internal_r+0x964>
    2ef0:	18c00404 	addi	r3,r3,16
    2ef4:	10800044 	addi	r2,r2,1
    2ef8:	45000015 	stw	r20,0(r8)
    2efc:	47000115 	stw	fp,4(r8)
    2f00:	d8c02015 	stw	r3,128(sp)
    2f04:	d8801f15 	stw	r2,124(sp)
    2f08:	98bff60e 	bge	r19,r2,2ee4 <__alt_data_end+0xf8002ee4>
    2f0c:	d9801e04 	addi	r6,sp,120
    2f10:	b80b883a 	mov	r5,r23
    2f14:	8009883a 	mov	r4,r16
    2f18:	000936c0 	call	936c <__sprint_r>
    2f1c:	103eae1e 	bne	r2,zero,29d8 <__alt_data_end+0xf80029d8>
    2f20:	8c7ffc04 	addi	r17,r17,-16
    2f24:	d8c02017 	ldw	r3,128(sp)
    2f28:	d8801f17 	ldw	r2,124(sp)
    2f2c:	da000404 	addi	r8,sp,16
    2f30:	e47fef16 	blt	fp,r17,2ef0 <__alt_data_end+0xf8002ef0>
    2f34:	9021883a 	mov	r16,r18
    2f38:	a825883a 	mov	r18,r21
    2f3c:	b02b883a 	mov	r21,r22
    2f40:	882d883a 	mov	r22,r17
    2f44:	dc402917 	ldw	r17,164(sp)
    2f48:	d9002b17 	ldw	r4,172(sp)
    2f4c:	1d87883a 	add	r3,r3,r22
    2f50:	10800044 	addi	r2,r2,1
    2f54:	41000015 	stw	r4,0(r8)
    2f58:	45800115 	stw	r22,4(r8)
    2f5c:	d8c02015 	stw	r3,128(sp)
    2f60:	d8801f15 	stw	r2,124(sp)
    2f64:	010001c4 	movi	r4,7
    2f68:	2081ee16 	blt	r4,r2,3724 <___vfprintf_internal_r+0x1154>
    2f6c:	42000204 	addi	r8,r8,8
    2f70:	9080400c 	andi	r2,r18,256
    2f74:	1001181e 	bne	r2,zero,33d8 <___vfprintf_internal_r+0xe08>
    2f78:	d9402e17 	ldw	r5,184(sp)
    2f7c:	d8801f17 	ldw	r2,124(sp)
    2f80:	44000015 	stw	r16,0(r8)
    2f84:	1947883a 	add	r3,r3,r5
    2f88:	10800044 	addi	r2,r2,1
    2f8c:	41400115 	stw	r5,4(r8)
    2f90:	d8c02015 	stw	r3,128(sp)
    2f94:	d8801f15 	stw	r2,124(sp)
    2f98:	010001c4 	movi	r4,7
    2f9c:	2081d316 	blt	r4,r2,36ec <___vfprintf_internal_r+0x111c>
    2fa0:	42000204 	addi	r8,r8,8
    2fa4:	9480010c 	andi	r18,r18,4
    2fa8:	90003226 	beq	r18,zero,3074 <___vfprintf_internal_r+0xaa4>
    2fac:	d9403117 	ldw	r5,196(sp)
    2fb0:	d8802a17 	ldw	r2,168(sp)
    2fb4:	28a1c83a 	sub	r16,r5,r2
    2fb8:	04002e0e 	bge	zero,r16,3074 <___vfprintf_internal_r+0xaa4>
    2fbc:	04400404 	movi	r17,16
    2fc0:	d8801f17 	ldw	r2,124(sp)
    2fc4:	8c04a20e 	bge	r17,r16,4250 <___vfprintf_internal_r+0x1c80>
    2fc8:	01400074 	movhi	r5,1
    2fcc:	29480584 	addi	r5,r5,8214
    2fd0:	d9403515 	stw	r5,212(sp)
    2fd4:	048001c4 	movi	r18,7
    2fd8:	dcc02c17 	ldw	r19,176(sp)
    2fdc:	00000306 	br	2fec <___vfprintf_internal_r+0xa1c>
    2fe0:	843ffc04 	addi	r16,r16,-16
    2fe4:	42000204 	addi	r8,r8,8
    2fe8:	8c00130e 	bge	r17,r16,3038 <___vfprintf_internal_r+0xa68>
    2fec:	01000074 	movhi	r4,1
    2ff0:	18c00404 	addi	r3,r3,16
    2ff4:	10800044 	addi	r2,r2,1
    2ff8:	21080584 	addi	r4,r4,8214
    2ffc:	41000015 	stw	r4,0(r8)
    3000:	44400115 	stw	r17,4(r8)
    3004:	d8c02015 	stw	r3,128(sp)
    3008:	d8801f15 	stw	r2,124(sp)
    300c:	90bff40e 	bge	r18,r2,2fe0 <__alt_data_end+0xf8002fe0>
    3010:	d9801e04 	addi	r6,sp,120
    3014:	b80b883a 	mov	r5,r23
    3018:	9809883a 	mov	r4,r19
    301c:	000936c0 	call	936c <__sprint_r>
    3020:	103e6d1e 	bne	r2,zero,29d8 <__alt_data_end+0xf80029d8>
    3024:	843ffc04 	addi	r16,r16,-16
    3028:	d8c02017 	ldw	r3,128(sp)
    302c:	d8801f17 	ldw	r2,124(sp)
    3030:	da000404 	addi	r8,sp,16
    3034:	8c3fed16 	blt	r17,r16,2fec <__alt_data_end+0xf8002fec>
    3038:	d9403517 	ldw	r5,212(sp)
    303c:	1c07883a 	add	r3,r3,r16
    3040:	10800044 	addi	r2,r2,1
    3044:	41400015 	stw	r5,0(r8)
    3048:	44000115 	stw	r16,4(r8)
    304c:	d8c02015 	stw	r3,128(sp)
    3050:	d8801f15 	stw	r2,124(sp)
    3054:	010001c4 	movi	r4,7
    3058:	2080060e 	bge	r4,r2,3074 <___vfprintf_internal_r+0xaa4>
    305c:	d9002c17 	ldw	r4,176(sp)
    3060:	d9801e04 	addi	r6,sp,120
    3064:	b80b883a 	mov	r5,r23
    3068:	000936c0 	call	936c <__sprint_r>
    306c:	103e5a1e 	bne	r2,zero,29d8 <__alt_data_end+0xf80029d8>
    3070:	d8c02017 	ldw	r3,128(sp)
    3074:	d8803117 	ldw	r2,196(sp)
    3078:	d9002a17 	ldw	r4,168(sp)
    307c:	1100010e 	bge	r2,r4,3084 <___vfprintf_internal_r+0xab4>
    3080:	2005883a 	mov	r2,r4
    3084:	d9402f17 	ldw	r5,188(sp)
    3088:	288b883a 	add	r5,r5,r2
    308c:	d9402f15 	stw	r5,188(sp)
    3090:	18019e1e 	bne	r3,zero,370c <___vfprintf_internal_r+0x113c>
    3094:	a8800007 	ldb	r2,0(r21)
    3098:	d8001f15 	stw	zero,124(sp)
    309c:	da000404 	addi	r8,sp,16
    30a0:	103d851e 	bne	r2,zero,26b8 <__alt_data_end+0xf80026b8>
    30a4:	a821883a 	mov	r16,r21
    30a8:	003d9b06 	br	2718 <__alt_data_end+0xf8002718>
    30ac:	18c03fcc 	andi	r3,r3,255
    30b0:	1805c11e 	bne	r3,zero,47b8 <___vfprintf_internal_r+0x21e8>
    30b4:	94800414 	ori	r18,r18,16
    30b8:	9080080c 	andi	r2,r18,32
    30bc:	10020c26 	beq	r2,zero,38f0 <___vfprintf_internal_r+0x1320>
    30c0:	d8802d17 	ldw	r2,180(sp)
    30c4:	d9002917 	ldw	r4,164(sp)
    30c8:	d8002785 	stb	zero,158(sp)
    30cc:	10c00204 	addi	r3,r2,8
    30d0:	14c00017 	ldw	r19,0(r2)
    30d4:	15800117 	ldw	r22,4(r2)
    30d8:	20040f16 	blt	r4,zero,4118 <___vfprintf_internal_r+0x1b48>
    30dc:	013fdfc4 	movi	r4,-129
    30e0:	9d84b03a 	or	r2,r19,r22
    30e4:	d8c02d15 	stw	r3,180(sp)
    30e8:	9124703a 	and	r18,r18,r4
    30ec:	0039883a 	mov	fp,zero
    30f0:	103e891e 	bne	r2,zero,2b18 <__alt_data_end+0xf8002b18>
    30f4:	d9002917 	ldw	r4,164(sp)
    30f8:	2002c11e 	bne	r4,zero,3c00 <___vfprintf_internal_r+0x1630>
    30fc:	d8002915 	stw	zero,164(sp)
    3100:	d8002e15 	stw	zero,184(sp)
    3104:	dc001e04 	addi	r16,sp,120
    3108:	003ef806 	br	2cec <__alt_data_end+0xf8002cec>
    310c:	18c03fcc 	andi	r3,r3,255
    3110:	18059d1e 	bne	r3,zero,4788 <___vfprintf_internal_r+0x21b8>
    3114:	01400074 	movhi	r5,1
    3118:	2947f504 	addi	r5,r5,8148
    311c:	d9403915 	stw	r5,228(sp)
    3120:	9080080c 	andi	r2,r18,32
    3124:	10005226 	beq	r2,zero,3270 <___vfprintf_internal_r+0xca0>
    3128:	d8802d17 	ldw	r2,180(sp)
    312c:	14c00017 	ldw	r19,0(r2)
    3130:	15800117 	ldw	r22,4(r2)
    3134:	10800204 	addi	r2,r2,8
    3138:	d8802d15 	stw	r2,180(sp)
    313c:	9080004c 	andi	r2,r18,1
    3140:	10019026 	beq	r2,zero,3784 <___vfprintf_internal_r+0x11b4>
    3144:	9d84b03a 	or	r2,r19,r22
    3148:	10036926 	beq	r2,zero,3ef0 <___vfprintf_internal_r+0x1920>
    314c:	d8c02917 	ldw	r3,164(sp)
    3150:	00800c04 	movi	r2,48
    3154:	d8802705 	stb	r2,156(sp)
    3158:	dc402745 	stb	r17,157(sp)
    315c:	d8002785 	stb	zero,158(sp)
    3160:	90800094 	ori	r2,r18,2
    3164:	18045d16 	blt	r3,zero,42dc <___vfprintf_internal_r+0x1d0c>
    3168:	00bfdfc4 	movi	r2,-129
    316c:	90a4703a 	and	r18,r18,r2
    3170:	94800094 	ori	r18,r18,2
    3174:	0039883a 	mov	fp,zero
    3178:	d9003917 	ldw	r4,228(sp)
    317c:	dc001e04 	addi	r16,sp,120
    3180:	988003cc 	andi	r2,r19,15
    3184:	b006973a 	slli	r3,r22,28
    3188:	2085883a 	add	r2,r4,r2
    318c:	9826d13a 	srli	r19,r19,4
    3190:	10800003 	ldbu	r2,0(r2)
    3194:	b02cd13a 	srli	r22,r22,4
    3198:	843fffc4 	addi	r16,r16,-1
    319c:	1ce6b03a 	or	r19,r3,r19
    31a0:	80800005 	stb	r2,0(r16)
    31a4:	9d84b03a 	or	r2,r19,r22
    31a8:	103ff51e 	bne	r2,zero,3180 <__alt_data_end+0xf8003180>
    31ac:	d8c02817 	ldw	r3,160(sp)
    31b0:	1c07c83a 	sub	r3,r3,r16
    31b4:	d8c02e15 	stw	r3,184(sp)
    31b8:	003ecc06 	br	2cec <__alt_data_end+0xf8002cec>
    31bc:	18c03fcc 	andi	r3,r3,255
    31c0:	183e9f26 	beq	r3,zero,2c40 <__alt_data_end+0xf8002c40>
    31c4:	d9c02785 	stb	r7,158(sp)
    31c8:	003e9d06 	br	2c40 <__alt_data_end+0xf8002c40>
    31cc:	00c00044 	movi	r3,1
    31d0:	01c00ac4 	movi	r7,43
    31d4:	ac400007 	ldb	r17,0(r21)
    31d8:	003d5e06 	br	2754 <__alt_data_end+0xf8002754>
    31dc:	94800814 	ori	r18,r18,32
    31e0:	ac400007 	ldb	r17,0(r21)
    31e4:	003d5b06 	br	2754 <__alt_data_end+0xf8002754>
    31e8:	d8c02d17 	ldw	r3,180(sp)
    31ec:	d8002785 	stb	zero,158(sp)
    31f0:	1c000017 	ldw	r16,0(r3)
    31f4:	1cc00104 	addi	r19,r3,4
    31f8:	80041926 	beq	r16,zero,4260 <___vfprintf_internal_r+0x1c90>
    31fc:	d9002917 	ldw	r4,164(sp)
    3200:	2003d016 	blt	r4,zero,4144 <___vfprintf_internal_r+0x1b74>
    3204:	200d883a 	mov	r6,r4
    3208:	000b883a 	mov	r5,zero
    320c:	8009883a 	mov	r4,r16
    3210:	da003d15 	stw	r8,244(sp)
    3214:	00075d40 	call	75d4 <memchr>
    3218:	da003d17 	ldw	r8,244(sp)
    321c:	10045426 	beq	r2,zero,4370 <___vfprintf_internal_r+0x1da0>
    3220:	1405c83a 	sub	r2,r2,r16
    3224:	d8802e15 	stw	r2,184(sp)
    3228:	1003cc16 	blt	r2,zero,415c <___vfprintf_internal_r+0x1b8c>
    322c:	df002783 	ldbu	fp,158(sp)
    3230:	d8802a15 	stw	r2,168(sp)
    3234:	dcc02d15 	stw	r19,180(sp)
    3238:	d8002915 	stw	zero,164(sp)
    323c:	d8003215 	stw	zero,200(sp)
    3240:	003eb006 	br	2d04 <__alt_data_end+0xf8002d04>
    3244:	18c03fcc 	andi	r3,r3,255
    3248:	183f9b26 	beq	r3,zero,30b8 <__alt_data_end+0xf80030b8>
    324c:	d9c02785 	stb	r7,158(sp)
    3250:	003f9906 	br	30b8 <__alt_data_end+0xf80030b8>
    3254:	18c03fcc 	andi	r3,r3,255
    3258:	1805551e 	bne	r3,zero,47b0 <___vfprintf_internal_r+0x21e0>
    325c:	01400074 	movhi	r5,1
    3260:	2947fa04 	addi	r5,r5,8168
    3264:	d9403915 	stw	r5,228(sp)
    3268:	9080080c 	andi	r2,r18,32
    326c:	103fae1e 	bne	r2,zero,3128 <__alt_data_end+0xf8003128>
    3270:	9080040c 	andi	r2,r18,16
    3274:	1002de26 	beq	r2,zero,3df0 <___vfprintf_internal_r+0x1820>
    3278:	d8c02d17 	ldw	r3,180(sp)
    327c:	002d883a 	mov	r22,zero
    3280:	1cc00017 	ldw	r19,0(r3)
    3284:	18c00104 	addi	r3,r3,4
    3288:	d8c02d15 	stw	r3,180(sp)
    328c:	003fab06 	br	313c <__alt_data_end+0xf800313c>
    3290:	38803fcc 	andi	r2,r7,255
    3294:	1080201c 	xori	r2,r2,128
    3298:	10bfe004 	addi	r2,r2,-128
    329c:	1002d21e 	bne	r2,zero,3de8 <___vfprintf_internal_r+0x1818>
    32a0:	00c00044 	movi	r3,1
    32a4:	01c00804 	movi	r7,32
    32a8:	ac400007 	ldb	r17,0(r21)
    32ac:	003d2906 	br	2754 <__alt_data_end+0xf8002754>
    32b0:	94800054 	ori	r18,r18,1
    32b4:	ac400007 	ldb	r17,0(r21)
    32b8:	003d2606 	br	2754 <__alt_data_end+0xf8002754>
    32bc:	18c03fcc 	andi	r3,r3,255
    32c0:	183e0526 	beq	r3,zero,2ad8 <__alt_data_end+0xf8002ad8>
    32c4:	d9c02785 	stb	r7,158(sp)
    32c8:	003e0306 	br	2ad8 <__alt_data_end+0xf8002ad8>
    32cc:	94801014 	ori	r18,r18,64
    32d0:	ac400007 	ldb	r17,0(r21)
    32d4:	003d1f06 	br	2754 <__alt_data_end+0xf8002754>
    32d8:	ac400007 	ldb	r17,0(r21)
    32dc:	8a438726 	beq	r17,r9,40fc <___vfprintf_internal_r+0x1b2c>
    32e0:	94800414 	ori	r18,r18,16
    32e4:	003d1b06 	br	2754 <__alt_data_end+0xf8002754>
    32e8:	18c03fcc 	andi	r3,r3,255
    32ec:	1805341e 	bne	r3,zero,47c0 <___vfprintf_internal_r+0x21f0>
    32f0:	9080080c 	andi	r2,r18,32
    32f4:	1002cd26 	beq	r2,zero,3e2c <___vfprintf_internal_r+0x185c>
    32f8:	d9402d17 	ldw	r5,180(sp)
    32fc:	d9002f17 	ldw	r4,188(sp)
    3300:	28800017 	ldw	r2,0(r5)
    3304:	2007d7fa 	srai	r3,r4,31
    3308:	29400104 	addi	r5,r5,4
    330c:	d9402d15 	stw	r5,180(sp)
    3310:	11000015 	stw	r4,0(r2)
    3314:	10c00115 	stw	r3,4(r2)
    3318:	003ce506 	br	26b0 <__alt_data_end+0xf80026b0>
    331c:	d8c02d17 	ldw	r3,180(sp)
    3320:	d9002d17 	ldw	r4,180(sp)
    3324:	d8002785 	stb	zero,158(sp)
    3328:	18800017 	ldw	r2,0(r3)
    332c:	21000104 	addi	r4,r4,4
    3330:	00c00044 	movi	r3,1
    3334:	d8c02a15 	stw	r3,168(sp)
    3338:	d8801405 	stb	r2,80(sp)
    333c:	d9002d15 	stw	r4,180(sp)
    3340:	d8c02e15 	stw	r3,184(sp)
    3344:	d8002915 	stw	zero,164(sp)
    3348:	d8003215 	stw	zero,200(sp)
    334c:	dc001404 	addi	r16,sp,80
    3350:	0039883a 	mov	fp,zero
    3354:	003e7206 	br	2d20 <__alt_data_end+0xf8002d20>
    3358:	01000074 	movhi	r4,1
    335c:	2107fa04 	addi	r4,r4,8168
    3360:	0039883a 	mov	fp,zero
    3364:	d9003915 	stw	r4,228(sp)
    3368:	04401e04 	movi	r17,120
    336c:	003f8206 	br	3178 <__alt_data_end+0xf8003178>
    3370:	18c03fcc 	andi	r3,r3,255
    3374:	1805061e 	bne	r3,zero,4790 <___vfprintf_internal_r+0x21c0>
    3378:	883d9126 	beq	r17,zero,29c0 <__alt_data_end+0xf80029c0>
    337c:	00c00044 	movi	r3,1
    3380:	d8c02a15 	stw	r3,168(sp)
    3384:	dc401405 	stb	r17,80(sp)
    3388:	d8002785 	stb	zero,158(sp)
    338c:	003fec06 	br	3340 <__alt_data_end+0xf8003340>
    3390:	01400074 	movhi	r5,1
    3394:	2947fa04 	addi	r5,r5,8168
    3398:	d9403915 	stw	r5,228(sp)
    339c:	d8c02d15 	stw	r3,180(sp)
    33a0:	1025883a 	mov	r18,r2
    33a4:	04401e04 	movi	r17,120
    33a8:	9d84b03a 	or	r2,r19,r22
    33ac:	1000fc1e 	bne	r2,zero,37a0 <___vfprintf_internal_r+0x11d0>
    33b0:	0039883a 	mov	fp,zero
    33b4:	00800084 	movi	r2,2
    33b8:	10803fcc 	andi	r2,r2,255
    33bc:	00c00044 	movi	r3,1
    33c0:	10c20f26 	beq	r2,r3,3c00 <___vfprintf_internal_r+0x1630>
    33c4:	00c00084 	movi	r3,2
    33c8:	10fd6326 	beq	r2,r3,2958 <__alt_data_end+0xf8002958>
    33cc:	003e2d06 	br	2c84 <__alt_data_end+0xf8002c84>
    33d0:	d8c02017 	ldw	r3,128(sp)
    33d4:	003e9306 	br	2e24 <__alt_data_end+0xf8002e24>
    33d8:	00801944 	movi	r2,101
    33dc:	14407e0e 	bge	r2,r17,35d8 <___vfprintf_internal_r+0x1008>
    33e0:	d9003617 	ldw	r4,216(sp)
    33e4:	d9403817 	ldw	r5,224(sp)
    33e8:	000d883a 	mov	r6,zero
    33ec:	000f883a 	mov	r7,zero
    33f0:	d8c03c15 	stw	r3,240(sp)
    33f4:	da003d15 	stw	r8,244(sp)
    33f8:	000ce300 	call	ce30 <__eqdf2>
    33fc:	d8c03c17 	ldw	r3,240(sp)
    3400:	da003d17 	ldw	r8,244(sp)
    3404:	1000f71e 	bne	r2,zero,37e4 <___vfprintf_internal_r+0x1214>
    3408:	d8801f17 	ldw	r2,124(sp)
    340c:	01000074 	movhi	r4,1
    3410:	21080104 	addi	r4,r4,8196
    3414:	18c00044 	addi	r3,r3,1
    3418:	10800044 	addi	r2,r2,1
    341c:	41000015 	stw	r4,0(r8)
    3420:	01000044 	movi	r4,1
    3424:	41000115 	stw	r4,4(r8)
    3428:	d8c02015 	stw	r3,128(sp)
    342c:	d8801f15 	stw	r2,124(sp)
    3430:	010001c4 	movi	r4,7
    3434:	2082b816 	blt	r4,r2,3f18 <___vfprintf_internal_r+0x1948>
    3438:	42000204 	addi	r8,r8,8
    343c:	d8802617 	ldw	r2,152(sp)
    3440:	d9403317 	ldw	r5,204(sp)
    3444:	11400216 	blt	r2,r5,3450 <___vfprintf_internal_r+0xe80>
    3448:	9080004c 	andi	r2,r18,1
    344c:	103ed526 	beq	r2,zero,2fa4 <__alt_data_end+0xf8002fa4>
    3450:	d8803717 	ldw	r2,220(sp)
    3454:	d9003417 	ldw	r4,208(sp)
    3458:	d9403717 	ldw	r5,220(sp)
    345c:	1887883a 	add	r3,r3,r2
    3460:	d8801f17 	ldw	r2,124(sp)
    3464:	41000015 	stw	r4,0(r8)
    3468:	41400115 	stw	r5,4(r8)
    346c:	10800044 	addi	r2,r2,1
    3470:	d8c02015 	stw	r3,128(sp)
    3474:	d8801f15 	stw	r2,124(sp)
    3478:	010001c4 	movi	r4,7
    347c:	20832916 	blt	r4,r2,4124 <___vfprintf_internal_r+0x1b54>
    3480:	42000204 	addi	r8,r8,8
    3484:	d8803317 	ldw	r2,204(sp)
    3488:	143fffc4 	addi	r16,r2,-1
    348c:	043ec50e 	bge	zero,r16,2fa4 <__alt_data_end+0xf8002fa4>
    3490:	04400404 	movi	r17,16
    3494:	d8801f17 	ldw	r2,124(sp)
    3498:	8c00880e 	bge	r17,r16,36bc <___vfprintf_internal_r+0x10ec>
    349c:	01400074 	movhi	r5,1
    34a0:	29480184 	addi	r5,r5,8198
    34a4:	d9402b15 	stw	r5,172(sp)
    34a8:	058001c4 	movi	r22,7
    34ac:	dcc02c17 	ldw	r19,176(sp)
    34b0:	00000306 	br	34c0 <___vfprintf_internal_r+0xef0>
    34b4:	42000204 	addi	r8,r8,8
    34b8:	843ffc04 	addi	r16,r16,-16
    34bc:	8c00820e 	bge	r17,r16,36c8 <___vfprintf_internal_r+0x10f8>
    34c0:	18c00404 	addi	r3,r3,16
    34c4:	10800044 	addi	r2,r2,1
    34c8:	45000015 	stw	r20,0(r8)
    34cc:	44400115 	stw	r17,4(r8)
    34d0:	d8c02015 	stw	r3,128(sp)
    34d4:	d8801f15 	stw	r2,124(sp)
    34d8:	b0bff60e 	bge	r22,r2,34b4 <__alt_data_end+0xf80034b4>
    34dc:	d9801e04 	addi	r6,sp,120
    34e0:	b80b883a 	mov	r5,r23
    34e4:	9809883a 	mov	r4,r19
    34e8:	000936c0 	call	936c <__sprint_r>
    34ec:	103d3a1e 	bne	r2,zero,29d8 <__alt_data_end+0xf80029d8>
    34f0:	d8c02017 	ldw	r3,128(sp)
    34f4:	d8801f17 	ldw	r2,124(sp)
    34f8:	da000404 	addi	r8,sp,16
    34fc:	003fee06 	br	34b8 <__alt_data_end+0xf80034b8>
    3500:	d9403117 	ldw	r5,196(sp)
    3504:	d8802a17 	ldw	r2,168(sp)
    3508:	28adc83a 	sub	r22,r5,r2
    350c:	05be630e 	bge	zero,r22,2e9c <__alt_data_end+0xf8002e9c>
    3510:	07000404 	movi	fp,16
    3514:	d8801f17 	ldw	r2,124(sp)
    3518:	e5838f0e 	bge	fp,r22,4358 <___vfprintf_internal_r+0x1d88>
    351c:	01400074 	movhi	r5,1
    3520:	29480184 	addi	r5,r5,8198
    3524:	dc403015 	stw	r17,192(sp)
    3528:	d9402b15 	stw	r5,172(sp)
    352c:	b023883a 	mov	r17,r22
    3530:	04c001c4 	movi	r19,7
    3534:	a82d883a 	mov	r22,r21
    3538:	902b883a 	mov	r21,r18
    353c:	8025883a 	mov	r18,r16
    3540:	dc002c17 	ldw	r16,176(sp)
    3544:	00000306 	br	3554 <___vfprintf_internal_r+0xf84>
    3548:	8c7ffc04 	addi	r17,r17,-16
    354c:	42000204 	addi	r8,r8,8
    3550:	e440110e 	bge	fp,r17,3598 <___vfprintf_internal_r+0xfc8>
    3554:	18c00404 	addi	r3,r3,16
    3558:	10800044 	addi	r2,r2,1
    355c:	45000015 	stw	r20,0(r8)
    3560:	47000115 	stw	fp,4(r8)
    3564:	d8c02015 	stw	r3,128(sp)
    3568:	d8801f15 	stw	r2,124(sp)
    356c:	98bff60e 	bge	r19,r2,3548 <__alt_data_end+0xf8003548>
    3570:	d9801e04 	addi	r6,sp,120
    3574:	b80b883a 	mov	r5,r23
    3578:	8009883a 	mov	r4,r16
    357c:	000936c0 	call	936c <__sprint_r>
    3580:	103d151e 	bne	r2,zero,29d8 <__alt_data_end+0xf80029d8>
    3584:	8c7ffc04 	addi	r17,r17,-16
    3588:	d8c02017 	ldw	r3,128(sp)
    358c:	d8801f17 	ldw	r2,124(sp)
    3590:	da000404 	addi	r8,sp,16
    3594:	e47fef16 	blt	fp,r17,3554 <__alt_data_end+0xf8003554>
    3598:	9021883a 	mov	r16,r18
    359c:	a825883a 	mov	r18,r21
    35a0:	b02b883a 	mov	r21,r22
    35a4:	882d883a 	mov	r22,r17
    35a8:	dc403017 	ldw	r17,192(sp)
    35ac:	d9002b17 	ldw	r4,172(sp)
    35b0:	1d87883a 	add	r3,r3,r22
    35b4:	10800044 	addi	r2,r2,1
    35b8:	41000015 	stw	r4,0(r8)
    35bc:	45800115 	stw	r22,4(r8)
    35c0:	d8c02015 	stw	r3,128(sp)
    35c4:	d8801f15 	stw	r2,124(sp)
    35c8:	010001c4 	movi	r4,7
    35cc:	20818e16 	blt	r4,r2,3c08 <___vfprintf_internal_r+0x1638>
    35d0:	42000204 	addi	r8,r8,8
    35d4:	003e3106 	br	2e9c <__alt_data_end+0xf8002e9c>
    35d8:	d9403317 	ldw	r5,204(sp)
    35dc:	00800044 	movi	r2,1
    35e0:	18c00044 	addi	r3,r3,1
    35e4:	1141530e 	bge	r2,r5,3b34 <___vfprintf_internal_r+0x1564>
    35e8:	dc401f17 	ldw	r17,124(sp)
    35ec:	00800044 	movi	r2,1
    35f0:	40800115 	stw	r2,4(r8)
    35f4:	8c400044 	addi	r17,r17,1
    35f8:	44000015 	stw	r16,0(r8)
    35fc:	d8c02015 	stw	r3,128(sp)
    3600:	dc401f15 	stw	r17,124(sp)
    3604:	008001c4 	movi	r2,7
    3608:	14416b16 	blt	r2,r17,3bb8 <___vfprintf_internal_r+0x15e8>
    360c:	42000204 	addi	r8,r8,8
    3610:	d8803717 	ldw	r2,220(sp)
    3614:	d9003417 	ldw	r4,208(sp)
    3618:	8c400044 	addi	r17,r17,1
    361c:	10c7883a 	add	r3,r2,r3
    3620:	40800115 	stw	r2,4(r8)
    3624:	41000015 	stw	r4,0(r8)
    3628:	d8c02015 	stw	r3,128(sp)
    362c:	dc401f15 	stw	r17,124(sp)
    3630:	008001c4 	movi	r2,7
    3634:	14416916 	blt	r2,r17,3bdc <___vfprintf_internal_r+0x160c>
    3638:	45800204 	addi	r22,r8,8
    363c:	d9003617 	ldw	r4,216(sp)
    3640:	d9403817 	ldw	r5,224(sp)
    3644:	000d883a 	mov	r6,zero
    3648:	000f883a 	mov	r7,zero
    364c:	d8c03c15 	stw	r3,240(sp)
    3650:	000ce300 	call	ce30 <__eqdf2>
    3654:	d8c03c17 	ldw	r3,240(sp)
    3658:	1000bc26 	beq	r2,zero,394c <___vfprintf_internal_r+0x137c>
    365c:	d9403317 	ldw	r5,204(sp)
    3660:	84000044 	addi	r16,r16,1
    3664:	8c400044 	addi	r17,r17,1
    3668:	28bfffc4 	addi	r2,r5,-1
    366c:	1887883a 	add	r3,r3,r2
    3670:	b0800115 	stw	r2,4(r22)
    3674:	b4000015 	stw	r16,0(r22)
    3678:	d8c02015 	stw	r3,128(sp)
    367c:	dc401f15 	stw	r17,124(sp)
    3680:	008001c4 	movi	r2,7
    3684:	14414316 	blt	r2,r17,3b94 <___vfprintf_internal_r+0x15c4>
    3688:	b5800204 	addi	r22,r22,8
    368c:	d9003a17 	ldw	r4,232(sp)
    3690:	df0022c4 	addi	fp,sp,139
    3694:	8c400044 	addi	r17,r17,1
    3698:	20c7883a 	add	r3,r4,r3
    369c:	b7000015 	stw	fp,0(r22)
    36a0:	b1000115 	stw	r4,4(r22)
    36a4:	d8c02015 	stw	r3,128(sp)
    36a8:	dc401f15 	stw	r17,124(sp)
    36ac:	008001c4 	movi	r2,7
    36b0:	14400e16 	blt	r2,r17,36ec <___vfprintf_internal_r+0x111c>
    36b4:	b2000204 	addi	r8,r22,8
    36b8:	003e3a06 	br	2fa4 <__alt_data_end+0xf8002fa4>
    36bc:	01000074 	movhi	r4,1
    36c0:	21080184 	addi	r4,r4,8198
    36c4:	d9002b15 	stw	r4,172(sp)
    36c8:	d9002b17 	ldw	r4,172(sp)
    36cc:	1c07883a 	add	r3,r3,r16
    36d0:	44000115 	stw	r16,4(r8)
    36d4:	41000015 	stw	r4,0(r8)
    36d8:	10800044 	addi	r2,r2,1
    36dc:	d8c02015 	stw	r3,128(sp)
    36e0:	d8801f15 	stw	r2,124(sp)
    36e4:	010001c4 	movi	r4,7
    36e8:	20be2d0e 	bge	r4,r2,2fa0 <__alt_data_end+0xf8002fa0>
    36ec:	d9002c17 	ldw	r4,176(sp)
    36f0:	d9801e04 	addi	r6,sp,120
    36f4:	b80b883a 	mov	r5,r23
    36f8:	000936c0 	call	936c <__sprint_r>
    36fc:	103cb61e 	bne	r2,zero,29d8 <__alt_data_end+0xf80029d8>
    3700:	d8c02017 	ldw	r3,128(sp)
    3704:	da000404 	addi	r8,sp,16
    3708:	003e2606 	br	2fa4 <__alt_data_end+0xf8002fa4>
    370c:	d9002c17 	ldw	r4,176(sp)
    3710:	d9801e04 	addi	r6,sp,120
    3714:	b80b883a 	mov	r5,r23
    3718:	000936c0 	call	936c <__sprint_r>
    371c:	103e5d26 	beq	r2,zero,3094 <__alt_data_end+0xf8003094>
    3720:	003cad06 	br	29d8 <__alt_data_end+0xf80029d8>
    3724:	d9002c17 	ldw	r4,176(sp)
    3728:	d9801e04 	addi	r6,sp,120
    372c:	b80b883a 	mov	r5,r23
    3730:	000936c0 	call	936c <__sprint_r>
    3734:	103ca81e 	bne	r2,zero,29d8 <__alt_data_end+0xf80029d8>
    3738:	d8c02017 	ldw	r3,128(sp)
    373c:	da000404 	addi	r8,sp,16
    3740:	003e0b06 	br	2f70 <__alt_data_end+0xf8002f70>
    3744:	d9002c17 	ldw	r4,176(sp)
    3748:	d9801e04 	addi	r6,sp,120
    374c:	b80b883a 	mov	r5,r23
    3750:	000936c0 	call	936c <__sprint_r>
    3754:	103ca01e 	bne	r2,zero,29d8 <__alt_data_end+0xf80029d8>
    3758:	d8c02017 	ldw	r3,128(sp)
    375c:	da000404 	addi	r8,sp,16
    3760:	003dbd06 	br	2e58 <__alt_data_end+0xf8002e58>
    3764:	d9002c17 	ldw	r4,176(sp)
    3768:	d9801e04 	addi	r6,sp,120
    376c:	b80b883a 	mov	r5,r23
    3770:	000936c0 	call	936c <__sprint_r>
    3774:	103c981e 	bne	r2,zero,29d8 <__alt_data_end+0xf80029d8>
    3778:	d8c02017 	ldw	r3,128(sp)
    377c:	da000404 	addi	r8,sp,16
    3780:	003dc306 	br	2e90 <__alt_data_end+0xf8002e90>
    3784:	d8802917 	ldw	r2,164(sp)
    3788:	d8002785 	stb	zero,158(sp)
    378c:	103f0616 	blt	r2,zero,33a8 <__alt_data_end+0xf80033a8>
    3790:	00ffdfc4 	movi	r3,-129
    3794:	9d84b03a 	or	r2,r19,r22
    3798:	90e4703a 	and	r18,r18,r3
    379c:	103c6b26 	beq	r2,zero,294c <__alt_data_end+0xf800294c>
    37a0:	0039883a 	mov	fp,zero
    37a4:	003e7406 	br	3178 <__alt_data_end+0xf8003178>
    37a8:	9080040c 	andi	r2,r18,16
    37ac:	1001b326 	beq	r2,zero,3e7c <___vfprintf_internal_r+0x18ac>
    37b0:	d9002d17 	ldw	r4,180(sp)
    37b4:	d9402917 	ldw	r5,164(sp)
    37b8:	d8002785 	stb	zero,158(sp)
    37bc:	20800104 	addi	r2,r4,4
    37c0:	24c00017 	ldw	r19,0(r4)
    37c4:	002d883a 	mov	r22,zero
    37c8:	2801b516 	blt	r5,zero,3ea0 <___vfprintf_internal_r+0x18d0>
    37cc:	00ffdfc4 	movi	r3,-129
    37d0:	d8802d15 	stw	r2,180(sp)
    37d4:	90e4703a 	and	r18,r18,r3
    37d8:	983d2726 	beq	r19,zero,2c78 <__alt_data_end+0xf8002c78>
    37dc:	0039883a 	mov	fp,zero
    37e0:	003d2a06 	br	2c8c <__alt_data_end+0xf8002c8c>
    37e4:	dc402617 	ldw	r17,152(sp)
    37e8:	0441d30e 	bge	zero,r17,3f38 <___vfprintf_internal_r+0x1968>
    37ec:	dc403217 	ldw	r17,200(sp)
    37f0:	d8803317 	ldw	r2,204(sp)
    37f4:	1440010e 	bge	r2,r17,37fc <___vfprintf_internal_r+0x122c>
    37f8:	1023883a 	mov	r17,r2
    37fc:	04400a0e 	bge	zero,r17,3828 <___vfprintf_internal_r+0x1258>
    3800:	d8801f17 	ldw	r2,124(sp)
    3804:	1c47883a 	add	r3,r3,r17
    3808:	44000015 	stw	r16,0(r8)
    380c:	10800044 	addi	r2,r2,1
    3810:	44400115 	stw	r17,4(r8)
    3814:	d8c02015 	stw	r3,128(sp)
    3818:	d8801f15 	stw	r2,124(sp)
    381c:	010001c4 	movi	r4,7
    3820:	20826516 	blt	r4,r2,41b8 <___vfprintf_internal_r+0x1be8>
    3824:	42000204 	addi	r8,r8,8
    3828:	88026116 	blt	r17,zero,41b0 <___vfprintf_internal_r+0x1be0>
    382c:	d9003217 	ldw	r4,200(sp)
    3830:	2463c83a 	sub	r17,r4,r17
    3834:	04407b0e 	bge	zero,r17,3a24 <___vfprintf_internal_r+0x1454>
    3838:	05800404 	movi	r22,16
    383c:	d8801f17 	ldw	r2,124(sp)
    3840:	b4419d0e 	bge	r22,r17,3eb8 <___vfprintf_internal_r+0x18e8>
    3844:	01000074 	movhi	r4,1
    3848:	21080184 	addi	r4,r4,8198
    384c:	d9002b15 	stw	r4,172(sp)
    3850:	070001c4 	movi	fp,7
    3854:	dcc02c17 	ldw	r19,176(sp)
    3858:	00000306 	br	3868 <___vfprintf_internal_r+0x1298>
    385c:	42000204 	addi	r8,r8,8
    3860:	8c7ffc04 	addi	r17,r17,-16
    3864:	b441970e 	bge	r22,r17,3ec4 <___vfprintf_internal_r+0x18f4>
    3868:	18c00404 	addi	r3,r3,16
    386c:	10800044 	addi	r2,r2,1
    3870:	45000015 	stw	r20,0(r8)
    3874:	45800115 	stw	r22,4(r8)
    3878:	d8c02015 	stw	r3,128(sp)
    387c:	d8801f15 	stw	r2,124(sp)
    3880:	e0bff60e 	bge	fp,r2,385c <__alt_data_end+0xf800385c>
    3884:	d9801e04 	addi	r6,sp,120
    3888:	b80b883a 	mov	r5,r23
    388c:	9809883a 	mov	r4,r19
    3890:	000936c0 	call	936c <__sprint_r>
    3894:	103c501e 	bne	r2,zero,29d8 <__alt_data_end+0xf80029d8>
    3898:	d8c02017 	ldw	r3,128(sp)
    389c:	d8801f17 	ldw	r2,124(sp)
    38a0:	da000404 	addi	r8,sp,16
    38a4:	003fee06 	br	3860 <__alt_data_end+0xf8003860>
    38a8:	d9002c17 	ldw	r4,176(sp)
    38ac:	d9801e04 	addi	r6,sp,120
    38b0:	b80b883a 	mov	r5,r23
    38b4:	000936c0 	call	936c <__sprint_r>
    38b8:	103c471e 	bne	r2,zero,29d8 <__alt_data_end+0xf80029d8>
    38bc:	d8c02017 	ldw	r3,128(sp)
    38c0:	df002787 	ldb	fp,158(sp)
    38c4:	da000404 	addi	r8,sp,16
    38c8:	003d5606 	br	2e24 <__alt_data_end+0xf8002e24>
    38cc:	9080040c 	andi	r2,r18,16
    38d0:	10016126 	beq	r2,zero,3e58 <___vfprintf_internal_r+0x1888>
    38d4:	d8802d17 	ldw	r2,180(sp)
    38d8:	14c00017 	ldw	r19,0(r2)
    38dc:	10800104 	addi	r2,r2,4
    38e0:	d8802d15 	stw	r2,180(sp)
    38e4:	982dd7fa 	srai	r22,r19,31
    38e8:	b005883a 	mov	r2,r22
    38ec:	003c8206 	br	2af8 <__alt_data_end+0xf8002af8>
    38f0:	9080040c 	andi	r2,r18,16
    38f4:	10003526 	beq	r2,zero,39cc <___vfprintf_internal_r+0x13fc>
    38f8:	d9402d17 	ldw	r5,180(sp)
    38fc:	d8c02917 	ldw	r3,164(sp)
    3900:	d8002785 	stb	zero,158(sp)
    3904:	28800104 	addi	r2,r5,4
    3908:	2cc00017 	ldw	r19,0(r5)
    390c:	002d883a 	mov	r22,zero
    3910:	18003716 	blt	r3,zero,39f0 <___vfprintf_internal_r+0x1420>
    3914:	00ffdfc4 	movi	r3,-129
    3918:	d8802d15 	stw	r2,180(sp)
    391c:	90e4703a 	and	r18,r18,r3
    3920:	0039883a 	mov	fp,zero
    3924:	983df326 	beq	r19,zero,30f4 <__alt_data_end+0xf80030f4>
    3928:	00800244 	movi	r2,9
    392c:	14fc7b36 	bltu	r2,r19,2b1c <__alt_data_end+0xf8002b1c>
    3930:	d8c02817 	ldw	r3,160(sp)
    3934:	dc001dc4 	addi	r16,sp,119
    3938:	9cc00c04 	addi	r19,r19,48
    393c:	1c07c83a 	sub	r3,r3,r16
    3940:	dcc01dc5 	stb	r19,119(sp)
    3944:	d8c02e15 	stw	r3,184(sp)
    3948:	003ce806 	br	2cec <__alt_data_end+0xf8002cec>
    394c:	d8803317 	ldw	r2,204(sp)
    3950:	143fffc4 	addi	r16,r2,-1
    3954:	043f4d0e 	bge	zero,r16,368c <__alt_data_end+0xf800368c>
    3958:	07000404 	movi	fp,16
    395c:	e400810e 	bge	fp,r16,3b64 <___vfprintf_internal_r+0x1594>
    3960:	01400074 	movhi	r5,1
    3964:	29480184 	addi	r5,r5,8198
    3968:	d9402b15 	stw	r5,172(sp)
    396c:	01c001c4 	movi	r7,7
    3970:	dcc02c17 	ldw	r19,176(sp)
    3974:	00000306 	br	3984 <___vfprintf_internal_r+0x13b4>
    3978:	b5800204 	addi	r22,r22,8
    397c:	843ffc04 	addi	r16,r16,-16
    3980:	e4007b0e 	bge	fp,r16,3b70 <___vfprintf_internal_r+0x15a0>
    3984:	18c00404 	addi	r3,r3,16
    3988:	8c400044 	addi	r17,r17,1
    398c:	b5000015 	stw	r20,0(r22)
    3990:	b7000115 	stw	fp,4(r22)
    3994:	d8c02015 	stw	r3,128(sp)
    3998:	dc401f15 	stw	r17,124(sp)
    399c:	3c7ff60e 	bge	r7,r17,3978 <__alt_data_end+0xf8003978>
    39a0:	d9801e04 	addi	r6,sp,120
    39a4:	b80b883a 	mov	r5,r23
    39a8:	9809883a 	mov	r4,r19
    39ac:	d9c03c15 	stw	r7,240(sp)
    39b0:	000936c0 	call	936c <__sprint_r>
    39b4:	d9c03c17 	ldw	r7,240(sp)
    39b8:	103c071e 	bne	r2,zero,29d8 <__alt_data_end+0xf80029d8>
    39bc:	d8c02017 	ldw	r3,128(sp)
    39c0:	dc401f17 	ldw	r17,124(sp)
    39c4:	dd800404 	addi	r22,sp,16
    39c8:	003fec06 	br	397c <__alt_data_end+0xf800397c>
    39cc:	9080100c 	andi	r2,r18,64
    39d0:	d8002785 	stb	zero,158(sp)
    39d4:	10010e26 	beq	r2,zero,3e10 <___vfprintf_internal_r+0x1840>
    39d8:	d9002d17 	ldw	r4,180(sp)
    39dc:	d9402917 	ldw	r5,164(sp)
    39e0:	002d883a 	mov	r22,zero
    39e4:	20800104 	addi	r2,r4,4
    39e8:	24c0000b 	ldhu	r19,0(r4)
    39ec:	283fc90e 	bge	r5,zero,3914 <__alt_data_end+0xf8003914>
    39f0:	d8802d15 	stw	r2,180(sp)
    39f4:	0039883a 	mov	fp,zero
    39f8:	9d84b03a 	or	r2,r19,r22
    39fc:	103c461e 	bne	r2,zero,2b18 <__alt_data_end+0xf8002b18>
    3a00:	00800044 	movi	r2,1
    3a04:	003e6c06 	br	33b8 <__alt_data_end+0xf80033b8>
    3a08:	d9002c17 	ldw	r4,176(sp)
    3a0c:	d9801e04 	addi	r6,sp,120
    3a10:	b80b883a 	mov	r5,r23
    3a14:	000936c0 	call	936c <__sprint_r>
    3a18:	103bef1e 	bne	r2,zero,29d8 <__alt_data_end+0xf80029d8>
    3a1c:	d8c02017 	ldw	r3,128(sp)
    3a20:	da000404 	addi	r8,sp,16
    3a24:	d9003217 	ldw	r4,200(sp)
    3a28:	d8802617 	ldw	r2,152(sp)
    3a2c:	d9403317 	ldw	r5,204(sp)
    3a30:	8123883a 	add	r17,r16,r4
    3a34:	11400216 	blt	r2,r5,3a40 <___vfprintf_internal_r+0x1470>
    3a38:	9100004c 	andi	r4,r18,1
    3a3c:	20000d26 	beq	r4,zero,3a74 <___vfprintf_internal_r+0x14a4>
    3a40:	d9003717 	ldw	r4,220(sp)
    3a44:	d9403417 	ldw	r5,208(sp)
    3a48:	1907883a 	add	r3,r3,r4
    3a4c:	d9001f17 	ldw	r4,124(sp)
    3a50:	41400015 	stw	r5,0(r8)
    3a54:	d9403717 	ldw	r5,220(sp)
    3a58:	21000044 	addi	r4,r4,1
    3a5c:	d8c02015 	stw	r3,128(sp)
    3a60:	41400115 	stw	r5,4(r8)
    3a64:	d9001f15 	stw	r4,124(sp)
    3a68:	014001c4 	movi	r5,7
    3a6c:	2901e816 	blt	r5,r4,4210 <___vfprintf_internal_r+0x1c40>
    3a70:	42000204 	addi	r8,r8,8
    3a74:	d9003317 	ldw	r4,204(sp)
    3a78:	8121883a 	add	r16,r16,r4
    3a7c:	2085c83a 	sub	r2,r4,r2
    3a80:	8461c83a 	sub	r16,r16,r17
    3a84:	1400010e 	bge	r2,r16,3a8c <___vfprintf_internal_r+0x14bc>
    3a88:	1021883a 	mov	r16,r2
    3a8c:	04000a0e 	bge	zero,r16,3ab8 <___vfprintf_internal_r+0x14e8>
    3a90:	d9001f17 	ldw	r4,124(sp)
    3a94:	1c07883a 	add	r3,r3,r16
    3a98:	44400015 	stw	r17,0(r8)
    3a9c:	21000044 	addi	r4,r4,1
    3aa0:	44000115 	stw	r16,4(r8)
    3aa4:	d8c02015 	stw	r3,128(sp)
    3aa8:	d9001f15 	stw	r4,124(sp)
    3aac:	014001c4 	movi	r5,7
    3ab0:	2901fb16 	blt	r5,r4,42a0 <___vfprintf_internal_r+0x1cd0>
    3ab4:	42000204 	addi	r8,r8,8
    3ab8:	8001f716 	blt	r16,zero,4298 <___vfprintf_internal_r+0x1cc8>
    3abc:	1421c83a 	sub	r16,r2,r16
    3ac0:	043d380e 	bge	zero,r16,2fa4 <__alt_data_end+0xf8002fa4>
    3ac4:	04400404 	movi	r17,16
    3ac8:	d8801f17 	ldw	r2,124(sp)
    3acc:	8c3efb0e 	bge	r17,r16,36bc <__alt_data_end+0xf80036bc>
    3ad0:	01400074 	movhi	r5,1
    3ad4:	29480184 	addi	r5,r5,8198
    3ad8:	d9402b15 	stw	r5,172(sp)
    3adc:	058001c4 	movi	r22,7
    3ae0:	dcc02c17 	ldw	r19,176(sp)
    3ae4:	00000306 	br	3af4 <___vfprintf_internal_r+0x1524>
    3ae8:	42000204 	addi	r8,r8,8
    3aec:	843ffc04 	addi	r16,r16,-16
    3af0:	8c3ef50e 	bge	r17,r16,36c8 <__alt_data_end+0xf80036c8>
    3af4:	18c00404 	addi	r3,r3,16
    3af8:	10800044 	addi	r2,r2,1
    3afc:	45000015 	stw	r20,0(r8)
    3b00:	44400115 	stw	r17,4(r8)
    3b04:	d8c02015 	stw	r3,128(sp)
    3b08:	d8801f15 	stw	r2,124(sp)
    3b0c:	b0bff60e 	bge	r22,r2,3ae8 <__alt_data_end+0xf8003ae8>
    3b10:	d9801e04 	addi	r6,sp,120
    3b14:	b80b883a 	mov	r5,r23
    3b18:	9809883a 	mov	r4,r19
    3b1c:	000936c0 	call	936c <__sprint_r>
    3b20:	103bad1e 	bne	r2,zero,29d8 <__alt_data_end+0xf80029d8>
    3b24:	d8c02017 	ldw	r3,128(sp)
    3b28:	d8801f17 	ldw	r2,124(sp)
    3b2c:	da000404 	addi	r8,sp,16
    3b30:	003fee06 	br	3aec <__alt_data_end+0xf8003aec>
    3b34:	9088703a 	and	r4,r18,r2
    3b38:	203eab1e 	bne	r4,zero,35e8 <__alt_data_end+0xf80035e8>
    3b3c:	dc401f17 	ldw	r17,124(sp)
    3b40:	40800115 	stw	r2,4(r8)
    3b44:	44000015 	stw	r16,0(r8)
    3b48:	8c400044 	addi	r17,r17,1
    3b4c:	d8c02015 	stw	r3,128(sp)
    3b50:	dc401f15 	stw	r17,124(sp)
    3b54:	008001c4 	movi	r2,7
    3b58:	14400e16 	blt	r2,r17,3b94 <___vfprintf_internal_r+0x15c4>
    3b5c:	45800204 	addi	r22,r8,8
    3b60:	003eca06 	br	368c <__alt_data_end+0xf800368c>
    3b64:	01000074 	movhi	r4,1
    3b68:	21080184 	addi	r4,r4,8198
    3b6c:	d9002b15 	stw	r4,172(sp)
    3b70:	d8802b17 	ldw	r2,172(sp)
    3b74:	1c07883a 	add	r3,r3,r16
    3b78:	8c400044 	addi	r17,r17,1
    3b7c:	b0800015 	stw	r2,0(r22)
    3b80:	b4000115 	stw	r16,4(r22)
    3b84:	d8c02015 	stw	r3,128(sp)
    3b88:	dc401f15 	stw	r17,124(sp)
    3b8c:	008001c4 	movi	r2,7
    3b90:	147ebd0e 	bge	r2,r17,3688 <__alt_data_end+0xf8003688>
    3b94:	d9002c17 	ldw	r4,176(sp)
    3b98:	d9801e04 	addi	r6,sp,120
    3b9c:	b80b883a 	mov	r5,r23
    3ba0:	000936c0 	call	936c <__sprint_r>
    3ba4:	103b8c1e 	bne	r2,zero,29d8 <__alt_data_end+0xf80029d8>
    3ba8:	d8c02017 	ldw	r3,128(sp)
    3bac:	dc401f17 	ldw	r17,124(sp)
    3bb0:	dd800404 	addi	r22,sp,16
    3bb4:	003eb506 	br	368c <__alt_data_end+0xf800368c>
    3bb8:	d9002c17 	ldw	r4,176(sp)
    3bbc:	d9801e04 	addi	r6,sp,120
    3bc0:	b80b883a 	mov	r5,r23
    3bc4:	000936c0 	call	936c <__sprint_r>
    3bc8:	103b831e 	bne	r2,zero,29d8 <__alt_data_end+0xf80029d8>
    3bcc:	d8c02017 	ldw	r3,128(sp)
    3bd0:	dc401f17 	ldw	r17,124(sp)
    3bd4:	da000404 	addi	r8,sp,16
    3bd8:	003e8d06 	br	3610 <__alt_data_end+0xf8003610>
    3bdc:	d9002c17 	ldw	r4,176(sp)
    3be0:	d9801e04 	addi	r6,sp,120
    3be4:	b80b883a 	mov	r5,r23
    3be8:	000936c0 	call	936c <__sprint_r>
    3bec:	103b7a1e 	bne	r2,zero,29d8 <__alt_data_end+0xf80029d8>
    3bf0:	d8c02017 	ldw	r3,128(sp)
    3bf4:	dc401f17 	ldw	r17,124(sp)
    3bf8:	dd800404 	addi	r22,sp,16
    3bfc:	003e8f06 	br	363c <__alt_data_end+0xf800363c>
    3c00:	0027883a 	mov	r19,zero
    3c04:	003f4a06 	br	3930 <__alt_data_end+0xf8003930>
    3c08:	d9002c17 	ldw	r4,176(sp)
    3c0c:	d9801e04 	addi	r6,sp,120
    3c10:	b80b883a 	mov	r5,r23
    3c14:	000936c0 	call	936c <__sprint_r>
    3c18:	103b6f1e 	bne	r2,zero,29d8 <__alt_data_end+0xf80029d8>
    3c1c:	d8c02017 	ldw	r3,128(sp)
    3c20:	da000404 	addi	r8,sp,16
    3c24:	003c9d06 	br	2e9c <__alt_data_end+0xf8002e9c>
    3c28:	04e7c83a 	sub	r19,zero,r19
    3c2c:	9804c03a 	cmpne	r2,r19,zero
    3c30:	05adc83a 	sub	r22,zero,r22
    3c34:	b0adc83a 	sub	r22,r22,r2
    3c38:	d8802917 	ldw	r2,164(sp)
    3c3c:	07000b44 	movi	fp,45
    3c40:	df002785 	stb	fp,158(sp)
    3c44:	10017b16 	blt	r2,zero,4234 <___vfprintf_internal_r+0x1c64>
    3c48:	00bfdfc4 	movi	r2,-129
    3c4c:	90a4703a 	and	r18,r18,r2
    3c50:	003bb106 	br	2b18 <__alt_data_end+0xf8002b18>
    3c54:	d9003617 	ldw	r4,216(sp)
    3c58:	d9403817 	ldw	r5,224(sp)
    3c5c:	da003d15 	stw	r8,244(sp)
    3c60:	0008fe40 	call	8fe4 <__fpclassifyd>
    3c64:	da003d17 	ldw	r8,244(sp)
    3c68:	1000f026 	beq	r2,zero,402c <___vfprintf_internal_r+0x1a5c>
    3c6c:	d9002917 	ldw	r4,164(sp)
    3c70:	05bff7c4 	movi	r22,-33
    3c74:	00bfffc4 	movi	r2,-1
    3c78:	8dac703a 	and	r22,r17,r22
    3c7c:	20820026 	beq	r4,r2,4480 <___vfprintf_internal_r+0x1eb0>
    3c80:	008011c4 	movi	r2,71
    3c84:	b081f726 	beq	r22,r2,4464 <___vfprintf_internal_r+0x1e94>
    3c88:	d9003817 	ldw	r4,224(sp)
    3c8c:	90c04014 	ori	r3,r18,256
    3c90:	d8c02b15 	stw	r3,172(sp)
    3c94:	20021516 	blt	r4,zero,44ec <___vfprintf_internal_r+0x1f1c>
    3c98:	dcc03817 	ldw	r19,224(sp)
    3c9c:	d8002a05 	stb	zero,168(sp)
    3ca0:	00801984 	movi	r2,102
    3ca4:	8881f926 	beq	r17,r2,448c <___vfprintf_internal_r+0x1ebc>
    3ca8:	00801184 	movi	r2,70
    3cac:	88821c26 	beq	r17,r2,4520 <___vfprintf_internal_r+0x1f50>
    3cb0:	00801144 	movi	r2,69
    3cb4:	b081ef26 	beq	r22,r2,4474 <___vfprintf_internal_r+0x1ea4>
    3cb8:	d8c02917 	ldw	r3,164(sp)
    3cbc:	d8802104 	addi	r2,sp,132
    3cc0:	d8800315 	stw	r2,12(sp)
    3cc4:	d9403617 	ldw	r5,216(sp)
    3cc8:	d8802504 	addi	r2,sp,148
    3ccc:	d9002c17 	ldw	r4,176(sp)
    3cd0:	d8800215 	stw	r2,8(sp)
    3cd4:	d8802604 	addi	r2,sp,152
    3cd8:	d8c00015 	stw	r3,0(sp)
    3cdc:	d8800115 	stw	r2,4(sp)
    3ce0:	01c00084 	movi	r7,2
    3ce4:	980d883a 	mov	r6,r19
    3ce8:	d8c03c15 	stw	r3,240(sp)
    3cec:	da003d15 	stw	r8,244(sp)
    3cf0:	0004bf40 	call	4bf4 <_dtoa_r>
    3cf4:	1021883a 	mov	r16,r2
    3cf8:	008019c4 	movi	r2,103
    3cfc:	d8c03c17 	ldw	r3,240(sp)
    3d00:	da003d17 	ldw	r8,244(sp)
    3d04:	88817126 	beq	r17,r2,42cc <___vfprintf_internal_r+0x1cfc>
    3d08:	008011c4 	movi	r2,71
    3d0c:	88829226 	beq	r17,r2,4758 <___vfprintf_internal_r+0x2188>
    3d10:	80f9883a 	add	fp,r16,r3
    3d14:	d9003617 	ldw	r4,216(sp)
    3d18:	000d883a 	mov	r6,zero
    3d1c:	000f883a 	mov	r7,zero
    3d20:	980b883a 	mov	r5,r19
    3d24:	da003d15 	stw	r8,244(sp)
    3d28:	000ce300 	call	ce30 <__eqdf2>
    3d2c:	da003d17 	ldw	r8,244(sp)
    3d30:	10018d26 	beq	r2,zero,4368 <___vfprintf_internal_r+0x1d98>
    3d34:	d8802117 	ldw	r2,132(sp)
    3d38:	1700062e 	bgeu	r2,fp,3d54 <___vfprintf_internal_r+0x1784>
    3d3c:	01000c04 	movi	r4,48
    3d40:	10c00044 	addi	r3,r2,1
    3d44:	d8c02115 	stw	r3,132(sp)
    3d48:	11000005 	stb	r4,0(r2)
    3d4c:	d8802117 	ldw	r2,132(sp)
    3d50:	173ffb36 	bltu	r2,fp,3d40 <__alt_data_end+0xf8003d40>
    3d54:	1405c83a 	sub	r2,r2,r16
    3d58:	d8803315 	stw	r2,204(sp)
    3d5c:	008011c4 	movi	r2,71
    3d60:	b0817626 	beq	r22,r2,433c <___vfprintf_internal_r+0x1d6c>
    3d64:	00801944 	movi	r2,101
    3d68:	1442810e 	bge	r2,r17,4770 <___vfprintf_internal_r+0x21a0>
    3d6c:	d8c02617 	ldw	r3,152(sp)
    3d70:	00801984 	movi	r2,102
    3d74:	d8c03215 	stw	r3,200(sp)
    3d78:	8881fe26 	beq	r17,r2,4574 <___vfprintf_internal_r+0x1fa4>
    3d7c:	d8c03217 	ldw	r3,200(sp)
    3d80:	d9003317 	ldw	r4,204(sp)
    3d84:	1901dd16 	blt	r3,r4,44fc <___vfprintf_internal_r+0x1f2c>
    3d88:	9480004c 	andi	r18,r18,1
    3d8c:	90022b1e 	bne	r18,zero,463c <___vfprintf_internal_r+0x206c>
    3d90:	1805883a 	mov	r2,r3
    3d94:	18028016 	blt	r3,zero,4798 <___vfprintf_internal_r+0x21c8>
    3d98:	d8c03217 	ldw	r3,200(sp)
    3d9c:	044019c4 	movi	r17,103
    3da0:	d8c02e15 	stw	r3,184(sp)
    3da4:	df002a07 	ldb	fp,168(sp)
    3da8:	e001531e 	bne	fp,zero,42f8 <___vfprintf_internal_r+0x1d28>
    3dac:	df002783 	ldbu	fp,158(sp)
    3db0:	d8802a15 	stw	r2,168(sp)
    3db4:	dc802b17 	ldw	r18,172(sp)
    3db8:	d8002915 	stw	zero,164(sp)
    3dbc:	003bd106 	br	2d04 <__alt_data_end+0xf8002d04>
    3dc0:	d8802d17 	ldw	r2,180(sp)
    3dc4:	d8c02d17 	ldw	r3,180(sp)
    3dc8:	d9002d17 	ldw	r4,180(sp)
    3dcc:	10800017 	ldw	r2,0(r2)
    3dd0:	18c00117 	ldw	r3,4(r3)
    3dd4:	21000204 	addi	r4,r4,8
    3dd8:	d8803615 	stw	r2,216(sp)
    3ddc:	d8c03815 	stw	r3,224(sp)
    3de0:	d9002d15 	stw	r4,180(sp)
    3de4:	003b7506 	br	2bbc <__alt_data_end+0xf8002bbc>
    3de8:	ac400007 	ldb	r17,0(r21)
    3dec:	003a5906 	br	2754 <__alt_data_end+0xf8002754>
    3df0:	9080100c 	andi	r2,r18,64
    3df4:	1000a826 	beq	r2,zero,4098 <___vfprintf_internal_r+0x1ac8>
    3df8:	d9002d17 	ldw	r4,180(sp)
    3dfc:	002d883a 	mov	r22,zero
    3e00:	24c0000b 	ldhu	r19,0(r4)
    3e04:	21000104 	addi	r4,r4,4
    3e08:	d9002d15 	stw	r4,180(sp)
    3e0c:	003ccb06 	br	313c <__alt_data_end+0xf800313c>
    3e10:	d8c02d17 	ldw	r3,180(sp)
    3e14:	d9002917 	ldw	r4,164(sp)
    3e18:	002d883a 	mov	r22,zero
    3e1c:	18800104 	addi	r2,r3,4
    3e20:	1cc00017 	ldw	r19,0(r3)
    3e24:	203ebb0e 	bge	r4,zero,3914 <__alt_data_end+0xf8003914>
    3e28:	003ef106 	br	39f0 <__alt_data_end+0xf80039f0>
    3e2c:	9080040c 	andi	r2,r18,16
    3e30:	1000921e 	bne	r2,zero,407c <___vfprintf_internal_r+0x1aac>
    3e34:	9480100c 	andi	r18,r18,64
    3e38:	90013926 	beq	r18,zero,4320 <___vfprintf_internal_r+0x1d50>
    3e3c:	d9002d17 	ldw	r4,180(sp)
    3e40:	d9402f17 	ldw	r5,188(sp)
    3e44:	20800017 	ldw	r2,0(r4)
    3e48:	21000104 	addi	r4,r4,4
    3e4c:	d9002d15 	stw	r4,180(sp)
    3e50:	1140000d 	sth	r5,0(r2)
    3e54:	003a1606 	br	26b0 <__alt_data_end+0xf80026b0>
    3e58:	9080100c 	andi	r2,r18,64
    3e5c:	10008026 	beq	r2,zero,4060 <___vfprintf_internal_r+0x1a90>
    3e60:	d8c02d17 	ldw	r3,180(sp)
    3e64:	1cc0000f 	ldh	r19,0(r3)
    3e68:	18c00104 	addi	r3,r3,4
    3e6c:	d8c02d15 	stw	r3,180(sp)
    3e70:	982dd7fa 	srai	r22,r19,31
    3e74:	b005883a 	mov	r2,r22
    3e78:	003b1f06 	br	2af8 <__alt_data_end+0xf8002af8>
    3e7c:	9080100c 	andi	r2,r18,64
    3e80:	d8002785 	stb	zero,158(sp)
    3e84:	10008a1e 	bne	r2,zero,40b0 <___vfprintf_internal_r+0x1ae0>
    3e88:	d9402d17 	ldw	r5,180(sp)
    3e8c:	d8c02917 	ldw	r3,164(sp)
    3e90:	002d883a 	mov	r22,zero
    3e94:	28800104 	addi	r2,r5,4
    3e98:	2cc00017 	ldw	r19,0(r5)
    3e9c:	183e4b0e 	bge	r3,zero,37cc <__alt_data_end+0xf80037cc>
    3ea0:	9d86b03a 	or	r3,r19,r22
    3ea4:	d8802d15 	stw	r2,180(sp)
    3ea8:	183e4c1e 	bne	r3,zero,37dc <__alt_data_end+0xf80037dc>
    3eac:	0039883a 	mov	fp,zero
    3eb0:	0005883a 	mov	r2,zero
    3eb4:	003d4006 	br	33b8 <__alt_data_end+0xf80033b8>
    3eb8:	01400074 	movhi	r5,1
    3ebc:	29480184 	addi	r5,r5,8198
    3ec0:	d9402b15 	stw	r5,172(sp)
    3ec4:	d9402b17 	ldw	r5,172(sp)
    3ec8:	1c47883a 	add	r3,r3,r17
    3ecc:	10800044 	addi	r2,r2,1
    3ed0:	41400015 	stw	r5,0(r8)
    3ed4:	44400115 	stw	r17,4(r8)
    3ed8:	d8c02015 	stw	r3,128(sp)
    3edc:	d8801f15 	stw	r2,124(sp)
    3ee0:	010001c4 	movi	r4,7
    3ee4:	20bec816 	blt	r4,r2,3a08 <__alt_data_end+0xf8003a08>
    3ee8:	42000204 	addi	r8,r8,8
    3eec:	003ecd06 	br	3a24 <__alt_data_end+0xf8003a24>
    3ef0:	d9002917 	ldw	r4,164(sp)
    3ef4:	d8002785 	stb	zero,158(sp)
    3ef8:	203d2d16 	blt	r4,zero,33b0 <__alt_data_end+0xf80033b0>
    3efc:	00bfdfc4 	movi	r2,-129
    3f00:	90a4703a 	and	r18,r18,r2
    3f04:	003a9106 	br	294c <__alt_data_end+0xf800294c>
    3f08:	01000074 	movhi	r4,1
    3f0c:	21080184 	addi	r4,r4,8198
    3f10:	d9002b15 	stw	r4,172(sp)
    3f14:	003c0c06 	br	2f48 <__alt_data_end+0xf8002f48>
    3f18:	d9002c17 	ldw	r4,176(sp)
    3f1c:	d9801e04 	addi	r6,sp,120
    3f20:	b80b883a 	mov	r5,r23
    3f24:	000936c0 	call	936c <__sprint_r>
    3f28:	103aab1e 	bne	r2,zero,29d8 <__alt_data_end+0xf80029d8>
    3f2c:	d8c02017 	ldw	r3,128(sp)
    3f30:	da000404 	addi	r8,sp,16
    3f34:	003d4106 	br	343c <__alt_data_end+0xf800343c>
    3f38:	d8801f17 	ldw	r2,124(sp)
    3f3c:	01400074 	movhi	r5,1
    3f40:	01000044 	movi	r4,1
    3f44:	18c00044 	addi	r3,r3,1
    3f48:	10800044 	addi	r2,r2,1
    3f4c:	29480104 	addi	r5,r5,8196
    3f50:	41000115 	stw	r4,4(r8)
    3f54:	41400015 	stw	r5,0(r8)
    3f58:	d8c02015 	stw	r3,128(sp)
    3f5c:	d8801f15 	stw	r2,124(sp)
    3f60:	010001c4 	movi	r4,7
    3f64:	20805c16 	blt	r4,r2,40d8 <___vfprintf_internal_r+0x1b08>
    3f68:	42000204 	addi	r8,r8,8
    3f6c:	8800041e 	bne	r17,zero,3f80 <___vfprintf_internal_r+0x19b0>
    3f70:	d8803317 	ldw	r2,204(sp)
    3f74:	1000021e 	bne	r2,zero,3f80 <___vfprintf_internal_r+0x19b0>
    3f78:	9080004c 	andi	r2,r18,1
    3f7c:	103c0926 	beq	r2,zero,2fa4 <__alt_data_end+0xf8002fa4>
    3f80:	d9003717 	ldw	r4,220(sp)
    3f84:	d8801f17 	ldw	r2,124(sp)
    3f88:	d9403417 	ldw	r5,208(sp)
    3f8c:	20c7883a 	add	r3,r4,r3
    3f90:	10800044 	addi	r2,r2,1
    3f94:	41000115 	stw	r4,4(r8)
    3f98:	41400015 	stw	r5,0(r8)
    3f9c:	d8c02015 	stw	r3,128(sp)
    3fa0:	d8801f15 	stw	r2,124(sp)
    3fa4:	010001c4 	movi	r4,7
    3fa8:	20812116 	blt	r4,r2,4430 <___vfprintf_internal_r+0x1e60>
    3fac:	42000204 	addi	r8,r8,8
    3fb0:	0463c83a 	sub	r17,zero,r17
    3fb4:	0440730e 	bge	zero,r17,4184 <___vfprintf_internal_r+0x1bb4>
    3fb8:	05800404 	movi	r22,16
    3fbc:	b440860e 	bge	r22,r17,41d8 <___vfprintf_internal_r+0x1c08>
    3fc0:	01400074 	movhi	r5,1
    3fc4:	29480184 	addi	r5,r5,8198
    3fc8:	d9402b15 	stw	r5,172(sp)
    3fcc:	070001c4 	movi	fp,7
    3fd0:	dcc02c17 	ldw	r19,176(sp)
    3fd4:	00000306 	br	3fe4 <___vfprintf_internal_r+0x1a14>
    3fd8:	42000204 	addi	r8,r8,8
    3fdc:	8c7ffc04 	addi	r17,r17,-16
    3fe0:	b440800e 	bge	r22,r17,41e4 <___vfprintf_internal_r+0x1c14>
    3fe4:	18c00404 	addi	r3,r3,16
    3fe8:	10800044 	addi	r2,r2,1
    3fec:	45000015 	stw	r20,0(r8)
    3ff0:	45800115 	stw	r22,4(r8)
    3ff4:	d8c02015 	stw	r3,128(sp)
    3ff8:	d8801f15 	stw	r2,124(sp)
    3ffc:	e0bff60e 	bge	fp,r2,3fd8 <__alt_data_end+0xf8003fd8>
    4000:	d9801e04 	addi	r6,sp,120
    4004:	b80b883a 	mov	r5,r23
    4008:	9809883a 	mov	r4,r19
    400c:	000936c0 	call	936c <__sprint_r>
    4010:	103a711e 	bne	r2,zero,29d8 <__alt_data_end+0xf80029d8>
    4014:	d8c02017 	ldw	r3,128(sp)
    4018:	d8801f17 	ldw	r2,124(sp)
    401c:	da000404 	addi	r8,sp,16
    4020:	003fee06 	br	3fdc <__alt_data_end+0xf8003fdc>
    4024:	00bfffc4 	movi	r2,-1
    4028:	003a6f06 	br	29e8 <__alt_data_end+0xf80029e8>
    402c:	008011c4 	movi	r2,71
    4030:	1440b816 	blt	r2,r17,4314 <___vfprintf_internal_r+0x1d44>
    4034:	04000074 	movhi	r16,1
    4038:	8407f304 	addi	r16,r16,8140
    403c:	00c000c4 	movi	r3,3
    4040:	00bfdfc4 	movi	r2,-129
    4044:	d8c02a15 	stw	r3,168(sp)
    4048:	90a4703a 	and	r18,r18,r2
    404c:	df002783 	ldbu	fp,158(sp)
    4050:	d8c02e15 	stw	r3,184(sp)
    4054:	d8002915 	stw	zero,164(sp)
    4058:	d8003215 	stw	zero,200(sp)
    405c:	003b2906 	br	2d04 <__alt_data_end+0xf8002d04>
    4060:	d9002d17 	ldw	r4,180(sp)
    4064:	24c00017 	ldw	r19,0(r4)
    4068:	21000104 	addi	r4,r4,4
    406c:	d9002d15 	stw	r4,180(sp)
    4070:	982dd7fa 	srai	r22,r19,31
    4074:	b005883a 	mov	r2,r22
    4078:	003a9f06 	br	2af8 <__alt_data_end+0xf8002af8>
    407c:	d9402d17 	ldw	r5,180(sp)
    4080:	d8c02f17 	ldw	r3,188(sp)
    4084:	28800017 	ldw	r2,0(r5)
    4088:	29400104 	addi	r5,r5,4
    408c:	d9402d15 	stw	r5,180(sp)
    4090:	10c00015 	stw	r3,0(r2)
    4094:	00398606 	br	26b0 <__alt_data_end+0xf80026b0>
    4098:	d9402d17 	ldw	r5,180(sp)
    409c:	002d883a 	mov	r22,zero
    40a0:	2cc00017 	ldw	r19,0(r5)
    40a4:	29400104 	addi	r5,r5,4
    40a8:	d9402d15 	stw	r5,180(sp)
    40ac:	003c2306 	br	313c <__alt_data_end+0xf800313c>
    40b0:	d8c02d17 	ldw	r3,180(sp)
    40b4:	d9002917 	ldw	r4,164(sp)
    40b8:	002d883a 	mov	r22,zero
    40bc:	18800104 	addi	r2,r3,4
    40c0:	1cc0000b 	ldhu	r19,0(r3)
    40c4:	203dc10e 	bge	r4,zero,37cc <__alt_data_end+0xf80037cc>
    40c8:	003f7506 	br	3ea0 <__alt_data_end+0xf8003ea0>
    40cc:	04000074 	movhi	r16,1
    40d0:	8407f104 	addi	r16,r16,8132
    40d4:	003acc06 	br	2c08 <__alt_data_end+0xf8002c08>
    40d8:	d9002c17 	ldw	r4,176(sp)
    40dc:	d9801e04 	addi	r6,sp,120
    40e0:	b80b883a 	mov	r5,r23
    40e4:	000936c0 	call	936c <__sprint_r>
    40e8:	103a3b1e 	bne	r2,zero,29d8 <__alt_data_end+0xf80029d8>
    40ec:	dc402617 	ldw	r17,152(sp)
    40f0:	d8c02017 	ldw	r3,128(sp)
    40f4:	da000404 	addi	r8,sp,16
    40f8:	003f9c06 	br	3f6c <__alt_data_end+0xf8003f6c>
    40fc:	ac400043 	ldbu	r17,1(r21)
    4100:	94800814 	ori	r18,r18,32
    4104:	ad400044 	addi	r21,r21,1
    4108:	8c403fcc 	andi	r17,r17,255
    410c:	8c40201c 	xori	r17,r17,128
    4110:	8c7fe004 	addi	r17,r17,-128
    4114:	00398f06 	br	2754 <__alt_data_end+0xf8002754>
    4118:	d8c02d15 	stw	r3,180(sp)
    411c:	0039883a 	mov	fp,zero
    4120:	003e3506 	br	39f8 <__alt_data_end+0xf80039f8>
    4124:	d9002c17 	ldw	r4,176(sp)
    4128:	d9801e04 	addi	r6,sp,120
    412c:	b80b883a 	mov	r5,r23
    4130:	000936c0 	call	936c <__sprint_r>
    4134:	103a281e 	bne	r2,zero,29d8 <__alt_data_end+0xf80029d8>
    4138:	d8c02017 	ldw	r3,128(sp)
    413c:	da000404 	addi	r8,sp,16
    4140:	003cd006 	br	3484 <__alt_data_end+0xf8003484>
    4144:	8009883a 	mov	r4,r16
    4148:	da003d15 	stw	r8,244(sp)
    414c:	00025380 	call	2538 <strlen>
    4150:	d8802e15 	stw	r2,184(sp)
    4154:	da003d17 	ldw	r8,244(sp)
    4158:	103c340e 	bge	r2,zero,322c <__alt_data_end+0xf800322c>
    415c:	0005883a 	mov	r2,zero
    4160:	003c3206 	br	322c <__alt_data_end+0xf800322c>
    4164:	d9002c17 	ldw	r4,176(sp)
    4168:	d9801e04 	addi	r6,sp,120
    416c:	b80b883a 	mov	r5,r23
    4170:	000936c0 	call	936c <__sprint_r>
    4174:	103a181e 	bne	r2,zero,29d8 <__alt_data_end+0xf80029d8>
    4178:	d8c02017 	ldw	r3,128(sp)
    417c:	d8801f17 	ldw	r2,124(sp)
    4180:	da000404 	addi	r8,sp,16
    4184:	d9403317 	ldw	r5,204(sp)
    4188:	10800044 	addi	r2,r2,1
    418c:	44000015 	stw	r16,0(r8)
    4190:	28c7883a 	add	r3,r5,r3
    4194:	003b7d06 	br	2f8c <__alt_data_end+0xf8002f8c>
    4198:	01000074 	movhi	r4,1
    419c:	21080584 	addi	r4,r4,8214
    41a0:	d9003515 	stw	r4,212(sp)
    41a4:	003b1406 	br	2df8 <__alt_data_end+0xf8002df8>
    41a8:	013fffc4 	movi	r4,-1
    41ac:	003a3506 	br	2a84 <__alt_data_end+0xf8002a84>
    41b0:	0023883a 	mov	r17,zero
    41b4:	003d9d06 	br	382c <__alt_data_end+0xf800382c>
    41b8:	d9002c17 	ldw	r4,176(sp)
    41bc:	d9801e04 	addi	r6,sp,120
    41c0:	b80b883a 	mov	r5,r23
    41c4:	000936c0 	call	936c <__sprint_r>
    41c8:	103a031e 	bne	r2,zero,29d8 <__alt_data_end+0xf80029d8>
    41cc:	d8c02017 	ldw	r3,128(sp)
    41d0:	da000404 	addi	r8,sp,16
    41d4:	003d9406 	br	3828 <__alt_data_end+0xf8003828>
    41d8:	01000074 	movhi	r4,1
    41dc:	21080184 	addi	r4,r4,8198
    41e0:	d9002b15 	stw	r4,172(sp)
    41e4:	d9002b17 	ldw	r4,172(sp)
    41e8:	1c47883a 	add	r3,r3,r17
    41ec:	10800044 	addi	r2,r2,1
    41f0:	41000015 	stw	r4,0(r8)
    41f4:	44400115 	stw	r17,4(r8)
    41f8:	d8c02015 	stw	r3,128(sp)
    41fc:	d8801f15 	stw	r2,124(sp)
    4200:	010001c4 	movi	r4,7
    4204:	20bfd716 	blt	r4,r2,4164 <__alt_data_end+0xf8004164>
    4208:	42000204 	addi	r8,r8,8
    420c:	003fdd06 	br	4184 <__alt_data_end+0xf8004184>
    4210:	d9002c17 	ldw	r4,176(sp)
    4214:	d9801e04 	addi	r6,sp,120
    4218:	b80b883a 	mov	r5,r23
    421c:	000936c0 	call	936c <__sprint_r>
    4220:	1039ed1e 	bne	r2,zero,29d8 <__alt_data_end+0xf80029d8>
    4224:	d8802617 	ldw	r2,152(sp)
    4228:	d8c02017 	ldw	r3,128(sp)
    422c:	da000404 	addi	r8,sp,16
    4230:	003e1006 	br	3a74 <__alt_data_end+0xf8003a74>
    4234:	00800044 	movi	r2,1
    4238:	10803fcc 	andi	r2,r2,255
    423c:	00c00044 	movi	r3,1
    4240:	10fa3526 	beq	r2,r3,2b18 <__alt_data_end+0xf8002b18>
    4244:	00c00084 	movi	r3,2
    4248:	10fbcb26 	beq	r2,r3,3178 <__alt_data_end+0xf8003178>
    424c:	003a8f06 	br	2c8c <__alt_data_end+0xf8002c8c>
    4250:	01000074 	movhi	r4,1
    4254:	21080584 	addi	r4,r4,8214
    4258:	d9003515 	stw	r4,212(sp)
    425c:	003b7606 	br	3038 <__alt_data_end+0xf8003038>
    4260:	d8802917 	ldw	r2,164(sp)
    4264:	00c00184 	movi	r3,6
    4268:	1880012e 	bgeu	r3,r2,4270 <___vfprintf_internal_r+0x1ca0>
    426c:	1805883a 	mov	r2,r3
    4270:	d8802e15 	stw	r2,184(sp)
    4274:	1000ef16 	blt	r2,zero,4634 <___vfprintf_internal_r+0x2064>
    4278:	04000074 	movhi	r16,1
    427c:	d8802a15 	stw	r2,168(sp)
    4280:	dcc02d15 	stw	r19,180(sp)
    4284:	d8002915 	stw	zero,164(sp)
    4288:	d8003215 	stw	zero,200(sp)
    428c:	8407ff04 	addi	r16,r16,8188
    4290:	0039883a 	mov	fp,zero
    4294:	003aa206 	br	2d20 <__alt_data_end+0xf8002d20>
    4298:	0021883a 	mov	r16,zero
    429c:	003e0706 	br	3abc <__alt_data_end+0xf8003abc>
    42a0:	d9002c17 	ldw	r4,176(sp)
    42a4:	d9801e04 	addi	r6,sp,120
    42a8:	b80b883a 	mov	r5,r23
    42ac:	000936c0 	call	936c <__sprint_r>
    42b0:	1039c91e 	bne	r2,zero,29d8 <__alt_data_end+0xf80029d8>
    42b4:	d8802617 	ldw	r2,152(sp)
    42b8:	d9403317 	ldw	r5,204(sp)
    42bc:	d8c02017 	ldw	r3,128(sp)
    42c0:	da000404 	addi	r8,sp,16
    42c4:	2885c83a 	sub	r2,r5,r2
    42c8:	003dfb06 	br	3ab8 <__alt_data_end+0xf8003ab8>
    42cc:	9080004c 	andi	r2,r18,1
    42d0:	103e8f1e 	bne	r2,zero,3d10 <__alt_data_end+0xf8003d10>
    42d4:	d8802117 	ldw	r2,132(sp)
    42d8:	003e9e06 	br	3d54 <__alt_data_end+0xf8003d54>
    42dc:	1025883a 	mov	r18,r2
    42e0:	0039883a 	mov	fp,zero
    42e4:	00800084 	movi	r2,2
    42e8:	003fd306 	br	4238 <__alt_data_end+0xf8004238>
    42ec:	07000b44 	movi	fp,45
    42f0:	df002785 	stb	fp,158(sp)
    42f4:	003a4006 	br	2bf8 <__alt_data_end+0xf8002bf8>
    42f8:	00c00b44 	movi	r3,45
    42fc:	d8c02785 	stb	r3,158(sp)
    4300:	d8802a15 	stw	r2,168(sp)
    4304:	dc802b17 	ldw	r18,172(sp)
    4308:	d8002915 	stw	zero,164(sp)
    430c:	07000b44 	movi	fp,45
    4310:	003a8006 	br	2d14 <__alt_data_end+0xf8002d14>
    4314:	04000074 	movhi	r16,1
    4318:	8407f404 	addi	r16,r16,8144
    431c:	003f4706 	br	403c <__alt_data_end+0xf800403c>
    4320:	d8c02d17 	ldw	r3,180(sp)
    4324:	d9002f17 	ldw	r4,188(sp)
    4328:	18800017 	ldw	r2,0(r3)
    432c:	18c00104 	addi	r3,r3,4
    4330:	d8c02d15 	stw	r3,180(sp)
    4334:	11000015 	stw	r4,0(r2)
    4338:	0038dd06 	br	26b0 <__alt_data_end+0xf80026b0>
    433c:	dd802617 	ldw	r22,152(sp)
    4340:	00bfff44 	movi	r2,-3
    4344:	b0801c16 	blt	r22,r2,43b8 <___vfprintf_internal_r+0x1de8>
    4348:	d9402917 	ldw	r5,164(sp)
    434c:	2d801a16 	blt	r5,r22,43b8 <___vfprintf_internal_r+0x1de8>
    4350:	dd803215 	stw	r22,200(sp)
    4354:	003e8906 	br	3d7c <__alt_data_end+0xf8003d7c>
    4358:	01000074 	movhi	r4,1
    435c:	21080184 	addi	r4,r4,8198
    4360:	d9002b15 	stw	r4,172(sp)
    4364:	003c9106 	br	35ac <__alt_data_end+0xf80035ac>
    4368:	e005883a 	mov	r2,fp
    436c:	003e7906 	br	3d54 <__alt_data_end+0xf8003d54>
    4370:	d9402917 	ldw	r5,164(sp)
    4374:	df002783 	ldbu	fp,158(sp)
    4378:	dcc02d15 	stw	r19,180(sp)
    437c:	d9402a15 	stw	r5,168(sp)
    4380:	d9402e15 	stw	r5,184(sp)
    4384:	d8002915 	stw	zero,164(sp)
    4388:	d8003215 	stw	zero,200(sp)
    438c:	003a5d06 	br	2d04 <__alt_data_end+0xf8002d04>
    4390:	9080004c 	andi	r2,r18,1
    4394:	0039883a 	mov	fp,zero
    4398:	10000426 	beq	r2,zero,43ac <___vfprintf_internal_r+0x1ddc>
    439c:	00800c04 	movi	r2,48
    43a0:	dc001dc4 	addi	r16,sp,119
    43a4:	d8801dc5 	stb	r2,119(sp)
    43a8:	003b8006 	br	31ac <__alt_data_end+0xf80031ac>
    43ac:	d8002e15 	stw	zero,184(sp)
    43b0:	dc001e04 	addi	r16,sp,120
    43b4:	003a4d06 	br	2cec <__alt_data_end+0xf8002cec>
    43b8:	8c7fff84 	addi	r17,r17,-2
    43bc:	b5bfffc4 	addi	r22,r22,-1
    43c0:	dd802615 	stw	r22,152(sp)
    43c4:	dc4022c5 	stb	r17,139(sp)
    43c8:	b000bf16 	blt	r22,zero,46c8 <___vfprintf_internal_r+0x20f8>
    43cc:	00800ac4 	movi	r2,43
    43d0:	d8802305 	stb	r2,140(sp)
    43d4:	00800244 	movi	r2,9
    43d8:	15807016 	blt	r2,r22,459c <___vfprintf_internal_r+0x1fcc>
    43dc:	00800c04 	movi	r2,48
    43e0:	b5800c04 	addi	r22,r22,48
    43e4:	d8802345 	stb	r2,141(sp)
    43e8:	dd802385 	stb	r22,142(sp)
    43ec:	d88023c4 	addi	r2,sp,143
    43f0:	df0022c4 	addi	fp,sp,139
    43f4:	d8c03317 	ldw	r3,204(sp)
    43f8:	1739c83a 	sub	fp,r2,fp
    43fc:	d9003317 	ldw	r4,204(sp)
    4400:	e0c7883a 	add	r3,fp,r3
    4404:	df003a15 	stw	fp,232(sp)
    4408:	d8c02e15 	stw	r3,184(sp)
    440c:	00800044 	movi	r2,1
    4410:	1100b30e 	bge	r2,r4,46e0 <___vfprintf_internal_r+0x2110>
    4414:	d8c02e17 	ldw	r3,184(sp)
    4418:	18c00044 	addi	r3,r3,1
    441c:	d8c02e15 	stw	r3,184(sp)
    4420:	1805883a 	mov	r2,r3
    4424:	1800ac16 	blt	r3,zero,46d8 <___vfprintf_internal_r+0x2108>
    4428:	d8003215 	stw	zero,200(sp)
    442c:	003e5d06 	br	3da4 <__alt_data_end+0xf8003da4>
    4430:	d9002c17 	ldw	r4,176(sp)
    4434:	d9801e04 	addi	r6,sp,120
    4438:	b80b883a 	mov	r5,r23
    443c:	000936c0 	call	936c <__sprint_r>
    4440:	1039651e 	bne	r2,zero,29d8 <__alt_data_end+0xf80029d8>
    4444:	dc402617 	ldw	r17,152(sp)
    4448:	d8c02017 	ldw	r3,128(sp)
    444c:	d8801f17 	ldw	r2,124(sp)
    4450:	da000404 	addi	r8,sp,16
    4454:	003ed606 	br	3fb0 <__alt_data_end+0xf8003fb0>
    4458:	582b883a 	mov	r21,r11
    445c:	d8002915 	stw	zero,164(sp)
    4460:	0038bd06 	br	2758 <__alt_data_end+0xf8002758>
    4464:	d8802917 	ldw	r2,164(sp)
    4468:	103e071e 	bne	r2,zero,3c88 <__alt_data_end+0xf8003c88>
    446c:	dc002915 	stw	r16,164(sp)
    4470:	003e0506 	br	3c88 <__alt_data_end+0xf8003c88>
    4474:	d9002917 	ldw	r4,164(sp)
    4478:	20c00044 	addi	r3,r4,1
    447c:	003e0f06 	br	3cbc <__alt_data_end+0xf8003cbc>
    4480:	01400184 	movi	r5,6
    4484:	d9402915 	stw	r5,164(sp)
    4488:	003dff06 	br	3c88 <__alt_data_end+0xf8003c88>
    448c:	d8802104 	addi	r2,sp,132
    4490:	d8800315 	stw	r2,12(sp)
    4494:	d8802504 	addi	r2,sp,148
    4498:	d8800215 	stw	r2,8(sp)
    449c:	d8802604 	addi	r2,sp,152
    44a0:	d8800115 	stw	r2,4(sp)
    44a4:	d8802917 	ldw	r2,164(sp)
    44a8:	d9403617 	ldw	r5,216(sp)
    44ac:	d9002c17 	ldw	r4,176(sp)
    44b0:	d8800015 	stw	r2,0(sp)
    44b4:	01c000c4 	movi	r7,3
    44b8:	980d883a 	mov	r6,r19
    44bc:	da003d15 	stw	r8,244(sp)
    44c0:	0004bf40 	call	4bf4 <_dtoa_r>
    44c4:	d8c02917 	ldw	r3,164(sp)
    44c8:	da003d17 	ldw	r8,244(sp)
    44cc:	1021883a 	mov	r16,r2
    44d0:	10f9883a 	add	fp,r2,r3
    44d4:	81000007 	ldb	r4,0(r16)
    44d8:	00800c04 	movi	r2,48
    44dc:	20805e26 	beq	r4,r2,4658 <___vfprintf_internal_r+0x2088>
    44e0:	d8c02617 	ldw	r3,152(sp)
    44e4:	e0f9883a 	add	fp,fp,r3
    44e8:	003e0a06 	br	3d14 <__alt_data_end+0xf8003d14>
    44ec:	00c00b44 	movi	r3,45
    44f0:	24e0003c 	xorhi	r19,r4,32768
    44f4:	d8c02a05 	stb	r3,168(sp)
    44f8:	003de906 	br	3ca0 <__alt_data_end+0xf8003ca0>
    44fc:	d8c03217 	ldw	r3,200(sp)
    4500:	00c07a0e 	bge	zero,r3,46ec <___vfprintf_internal_r+0x211c>
    4504:	00800044 	movi	r2,1
    4508:	d9003317 	ldw	r4,204(sp)
    450c:	1105883a 	add	r2,r2,r4
    4510:	d8802e15 	stw	r2,184(sp)
    4514:	10004e16 	blt	r2,zero,4650 <___vfprintf_internal_r+0x2080>
    4518:	044019c4 	movi	r17,103
    451c:	003e2106 	br	3da4 <__alt_data_end+0xf8003da4>
    4520:	d9002917 	ldw	r4,164(sp)
    4524:	d8802104 	addi	r2,sp,132
    4528:	d8800315 	stw	r2,12(sp)
    452c:	d9000015 	stw	r4,0(sp)
    4530:	d8802504 	addi	r2,sp,148
    4534:	d9403617 	ldw	r5,216(sp)
    4538:	d9002c17 	ldw	r4,176(sp)
    453c:	d8800215 	stw	r2,8(sp)
    4540:	d8802604 	addi	r2,sp,152
    4544:	d8800115 	stw	r2,4(sp)
    4548:	01c000c4 	movi	r7,3
    454c:	980d883a 	mov	r6,r19
    4550:	da003d15 	stw	r8,244(sp)
    4554:	0004bf40 	call	4bf4 <_dtoa_r>
    4558:	d8c02917 	ldw	r3,164(sp)
    455c:	da003d17 	ldw	r8,244(sp)
    4560:	1021883a 	mov	r16,r2
    4564:	00801184 	movi	r2,70
    4568:	80f9883a 	add	fp,r16,r3
    456c:	88bfd926 	beq	r17,r2,44d4 <__alt_data_end+0xf80044d4>
    4570:	003de806 	br	3d14 <__alt_data_end+0xf8003d14>
    4574:	d9002917 	ldw	r4,164(sp)
    4578:	00c04d0e 	bge	zero,r3,46b0 <___vfprintf_internal_r+0x20e0>
    457c:	2000441e 	bne	r4,zero,4690 <___vfprintf_internal_r+0x20c0>
    4580:	9480004c 	andi	r18,r18,1
    4584:	9000421e 	bne	r18,zero,4690 <___vfprintf_internal_r+0x20c0>
    4588:	1805883a 	mov	r2,r3
    458c:	18007016 	blt	r3,zero,4750 <___vfprintf_internal_r+0x2180>
    4590:	d8c03217 	ldw	r3,200(sp)
    4594:	d8c02e15 	stw	r3,184(sp)
    4598:	003e0206 	br	3da4 <__alt_data_end+0xf8003da4>
    459c:	df0022c4 	addi	fp,sp,139
    45a0:	dc002915 	stw	r16,164(sp)
    45a4:	4027883a 	mov	r19,r8
    45a8:	e021883a 	mov	r16,fp
    45ac:	b009883a 	mov	r4,r22
    45b0:	01400284 	movi	r5,10
    45b4:	0001a400 	call	1a40 <__modsi3>
    45b8:	10800c04 	addi	r2,r2,48
    45bc:	843fffc4 	addi	r16,r16,-1
    45c0:	b009883a 	mov	r4,r22
    45c4:	01400284 	movi	r5,10
    45c8:	80800005 	stb	r2,0(r16)
    45cc:	00019bc0 	call	19bc <__divsi3>
    45d0:	102d883a 	mov	r22,r2
    45d4:	00800244 	movi	r2,9
    45d8:	15bff416 	blt	r2,r22,45ac <__alt_data_end+0xf80045ac>
    45dc:	9811883a 	mov	r8,r19
    45e0:	b0800c04 	addi	r2,r22,48
    45e4:	8027883a 	mov	r19,r16
    45e8:	997fffc4 	addi	r5,r19,-1
    45ec:	98bfffc5 	stb	r2,-1(r19)
    45f0:	dc002917 	ldw	r16,164(sp)
    45f4:	2f006a2e 	bgeu	r5,fp,47a0 <___vfprintf_internal_r+0x21d0>
    45f8:	d9c02384 	addi	r7,sp,142
    45fc:	3ccfc83a 	sub	r7,r7,r19
    4600:	d9002344 	addi	r4,sp,141
    4604:	e1cf883a 	add	r7,fp,r7
    4608:	00000106 	br	4610 <___vfprintf_internal_r+0x2040>
    460c:	28800003 	ldbu	r2,0(r5)
    4610:	20800005 	stb	r2,0(r4)
    4614:	21000044 	addi	r4,r4,1
    4618:	29400044 	addi	r5,r5,1
    461c:	393ffb1e 	bne	r7,r4,460c <__alt_data_end+0xf800460c>
    4620:	d8802304 	addi	r2,sp,140
    4624:	14c5c83a 	sub	r2,r2,r19
    4628:	d8c02344 	addi	r3,sp,141
    462c:	1885883a 	add	r2,r3,r2
    4630:	003f7006 	br	43f4 <__alt_data_end+0xf80043f4>
    4634:	0005883a 	mov	r2,zero
    4638:	003f0f06 	br	4278 <__alt_data_end+0xf8004278>
    463c:	d8c03217 	ldw	r3,200(sp)
    4640:	18c00044 	addi	r3,r3,1
    4644:	d8c02e15 	stw	r3,184(sp)
    4648:	1805883a 	mov	r2,r3
    464c:	183fb20e 	bge	r3,zero,4518 <__alt_data_end+0xf8004518>
    4650:	0005883a 	mov	r2,zero
    4654:	003fb006 	br	4518 <__alt_data_end+0xf8004518>
    4658:	d9003617 	ldw	r4,216(sp)
    465c:	000d883a 	mov	r6,zero
    4660:	000f883a 	mov	r7,zero
    4664:	980b883a 	mov	r5,r19
    4668:	d8c03c15 	stw	r3,240(sp)
    466c:	da003d15 	stw	r8,244(sp)
    4670:	000ce300 	call	ce30 <__eqdf2>
    4674:	d8c03c17 	ldw	r3,240(sp)
    4678:	da003d17 	ldw	r8,244(sp)
    467c:	103f9826 	beq	r2,zero,44e0 <__alt_data_end+0xf80044e0>
    4680:	00800044 	movi	r2,1
    4684:	10c7c83a 	sub	r3,r2,r3
    4688:	d8c02615 	stw	r3,152(sp)
    468c:	003f9506 	br	44e4 <__alt_data_end+0xf80044e4>
    4690:	d9002917 	ldw	r4,164(sp)
    4694:	d8c03217 	ldw	r3,200(sp)
    4698:	20800044 	addi	r2,r4,1
    469c:	1885883a 	add	r2,r3,r2
    46a0:	d8802e15 	stw	r2,184(sp)
    46a4:	103dbf0e 	bge	r2,zero,3da4 <__alt_data_end+0xf8003da4>
    46a8:	0005883a 	mov	r2,zero
    46ac:	003dbd06 	br	3da4 <__alt_data_end+0xf8003da4>
    46b0:	2000211e 	bne	r4,zero,4738 <___vfprintf_internal_r+0x2168>
    46b4:	9480004c 	andi	r18,r18,1
    46b8:	90001f1e 	bne	r18,zero,4738 <___vfprintf_internal_r+0x2168>
    46bc:	00800044 	movi	r2,1
    46c0:	d8802e15 	stw	r2,184(sp)
    46c4:	003db706 	br	3da4 <__alt_data_end+0xf8003da4>
    46c8:	00800b44 	movi	r2,45
    46cc:	05adc83a 	sub	r22,zero,r22
    46d0:	d8802305 	stb	r2,140(sp)
    46d4:	003f3f06 	br	43d4 <__alt_data_end+0xf80043d4>
    46d8:	0005883a 	mov	r2,zero
    46dc:	003f5206 	br	4428 <__alt_data_end+0xf8004428>
    46e0:	90a4703a 	and	r18,r18,r2
    46e4:	903f4e26 	beq	r18,zero,4420 <__alt_data_end+0xf8004420>
    46e8:	003f4a06 	br	4414 <__alt_data_end+0xf8004414>
    46ec:	00800084 	movi	r2,2
    46f0:	10c5c83a 	sub	r2,r2,r3
    46f4:	003f8406 	br	4508 <__alt_data_end+0xf8004508>
    46f8:	d8802d17 	ldw	r2,180(sp)
    46fc:	d9002d17 	ldw	r4,180(sp)
    4700:	ac400043 	ldbu	r17,1(r21)
    4704:	10800017 	ldw	r2,0(r2)
    4708:	582b883a 	mov	r21,r11
    470c:	d8802915 	stw	r2,164(sp)
    4710:	20800104 	addi	r2,r4,4
    4714:	d9002917 	ldw	r4,164(sp)
    4718:	d8802d15 	stw	r2,180(sp)
    471c:	203e7a0e 	bge	r4,zero,4108 <__alt_data_end+0xf8004108>
    4720:	8c403fcc 	andi	r17,r17,255
    4724:	00bfffc4 	movi	r2,-1
    4728:	8c40201c 	xori	r17,r17,128
    472c:	d8802915 	stw	r2,164(sp)
    4730:	8c7fe004 	addi	r17,r17,-128
    4734:	00380706 	br	2754 <__alt_data_end+0xf8002754>
    4738:	d8c02917 	ldw	r3,164(sp)
    473c:	18c00084 	addi	r3,r3,2
    4740:	d8c02e15 	stw	r3,184(sp)
    4744:	1805883a 	mov	r2,r3
    4748:	183d960e 	bge	r3,zero,3da4 <__alt_data_end+0xf8003da4>
    474c:	003fd606 	br	46a8 <__alt_data_end+0xf80046a8>
    4750:	0005883a 	mov	r2,zero
    4754:	003f8e06 	br	4590 <__alt_data_end+0xf8004590>
    4758:	9080004c 	andi	r2,r18,1
    475c:	103f811e 	bne	r2,zero,4564 <__alt_data_end+0xf8004564>
    4760:	d8802117 	ldw	r2,132(sp)
    4764:	1405c83a 	sub	r2,r2,r16
    4768:	d8803315 	stw	r2,204(sp)
    476c:	b47ef326 	beq	r22,r17,433c <__alt_data_end+0xf800433c>
    4770:	dd802617 	ldw	r22,152(sp)
    4774:	003f1106 	br	43bc <__alt_data_end+0xf80043bc>
    4778:	d9c02785 	stb	r7,158(sp)
    477c:	00390406 	br	2b90 <__alt_data_end+0xf8002b90>
    4780:	d9c02785 	stb	r7,158(sp)
    4784:	0038d306 	br	2ad4 <__alt_data_end+0xf8002ad4>
    4788:	d9c02785 	stb	r7,158(sp)
    478c:	003a6106 	br	3114 <__alt_data_end+0xf8003114>
    4790:	d9c02785 	stb	r7,158(sp)
    4794:	003af806 	br	3378 <__alt_data_end+0xf8003378>
    4798:	0005883a 	mov	r2,zero
    479c:	003d7e06 	br	3d98 <__alt_data_end+0xf8003d98>
    47a0:	d8802344 	addi	r2,sp,141
    47a4:	003f1306 	br	43f4 <__alt_data_end+0xf80043f4>
    47a8:	d9c02785 	stb	r7,158(sp)
    47ac:	00392306 	br	2c3c <__alt_data_end+0xf8002c3c>
    47b0:	d9c02785 	stb	r7,158(sp)
    47b4:	003aa906 	br	325c <__alt_data_end+0xf800325c>
    47b8:	d9c02785 	stb	r7,158(sp)
    47bc:	003a3d06 	br	30b4 <__alt_data_end+0xf80030b4>
    47c0:	d9c02785 	stb	r7,158(sp)
    47c4:	003aca06 	br	32f0 <__alt_data_end+0xf80032f0>

000047c8 <__vfprintf_internal>:
    47c8:	00800074 	movhi	r2,1
    47cc:	1090b404 	addi	r2,r2,17104
    47d0:	300f883a 	mov	r7,r6
    47d4:	280d883a 	mov	r6,r5
    47d8:	200b883a 	mov	r5,r4
    47dc:	11000017 	ldw	r4,0(r2)
    47e0:	00025d01 	jmpi	25d0 <___vfprintf_internal_r>

000047e4 <__sbprintf>:
    47e4:	2880030b 	ldhu	r2,12(r5)
    47e8:	2ac01917 	ldw	r11,100(r5)
    47ec:	2a80038b 	ldhu	r10,14(r5)
    47f0:	2a400717 	ldw	r9,28(r5)
    47f4:	2a000917 	ldw	r8,36(r5)
    47f8:	defee204 	addi	sp,sp,-1144
    47fc:	00c10004 	movi	r3,1024
    4800:	dc011a15 	stw	r16,1128(sp)
    4804:	10bfff4c 	andi	r2,r2,65533
    4808:	2821883a 	mov	r16,r5
    480c:	d8cb883a 	add	r5,sp,r3
    4810:	dc811c15 	stw	r18,1136(sp)
    4814:	dc411b15 	stw	r17,1132(sp)
    4818:	dfc11d15 	stw	ra,1140(sp)
    481c:	2025883a 	mov	r18,r4
    4820:	d881030d 	sth	r2,1036(sp)
    4824:	dac11915 	stw	r11,1124(sp)
    4828:	da81038d 	sth	r10,1038(sp)
    482c:	da410715 	stw	r9,1052(sp)
    4830:	da010915 	stw	r8,1060(sp)
    4834:	dec10015 	stw	sp,1024(sp)
    4838:	dec10415 	stw	sp,1040(sp)
    483c:	d8c10215 	stw	r3,1032(sp)
    4840:	d8c10515 	stw	r3,1044(sp)
    4844:	d8010615 	stw	zero,1048(sp)
    4848:	00025d00 	call	25d0 <___vfprintf_internal_r>
    484c:	1023883a 	mov	r17,r2
    4850:	10000416 	blt	r2,zero,4864 <__sbprintf+0x80>
    4854:	d9410004 	addi	r5,sp,1024
    4858:	9009883a 	mov	r4,r18
    485c:	00064980 	call	6498 <_fflush_r>
    4860:	10000d1e 	bne	r2,zero,4898 <__sbprintf+0xb4>
    4864:	d881030b 	ldhu	r2,1036(sp)
    4868:	1080100c 	andi	r2,r2,64
    486c:	10000326 	beq	r2,zero,487c <__sbprintf+0x98>
    4870:	8080030b 	ldhu	r2,12(r16)
    4874:	10801014 	ori	r2,r2,64
    4878:	8080030d 	sth	r2,12(r16)
    487c:	8805883a 	mov	r2,r17
    4880:	dfc11d17 	ldw	ra,1140(sp)
    4884:	dc811c17 	ldw	r18,1136(sp)
    4888:	dc411b17 	ldw	r17,1132(sp)
    488c:	dc011a17 	ldw	r16,1128(sp)
    4890:	dec11e04 	addi	sp,sp,1144
    4894:	f800283a 	ret
    4898:	047fffc4 	movi	r17,-1
    489c:	003ff106 	br	4864 <__alt_data_end+0xf8004864>

000048a0 <__swsetup_r>:
    48a0:	00800074 	movhi	r2,1
    48a4:	defffd04 	addi	sp,sp,-12
    48a8:	1090b404 	addi	r2,r2,17104
    48ac:	dc400115 	stw	r17,4(sp)
    48b0:	2023883a 	mov	r17,r4
    48b4:	11000017 	ldw	r4,0(r2)
    48b8:	dc000015 	stw	r16,0(sp)
    48bc:	dfc00215 	stw	ra,8(sp)
    48c0:	2821883a 	mov	r16,r5
    48c4:	20000226 	beq	r4,zero,48d0 <__swsetup_r+0x30>
    48c8:	20800e17 	ldw	r2,56(r4)
    48cc:	10003126 	beq	r2,zero,4994 <__swsetup_r+0xf4>
    48d0:	8080030b 	ldhu	r2,12(r16)
    48d4:	10c0020c 	andi	r3,r2,8
    48d8:	1009883a 	mov	r4,r2
    48dc:	18000f26 	beq	r3,zero,491c <__swsetup_r+0x7c>
    48e0:	80c00417 	ldw	r3,16(r16)
    48e4:	18001526 	beq	r3,zero,493c <__swsetup_r+0x9c>
    48e8:	1100004c 	andi	r4,r2,1
    48ec:	20001c1e 	bne	r4,zero,4960 <__swsetup_r+0xc0>
    48f0:	1080008c 	andi	r2,r2,2
    48f4:	1000291e 	bne	r2,zero,499c <__swsetup_r+0xfc>
    48f8:	80800517 	ldw	r2,20(r16)
    48fc:	80800215 	stw	r2,8(r16)
    4900:	18001c26 	beq	r3,zero,4974 <__swsetup_r+0xd4>
    4904:	0005883a 	mov	r2,zero
    4908:	dfc00217 	ldw	ra,8(sp)
    490c:	dc400117 	ldw	r17,4(sp)
    4910:	dc000017 	ldw	r16,0(sp)
    4914:	dec00304 	addi	sp,sp,12
    4918:	f800283a 	ret
    491c:	2080040c 	andi	r2,r4,16
    4920:	10002e26 	beq	r2,zero,49dc <__swsetup_r+0x13c>
    4924:	2080010c 	andi	r2,r4,4
    4928:	10001e1e 	bne	r2,zero,49a4 <__swsetup_r+0x104>
    492c:	80c00417 	ldw	r3,16(r16)
    4930:	20800214 	ori	r2,r4,8
    4934:	8080030d 	sth	r2,12(r16)
    4938:	183feb1e 	bne	r3,zero,48e8 <__alt_data_end+0xf80048e8>
    493c:	1100a00c 	andi	r4,r2,640
    4940:	01408004 	movi	r5,512
    4944:	217fe826 	beq	r4,r5,48e8 <__alt_data_end+0xf80048e8>
    4948:	800b883a 	mov	r5,r16
    494c:	8809883a 	mov	r4,r17
    4950:	00074180 	call	7418 <__smakebuf_r>
    4954:	8080030b 	ldhu	r2,12(r16)
    4958:	80c00417 	ldw	r3,16(r16)
    495c:	003fe206 	br	48e8 <__alt_data_end+0xf80048e8>
    4960:	80800517 	ldw	r2,20(r16)
    4964:	80000215 	stw	zero,8(r16)
    4968:	0085c83a 	sub	r2,zero,r2
    496c:	80800615 	stw	r2,24(r16)
    4970:	183fe41e 	bne	r3,zero,4904 <__alt_data_end+0xf8004904>
    4974:	80c0030b 	ldhu	r3,12(r16)
    4978:	0005883a 	mov	r2,zero
    497c:	1900200c 	andi	r4,r3,128
    4980:	203fe126 	beq	r4,zero,4908 <__alt_data_end+0xf8004908>
    4984:	18c01014 	ori	r3,r3,64
    4988:	80c0030d 	sth	r3,12(r16)
    498c:	00bfffc4 	movi	r2,-1
    4990:	003fdd06 	br	4908 <__alt_data_end+0xf8004908>
    4994:	00068740 	call	6874 <__sinit>
    4998:	003fcd06 	br	48d0 <__alt_data_end+0xf80048d0>
    499c:	0005883a 	mov	r2,zero
    49a0:	003fd606 	br	48fc <__alt_data_end+0xf80048fc>
    49a4:	81400c17 	ldw	r5,48(r16)
    49a8:	28000626 	beq	r5,zero,49c4 <__swsetup_r+0x124>
    49ac:	80801004 	addi	r2,r16,64
    49b0:	28800326 	beq	r5,r2,49c0 <__swsetup_r+0x120>
    49b4:	8809883a 	mov	r4,r17
    49b8:	00069e80 	call	69e8 <_free_r>
    49bc:	8100030b 	ldhu	r4,12(r16)
    49c0:	80000c15 	stw	zero,48(r16)
    49c4:	80c00417 	ldw	r3,16(r16)
    49c8:	00bff6c4 	movi	r2,-37
    49cc:	1108703a 	and	r4,r2,r4
    49d0:	80000115 	stw	zero,4(r16)
    49d4:	80c00015 	stw	r3,0(r16)
    49d8:	003fd506 	br	4930 <__alt_data_end+0xf8004930>
    49dc:	00800244 	movi	r2,9
    49e0:	88800015 	stw	r2,0(r17)
    49e4:	20801014 	ori	r2,r4,64
    49e8:	8080030d 	sth	r2,12(r16)
    49ec:	00bfffc4 	movi	r2,-1
    49f0:	003fc506 	br	4908 <__alt_data_end+0xf8004908>

000049f4 <quorem>:
    49f4:	defff704 	addi	sp,sp,-36
    49f8:	dc800215 	stw	r18,8(sp)
    49fc:	20800417 	ldw	r2,16(r4)
    4a00:	2c800417 	ldw	r18,16(r5)
    4a04:	dfc00815 	stw	ra,32(sp)
    4a08:	ddc00715 	stw	r23,28(sp)
    4a0c:	dd800615 	stw	r22,24(sp)
    4a10:	dd400515 	stw	r21,20(sp)
    4a14:	dd000415 	stw	r20,16(sp)
    4a18:	dcc00315 	stw	r19,12(sp)
    4a1c:	dc400115 	stw	r17,4(sp)
    4a20:	dc000015 	stw	r16,0(sp)
    4a24:	14807116 	blt	r2,r18,4bec <quorem+0x1f8>
    4a28:	94bfffc4 	addi	r18,r18,-1
    4a2c:	94ad883a 	add	r22,r18,r18
    4a30:	b5ad883a 	add	r22,r22,r22
    4a34:	2c400504 	addi	r17,r5,20
    4a38:	8da9883a 	add	r20,r17,r22
    4a3c:	25400504 	addi	r21,r4,20
    4a40:	282f883a 	mov	r23,r5
    4a44:	adad883a 	add	r22,r21,r22
    4a48:	a1400017 	ldw	r5,0(r20)
    4a4c:	2021883a 	mov	r16,r4
    4a50:	b1000017 	ldw	r4,0(r22)
    4a54:	29400044 	addi	r5,r5,1
    4a58:	0001ab40 	call	1ab4 <__udivsi3>
    4a5c:	1027883a 	mov	r19,r2
    4a60:	10002c26 	beq	r2,zero,4b14 <quorem+0x120>
    4a64:	a813883a 	mov	r9,r21
    4a68:	880b883a 	mov	r5,r17
    4a6c:	0009883a 	mov	r4,zero
    4a70:	000d883a 	mov	r6,zero
    4a74:	2a000017 	ldw	r8,0(r5)
    4a78:	49c00017 	ldw	r7,0(r9)
    4a7c:	29400104 	addi	r5,r5,4
    4a80:	40bfffcc 	andi	r2,r8,65535
    4a84:	14c5383a 	mul	r2,r2,r19
    4a88:	4010d43a 	srli	r8,r8,16
    4a8c:	38ffffcc 	andi	r3,r7,65535
    4a90:	1105883a 	add	r2,r2,r4
    4a94:	1008d43a 	srli	r4,r2,16
    4a98:	44d1383a 	mul	r8,r8,r19
    4a9c:	198d883a 	add	r6,r3,r6
    4aa0:	10ffffcc 	andi	r3,r2,65535
    4aa4:	30c7c83a 	sub	r3,r6,r3
    4aa8:	380ed43a 	srli	r7,r7,16
    4aac:	4105883a 	add	r2,r8,r4
    4ab0:	180dd43a 	srai	r6,r3,16
    4ab4:	113fffcc 	andi	r4,r2,65535
    4ab8:	390fc83a 	sub	r7,r7,r4
    4abc:	398d883a 	add	r6,r7,r6
    4ac0:	300e943a 	slli	r7,r6,16
    4ac4:	18ffffcc 	andi	r3,r3,65535
    4ac8:	1008d43a 	srli	r4,r2,16
    4acc:	38ceb03a 	or	r7,r7,r3
    4ad0:	49c00015 	stw	r7,0(r9)
    4ad4:	300dd43a 	srai	r6,r6,16
    4ad8:	4a400104 	addi	r9,r9,4
    4adc:	a17fe52e 	bgeu	r20,r5,4a74 <__alt_data_end+0xf8004a74>
    4ae0:	b0800017 	ldw	r2,0(r22)
    4ae4:	10000b1e 	bne	r2,zero,4b14 <quorem+0x120>
    4ae8:	b0bfff04 	addi	r2,r22,-4
    4aec:	a880082e 	bgeu	r21,r2,4b10 <quorem+0x11c>
    4af0:	b0ffff17 	ldw	r3,-4(r22)
    4af4:	18000326 	beq	r3,zero,4b04 <quorem+0x110>
    4af8:	00000506 	br	4b10 <quorem+0x11c>
    4afc:	10c00017 	ldw	r3,0(r2)
    4b00:	1800031e 	bne	r3,zero,4b10 <quorem+0x11c>
    4b04:	10bfff04 	addi	r2,r2,-4
    4b08:	94bfffc4 	addi	r18,r18,-1
    4b0c:	a8bffb36 	bltu	r21,r2,4afc <__alt_data_end+0xf8004afc>
    4b10:	84800415 	stw	r18,16(r16)
    4b14:	b80b883a 	mov	r5,r23
    4b18:	8009883a 	mov	r4,r16
    4b1c:	000834c0 	call	834c <__mcmp>
    4b20:	10002616 	blt	r2,zero,4bbc <quorem+0x1c8>
    4b24:	9cc00044 	addi	r19,r19,1
    4b28:	a805883a 	mov	r2,r21
    4b2c:	000b883a 	mov	r5,zero
    4b30:	11000017 	ldw	r4,0(r2)
    4b34:	89800017 	ldw	r6,0(r17)
    4b38:	10800104 	addi	r2,r2,4
    4b3c:	20ffffcc 	andi	r3,r4,65535
    4b40:	194b883a 	add	r5,r3,r5
    4b44:	30ffffcc 	andi	r3,r6,65535
    4b48:	28c7c83a 	sub	r3,r5,r3
    4b4c:	300cd43a 	srli	r6,r6,16
    4b50:	2008d43a 	srli	r4,r4,16
    4b54:	180bd43a 	srai	r5,r3,16
    4b58:	18ffffcc 	andi	r3,r3,65535
    4b5c:	2189c83a 	sub	r4,r4,r6
    4b60:	2149883a 	add	r4,r4,r5
    4b64:	200c943a 	slli	r6,r4,16
    4b68:	8c400104 	addi	r17,r17,4
    4b6c:	200bd43a 	srai	r5,r4,16
    4b70:	30c6b03a 	or	r3,r6,r3
    4b74:	10ffff15 	stw	r3,-4(r2)
    4b78:	a47fed2e 	bgeu	r20,r17,4b30 <__alt_data_end+0xf8004b30>
    4b7c:	9485883a 	add	r2,r18,r18
    4b80:	1085883a 	add	r2,r2,r2
    4b84:	a887883a 	add	r3,r21,r2
    4b88:	18800017 	ldw	r2,0(r3)
    4b8c:	10000b1e 	bne	r2,zero,4bbc <quorem+0x1c8>
    4b90:	18bfff04 	addi	r2,r3,-4
    4b94:	a880082e 	bgeu	r21,r2,4bb8 <quorem+0x1c4>
    4b98:	18ffff17 	ldw	r3,-4(r3)
    4b9c:	18000326 	beq	r3,zero,4bac <quorem+0x1b8>
    4ba0:	00000506 	br	4bb8 <quorem+0x1c4>
    4ba4:	10c00017 	ldw	r3,0(r2)
    4ba8:	1800031e 	bne	r3,zero,4bb8 <quorem+0x1c4>
    4bac:	10bfff04 	addi	r2,r2,-4
    4bb0:	94bfffc4 	addi	r18,r18,-1
    4bb4:	a8bffb36 	bltu	r21,r2,4ba4 <__alt_data_end+0xf8004ba4>
    4bb8:	84800415 	stw	r18,16(r16)
    4bbc:	9805883a 	mov	r2,r19
    4bc0:	dfc00817 	ldw	ra,32(sp)
    4bc4:	ddc00717 	ldw	r23,28(sp)
    4bc8:	dd800617 	ldw	r22,24(sp)
    4bcc:	dd400517 	ldw	r21,20(sp)
    4bd0:	dd000417 	ldw	r20,16(sp)
    4bd4:	dcc00317 	ldw	r19,12(sp)
    4bd8:	dc800217 	ldw	r18,8(sp)
    4bdc:	dc400117 	ldw	r17,4(sp)
    4be0:	dc000017 	ldw	r16,0(sp)
    4be4:	dec00904 	addi	sp,sp,36
    4be8:	f800283a 	ret
    4bec:	0005883a 	mov	r2,zero
    4bf0:	003ff306 	br	4bc0 <__alt_data_end+0xf8004bc0>

00004bf4 <_dtoa_r>:
    4bf4:	20801017 	ldw	r2,64(r4)
    4bf8:	deffde04 	addi	sp,sp,-136
    4bfc:	df002015 	stw	fp,128(sp)
    4c00:	dcc01b15 	stw	r19,108(sp)
    4c04:	dc801a15 	stw	r18,104(sp)
    4c08:	dc401915 	stw	r17,100(sp)
    4c0c:	dc001815 	stw	r16,96(sp)
    4c10:	dfc02115 	stw	ra,132(sp)
    4c14:	ddc01f15 	stw	r23,124(sp)
    4c18:	dd801e15 	stw	r22,120(sp)
    4c1c:	dd401d15 	stw	r21,116(sp)
    4c20:	dd001c15 	stw	r20,112(sp)
    4c24:	d9c00315 	stw	r7,12(sp)
    4c28:	2039883a 	mov	fp,r4
    4c2c:	3023883a 	mov	r17,r6
    4c30:	2825883a 	mov	r18,r5
    4c34:	dc002417 	ldw	r16,144(sp)
    4c38:	3027883a 	mov	r19,r6
    4c3c:	10000826 	beq	r2,zero,4c60 <_dtoa_r+0x6c>
    4c40:	21801117 	ldw	r6,68(r4)
    4c44:	00c00044 	movi	r3,1
    4c48:	100b883a 	mov	r5,r2
    4c4c:	1986983a 	sll	r3,r3,r6
    4c50:	11800115 	stw	r6,4(r2)
    4c54:	10c00215 	stw	r3,8(r2)
    4c58:	0007b2c0 	call	7b2c <_Bfree>
    4c5c:	e0001015 	stw	zero,64(fp)
    4c60:	88002e16 	blt	r17,zero,4d1c <_dtoa_r+0x128>
    4c64:	80000015 	stw	zero,0(r16)
    4c68:	889ffc2c 	andhi	r2,r17,32752
    4c6c:	00dffc34 	movhi	r3,32752
    4c70:	10c01c26 	beq	r2,r3,4ce4 <_dtoa_r+0xf0>
    4c74:	000d883a 	mov	r6,zero
    4c78:	000f883a 	mov	r7,zero
    4c7c:	9009883a 	mov	r4,r18
    4c80:	980b883a 	mov	r5,r19
    4c84:	000ce300 	call	ce30 <__eqdf2>
    4c88:	10002b1e 	bne	r2,zero,4d38 <_dtoa_r+0x144>
    4c8c:	d9c02317 	ldw	r7,140(sp)
    4c90:	00800044 	movi	r2,1
    4c94:	38800015 	stw	r2,0(r7)
    4c98:	d8802517 	ldw	r2,148(sp)
    4c9c:	10019e26 	beq	r2,zero,5318 <_dtoa_r+0x724>
    4ca0:	d8c02517 	ldw	r3,148(sp)
    4ca4:	00800074 	movhi	r2,1
    4ca8:	10880144 	addi	r2,r2,8197
    4cac:	18800015 	stw	r2,0(r3)
    4cb0:	10bfffc4 	addi	r2,r2,-1
    4cb4:	dfc02117 	ldw	ra,132(sp)
    4cb8:	df002017 	ldw	fp,128(sp)
    4cbc:	ddc01f17 	ldw	r23,124(sp)
    4cc0:	dd801e17 	ldw	r22,120(sp)
    4cc4:	dd401d17 	ldw	r21,116(sp)
    4cc8:	dd001c17 	ldw	r20,112(sp)
    4ccc:	dcc01b17 	ldw	r19,108(sp)
    4cd0:	dc801a17 	ldw	r18,104(sp)
    4cd4:	dc401917 	ldw	r17,100(sp)
    4cd8:	dc001817 	ldw	r16,96(sp)
    4cdc:	dec02204 	addi	sp,sp,136
    4ce0:	f800283a 	ret
    4ce4:	d8c02317 	ldw	r3,140(sp)
    4ce8:	0089c3c4 	movi	r2,9999
    4cec:	18800015 	stw	r2,0(r3)
    4cf0:	90017726 	beq	r18,zero,52d0 <_dtoa_r+0x6dc>
    4cf4:	00800074 	movhi	r2,1
    4cf8:	10880d04 	addi	r2,r2,8244
    4cfc:	d9002517 	ldw	r4,148(sp)
    4d00:	203fec26 	beq	r4,zero,4cb4 <__alt_data_end+0xf8004cb4>
    4d04:	10c000c7 	ldb	r3,3(r2)
    4d08:	1801781e 	bne	r3,zero,52ec <_dtoa_r+0x6f8>
    4d0c:	10c000c4 	addi	r3,r2,3
    4d10:	d9802517 	ldw	r6,148(sp)
    4d14:	30c00015 	stw	r3,0(r6)
    4d18:	003fe606 	br	4cb4 <__alt_data_end+0xf8004cb4>
    4d1c:	04e00034 	movhi	r19,32768
    4d20:	9cffffc4 	addi	r19,r19,-1
    4d24:	00800044 	movi	r2,1
    4d28:	8ce6703a 	and	r19,r17,r19
    4d2c:	80800015 	stw	r2,0(r16)
    4d30:	9823883a 	mov	r17,r19
    4d34:	003fcc06 	br	4c68 <__alt_data_end+0xf8004c68>
    4d38:	d8800204 	addi	r2,sp,8
    4d3c:	d8800015 	stw	r2,0(sp)
    4d40:	d9c00104 	addi	r7,sp,4
    4d44:	900b883a 	mov	r5,r18
    4d48:	980d883a 	mov	r6,r19
    4d4c:	e009883a 	mov	r4,fp
    4d50:	8820d53a 	srli	r16,r17,20
    4d54:	00087180 	call	8718 <__d2b>
    4d58:	d8800915 	stw	r2,36(sp)
    4d5c:	8001651e 	bne	r16,zero,52f4 <_dtoa_r+0x700>
    4d60:	dd800217 	ldw	r22,8(sp)
    4d64:	dc000117 	ldw	r16,4(sp)
    4d68:	00800804 	movi	r2,32
    4d6c:	b421883a 	add	r16,r22,r16
    4d70:	80c10c84 	addi	r3,r16,1074
    4d74:	10c2d10e 	bge	r2,r3,58bc <_dtoa_r+0xcc8>
    4d78:	00801004 	movi	r2,64
    4d7c:	81010484 	addi	r4,r16,1042
    4d80:	10c7c83a 	sub	r3,r2,r3
    4d84:	9108d83a 	srl	r4,r18,r4
    4d88:	88e2983a 	sll	r17,r17,r3
    4d8c:	2448b03a 	or	r4,r4,r17
    4d90:	000e1f80 	call	e1f8 <__floatunsidf>
    4d94:	017f8434 	movhi	r5,65040
    4d98:	01800044 	movi	r6,1
    4d9c:	1009883a 	mov	r4,r2
    4da0:	194b883a 	add	r5,r3,r5
    4da4:	843fffc4 	addi	r16,r16,-1
    4da8:	d9801115 	stw	r6,68(sp)
    4dac:	000d883a 	mov	r6,zero
    4db0:	01cffe34 	movhi	r7,16376
    4db4:	000d7a00 	call	d7a0 <__subdf3>
    4db8:	0198dbf4 	movhi	r6,25455
    4dbc:	01cff4f4 	movhi	r7,16339
    4dc0:	3190d844 	addi	r6,r6,17249
    4dc4:	39e1e9c4 	addi	r7,r7,-30809
    4dc8:	1009883a 	mov	r4,r2
    4dcc:	180b883a 	mov	r5,r3
    4dd0:	000d0880 	call	d088 <__muldf3>
    4dd4:	01a2d874 	movhi	r6,35681
    4dd8:	01cff1f4 	movhi	r7,16327
    4ddc:	31b22cc4 	addi	r6,r6,-14157
    4de0:	39e28a04 	addi	r7,r7,-30168
    4de4:	180b883a 	mov	r5,r3
    4de8:	1009883a 	mov	r4,r2
    4dec:	000bc9c0 	call	bc9c <__adddf3>
    4df0:	8009883a 	mov	r4,r16
    4df4:	1029883a 	mov	r20,r2
    4df8:	1823883a 	mov	r17,r3
    4dfc:	000e11c0 	call	e11c <__floatsidf>
    4e00:	019427f4 	movhi	r6,20639
    4e04:	01cff4f4 	movhi	r7,16339
    4e08:	319e7ec4 	addi	r6,r6,31227
    4e0c:	39d104c4 	addi	r7,r7,17427
    4e10:	1009883a 	mov	r4,r2
    4e14:	180b883a 	mov	r5,r3
    4e18:	000d0880 	call	d088 <__muldf3>
    4e1c:	100d883a 	mov	r6,r2
    4e20:	180f883a 	mov	r7,r3
    4e24:	a009883a 	mov	r4,r20
    4e28:	880b883a 	mov	r5,r17
    4e2c:	000bc9c0 	call	bc9c <__adddf3>
    4e30:	1009883a 	mov	r4,r2
    4e34:	180b883a 	mov	r5,r3
    4e38:	1029883a 	mov	r20,r2
    4e3c:	1823883a 	mov	r17,r3
    4e40:	000e09c0 	call	e09c <__fixdfsi>
    4e44:	000d883a 	mov	r6,zero
    4e48:	000f883a 	mov	r7,zero
    4e4c:	a009883a 	mov	r4,r20
    4e50:	880b883a 	mov	r5,r17
    4e54:	d8800515 	stw	r2,20(sp)
    4e58:	000cf940 	call	cf94 <__ledf2>
    4e5c:	10028716 	blt	r2,zero,587c <_dtoa_r+0xc88>
    4e60:	d8c00517 	ldw	r3,20(sp)
    4e64:	00800584 	movi	r2,22
    4e68:	10c27536 	bltu	r2,r3,5840 <_dtoa_r+0xc4c>
    4e6c:	180490fa 	slli	r2,r3,3
    4e70:	00c00074 	movhi	r3,1
    4e74:	18c82904 	addi	r3,r3,8356
    4e78:	1885883a 	add	r2,r3,r2
    4e7c:	11000017 	ldw	r4,0(r2)
    4e80:	11400117 	ldw	r5,4(r2)
    4e84:	900d883a 	mov	r6,r18
    4e88:	980f883a 	mov	r7,r19
    4e8c:	000ceb80 	call	ceb8 <__gedf2>
    4e90:	00828d0e 	bge	zero,r2,58c8 <_dtoa_r+0xcd4>
    4e94:	d9000517 	ldw	r4,20(sp)
    4e98:	d8000e15 	stw	zero,56(sp)
    4e9c:	213fffc4 	addi	r4,r4,-1
    4ea0:	d9000515 	stw	r4,20(sp)
    4ea4:	b42dc83a 	sub	r22,r22,r16
    4ea8:	b5bfffc4 	addi	r22,r22,-1
    4eac:	b0026f16 	blt	r22,zero,586c <_dtoa_r+0xc78>
    4eb0:	d8000815 	stw	zero,32(sp)
    4eb4:	d9c00517 	ldw	r7,20(sp)
    4eb8:	38026416 	blt	r7,zero,584c <_dtoa_r+0xc58>
    4ebc:	b1ed883a 	add	r22,r22,r7
    4ec0:	d9c00d15 	stw	r7,52(sp)
    4ec4:	d8000a15 	stw	zero,40(sp)
    4ec8:	d9800317 	ldw	r6,12(sp)
    4ecc:	00800244 	movi	r2,9
    4ed0:	11811436 	bltu	r2,r6,5324 <_dtoa_r+0x730>
    4ed4:	00800144 	movi	r2,5
    4ed8:	1184e10e 	bge	r2,r6,6260 <_dtoa_r+0x166c>
    4edc:	31bfff04 	addi	r6,r6,-4
    4ee0:	d9800315 	stw	r6,12(sp)
    4ee4:	0023883a 	mov	r17,zero
    4ee8:	d9800317 	ldw	r6,12(sp)
    4eec:	008000c4 	movi	r2,3
    4ef0:	30836726 	beq	r6,r2,5c90 <_dtoa_r+0x109c>
    4ef4:	1183410e 	bge	r2,r6,5bfc <_dtoa_r+0x1008>
    4ef8:	d9c00317 	ldw	r7,12(sp)
    4efc:	00800104 	movi	r2,4
    4f00:	38827c26 	beq	r7,r2,58f4 <_dtoa_r+0xd00>
    4f04:	00800144 	movi	r2,5
    4f08:	3884c41e 	bne	r7,r2,621c <_dtoa_r+0x1628>
    4f0c:	00800044 	movi	r2,1
    4f10:	d8800b15 	stw	r2,44(sp)
    4f14:	d8c00517 	ldw	r3,20(sp)
    4f18:	d9002217 	ldw	r4,136(sp)
    4f1c:	1907883a 	add	r3,r3,r4
    4f20:	19800044 	addi	r6,r3,1
    4f24:	d8c00c15 	stw	r3,48(sp)
    4f28:	d9800615 	stw	r6,24(sp)
    4f2c:	0183a40e 	bge	zero,r6,5dc0 <_dtoa_r+0x11cc>
    4f30:	d9800617 	ldw	r6,24(sp)
    4f34:	3021883a 	mov	r16,r6
    4f38:	e0001115 	stw	zero,68(fp)
    4f3c:	008005c4 	movi	r2,23
    4f40:	1184c92e 	bgeu	r2,r6,6268 <_dtoa_r+0x1674>
    4f44:	00c00044 	movi	r3,1
    4f48:	00800104 	movi	r2,4
    4f4c:	1085883a 	add	r2,r2,r2
    4f50:	11000504 	addi	r4,r2,20
    4f54:	180b883a 	mov	r5,r3
    4f58:	18c00044 	addi	r3,r3,1
    4f5c:	313ffb2e 	bgeu	r6,r4,4f4c <__alt_data_end+0xf8004f4c>
    4f60:	e1401115 	stw	r5,68(fp)
    4f64:	e009883a 	mov	r4,fp
    4f68:	0007a840 	call	7a84 <_Balloc>
    4f6c:	d8800715 	stw	r2,28(sp)
    4f70:	e0801015 	stw	r2,64(fp)
    4f74:	00800384 	movi	r2,14
    4f78:	1400f736 	bltu	r2,r16,5358 <_dtoa_r+0x764>
    4f7c:	8800f626 	beq	r17,zero,5358 <_dtoa_r+0x764>
    4f80:	d9c00517 	ldw	r7,20(sp)
    4f84:	01c39a0e 	bge	zero,r7,5df0 <_dtoa_r+0x11fc>
    4f88:	388003cc 	andi	r2,r7,15
    4f8c:	100490fa 	slli	r2,r2,3
    4f90:	382bd13a 	srai	r21,r7,4
    4f94:	00c00074 	movhi	r3,1
    4f98:	18c82904 	addi	r3,r3,8356
    4f9c:	1885883a 	add	r2,r3,r2
    4fa0:	a8c0040c 	andi	r3,r21,16
    4fa4:	12400017 	ldw	r9,0(r2)
    4fa8:	12000117 	ldw	r8,4(r2)
    4fac:	18037926 	beq	r3,zero,5d94 <_dtoa_r+0x11a0>
    4fb0:	00800074 	movhi	r2,1
    4fb4:	10881f04 	addi	r2,r2,8316
    4fb8:	11800817 	ldw	r6,32(r2)
    4fbc:	11c00917 	ldw	r7,36(r2)
    4fc0:	9009883a 	mov	r4,r18
    4fc4:	980b883a 	mov	r5,r19
    4fc8:	da001715 	stw	r8,92(sp)
    4fcc:	da401615 	stw	r9,88(sp)
    4fd0:	000c5480 	call	c548 <__divdf3>
    4fd4:	da001717 	ldw	r8,92(sp)
    4fd8:	da401617 	ldw	r9,88(sp)
    4fdc:	ad4003cc 	andi	r21,r21,15
    4fe0:	040000c4 	movi	r16,3
    4fe4:	1023883a 	mov	r17,r2
    4fe8:	1829883a 	mov	r20,r3
    4fec:	a8001126 	beq	r21,zero,5034 <_dtoa_r+0x440>
    4ff0:	05c00074 	movhi	r23,1
    4ff4:	bdc81f04 	addi	r23,r23,8316
    4ff8:	4805883a 	mov	r2,r9
    4ffc:	4007883a 	mov	r3,r8
    5000:	a980004c 	andi	r6,r21,1
    5004:	1009883a 	mov	r4,r2
    5008:	a82bd07a 	srai	r21,r21,1
    500c:	180b883a 	mov	r5,r3
    5010:	30000426 	beq	r6,zero,5024 <_dtoa_r+0x430>
    5014:	b9800017 	ldw	r6,0(r23)
    5018:	b9c00117 	ldw	r7,4(r23)
    501c:	84000044 	addi	r16,r16,1
    5020:	000d0880 	call	d088 <__muldf3>
    5024:	bdc00204 	addi	r23,r23,8
    5028:	a83ff51e 	bne	r21,zero,5000 <__alt_data_end+0xf8005000>
    502c:	1013883a 	mov	r9,r2
    5030:	1811883a 	mov	r8,r3
    5034:	480d883a 	mov	r6,r9
    5038:	400f883a 	mov	r7,r8
    503c:	8809883a 	mov	r4,r17
    5040:	a00b883a 	mov	r5,r20
    5044:	000c5480 	call	c548 <__divdf3>
    5048:	d8800f15 	stw	r2,60(sp)
    504c:	d8c01015 	stw	r3,64(sp)
    5050:	d8c00e17 	ldw	r3,56(sp)
    5054:	18000626 	beq	r3,zero,5070 <_dtoa_r+0x47c>
    5058:	d9000f17 	ldw	r4,60(sp)
    505c:	d9401017 	ldw	r5,64(sp)
    5060:	000d883a 	mov	r6,zero
    5064:	01cffc34 	movhi	r7,16368
    5068:	000cf940 	call	cf94 <__ledf2>
    506c:	10040b16 	blt	r2,zero,609c <_dtoa_r+0x14a8>
    5070:	8009883a 	mov	r4,r16
    5074:	000e11c0 	call	e11c <__floatsidf>
    5078:	d9800f17 	ldw	r6,60(sp)
    507c:	d9c01017 	ldw	r7,64(sp)
    5080:	1009883a 	mov	r4,r2
    5084:	180b883a 	mov	r5,r3
    5088:	000d0880 	call	d088 <__muldf3>
    508c:	000d883a 	mov	r6,zero
    5090:	01d00734 	movhi	r7,16412
    5094:	1009883a 	mov	r4,r2
    5098:	180b883a 	mov	r5,r3
    509c:	000bc9c0 	call	bc9c <__adddf3>
    50a0:	1021883a 	mov	r16,r2
    50a4:	d8800617 	ldw	r2,24(sp)
    50a8:	047f3034 	movhi	r17,64704
    50ac:	1c63883a 	add	r17,r3,r17
    50b0:	10031826 	beq	r2,zero,5d14 <_dtoa_r+0x1120>
    50b4:	d8c00517 	ldw	r3,20(sp)
    50b8:	db000617 	ldw	r12,24(sp)
    50bc:	d8c01315 	stw	r3,76(sp)
    50c0:	d9000b17 	ldw	r4,44(sp)
    50c4:	20038f26 	beq	r4,zero,5f04 <_dtoa_r+0x1310>
    50c8:	60bfffc4 	addi	r2,r12,-1
    50cc:	100490fa 	slli	r2,r2,3
    50d0:	00c00074 	movhi	r3,1
    50d4:	18c82904 	addi	r3,r3,8356
    50d8:	1885883a 	add	r2,r3,r2
    50dc:	11800017 	ldw	r6,0(r2)
    50e0:	11c00117 	ldw	r7,4(r2)
    50e4:	d8800717 	ldw	r2,28(sp)
    50e8:	0009883a 	mov	r4,zero
    50ec:	014ff834 	movhi	r5,16352
    50f0:	db001615 	stw	r12,88(sp)
    50f4:	15c00044 	addi	r23,r2,1
    50f8:	000c5480 	call	c548 <__divdf3>
    50fc:	800d883a 	mov	r6,r16
    5100:	880f883a 	mov	r7,r17
    5104:	1009883a 	mov	r4,r2
    5108:	180b883a 	mov	r5,r3
    510c:	000d7a00 	call	d7a0 <__subdf3>
    5110:	d9401017 	ldw	r5,64(sp)
    5114:	d9000f17 	ldw	r4,60(sp)
    5118:	102b883a 	mov	r21,r2
    511c:	d8c01215 	stw	r3,72(sp)
    5120:	000e09c0 	call	e09c <__fixdfsi>
    5124:	1009883a 	mov	r4,r2
    5128:	1029883a 	mov	r20,r2
    512c:	000e11c0 	call	e11c <__floatsidf>
    5130:	d9000f17 	ldw	r4,60(sp)
    5134:	d9401017 	ldw	r5,64(sp)
    5138:	100d883a 	mov	r6,r2
    513c:	180f883a 	mov	r7,r3
    5140:	000d7a00 	call	d7a0 <__subdf3>
    5144:	1823883a 	mov	r17,r3
    5148:	d8c00717 	ldw	r3,28(sp)
    514c:	d9401217 	ldw	r5,72(sp)
    5150:	a2000c04 	addi	r8,r20,48
    5154:	1021883a 	mov	r16,r2
    5158:	1a000005 	stb	r8,0(r3)
    515c:	800d883a 	mov	r6,r16
    5160:	880f883a 	mov	r7,r17
    5164:	a809883a 	mov	r4,r21
    5168:	4029883a 	mov	r20,r8
    516c:	000ceb80 	call	ceb8 <__gedf2>
    5170:	00841d16 	blt	zero,r2,61e8 <_dtoa_r+0x15f4>
    5174:	800d883a 	mov	r6,r16
    5178:	880f883a 	mov	r7,r17
    517c:	0009883a 	mov	r4,zero
    5180:	014ffc34 	movhi	r5,16368
    5184:	000d7a00 	call	d7a0 <__subdf3>
    5188:	d9401217 	ldw	r5,72(sp)
    518c:	100d883a 	mov	r6,r2
    5190:	180f883a 	mov	r7,r3
    5194:	a809883a 	mov	r4,r21
    5198:	000ceb80 	call	ceb8 <__gedf2>
    519c:	db001617 	ldw	r12,88(sp)
    51a0:	00840e16 	blt	zero,r2,61dc <_dtoa_r+0x15e8>
    51a4:	00800044 	movi	r2,1
    51a8:	13006b0e 	bge	r2,r12,5358 <_dtoa_r+0x764>
    51ac:	d9000717 	ldw	r4,28(sp)
    51b0:	dd800f15 	stw	r22,60(sp)
    51b4:	dcc01015 	stw	r19,64(sp)
    51b8:	2319883a 	add	r12,r4,r12
    51bc:	dcc01217 	ldw	r19,72(sp)
    51c0:	602d883a 	mov	r22,r12
    51c4:	dc801215 	stw	r18,72(sp)
    51c8:	b825883a 	mov	r18,r23
    51cc:	00000906 	br	51f4 <_dtoa_r+0x600>
    51d0:	000d7a00 	call	d7a0 <__subdf3>
    51d4:	a80d883a 	mov	r6,r21
    51d8:	980f883a 	mov	r7,r19
    51dc:	1009883a 	mov	r4,r2
    51e0:	180b883a 	mov	r5,r3
    51e4:	000cf940 	call	cf94 <__ledf2>
    51e8:	1003e816 	blt	r2,zero,618c <_dtoa_r+0x1598>
    51ec:	b825883a 	mov	r18,r23
    51f0:	bd83e926 	beq	r23,r22,6198 <_dtoa_r+0x15a4>
    51f4:	a809883a 	mov	r4,r21
    51f8:	980b883a 	mov	r5,r19
    51fc:	000d883a 	mov	r6,zero
    5200:	01d00934 	movhi	r7,16420
    5204:	000d0880 	call	d088 <__muldf3>
    5208:	000d883a 	mov	r6,zero
    520c:	01d00934 	movhi	r7,16420
    5210:	8009883a 	mov	r4,r16
    5214:	880b883a 	mov	r5,r17
    5218:	102b883a 	mov	r21,r2
    521c:	1827883a 	mov	r19,r3
    5220:	000d0880 	call	d088 <__muldf3>
    5224:	180b883a 	mov	r5,r3
    5228:	1009883a 	mov	r4,r2
    522c:	1821883a 	mov	r16,r3
    5230:	1023883a 	mov	r17,r2
    5234:	000e09c0 	call	e09c <__fixdfsi>
    5238:	1009883a 	mov	r4,r2
    523c:	1029883a 	mov	r20,r2
    5240:	000e11c0 	call	e11c <__floatsidf>
    5244:	8809883a 	mov	r4,r17
    5248:	800b883a 	mov	r5,r16
    524c:	100d883a 	mov	r6,r2
    5250:	180f883a 	mov	r7,r3
    5254:	000d7a00 	call	d7a0 <__subdf3>
    5258:	a5000c04 	addi	r20,r20,48
    525c:	a80d883a 	mov	r6,r21
    5260:	980f883a 	mov	r7,r19
    5264:	1009883a 	mov	r4,r2
    5268:	180b883a 	mov	r5,r3
    526c:	95000005 	stb	r20,0(r18)
    5270:	1021883a 	mov	r16,r2
    5274:	1823883a 	mov	r17,r3
    5278:	000cf940 	call	cf94 <__ledf2>
    527c:	bdc00044 	addi	r23,r23,1
    5280:	800d883a 	mov	r6,r16
    5284:	880f883a 	mov	r7,r17
    5288:	0009883a 	mov	r4,zero
    528c:	014ffc34 	movhi	r5,16368
    5290:	103fcf0e 	bge	r2,zero,51d0 <__alt_data_end+0xf80051d0>
    5294:	d8c01317 	ldw	r3,76(sp)
    5298:	d8c00515 	stw	r3,20(sp)
    529c:	d9400917 	ldw	r5,36(sp)
    52a0:	e009883a 	mov	r4,fp
    52a4:	0007b2c0 	call	7b2c <_Bfree>
    52a8:	d9000517 	ldw	r4,20(sp)
    52ac:	d9802317 	ldw	r6,140(sp)
    52b0:	d9c02517 	ldw	r7,148(sp)
    52b4:	b8000005 	stb	zero,0(r23)
    52b8:	20800044 	addi	r2,r4,1
    52bc:	30800015 	stw	r2,0(r6)
    52c0:	3802aa26 	beq	r7,zero,5d6c <_dtoa_r+0x1178>
    52c4:	3dc00015 	stw	r23,0(r7)
    52c8:	d8800717 	ldw	r2,28(sp)
    52cc:	003e7906 	br	4cb4 <__alt_data_end+0xf8004cb4>
    52d0:	00800434 	movhi	r2,16
    52d4:	10bfffc4 	addi	r2,r2,-1
    52d8:	88a2703a 	and	r17,r17,r2
    52dc:	883e851e 	bne	r17,zero,4cf4 <__alt_data_end+0xf8004cf4>
    52e0:	00800074 	movhi	r2,1
    52e4:	10880a04 	addi	r2,r2,8232
    52e8:	003e8406 	br	4cfc <__alt_data_end+0xf8004cfc>
    52ec:	10c00204 	addi	r3,r2,8
    52f0:	003e8706 	br	4d10 <__alt_data_end+0xf8004d10>
    52f4:	01400434 	movhi	r5,16
    52f8:	297fffc4 	addi	r5,r5,-1
    52fc:	994a703a 	and	r5,r19,r5
    5300:	9009883a 	mov	r4,r18
    5304:	843f0044 	addi	r16,r16,-1023
    5308:	294ffc34 	orhi	r5,r5,16368
    530c:	dd800217 	ldw	r22,8(sp)
    5310:	d8001115 	stw	zero,68(sp)
    5314:	003ea506 	br	4dac <__alt_data_end+0xf8004dac>
    5318:	00800074 	movhi	r2,1
    531c:	10880104 	addi	r2,r2,8196
    5320:	003e6406 	br	4cb4 <__alt_data_end+0xf8004cb4>
    5324:	e0001115 	stw	zero,68(fp)
    5328:	000b883a 	mov	r5,zero
    532c:	e009883a 	mov	r4,fp
    5330:	0007a840 	call	7a84 <_Balloc>
    5334:	01bfffc4 	movi	r6,-1
    5338:	01c00044 	movi	r7,1
    533c:	d8800715 	stw	r2,28(sp)
    5340:	d9800c15 	stw	r6,48(sp)
    5344:	e0801015 	stw	r2,64(fp)
    5348:	d8000315 	stw	zero,12(sp)
    534c:	d9c00b15 	stw	r7,44(sp)
    5350:	d9800615 	stw	r6,24(sp)
    5354:	d8002215 	stw	zero,136(sp)
    5358:	d8800117 	ldw	r2,4(sp)
    535c:	10008916 	blt	r2,zero,5584 <_dtoa_r+0x990>
    5360:	d9000517 	ldw	r4,20(sp)
    5364:	00c00384 	movi	r3,14
    5368:	19008616 	blt	r3,r4,5584 <_dtoa_r+0x990>
    536c:	200490fa 	slli	r2,r4,3
    5370:	00c00074 	movhi	r3,1
    5374:	d9802217 	ldw	r6,136(sp)
    5378:	18c82904 	addi	r3,r3,8356
    537c:	1885883a 	add	r2,r3,r2
    5380:	14000017 	ldw	r16,0(r2)
    5384:	14400117 	ldw	r17,4(r2)
    5388:	30016316 	blt	r6,zero,5918 <_dtoa_r+0xd24>
    538c:	800d883a 	mov	r6,r16
    5390:	880f883a 	mov	r7,r17
    5394:	9009883a 	mov	r4,r18
    5398:	980b883a 	mov	r5,r19
    539c:	000c5480 	call	c548 <__divdf3>
    53a0:	180b883a 	mov	r5,r3
    53a4:	1009883a 	mov	r4,r2
    53a8:	000e09c0 	call	e09c <__fixdfsi>
    53ac:	1009883a 	mov	r4,r2
    53b0:	102b883a 	mov	r21,r2
    53b4:	000e11c0 	call	e11c <__floatsidf>
    53b8:	800d883a 	mov	r6,r16
    53bc:	880f883a 	mov	r7,r17
    53c0:	1009883a 	mov	r4,r2
    53c4:	180b883a 	mov	r5,r3
    53c8:	000d0880 	call	d088 <__muldf3>
    53cc:	100d883a 	mov	r6,r2
    53d0:	180f883a 	mov	r7,r3
    53d4:	9009883a 	mov	r4,r18
    53d8:	980b883a 	mov	r5,r19
    53dc:	000d7a00 	call	d7a0 <__subdf3>
    53e0:	d9c00717 	ldw	r7,28(sp)
    53e4:	1009883a 	mov	r4,r2
    53e8:	a8800c04 	addi	r2,r21,48
    53ec:	38800005 	stb	r2,0(r7)
    53f0:	3dc00044 	addi	r23,r7,1
    53f4:	d9c00617 	ldw	r7,24(sp)
    53f8:	01800044 	movi	r6,1
    53fc:	180b883a 	mov	r5,r3
    5400:	2005883a 	mov	r2,r4
    5404:	39803826 	beq	r7,r6,54e8 <_dtoa_r+0x8f4>
    5408:	000d883a 	mov	r6,zero
    540c:	01d00934 	movhi	r7,16420
    5410:	000d0880 	call	d088 <__muldf3>
    5414:	000d883a 	mov	r6,zero
    5418:	000f883a 	mov	r7,zero
    541c:	1009883a 	mov	r4,r2
    5420:	180b883a 	mov	r5,r3
    5424:	1025883a 	mov	r18,r2
    5428:	1827883a 	mov	r19,r3
    542c:	000ce300 	call	ce30 <__eqdf2>
    5430:	103f9a26 	beq	r2,zero,529c <__alt_data_end+0xf800529c>
    5434:	d9c00617 	ldw	r7,24(sp)
    5438:	d8c00717 	ldw	r3,28(sp)
    543c:	b829883a 	mov	r20,r23
    5440:	38bfffc4 	addi	r2,r7,-1
    5444:	18ad883a 	add	r22,r3,r2
    5448:	00000a06 	br	5474 <_dtoa_r+0x880>
    544c:	000d0880 	call	d088 <__muldf3>
    5450:	000d883a 	mov	r6,zero
    5454:	000f883a 	mov	r7,zero
    5458:	1009883a 	mov	r4,r2
    545c:	180b883a 	mov	r5,r3
    5460:	1025883a 	mov	r18,r2
    5464:	1827883a 	mov	r19,r3
    5468:	b829883a 	mov	r20,r23
    546c:	000ce300 	call	ce30 <__eqdf2>
    5470:	103f8a26 	beq	r2,zero,529c <__alt_data_end+0xf800529c>
    5474:	800d883a 	mov	r6,r16
    5478:	880f883a 	mov	r7,r17
    547c:	9009883a 	mov	r4,r18
    5480:	980b883a 	mov	r5,r19
    5484:	000c5480 	call	c548 <__divdf3>
    5488:	180b883a 	mov	r5,r3
    548c:	1009883a 	mov	r4,r2
    5490:	000e09c0 	call	e09c <__fixdfsi>
    5494:	1009883a 	mov	r4,r2
    5498:	102b883a 	mov	r21,r2
    549c:	000e11c0 	call	e11c <__floatsidf>
    54a0:	800d883a 	mov	r6,r16
    54a4:	880f883a 	mov	r7,r17
    54a8:	1009883a 	mov	r4,r2
    54ac:	180b883a 	mov	r5,r3
    54b0:	000d0880 	call	d088 <__muldf3>
    54b4:	100d883a 	mov	r6,r2
    54b8:	180f883a 	mov	r7,r3
    54bc:	9009883a 	mov	r4,r18
    54c0:	980b883a 	mov	r5,r19
    54c4:	000d7a00 	call	d7a0 <__subdf3>
    54c8:	aa000c04 	addi	r8,r21,48
    54cc:	a2000005 	stb	r8,0(r20)
    54d0:	000d883a 	mov	r6,zero
    54d4:	01d00934 	movhi	r7,16420
    54d8:	1009883a 	mov	r4,r2
    54dc:	180b883a 	mov	r5,r3
    54e0:	a5c00044 	addi	r23,r20,1
    54e4:	b53fd91e 	bne	r22,r20,544c <__alt_data_end+0xf800544c>
    54e8:	100d883a 	mov	r6,r2
    54ec:	180f883a 	mov	r7,r3
    54f0:	1009883a 	mov	r4,r2
    54f4:	180b883a 	mov	r5,r3
    54f8:	000bc9c0 	call	bc9c <__adddf3>
    54fc:	100d883a 	mov	r6,r2
    5500:	180f883a 	mov	r7,r3
    5504:	8009883a 	mov	r4,r16
    5508:	880b883a 	mov	r5,r17
    550c:	1027883a 	mov	r19,r2
    5510:	1825883a 	mov	r18,r3
    5514:	000cf940 	call	cf94 <__ledf2>
    5518:	10000816 	blt	r2,zero,553c <_dtoa_r+0x948>
    551c:	980d883a 	mov	r6,r19
    5520:	900f883a 	mov	r7,r18
    5524:	8009883a 	mov	r4,r16
    5528:	880b883a 	mov	r5,r17
    552c:	000ce300 	call	ce30 <__eqdf2>
    5530:	103f5a1e 	bne	r2,zero,529c <__alt_data_end+0xf800529c>
    5534:	ad40004c 	andi	r21,r21,1
    5538:	a83f5826 	beq	r21,zero,529c <__alt_data_end+0xf800529c>
    553c:	bd3fffc3 	ldbu	r20,-1(r23)
    5540:	b8bfffc4 	addi	r2,r23,-1
    5544:	1007883a 	mov	r3,r2
    5548:	01400e44 	movi	r5,57
    554c:	d9800717 	ldw	r6,28(sp)
    5550:	00000506 	br	5568 <_dtoa_r+0x974>
    5554:	18ffffc4 	addi	r3,r3,-1
    5558:	11824726 	beq	r2,r6,5e78 <_dtoa_r+0x1284>
    555c:	1d000003 	ldbu	r20,0(r3)
    5560:	102f883a 	mov	r23,r2
    5564:	10bfffc4 	addi	r2,r2,-1
    5568:	a1003fcc 	andi	r4,r20,255
    556c:	2100201c 	xori	r4,r4,128
    5570:	213fe004 	addi	r4,r4,-128
    5574:	217ff726 	beq	r4,r5,5554 <__alt_data_end+0xf8005554>
    5578:	a2000044 	addi	r8,r20,1
    557c:	12000005 	stb	r8,0(r2)
    5580:	003f4606 	br	529c <__alt_data_end+0xf800529c>
    5584:	d9000b17 	ldw	r4,44(sp)
    5588:	2000c826 	beq	r4,zero,58ac <_dtoa_r+0xcb8>
    558c:	d9800317 	ldw	r6,12(sp)
    5590:	00c00044 	movi	r3,1
    5594:	1980f90e 	bge	r3,r6,597c <_dtoa_r+0xd88>
    5598:	d8800617 	ldw	r2,24(sp)
    559c:	d8c00a17 	ldw	r3,40(sp)
    55a0:	157fffc4 	addi	r21,r2,-1
    55a4:	1d41f316 	blt	r3,r21,5d74 <_dtoa_r+0x1180>
    55a8:	1d6bc83a 	sub	r21,r3,r21
    55ac:	d9c00617 	ldw	r7,24(sp)
    55b0:	3802aa16 	blt	r7,zero,605c <_dtoa_r+0x1468>
    55b4:	dd000817 	ldw	r20,32(sp)
    55b8:	d8800617 	ldw	r2,24(sp)
    55bc:	d8c00817 	ldw	r3,32(sp)
    55c0:	01400044 	movi	r5,1
    55c4:	e009883a 	mov	r4,fp
    55c8:	1887883a 	add	r3,r3,r2
    55cc:	d8c00815 	stw	r3,32(sp)
    55d0:	b0ad883a 	add	r22,r22,r2
    55d4:	0007e900 	call	7e90 <__i2b>
    55d8:	1023883a 	mov	r17,r2
    55dc:	a0000826 	beq	r20,zero,5600 <_dtoa_r+0xa0c>
    55e0:	0580070e 	bge	zero,r22,5600 <_dtoa_r+0xa0c>
    55e4:	a005883a 	mov	r2,r20
    55e8:	b500b916 	blt	r22,r20,58d0 <_dtoa_r+0xcdc>
    55ec:	d9000817 	ldw	r4,32(sp)
    55f0:	a0a9c83a 	sub	r20,r20,r2
    55f4:	b0adc83a 	sub	r22,r22,r2
    55f8:	2089c83a 	sub	r4,r4,r2
    55fc:	d9000815 	stw	r4,32(sp)
    5600:	d9800a17 	ldw	r6,40(sp)
    5604:	0181810e 	bge	zero,r6,5c0c <_dtoa_r+0x1018>
    5608:	d9c00b17 	ldw	r7,44(sp)
    560c:	3800b326 	beq	r7,zero,58dc <_dtoa_r+0xce8>
    5610:	a800b226 	beq	r21,zero,58dc <_dtoa_r+0xce8>
    5614:	880b883a 	mov	r5,r17
    5618:	a80d883a 	mov	r6,r21
    561c:	e009883a 	mov	r4,fp
    5620:	00080c40 	call	80c4 <__pow5mult>
    5624:	d9800917 	ldw	r6,36(sp)
    5628:	100b883a 	mov	r5,r2
    562c:	e009883a 	mov	r4,fp
    5630:	1023883a 	mov	r17,r2
    5634:	0007ecc0 	call	7ecc <__multiply>
    5638:	1021883a 	mov	r16,r2
    563c:	d8800a17 	ldw	r2,40(sp)
    5640:	d9400917 	ldw	r5,36(sp)
    5644:	e009883a 	mov	r4,fp
    5648:	1545c83a 	sub	r2,r2,r21
    564c:	d8800a15 	stw	r2,40(sp)
    5650:	0007b2c0 	call	7b2c <_Bfree>
    5654:	d8c00a17 	ldw	r3,40(sp)
    5658:	18009f1e 	bne	r3,zero,58d8 <_dtoa_r+0xce4>
    565c:	05c00044 	movi	r23,1
    5660:	e009883a 	mov	r4,fp
    5664:	b80b883a 	mov	r5,r23
    5668:	0007e900 	call	7e90 <__i2b>
    566c:	d9000d17 	ldw	r4,52(sp)
    5670:	102b883a 	mov	r21,r2
    5674:	2000ce26 	beq	r4,zero,59b0 <_dtoa_r+0xdbc>
    5678:	200d883a 	mov	r6,r4
    567c:	100b883a 	mov	r5,r2
    5680:	e009883a 	mov	r4,fp
    5684:	00080c40 	call	80c4 <__pow5mult>
    5688:	d9800317 	ldw	r6,12(sp)
    568c:	102b883a 	mov	r21,r2
    5690:	b981810e 	bge	r23,r6,5c98 <_dtoa_r+0x10a4>
    5694:	0027883a 	mov	r19,zero
    5698:	a8800417 	ldw	r2,16(r21)
    569c:	05c00804 	movi	r23,32
    56a0:	10800104 	addi	r2,r2,4
    56a4:	1085883a 	add	r2,r2,r2
    56a8:	1085883a 	add	r2,r2,r2
    56ac:	a885883a 	add	r2,r21,r2
    56b0:	11000017 	ldw	r4,0(r2)
    56b4:	0007d780 	call	7d78 <__hi0bits>
    56b8:	b885c83a 	sub	r2,r23,r2
    56bc:	1585883a 	add	r2,r2,r22
    56c0:	108007cc 	andi	r2,r2,31
    56c4:	1000b326 	beq	r2,zero,5994 <_dtoa_r+0xda0>
    56c8:	00c00804 	movi	r3,32
    56cc:	1887c83a 	sub	r3,r3,r2
    56d0:	01000104 	movi	r4,4
    56d4:	20c2cd0e 	bge	r4,r3,620c <_dtoa_r+0x1618>
    56d8:	00c00704 	movi	r3,28
    56dc:	1885c83a 	sub	r2,r3,r2
    56e0:	d8c00817 	ldw	r3,32(sp)
    56e4:	a0a9883a 	add	r20,r20,r2
    56e8:	b0ad883a 	add	r22,r22,r2
    56ec:	1887883a 	add	r3,r3,r2
    56f0:	d8c00815 	stw	r3,32(sp)
    56f4:	d9800817 	ldw	r6,32(sp)
    56f8:	0180040e 	bge	zero,r6,570c <_dtoa_r+0xb18>
    56fc:	800b883a 	mov	r5,r16
    5700:	e009883a 	mov	r4,fp
    5704:	00082040 	call	8204 <__lshift>
    5708:	1021883a 	mov	r16,r2
    570c:	0580050e 	bge	zero,r22,5724 <_dtoa_r+0xb30>
    5710:	a80b883a 	mov	r5,r21
    5714:	b00d883a 	mov	r6,r22
    5718:	e009883a 	mov	r4,fp
    571c:	00082040 	call	8204 <__lshift>
    5720:	102b883a 	mov	r21,r2
    5724:	d9c00e17 	ldw	r7,56(sp)
    5728:	3801211e 	bne	r7,zero,5bb0 <_dtoa_r+0xfbc>
    572c:	d9800617 	ldw	r6,24(sp)
    5730:	0181380e 	bge	zero,r6,5c14 <_dtoa_r+0x1020>
    5734:	d8c00b17 	ldw	r3,44(sp)
    5738:	1800ab1e 	bne	r3,zero,59e8 <_dtoa_r+0xdf4>
    573c:	dc800717 	ldw	r18,28(sp)
    5740:	dcc00617 	ldw	r19,24(sp)
    5744:	9029883a 	mov	r20,r18
    5748:	00000206 	br	5754 <_dtoa_r+0xb60>
    574c:	0007b540 	call	7b54 <__multadd>
    5750:	1021883a 	mov	r16,r2
    5754:	a80b883a 	mov	r5,r21
    5758:	8009883a 	mov	r4,r16
    575c:	00049f40 	call	49f4 <quorem>
    5760:	10800c04 	addi	r2,r2,48
    5764:	90800005 	stb	r2,0(r18)
    5768:	94800044 	addi	r18,r18,1
    576c:	9507c83a 	sub	r3,r18,r20
    5770:	000f883a 	mov	r7,zero
    5774:	01800284 	movi	r6,10
    5778:	800b883a 	mov	r5,r16
    577c:	e009883a 	mov	r4,fp
    5780:	1cfff216 	blt	r3,r19,574c <__alt_data_end+0xf800574c>
    5784:	1011883a 	mov	r8,r2
    5788:	d8800617 	ldw	r2,24(sp)
    578c:	0082370e 	bge	zero,r2,606c <_dtoa_r+0x1478>
    5790:	d9000717 	ldw	r4,28(sp)
    5794:	0025883a 	mov	r18,zero
    5798:	20af883a 	add	r23,r4,r2
    579c:	01800044 	movi	r6,1
    57a0:	800b883a 	mov	r5,r16
    57a4:	e009883a 	mov	r4,fp
    57a8:	da001715 	stw	r8,92(sp)
    57ac:	00082040 	call	8204 <__lshift>
    57b0:	a80b883a 	mov	r5,r21
    57b4:	1009883a 	mov	r4,r2
    57b8:	d8800915 	stw	r2,36(sp)
    57bc:	000834c0 	call	834c <__mcmp>
    57c0:	da001717 	ldw	r8,92(sp)
    57c4:	0081800e 	bge	zero,r2,5dc8 <_dtoa_r+0x11d4>
    57c8:	b93fffc3 	ldbu	r4,-1(r23)
    57cc:	b8bfffc4 	addi	r2,r23,-1
    57d0:	1007883a 	mov	r3,r2
    57d4:	01800e44 	movi	r6,57
    57d8:	d9c00717 	ldw	r7,28(sp)
    57dc:	00000506 	br	57f4 <_dtoa_r+0xc00>
    57e0:	18ffffc4 	addi	r3,r3,-1
    57e4:	11c12326 	beq	r2,r7,5c74 <_dtoa_r+0x1080>
    57e8:	19000003 	ldbu	r4,0(r3)
    57ec:	102f883a 	mov	r23,r2
    57f0:	10bfffc4 	addi	r2,r2,-1
    57f4:	21403fcc 	andi	r5,r4,255
    57f8:	2940201c 	xori	r5,r5,128
    57fc:	297fe004 	addi	r5,r5,-128
    5800:	29bff726 	beq	r5,r6,57e0 <__alt_data_end+0xf80057e0>
    5804:	21000044 	addi	r4,r4,1
    5808:	11000005 	stb	r4,0(r2)
    580c:	a80b883a 	mov	r5,r21
    5810:	e009883a 	mov	r4,fp
    5814:	0007b2c0 	call	7b2c <_Bfree>
    5818:	883ea026 	beq	r17,zero,529c <__alt_data_end+0xf800529c>
    581c:	90000426 	beq	r18,zero,5830 <_dtoa_r+0xc3c>
    5820:	94400326 	beq	r18,r17,5830 <_dtoa_r+0xc3c>
    5824:	900b883a 	mov	r5,r18
    5828:	e009883a 	mov	r4,fp
    582c:	0007b2c0 	call	7b2c <_Bfree>
    5830:	880b883a 	mov	r5,r17
    5834:	e009883a 	mov	r4,fp
    5838:	0007b2c0 	call	7b2c <_Bfree>
    583c:	003e9706 	br	529c <__alt_data_end+0xf800529c>
    5840:	01800044 	movi	r6,1
    5844:	d9800e15 	stw	r6,56(sp)
    5848:	003d9606 	br	4ea4 <__alt_data_end+0xf8004ea4>
    584c:	d8800817 	ldw	r2,32(sp)
    5850:	d8c00517 	ldw	r3,20(sp)
    5854:	d8000d15 	stw	zero,52(sp)
    5858:	10c5c83a 	sub	r2,r2,r3
    585c:	00c9c83a 	sub	r4,zero,r3
    5860:	d8800815 	stw	r2,32(sp)
    5864:	d9000a15 	stw	r4,40(sp)
    5868:	003d9706 	br	4ec8 <__alt_data_end+0xf8004ec8>
    586c:	05adc83a 	sub	r22,zero,r22
    5870:	dd800815 	stw	r22,32(sp)
    5874:	002d883a 	mov	r22,zero
    5878:	003d8e06 	br	4eb4 <__alt_data_end+0xf8004eb4>
    587c:	d9000517 	ldw	r4,20(sp)
    5880:	000e11c0 	call	e11c <__floatsidf>
    5884:	100d883a 	mov	r6,r2
    5888:	180f883a 	mov	r7,r3
    588c:	a009883a 	mov	r4,r20
    5890:	880b883a 	mov	r5,r17
    5894:	000ce300 	call	ce30 <__eqdf2>
    5898:	103d7126 	beq	r2,zero,4e60 <__alt_data_end+0xf8004e60>
    589c:	d9c00517 	ldw	r7,20(sp)
    58a0:	39ffffc4 	addi	r7,r7,-1
    58a4:	d9c00515 	stw	r7,20(sp)
    58a8:	003d6d06 	br	4e60 <__alt_data_end+0xf8004e60>
    58ac:	dd400a17 	ldw	r21,40(sp)
    58b0:	dd000817 	ldw	r20,32(sp)
    58b4:	0023883a 	mov	r17,zero
    58b8:	003f4806 	br	55dc <__alt_data_end+0xf80055dc>
    58bc:	10e3c83a 	sub	r17,r2,r3
    58c0:	9448983a 	sll	r4,r18,r17
    58c4:	003d3206 	br	4d90 <__alt_data_end+0xf8004d90>
    58c8:	d8000e15 	stw	zero,56(sp)
    58cc:	003d7506 	br	4ea4 <__alt_data_end+0xf8004ea4>
    58d0:	b005883a 	mov	r2,r22
    58d4:	003f4506 	br	55ec <__alt_data_end+0xf80055ec>
    58d8:	dc000915 	stw	r16,36(sp)
    58dc:	d9800a17 	ldw	r6,40(sp)
    58e0:	d9400917 	ldw	r5,36(sp)
    58e4:	e009883a 	mov	r4,fp
    58e8:	00080c40 	call	80c4 <__pow5mult>
    58ec:	1021883a 	mov	r16,r2
    58f0:	003f5a06 	br	565c <__alt_data_end+0xf800565c>
    58f4:	01c00044 	movi	r7,1
    58f8:	d9c00b15 	stw	r7,44(sp)
    58fc:	d8802217 	ldw	r2,136(sp)
    5900:	0081280e 	bge	zero,r2,5da4 <_dtoa_r+0x11b0>
    5904:	100d883a 	mov	r6,r2
    5908:	1021883a 	mov	r16,r2
    590c:	d8800c15 	stw	r2,48(sp)
    5910:	d8800615 	stw	r2,24(sp)
    5914:	003d8806 	br	4f38 <__alt_data_end+0xf8004f38>
    5918:	d8800617 	ldw	r2,24(sp)
    591c:	00be9b16 	blt	zero,r2,538c <__alt_data_end+0xf800538c>
    5920:	10010f1e 	bne	r2,zero,5d60 <_dtoa_r+0x116c>
    5924:	880b883a 	mov	r5,r17
    5928:	000d883a 	mov	r6,zero
    592c:	01d00534 	movhi	r7,16404
    5930:	8009883a 	mov	r4,r16
    5934:	000d0880 	call	d088 <__muldf3>
    5938:	900d883a 	mov	r6,r18
    593c:	980f883a 	mov	r7,r19
    5940:	1009883a 	mov	r4,r2
    5944:	180b883a 	mov	r5,r3
    5948:	000ceb80 	call	ceb8 <__gedf2>
    594c:	002b883a 	mov	r21,zero
    5950:	0023883a 	mov	r17,zero
    5954:	1000bf16 	blt	r2,zero,5c54 <_dtoa_r+0x1060>
    5958:	d9802217 	ldw	r6,136(sp)
    595c:	ddc00717 	ldw	r23,28(sp)
    5960:	018c303a 	nor	r6,zero,r6
    5964:	d9800515 	stw	r6,20(sp)
    5968:	a80b883a 	mov	r5,r21
    596c:	e009883a 	mov	r4,fp
    5970:	0007b2c0 	call	7b2c <_Bfree>
    5974:	883e4926 	beq	r17,zero,529c <__alt_data_end+0xf800529c>
    5978:	003fad06 	br	5830 <__alt_data_end+0xf8005830>
    597c:	d9c01117 	ldw	r7,68(sp)
    5980:	3801bc26 	beq	r7,zero,6074 <_dtoa_r+0x1480>
    5984:	10810cc4 	addi	r2,r2,1075
    5988:	dd400a17 	ldw	r21,40(sp)
    598c:	dd000817 	ldw	r20,32(sp)
    5990:	003f0a06 	br	55bc <__alt_data_end+0xf80055bc>
    5994:	00800704 	movi	r2,28
    5998:	d9000817 	ldw	r4,32(sp)
    599c:	a0a9883a 	add	r20,r20,r2
    59a0:	b0ad883a 	add	r22,r22,r2
    59a4:	2089883a 	add	r4,r4,r2
    59a8:	d9000815 	stw	r4,32(sp)
    59ac:	003f5106 	br	56f4 <__alt_data_end+0xf80056f4>
    59b0:	d8c00317 	ldw	r3,12(sp)
    59b4:	b8c1fc0e 	bge	r23,r3,61a8 <_dtoa_r+0x15b4>
    59b8:	0027883a 	mov	r19,zero
    59bc:	b805883a 	mov	r2,r23
    59c0:	003f3e06 	br	56bc <__alt_data_end+0xf80056bc>
    59c4:	880b883a 	mov	r5,r17
    59c8:	e009883a 	mov	r4,fp
    59cc:	000f883a 	mov	r7,zero
    59d0:	01800284 	movi	r6,10
    59d4:	0007b540 	call	7b54 <__multadd>
    59d8:	d9000c17 	ldw	r4,48(sp)
    59dc:	1023883a 	mov	r17,r2
    59e0:	0102040e 	bge	zero,r4,61f4 <_dtoa_r+0x1600>
    59e4:	d9000615 	stw	r4,24(sp)
    59e8:	0500050e 	bge	zero,r20,5a00 <_dtoa_r+0xe0c>
    59ec:	880b883a 	mov	r5,r17
    59f0:	a00d883a 	mov	r6,r20
    59f4:	e009883a 	mov	r4,fp
    59f8:	00082040 	call	8204 <__lshift>
    59fc:	1023883a 	mov	r17,r2
    5a00:	9801241e 	bne	r19,zero,5e94 <_dtoa_r+0x12a0>
    5a04:	8829883a 	mov	r20,r17
    5a08:	d9000617 	ldw	r4,24(sp)
    5a0c:	dcc00717 	ldw	r19,28(sp)
    5a10:	9480004c 	andi	r18,r18,1
    5a14:	20bfffc4 	addi	r2,r4,-1
    5a18:	9885883a 	add	r2,r19,r2
    5a1c:	d8800415 	stw	r2,16(sp)
    5a20:	dc800615 	stw	r18,24(sp)
    5a24:	a80b883a 	mov	r5,r21
    5a28:	8009883a 	mov	r4,r16
    5a2c:	00049f40 	call	49f4 <quorem>
    5a30:	880b883a 	mov	r5,r17
    5a34:	8009883a 	mov	r4,r16
    5a38:	102f883a 	mov	r23,r2
    5a3c:	000834c0 	call	834c <__mcmp>
    5a40:	a80b883a 	mov	r5,r21
    5a44:	a00d883a 	mov	r6,r20
    5a48:	e009883a 	mov	r4,fp
    5a4c:	102d883a 	mov	r22,r2
    5a50:	00083ac0 	call	83ac <__mdiff>
    5a54:	1007883a 	mov	r3,r2
    5a58:	10800317 	ldw	r2,12(r2)
    5a5c:	bc800c04 	addi	r18,r23,48
    5a60:	180b883a 	mov	r5,r3
    5a64:	10004e1e 	bne	r2,zero,5ba0 <_dtoa_r+0xfac>
    5a68:	8009883a 	mov	r4,r16
    5a6c:	d8c01615 	stw	r3,88(sp)
    5a70:	000834c0 	call	834c <__mcmp>
    5a74:	d8c01617 	ldw	r3,88(sp)
    5a78:	e009883a 	mov	r4,fp
    5a7c:	d8801615 	stw	r2,88(sp)
    5a80:	180b883a 	mov	r5,r3
    5a84:	0007b2c0 	call	7b2c <_Bfree>
    5a88:	d8801617 	ldw	r2,88(sp)
    5a8c:	1000041e 	bne	r2,zero,5aa0 <_dtoa_r+0xeac>
    5a90:	d9800317 	ldw	r6,12(sp)
    5a94:	3000021e 	bne	r6,zero,5aa0 <_dtoa_r+0xeac>
    5a98:	d8c00617 	ldw	r3,24(sp)
    5a9c:	18003726 	beq	r3,zero,5b7c <_dtoa_r+0xf88>
    5aa0:	b0002016 	blt	r22,zero,5b24 <_dtoa_r+0xf30>
    5aa4:	b000041e 	bne	r22,zero,5ab8 <_dtoa_r+0xec4>
    5aa8:	d9000317 	ldw	r4,12(sp)
    5aac:	2000021e 	bne	r4,zero,5ab8 <_dtoa_r+0xec4>
    5ab0:	d8c00617 	ldw	r3,24(sp)
    5ab4:	18001b26 	beq	r3,zero,5b24 <_dtoa_r+0xf30>
    5ab8:	00810716 	blt	zero,r2,5ed8 <_dtoa_r+0x12e4>
    5abc:	d8c00417 	ldw	r3,16(sp)
    5ac0:	9d800044 	addi	r22,r19,1
    5ac4:	9c800005 	stb	r18,0(r19)
    5ac8:	b02f883a 	mov	r23,r22
    5acc:	98c10626 	beq	r19,r3,5ee8 <_dtoa_r+0x12f4>
    5ad0:	800b883a 	mov	r5,r16
    5ad4:	000f883a 	mov	r7,zero
    5ad8:	01800284 	movi	r6,10
    5adc:	e009883a 	mov	r4,fp
    5ae0:	0007b540 	call	7b54 <__multadd>
    5ae4:	1021883a 	mov	r16,r2
    5ae8:	000f883a 	mov	r7,zero
    5aec:	01800284 	movi	r6,10
    5af0:	880b883a 	mov	r5,r17
    5af4:	e009883a 	mov	r4,fp
    5af8:	8d002526 	beq	r17,r20,5b90 <_dtoa_r+0xf9c>
    5afc:	0007b540 	call	7b54 <__multadd>
    5b00:	a00b883a 	mov	r5,r20
    5b04:	000f883a 	mov	r7,zero
    5b08:	01800284 	movi	r6,10
    5b0c:	e009883a 	mov	r4,fp
    5b10:	1023883a 	mov	r17,r2
    5b14:	0007b540 	call	7b54 <__multadd>
    5b18:	1029883a 	mov	r20,r2
    5b1c:	b027883a 	mov	r19,r22
    5b20:	003fc006 	br	5a24 <__alt_data_end+0xf8005a24>
    5b24:	9011883a 	mov	r8,r18
    5b28:	00800e0e 	bge	zero,r2,5b64 <_dtoa_r+0xf70>
    5b2c:	800b883a 	mov	r5,r16
    5b30:	01800044 	movi	r6,1
    5b34:	e009883a 	mov	r4,fp
    5b38:	da001715 	stw	r8,92(sp)
    5b3c:	00082040 	call	8204 <__lshift>
    5b40:	a80b883a 	mov	r5,r21
    5b44:	1009883a 	mov	r4,r2
    5b48:	1021883a 	mov	r16,r2
    5b4c:	000834c0 	call	834c <__mcmp>
    5b50:	da001717 	ldw	r8,92(sp)
    5b54:	0081960e 	bge	zero,r2,61b0 <_dtoa_r+0x15bc>
    5b58:	00800e44 	movi	r2,57
    5b5c:	40817026 	beq	r8,r2,6120 <_dtoa_r+0x152c>
    5b60:	ba000c44 	addi	r8,r23,49
    5b64:	8825883a 	mov	r18,r17
    5b68:	9dc00044 	addi	r23,r19,1
    5b6c:	9a000005 	stb	r8,0(r19)
    5b70:	a023883a 	mov	r17,r20
    5b74:	dc000915 	stw	r16,36(sp)
    5b78:	003f2406 	br	580c <__alt_data_end+0xf800580c>
    5b7c:	00800e44 	movi	r2,57
    5b80:	9011883a 	mov	r8,r18
    5b84:	90816626 	beq	r18,r2,6120 <_dtoa_r+0x152c>
    5b88:	05bff516 	blt	zero,r22,5b60 <__alt_data_end+0xf8005b60>
    5b8c:	003ff506 	br	5b64 <__alt_data_end+0xf8005b64>
    5b90:	0007b540 	call	7b54 <__multadd>
    5b94:	1023883a 	mov	r17,r2
    5b98:	1029883a 	mov	r20,r2
    5b9c:	003fdf06 	br	5b1c <__alt_data_end+0xf8005b1c>
    5ba0:	e009883a 	mov	r4,fp
    5ba4:	0007b2c0 	call	7b2c <_Bfree>
    5ba8:	00800044 	movi	r2,1
    5bac:	003fbc06 	br	5aa0 <__alt_data_end+0xf8005aa0>
    5bb0:	a80b883a 	mov	r5,r21
    5bb4:	8009883a 	mov	r4,r16
    5bb8:	000834c0 	call	834c <__mcmp>
    5bbc:	103edb0e 	bge	r2,zero,572c <__alt_data_end+0xf800572c>
    5bc0:	800b883a 	mov	r5,r16
    5bc4:	000f883a 	mov	r7,zero
    5bc8:	01800284 	movi	r6,10
    5bcc:	e009883a 	mov	r4,fp
    5bd0:	0007b540 	call	7b54 <__multadd>
    5bd4:	1021883a 	mov	r16,r2
    5bd8:	d8800517 	ldw	r2,20(sp)
    5bdc:	d8c00b17 	ldw	r3,44(sp)
    5be0:	10bfffc4 	addi	r2,r2,-1
    5be4:	d8800515 	stw	r2,20(sp)
    5be8:	183f761e 	bne	r3,zero,59c4 <__alt_data_end+0xf80059c4>
    5bec:	d9000c17 	ldw	r4,48(sp)
    5bf0:	0101730e 	bge	zero,r4,61c0 <_dtoa_r+0x15cc>
    5bf4:	d9000615 	stw	r4,24(sp)
    5bf8:	003ed006 	br	573c <__alt_data_end+0xf800573c>
    5bfc:	00800084 	movi	r2,2
    5c00:	3081861e 	bne	r6,r2,621c <_dtoa_r+0x1628>
    5c04:	d8000b15 	stw	zero,44(sp)
    5c08:	003f3c06 	br	58fc <__alt_data_end+0xf80058fc>
    5c0c:	dc000917 	ldw	r16,36(sp)
    5c10:	003e9206 	br	565c <__alt_data_end+0xf800565c>
    5c14:	d9c00317 	ldw	r7,12(sp)
    5c18:	00800084 	movi	r2,2
    5c1c:	11fec50e 	bge	r2,r7,5734 <__alt_data_end+0xf8005734>
    5c20:	d9000617 	ldw	r4,24(sp)
    5c24:	20013c1e 	bne	r4,zero,6118 <_dtoa_r+0x1524>
    5c28:	a80b883a 	mov	r5,r21
    5c2c:	000f883a 	mov	r7,zero
    5c30:	01800144 	movi	r6,5
    5c34:	e009883a 	mov	r4,fp
    5c38:	0007b540 	call	7b54 <__multadd>
    5c3c:	100b883a 	mov	r5,r2
    5c40:	8009883a 	mov	r4,r16
    5c44:	102b883a 	mov	r21,r2
    5c48:	000834c0 	call	834c <__mcmp>
    5c4c:	dc000915 	stw	r16,36(sp)
    5c50:	00bf410e 	bge	zero,r2,5958 <__alt_data_end+0xf8005958>
    5c54:	d9c00717 	ldw	r7,28(sp)
    5c58:	00800c44 	movi	r2,49
    5c5c:	38800005 	stb	r2,0(r7)
    5c60:	d8800517 	ldw	r2,20(sp)
    5c64:	3dc00044 	addi	r23,r7,1
    5c68:	10800044 	addi	r2,r2,1
    5c6c:	d8800515 	stw	r2,20(sp)
    5c70:	003f3d06 	br	5968 <__alt_data_end+0xf8005968>
    5c74:	d9800517 	ldw	r6,20(sp)
    5c78:	d9c00717 	ldw	r7,28(sp)
    5c7c:	00800c44 	movi	r2,49
    5c80:	31800044 	addi	r6,r6,1
    5c84:	d9800515 	stw	r6,20(sp)
    5c88:	38800005 	stb	r2,0(r7)
    5c8c:	003edf06 	br	580c <__alt_data_end+0xf800580c>
    5c90:	d8000b15 	stw	zero,44(sp)
    5c94:	003c9f06 	br	4f14 <__alt_data_end+0xf8004f14>
    5c98:	903e7e1e 	bne	r18,zero,5694 <__alt_data_end+0xf8005694>
    5c9c:	00800434 	movhi	r2,16
    5ca0:	10bfffc4 	addi	r2,r2,-1
    5ca4:	9884703a 	and	r2,r19,r2
    5ca8:	1000ea1e 	bne	r2,zero,6054 <_dtoa_r+0x1460>
    5cac:	9cdffc2c 	andhi	r19,r19,32752
    5cb0:	9800e826 	beq	r19,zero,6054 <_dtoa_r+0x1460>
    5cb4:	d9c00817 	ldw	r7,32(sp)
    5cb8:	b5800044 	addi	r22,r22,1
    5cbc:	04c00044 	movi	r19,1
    5cc0:	39c00044 	addi	r7,r7,1
    5cc4:	d9c00815 	stw	r7,32(sp)
    5cc8:	d8800d17 	ldw	r2,52(sp)
    5ccc:	103e721e 	bne	r2,zero,5698 <__alt_data_end+0xf8005698>
    5cd0:	00800044 	movi	r2,1
    5cd4:	003e7906 	br	56bc <__alt_data_end+0xf80056bc>
    5cd8:	8009883a 	mov	r4,r16
    5cdc:	000e11c0 	call	e11c <__floatsidf>
    5ce0:	d9800f17 	ldw	r6,60(sp)
    5ce4:	d9c01017 	ldw	r7,64(sp)
    5ce8:	1009883a 	mov	r4,r2
    5cec:	180b883a 	mov	r5,r3
    5cf0:	000d0880 	call	d088 <__muldf3>
    5cf4:	000d883a 	mov	r6,zero
    5cf8:	01d00734 	movhi	r7,16412
    5cfc:	1009883a 	mov	r4,r2
    5d00:	180b883a 	mov	r5,r3
    5d04:	000bc9c0 	call	bc9c <__adddf3>
    5d08:	047f3034 	movhi	r17,64704
    5d0c:	1021883a 	mov	r16,r2
    5d10:	1c63883a 	add	r17,r3,r17
    5d14:	d9000f17 	ldw	r4,60(sp)
    5d18:	d9401017 	ldw	r5,64(sp)
    5d1c:	000d883a 	mov	r6,zero
    5d20:	01d00534 	movhi	r7,16404
    5d24:	000d7a00 	call	d7a0 <__subdf3>
    5d28:	800d883a 	mov	r6,r16
    5d2c:	880f883a 	mov	r7,r17
    5d30:	1009883a 	mov	r4,r2
    5d34:	180b883a 	mov	r5,r3
    5d38:	102b883a 	mov	r21,r2
    5d3c:	1829883a 	mov	r20,r3
    5d40:	000ceb80 	call	ceb8 <__gedf2>
    5d44:	00806c16 	blt	zero,r2,5ef8 <_dtoa_r+0x1304>
    5d48:	89e0003c 	xorhi	r7,r17,32768
    5d4c:	800d883a 	mov	r6,r16
    5d50:	a809883a 	mov	r4,r21
    5d54:	a00b883a 	mov	r5,r20
    5d58:	000cf940 	call	cf94 <__ledf2>
    5d5c:	103d7e0e 	bge	r2,zero,5358 <__alt_data_end+0xf8005358>
    5d60:	002b883a 	mov	r21,zero
    5d64:	0023883a 	mov	r17,zero
    5d68:	003efb06 	br	5958 <__alt_data_end+0xf8005958>
    5d6c:	d8800717 	ldw	r2,28(sp)
    5d70:	003bd006 	br	4cb4 <__alt_data_end+0xf8004cb4>
    5d74:	d9000a17 	ldw	r4,40(sp)
    5d78:	d9800d17 	ldw	r6,52(sp)
    5d7c:	dd400a15 	stw	r21,40(sp)
    5d80:	a905c83a 	sub	r2,r21,r4
    5d84:	308d883a 	add	r6,r6,r2
    5d88:	d9800d15 	stw	r6,52(sp)
    5d8c:	002b883a 	mov	r21,zero
    5d90:	003e0606 	br	55ac <__alt_data_end+0xf80055ac>
    5d94:	9023883a 	mov	r17,r18
    5d98:	9829883a 	mov	r20,r19
    5d9c:	04000084 	movi	r16,2
    5da0:	003c9206 	br	4fec <__alt_data_end+0xf8004fec>
    5da4:	04000044 	movi	r16,1
    5da8:	dc000c15 	stw	r16,48(sp)
    5dac:	dc000615 	stw	r16,24(sp)
    5db0:	dc002215 	stw	r16,136(sp)
    5db4:	e0001115 	stw	zero,68(fp)
    5db8:	000b883a 	mov	r5,zero
    5dbc:	003c6906 	br	4f64 <__alt_data_end+0xf8004f64>
    5dc0:	3021883a 	mov	r16,r6
    5dc4:	003ffb06 	br	5db4 <__alt_data_end+0xf8005db4>
    5dc8:	1000021e 	bne	r2,zero,5dd4 <_dtoa_r+0x11e0>
    5dcc:	4200004c 	andi	r8,r8,1
    5dd0:	403e7d1e 	bne	r8,zero,57c8 <__alt_data_end+0xf80057c8>
    5dd4:	01000c04 	movi	r4,48
    5dd8:	00000106 	br	5de0 <_dtoa_r+0x11ec>
    5ddc:	102f883a 	mov	r23,r2
    5de0:	b8bfffc4 	addi	r2,r23,-1
    5de4:	10c00007 	ldb	r3,0(r2)
    5de8:	193ffc26 	beq	r3,r4,5ddc <__alt_data_end+0xf8005ddc>
    5dec:	003e8706 	br	580c <__alt_data_end+0xf800580c>
    5df0:	d8800517 	ldw	r2,20(sp)
    5df4:	00a3c83a 	sub	r17,zero,r2
    5df8:	8800a426 	beq	r17,zero,608c <_dtoa_r+0x1498>
    5dfc:	888003cc 	andi	r2,r17,15
    5e00:	100490fa 	slli	r2,r2,3
    5e04:	00c00074 	movhi	r3,1
    5e08:	18c82904 	addi	r3,r3,8356
    5e0c:	1885883a 	add	r2,r3,r2
    5e10:	11800017 	ldw	r6,0(r2)
    5e14:	11c00117 	ldw	r7,4(r2)
    5e18:	9009883a 	mov	r4,r18
    5e1c:	980b883a 	mov	r5,r19
    5e20:	8823d13a 	srai	r17,r17,4
    5e24:	000d0880 	call	d088 <__muldf3>
    5e28:	d8800f15 	stw	r2,60(sp)
    5e2c:	d8c01015 	stw	r3,64(sp)
    5e30:	8800e826 	beq	r17,zero,61d4 <_dtoa_r+0x15e0>
    5e34:	05000074 	movhi	r20,1
    5e38:	a5081f04 	addi	r20,r20,8316
    5e3c:	04000084 	movi	r16,2
    5e40:	8980004c 	andi	r6,r17,1
    5e44:	1009883a 	mov	r4,r2
    5e48:	8823d07a 	srai	r17,r17,1
    5e4c:	180b883a 	mov	r5,r3
    5e50:	30000426 	beq	r6,zero,5e64 <_dtoa_r+0x1270>
    5e54:	a1800017 	ldw	r6,0(r20)
    5e58:	a1c00117 	ldw	r7,4(r20)
    5e5c:	84000044 	addi	r16,r16,1
    5e60:	000d0880 	call	d088 <__muldf3>
    5e64:	a5000204 	addi	r20,r20,8
    5e68:	883ff51e 	bne	r17,zero,5e40 <__alt_data_end+0xf8005e40>
    5e6c:	d8800f15 	stw	r2,60(sp)
    5e70:	d8c01015 	stw	r3,64(sp)
    5e74:	003c7606 	br	5050 <__alt_data_end+0xf8005050>
    5e78:	00c00c04 	movi	r3,48
    5e7c:	10c00005 	stb	r3,0(r2)
    5e80:	d8c00517 	ldw	r3,20(sp)
    5e84:	bd3fffc3 	ldbu	r20,-1(r23)
    5e88:	18c00044 	addi	r3,r3,1
    5e8c:	d8c00515 	stw	r3,20(sp)
    5e90:	003db906 	br	5578 <__alt_data_end+0xf8005578>
    5e94:	89400117 	ldw	r5,4(r17)
    5e98:	e009883a 	mov	r4,fp
    5e9c:	0007a840 	call	7a84 <_Balloc>
    5ea0:	89800417 	ldw	r6,16(r17)
    5ea4:	89400304 	addi	r5,r17,12
    5ea8:	11000304 	addi	r4,r2,12
    5eac:	31800084 	addi	r6,r6,2
    5eb0:	318d883a 	add	r6,r6,r6
    5eb4:	318d883a 	add	r6,r6,r6
    5eb8:	1027883a 	mov	r19,r2
    5ebc:	00076b80 	call	76b8 <memcpy>
    5ec0:	01800044 	movi	r6,1
    5ec4:	980b883a 	mov	r5,r19
    5ec8:	e009883a 	mov	r4,fp
    5ecc:	00082040 	call	8204 <__lshift>
    5ed0:	1029883a 	mov	r20,r2
    5ed4:	003ecc06 	br	5a08 <__alt_data_end+0xf8005a08>
    5ed8:	00800e44 	movi	r2,57
    5edc:	90809026 	beq	r18,r2,6120 <_dtoa_r+0x152c>
    5ee0:	92000044 	addi	r8,r18,1
    5ee4:	003f1f06 	br	5b64 <__alt_data_end+0xf8005b64>
    5ee8:	9011883a 	mov	r8,r18
    5eec:	8825883a 	mov	r18,r17
    5ef0:	a023883a 	mov	r17,r20
    5ef4:	003e2906 	br	579c <__alt_data_end+0xf800579c>
    5ef8:	002b883a 	mov	r21,zero
    5efc:	0023883a 	mov	r17,zero
    5f00:	003f5406 	br	5c54 <__alt_data_end+0xf8005c54>
    5f04:	61bfffc4 	addi	r6,r12,-1
    5f08:	300490fa 	slli	r2,r6,3
    5f0c:	00c00074 	movhi	r3,1
    5f10:	18c82904 	addi	r3,r3,8356
    5f14:	1885883a 	add	r2,r3,r2
    5f18:	11000017 	ldw	r4,0(r2)
    5f1c:	11400117 	ldw	r5,4(r2)
    5f20:	d8800717 	ldw	r2,28(sp)
    5f24:	880f883a 	mov	r7,r17
    5f28:	d9801215 	stw	r6,72(sp)
    5f2c:	800d883a 	mov	r6,r16
    5f30:	db001615 	stw	r12,88(sp)
    5f34:	15c00044 	addi	r23,r2,1
    5f38:	000d0880 	call	d088 <__muldf3>
    5f3c:	d9401017 	ldw	r5,64(sp)
    5f40:	d9000f17 	ldw	r4,60(sp)
    5f44:	d8c01515 	stw	r3,84(sp)
    5f48:	d8801415 	stw	r2,80(sp)
    5f4c:	000e09c0 	call	e09c <__fixdfsi>
    5f50:	1009883a 	mov	r4,r2
    5f54:	1021883a 	mov	r16,r2
    5f58:	000e11c0 	call	e11c <__floatsidf>
    5f5c:	d9000f17 	ldw	r4,60(sp)
    5f60:	d9401017 	ldw	r5,64(sp)
    5f64:	100d883a 	mov	r6,r2
    5f68:	180f883a 	mov	r7,r3
    5f6c:	000d7a00 	call	d7a0 <__subdf3>
    5f70:	1829883a 	mov	r20,r3
    5f74:	d8c00717 	ldw	r3,28(sp)
    5f78:	84000c04 	addi	r16,r16,48
    5f7c:	1023883a 	mov	r17,r2
    5f80:	1c000005 	stb	r16,0(r3)
    5f84:	db001617 	ldw	r12,88(sp)
    5f88:	00800044 	movi	r2,1
    5f8c:	60802226 	beq	r12,r2,6018 <_dtoa_r+0x1424>
    5f90:	d9c00717 	ldw	r7,28(sp)
    5f94:	8805883a 	mov	r2,r17
    5f98:	b82b883a 	mov	r21,r23
    5f9c:	3b19883a 	add	r12,r7,r12
    5fa0:	6023883a 	mov	r17,r12
    5fa4:	a007883a 	mov	r3,r20
    5fa8:	dc800f15 	stw	r18,60(sp)
    5fac:	000d883a 	mov	r6,zero
    5fb0:	01d00934 	movhi	r7,16420
    5fb4:	1009883a 	mov	r4,r2
    5fb8:	180b883a 	mov	r5,r3
    5fbc:	000d0880 	call	d088 <__muldf3>
    5fc0:	180b883a 	mov	r5,r3
    5fc4:	1009883a 	mov	r4,r2
    5fc8:	1829883a 	mov	r20,r3
    5fcc:	1025883a 	mov	r18,r2
    5fd0:	000e09c0 	call	e09c <__fixdfsi>
    5fd4:	1009883a 	mov	r4,r2
    5fd8:	1021883a 	mov	r16,r2
    5fdc:	000e11c0 	call	e11c <__floatsidf>
    5fe0:	100d883a 	mov	r6,r2
    5fe4:	180f883a 	mov	r7,r3
    5fe8:	9009883a 	mov	r4,r18
    5fec:	a00b883a 	mov	r5,r20
    5ff0:	84000c04 	addi	r16,r16,48
    5ff4:	000d7a00 	call	d7a0 <__subdf3>
    5ff8:	ad400044 	addi	r21,r21,1
    5ffc:	ac3fffc5 	stb	r16,-1(r21)
    6000:	ac7fea1e 	bne	r21,r17,5fac <__alt_data_end+0xf8005fac>
    6004:	1023883a 	mov	r17,r2
    6008:	d8801217 	ldw	r2,72(sp)
    600c:	dc800f17 	ldw	r18,60(sp)
    6010:	1829883a 	mov	r20,r3
    6014:	b8af883a 	add	r23,r23,r2
    6018:	d9001417 	ldw	r4,80(sp)
    601c:	d9401517 	ldw	r5,84(sp)
    6020:	000d883a 	mov	r6,zero
    6024:	01cff834 	movhi	r7,16352
    6028:	000bc9c0 	call	bc9c <__adddf3>
    602c:	880d883a 	mov	r6,r17
    6030:	a00f883a 	mov	r7,r20
    6034:	1009883a 	mov	r4,r2
    6038:	180b883a 	mov	r5,r3
    603c:	000cf940 	call	cf94 <__ledf2>
    6040:	10003e0e 	bge	r2,zero,613c <_dtoa_r+0x1548>
    6044:	d9001317 	ldw	r4,76(sp)
    6048:	bd3fffc3 	ldbu	r20,-1(r23)
    604c:	d9000515 	stw	r4,20(sp)
    6050:	003d3b06 	br	5540 <__alt_data_end+0xf8005540>
    6054:	0027883a 	mov	r19,zero
    6058:	003f1b06 	br	5cc8 <__alt_data_end+0xf8005cc8>
    605c:	d8800817 	ldw	r2,32(sp)
    6060:	11e9c83a 	sub	r20,r2,r7
    6064:	0005883a 	mov	r2,zero
    6068:	003d5406 	br	55bc <__alt_data_end+0xf80055bc>
    606c:	00800044 	movi	r2,1
    6070:	003dc706 	br	5790 <__alt_data_end+0xf8005790>
    6074:	d8c00217 	ldw	r3,8(sp)
    6078:	00800d84 	movi	r2,54
    607c:	dd400a17 	ldw	r21,40(sp)
    6080:	10c5c83a 	sub	r2,r2,r3
    6084:	dd000817 	ldw	r20,32(sp)
    6088:	003d4c06 	br	55bc <__alt_data_end+0xf80055bc>
    608c:	dc800f15 	stw	r18,60(sp)
    6090:	dcc01015 	stw	r19,64(sp)
    6094:	04000084 	movi	r16,2
    6098:	003bed06 	br	5050 <__alt_data_end+0xf8005050>
    609c:	d9000617 	ldw	r4,24(sp)
    60a0:	203f0d26 	beq	r4,zero,5cd8 <__alt_data_end+0xf8005cd8>
    60a4:	d9800c17 	ldw	r6,48(sp)
    60a8:	01bcab0e 	bge	zero,r6,5358 <__alt_data_end+0xf8005358>
    60ac:	d9401017 	ldw	r5,64(sp)
    60b0:	d9000f17 	ldw	r4,60(sp)
    60b4:	000d883a 	mov	r6,zero
    60b8:	01d00934 	movhi	r7,16420
    60bc:	000d0880 	call	d088 <__muldf3>
    60c0:	81000044 	addi	r4,r16,1
    60c4:	d8800f15 	stw	r2,60(sp)
    60c8:	d8c01015 	stw	r3,64(sp)
    60cc:	000e11c0 	call	e11c <__floatsidf>
    60d0:	d9800f17 	ldw	r6,60(sp)
    60d4:	d9c01017 	ldw	r7,64(sp)
    60d8:	1009883a 	mov	r4,r2
    60dc:	180b883a 	mov	r5,r3
    60e0:	000d0880 	call	d088 <__muldf3>
    60e4:	01d00734 	movhi	r7,16412
    60e8:	000d883a 	mov	r6,zero
    60ec:	1009883a 	mov	r4,r2
    60f0:	180b883a 	mov	r5,r3
    60f4:	000bc9c0 	call	bc9c <__adddf3>
    60f8:	d9c00517 	ldw	r7,20(sp)
    60fc:	047f3034 	movhi	r17,64704
    6100:	1021883a 	mov	r16,r2
    6104:	39ffffc4 	addi	r7,r7,-1
    6108:	d9c01315 	stw	r7,76(sp)
    610c:	1c63883a 	add	r17,r3,r17
    6110:	db000c17 	ldw	r12,48(sp)
    6114:	003bea06 	br	50c0 <__alt_data_end+0xf80050c0>
    6118:	dc000915 	stw	r16,36(sp)
    611c:	003e0e06 	br	5958 <__alt_data_end+0xf8005958>
    6120:	01000e44 	movi	r4,57
    6124:	8825883a 	mov	r18,r17
    6128:	9dc00044 	addi	r23,r19,1
    612c:	99000005 	stb	r4,0(r19)
    6130:	a023883a 	mov	r17,r20
    6134:	dc000915 	stw	r16,36(sp)
    6138:	003da406 	br	57cc <__alt_data_end+0xf80057cc>
    613c:	d9801417 	ldw	r6,80(sp)
    6140:	d9c01517 	ldw	r7,84(sp)
    6144:	0009883a 	mov	r4,zero
    6148:	014ff834 	movhi	r5,16352
    614c:	000d7a00 	call	d7a0 <__subdf3>
    6150:	880d883a 	mov	r6,r17
    6154:	a00f883a 	mov	r7,r20
    6158:	1009883a 	mov	r4,r2
    615c:	180b883a 	mov	r5,r3
    6160:	000ceb80 	call	ceb8 <__gedf2>
    6164:	00bc7c0e 	bge	zero,r2,5358 <__alt_data_end+0xf8005358>
    6168:	01000c04 	movi	r4,48
    616c:	00000106 	br	6174 <_dtoa_r+0x1580>
    6170:	102f883a 	mov	r23,r2
    6174:	b8bfffc4 	addi	r2,r23,-1
    6178:	10c00007 	ldb	r3,0(r2)
    617c:	193ffc26 	beq	r3,r4,6170 <__alt_data_end+0xf8006170>
    6180:	d9801317 	ldw	r6,76(sp)
    6184:	d9800515 	stw	r6,20(sp)
    6188:	003c4406 	br	529c <__alt_data_end+0xf800529c>
    618c:	d9801317 	ldw	r6,76(sp)
    6190:	d9800515 	stw	r6,20(sp)
    6194:	003cea06 	br	5540 <__alt_data_end+0xf8005540>
    6198:	dd800f17 	ldw	r22,60(sp)
    619c:	dcc01017 	ldw	r19,64(sp)
    61a0:	dc801217 	ldw	r18,72(sp)
    61a4:	003c6c06 	br	5358 <__alt_data_end+0xf8005358>
    61a8:	903e031e 	bne	r18,zero,59b8 <__alt_data_end+0xf80059b8>
    61ac:	003ebb06 	br	5c9c <__alt_data_end+0xf8005c9c>
    61b0:	103e6c1e 	bne	r2,zero,5b64 <__alt_data_end+0xf8005b64>
    61b4:	4080004c 	andi	r2,r8,1
    61b8:	103e6a26 	beq	r2,zero,5b64 <__alt_data_end+0xf8005b64>
    61bc:	003e6606 	br	5b58 <__alt_data_end+0xf8005b58>
    61c0:	d8c00317 	ldw	r3,12(sp)
    61c4:	00800084 	movi	r2,2
    61c8:	10c02916 	blt	r2,r3,6270 <_dtoa_r+0x167c>
    61cc:	d9000c17 	ldw	r4,48(sp)
    61d0:	003e8806 	br	5bf4 <__alt_data_end+0xf8005bf4>
    61d4:	04000084 	movi	r16,2
    61d8:	003b9d06 	br	5050 <__alt_data_end+0xf8005050>
    61dc:	d9001317 	ldw	r4,76(sp)
    61e0:	d9000515 	stw	r4,20(sp)
    61e4:	003cd606 	br	5540 <__alt_data_end+0xf8005540>
    61e8:	d8801317 	ldw	r2,76(sp)
    61ec:	d8800515 	stw	r2,20(sp)
    61f0:	003c2a06 	br	529c <__alt_data_end+0xf800529c>
    61f4:	d9800317 	ldw	r6,12(sp)
    61f8:	00800084 	movi	r2,2
    61fc:	11801516 	blt	r2,r6,6254 <_dtoa_r+0x1660>
    6200:	d9c00c17 	ldw	r7,48(sp)
    6204:	d9c00615 	stw	r7,24(sp)
    6208:	003df706 	br	59e8 <__alt_data_end+0xf80059e8>
    620c:	193d3926 	beq	r3,r4,56f4 <__alt_data_end+0xf80056f4>
    6210:	00c00f04 	movi	r3,60
    6214:	1885c83a 	sub	r2,r3,r2
    6218:	003ddf06 	br	5998 <__alt_data_end+0xf8005998>
    621c:	e009883a 	mov	r4,fp
    6220:	e0001115 	stw	zero,68(fp)
    6224:	000b883a 	mov	r5,zero
    6228:	0007a840 	call	7a84 <_Balloc>
    622c:	d8800715 	stw	r2,28(sp)
    6230:	d8c00717 	ldw	r3,28(sp)
    6234:	00bfffc4 	movi	r2,-1
    6238:	01000044 	movi	r4,1
    623c:	d8800c15 	stw	r2,48(sp)
    6240:	e0c01015 	stw	r3,64(fp)
    6244:	d9000b15 	stw	r4,44(sp)
    6248:	d8800615 	stw	r2,24(sp)
    624c:	d8002215 	stw	zero,136(sp)
    6250:	003c4106 	br	5358 <__alt_data_end+0xf8005358>
    6254:	d8c00c17 	ldw	r3,48(sp)
    6258:	d8c00615 	stw	r3,24(sp)
    625c:	003e7006 	br	5c20 <__alt_data_end+0xf8005c20>
    6260:	04400044 	movi	r17,1
    6264:	003b2006 	br	4ee8 <__alt_data_end+0xf8004ee8>
    6268:	000b883a 	mov	r5,zero
    626c:	003b3d06 	br	4f64 <__alt_data_end+0xf8004f64>
    6270:	d8800c17 	ldw	r2,48(sp)
    6274:	d8800615 	stw	r2,24(sp)
    6278:	003e6906 	br	5c20 <__alt_data_end+0xf8005c20>

0000627c <__sflush_r>:
    627c:	2880030b 	ldhu	r2,12(r5)
    6280:	defffb04 	addi	sp,sp,-20
    6284:	dcc00315 	stw	r19,12(sp)
    6288:	dc400115 	stw	r17,4(sp)
    628c:	dfc00415 	stw	ra,16(sp)
    6290:	dc800215 	stw	r18,8(sp)
    6294:	dc000015 	stw	r16,0(sp)
    6298:	10c0020c 	andi	r3,r2,8
    629c:	2823883a 	mov	r17,r5
    62a0:	2027883a 	mov	r19,r4
    62a4:	1800311e 	bne	r3,zero,636c <__sflush_r+0xf0>
    62a8:	28c00117 	ldw	r3,4(r5)
    62ac:	10820014 	ori	r2,r2,2048
    62b0:	2880030d 	sth	r2,12(r5)
    62b4:	00c04b0e 	bge	zero,r3,63e4 <__sflush_r+0x168>
    62b8:	8a000a17 	ldw	r8,40(r17)
    62bc:	40002326 	beq	r8,zero,634c <__sflush_r+0xd0>
    62c0:	9c000017 	ldw	r16,0(r19)
    62c4:	10c4000c 	andi	r3,r2,4096
    62c8:	98000015 	stw	zero,0(r19)
    62cc:	18004826 	beq	r3,zero,63f0 <__sflush_r+0x174>
    62d0:	89801417 	ldw	r6,80(r17)
    62d4:	10c0010c 	andi	r3,r2,4
    62d8:	18000626 	beq	r3,zero,62f4 <__sflush_r+0x78>
    62dc:	88c00117 	ldw	r3,4(r17)
    62e0:	88800c17 	ldw	r2,48(r17)
    62e4:	30cdc83a 	sub	r6,r6,r3
    62e8:	10000226 	beq	r2,zero,62f4 <__sflush_r+0x78>
    62ec:	88800f17 	ldw	r2,60(r17)
    62f0:	308dc83a 	sub	r6,r6,r2
    62f4:	89400717 	ldw	r5,28(r17)
    62f8:	000f883a 	mov	r7,zero
    62fc:	9809883a 	mov	r4,r19
    6300:	403ee83a 	callr	r8
    6304:	00ffffc4 	movi	r3,-1
    6308:	10c04426 	beq	r2,r3,641c <__sflush_r+0x1a0>
    630c:	88c0030b 	ldhu	r3,12(r17)
    6310:	89000417 	ldw	r4,16(r17)
    6314:	88000115 	stw	zero,4(r17)
    6318:	197dffcc 	andi	r5,r3,63487
    631c:	8940030d 	sth	r5,12(r17)
    6320:	89000015 	stw	r4,0(r17)
    6324:	18c4000c 	andi	r3,r3,4096
    6328:	18002c1e 	bne	r3,zero,63dc <__sflush_r+0x160>
    632c:	89400c17 	ldw	r5,48(r17)
    6330:	9c000015 	stw	r16,0(r19)
    6334:	28000526 	beq	r5,zero,634c <__sflush_r+0xd0>
    6338:	88801004 	addi	r2,r17,64
    633c:	28800226 	beq	r5,r2,6348 <__sflush_r+0xcc>
    6340:	9809883a 	mov	r4,r19
    6344:	00069e80 	call	69e8 <_free_r>
    6348:	88000c15 	stw	zero,48(r17)
    634c:	0005883a 	mov	r2,zero
    6350:	dfc00417 	ldw	ra,16(sp)
    6354:	dcc00317 	ldw	r19,12(sp)
    6358:	dc800217 	ldw	r18,8(sp)
    635c:	dc400117 	ldw	r17,4(sp)
    6360:	dc000017 	ldw	r16,0(sp)
    6364:	dec00504 	addi	sp,sp,20
    6368:	f800283a 	ret
    636c:	2c800417 	ldw	r18,16(r5)
    6370:	903ff626 	beq	r18,zero,634c <__alt_data_end+0xf800634c>
    6374:	2c000017 	ldw	r16,0(r5)
    6378:	108000cc 	andi	r2,r2,3
    637c:	2c800015 	stw	r18,0(r5)
    6380:	84a1c83a 	sub	r16,r16,r18
    6384:	1000131e 	bne	r2,zero,63d4 <__sflush_r+0x158>
    6388:	28800517 	ldw	r2,20(r5)
    638c:	88800215 	stw	r2,8(r17)
    6390:	04000316 	blt	zero,r16,63a0 <__sflush_r+0x124>
    6394:	003fed06 	br	634c <__alt_data_end+0xf800634c>
    6398:	90a5883a 	add	r18,r18,r2
    639c:	043feb0e 	bge	zero,r16,634c <__alt_data_end+0xf800634c>
    63a0:	88800917 	ldw	r2,36(r17)
    63a4:	89400717 	ldw	r5,28(r17)
    63a8:	800f883a 	mov	r7,r16
    63ac:	900d883a 	mov	r6,r18
    63b0:	9809883a 	mov	r4,r19
    63b4:	103ee83a 	callr	r2
    63b8:	80a1c83a 	sub	r16,r16,r2
    63bc:	00bff616 	blt	zero,r2,6398 <__alt_data_end+0xf8006398>
    63c0:	88c0030b 	ldhu	r3,12(r17)
    63c4:	00bfffc4 	movi	r2,-1
    63c8:	18c01014 	ori	r3,r3,64
    63cc:	88c0030d 	sth	r3,12(r17)
    63d0:	003fdf06 	br	6350 <__alt_data_end+0xf8006350>
    63d4:	0005883a 	mov	r2,zero
    63d8:	003fec06 	br	638c <__alt_data_end+0xf800638c>
    63dc:	88801415 	stw	r2,80(r17)
    63e0:	003fd206 	br	632c <__alt_data_end+0xf800632c>
    63e4:	28c00f17 	ldw	r3,60(r5)
    63e8:	00ffb316 	blt	zero,r3,62b8 <__alt_data_end+0xf80062b8>
    63ec:	003fd706 	br	634c <__alt_data_end+0xf800634c>
    63f0:	89400717 	ldw	r5,28(r17)
    63f4:	000d883a 	mov	r6,zero
    63f8:	01c00044 	movi	r7,1
    63fc:	9809883a 	mov	r4,r19
    6400:	403ee83a 	callr	r8
    6404:	100d883a 	mov	r6,r2
    6408:	00bfffc4 	movi	r2,-1
    640c:	30801426 	beq	r6,r2,6460 <__sflush_r+0x1e4>
    6410:	8880030b 	ldhu	r2,12(r17)
    6414:	8a000a17 	ldw	r8,40(r17)
    6418:	003fae06 	br	62d4 <__alt_data_end+0xf80062d4>
    641c:	98c00017 	ldw	r3,0(r19)
    6420:	183fba26 	beq	r3,zero,630c <__alt_data_end+0xf800630c>
    6424:	01000744 	movi	r4,29
    6428:	19000626 	beq	r3,r4,6444 <__sflush_r+0x1c8>
    642c:	01000584 	movi	r4,22
    6430:	19000426 	beq	r3,r4,6444 <__sflush_r+0x1c8>
    6434:	88c0030b 	ldhu	r3,12(r17)
    6438:	18c01014 	ori	r3,r3,64
    643c:	88c0030d 	sth	r3,12(r17)
    6440:	003fc306 	br	6350 <__alt_data_end+0xf8006350>
    6444:	8880030b 	ldhu	r2,12(r17)
    6448:	88c00417 	ldw	r3,16(r17)
    644c:	88000115 	stw	zero,4(r17)
    6450:	10bdffcc 	andi	r2,r2,63487
    6454:	8880030d 	sth	r2,12(r17)
    6458:	88c00015 	stw	r3,0(r17)
    645c:	003fb306 	br	632c <__alt_data_end+0xf800632c>
    6460:	98800017 	ldw	r2,0(r19)
    6464:	103fea26 	beq	r2,zero,6410 <__alt_data_end+0xf8006410>
    6468:	00c00744 	movi	r3,29
    646c:	10c00226 	beq	r2,r3,6478 <__sflush_r+0x1fc>
    6470:	00c00584 	movi	r3,22
    6474:	10c0031e 	bne	r2,r3,6484 <__sflush_r+0x208>
    6478:	9c000015 	stw	r16,0(r19)
    647c:	0005883a 	mov	r2,zero
    6480:	003fb306 	br	6350 <__alt_data_end+0xf8006350>
    6484:	88c0030b 	ldhu	r3,12(r17)
    6488:	3005883a 	mov	r2,r6
    648c:	18c01014 	ori	r3,r3,64
    6490:	88c0030d 	sth	r3,12(r17)
    6494:	003fae06 	br	6350 <__alt_data_end+0xf8006350>

00006498 <_fflush_r>:
    6498:	defffd04 	addi	sp,sp,-12
    649c:	dc000115 	stw	r16,4(sp)
    64a0:	dfc00215 	stw	ra,8(sp)
    64a4:	2021883a 	mov	r16,r4
    64a8:	20000226 	beq	r4,zero,64b4 <_fflush_r+0x1c>
    64ac:	20800e17 	ldw	r2,56(r4)
    64b0:	10000c26 	beq	r2,zero,64e4 <_fflush_r+0x4c>
    64b4:	2880030f 	ldh	r2,12(r5)
    64b8:	1000051e 	bne	r2,zero,64d0 <_fflush_r+0x38>
    64bc:	0005883a 	mov	r2,zero
    64c0:	dfc00217 	ldw	ra,8(sp)
    64c4:	dc000117 	ldw	r16,4(sp)
    64c8:	dec00304 	addi	sp,sp,12
    64cc:	f800283a 	ret
    64d0:	8009883a 	mov	r4,r16
    64d4:	dfc00217 	ldw	ra,8(sp)
    64d8:	dc000117 	ldw	r16,4(sp)
    64dc:	dec00304 	addi	sp,sp,12
    64e0:	000627c1 	jmpi	627c <__sflush_r>
    64e4:	d9400015 	stw	r5,0(sp)
    64e8:	00068740 	call	6874 <__sinit>
    64ec:	d9400017 	ldw	r5,0(sp)
    64f0:	003ff006 	br	64b4 <__alt_data_end+0xf80064b4>

000064f4 <fflush>:
    64f4:	20000526 	beq	r4,zero,650c <fflush+0x18>
    64f8:	00800074 	movhi	r2,1
    64fc:	1090b404 	addi	r2,r2,17104
    6500:	200b883a 	mov	r5,r4
    6504:	11000017 	ldw	r4,0(r2)
    6508:	00064981 	jmpi	6498 <_fflush_r>
    650c:	00800074 	movhi	r2,1
    6510:	1090b304 	addi	r2,r2,17100
    6514:	11000017 	ldw	r4,0(r2)
    6518:	01400034 	movhi	r5,0
    651c:	29592604 	addi	r5,r5,25752
    6520:	00072781 	jmpi	7278 <_fwalk_reent>

00006524 <__fp_unlock>:
    6524:	0005883a 	mov	r2,zero
    6528:	f800283a 	ret

0000652c <_cleanup_r>:
    652c:	01400074 	movhi	r5,1
    6530:	296a8c04 	addi	r5,r5,-21968
    6534:	00072781 	jmpi	7278 <_fwalk_reent>

00006538 <__sinit.part.1>:
    6538:	defff704 	addi	sp,sp,-36
    653c:	00c00034 	movhi	r3,0
    6540:	dfc00815 	stw	ra,32(sp)
    6544:	ddc00715 	stw	r23,28(sp)
    6548:	dd800615 	stw	r22,24(sp)
    654c:	dd400515 	stw	r21,20(sp)
    6550:	dd000415 	stw	r20,16(sp)
    6554:	dcc00315 	stw	r19,12(sp)
    6558:	dc800215 	stw	r18,8(sp)
    655c:	dc400115 	stw	r17,4(sp)
    6560:	dc000015 	stw	r16,0(sp)
    6564:	18d94b04 	addi	r3,r3,25900
    6568:	24000117 	ldw	r16,4(r4)
    656c:	20c00f15 	stw	r3,60(r4)
    6570:	2080bb04 	addi	r2,r4,748
    6574:	00c000c4 	movi	r3,3
    6578:	20c0b915 	stw	r3,740(r4)
    657c:	2080ba15 	stw	r2,744(r4)
    6580:	2000b815 	stw	zero,736(r4)
    6584:	05c00204 	movi	r23,8
    6588:	00800104 	movi	r2,4
    658c:	2025883a 	mov	r18,r4
    6590:	b80d883a 	mov	r6,r23
    6594:	81001704 	addi	r4,r16,92
    6598:	000b883a 	mov	r5,zero
    659c:	80000015 	stw	zero,0(r16)
    65a0:	80000115 	stw	zero,4(r16)
    65a4:	80000215 	stw	zero,8(r16)
    65a8:	8080030d 	sth	r2,12(r16)
    65ac:	80001915 	stw	zero,100(r16)
    65b0:	8000038d 	sth	zero,14(r16)
    65b4:	80000415 	stw	zero,16(r16)
    65b8:	80000515 	stw	zero,20(r16)
    65bc:	80000615 	stw	zero,24(r16)
    65c0:	000795c0 	call	795c <memset>
    65c4:	05800074 	movhi	r22,1
    65c8:	94400217 	ldw	r17,8(r18)
    65cc:	05400074 	movhi	r21,1
    65d0:	05000074 	movhi	r20,1
    65d4:	04c00074 	movhi	r19,1
    65d8:	b5a41604 	addi	r22,r22,-28584
    65dc:	ad642d04 	addi	r21,r21,-28492
    65e0:	a5244c04 	addi	r20,r20,-28368
    65e4:	9ce46304 	addi	r19,r19,-28276
    65e8:	85800815 	stw	r22,32(r16)
    65ec:	85400915 	stw	r21,36(r16)
    65f0:	85000a15 	stw	r20,40(r16)
    65f4:	84c00b15 	stw	r19,44(r16)
    65f8:	84000715 	stw	r16,28(r16)
    65fc:	00800284 	movi	r2,10
    6600:	8880030d 	sth	r2,12(r17)
    6604:	00800044 	movi	r2,1
    6608:	b80d883a 	mov	r6,r23
    660c:	89001704 	addi	r4,r17,92
    6610:	000b883a 	mov	r5,zero
    6614:	88000015 	stw	zero,0(r17)
    6618:	88000115 	stw	zero,4(r17)
    661c:	88000215 	stw	zero,8(r17)
    6620:	88001915 	stw	zero,100(r17)
    6624:	8880038d 	sth	r2,14(r17)
    6628:	88000415 	stw	zero,16(r17)
    662c:	88000515 	stw	zero,20(r17)
    6630:	88000615 	stw	zero,24(r17)
    6634:	000795c0 	call	795c <memset>
    6638:	94000317 	ldw	r16,12(r18)
    663c:	00800484 	movi	r2,18
    6640:	8c400715 	stw	r17,28(r17)
    6644:	8d800815 	stw	r22,32(r17)
    6648:	8d400915 	stw	r21,36(r17)
    664c:	8d000a15 	stw	r20,40(r17)
    6650:	8cc00b15 	stw	r19,44(r17)
    6654:	8080030d 	sth	r2,12(r16)
    6658:	00800084 	movi	r2,2
    665c:	80000015 	stw	zero,0(r16)
    6660:	80000115 	stw	zero,4(r16)
    6664:	80000215 	stw	zero,8(r16)
    6668:	80001915 	stw	zero,100(r16)
    666c:	8080038d 	sth	r2,14(r16)
    6670:	80000415 	stw	zero,16(r16)
    6674:	80000515 	stw	zero,20(r16)
    6678:	80000615 	stw	zero,24(r16)
    667c:	b80d883a 	mov	r6,r23
    6680:	000b883a 	mov	r5,zero
    6684:	81001704 	addi	r4,r16,92
    6688:	000795c0 	call	795c <memset>
    668c:	00800044 	movi	r2,1
    6690:	84000715 	stw	r16,28(r16)
    6694:	85800815 	stw	r22,32(r16)
    6698:	85400915 	stw	r21,36(r16)
    669c:	85000a15 	stw	r20,40(r16)
    66a0:	84c00b15 	stw	r19,44(r16)
    66a4:	90800e15 	stw	r2,56(r18)
    66a8:	dfc00817 	ldw	ra,32(sp)
    66ac:	ddc00717 	ldw	r23,28(sp)
    66b0:	dd800617 	ldw	r22,24(sp)
    66b4:	dd400517 	ldw	r21,20(sp)
    66b8:	dd000417 	ldw	r20,16(sp)
    66bc:	dcc00317 	ldw	r19,12(sp)
    66c0:	dc800217 	ldw	r18,8(sp)
    66c4:	dc400117 	ldw	r17,4(sp)
    66c8:	dc000017 	ldw	r16,0(sp)
    66cc:	dec00904 	addi	sp,sp,36
    66d0:	f800283a 	ret

000066d4 <__fp_lock>:
    66d4:	0005883a 	mov	r2,zero
    66d8:	f800283a 	ret

000066dc <__sfmoreglue>:
    66dc:	defffc04 	addi	sp,sp,-16
    66e0:	dc400115 	stw	r17,4(sp)
    66e4:	2c7fffc4 	addi	r17,r5,-1
    66e8:	8c401a24 	muli	r17,r17,104
    66ec:	dc800215 	stw	r18,8(sp)
    66f0:	2825883a 	mov	r18,r5
    66f4:	89401d04 	addi	r5,r17,116
    66f8:	dc000015 	stw	r16,0(sp)
    66fc:	dfc00315 	stw	ra,12(sp)
    6700:	0001b980 	call	1b98 <_malloc_r>
    6704:	1021883a 	mov	r16,r2
    6708:	10000726 	beq	r2,zero,6728 <__sfmoreglue+0x4c>
    670c:	11000304 	addi	r4,r2,12
    6710:	10000015 	stw	zero,0(r2)
    6714:	14800115 	stw	r18,4(r2)
    6718:	11000215 	stw	r4,8(r2)
    671c:	89801a04 	addi	r6,r17,104
    6720:	000b883a 	mov	r5,zero
    6724:	000795c0 	call	795c <memset>
    6728:	8005883a 	mov	r2,r16
    672c:	dfc00317 	ldw	ra,12(sp)
    6730:	dc800217 	ldw	r18,8(sp)
    6734:	dc400117 	ldw	r17,4(sp)
    6738:	dc000017 	ldw	r16,0(sp)
    673c:	dec00404 	addi	sp,sp,16
    6740:	f800283a 	ret

00006744 <__sfp>:
    6744:	defffb04 	addi	sp,sp,-20
    6748:	dc000015 	stw	r16,0(sp)
    674c:	04000074 	movhi	r16,1
    6750:	8410b304 	addi	r16,r16,17100
    6754:	dcc00315 	stw	r19,12(sp)
    6758:	2027883a 	mov	r19,r4
    675c:	81000017 	ldw	r4,0(r16)
    6760:	dfc00415 	stw	ra,16(sp)
    6764:	dc800215 	stw	r18,8(sp)
    6768:	20800e17 	ldw	r2,56(r4)
    676c:	dc400115 	stw	r17,4(sp)
    6770:	1000021e 	bne	r2,zero,677c <__sfp+0x38>
    6774:	00065380 	call	6538 <__sinit.part.1>
    6778:	81000017 	ldw	r4,0(r16)
    677c:	2480b804 	addi	r18,r4,736
    6780:	047fffc4 	movi	r17,-1
    6784:	91000117 	ldw	r4,4(r18)
    6788:	94000217 	ldw	r16,8(r18)
    678c:	213fffc4 	addi	r4,r4,-1
    6790:	20000a16 	blt	r4,zero,67bc <__sfp+0x78>
    6794:	8080030f 	ldh	r2,12(r16)
    6798:	10000c26 	beq	r2,zero,67cc <__sfp+0x88>
    679c:	80c01d04 	addi	r3,r16,116
    67a0:	00000206 	br	67ac <__sfp+0x68>
    67a4:	18bfe60f 	ldh	r2,-104(r3)
    67a8:	10000826 	beq	r2,zero,67cc <__sfp+0x88>
    67ac:	213fffc4 	addi	r4,r4,-1
    67b0:	1c3ffd04 	addi	r16,r3,-12
    67b4:	18c01a04 	addi	r3,r3,104
    67b8:	247ffa1e 	bne	r4,r17,67a4 <__alt_data_end+0xf80067a4>
    67bc:	90800017 	ldw	r2,0(r18)
    67c0:	10001d26 	beq	r2,zero,6838 <__sfp+0xf4>
    67c4:	1025883a 	mov	r18,r2
    67c8:	003fee06 	br	6784 <__alt_data_end+0xf8006784>
    67cc:	00bfffc4 	movi	r2,-1
    67d0:	8080038d 	sth	r2,14(r16)
    67d4:	00800044 	movi	r2,1
    67d8:	8080030d 	sth	r2,12(r16)
    67dc:	80001915 	stw	zero,100(r16)
    67e0:	80000015 	stw	zero,0(r16)
    67e4:	80000215 	stw	zero,8(r16)
    67e8:	80000115 	stw	zero,4(r16)
    67ec:	80000415 	stw	zero,16(r16)
    67f0:	80000515 	stw	zero,20(r16)
    67f4:	80000615 	stw	zero,24(r16)
    67f8:	01800204 	movi	r6,8
    67fc:	000b883a 	mov	r5,zero
    6800:	81001704 	addi	r4,r16,92
    6804:	000795c0 	call	795c <memset>
    6808:	8005883a 	mov	r2,r16
    680c:	80000c15 	stw	zero,48(r16)
    6810:	80000d15 	stw	zero,52(r16)
    6814:	80001115 	stw	zero,68(r16)
    6818:	80001215 	stw	zero,72(r16)
    681c:	dfc00417 	ldw	ra,16(sp)
    6820:	dcc00317 	ldw	r19,12(sp)
    6824:	dc800217 	ldw	r18,8(sp)
    6828:	dc400117 	ldw	r17,4(sp)
    682c:	dc000017 	ldw	r16,0(sp)
    6830:	dec00504 	addi	sp,sp,20
    6834:	f800283a 	ret
    6838:	01400104 	movi	r5,4
    683c:	9809883a 	mov	r4,r19
    6840:	00066dc0 	call	66dc <__sfmoreglue>
    6844:	90800015 	stw	r2,0(r18)
    6848:	103fde1e 	bne	r2,zero,67c4 <__alt_data_end+0xf80067c4>
    684c:	00800304 	movi	r2,12
    6850:	98800015 	stw	r2,0(r19)
    6854:	0005883a 	mov	r2,zero
    6858:	003ff006 	br	681c <__alt_data_end+0xf800681c>

0000685c <_cleanup>:
    685c:	00800074 	movhi	r2,1
    6860:	1090b304 	addi	r2,r2,17100
    6864:	11000017 	ldw	r4,0(r2)
    6868:	01400074 	movhi	r5,1
    686c:	296a8c04 	addi	r5,r5,-21968
    6870:	00072781 	jmpi	7278 <_fwalk_reent>

00006874 <__sinit>:
    6874:	20800e17 	ldw	r2,56(r4)
    6878:	10000126 	beq	r2,zero,6880 <__sinit+0xc>
    687c:	f800283a 	ret
    6880:	00065381 	jmpi	6538 <__sinit.part.1>

00006884 <__sfp_lock_acquire>:
    6884:	f800283a 	ret

00006888 <__sfp_lock_release>:
    6888:	f800283a 	ret

0000688c <__sinit_lock_acquire>:
    688c:	f800283a 	ret

00006890 <__sinit_lock_release>:
    6890:	f800283a 	ret

00006894 <__fp_lock_all>:
    6894:	00800074 	movhi	r2,1
    6898:	1090b404 	addi	r2,r2,17104
    689c:	11000017 	ldw	r4,0(r2)
    68a0:	01400034 	movhi	r5,0
    68a4:	2959b504 	addi	r5,r5,26324
    68a8:	00071b41 	jmpi	71b4 <_fwalk>

000068ac <__fp_unlock_all>:
    68ac:	00800074 	movhi	r2,1
    68b0:	1090b404 	addi	r2,r2,17104
    68b4:	11000017 	ldw	r4,0(r2)
    68b8:	01400034 	movhi	r5,0
    68bc:	29594904 	addi	r5,r5,25892
    68c0:	00071b41 	jmpi	71b4 <_fwalk>

000068c4 <_malloc_trim_r>:
    68c4:	defffb04 	addi	sp,sp,-20
    68c8:	dcc00315 	stw	r19,12(sp)
    68cc:	04c00074 	movhi	r19,1
    68d0:	dc800215 	stw	r18,8(sp)
    68d4:	dc400115 	stw	r17,4(sp)
    68d8:	dc000015 	stw	r16,0(sp)
    68dc:	dfc00415 	stw	ra,16(sp)
    68e0:	2821883a 	mov	r16,r5
    68e4:	9cc9be04 	addi	r19,r19,9976
    68e8:	2025883a 	mov	r18,r4
    68ec:	000e8800 	call	e880 <__malloc_lock>
    68f0:	98800217 	ldw	r2,8(r19)
    68f4:	14400117 	ldw	r17,4(r2)
    68f8:	00bfff04 	movi	r2,-4
    68fc:	88a2703a 	and	r17,r17,r2
    6900:	8c21c83a 	sub	r16,r17,r16
    6904:	8403fbc4 	addi	r16,r16,4079
    6908:	8020d33a 	srli	r16,r16,12
    690c:	0083ffc4 	movi	r2,4095
    6910:	843fffc4 	addi	r16,r16,-1
    6914:	8020933a 	slli	r16,r16,12
    6918:	1400060e 	bge	r2,r16,6934 <_malloc_trim_r+0x70>
    691c:	000b883a 	mov	r5,zero
    6920:	9009883a 	mov	r4,r18
    6924:	00024e40 	call	24e4 <_sbrk_r>
    6928:	98c00217 	ldw	r3,8(r19)
    692c:	1c47883a 	add	r3,r3,r17
    6930:	10c00a26 	beq	r2,r3,695c <_malloc_trim_r+0x98>
    6934:	9009883a 	mov	r4,r18
    6938:	000e8a40 	call	e8a4 <__malloc_unlock>
    693c:	0005883a 	mov	r2,zero
    6940:	dfc00417 	ldw	ra,16(sp)
    6944:	dcc00317 	ldw	r19,12(sp)
    6948:	dc800217 	ldw	r18,8(sp)
    694c:	dc400117 	ldw	r17,4(sp)
    6950:	dc000017 	ldw	r16,0(sp)
    6954:	dec00504 	addi	sp,sp,20
    6958:	f800283a 	ret
    695c:	040bc83a 	sub	r5,zero,r16
    6960:	9009883a 	mov	r4,r18
    6964:	00024e40 	call	24e4 <_sbrk_r>
    6968:	00ffffc4 	movi	r3,-1
    696c:	10c00d26 	beq	r2,r3,69a4 <_malloc_trim_r+0xe0>
    6970:	00c00074 	movhi	r3,1
    6974:	18d84004 	addi	r3,r3,24832
    6978:	18800017 	ldw	r2,0(r3)
    697c:	99000217 	ldw	r4,8(r19)
    6980:	8c23c83a 	sub	r17,r17,r16
    6984:	8c400054 	ori	r17,r17,1
    6988:	1421c83a 	sub	r16,r2,r16
    698c:	24400115 	stw	r17,4(r4)
    6990:	9009883a 	mov	r4,r18
    6994:	1c000015 	stw	r16,0(r3)
    6998:	000e8a40 	call	e8a4 <__malloc_unlock>
    699c:	00800044 	movi	r2,1
    69a0:	003fe706 	br	6940 <__alt_data_end+0xf8006940>
    69a4:	000b883a 	mov	r5,zero
    69a8:	9009883a 	mov	r4,r18
    69ac:	00024e40 	call	24e4 <_sbrk_r>
    69b0:	99000217 	ldw	r4,8(r19)
    69b4:	014003c4 	movi	r5,15
    69b8:	1107c83a 	sub	r3,r2,r4
    69bc:	28ffdd0e 	bge	r5,r3,6934 <__alt_data_end+0xf8006934>
    69c0:	01400074 	movhi	r5,1
    69c4:	2950b104 	addi	r5,r5,17092
    69c8:	29400017 	ldw	r5,0(r5)
    69cc:	18c00054 	ori	r3,r3,1
    69d0:	20c00115 	stw	r3,4(r4)
    69d4:	00c00074 	movhi	r3,1
    69d8:	1145c83a 	sub	r2,r2,r5
    69dc:	18d84004 	addi	r3,r3,24832
    69e0:	18800015 	stw	r2,0(r3)
    69e4:	003fd306 	br	6934 <__alt_data_end+0xf8006934>

000069e8 <_free_r>:
    69e8:	28004126 	beq	r5,zero,6af0 <_free_r+0x108>
    69ec:	defffd04 	addi	sp,sp,-12
    69f0:	dc400115 	stw	r17,4(sp)
    69f4:	dc000015 	stw	r16,0(sp)
    69f8:	2023883a 	mov	r17,r4
    69fc:	2821883a 	mov	r16,r5
    6a00:	dfc00215 	stw	ra,8(sp)
    6a04:	000e8800 	call	e880 <__malloc_lock>
    6a08:	81ffff17 	ldw	r7,-4(r16)
    6a0c:	00bfff84 	movi	r2,-2
    6a10:	01000074 	movhi	r4,1
    6a14:	81bffe04 	addi	r6,r16,-8
    6a18:	3884703a 	and	r2,r7,r2
    6a1c:	2109be04 	addi	r4,r4,9976
    6a20:	308b883a 	add	r5,r6,r2
    6a24:	2a400117 	ldw	r9,4(r5)
    6a28:	22000217 	ldw	r8,8(r4)
    6a2c:	00ffff04 	movi	r3,-4
    6a30:	48c6703a 	and	r3,r9,r3
    6a34:	2a005726 	beq	r5,r8,6b94 <_free_r+0x1ac>
    6a38:	28c00115 	stw	r3,4(r5)
    6a3c:	39c0004c 	andi	r7,r7,1
    6a40:	3800091e 	bne	r7,zero,6a68 <_free_r+0x80>
    6a44:	823ffe17 	ldw	r8,-8(r16)
    6a48:	22400204 	addi	r9,r4,8
    6a4c:	320dc83a 	sub	r6,r6,r8
    6a50:	31c00217 	ldw	r7,8(r6)
    6a54:	1205883a 	add	r2,r2,r8
    6a58:	3a406526 	beq	r7,r9,6bf0 <_free_r+0x208>
    6a5c:	32000317 	ldw	r8,12(r6)
    6a60:	3a000315 	stw	r8,12(r7)
    6a64:	41c00215 	stw	r7,8(r8)
    6a68:	28cf883a 	add	r7,r5,r3
    6a6c:	39c00117 	ldw	r7,4(r7)
    6a70:	39c0004c 	andi	r7,r7,1
    6a74:	38003a26 	beq	r7,zero,6b60 <_free_r+0x178>
    6a78:	10c00054 	ori	r3,r2,1
    6a7c:	30c00115 	stw	r3,4(r6)
    6a80:	3087883a 	add	r3,r6,r2
    6a84:	18800015 	stw	r2,0(r3)
    6a88:	00c07fc4 	movi	r3,511
    6a8c:	18801936 	bltu	r3,r2,6af4 <_free_r+0x10c>
    6a90:	1004d0fa 	srli	r2,r2,3
    6a94:	01c00044 	movi	r7,1
    6a98:	21400117 	ldw	r5,4(r4)
    6a9c:	10c00044 	addi	r3,r2,1
    6aa0:	18c7883a 	add	r3,r3,r3
    6aa4:	1005d0ba 	srai	r2,r2,2
    6aa8:	18c7883a 	add	r3,r3,r3
    6aac:	18c7883a 	add	r3,r3,r3
    6ab0:	1907883a 	add	r3,r3,r4
    6ab4:	3884983a 	sll	r2,r7,r2
    6ab8:	19c00017 	ldw	r7,0(r3)
    6abc:	1a3ffe04 	addi	r8,r3,-8
    6ac0:	1144b03a 	or	r2,r2,r5
    6ac4:	32000315 	stw	r8,12(r6)
    6ac8:	31c00215 	stw	r7,8(r6)
    6acc:	20800115 	stw	r2,4(r4)
    6ad0:	19800015 	stw	r6,0(r3)
    6ad4:	39800315 	stw	r6,12(r7)
    6ad8:	8809883a 	mov	r4,r17
    6adc:	dfc00217 	ldw	ra,8(sp)
    6ae0:	dc400117 	ldw	r17,4(sp)
    6ae4:	dc000017 	ldw	r16,0(sp)
    6ae8:	dec00304 	addi	sp,sp,12
    6aec:	000e8a41 	jmpi	e8a4 <__malloc_unlock>
    6af0:	f800283a 	ret
    6af4:	100ad27a 	srli	r5,r2,9
    6af8:	00c00104 	movi	r3,4
    6afc:	19404a36 	bltu	r3,r5,6c28 <_free_r+0x240>
    6b00:	100ad1ba 	srli	r5,r2,6
    6b04:	28c00e44 	addi	r3,r5,57
    6b08:	18c7883a 	add	r3,r3,r3
    6b0c:	29400e04 	addi	r5,r5,56
    6b10:	18c7883a 	add	r3,r3,r3
    6b14:	18c7883a 	add	r3,r3,r3
    6b18:	1909883a 	add	r4,r3,r4
    6b1c:	20c00017 	ldw	r3,0(r4)
    6b20:	01c00074 	movhi	r7,1
    6b24:	213ffe04 	addi	r4,r4,-8
    6b28:	39c9be04 	addi	r7,r7,9976
    6b2c:	20c04426 	beq	r4,r3,6c40 <_free_r+0x258>
    6b30:	01ffff04 	movi	r7,-4
    6b34:	19400117 	ldw	r5,4(r3)
    6b38:	29ca703a 	and	r5,r5,r7
    6b3c:	1140022e 	bgeu	r2,r5,6b48 <_free_r+0x160>
    6b40:	18c00217 	ldw	r3,8(r3)
    6b44:	20fffb1e 	bne	r4,r3,6b34 <__alt_data_end+0xf8006b34>
    6b48:	19000317 	ldw	r4,12(r3)
    6b4c:	31000315 	stw	r4,12(r6)
    6b50:	30c00215 	stw	r3,8(r6)
    6b54:	21800215 	stw	r6,8(r4)
    6b58:	19800315 	stw	r6,12(r3)
    6b5c:	003fde06 	br	6ad8 <__alt_data_end+0xf8006ad8>
    6b60:	29c00217 	ldw	r7,8(r5)
    6b64:	10c5883a 	add	r2,r2,r3
    6b68:	00c00074 	movhi	r3,1
    6b6c:	18c9c004 	addi	r3,r3,9984
    6b70:	38c03b26 	beq	r7,r3,6c60 <_free_r+0x278>
    6b74:	2a000317 	ldw	r8,12(r5)
    6b78:	11400054 	ori	r5,r2,1
    6b7c:	3087883a 	add	r3,r6,r2
    6b80:	3a000315 	stw	r8,12(r7)
    6b84:	41c00215 	stw	r7,8(r8)
    6b88:	31400115 	stw	r5,4(r6)
    6b8c:	18800015 	stw	r2,0(r3)
    6b90:	003fbd06 	br	6a88 <__alt_data_end+0xf8006a88>
    6b94:	39c0004c 	andi	r7,r7,1
    6b98:	10c5883a 	add	r2,r2,r3
    6b9c:	3800071e 	bne	r7,zero,6bbc <_free_r+0x1d4>
    6ba0:	81fffe17 	ldw	r7,-8(r16)
    6ba4:	31cdc83a 	sub	r6,r6,r7
    6ba8:	30c00317 	ldw	r3,12(r6)
    6bac:	31400217 	ldw	r5,8(r6)
    6bb0:	11c5883a 	add	r2,r2,r7
    6bb4:	28c00315 	stw	r3,12(r5)
    6bb8:	19400215 	stw	r5,8(r3)
    6bbc:	10c00054 	ori	r3,r2,1
    6bc0:	30c00115 	stw	r3,4(r6)
    6bc4:	00c00074 	movhi	r3,1
    6bc8:	18d0b204 	addi	r3,r3,17096
    6bcc:	18c00017 	ldw	r3,0(r3)
    6bd0:	21800215 	stw	r6,8(r4)
    6bd4:	10ffc036 	bltu	r2,r3,6ad8 <__alt_data_end+0xf8006ad8>
    6bd8:	00800074 	movhi	r2,1
    6bdc:	10983504 	addi	r2,r2,24788
    6be0:	11400017 	ldw	r5,0(r2)
    6be4:	8809883a 	mov	r4,r17
    6be8:	00068c40 	call	68c4 <_malloc_trim_r>
    6bec:	003fba06 	br	6ad8 <__alt_data_end+0xf8006ad8>
    6bf0:	28c9883a 	add	r4,r5,r3
    6bf4:	21000117 	ldw	r4,4(r4)
    6bf8:	2100004c 	andi	r4,r4,1
    6bfc:	2000391e 	bne	r4,zero,6ce4 <_free_r+0x2fc>
    6c00:	29c00217 	ldw	r7,8(r5)
    6c04:	29000317 	ldw	r4,12(r5)
    6c08:	1885883a 	add	r2,r3,r2
    6c0c:	10c00054 	ori	r3,r2,1
    6c10:	39000315 	stw	r4,12(r7)
    6c14:	21c00215 	stw	r7,8(r4)
    6c18:	30c00115 	stw	r3,4(r6)
    6c1c:	308d883a 	add	r6,r6,r2
    6c20:	30800015 	stw	r2,0(r6)
    6c24:	003fac06 	br	6ad8 <__alt_data_end+0xf8006ad8>
    6c28:	00c00504 	movi	r3,20
    6c2c:	19401536 	bltu	r3,r5,6c84 <_free_r+0x29c>
    6c30:	28c01704 	addi	r3,r5,92
    6c34:	18c7883a 	add	r3,r3,r3
    6c38:	294016c4 	addi	r5,r5,91
    6c3c:	003fb406 	br	6b10 <__alt_data_end+0xf8006b10>
    6c40:	280bd0ba 	srai	r5,r5,2
    6c44:	00c00044 	movi	r3,1
    6c48:	38800117 	ldw	r2,4(r7)
    6c4c:	194a983a 	sll	r5,r3,r5
    6c50:	2007883a 	mov	r3,r4
    6c54:	2884b03a 	or	r2,r5,r2
    6c58:	38800115 	stw	r2,4(r7)
    6c5c:	003fbb06 	br	6b4c <__alt_data_end+0xf8006b4c>
    6c60:	21800515 	stw	r6,20(r4)
    6c64:	21800415 	stw	r6,16(r4)
    6c68:	10c00054 	ori	r3,r2,1
    6c6c:	31c00315 	stw	r7,12(r6)
    6c70:	31c00215 	stw	r7,8(r6)
    6c74:	30c00115 	stw	r3,4(r6)
    6c78:	308d883a 	add	r6,r6,r2
    6c7c:	30800015 	stw	r2,0(r6)
    6c80:	003f9506 	br	6ad8 <__alt_data_end+0xf8006ad8>
    6c84:	00c01504 	movi	r3,84
    6c88:	19400536 	bltu	r3,r5,6ca0 <_free_r+0x2b8>
    6c8c:	100ad33a 	srli	r5,r2,12
    6c90:	28c01bc4 	addi	r3,r5,111
    6c94:	18c7883a 	add	r3,r3,r3
    6c98:	29401b84 	addi	r5,r5,110
    6c9c:	003f9c06 	br	6b10 <__alt_data_end+0xf8006b10>
    6ca0:	00c05504 	movi	r3,340
    6ca4:	19400536 	bltu	r3,r5,6cbc <_free_r+0x2d4>
    6ca8:	100ad3fa 	srli	r5,r2,15
    6cac:	28c01e04 	addi	r3,r5,120
    6cb0:	18c7883a 	add	r3,r3,r3
    6cb4:	29401dc4 	addi	r5,r5,119
    6cb8:	003f9506 	br	6b10 <__alt_data_end+0xf8006b10>
    6cbc:	00c15504 	movi	r3,1364
    6cc0:	19400536 	bltu	r3,r5,6cd8 <_free_r+0x2f0>
    6cc4:	100ad4ba 	srli	r5,r2,18
    6cc8:	28c01f44 	addi	r3,r5,125
    6ccc:	18c7883a 	add	r3,r3,r3
    6cd0:	29401f04 	addi	r5,r5,124
    6cd4:	003f8e06 	br	6b10 <__alt_data_end+0xf8006b10>
    6cd8:	00c03f84 	movi	r3,254
    6cdc:	01401f84 	movi	r5,126
    6ce0:	003f8b06 	br	6b10 <__alt_data_end+0xf8006b10>
    6ce4:	10c00054 	ori	r3,r2,1
    6ce8:	30c00115 	stw	r3,4(r6)
    6cec:	308d883a 	add	r6,r6,r2
    6cf0:	30800015 	stw	r2,0(r6)
    6cf4:	003f7806 	br	6ad8 <__alt_data_end+0xf8006ad8>

00006cf8 <__sfvwrite_r>:
    6cf8:	30800217 	ldw	r2,8(r6)
    6cfc:	10006726 	beq	r2,zero,6e9c <__sfvwrite_r+0x1a4>
    6d00:	28c0030b 	ldhu	r3,12(r5)
    6d04:	defff404 	addi	sp,sp,-48
    6d08:	dd400715 	stw	r21,28(sp)
    6d0c:	dd000615 	stw	r20,24(sp)
    6d10:	dc000215 	stw	r16,8(sp)
    6d14:	dfc00b15 	stw	ra,44(sp)
    6d18:	df000a15 	stw	fp,40(sp)
    6d1c:	ddc00915 	stw	r23,36(sp)
    6d20:	dd800815 	stw	r22,32(sp)
    6d24:	dcc00515 	stw	r19,20(sp)
    6d28:	dc800415 	stw	r18,16(sp)
    6d2c:	dc400315 	stw	r17,12(sp)
    6d30:	1880020c 	andi	r2,r3,8
    6d34:	2821883a 	mov	r16,r5
    6d38:	202b883a 	mov	r21,r4
    6d3c:	3029883a 	mov	r20,r6
    6d40:	10002726 	beq	r2,zero,6de0 <__sfvwrite_r+0xe8>
    6d44:	28800417 	ldw	r2,16(r5)
    6d48:	10002526 	beq	r2,zero,6de0 <__sfvwrite_r+0xe8>
    6d4c:	1880008c 	andi	r2,r3,2
    6d50:	a4400017 	ldw	r17,0(r20)
    6d54:	10002a26 	beq	r2,zero,6e00 <__sfvwrite_r+0x108>
    6d58:	05a00034 	movhi	r22,32768
    6d5c:	0027883a 	mov	r19,zero
    6d60:	0025883a 	mov	r18,zero
    6d64:	b5bf0004 	addi	r22,r22,-1024
    6d68:	980d883a 	mov	r6,r19
    6d6c:	a809883a 	mov	r4,r21
    6d70:	90004626 	beq	r18,zero,6e8c <__sfvwrite_r+0x194>
    6d74:	900f883a 	mov	r7,r18
    6d78:	b480022e 	bgeu	r22,r18,6d84 <__sfvwrite_r+0x8c>
    6d7c:	01e00034 	movhi	r7,32768
    6d80:	39ff0004 	addi	r7,r7,-1024
    6d84:	80800917 	ldw	r2,36(r16)
    6d88:	81400717 	ldw	r5,28(r16)
    6d8c:	103ee83a 	callr	r2
    6d90:	0080570e 	bge	zero,r2,6ef0 <__sfvwrite_r+0x1f8>
    6d94:	a0c00217 	ldw	r3,8(r20)
    6d98:	98a7883a 	add	r19,r19,r2
    6d9c:	90a5c83a 	sub	r18,r18,r2
    6da0:	1885c83a 	sub	r2,r3,r2
    6da4:	a0800215 	stw	r2,8(r20)
    6da8:	103fef1e 	bne	r2,zero,6d68 <__alt_data_end+0xf8006d68>
    6dac:	0005883a 	mov	r2,zero
    6db0:	dfc00b17 	ldw	ra,44(sp)
    6db4:	df000a17 	ldw	fp,40(sp)
    6db8:	ddc00917 	ldw	r23,36(sp)
    6dbc:	dd800817 	ldw	r22,32(sp)
    6dc0:	dd400717 	ldw	r21,28(sp)
    6dc4:	dd000617 	ldw	r20,24(sp)
    6dc8:	dcc00517 	ldw	r19,20(sp)
    6dcc:	dc800417 	ldw	r18,16(sp)
    6dd0:	dc400317 	ldw	r17,12(sp)
    6dd4:	dc000217 	ldw	r16,8(sp)
    6dd8:	dec00c04 	addi	sp,sp,48
    6ddc:	f800283a 	ret
    6de0:	800b883a 	mov	r5,r16
    6de4:	a809883a 	mov	r4,r21
    6de8:	00048a00 	call	48a0 <__swsetup_r>
    6dec:	1000eb1e 	bne	r2,zero,719c <__sfvwrite_r+0x4a4>
    6df0:	80c0030b 	ldhu	r3,12(r16)
    6df4:	a4400017 	ldw	r17,0(r20)
    6df8:	1880008c 	andi	r2,r3,2
    6dfc:	103fd61e 	bne	r2,zero,6d58 <__alt_data_end+0xf8006d58>
    6e00:	1880004c 	andi	r2,r3,1
    6e04:	10003f1e 	bne	r2,zero,6f04 <__sfvwrite_r+0x20c>
    6e08:	0039883a 	mov	fp,zero
    6e0c:	0025883a 	mov	r18,zero
    6e10:	90001a26 	beq	r18,zero,6e7c <__sfvwrite_r+0x184>
    6e14:	1880800c 	andi	r2,r3,512
    6e18:	84c00217 	ldw	r19,8(r16)
    6e1c:	10002126 	beq	r2,zero,6ea4 <__sfvwrite_r+0x1ac>
    6e20:	982f883a 	mov	r23,r19
    6e24:	94c09336 	bltu	r18,r19,7074 <__sfvwrite_r+0x37c>
    6e28:	1881200c 	andi	r2,r3,1152
    6e2c:	10009e1e 	bne	r2,zero,70a8 <__sfvwrite_r+0x3b0>
    6e30:	81000017 	ldw	r4,0(r16)
    6e34:	b80d883a 	mov	r6,r23
    6e38:	e00b883a 	mov	r5,fp
    6e3c:	00078000 	call	7800 <memmove>
    6e40:	80c00217 	ldw	r3,8(r16)
    6e44:	81000017 	ldw	r4,0(r16)
    6e48:	9005883a 	mov	r2,r18
    6e4c:	1ce7c83a 	sub	r19,r3,r19
    6e50:	25cf883a 	add	r7,r4,r23
    6e54:	84c00215 	stw	r19,8(r16)
    6e58:	81c00015 	stw	r7,0(r16)
    6e5c:	a0c00217 	ldw	r3,8(r20)
    6e60:	e0b9883a 	add	fp,fp,r2
    6e64:	90a5c83a 	sub	r18,r18,r2
    6e68:	18a7c83a 	sub	r19,r3,r2
    6e6c:	a4c00215 	stw	r19,8(r20)
    6e70:	983fce26 	beq	r19,zero,6dac <__alt_data_end+0xf8006dac>
    6e74:	80c0030b 	ldhu	r3,12(r16)
    6e78:	903fe61e 	bne	r18,zero,6e14 <__alt_data_end+0xf8006e14>
    6e7c:	8f000017 	ldw	fp,0(r17)
    6e80:	8c800117 	ldw	r18,4(r17)
    6e84:	8c400204 	addi	r17,r17,8
    6e88:	003fe106 	br	6e10 <__alt_data_end+0xf8006e10>
    6e8c:	8cc00017 	ldw	r19,0(r17)
    6e90:	8c800117 	ldw	r18,4(r17)
    6e94:	8c400204 	addi	r17,r17,8
    6e98:	003fb306 	br	6d68 <__alt_data_end+0xf8006d68>
    6e9c:	0005883a 	mov	r2,zero
    6ea0:	f800283a 	ret
    6ea4:	81000017 	ldw	r4,0(r16)
    6ea8:	80800417 	ldw	r2,16(r16)
    6eac:	11005736 	bltu	r2,r4,700c <__sfvwrite_r+0x314>
    6eb0:	85c00517 	ldw	r23,20(r16)
    6eb4:	95c05536 	bltu	r18,r23,700c <__sfvwrite_r+0x314>
    6eb8:	00a00034 	movhi	r2,32768
    6ebc:	10bfffc4 	addi	r2,r2,-1
    6ec0:	9009883a 	mov	r4,r18
    6ec4:	1480012e 	bgeu	r2,r18,6ecc <__sfvwrite_r+0x1d4>
    6ec8:	1009883a 	mov	r4,r2
    6ecc:	b80b883a 	mov	r5,r23
    6ed0:	00019bc0 	call	19bc <__divsi3>
    6ed4:	15cf383a 	mul	r7,r2,r23
    6ed8:	81400717 	ldw	r5,28(r16)
    6edc:	80800917 	ldw	r2,36(r16)
    6ee0:	e00d883a 	mov	r6,fp
    6ee4:	a809883a 	mov	r4,r21
    6ee8:	103ee83a 	callr	r2
    6eec:	00bfdb16 	blt	zero,r2,6e5c <__alt_data_end+0xf8006e5c>
    6ef0:	8080030b 	ldhu	r2,12(r16)
    6ef4:	10801014 	ori	r2,r2,64
    6ef8:	8080030d 	sth	r2,12(r16)
    6efc:	00bfffc4 	movi	r2,-1
    6f00:	003fab06 	br	6db0 <__alt_data_end+0xf8006db0>
    6f04:	0027883a 	mov	r19,zero
    6f08:	0011883a 	mov	r8,zero
    6f0c:	0039883a 	mov	fp,zero
    6f10:	0025883a 	mov	r18,zero
    6f14:	90001f26 	beq	r18,zero,6f94 <__sfvwrite_r+0x29c>
    6f18:	40005a26 	beq	r8,zero,7084 <__sfvwrite_r+0x38c>
    6f1c:	982d883a 	mov	r22,r19
    6f20:	94c0012e 	bgeu	r18,r19,6f28 <__sfvwrite_r+0x230>
    6f24:	902d883a 	mov	r22,r18
    6f28:	81000017 	ldw	r4,0(r16)
    6f2c:	80800417 	ldw	r2,16(r16)
    6f30:	b02f883a 	mov	r23,r22
    6f34:	81c00517 	ldw	r7,20(r16)
    6f38:	1100032e 	bgeu	r2,r4,6f48 <__sfvwrite_r+0x250>
    6f3c:	80c00217 	ldw	r3,8(r16)
    6f40:	38c7883a 	add	r3,r7,r3
    6f44:	1d801816 	blt	r3,r22,6fa8 <__sfvwrite_r+0x2b0>
    6f48:	b1c03e16 	blt	r22,r7,7044 <__sfvwrite_r+0x34c>
    6f4c:	80800917 	ldw	r2,36(r16)
    6f50:	81400717 	ldw	r5,28(r16)
    6f54:	e00d883a 	mov	r6,fp
    6f58:	da000115 	stw	r8,4(sp)
    6f5c:	a809883a 	mov	r4,r21
    6f60:	103ee83a 	callr	r2
    6f64:	102f883a 	mov	r23,r2
    6f68:	da000117 	ldw	r8,4(sp)
    6f6c:	00bfe00e 	bge	zero,r2,6ef0 <__alt_data_end+0xf8006ef0>
    6f70:	9de7c83a 	sub	r19,r19,r23
    6f74:	98001f26 	beq	r19,zero,6ff4 <__sfvwrite_r+0x2fc>
    6f78:	a0800217 	ldw	r2,8(r20)
    6f7c:	e5f9883a 	add	fp,fp,r23
    6f80:	95e5c83a 	sub	r18,r18,r23
    6f84:	15efc83a 	sub	r23,r2,r23
    6f88:	a5c00215 	stw	r23,8(r20)
    6f8c:	b83f8726 	beq	r23,zero,6dac <__alt_data_end+0xf8006dac>
    6f90:	903fe11e 	bne	r18,zero,6f18 <__alt_data_end+0xf8006f18>
    6f94:	8f000017 	ldw	fp,0(r17)
    6f98:	8c800117 	ldw	r18,4(r17)
    6f9c:	0011883a 	mov	r8,zero
    6fa0:	8c400204 	addi	r17,r17,8
    6fa4:	003fdb06 	br	6f14 <__alt_data_end+0xf8006f14>
    6fa8:	180d883a 	mov	r6,r3
    6fac:	e00b883a 	mov	r5,fp
    6fb0:	da000115 	stw	r8,4(sp)
    6fb4:	d8c00015 	stw	r3,0(sp)
    6fb8:	00078000 	call	7800 <memmove>
    6fbc:	d8c00017 	ldw	r3,0(sp)
    6fc0:	80800017 	ldw	r2,0(r16)
    6fc4:	800b883a 	mov	r5,r16
    6fc8:	a809883a 	mov	r4,r21
    6fcc:	10c5883a 	add	r2,r2,r3
    6fd0:	80800015 	stw	r2,0(r16)
    6fd4:	d8c00015 	stw	r3,0(sp)
    6fd8:	00064980 	call	6498 <_fflush_r>
    6fdc:	d8c00017 	ldw	r3,0(sp)
    6fe0:	da000117 	ldw	r8,4(sp)
    6fe4:	103fc21e 	bne	r2,zero,6ef0 <__alt_data_end+0xf8006ef0>
    6fe8:	182f883a 	mov	r23,r3
    6fec:	9de7c83a 	sub	r19,r19,r23
    6ff0:	983fe11e 	bne	r19,zero,6f78 <__alt_data_end+0xf8006f78>
    6ff4:	800b883a 	mov	r5,r16
    6ff8:	a809883a 	mov	r4,r21
    6ffc:	00064980 	call	6498 <_fflush_r>
    7000:	103fbb1e 	bne	r2,zero,6ef0 <__alt_data_end+0xf8006ef0>
    7004:	0011883a 	mov	r8,zero
    7008:	003fdb06 	br	6f78 <__alt_data_end+0xf8006f78>
    700c:	94c0012e 	bgeu	r18,r19,7014 <__sfvwrite_r+0x31c>
    7010:	9027883a 	mov	r19,r18
    7014:	980d883a 	mov	r6,r19
    7018:	e00b883a 	mov	r5,fp
    701c:	00078000 	call	7800 <memmove>
    7020:	80800217 	ldw	r2,8(r16)
    7024:	80c00017 	ldw	r3,0(r16)
    7028:	14c5c83a 	sub	r2,r2,r19
    702c:	1cc7883a 	add	r3,r3,r19
    7030:	80800215 	stw	r2,8(r16)
    7034:	80c00015 	stw	r3,0(r16)
    7038:	10004326 	beq	r2,zero,7148 <__sfvwrite_r+0x450>
    703c:	9805883a 	mov	r2,r19
    7040:	003f8606 	br	6e5c <__alt_data_end+0xf8006e5c>
    7044:	b00d883a 	mov	r6,r22
    7048:	e00b883a 	mov	r5,fp
    704c:	da000115 	stw	r8,4(sp)
    7050:	00078000 	call	7800 <memmove>
    7054:	80800217 	ldw	r2,8(r16)
    7058:	80c00017 	ldw	r3,0(r16)
    705c:	da000117 	ldw	r8,4(sp)
    7060:	1585c83a 	sub	r2,r2,r22
    7064:	1dad883a 	add	r22,r3,r22
    7068:	80800215 	stw	r2,8(r16)
    706c:	85800015 	stw	r22,0(r16)
    7070:	003fbf06 	br	6f70 <__alt_data_end+0xf8006f70>
    7074:	81000017 	ldw	r4,0(r16)
    7078:	9027883a 	mov	r19,r18
    707c:	902f883a 	mov	r23,r18
    7080:	003f6c06 	br	6e34 <__alt_data_end+0xf8006e34>
    7084:	900d883a 	mov	r6,r18
    7088:	01400284 	movi	r5,10
    708c:	e009883a 	mov	r4,fp
    7090:	00075d40 	call	75d4 <memchr>
    7094:	10003e26 	beq	r2,zero,7190 <__sfvwrite_r+0x498>
    7098:	10800044 	addi	r2,r2,1
    709c:	1727c83a 	sub	r19,r2,fp
    70a0:	02000044 	movi	r8,1
    70a4:	003f9d06 	br	6f1c <__alt_data_end+0xf8006f1c>
    70a8:	80800517 	ldw	r2,20(r16)
    70ac:	81400417 	ldw	r5,16(r16)
    70b0:	81c00017 	ldw	r7,0(r16)
    70b4:	10a7883a 	add	r19,r2,r2
    70b8:	9885883a 	add	r2,r19,r2
    70bc:	1026d7fa 	srli	r19,r2,31
    70c0:	396dc83a 	sub	r22,r7,r5
    70c4:	b1000044 	addi	r4,r22,1
    70c8:	9885883a 	add	r2,r19,r2
    70cc:	1027d07a 	srai	r19,r2,1
    70d0:	2485883a 	add	r2,r4,r18
    70d4:	980d883a 	mov	r6,r19
    70d8:	9880022e 	bgeu	r19,r2,70e4 <__sfvwrite_r+0x3ec>
    70dc:	1027883a 	mov	r19,r2
    70e0:	100d883a 	mov	r6,r2
    70e4:	18c1000c 	andi	r3,r3,1024
    70e8:	18001c26 	beq	r3,zero,715c <__sfvwrite_r+0x464>
    70ec:	300b883a 	mov	r5,r6
    70f0:	a809883a 	mov	r4,r21
    70f4:	0001b980 	call	1b98 <_malloc_r>
    70f8:	102f883a 	mov	r23,r2
    70fc:	10002926 	beq	r2,zero,71a4 <__sfvwrite_r+0x4ac>
    7100:	81400417 	ldw	r5,16(r16)
    7104:	b00d883a 	mov	r6,r22
    7108:	1009883a 	mov	r4,r2
    710c:	00076b80 	call	76b8 <memcpy>
    7110:	8080030b 	ldhu	r2,12(r16)
    7114:	00fedfc4 	movi	r3,-1153
    7118:	10c4703a 	and	r2,r2,r3
    711c:	10802014 	ori	r2,r2,128
    7120:	8080030d 	sth	r2,12(r16)
    7124:	bd89883a 	add	r4,r23,r22
    7128:	9d8fc83a 	sub	r7,r19,r22
    712c:	85c00415 	stw	r23,16(r16)
    7130:	84c00515 	stw	r19,20(r16)
    7134:	81000015 	stw	r4,0(r16)
    7138:	9027883a 	mov	r19,r18
    713c:	81c00215 	stw	r7,8(r16)
    7140:	902f883a 	mov	r23,r18
    7144:	003f3b06 	br	6e34 <__alt_data_end+0xf8006e34>
    7148:	800b883a 	mov	r5,r16
    714c:	a809883a 	mov	r4,r21
    7150:	00064980 	call	6498 <_fflush_r>
    7154:	103fb926 	beq	r2,zero,703c <__alt_data_end+0xf800703c>
    7158:	003f6506 	br	6ef0 <__alt_data_end+0xf8006ef0>
    715c:	a809883a 	mov	r4,r21
    7160:	0008a800 	call	8a80 <_realloc_r>
    7164:	102f883a 	mov	r23,r2
    7168:	103fee1e 	bne	r2,zero,7124 <__alt_data_end+0xf8007124>
    716c:	81400417 	ldw	r5,16(r16)
    7170:	a809883a 	mov	r4,r21
    7174:	00069e80 	call	69e8 <_free_r>
    7178:	8080030b 	ldhu	r2,12(r16)
    717c:	00ffdfc4 	movi	r3,-129
    7180:	1884703a 	and	r2,r3,r2
    7184:	00c00304 	movi	r3,12
    7188:	a8c00015 	stw	r3,0(r21)
    718c:	003f5906 	br	6ef4 <__alt_data_end+0xf8006ef4>
    7190:	94c00044 	addi	r19,r18,1
    7194:	02000044 	movi	r8,1
    7198:	003f6006 	br	6f1c <__alt_data_end+0xf8006f1c>
    719c:	00bfffc4 	movi	r2,-1
    71a0:	003f0306 	br	6db0 <__alt_data_end+0xf8006db0>
    71a4:	00800304 	movi	r2,12
    71a8:	a8800015 	stw	r2,0(r21)
    71ac:	8080030b 	ldhu	r2,12(r16)
    71b0:	003f5006 	br	6ef4 <__alt_data_end+0xf8006ef4>

000071b4 <_fwalk>:
    71b4:	defff704 	addi	sp,sp,-36
    71b8:	dd000415 	stw	r20,16(sp)
    71bc:	dfc00815 	stw	ra,32(sp)
    71c0:	ddc00715 	stw	r23,28(sp)
    71c4:	dd800615 	stw	r22,24(sp)
    71c8:	dd400515 	stw	r21,20(sp)
    71cc:	dcc00315 	stw	r19,12(sp)
    71d0:	dc800215 	stw	r18,8(sp)
    71d4:	dc400115 	stw	r17,4(sp)
    71d8:	dc000015 	stw	r16,0(sp)
    71dc:	2500b804 	addi	r20,r4,736
    71e0:	a0002326 	beq	r20,zero,7270 <_fwalk+0xbc>
    71e4:	282b883a 	mov	r21,r5
    71e8:	002f883a 	mov	r23,zero
    71ec:	05800044 	movi	r22,1
    71f0:	04ffffc4 	movi	r19,-1
    71f4:	a4400117 	ldw	r17,4(r20)
    71f8:	a4800217 	ldw	r18,8(r20)
    71fc:	8c7fffc4 	addi	r17,r17,-1
    7200:	88000d16 	blt	r17,zero,7238 <_fwalk+0x84>
    7204:	94000304 	addi	r16,r18,12
    7208:	94800384 	addi	r18,r18,14
    720c:	8080000b 	ldhu	r2,0(r16)
    7210:	8c7fffc4 	addi	r17,r17,-1
    7214:	813ffd04 	addi	r4,r16,-12
    7218:	b080042e 	bgeu	r22,r2,722c <_fwalk+0x78>
    721c:	9080000f 	ldh	r2,0(r18)
    7220:	14c00226 	beq	r2,r19,722c <_fwalk+0x78>
    7224:	a83ee83a 	callr	r21
    7228:	b8aeb03a 	or	r23,r23,r2
    722c:	84001a04 	addi	r16,r16,104
    7230:	94801a04 	addi	r18,r18,104
    7234:	8cfff51e 	bne	r17,r19,720c <__alt_data_end+0xf800720c>
    7238:	a5000017 	ldw	r20,0(r20)
    723c:	a03fed1e 	bne	r20,zero,71f4 <__alt_data_end+0xf80071f4>
    7240:	b805883a 	mov	r2,r23
    7244:	dfc00817 	ldw	ra,32(sp)
    7248:	ddc00717 	ldw	r23,28(sp)
    724c:	dd800617 	ldw	r22,24(sp)
    7250:	dd400517 	ldw	r21,20(sp)
    7254:	dd000417 	ldw	r20,16(sp)
    7258:	dcc00317 	ldw	r19,12(sp)
    725c:	dc800217 	ldw	r18,8(sp)
    7260:	dc400117 	ldw	r17,4(sp)
    7264:	dc000017 	ldw	r16,0(sp)
    7268:	dec00904 	addi	sp,sp,36
    726c:	f800283a 	ret
    7270:	002f883a 	mov	r23,zero
    7274:	003ff206 	br	7240 <__alt_data_end+0xf8007240>

00007278 <_fwalk_reent>:
    7278:	defff704 	addi	sp,sp,-36
    727c:	dd000415 	stw	r20,16(sp)
    7280:	dfc00815 	stw	ra,32(sp)
    7284:	ddc00715 	stw	r23,28(sp)
    7288:	dd800615 	stw	r22,24(sp)
    728c:	dd400515 	stw	r21,20(sp)
    7290:	dcc00315 	stw	r19,12(sp)
    7294:	dc800215 	stw	r18,8(sp)
    7298:	dc400115 	stw	r17,4(sp)
    729c:	dc000015 	stw	r16,0(sp)
    72a0:	2500b804 	addi	r20,r4,736
    72a4:	a0002326 	beq	r20,zero,7334 <_fwalk_reent+0xbc>
    72a8:	282b883a 	mov	r21,r5
    72ac:	2027883a 	mov	r19,r4
    72b0:	002f883a 	mov	r23,zero
    72b4:	05800044 	movi	r22,1
    72b8:	04bfffc4 	movi	r18,-1
    72bc:	a4400117 	ldw	r17,4(r20)
    72c0:	a4000217 	ldw	r16,8(r20)
    72c4:	8c7fffc4 	addi	r17,r17,-1
    72c8:	88000c16 	blt	r17,zero,72fc <_fwalk_reent+0x84>
    72cc:	84000304 	addi	r16,r16,12
    72d0:	8080000b 	ldhu	r2,0(r16)
    72d4:	8c7fffc4 	addi	r17,r17,-1
    72d8:	817ffd04 	addi	r5,r16,-12
    72dc:	b080052e 	bgeu	r22,r2,72f4 <_fwalk_reent+0x7c>
    72e0:	8080008f 	ldh	r2,2(r16)
    72e4:	9809883a 	mov	r4,r19
    72e8:	14800226 	beq	r2,r18,72f4 <_fwalk_reent+0x7c>
    72ec:	a83ee83a 	callr	r21
    72f0:	b8aeb03a 	or	r23,r23,r2
    72f4:	84001a04 	addi	r16,r16,104
    72f8:	8cbff51e 	bne	r17,r18,72d0 <__alt_data_end+0xf80072d0>
    72fc:	a5000017 	ldw	r20,0(r20)
    7300:	a03fee1e 	bne	r20,zero,72bc <__alt_data_end+0xf80072bc>
    7304:	b805883a 	mov	r2,r23
    7308:	dfc00817 	ldw	ra,32(sp)
    730c:	ddc00717 	ldw	r23,28(sp)
    7310:	dd800617 	ldw	r22,24(sp)
    7314:	dd400517 	ldw	r21,20(sp)
    7318:	dd000417 	ldw	r20,16(sp)
    731c:	dcc00317 	ldw	r19,12(sp)
    7320:	dc800217 	ldw	r18,8(sp)
    7324:	dc400117 	ldw	r17,4(sp)
    7328:	dc000017 	ldw	r16,0(sp)
    732c:	dec00904 	addi	sp,sp,36
    7330:	f800283a 	ret
    7334:	002f883a 	mov	r23,zero
    7338:	003ff206 	br	7304 <__alt_data_end+0xf8007304>

0000733c <_setlocale_r>:
    733c:	30001b26 	beq	r6,zero,73ac <_setlocale_r+0x70>
    7340:	01400074 	movhi	r5,1
    7344:	defffe04 	addi	sp,sp,-8
    7348:	29480f04 	addi	r5,r5,8252
    734c:	3009883a 	mov	r4,r6
    7350:	dc000015 	stw	r16,0(sp)
    7354:	dfc00115 	stw	ra,4(sp)
    7358:	3021883a 	mov	r16,r6
    735c:	00091940 	call	9194 <strcmp>
    7360:	1000061e 	bne	r2,zero,737c <_setlocale_r+0x40>
    7364:	00800074 	movhi	r2,1
    7368:	10880e04 	addi	r2,r2,8248
    736c:	dfc00117 	ldw	ra,4(sp)
    7370:	dc000017 	ldw	r16,0(sp)
    7374:	dec00204 	addi	sp,sp,8
    7378:	f800283a 	ret
    737c:	01400074 	movhi	r5,1
    7380:	29480e04 	addi	r5,r5,8248
    7384:	8009883a 	mov	r4,r16
    7388:	00091940 	call	9194 <strcmp>
    738c:	103ff526 	beq	r2,zero,7364 <__alt_data_end+0xf8007364>
    7390:	01400074 	movhi	r5,1
    7394:	2947f904 	addi	r5,r5,8164
    7398:	8009883a 	mov	r4,r16
    739c:	00091940 	call	9194 <strcmp>
    73a0:	103ff026 	beq	r2,zero,7364 <__alt_data_end+0xf8007364>
    73a4:	0005883a 	mov	r2,zero
    73a8:	003ff006 	br	736c <__alt_data_end+0xf800736c>
    73ac:	00800074 	movhi	r2,1
    73b0:	10880e04 	addi	r2,r2,8248
    73b4:	f800283a 	ret

000073b8 <__locale_charset>:
    73b8:	00800074 	movhi	r2,1
    73bc:	108bd104 	addi	r2,r2,12100
    73c0:	f800283a 	ret

000073c4 <__locale_mb_cur_max>:
    73c4:	00800074 	movhi	r2,1
    73c8:	1090b504 	addi	r2,r2,17108
    73cc:	10800017 	ldw	r2,0(r2)
    73d0:	f800283a 	ret

000073d4 <__locale_msgcharset>:
    73d4:	00800074 	movhi	r2,1
    73d8:	108bc904 	addi	r2,r2,12068
    73dc:	f800283a 	ret

000073e0 <__locale_cjk_lang>:
    73e0:	0005883a 	mov	r2,zero
    73e4:	f800283a 	ret

000073e8 <_localeconv_r>:
    73e8:	00800074 	movhi	r2,1
    73ec:	108bd904 	addi	r2,r2,12132
    73f0:	f800283a 	ret

000073f4 <setlocale>:
    73f4:	00800074 	movhi	r2,1
    73f8:	1090b404 	addi	r2,r2,17104
    73fc:	280d883a 	mov	r6,r5
    7400:	200b883a 	mov	r5,r4
    7404:	11000017 	ldw	r4,0(r2)
    7408:	000733c1 	jmpi	733c <_setlocale_r>

0000740c <localeconv>:
    740c:	00800074 	movhi	r2,1
    7410:	108bd904 	addi	r2,r2,12132
    7414:	f800283a 	ret

00007418 <__smakebuf_r>:
    7418:	2880030b 	ldhu	r2,12(r5)
    741c:	10c0008c 	andi	r3,r2,2
    7420:	1800411e 	bne	r3,zero,7528 <__smakebuf_r+0x110>
    7424:	deffec04 	addi	sp,sp,-80
    7428:	dc000f15 	stw	r16,60(sp)
    742c:	2821883a 	mov	r16,r5
    7430:	2940038f 	ldh	r5,14(r5)
    7434:	dc401015 	stw	r17,64(sp)
    7438:	dfc01315 	stw	ra,76(sp)
    743c:	dcc01215 	stw	r19,72(sp)
    7440:	dc801115 	stw	r18,68(sp)
    7444:	2023883a 	mov	r17,r4
    7448:	28001c16 	blt	r5,zero,74bc <__smakebuf_r+0xa4>
    744c:	d80d883a 	mov	r6,sp
    7450:	000ad3c0 	call	ad3c <_fstat_r>
    7454:	10001816 	blt	r2,zero,74b8 <__smakebuf_r+0xa0>
    7458:	d8800117 	ldw	r2,4(sp)
    745c:	00e00014 	movui	r3,32768
    7460:	10bc000c 	andi	r2,r2,61440
    7464:	14c80020 	cmpeqi	r19,r2,8192
    7468:	10c03726 	beq	r2,r3,7548 <__smakebuf_r+0x130>
    746c:	80c0030b 	ldhu	r3,12(r16)
    7470:	18c20014 	ori	r3,r3,2048
    7474:	80c0030d 	sth	r3,12(r16)
    7478:	00c80004 	movi	r3,8192
    747c:	10c0521e 	bne	r2,r3,75c8 <__smakebuf_r+0x1b0>
    7480:	8140038f 	ldh	r5,14(r16)
    7484:	8809883a 	mov	r4,r17
    7488:	000ad980 	call	ad98 <_isatty_r>
    748c:	10004c26 	beq	r2,zero,75c0 <__smakebuf_r+0x1a8>
    7490:	8080030b 	ldhu	r2,12(r16)
    7494:	80c010c4 	addi	r3,r16,67
    7498:	80c00015 	stw	r3,0(r16)
    749c:	10800054 	ori	r2,r2,1
    74a0:	8080030d 	sth	r2,12(r16)
    74a4:	00800044 	movi	r2,1
    74a8:	80c00415 	stw	r3,16(r16)
    74ac:	80800515 	stw	r2,20(r16)
    74b0:	04810004 	movi	r18,1024
    74b4:	00000706 	br	74d4 <__smakebuf_r+0xbc>
    74b8:	8080030b 	ldhu	r2,12(r16)
    74bc:	10c0200c 	andi	r3,r2,128
    74c0:	18001f1e 	bne	r3,zero,7540 <__smakebuf_r+0x128>
    74c4:	04810004 	movi	r18,1024
    74c8:	10820014 	ori	r2,r2,2048
    74cc:	8080030d 	sth	r2,12(r16)
    74d0:	0027883a 	mov	r19,zero
    74d4:	900b883a 	mov	r5,r18
    74d8:	8809883a 	mov	r4,r17
    74dc:	0001b980 	call	1b98 <_malloc_r>
    74e0:	10002c26 	beq	r2,zero,7594 <__smakebuf_r+0x17c>
    74e4:	80c0030b 	ldhu	r3,12(r16)
    74e8:	01000034 	movhi	r4,0
    74ec:	21194b04 	addi	r4,r4,25900
    74f0:	89000f15 	stw	r4,60(r17)
    74f4:	18c02014 	ori	r3,r3,128
    74f8:	80c0030d 	sth	r3,12(r16)
    74fc:	80800015 	stw	r2,0(r16)
    7500:	80800415 	stw	r2,16(r16)
    7504:	84800515 	stw	r18,20(r16)
    7508:	98001a1e 	bne	r19,zero,7574 <__smakebuf_r+0x15c>
    750c:	dfc01317 	ldw	ra,76(sp)
    7510:	dcc01217 	ldw	r19,72(sp)
    7514:	dc801117 	ldw	r18,68(sp)
    7518:	dc401017 	ldw	r17,64(sp)
    751c:	dc000f17 	ldw	r16,60(sp)
    7520:	dec01404 	addi	sp,sp,80
    7524:	f800283a 	ret
    7528:	288010c4 	addi	r2,r5,67
    752c:	28800015 	stw	r2,0(r5)
    7530:	28800415 	stw	r2,16(r5)
    7534:	00800044 	movi	r2,1
    7538:	28800515 	stw	r2,20(r5)
    753c:	f800283a 	ret
    7540:	04801004 	movi	r18,64
    7544:	003fe006 	br	74c8 <__alt_data_end+0xf80074c8>
    7548:	81000a17 	ldw	r4,40(r16)
    754c:	00c00074 	movhi	r3,1
    7550:	18e44c04 	addi	r3,r3,-28368
    7554:	20ffc51e 	bne	r4,r3,746c <__alt_data_end+0xf800746c>
    7558:	8080030b 	ldhu	r2,12(r16)
    755c:	04810004 	movi	r18,1024
    7560:	84801315 	stw	r18,76(r16)
    7564:	1484b03a 	or	r2,r2,r18
    7568:	8080030d 	sth	r2,12(r16)
    756c:	0027883a 	mov	r19,zero
    7570:	003fd806 	br	74d4 <__alt_data_end+0xf80074d4>
    7574:	8140038f 	ldh	r5,14(r16)
    7578:	8809883a 	mov	r4,r17
    757c:	000ad980 	call	ad98 <_isatty_r>
    7580:	103fe226 	beq	r2,zero,750c <__alt_data_end+0xf800750c>
    7584:	8080030b 	ldhu	r2,12(r16)
    7588:	10800054 	ori	r2,r2,1
    758c:	8080030d 	sth	r2,12(r16)
    7590:	003fde06 	br	750c <__alt_data_end+0xf800750c>
    7594:	8080030b 	ldhu	r2,12(r16)
    7598:	10c0800c 	andi	r3,r2,512
    759c:	183fdb1e 	bne	r3,zero,750c <__alt_data_end+0xf800750c>
    75a0:	10800094 	ori	r2,r2,2
    75a4:	80c010c4 	addi	r3,r16,67
    75a8:	8080030d 	sth	r2,12(r16)
    75ac:	00800044 	movi	r2,1
    75b0:	80c00015 	stw	r3,0(r16)
    75b4:	80c00415 	stw	r3,16(r16)
    75b8:	80800515 	stw	r2,20(r16)
    75bc:	003fd306 	br	750c <__alt_data_end+0xf800750c>
    75c0:	04810004 	movi	r18,1024
    75c4:	003fc306 	br	74d4 <__alt_data_end+0xf80074d4>
    75c8:	0027883a 	mov	r19,zero
    75cc:	04810004 	movi	r18,1024
    75d0:	003fc006 	br	74d4 <__alt_data_end+0xf80074d4>

000075d4 <memchr>:
    75d4:	208000cc 	andi	r2,r4,3
    75d8:	280f883a 	mov	r7,r5
    75dc:	10003426 	beq	r2,zero,76b0 <memchr+0xdc>
    75e0:	30bfffc4 	addi	r2,r6,-1
    75e4:	30001a26 	beq	r6,zero,7650 <memchr+0x7c>
    75e8:	20c00003 	ldbu	r3,0(r4)
    75ec:	29803fcc 	andi	r6,r5,255
    75f0:	30c0051e 	bne	r6,r3,7608 <memchr+0x34>
    75f4:	00001806 	br	7658 <memchr+0x84>
    75f8:	10001526 	beq	r2,zero,7650 <memchr+0x7c>
    75fc:	20c00003 	ldbu	r3,0(r4)
    7600:	10bfffc4 	addi	r2,r2,-1
    7604:	30c01426 	beq	r6,r3,7658 <memchr+0x84>
    7608:	21000044 	addi	r4,r4,1
    760c:	20c000cc 	andi	r3,r4,3
    7610:	183ff91e 	bne	r3,zero,75f8 <__alt_data_end+0xf80075f8>
    7614:	020000c4 	movi	r8,3
    7618:	40801136 	bltu	r8,r2,7660 <memchr+0x8c>
    761c:	10000c26 	beq	r2,zero,7650 <memchr+0x7c>
    7620:	20c00003 	ldbu	r3,0(r4)
    7624:	29403fcc 	andi	r5,r5,255
    7628:	28c00b26 	beq	r5,r3,7658 <memchr+0x84>
    762c:	20c00044 	addi	r3,r4,1
    7630:	39803fcc 	andi	r6,r7,255
    7634:	2089883a 	add	r4,r4,r2
    7638:	00000306 	br	7648 <memchr+0x74>
    763c:	18c00044 	addi	r3,r3,1
    7640:	197fffc3 	ldbu	r5,-1(r3)
    7644:	31400526 	beq	r6,r5,765c <memchr+0x88>
    7648:	1805883a 	mov	r2,r3
    764c:	20fffb1e 	bne	r4,r3,763c <__alt_data_end+0xf800763c>
    7650:	0005883a 	mov	r2,zero
    7654:	f800283a 	ret
    7658:	2005883a 	mov	r2,r4
    765c:	f800283a 	ret
    7660:	28c03fcc 	andi	r3,r5,255
    7664:	1812923a 	slli	r9,r3,8
    7668:	02ffbff4 	movhi	r11,65279
    766c:	02a02074 	movhi	r10,32897
    7670:	48d2b03a 	or	r9,r9,r3
    7674:	4806943a 	slli	r3,r9,16
    7678:	5affbfc4 	addi	r11,r11,-257
    767c:	52a02004 	addi	r10,r10,-32640
    7680:	48d2b03a 	or	r9,r9,r3
    7684:	20c00017 	ldw	r3,0(r4)
    7688:	48c6f03a 	xor	r3,r9,r3
    768c:	1acd883a 	add	r6,r3,r11
    7690:	00c6303a 	nor	r3,zero,r3
    7694:	30c6703a 	and	r3,r6,r3
    7698:	1a86703a 	and	r3,r3,r10
    769c:	183fe01e 	bne	r3,zero,7620 <__alt_data_end+0xf8007620>
    76a0:	10bfff04 	addi	r2,r2,-4
    76a4:	21000104 	addi	r4,r4,4
    76a8:	40bff636 	bltu	r8,r2,7684 <__alt_data_end+0xf8007684>
    76ac:	003fdb06 	br	761c <__alt_data_end+0xf800761c>
    76b0:	3005883a 	mov	r2,r6
    76b4:	003fd706 	br	7614 <__alt_data_end+0xf8007614>

000076b8 <memcpy>:
    76b8:	defffd04 	addi	sp,sp,-12
    76bc:	dfc00215 	stw	ra,8(sp)
    76c0:	dc400115 	stw	r17,4(sp)
    76c4:	dc000015 	stw	r16,0(sp)
    76c8:	00c003c4 	movi	r3,15
    76cc:	2005883a 	mov	r2,r4
    76d0:	1980452e 	bgeu	r3,r6,77e8 <memcpy+0x130>
    76d4:	2906b03a 	or	r3,r5,r4
    76d8:	18c000cc 	andi	r3,r3,3
    76dc:	1800441e 	bne	r3,zero,77f0 <memcpy+0x138>
    76e0:	347ffc04 	addi	r17,r6,-16
    76e4:	8822d13a 	srli	r17,r17,4
    76e8:	28c00104 	addi	r3,r5,4
    76ec:	23400104 	addi	r13,r4,4
    76f0:	8820913a 	slli	r16,r17,4
    76f4:	2b000204 	addi	r12,r5,8
    76f8:	22c00204 	addi	r11,r4,8
    76fc:	84000504 	addi	r16,r16,20
    7700:	2a800304 	addi	r10,r5,12
    7704:	22400304 	addi	r9,r4,12
    7708:	2c21883a 	add	r16,r5,r16
    770c:	2811883a 	mov	r8,r5
    7710:	200f883a 	mov	r7,r4
    7714:	41000017 	ldw	r4,0(r8)
    7718:	1fc00017 	ldw	ra,0(r3)
    771c:	63c00017 	ldw	r15,0(r12)
    7720:	39000015 	stw	r4,0(r7)
    7724:	53800017 	ldw	r14,0(r10)
    7728:	6fc00015 	stw	ra,0(r13)
    772c:	5bc00015 	stw	r15,0(r11)
    7730:	4b800015 	stw	r14,0(r9)
    7734:	18c00404 	addi	r3,r3,16
    7738:	39c00404 	addi	r7,r7,16
    773c:	42000404 	addi	r8,r8,16
    7740:	6b400404 	addi	r13,r13,16
    7744:	63000404 	addi	r12,r12,16
    7748:	5ac00404 	addi	r11,r11,16
    774c:	52800404 	addi	r10,r10,16
    7750:	4a400404 	addi	r9,r9,16
    7754:	1c3fef1e 	bne	r3,r16,7714 <__alt_data_end+0xf8007714>
    7758:	89c00044 	addi	r7,r17,1
    775c:	380e913a 	slli	r7,r7,4
    7760:	310003cc 	andi	r4,r6,15
    7764:	02c000c4 	movi	r11,3
    7768:	11c7883a 	add	r3,r2,r7
    776c:	29cb883a 	add	r5,r5,r7
    7770:	5900212e 	bgeu	r11,r4,77f8 <memcpy+0x140>
    7774:	1813883a 	mov	r9,r3
    7778:	2811883a 	mov	r8,r5
    777c:	200f883a 	mov	r7,r4
    7780:	42800017 	ldw	r10,0(r8)
    7784:	4a400104 	addi	r9,r9,4
    7788:	39ffff04 	addi	r7,r7,-4
    778c:	4abfff15 	stw	r10,-4(r9)
    7790:	42000104 	addi	r8,r8,4
    7794:	59fffa36 	bltu	r11,r7,7780 <__alt_data_end+0xf8007780>
    7798:	213fff04 	addi	r4,r4,-4
    779c:	2008d0ba 	srli	r4,r4,2
    77a0:	318000cc 	andi	r6,r6,3
    77a4:	21000044 	addi	r4,r4,1
    77a8:	2109883a 	add	r4,r4,r4
    77ac:	2109883a 	add	r4,r4,r4
    77b0:	1907883a 	add	r3,r3,r4
    77b4:	290b883a 	add	r5,r5,r4
    77b8:	30000626 	beq	r6,zero,77d4 <memcpy+0x11c>
    77bc:	198d883a 	add	r6,r3,r6
    77c0:	29c00003 	ldbu	r7,0(r5)
    77c4:	18c00044 	addi	r3,r3,1
    77c8:	29400044 	addi	r5,r5,1
    77cc:	19ffffc5 	stb	r7,-1(r3)
    77d0:	19bffb1e 	bne	r3,r6,77c0 <__alt_data_end+0xf80077c0>
    77d4:	dfc00217 	ldw	ra,8(sp)
    77d8:	dc400117 	ldw	r17,4(sp)
    77dc:	dc000017 	ldw	r16,0(sp)
    77e0:	dec00304 	addi	sp,sp,12
    77e4:	f800283a 	ret
    77e8:	2007883a 	mov	r3,r4
    77ec:	003ff206 	br	77b8 <__alt_data_end+0xf80077b8>
    77f0:	2007883a 	mov	r3,r4
    77f4:	003ff106 	br	77bc <__alt_data_end+0xf80077bc>
    77f8:	200d883a 	mov	r6,r4
    77fc:	003fee06 	br	77b8 <__alt_data_end+0xf80077b8>

00007800 <memmove>:
    7800:	2005883a 	mov	r2,r4
    7804:	29000b2e 	bgeu	r5,r4,7834 <memmove+0x34>
    7808:	298f883a 	add	r7,r5,r6
    780c:	21c0092e 	bgeu	r4,r7,7834 <memmove+0x34>
    7810:	2187883a 	add	r3,r4,r6
    7814:	198bc83a 	sub	r5,r3,r6
    7818:	30004826 	beq	r6,zero,793c <memmove+0x13c>
    781c:	39ffffc4 	addi	r7,r7,-1
    7820:	39000003 	ldbu	r4,0(r7)
    7824:	18ffffc4 	addi	r3,r3,-1
    7828:	19000005 	stb	r4,0(r3)
    782c:	28fffb1e 	bne	r5,r3,781c <__alt_data_end+0xf800781c>
    7830:	f800283a 	ret
    7834:	00c003c4 	movi	r3,15
    7838:	1980412e 	bgeu	r3,r6,7940 <memmove+0x140>
    783c:	2886b03a 	or	r3,r5,r2
    7840:	18c000cc 	andi	r3,r3,3
    7844:	1800401e 	bne	r3,zero,7948 <memmove+0x148>
    7848:	33fffc04 	addi	r15,r6,-16
    784c:	781ed13a 	srli	r15,r15,4
    7850:	28c00104 	addi	r3,r5,4
    7854:	13400104 	addi	r13,r2,4
    7858:	781c913a 	slli	r14,r15,4
    785c:	2b000204 	addi	r12,r5,8
    7860:	12c00204 	addi	r11,r2,8
    7864:	73800504 	addi	r14,r14,20
    7868:	2a800304 	addi	r10,r5,12
    786c:	12400304 	addi	r9,r2,12
    7870:	2b9d883a 	add	r14,r5,r14
    7874:	2811883a 	mov	r8,r5
    7878:	100f883a 	mov	r7,r2
    787c:	41000017 	ldw	r4,0(r8)
    7880:	39c00404 	addi	r7,r7,16
    7884:	18c00404 	addi	r3,r3,16
    7888:	393ffc15 	stw	r4,-16(r7)
    788c:	193ffc17 	ldw	r4,-16(r3)
    7890:	6b400404 	addi	r13,r13,16
    7894:	5ac00404 	addi	r11,r11,16
    7898:	693ffc15 	stw	r4,-16(r13)
    789c:	61000017 	ldw	r4,0(r12)
    78a0:	4a400404 	addi	r9,r9,16
    78a4:	42000404 	addi	r8,r8,16
    78a8:	593ffc15 	stw	r4,-16(r11)
    78ac:	51000017 	ldw	r4,0(r10)
    78b0:	63000404 	addi	r12,r12,16
    78b4:	52800404 	addi	r10,r10,16
    78b8:	493ffc15 	stw	r4,-16(r9)
    78bc:	1bbfef1e 	bne	r3,r14,787c <__alt_data_end+0xf800787c>
    78c0:	79000044 	addi	r4,r15,1
    78c4:	2008913a 	slli	r4,r4,4
    78c8:	328003cc 	andi	r10,r6,15
    78cc:	02c000c4 	movi	r11,3
    78d0:	1107883a 	add	r3,r2,r4
    78d4:	290b883a 	add	r5,r5,r4
    78d8:	5a801e2e 	bgeu	r11,r10,7954 <memmove+0x154>
    78dc:	1813883a 	mov	r9,r3
    78e0:	2811883a 	mov	r8,r5
    78e4:	500f883a 	mov	r7,r10
    78e8:	41000017 	ldw	r4,0(r8)
    78ec:	4a400104 	addi	r9,r9,4
    78f0:	39ffff04 	addi	r7,r7,-4
    78f4:	493fff15 	stw	r4,-4(r9)
    78f8:	42000104 	addi	r8,r8,4
    78fc:	59fffa36 	bltu	r11,r7,78e8 <__alt_data_end+0xf80078e8>
    7900:	513fff04 	addi	r4,r10,-4
    7904:	2008d0ba 	srli	r4,r4,2
    7908:	318000cc 	andi	r6,r6,3
    790c:	21000044 	addi	r4,r4,1
    7910:	2109883a 	add	r4,r4,r4
    7914:	2109883a 	add	r4,r4,r4
    7918:	1907883a 	add	r3,r3,r4
    791c:	290b883a 	add	r5,r5,r4
    7920:	30000b26 	beq	r6,zero,7950 <memmove+0x150>
    7924:	198d883a 	add	r6,r3,r6
    7928:	29c00003 	ldbu	r7,0(r5)
    792c:	18c00044 	addi	r3,r3,1
    7930:	29400044 	addi	r5,r5,1
    7934:	19ffffc5 	stb	r7,-1(r3)
    7938:	19bffb1e 	bne	r3,r6,7928 <__alt_data_end+0xf8007928>
    793c:	f800283a 	ret
    7940:	1007883a 	mov	r3,r2
    7944:	003ff606 	br	7920 <__alt_data_end+0xf8007920>
    7948:	1007883a 	mov	r3,r2
    794c:	003ff506 	br	7924 <__alt_data_end+0xf8007924>
    7950:	f800283a 	ret
    7954:	500d883a 	mov	r6,r10
    7958:	003ff106 	br	7920 <__alt_data_end+0xf8007920>

0000795c <memset>:
    795c:	20c000cc 	andi	r3,r4,3
    7960:	2005883a 	mov	r2,r4
    7964:	18004426 	beq	r3,zero,7a78 <memset+0x11c>
    7968:	31ffffc4 	addi	r7,r6,-1
    796c:	30004026 	beq	r6,zero,7a70 <memset+0x114>
    7970:	2813883a 	mov	r9,r5
    7974:	200d883a 	mov	r6,r4
    7978:	2007883a 	mov	r3,r4
    797c:	00000406 	br	7990 <memset+0x34>
    7980:	3a3fffc4 	addi	r8,r7,-1
    7984:	31800044 	addi	r6,r6,1
    7988:	38003926 	beq	r7,zero,7a70 <memset+0x114>
    798c:	400f883a 	mov	r7,r8
    7990:	18c00044 	addi	r3,r3,1
    7994:	32400005 	stb	r9,0(r6)
    7998:	1a0000cc 	andi	r8,r3,3
    799c:	403ff81e 	bne	r8,zero,7980 <__alt_data_end+0xf8007980>
    79a0:	010000c4 	movi	r4,3
    79a4:	21c02d2e 	bgeu	r4,r7,7a5c <memset+0x100>
    79a8:	29003fcc 	andi	r4,r5,255
    79ac:	200c923a 	slli	r6,r4,8
    79b0:	3108b03a 	or	r4,r6,r4
    79b4:	200c943a 	slli	r6,r4,16
    79b8:	218cb03a 	or	r6,r4,r6
    79bc:	010003c4 	movi	r4,15
    79c0:	21c0182e 	bgeu	r4,r7,7a24 <memset+0xc8>
    79c4:	3b3ffc04 	addi	r12,r7,-16
    79c8:	6018d13a 	srli	r12,r12,4
    79cc:	1a000104 	addi	r8,r3,4
    79d0:	1ac00204 	addi	r11,r3,8
    79d4:	6008913a 	slli	r4,r12,4
    79d8:	1a800304 	addi	r10,r3,12
    79dc:	1813883a 	mov	r9,r3
    79e0:	21000504 	addi	r4,r4,20
    79e4:	1909883a 	add	r4,r3,r4
    79e8:	49800015 	stw	r6,0(r9)
    79ec:	41800015 	stw	r6,0(r8)
    79f0:	59800015 	stw	r6,0(r11)
    79f4:	51800015 	stw	r6,0(r10)
    79f8:	42000404 	addi	r8,r8,16
    79fc:	4a400404 	addi	r9,r9,16
    7a00:	5ac00404 	addi	r11,r11,16
    7a04:	52800404 	addi	r10,r10,16
    7a08:	413ff71e 	bne	r8,r4,79e8 <__alt_data_end+0xf80079e8>
    7a0c:	63000044 	addi	r12,r12,1
    7a10:	6018913a 	slli	r12,r12,4
    7a14:	39c003cc 	andi	r7,r7,15
    7a18:	010000c4 	movi	r4,3
    7a1c:	1b07883a 	add	r3,r3,r12
    7a20:	21c00e2e 	bgeu	r4,r7,7a5c <memset+0x100>
    7a24:	1813883a 	mov	r9,r3
    7a28:	3811883a 	mov	r8,r7
    7a2c:	010000c4 	movi	r4,3
    7a30:	49800015 	stw	r6,0(r9)
    7a34:	423fff04 	addi	r8,r8,-4
    7a38:	4a400104 	addi	r9,r9,4
    7a3c:	223ffc36 	bltu	r4,r8,7a30 <__alt_data_end+0xf8007a30>
    7a40:	393fff04 	addi	r4,r7,-4
    7a44:	2008d0ba 	srli	r4,r4,2
    7a48:	39c000cc 	andi	r7,r7,3
    7a4c:	21000044 	addi	r4,r4,1
    7a50:	2109883a 	add	r4,r4,r4
    7a54:	2109883a 	add	r4,r4,r4
    7a58:	1907883a 	add	r3,r3,r4
    7a5c:	38000526 	beq	r7,zero,7a74 <memset+0x118>
    7a60:	19cf883a 	add	r7,r3,r7
    7a64:	19400005 	stb	r5,0(r3)
    7a68:	18c00044 	addi	r3,r3,1
    7a6c:	38fffd1e 	bne	r7,r3,7a64 <__alt_data_end+0xf8007a64>
    7a70:	f800283a 	ret
    7a74:	f800283a 	ret
    7a78:	2007883a 	mov	r3,r4
    7a7c:	300f883a 	mov	r7,r6
    7a80:	003fc706 	br	79a0 <__alt_data_end+0xf80079a0>

00007a84 <_Balloc>:
    7a84:	20801317 	ldw	r2,76(r4)
    7a88:	defffc04 	addi	sp,sp,-16
    7a8c:	dc400115 	stw	r17,4(sp)
    7a90:	dc000015 	stw	r16,0(sp)
    7a94:	dfc00315 	stw	ra,12(sp)
    7a98:	dc800215 	stw	r18,8(sp)
    7a9c:	2023883a 	mov	r17,r4
    7aa0:	2821883a 	mov	r16,r5
    7aa4:	10000f26 	beq	r2,zero,7ae4 <_Balloc+0x60>
    7aa8:	8407883a 	add	r3,r16,r16
    7aac:	18c7883a 	add	r3,r3,r3
    7ab0:	10c7883a 	add	r3,r2,r3
    7ab4:	18800017 	ldw	r2,0(r3)
    7ab8:	10001126 	beq	r2,zero,7b00 <_Balloc+0x7c>
    7abc:	11000017 	ldw	r4,0(r2)
    7ac0:	19000015 	stw	r4,0(r3)
    7ac4:	10000415 	stw	zero,16(r2)
    7ac8:	10000315 	stw	zero,12(r2)
    7acc:	dfc00317 	ldw	ra,12(sp)
    7ad0:	dc800217 	ldw	r18,8(sp)
    7ad4:	dc400117 	ldw	r17,4(sp)
    7ad8:	dc000017 	ldw	r16,0(sp)
    7adc:	dec00404 	addi	sp,sp,16
    7ae0:	f800283a 	ret
    7ae4:	01800844 	movi	r6,33
    7ae8:	01400104 	movi	r5,4
    7aec:	000a96c0 	call	a96c <_calloc_r>
    7af0:	88801315 	stw	r2,76(r17)
    7af4:	103fec1e 	bne	r2,zero,7aa8 <__alt_data_end+0xf8007aa8>
    7af8:	0005883a 	mov	r2,zero
    7afc:	003ff306 	br	7acc <__alt_data_end+0xf8007acc>
    7b00:	01400044 	movi	r5,1
    7b04:	2c24983a 	sll	r18,r5,r16
    7b08:	8809883a 	mov	r4,r17
    7b0c:	91800144 	addi	r6,r18,5
    7b10:	318d883a 	add	r6,r6,r6
    7b14:	318d883a 	add	r6,r6,r6
    7b18:	000a96c0 	call	a96c <_calloc_r>
    7b1c:	103ff626 	beq	r2,zero,7af8 <__alt_data_end+0xf8007af8>
    7b20:	14000115 	stw	r16,4(r2)
    7b24:	14800215 	stw	r18,8(r2)
    7b28:	003fe606 	br	7ac4 <__alt_data_end+0xf8007ac4>

00007b2c <_Bfree>:
    7b2c:	28000826 	beq	r5,zero,7b50 <_Bfree+0x24>
    7b30:	28c00117 	ldw	r3,4(r5)
    7b34:	20801317 	ldw	r2,76(r4)
    7b38:	18c7883a 	add	r3,r3,r3
    7b3c:	18c7883a 	add	r3,r3,r3
    7b40:	10c5883a 	add	r2,r2,r3
    7b44:	10c00017 	ldw	r3,0(r2)
    7b48:	28c00015 	stw	r3,0(r5)
    7b4c:	11400015 	stw	r5,0(r2)
    7b50:	f800283a 	ret

00007b54 <__multadd>:
    7b54:	defffa04 	addi	sp,sp,-24
    7b58:	dc800315 	stw	r18,12(sp)
    7b5c:	dc400215 	stw	r17,8(sp)
    7b60:	dc000115 	stw	r16,4(sp)
    7b64:	2823883a 	mov	r17,r5
    7b68:	2c000417 	ldw	r16,16(r5)
    7b6c:	dfc00515 	stw	ra,20(sp)
    7b70:	dcc00415 	stw	r19,16(sp)
    7b74:	2025883a 	mov	r18,r4
    7b78:	29400504 	addi	r5,r5,20
    7b7c:	0011883a 	mov	r8,zero
    7b80:	28c00017 	ldw	r3,0(r5)
    7b84:	29400104 	addi	r5,r5,4
    7b88:	42000044 	addi	r8,r8,1
    7b8c:	18bfffcc 	andi	r2,r3,65535
    7b90:	1185383a 	mul	r2,r2,r6
    7b94:	1806d43a 	srli	r3,r3,16
    7b98:	11cf883a 	add	r7,r2,r7
    7b9c:	3808d43a 	srli	r4,r7,16
    7ba0:	1987383a 	mul	r3,r3,r6
    7ba4:	38bfffcc 	andi	r2,r7,65535
    7ba8:	1907883a 	add	r3,r3,r4
    7bac:	1808943a 	slli	r4,r3,16
    7bb0:	180ed43a 	srli	r7,r3,16
    7bb4:	2085883a 	add	r2,r4,r2
    7bb8:	28bfff15 	stw	r2,-4(r5)
    7bbc:	443ff016 	blt	r8,r16,7b80 <__alt_data_end+0xf8007b80>
    7bc0:	38000926 	beq	r7,zero,7be8 <__multadd+0x94>
    7bc4:	88800217 	ldw	r2,8(r17)
    7bc8:	80800f0e 	bge	r16,r2,7c08 <__multadd+0xb4>
    7bcc:	80800144 	addi	r2,r16,5
    7bd0:	1085883a 	add	r2,r2,r2
    7bd4:	1085883a 	add	r2,r2,r2
    7bd8:	8885883a 	add	r2,r17,r2
    7bdc:	11c00015 	stw	r7,0(r2)
    7be0:	84000044 	addi	r16,r16,1
    7be4:	8c000415 	stw	r16,16(r17)
    7be8:	8805883a 	mov	r2,r17
    7bec:	dfc00517 	ldw	ra,20(sp)
    7bf0:	dcc00417 	ldw	r19,16(sp)
    7bf4:	dc800317 	ldw	r18,12(sp)
    7bf8:	dc400217 	ldw	r17,8(sp)
    7bfc:	dc000117 	ldw	r16,4(sp)
    7c00:	dec00604 	addi	sp,sp,24
    7c04:	f800283a 	ret
    7c08:	89400117 	ldw	r5,4(r17)
    7c0c:	9009883a 	mov	r4,r18
    7c10:	d9c00015 	stw	r7,0(sp)
    7c14:	29400044 	addi	r5,r5,1
    7c18:	0007a840 	call	7a84 <_Balloc>
    7c1c:	89800417 	ldw	r6,16(r17)
    7c20:	89400304 	addi	r5,r17,12
    7c24:	11000304 	addi	r4,r2,12
    7c28:	31800084 	addi	r6,r6,2
    7c2c:	318d883a 	add	r6,r6,r6
    7c30:	318d883a 	add	r6,r6,r6
    7c34:	1027883a 	mov	r19,r2
    7c38:	00076b80 	call	76b8 <memcpy>
    7c3c:	d9c00017 	ldw	r7,0(sp)
    7c40:	88000a26 	beq	r17,zero,7c6c <__multadd+0x118>
    7c44:	88c00117 	ldw	r3,4(r17)
    7c48:	90801317 	ldw	r2,76(r18)
    7c4c:	18c7883a 	add	r3,r3,r3
    7c50:	18c7883a 	add	r3,r3,r3
    7c54:	10c5883a 	add	r2,r2,r3
    7c58:	10c00017 	ldw	r3,0(r2)
    7c5c:	88c00015 	stw	r3,0(r17)
    7c60:	14400015 	stw	r17,0(r2)
    7c64:	9823883a 	mov	r17,r19
    7c68:	003fd806 	br	7bcc <__alt_data_end+0xf8007bcc>
    7c6c:	9823883a 	mov	r17,r19
    7c70:	003fd606 	br	7bcc <__alt_data_end+0xf8007bcc>

00007c74 <__s2b>:
    7c74:	defff904 	addi	sp,sp,-28
    7c78:	dc400115 	stw	r17,4(sp)
    7c7c:	dc000015 	stw	r16,0(sp)
    7c80:	2023883a 	mov	r17,r4
    7c84:	2821883a 	mov	r16,r5
    7c88:	39000204 	addi	r4,r7,8
    7c8c:	01400244 	movi	r5,9
    7c90:	dcc00315 	stw	r19,12(sp)
    7c94:	dc800215 	stw	r18,8(sp)
    7c98:	dfc00615 	stw	ra,24(sp)
    7c9c:	dd400515 	stw	r21,20(sp)
    7ca0:	dd000415 	stw	r20,16(sp)
    7ca4:	3825883a 	mov	r18,r7
    7ca8:	3027883a 	mov	r19,r6
    7cac:	00019bc0 	call	19bc <__divsi3>
    7cb0:	00c00044 	movi	r3,1
    7cb4:	000b883a 	mov	r5,zero
    7cb8:	1880030e 	bge	r3,r2,7cc8 <__s2b+0x54>
    7cbc:	18c7883a 	add	r3,r3,r3
    7cc0:	29400044 	addi	r5,r5,1
    7cc4:	18bffd16 	blt	r3,r2,7cbc <__alt_data_end+0xf8007cbc>
    7cc8:	8809883a 	mov	r4,r17
    7ccc:	0007a840 	call	7a84 <_Balloc>
    7cd0:	d8c00717 	ldw	r3,28(sp)
    7cd4:	10c00515 	stw	r3,20(r2)
    7cd8:	00c00044 	movi	r3,1
    7cdc:	10c00415 	stw	r3,16(r2)
    7ce0:	00c00244 	movi	r3,9
    7ce4:	1cc0210e 	bge	r3,r19,7d6c <__s2b+0xf8>
    7ce8:	80eb883a 	add	r21,r16,r3
    7cec:	a829883a 	mov	r20,r21
    7cf0:	84e1883a 	add	r16,r16,r19
    7cf4:	a1c00007 	ldb	r7,0(r20)
    7cf8:	01800284 	movi	r6,10
    7cfc:	a5000044 	addi	r20,r20,1
    7d00:	100b883a 	mov	r5,r2
    7d04:	39fff404 	addi	r7,r7,-48
    7d08:	8809883a 	mov	r4,r17
    7d0c:	0007b540 	call	7b54 <__multadd>
    7d10:	a43ff81e 	bne	r20,r16,7cf4 <__alt_data_end+0xf8007cf4>
    7d14:	ace1883a 	add	r16,r21,r19
    7d18:	843ffe04 	addi	r16,r16,-8
    7d1c:	9c800a0e 	bge	r19,r18,7d48 <__s2b+0xd4>
    7d20:	94e5c83a 	sub	r18,r18,r19
    7d24:	84a5883a 	add	r18,r16,r18
    7d28:	81c00007 	ldb	r7,0(r16)
    7d2c:	01800284 	movi	r6,10
    7d30:	84000044 	addi	r16,r16,1
    7d34:	100b883a 	mov	r5,r2
    7d38:	39fff404 	addi	r7,r7,-48
    7d3c:	8809883a 	mov	r4,r17
    7d40:	0007b540 	call	7b54 <__multadd>
    7d44:	84bff81e 	bne	r16,r18,7d28 <__alt_data_end+0xf8007d28>
    7d48:	dfc00617 	ldw	ra,24(sp)
    7d4c:	dd400517 	ldw	r21,20(sp)
    7d50:	dd000417 	ldw	r20,16(sp)
    7d54:	dcc00317 	ldw	r19,12(sp)
    7d58:	dc800217 	ldw	r18,8(sp)
    7d5c:	dc400117 	ldw	r17,4(sp)
    7d60:	dc000017 	ldw	r16,0(sp)
    7d64:	dec00704 	addi	sp,sp,28
    7d68:	f800283a 	ret
    7d6c:	84000284 	addi	r16,r16,10
    7d70:	1827883a 	mov	r19,r3
    7d74:	003fe906 	br	7d1c <__alt_data_end+0xf8007d1c>

00007d78 <__hi0bits>:
    7d78:	20bfffec 	andhi	r2,r4,65535
    7d7c:	1000141e 	bne	r2,zero,7dd0 <__hi0bits+0x58>
    7d80:	2008943a 	slli	r4,r4,16
    7d84:	00800404 	movi	r2,16
    7d88:	20ffc02c 	andhi	r3,r4,65280
    7d8c:	1800021e 	bne	r3,zero,7d98 <__hi0bits+0x20>
    7d90:	2008923a 	slli	r4,r4,8
    7d94:	10800204 	addi	r2,r2,8
    7d98:	20fc002c 	andhi	r3,r4,61440
    7d9c:	1800021e 	bne	r3,zero,7da8 <__hi0bits+0x30>
    7da0:	2008913a 	slli	r4,r4,4
    7da4:	10800104 	addi	r2,r2,4
    7da8:	20f0002c 	andhi	r3,r4,49152
    7dac:	1800031e 	bne	r3,zero,7dbc <__hi0bits+0x44>
    7db0:	2109883a 	add	r4,r4,r4
    7db4:	10800084 	addi	r2,r2,2
    7db8:	2109883a 	add	r4,r4,r4
    7dbc:	20000316 	blt	r4,zero,7dcc <__hi0bits+0x54>
    7dc0:	2110002c 	andhi	r4,r4,16384
    7dc4:	2000041e 	bne	r4,zero,7dd8 <__hi0bits+0x60>
    7dc8:	00800804 	movi	r2,32
    7dcc:	f800283a 	ret
    7dd0:	0005883a 	mov	r2,zero
    7dd4:	003fec06 	br	7d88 <__alt_data_end+0xf8007d88>
    7dd8:	10800044 	addi	r2,r2,1
    7ddc:	f800283a 	ret

00007de0 <__lo0bits>:
    7de0:	20c00017 	ldw	r3,0(r4)
    7de4:	188001cc 	andi	r2,r3,7
    7de8:	10000826 	beq	r2,zero,7e0c <__lo0bits+0x2c>
    7dec:	1880004c 	andi	r2,r3,1
    7df0:	1000211e 	bne	r2,zero,7e78 <__lo0bits+0x98>
    7df4:	1880008c 	andi	r2,r3,2
    7df8:	1000211e 	bne	r2,zero,7e80 <__lo0bits+0xa0>
    7dfc:	1806d0ba 	srli	r3,r3,2
    7e00:	00800084 	movi	r2,2
    7e04:	20c00015 	stw	r3,0(r4)
    7e08:	f800283a 	ret
    7e0c:	18bfffcc 	andi	r2,r3,65535
    7e10:	10001326 	beq	r2,zero,7e60 <__lo0bits+0x80>
    7e14:	0005883a 	mov	r2,zero
    7e18:	19403fcc 	andi	r5,r3,255
    7e1c:	2800021e 	bne	r5,zero,7e28 <__lo0bits+0x48>
    7e20:	1806d23a 	srli	r3,r3,8
    7e24:	10800204 	addi	r2,r2,8
    7e28:	194003cc 	andi	r5,r3,15
    7e2c:	2800021e 	bne	r5,zero,7e38 <__lo0bits+0x58>
    7e30:	1806d13a 	srli	r3,r3,4
    7e34:	10800104 	addi	r2,r2,4
    7e38:	194000cc 	andi	r5,r3,3
    7e3c:	2800021e 	bne	r5,zero,7e48 <__lo0bits+0x68>
    7e40:	1806d0ba 	srli	r3,r3,2
    7e44:	10800084 	addi	r2,r2,2
    7e48:	1940004c 	andi	r5,r3,1
    7e4c:	2800081e 	bne	r5,zero,7e70 <__lo0bits+0x90>
    7e50:	1806d07a 	srli	r3,r3,1
    7e54:	1800051e 	bne	r3,zero,7e6c <__lo0bits+0x8c>
    7e58:	00800804 	movi	r2,32
    7e5c:	f800283a 	ret
    7e60:	1806d43a 	srli	r3,r3,16
    7e64:	00800404 	movi	r2,16
    7e68:	003feb06 	br	7e18 <__alt_data_end+0xf8007e18>
    7e6c:	10800044 	addi	r2,r2,1
    7e70:	20c00015 	stw	r3,0(r4)
    7e74:	f800283a 	ret
    7e78:	0005883a 	mov	r2,zero
    7e7c:	f800283a 	ret
    7e80:	1806d07a 	srli	r3,r3,1
    7e84:	00800044 	movi	r2,1
    7e88:	20c00015 	stw	r3,0(r4)
    7e8c:	f800283a 	ret

00007e90 <__i2b>:
    7e90:	defffd04 	addi	sp,sp,-12
    7e94:	dc000015 	stw	r16,0(sp)
    7e98:	04000044 	movi	r16,1
    7e9c:	dc400115 	stw	r17,4(sp)
    7ea0:	2823883a 	mov	r17,r5
    7ea4:	800b883a 	mov	r5,r16
    7ea8:	dfc00215 	stw	ra,8(sp)
    7eac:	0007a840 	call	7a84 <_Balloc>
    7eb0:	14400515 	stw	r17,20(r2)
    7eb4:	14000415 	stw	r16,16(r2)
    7eb8:	dfc00217 	ldw	ra,8(sp)
    7ebc:	dc400117 	ldw	r17,4(sp)
    7ec0:	dc000017 	ldw	r16,0(sp)
    7ec4:	dec00304 	addi	sp,sp,12
    7ec8:	f800283a 	ret

00007ecc <__multiply>:
    7ecc:	defffa04 	addi	sp,sp,-24
    7ed0:	dcc00315 	stw	r19,12(sp)
    7ed4:	dc800215 	stw	r18,8(sp)
    7ed8:	34c00417 	ldw	r19,16(r6)
    7edc:	2c800417 	ldw	r18,16(r5)
    7ee0:	dd000415 	stw	r20,16(sp)
    7ee4:	dc400115 	stw	r17,4(sp)
    7ee8:	dfc00515 	stw	ra,20(sp)
    7eec:	dc000015 	stw	r16,0(sp)
    7ef0:	2829883a 	mov	r20,r5
    7ef4:	3023883a 	mov	r17,r6
    7ef8:	94c0050e 	bge	r18,r19,7f10 <__multiply+0x44>
    7efc:	9007883a 	mov	r3,r18
    7f00:	3029883a 	mov	r20,r6
    7f04:	9825883a 	mov	r18,r19
    7f08:	2823883a 	mov	r17,r5
    7f0c:	1827883a 	mov	r19,r3
    7f10:	a0800217 	ldw	r2,8(r20)
    7f14:	94e1883a 	add	r16,r18,r19
    7f18:	a1400117 	ldw	r5,4(r20)
    7f1c:	1400010e 	bge	r2,r16,7f24 <__multiply+0x58>
    7f20:	29400044 	addi	r5,r5,1
    7f24:	0007a840 	call	7a84 <_Balloc>
    7f28:	8415883a 	add	r10,r16,r16
    7f2c:	12c00504 	addi	r11,r2,20
    7f30:	5295883a 	add	r10,r10,r10
    7f34:	5a95883a 	add	r10,r11,r10
    7f38:	5807883a 	mov	r3,r11
    7f3c:	5a80032e 	bgeu	r11,r10,7f4c <__multiply+0x80>
    7f40:	18000015 	stw	zero,0(r3)
    7f44:	18c00104 	addi	r3,r3,4
    7f48:	1abffd36 	bltu	r3,r10,7f40 <__alt_data_end+0xf8007f40>
    7f4c:	9ce7883a 	add	r19,r19,r19
    7f50:	94a5883a 	add	r18,r18,r18
    7f54:	89800504 	addi	r6,r17,20
    7f58:	9ce7883a 	add	r19,r19,r19
    7f5c:	a3400504 	addi	r13,r20,20
    7f60:	94a5883a 	add	r18,r18,r18
    7f64:	34d9883a 	add	r12,r6,r19
    7f68:	6c93883a 	add	r9,r13,r18
    7f6c:	3300422e 	bgeu	r6,r12,8078 <__multiply+0x1ac>
    7f70:	37c00017 	ldw	ra,0(r6)
    7f74:	fbffffcc 	andi	r15,ra,65535
    7f78:	78001b26 	beq	r15,zero,7fe8 <__multiply+0x11c>
    7f7c:	5811883a 	mov	r8,r11
    7f80:	681d883a 	mov	r14,r13
    7f84:	000f883a 	mov	r7,zero
    7f88:	71000017 	ldw	r4,0(r14)
    7f8c:	40c00017 	ldw	r3,0(r8)
    7f90:	73800104 	addi	r14,r14,4
    7f94:	217fffcc 	andi	r5,r4,65535
    7f98:	2bcb383a 	mul	r5,r5,r15
    7f9c:	2008d43a 	srli	r4,r4,16
    7fa0:	1c7fffcc 	andi	r17,r3,65535
    7fa4:	2c4b883a 	add	r5,r5,r17
    7fa8:	29cb883a 	add	r5,r5,r7
    7fac:	23c9383a 	mul	r4,r4,r15
    7fb0:	1806d43a 	srli	r3,r3,16
    7fb4:	280ed43a 	srli	r7,r5,16
    7fb8:	297fffcc 	andi	r5,r5,65535
    7fbc:	20c7883a 	add	r3,r4,r3
    7fc0:	19c7883a 	add	r3,r3,r7
    7fc4:	1808943a 	slli	r4,r3,16
    7fc8:	4023883a 	mov	r17,r8
    7fcc:	180ed43a 	srli	r7,r3,16
    7fd0:	214ab03a 	or	r5,r4,r5
    7fd4:	41400015 	stw	r5,0(r8)
    7fd8:	42000104 	addi	r8,r8,4
    7fdc:	727fea36 	bltu	r14,r9,7f88 <__alt_data_end+0xf8007f88>
    7fe0:	89c00115 	stw	r7,4(r17)
    7fe4:	37c00017 	ldw	ra,0(r6)
    7fe8:	f83ed43a 	srli	ra,ra,16
    7fec:	f8001f26 	beq	ra,zero,806c <__multiply+0x1a0>
    7ff0:	58c00017 	ldw	r3,0(r11)
    7ff4:	681d883a 	mov	r14,r13
    7ff8:	581f883a 	mov	r15,r11
    7ffc:	1811883a 	mov	r8,r3
    8000:	5825883a 	mov	r18,r11
    8004:	000f883a 	mov	r7,zero
    8008:	00000106 	br	8010 <__multiply+0x144>
    800c:	8825883a 	mov	r18,r17
    8010:	7140000b 	ldhu	r5,0(r14)
    8014:	4010d43a 	srli	r8,r8,16
    8018:	193fffcc 	andi	r4,r3,65535
    801c:	2fcb383a 	mul	r5,r5,ra
    8020:	7bc00104 	addi	r15,r15,4
    8024:	73800104 	addi	r14,r14,4
    8028:	2a0b883a 	add	r5,r5,r8
    802c:	29cb883a 	add	r5,r5,r7
    8030:	2806943a 	slli	r3,r5,16
    8034:	94400104 	addi	r17,r18,4
    8038:	280ad43a 	srli	r5,r5,16
    803c:	1908b03a 	or	r4,r3,r4
    8040:	793fff15 	stw	r4,-4(r15)
    8044:	70ffff17 	ldw	r3,-4(r14)
    8048:	8a000017 	ldw	r8,0(r17)
    804c:	1806d43a 	srli	r3,r3,16
    8050:	413fffcc 	andi	r4,r8,65535
    8054:	1fc7383a 	mul	r3,r3,ra
    8058:	1907883a 	add	r3,r3,r4
    805c:	1947883a 	add	r3,r3,r5
    8060:	180ed43a 	srli	r7,r3,16
    8064:	727fe936 	bltu	r14,r9,800c <__alt_data_end+0xf800800c>
    8068:	90c00115 	stw	r3,4(r18)
    806c:	31800104 	addi	r6,r6,4
    8070:	5ac00104 	addi	r11,r11,4
    8074:	333fbe36 	bltu	r6,r12,7f70 <__alt_data_end+0xf8007f70>
    8078:	0400090e 	bge	zero,r16,80a0 <__multiply+0x1d4>
    807c:	50ffff17 	ldw	r3,-4(r10)
    8080:	52bfff04 	addi	r10,r10,-4
    8084:	18000326 	beq	r3,zero,8094 <__multiply+0x1c8>
    8088:	00000506 	br	80a0 <__multiply+0x1d4>
    808c:	50c00017 	ldw	r3,0(r10)
    8090:	1800031e 	bne	r3,zero,80a0 <__multiply+0x1d4>
    8094:	843fffc4 	addi	r16,r16,-1
    8098:	52bfff04 	addi	r10,r10,-4
    809c:	803ffb1e 	bne	r16,zero,808c <__alt_data_end+0xf800808c>
    80a0:	14000415 	stw	r16,16(r2)
    80a4:	dfc00517 	ldw	ra,20(sp)
    80a8:	dd000417 	ldw	r20,16(sp)
    80ac:	dcc00317 	ldw	r19,12(sp)
    80b0:	dc800217 	ldw	r18,8(sp)
    80b4:	dc400117 	ldw	r17,4(sp)
    80b8:	dc000017 	ldw	r16,0(sp)
    80bc:	dec00604 	addi	sp,sp,24
    80c0:	f800283a 	ret

000080c4 <__pow5mult>:
    80c4:	defffa04 	addi	sp,sp,-24
    80c8:	dcc00315 	stw	r19,12(sp)
    80cc:	dc000015 	stw	r16,0(sp)
    80d0:	dfc00515 	stw	ra,20(sp)
    80d4:	dd000415 	stw	r20,16(sp)
    80d8:	dc800215 	stw	r18,8(sp)
    80dc:	dc400115 	stw	r17,4(sp)
    80e0:	308000cc 	andi	r2,r6,3
    80e4:	3021883a 	mov	r16,r6
    80e8:	2027883a 	mov	r19,r4
    80ec:	10002f1e 	bne	r2,zero,81ac <__pow5mult+0xe8>
    80f0:	2825883a 	mov	r18,r5
    80f4:	8021d0ba 	srai	r16,r16,2
    80f8:	80001a26 	beq	r16,zero,8164 <__pow5mult+0xa0>
    80fc:	9c401217 	ldw	r17,72(r19)
    8100:	8800061e 	bne	r17,zero,811c <__pow5mult+0x58>
    8104:	00003406 	br	81d8 <__pow5mult+0x114>
    8108:	8021d07a 	srai	r16,r16,1
    810c:	80001526 	beq	r16,zero,8164 <__pow5mult+0xa0>
    8110:	88800017 	ldw	r2,0(r17)
    8114:	10001c26 	beq	r2,zero,8188 <__pow5mult+0xc4>
    8118:	1023883a 	mov	r17,r2
    811c:	8080004c 	andi	r2,r16,1
    8120:	103ff926 	beq	r2,zero,8108 <__alt_data_end+0xf8008108>
    8124:	880d883a 	mov	r6,r17
    8128:	900b883a 	mov	r5,r18
    812c:	9809883a 	mov	r4,r19
    8130:	0007ecc0 	call	7ecc <__multiply>
    8134:	90001b26 	beq	r18,zero,81a4 <__pow5mult+0xe0>
    8138:	91000117 	ldw	r4,4(r18)
    813c:	98c01317 	ldw	r3,76(r19)
    8140:	8021d07a 	srai	r16,r16,1
    8144:	2109883a 	add	r4,r4,r4
    8148:	2109883a 	add	r4,r4,r4
    814c:	1907883a 	add	r3,r3,r4
    8150:	19000017 	ldw	r4,0(r3)
    8154:	91000015 	stw	r4,0(r18)
    8158:	1c800015 	stw	r18,0(r3)
    815c:	1025883a 	mov	r18,r2
    8160:	803feb1e 	bne	r16,zero,8110 <__alt_data_end+0xf8008110>
    8164:	9005883a 	mov	r2,r18
    8168:	dfc00517 	ldw	ra,20(sp)
    816c:	dd000417 	ldw	r20,16(sp)
    8170:	dcc00317 	ldw	r19,12(sp)
    8174:	dc800217 	ldw	r18,8(sp)
    8178:	dc400117 	ldw	r17,4(sp)
    817c:	dc000017 	ldw	r16,0(sp)
    8180:	dec00604 	addi	sp,sp,24
    8184:	f800283a 	ret
    8188:	880d883a 	mov	r6,r17
    818c:	880b883a 	mov	r5,r17
    8190:	9809883a 	mov	r4,r19
    8194:	0007ecc0 	call	7ecc <__multiply>
    8198:	88800015 	stw	r2,0(r17)
    819c:	10000015 	stw	zero,0(r2)
    81a0:	003fdd06 	br	8118 <__alt_data_end+0xf8008118>
    81a4:	1025883a 	mov	r18,r2
    81a8:	003fd706 	br	8108 <__alt_data_end+0xf8008108>
    81ac:	10bfffc4 	addi	r2,r2,-1
    81b0:	1085883a 	add	r2,r2,r2
    81b4:	00c00074 	movhi	r3,1
    81b8:	18c81204 	addi	r3,r3,8264
    81bc:	1085883a 	add	r2,r2,r2
    81c0:	1885883a 	add	r2,r3,r2
    81c4:	11800017 	ldw	r6,0(r2)
    81c8:	000f883a 	mov	r7,zero
    81cc:	0007b540 	call	7b54 <__multadd>
    81d0:	1025883a 	mov	r18,r2
    81d4:	003fc706 	br	80f4 <__alt_data_end+0xf80080f4>
    81d8:	05000044 	movi	r20,1
    81dc:	a00b883a 	mov	r5,r20
    81e0:	9809883a 	mov	r4,r19
    81e4:	0007a840 	call	7a84 <_Balloc>
    81e8:	1023883a 	mov	r17,r2
    81ec:	00809c44 	movi	r2,625
    81f0:	88800515 	stw	r2,20(r17)
    81f4:	8d000415 	stw	r20,16(r17)
    81f8:	9c401215 	stw	r17,72(r19)
    81fc:	88000015 	stw	zero,0(r17)
    8200:	003fc606 	br	811c <__alt_data_end+0xf800811c>

00008204 <__lshift>:
    8204:	defff904 	addi	sp,sp,-28
    8208:	dd400515 	stw	r21,20(sp)
    820c:	dcc00315 	stw	r19,12(sp)
    8210:	302bd17a 	srai	r21,r6,5
    8214:	2cc00417 	ldw	r19,16(r5)
    8218:	28800217 	ldw	r2,8(r5)
    821c:	dd000415 	stw	r20,16(sp)
    8220:	ace7883a 	add	r19,r21,r19
    8224:	dc800215 	stw	r18,8(sp)
    8228:	dc400115 	stw	r17,4(sp)
    822c:	dc000015 	stw	r16,0(sp)
    8230:	dfc00615 	stw	ra,24(sp)
    8234:	9c000044 	addi	r16,r19,1
    8238:	2823883a 	mov	r17,r5
    823c:	3029883a 	mov	r20,r6
    8240:	2025883a 	mov	r18,r4
    8244:	29400117 	ldw	r5,4(r5)
    8248:	1400030e 	bge	r2,r16,8258 <__lshift+0x54>
    824c:	1085883a 	add	r2,r2,r2
    8250:	29400044 	addi	r5,r5,1
    8254:	143ffd16 	blt	r2,r16,824c <__alt_data_end+0xf800824c>
    8258:	9009883a 	mov	r4,r18
    825c:	0007a840 	call	7a84 <_Balloc>
    8260:	10c00504 	addi	r3,r2,20
    8264:	0540070e 	bge	zero,r21,8284 <__lshift+0x80>
    8268:	ad6b883a 	add	r21,r21,r21
    826c:	ad6b883a 	add	r21,r21,r21
    8270:	1809883a 	mov	r4,r3
    8274:	1d47883a 	add	r3,r3,r21
    8278:	20000015 	stw	zero,0(r4)
    827c:	21000104 	addi	r4,r4,4
    8280:	193ffd1e 	bne	r3,r4,8278 <__alt_data_end+0xf8008278>
    8284:	8a000417 	ldw	r8,16(r17)
    8288:	89000504 	addi	r4,r17,20
    828c:	a18007cc 	andi	r6,r20,31
    8290:	4211883a 	add	r8,r8,r8
    8294:	4211883a 	add	r8,r8,r8
    8298:	2211883a 	add	r8,r4,r8
    829c:	30002326 	beq	r6,zero,832c <__lshift+0x128>
    82a0:	02400804 	movi	r9,32
    82a4:	4993c83a 	sub	r9,r9,r6
    82a8:	000b883a 	mov	r5,zero
    82ac:	21c00017 	ldw	r7,0(r4)
    82b0:	1815883a 	mov	r10,r3
    82b4:	18c00104 	addi	r3,r3,4
    82b8:	398e983a 	sll	r7,r7,r6
    82bc:	21000104 	addi	r4,r4,4
    82c0:	394ab03a 	or	r5,r7,r5
    82c4:	197fff15 	stw	r5,-4(r3)
    82c8:	217fff17 	ldw	r5,-4(r4)
    82cc:	2a4ad83a 	srl	r5,r5,r9
    82d0:	223ff636 	bltu	r4,r8,82ac <__alt_data_end+0xf80082ac>
    82d4:	51400115 	stw	r5,4(r10)
    82d8:	28001a1e 	bne	r5,zero,8344 <__lshift+0x140>
    82dc:	843fffc4 	addi	r16,r16,-1
    82e0:	14000415 	stw	r16,16(r2)
    82e4:	88000826 	beq	r17,zero,8308 <__lshift+0x104>
    82e8:	89000117 	ldw	r4,4(r17)
    82ec:	90c01317 	ldw	r3,76(r18)
    82f0:	2109883a 	add	r4,r4,r4
    82f4:	2109883a 	add	r4,r4,r4
    82f8:	1907883a 	add	r3,r3,r4
    82fc:	19000017 	ldw	r4,0(r3)
    8300:	89000015 	stw	r4,0(r17)
    8304:	1c400015 	stw	r17,0(r3)
    8308:	dfc00617 	ldw	ra,24(sp)
    830c:	dd400517 	ldw	r21,20(sp)
    8310:	dd000417 	ldw	r20,16(sp)
    8314:	dcc00317 	ldw	r19,12(sp)
    8318:	dc800217 	ldw	r18,8(sp)
    831c:	dc400117 	ldw	r17,4(sp)
    8320:	dc000017 	ldw	r16,0(sp)
    8324:	dec00704 	addi	sp,sp,28
    8328:	f800283a 	ret
    832c:	21400017 	ldw	r5,0(r4)
    8330:	18c00104 	addi	r3,r3,4
    8334:	21000104 	addi	r4,r4,4
    8338:	197fff15 	stw	r5,-4(r3)
    833c:	223ffb36 	bltu	r4,r8,832c <__alt_data_end+0xf800832c>
    8340:	003fe606 	br	82dc <__alt_data_end+0xf80082dc>
    8344:	9c000084 	addi	r16,r19,2
    8348:	003fe406 	br	82dc <__alt_data_end+0xf80082dc>

0000834c <__mcmp>:
    834c:	20800417 	ldw	r2,16(r4)
    8350:	28c00417 	ldw	r3,16(r5)
    8354:	10c5c83a 	sub	r2,r2,r3
    8358:	1000111e 	bne	r2,zero,83a0 <__mcmp+0x54>
    835c:	18c7883a 	add	r3,r3,r3
    8360:	18c7883a 	add	r3,r3,r3
    8364:	21000504 	addi	r4,r4,20
    8368:	29400504 	addi	r5,r5,20
    836c:	20c5883a 	add	r2,r4,r3
    8370:	28cb883a 	add	r5,r5,r3
    8374:	00000106 	br	837c <__mcmp+0x30>
    8378:	20800a2e 	bgeu	r4,r2,83a4 <__mcmp+0x58>
    837c:	10bfff04 	addi	r2,r2,-4
    8380:	297fff04 	addi	r5,r5,-4
    8384:	11800017 	ldw	r6,0(r2)
    8388:	28c00017 	ldw	r3,0(r5)
    838c:	30fffa26 	beq	r6,r3,8378 <__alt_data_end+0xf8008378>
    8390:	30c00236 	bltu	r6,r3,839c <__mcmp+0x50>
    8394:	00800044 	movi	r2,1
    8398:	f800283a 	ret
    839c:	00bfffc4 	movi	r2,-1
    83a0:	f800283a 	ret
    83a4:	0005883a 	mov	r2,zero
    83a8:	f800283a 	ret

000083ac <__mdiff>:
    83ac:	28c00417 	ldw	r3,16(r5)
    83b0:	30800417 	ldw	r2,16(r6)
    83b4:	defffa04 	addi	sp,sp,-24
    83b8:	dcc00315 	stw	r19,12(sp)
    83bc:	dc800215 	stw	r18,8(sp)
    83c0:	dfc00515 	stw	ra,20(sp)
    83c4:	dd000415 	stw	r20,16(sp)
    83c8:	dc400115 	stw	r17,4(sp)
    83cc:	dc000015 	stw	r16,0(sp)
    83d0:	1887c83a 	sub	r3,r3,r2
    83d4:	2825883a 	mov	r18,r5
    83d8:	3027883a 	mov	r19,r6
    83dc:	1800141e 	bne	r3,zero,8430 <__mdiff+0x84>
    83e0:	1085883a 	add	r2,r2,r2
    83e4:	1085883a 	add	r2,r2,r2
    83e8:	2a000504 	addi	r8,r5,20
    83ec:	34000504 	addi	r16,r6,20
    83f0:	4087883a 	add	r3,r8,r2
    83f4:	8085883a 	add	r2,r16,r2
    83f8:	00000106 	br	8400 <__mdiff+0x54>
    83fc:	40c0592e 	bgeu	r8,r3,8564 <__mdiff+0x1b8>
    8400:	18ffff04 	addi	r3,r3,-4
    8404:	10bfff04 	addi	r2,r2,-4
    8408:	19c00017 	ldw	r7,0(r3)
    840c:	11400017 	ldw	r5,0(r2)
    8410:	397ffa26 	beq	r7,r5,83fc <__alt_data_end+0xf80083fc>
    8414:	3940592e 	bgeu	r7,r5,857c <__mdiff+0x1d0>
    8418:	9005883a 	mov	r2,r18
    841c:	4023883a 	mov	r17,r8
    8420:	9825883a 	mov	r18,r19
    8424:	05000044 	movi	r20,1
    8428:	1027883a 	mov	r19,r2
    842c:	00000406 	br	8440 <__mdiff+0x94>
    8430:	18005616 	blt	r3,zero,858c <__mdiff+0x1e0>
    8434:	34400504 	addi	r17,r6,20
    8438:	2c000504 	addi	r16,r5,20
    843c:	0029883a 	mov	r20,zero
    8440:	91400117 	ldw	r5,4(r18)
    8444:	0007a840 	call	7a84 <_Balloc>
    8448:	92400417 	ldw	r9,16(r18)
    844c:	9b000417 	ldw	r12,16(r19)
    8450:	12c00504 	addi	r11,r2,20
    8454:	4a51883a 	add	r8,r9,r9
    8458:	6319883a 	add	r12,r12,r12
    845c:	4211883a 	add	r8,r8,r8
    8460:	6319883a 	add	r12,r12,r12
    8464:	15000315 	stw	r20,12(r2)
    8468:	8211883a 	add	r8,r16,r8
    846c:	8b19883a 	add	r12,r17,r12
    8470:	0007883a 	mov	r3,zero
    8474:	81400017 	ldw	r5,0(r16)
    8478:	89c00017 	ldw	r7,0(r17)
    847c:	59800104 	addi	r6,r11,4
    8480:	293fffcc 	andi	r4,r5,65535
    8484:	20c7883a 	add	r3,r4,r3
    8488:	393fffcc 	andi	r4,r7,65535
    848c:	1909c83a 	sub	r4,r3,r4
    8490:	280ad43a 	srli	r5,r5,16
    8494:	380ed43a 	srli	r7,r7,16
    8498:	2007d43a 	srai	r3,r4,16
    849c:	213fffcc 	andi	r4,r4,65535
    84a0:	29cbc83a 	sub	r5,r5,r7
    84a4:	28c7883a 	add	r3,r5,r3
    84a8:	180a943a 	slli	r5,r3,16
    84ac:	8c400104 	addi	r17,r17,4
    84b0:	84000104 	addi	r16,r16,4
    84b4:	2908b03a 	or	r4,r5,r4
    84b8:	59000015 	stw	r4,0(r11)
    84bc:	1807d43a 	srai	r3,r3,16
    84c0:	3015883a 	mov	r10,r6
    84c4:	3017883a 	mov	r11,r6
    84c8:	8b3fea36 	bltu	r17,r12,8474 <__alt_data_end+0xf8008474>
    84cc:	8200162e 	bgeu	r16,r8,8528 <__mdiff+0x17c>
    84d0:	8017883a 	mov	r11,r16
    84d4:	59400017 	ldw	r5,0(r11)
    84d8:	31800104 	addi	r6,r6,4
    84dc:	5ac00104 	addi	r11,r11,4
    84e0:	293fffcc 	andi	r4,r5,65535
    84e4:	20c7883a 	add	r3,r4,r3
    84e8:	280ed43a 	srli	r7,r5,16
    84ec:	180bd43a 	srai	r5,r3,16
    84f0:	193fffcc 	andi	r4,r3,65535
    84f4:	3947883a 	add	r3,r7,r5
    84f8:	180a943a 	slli	r5,r3,16
    84fc:	1807d43a 	srai	r3,r3,16
    8500:	2908b03a 	or	r4,r5,r4
    8504:	313fff15 	stw	r4,-4(r6)
    8508:	5a3ff236 	bltu	r11,r8,84d4 <__alt_data_end+0xf80084d4>
    850c:	0406303a 	nor	r3,zero,r16
    8510:	1a07883a 	add	r3,r3,r8
    8514:	1806d0ba 	srli	r3,r3,2
    8518:	18c00044 	addi	r3,r3,1
    851c:	18c7883a 	add	r3,r3,r3
    8520:	18c7883a 	add	r3,r3,r3
    8524:	50d5883a 	add	r10,r10,r3
    8528:	50ffff04 	addi	r3,r10,-4
    852c:	2000041e 	bne	r4,zero,8540 <__mdiff+0x194>
    8530:	18ffff04 	addi	r3,r3,-4
    8534:	19000017 	ldw	r4,0(r3)
    8538:	4a7fffc4 	addi	r9,r9,-1
    853c:	203ffc26 	beq	r4,zero,8530 <__alt_data_end+0xf8008530>
    8540:	12400415 	stw	r9,16(r2)
    8544:	dfc00517 	ldw	ra,20(sp)
    8548:	dd000417 	ldw	r20,16(sp)
    854c:	dcc00317 	ldw	r19,12(sp)
    8550:	dc800217 	ldw	r18,8(sp)
    8554:	dc400117 	ldw	r17,4(sp)
    8558:	dc000017 	ldw	r16,0(sp)
    855c:	dec00604 	addi	sp,sp,24
    8560:	f800283a 	ret
    8564:	000b883a 	mov	r5,zero
    8568:	0007a840 	call	7a84 <_Balloc>
    856c:	00c00044 	movi	r3,1
    8570:	10c00415 	stw	r3,16(r2)
    8574:	10000515 	stw	zero,20(r2)
    8578:	003ff206 	br	8544 <__alt_data_end+0xf8008544>
    857c:	8023883a 	mov	r17,r16
    8580:	0029883a 	mov	r20,zero
    8584:	4021883a 	mov	r16,r8
    8588:	003fad06 	br	8440 <__alt_data_end+0xf8008440>
    858c:	9005883a 	mov	r2,r18
    8590:	94400504 	addi	r17,r18,20
    8594:	9c000504 	addi	r16,r19,20
    8598:	9825883a 	mov	r18,r19
    859c:	05000044 	movi	r20,1
    85a0:	1027883a 	mov	r19,r2
    85a4:	003fa606 	br	8440 <__alt_data_end+0xf8008440>

000085a8 <__ulp>:
    85a8:	295ffc2c 	andhi	r5,r5,32752
    85ac:	00bf3034 	movhi	r2,64704
    85b0:	2887883a 	add	r3,r5,r2
    85b4:	00c0020e 	bge	zero,r3,85c0 <__ulp+0x18>
    85b8:	0005883a 	mov	r2,zero
    85bc:	f800283a 	ret
    85c0:	00c7c83a 	sub	r3,zero,r3
    85c4:	1807d53a 	srai	r3,r3,20
    85c8:	008004c4 	movi	r2,19
    85cc:	10c00b0e 	bge	r2,r3,85fc <__ulp+0x54>
    85d0:	18bffb04 	addi	r2,r3,-20
    85d4:	01000784 	movi	r4,30
    85d8:	0007883a 	mov	r3,zero
    85dc:	20800516 	blt	r4,r2,85f4 <__ulp+0x4c>
    85e0:	010007c4 	movi	r4,31
    85e4:	2089c83a 	sub	r4,r4,r2
    85e8:	00800044 	movi	r2,1
    85ec:	1104983a 	sll	r2,r2,r4
    85f0:	f800283a 	ret
    85f4:	00800044 	movi	r2,1
    85f8:	f800283a 	ret
    85fc:	01400234 	movhi	r5,8
    8600:	28c7d83a 	sra	r3,r5,r3
    8604:	0005883a 	mov	r2,zero
    8608:	f800283a 	ret

0000860c <__b2d>:
    860c:	defffa04 	addi	sp,sp,-24
    8610:	dc000015 	stw	r16,0(sp)
    8614:	24000417 	ldw	r16,16(r4)
    8618:	dc400115 	stw	r17,4(sp)
    861c:	24400504 	addi	r17,r4,20
    8620:	8421883a 	add	r16,r16,r16
    8624:	8421883a 	add	r16,r16,r16
    8628:	8c21883a 	add	r16,r17,r16
    862c:	dc800215 	stw	r18,8(sp)
    8630:	84bfff17 	ldw	r18,-4(r16)
    8634:	dd000415 	stw	r20,16(sp)
    8638:	dcc00315 	stw	r19,12(sp)
    863c:	9009883a 	mov	r4,r18
    8640:	2829883a 	mov	r20,r5
    8644:	dfc00515 	stw	ra,20(sp)
    8648:	0007d780 	call	7d78 <__hi0bits>
    864c:	00c00804 	movi	r3,32
    8650:	1889c83a 	sub	r4,r3,r2
    8654:	a1000015 	stw	r4,0(r20)
    8658:	01000284 	movi	r4,10
    865c:	84ffff04 	addi	r19,r16,-4
    8660:	20801216 	blt	r4,r2,86ac <__b2d+0xa0>
    8664:	018002c4 	movi	r6,11
    8668:	308dc83a 	sub	r6,r6,r2
    866c:	9186d83a 	srl	r3,r18,r6
    8670:	18cffc34 	orhi	r3,r3,16368
    8674:	8cc0212e 	bgeu	r17,r19,86fc <__b2d+0xf0>
    8678:	813ffe17 	ldw	r4,-8(r16)
    867c:	218cd83a 	srl	r6,r4,r6
    8680:	10800544 	addi	r2,r2,21
    8684:	9084983a 	sll	r2,r18,r2
    8688:	1184b03a 	or	r2,r2,r6
    868c:	dfc00517 	ldw	ra,20(sp)
    8690:	dd000417 	ldw	r20,16(sp)
    8694:	dcc00317 	ldw	r19,12(sp)
    8698:	dc800217 	ldw	r18,8(sp)
    869c:	dc400117 	ldw	r17,4(sp)
    86a0:	dc000017 	ldw	r16,0(sp)
    86a4:	dec00604 	addi	sp,sp,24
    86a8:	f800283a 	ret
    86ac:	8cc00f2e 	bgeu	r17,r19,86ec <__b2d+0xe0>
    86b0:	117ffd44 	addi	r5,r2,-11
    86b4:	80bffe17 	ldw	r2,-8(r16)
    86b8:	28000e26 	beq	r5,zero,86f4 <__b2d+0xe8>
    86bc:	1949c83a 	sub	r4,r3,r5
    86c0:	9164983a 	sll	r18,r18,r5
    86c4:	1106d83a 	srl	r3,r2,r4
    86c8:	81bffe04 	addi	r6,r16,-8
    86cc:	948ffc34 	orhi	r18,r18,16368
    86d0:	90c6b03a 	or	r3,r18,r3
    86d4:	89800e2e 	bgeu	r17,r6,8710 <__b2d+0x104>
    86d8:	81bffd17 	ldw	r6,-12(r16)
    86dc:	1144983a 	sll	r2,r2,r5
    86e0:	310ad83a 	srl	r5,r6,r4
    86e4:	2884b03a 	or	r2,r5,r2
    86e8:	003fe806 	br	868c <__alt_data_end+0xf800868c>
    86ec:	10bffd44 	addi	r2,r2,-11
    86f0:	1000041e 	bne	r2,zero,8704 <__b2d+0xf8>
    86f4:	90cffc34 	orhi	r3,r18,16368
    86f8:	003fe406 	br	868c <__alt_data_end+0xf800868c>
    86fc:	000d883a 	mov	r6,zero
    8700:	003fdf06 	br	8680 <__alt_data_end+0xf8008680>
    8704:	90a4983a 	sll	r18,r18,r2
    8708:	0005883a 	mov	r2,zero
    870c:	003ff906 	br	86f4 <__alt_data_end+0xf80086f4>
    8710:	1144983a 	sll	r2,r2,r5
    8714:	003fdd06 	br	868c <__alt_data_end+0xf800868c>

00008718 <__d2b>:
    8718:	defff804 	addi	sp,sp,-32
    871c:	dc000215 	stw	r16,8(sp)
    8720:	3021883a 	mov	r16,r6
    8724:	dc400315 	stw	r17,12(sp)
    8728:	8022907a 	slli	r17,r16,1
    872c:	dd000615 	stw	r20,24(sp)
    8730:	2829883a 	mov	r20,r5
    8734:	01400044 	movi	r5,1
    8738:	dcc00515 	stw	r19,20(sp)
    873c:	dc800415 	stw	r18,16(sp)
    8740:	dfc00715 	stw	ra,28(sp)
    8744:	3825883a 	mov	r18,r7
    8748:	8822d57a 	srli	r17,r17,21
    874c:	0007a840 	call	7a84 <_Balloc>
    8750:	1027883a 	mov	r19,r2
    8754:	00800434 	movhi	r2,16
    8758:	10bfffc4 	addi	r2,r2,-1
    875c:	808c703a 	and	r6,r16,r2
    8760:	88000126 	beq	r17,zero,8768 <__d2b+0x50>
    8764:	31800434 	orhi	r6,r6,16
    8768:	d9800015 	stw	r6,0(sp)
    876c:	a0002426 	beq	r20,zero,8800 <__d2b+0xe8>
    8770:	d9000104 	addi	r4,sp,4
    8774:	dd000115 	stw	r20,4(sp)
    8778:	0007de00 	call	7de0 <__lo0bits>
    877c:	d8c00017 	ldw	r3,0(sp)
    8780:	10002f1e 	bne	r2,zero,8840 <__d2b+0x128>
    8784:	d9000117 	ldw	r4,4(sp)
    8788:	99000515 	stw	r4,20(r19)
    878c:	1821003a 	cmpeq	r16,r3,zero
    8790:	01000084 	movi	r4,2
    8794:	2421c83a 	sub	r16,r4,r16
    8798:	98c00615 	stw	r3,24(r19)
    879c:	9c000415 	stw	r16,16(r19)
    87a0:	88001f1e 	bne	r17,zero,8820 <__d2b+0x108>
    87a4:	10bef384 	addi	r2,r2,-1074
    87a8:	90800015 	stw	r2,0(r18)
    87ac:	00900034 	movhi	r2,16384
    87b0:	10bfffc4 	addi	r2,r2,-1
    87b4:	8085883a 	add	r2,r16,r2
    87b8:	1085883a 	add	r2,r2,r2
    87bc:	1085883a 	add	r2,r2,r2
    87c0:	9885883a 	add	r2,r19,r2
    87c4:	11000517 	ldw	r4,20(r2)
    87c8:	8020917a 	slli	r16,r16,5
    87cc:	0007d780 	call	7d78 <__hi0bits>
    87d0:	d8c00817 	ldw	r3,32(sp)
    87d4:	8085c83a 	sub	r2,r16,r2
    87d8:	18800015 	stw	r2,0(r3)
    87dc:	9805883a 	mov	r2,r19
    87e0:	dfc00717 	ldw	ra,28(sp)
    87e4:	dd000617 	ldw	r20,24(sp)
    87e8:	dcc00517 	ldw	r19,20(sp)
    87ec:	dc800417 	ldw	r18,16(sp)
    87f0:	dc400317 	ldw	r17,12(sp)
    87f4:	dc000217 	ldw	r16,8(sp)
    87f8:	dec00804 	addi	sp,sp,32
    87fc:	f800283a 	ret
    8800:	d809883a 	mov	r4,sp
    8804:	0007de00 	call	7de0 <__lo0bits>
    8808:	d8c00017 	ldw	r3,0(sp)
    880c:	04000044 	movi	r16,1
    8810:	9c000415 	stw	r16,16(r19)
    8814:	98c00515 	stw	r3,20(r19)
    8818:	10800804 	addi	r2,r2,32
    881c:	883fe126 	beq	r17,zero,87a4 <__alt_data_end+0xf80087a4>
    8820:	00c00d44 	movi	r3,53
    8824:	8c7ef344 	addi	r17,r17,-1075
    8828:	88a3883a 	add	r17,r17,r2
    882c:	1885c83a 	sub	r2,r3,r2
    8830:	d8c00817 	ldw	r3,32(sp)
    8834:	94400015 	stw	r17,0(r18)
    8838:	18800015 	stw	r2,0(r3)
    883c:	003fe706 	br	87dc <__alt_data_end+0xf80087dc>
    8840:	01000804 	movi	r4,32
    8844:	2089c83a 	sub	r4,r4,r2
    8848:	1908983a 	sll	r4,r3,r4
    884c:	d9400117 	ldw	r5,4(sp)
    8850:	1886d83a 	srl	r3,r3,r2
    8854:	2148b03a 	or	r4,r4,r5
    8858:	99000515 	stw	r4,20(r19)
    885c:	d8c00015 	stw	r3,0(sp)
    8860:	003fca06 	br	878c <__alt_data_end+0xf800878c>

00008864 <__ratio>:
    8864:	defff904 	addi	sp,sp,-28
    8868:	dc400315 	stw	r17,12(sp)
    886c:	2823883a 	mov	r17,r5
    8870:	d9400104 	addi	r5,sp,4
    8874:	dfc00615 	stw	ra,24(sp)
    8878:	dcc00515 	stw	r19,20(sp)
    887c:	dc800415 	stw	r18,16(sp)
    8880:	2027883a 	mov	r19,r4
    8884:	dc000215 	stw	r16,8(sp)
    8888:	000860c0 	call	860c <__b2d>
    888c:	d80b883a 	mov	r5,sp
    8890:	8809883a 	mov	r4,r17
    8894:	1025883a 	mov	r18,r2
    8898:	1821883a 	mov	r16,r3
    889c:	000860c0 	call	860c <__b2d>
    88a0:	8a000417 	ldw	r8,16(r17)
    88a4:	99000417 	ldw	r4,16(r19)
    88a8:	d9400117 	ldw	r5,4(sp)
    88ac:	2209c83a 	sub	r4,r4,r8
    88b0:	2010917a 	slli	r8,r4,5
    88b4:	d9000017 	ldw	r4,0(sp)
    88b8:	2909c83a 	sub	r4,r5,r4
    88bc:	4109883a 	add	r4,r8,r4
    88c0:	01000e0e 	bge	zero,r4,88fc <__ratio+0x98>
    88c4:	2008953a 	slli	r4,r4,20
    88c8:	2421883a 	add	r16,r4,r16
    88cc:	100d883a 	mov	r6,r2
    88d0:	180f883a 	mov	r7,r3
    88d4:	9009883a 	mov	r4,r18
    88d8:	800b883a 	mov	r5,r16
    88dc:	000c5480 	call	c548 <__divdf3>
    88e0:	dfc00617 	ldw	ra,24(sp)
    88e4:	dcc00517 	ldw	r19,20(sp)
    88e8:	dc800417 	ldw	r18,16(sp)
    88ec:	dc400317 	ldw	r17,12(sp)
    88f0:	dc000217 	ldw	r16,8(sp)
    88f4:	dec00704 	addi	sp,sp,28
    88f8:	f800283a 	ret
    88fc:	2008953a 	slli	r4,r4,20
    8900:	1907c83a 	sub	r3,r3,r4
    8904:	003ff106 	br	88cc <__alt_data_end+0xf80088cc>

00008908 <_mprec_log10>:
    8908:	defffe04 	addi	sp,sp,-8
    890c:	dc000015 	stw	r16,0(sp)
    8910:	dfc00115 	stw	ra,4(sp)
    8914:	008005c4 	movi	r2,23
    8918:	2021883a 	mov	r16,r4
    891c:	11000d0e 	bge	r2,r4,8954 <_mprec_log10+0x4c>
    8920:	0005883a 	mov	r2,zero
    8924:	00cffc34 	movhi	r3,16368
    8928:	843fffc4 	addi	r16,r16,-1
    892c:	000d883a 	mov	r6,zero
    8930:	01d00934 	movhi	r7,16420
    8934:	1009883a 	mov	r4,r2
    8938:	180b883a 	mov	r5,r3
    893c:	000d0880 	call	d088 <__muldf3>
    8940:	803ff91e 	bne	r16,zero,8928 <__alt_data_end+0xf8008928>
    8944:	dfc00117 	ldw	ra,4(sp)
    8948:	dc000017 	ldw	r16,0(sp)
    894c:	dec00204 	addi	sp,sp,8
    8950:	f800283a 	ret
    8954:	202090fa 	slli	r16,r4,3
    8958:	00800074 	movhi	r2,1
    895c:	10882904 	addi	r2,r2,8356
    8960:	1421883a 	add	r16,r2,r16
    8964:	80800017 	ldw	r2,0(r16)
    8968:	80c00117 	ldw	r3,4(r16)
    896c:	dfc00117 	ldw	ra,4(sp)
    8970:	dc000017 	ldw	r16,0(sp)
    8974:	dec00204 	addi	sp,sp,8
    8978:	f800283a 	ret

0000897c <__copybits>:
    897c:	297fffc4 	addi	r5,r5,-1
    8980:	280fd17a 	srai	r7,r5,5
    8984:	30c00417 	ldw	r3,16(r6)
    8988:	30800504 	addi	r2,r6,20
    898c:	39c00044 	addi	r7,r7,1
    8990:	18c7883a 	add	r3,r3,r3
    8994:	39cf883a 	add	r7,r7,r7
    8998:	18c7883a 	add	r3,r3,r3
    899c:	39cf883a 	add	r7,r7,r7
    89a0:	10c7883a 	add	r3,r2,r3
    89a4:	21cf883a 	add	r7,r4,r7
    89a8:	10c00d2e 	bgeu	r2,r3,89e0 <__copybits+0x64>
    89ac:	200b883a 	mov	r5,r4
    89b0:	12000017 	ldw	r8,0(r2)
    89b4:	29400104 	addi	r5,r5,4
    89b8:	10800104 	addi	r2,r2,4
    89bc:	2a3fff15 	stw	r8,-4(r5)
    89c0:	10fffb36 	bltu	r2,r3,89b0 <__alt_data_end+0xf80089b0>
    89c4:	1985c83a 	sub	r2,r3,r6
    89c8:	10bffac4 	addi	r2,r2,-21
    89cc:	1004d0ba 	srli	r2,r2,2
    89d0:	10800044 	addi	r2,r2,1
    89d4:	1085883a 	add	r2,r2,r2
    89d8:	1085883a 	add	r2,r2,r2
    89dc:	2089883a 	add	r4,r4,r2
    89e0:	21c0032e 	bgeu	r4,r7,89f0 <__copybits+0x74>
    89e4:	20000015 	stw	zero,0(r4)
    89e8:	21000104 	addi	r4,r4,4
    89ec:	21fffd36 	bltu	r4,r7,89e4 <__alt_data_end+0xf80089e4>
    89f0:	f800283a 	ret

000089f4 <__any_on>:
    89f4:	20c00417 	ldw	r3,16(r4)
    89f8:	2805d17a 	srai	r2,r5,5
    89fc:	21000504 	addi	r4,r4,20
    8a00:	18800d0e 	bge	r3,r2,8a38 <__any_on+0x44>
    8a04:	18c7883a 	add	r3,r3,r3
    8a08:	18c7883a 	add	r3,r3,r3
    8a0c:	20c7883a 	add	r3,r4,r3
    8a10:	20c0192e 	bgeu	r4,r3,8a78 <__any_on+0x84>
    8a14:	18bfff17 	ldw	r2,-4(r3)
    8a18:	18ffff04 	addi	r3,r3,-4
    8a1c:	1000041e 	bne	r2,zero,8a30 <__any_on+0x3c>
    8a20:	20c0142e 	bgeu	r4,r3,8a74 <__any_on+0x80>
    8a24:	18ffff04 	addi	r3,r3,-4
    8a28:	19400017 	ldw	r5,0(r3)
    8a2c:	283ffc26 	beq	r5,zero,8a20 <__alt_data_end+0xf8008a20>
    8a30:	00800044 	movi	r2,1
    8a34:	f800283a 	ret
    8a38:	10c00a0e 	bge	r2,r3,8a64 <__any_on+0x70>
    8a3c:	1085883a 	add	r2,r2,r2
    8a40:	1085883a 	add	r2,r2,r2
    8a44:	294007cc 	andi	r5,r5,31
    8a48:	2087883a 	add	r3,r4,r2
    8a4c:	283ff026 	beq	r5,zero,8a10 <__alt_data_end+0xf8008a10>
    8a50:	19800017 	ldw	r6,0(r3)
    8a54:	3144d83a 	srl	r2,r6,r5
    8a58:	114a983a 	sll	r5,r2,r5
    8a5c:	317ff41e 	bne	r6,r5,8a30 <__alt_data_end+0xf8008a30>
    8a60:	003feb06 	br	8a10 <__alt_data_end+0xf8008a10>
    8a64:	1085883a 	add	r2,r2,r2
    8a68:	1085883a 	add	r2,r2,r2
    8a6c:	2087883a 	add	r3,r4,r2
    8a70:	003fe706 	br	8a10 <__alt_data_end+0xf8008a10>
    8a74:	f800283a 	ret
    8a78:	0005883a 	mov	r2,zero
    8a7c:	f800283a 	ret

00008a80 <_realloc_r>:
    8a80:	defff604 	addi	sp,sp,-40
    8a84:	dc800215 	stw	r18,8(sp)
    8a88:	dfc00915 	stw	ra,36(sp)
    8a8c:	df000815 	stw	fp,32(sp)
    8a90:	ddc00715 	stw	r23,28(sp)
    8a94:	dd800615 	stw	r22,24(sp)
    8a98:	dd400515 	stw	r21,20(sp)
    8a9c:	dd000415 	stw	r20,16(sp)
    8aa0:	dcc00315 	stw	r19,12(sp)
    8aa4:	dc400115 	stw	r17,4(sp)
    8aa8:	dc000015 	stw	r16,0(sp)
    8aac:	3025883a 	mov	r18,r6
    8ab0:	2800b726 	beq	r5,zero,8d90 <_realloc_r+0x310>
    8ab4:	282b883a 	mov	r21,r5
    8ab8:	2029883a 	mov	r20,r4
    8abc:	000e8800 	call	e880 <__malloc_lock>
    8ac0:	a8bfff17 	ldw	r2,-4(r21)
    8ac4:	043fff04 	movi	r16,-4
    8ac8:	90c002c4 	addi	r3,r18,11
    8acc:	01000584 	movi	r4,22
    8ad0:	acfffe04 	addi	r19,r21,-8
    8ad4:	1420703a 	and	r16,r2,r16
    8ad8:	20c0332e 	bgeu	r4,r3,8ba8 <_realloc_r+0x128>
    8adc:	047ffe04 	movi	r17,-8
    8ae0:	1c62703a 	and	r17,r3,r17
    8ae4:	8807883a 	mov	r3,r17
    8ae8:	88005816 	blt	r17,zero,8c4c <_realloc_r+0x1cc>
    8aec:	8c805736 	bltu	r17,r18,8c4c <_realloc_r+0x1cc>
    8af0:	80c0300e 	bge	r16,r3,8bb4 <_realloc_r+0x134>
    8af4:	07000074 	movhi	fp,1
    8af8:	e709be04 	addi	fp,fp,9976
    8afc:	e1c00217 	ldw	r7,8(fp)
    8b00:	9c09883a 	add	r4,r19,r16
    8b04:	22000117 	ldw	r8,4(r4)
    8b08:	21c06326 	beq	r4,r7,8c98 <_realloc_r+0x218>
    8b0c:	017fff84 	movi	r5,-2
    8b10:	414a703a 	and	r5,r8,r5
    8b14:	214b883a 	add	r5,r4,r5
    8b18:	29800117 	ldw	r6,4(r5)
    8b1c:	3180004c 	andi	r6,r6,1
    8b20:	30003f26 	beq	r6,zero,8c20 <_realloc_r+0x1a0>
    8b24:	1080004c 	andi	r2,r2,1
    8b28:	10008326 	beq	r2,zero,8d38 <_realloc_r+0x2b8>
    8b2c:	900b883a 	mov	r5,r18
    8b30:	a009883a 	mov	r4,r20
    8b34:	0001b980 	call	1b98 <_malloc_r>
    8b38:	1025883a 	mov	r18,r2
    8b3c:	10011e26 	beq	r2,zero,8fb8 <_realloc_r+0x538>
    8b40:	a93fff17 	ldw	r4,-4(r21)
    8b44:	10fffe04 	addi	r3,r2,-8
    8b48:	00bfff84 	movi	r2,-2
    8b4c:	2084703a 	and	r2,r4,r2
    8b50:	9885883a 	add	r2,r19,r2
    8b54:	1880ee26 	beq	r3,r2,8f10 <_realloc_r+0x490>
    8b58:	81bfff04 	addi	r6,r16,-4
    8b5c:	00800904 	movi	r2,36
    8b60:	1180b836 	bltu	r2,r6,8e44 <_realloc_r+0x3c4>
    8b64:	00c004c4 	movi	r3,19
    8b68:	19809636 	bltu	r3,r6,8dc4 <_realloc_r+0x344>
    8b6c:	9005883a 	mov	r2,r18
    8b70:	a807883a 	mov	r3,r21
    8b74:	19000017 	ldw	r4,0(r3)
    8b78:	11000015 	stw	r4,0(r2)
    8b7c:	19000117 	ldw	r4,4(r3)
    8b80:	11000115 	stw	r4,4(r2)
    8b84:	18c00217 	ldw	r3,8(r3)
    8b88:	10c00215 	stw	r3,8(r2)
    8b8c:	a80b883a 	mov	r5,r21
    8b90:	a009883a 	mov	r4,r20
    8b94:	00069e80 	call	69e8 <_free_r>
    8b98:	a009883a 	mov	r4,r20
    8b9c:	000e8a40 	call	e8a4 <__malloc_unlock>
    8ba0:	9005883a 	mov	r2,r18
    8ba4:	00001206 	br	8bf0 <_realloc_r+0x170>
    8ba8:	00c00404 	movi	r3,16
    8bac:	1823883a 	mov	r17,r3
    8bb0:	003fce06 	br	8aec <__alt_data_end+0xf8008aec>
    8bb4:	a825883a 	mov	r18,r21
    8bb8:	8445c83a 	sub	r2,r16,r17
    8bbc:	00c003c4 	movi	r3,15
    8bc0:	18802636 	bltu	r3,r2,8c5c <_realloc_r+0x1dc>
    8bc4:	99800117 	ldw	r6,4(r19)
    8bc8:	9c07883a 	add	r3,r19,r16
    8bcc:	3180004c 	andi	r6,r6,1
    8bd0:	3420b03a 	or	r16,r6,r16
    8bd4:	9c000115 	stw	r16,4(r19)
    8bd8:	18800117 	ldw	r2,4(r3)
    8bdc:	10800054 	ori	r2,r2,1
    8be0:	18800115 	stw	r2,4(r3)
    8be4:	a009883a 	mov	r4,r20
    8be8:	000e8a40 	call	e8a4 <__malloc_unlock>
    8bec:	9005883a 	mov	r2,r18
    8bf0:	dfc00917 	ldw	ra,36(sp)
    8bf4:	df000817 	ldw	fp,32(sp)
    8bf8:	ddc00717 	ldw	r23,28(sp)
    8bfc:	dd800617 	ldw	r22,24(sp)
    8c00:	dd400517 	ldw	r21,20(sp)
    8c04:	dd000417 	ldw	r20,16(sp)
    8c08:	dcc00317 	ldw	r19,12(sp)
    8c0c:	dc800217 	ldw	r18,8(sp)
    8c10:	dc400117 	ldw	r17,4(sp)
    8c14:	dc000017 	ldw	r16,0(sp)
    8c18:	dec00a04 	addi	sp,sp,40
    8c1c:	f800283a 	ret
    8c20:	017fff04 	movi	r5,-4
    8c24:	414a703a 	and	r5,r8,r5
    8c28:	814d883a 	add	r6,r16,r5
    8c2c:	30c01f16 	blt	r6,r3,8cac <_realloc_r+0x22c>
    8c30:	20800317 	ldw	r2,12(r4)
    8c34:	20c00217 	ldw	r3,8(r4)
    8c38:	a825883a 	mov	r18,r21
    8c3c:	3021883a 	mov	r16,r6
    8c40:	18800315 	stw	r2,12(r3)
    8c44:	10c00215 	stw	r3,8(r2)
    8c48:	003fdb06 	br	8bb8 <__alt_data_end+0xf8008bb8>
    8c4c:	00800304 	movi	r2,12
    8c50:	a0800015 	stw	r2,0(r20)
    8c54:	0005883a 	mov	r2,zero
    8c58:	003fe506 	br	8bf0 <__alt_data_end+0xf8008bf0>
    8c5c:	98c00117 	ldw	r3,4(r19)
    8c60:	9c4b883a 	add	r5,r19,r17
    8c64:	11000054 	ori	r4,r2,1
    8c68:	18c0004c 	andi	r3,r3,1
    8c6c:	1c62b03a 	or	r17,r3,r17
    8c70:	9c400115 	stw	r17,4(r19)
    8c74:	29000115 	stw	r4,4(r5)
    8c78:	2885883a 	add	r2,r5,r2
    8c7c:	10c00117 	ldw	r3,4(r2)
    8c80:	29400204 	addi	r5,r5,8
    8c84:	a009883a 	mov	r4,r20
    8c88:	18c00054 	ori	r3,r3,1
    8c8c:	10c00115 	stw	r3,4(r2)
    8c90:	00069e80 	call	69e8 <_free_r>
    8c94:	003fd306 	br	8be4 <__alt_data_end+0xf8008be4>
    8c98:	017fff04 	movi	r5,-4
    8c9c:	414a703a 	and	r5,r8,r5
    8ca0:	89800404 	addi	r6,r17,16
    8ca4:	8151883a 	add	r8,r16,r5
    8ca8:	4180590e 	bge	r8,r6,8e10 <_realloc_r+0x390>
    8cac:	1080004c 	andi	r2,r2,1
    8cb0:	103f9e1e 	bne	r2,zero,8b2c <__alt_data_end+0xf8008b2c>
    8cb4:	adbffe17 	ldw	r22,-8(r21)
    8cb8:	00bfff04 	movi	r2,-4
    8cbc:	9dadc83a 	sub	r22,r19,r22
    8cc0:	b1800117 	ldw	r6,4(r22)
    8cc4:	3084703a 	and	r2,r6,r2
    8cc8:	20002026 	beq	r4,zero,8d4c <_realloc_r+0x2cc>
    8ccc:	80af883a 	add	r23,r16,r2
    8cd0:	b96f883a 	add	r23,r23,r5
    8cd4:	21c05f26 	beq	r4,r7,8e54 <_realloc_r+0x3d4>
    8cd8:	b8c01c16 	blt	r23,r3,8d4c <_realloc_r+0x2cc>
    8cdc:	20800317 	ldw	r2,12(r4)
    8ce0:	20c00217 	ldw	r3,8(r4)
    8ce4:	81bfff04 	addi	r6,r16,-4
    8ce8:	01000904 	movi	r4,36
    8cec:	18800315 	stw	r2,12(r3)
    8cf0:	10c00215 	stw	r3,8(r2)
    8cf4:	b0c00217 	ldw	r3,8(r22)
    8cf8:	b0800317 	ldw	r2,12(r22)
    8cfc:	b4800204 	addi	r18,r22,8
    8d00:	18800315 	stw	r2,12(r3)
    8d04:	10c00215 	stw	r3,8(r2)
    8d08:	21801b36 	bltu	r4,r6,8d78 <_realloc_r+0x2f8>
    8d0c:	008004c4 	movi	r2,19
    8d10:	1180352e 	bgeu	r2,r6,8de8 <_realloc_r+0x368>
    8d14:	a8800017 	ldw	r2,0(r21)
    8d18:	b0800215 	stw	r2,8(r22)
    8d1c:	a8800117 	ldw	r2,4(r21)
    8d20:	b0800315 	stw	r2,12(r22)
    8d24:	008006c4 	movi	r2,27
    8d28:	11807f36 	bltu	r2,r6,8f28 <_realloc_r+0x4a8>
    8d2c:	b0800404 	addi	r2,r22,16
    8d30:	ad400204 	addi	r21,r21,8
    8d34:	00002d06 	br	8dec <_realloc_r+0x36c>
    8d38:	adbffe17 	ldw	r22,-8(r21)
    8d3c:	00bfff04 	movi	r2,-4
    8d40:	9dadc83a 	sub	r22,r19,r22
    8d44:	b1000117 	ldw	r4,4(r22)
    8d48:	2084703a 	and	r2,r4,r2
    8d4c:	b03f7726 	beq	r22,zero,8b2c <__alt_data_end+0xf8008b2c>
    8d50:	80af883a 	add	r23,r16,r2
    8d54:	b8ff7516 	blt	r23,r3,8b2c <__alt_data_end+0xf8008b2c>
    8d58:	b0800317 	ldw	r2,12(r22)
    8d5c:	b0c00217 	ldw	r3,8(r22)
    8d60:	81bfff04 	addi	r6,r16,-4
    8d64:	01000904 	movi	r4,36
    8d68:	18800315 	stw	r2,12(r3)
    8d6c:	10c00215 	stw	r3,8(r2)
    8d70:	b4800204 	addi	r18,r22,8
    8d74:	21bfe52e 	bgeu	r4,r6,8d0c <__alt_data_end+0xf8008d0c>
    8d78:	a80b883a 	mov	r5,r21
    8d7c:	9009883a 	mov	r4,r18
    8d80:	00078000 	call	7800 <memmove>
    8d84:	b821883a 	mov	r16,r23
    8d88:	b027883a 	mov	r19,r22
    8d8c:	003f8a06 	br	8bb8 <__alt_data_end+0xf8008bb8>
    8d90:	300b883a 	mov	r5,r6
    8d94:	dfc00917 	ldw	ra,36(sp)
    8d98:	df000817 	ldw	fp,32(sp)
    8d9c:	ddc00717 	ldw	r23,28(sp)
    8da0:	dd800617 	ldw	r22,24(sp)
    8da4:	dd400517 	ldw	r21,20(sp)
    8da8:	dd000417 	ldw	r20,16(sp)
    8dac:	dcc00317 	ldw	r19,12(sp)
    8db0:	dc800217 	ldw	r18,8(sp)
    8db4:	dc400117 	ldw	r17,4(sp)
    8db8:	dc000017 	ldw	r16,0(sp)
    8dbc:	dec00a04 	addi	sp,sp,40
    8dc0:	0001b981 	jmpi	1b98 <_malloc_r>
    8dc4:	a8c00017 	ldw	r3,0(r21)
    8dc8:	90c00015 	stw	r3,0(r18)
    8dcc:	a8c00117 	ldw	r3,4(r21)
    8dd0:	90c00115 	stw	r3,4(r18)
    8dd4:	00c006c4 	movi	r3,27
    8dd8:	19804536 	bltu	r3,r6,8ef0 <_realloc_r+0x470>
    8ddc:	90800204 	addi	r2,r18,8
    8de0:	a8c00204 	addi	r3,r21,8
    8de4:	003f6306 	br	8b74 <__alt_data_end+0xf8008b74>
    8de8:	9005883a 	mov	r2,r18
    8dec:	a8c00017 	ldw	r3,0(r21)
    8df0:	b821883a 	mov	r16,r23
    8df4:	b027883a 	mov	r19,r22
    8df8:	10c00015 	stw	r3,0(r2)
    8dfc:	a8c00117 	ldw	r3,4(r21)
    8e00:	10c00115 	stw	r3,4(r2)
    8e04:	a8c00217 	ldw	r3,8(r21)
    8e08:	10c00215 	stw	r3,8(r2)
    8e0c:	003f6a06 	br	8bb8 <__alt_data_end+0xf8008bb8>
    8e10:	9c67883a 	add	r19,r19,r17
    8e14:	4445c83a 	sub	r2,r8,r17
    8e18:	e4c00215 	stw	r19,8(fp)
    8e1c:	10800054 	ori	r2,r2,1
    8e20:	98800115 	stw	r2,4(r19)
    8e24:	a8bfff17 	ldw	r2,-4(r21)
    8e28:	a009883a 	mov	r4,r20
    8e2c:	1080004c 	andi	r2,r2,1
    8e30:	1462b03a 	or	r17,r2,r17
    8e34:	ac7fff15 	stw	r17,-4(r21)
    8e38:	000e8a40 	call	e8a4 <__malloc_unlock>
    8e3c:	a805883a 	mov	r2,r21
    8e40:	003f6b06 	br	8bf0 <__alt_data_end+0xf8008bf0>
    8e44:	a80b883a 	mov	r5,r21
    8e48:	9009883a 	mov	r4,r18
    8e4c:	00078000 	call	7800 <memmove>
    8e50:	003f4e06 	br	8b8c <__alt_data_end+0xf8008b8c>
    8e54:	89000404 	addi	r4,r17,16
    8e58:	b93fbc16 	blt	r23,r4,8d4c <__alt_data_end+0xf8008d4c>
    8e5c:	b0800317 	ldw	r2,12(r22)
    8e60:	b0c00217 	ldw	r3,8(r22)
    8e64:	81bfff04 	addi	r6,r16,-4
    8e68:	01000904 	movi	r4,36
    8e6c:	18800315 	stw	r2,12(r3)
    8e70:	10c00215 	stw	r3,8(r2)
    8e74:	b4800204 	addi	r18,r22,8
    8e78:	21804336 	bltu	r4,r6,8f88 <_realloc_r+0x508>
    8e7c:	008004c4 	movi	r2,19
    8e80:	11803f2e 	bgeu	r2,r6,8f80 <_realloc_r+0x500>
    8e84:	a8800017 	ldw	r2,0(r21)
    8e88:	b0800215 	stw	r2,8(r22)
    8e8c:	a8800117 	ldw	r2,4(r21)
    8e90:	b0800315 	stw	r2,12(r22)
    8e94:	008006c4 	movi	r2,27
    8e98:	11803f36 	bltu	r2,r6,8f98 <_realloc_r+0x518>
    8e9c:	b0800404 	addi	r2,r22,16
    8ea0:	ad400204 	addi	r21,r21,8
    8ea4:	a8c00017 	ldw	r3,0(r21)
    8ea8:	10c00015 	stw	r3,0(r2)
    8eac:	a8c00117 	ldw	r3,4(r21)
    8eb0:	10c00115 	stw	r3,4(r2)
    8eb4:	a8c00217 	ldw	r3,8(r21)
    8eb8:	10c00215 	stw	r3,8(r2)
    8ebc:	b447883a 	add	r3,r22,r17
    8ec0:	bc45c83a 	sub	r2,r23,r17
    8ec4:	e0c00215 	stw	r3,8(fp)
    8ec8:	10800054 	ori	r2,r2,1
    8ecc:	18800115 	stw	r2,4(r3)
    8ed0:	b0800117 	ldw	r2,4(r22)
    8ed4:	a009883a 	mov	r4,r20
    8ed8:	1080004c 	andi	r2,r2,1
    8edc:	1462b03a 	or	r17,r2,r17
    8ee0:	b4400115 	stw	r17,4(r22)
    8ee4:	000e8a40 	call	e8a4 <__malloc_unlock>
    8ee8:	9005883a 	mov	r2,r18
    8eec:	003f4006 	br	8bf0 <__alt_data_end+0xf8008bf0>
    8ef0:	a8c00217 	ldw	r3,8(r21)
    8ef4:	90c00215 	stw	r3,8(r18)
    8ef8:	a8c00317 	ldw	r3,12(r21)
    8efc:	90c00315 	stw	r3,12(r18)
    8f00:	30801126 	beq	r6,r2,8f48 <_realloc_r+0x4c8>
    8f04:	90800404 	addi	r2,r18,16
    8f08:	a8c00404 	addi	r3,r21,16
    8f0c:	003f1906 	br	8b74 <__alt_data_end+0xf8008b74>
    8f10:	90ffff17 	ldw	r3,-4(r18)
    8f14:	00bfff04 	movi	r2,-4
    8f18:	a825883a 	mov	r18,r21
    8f1c:	1884703a 	and	r2,r3,r2
    8f20:	80a1883a 	add	r16,r16,r2
    8f24:	003f2406 	br	8bb8 <__alt_data_end+0xf8008bb8>
    8f28:	a8800217 	ldw	r2,8(r21)
    8f2c:	b0800415 	stw	r2,16(r22)
    8f30:	a8800317 	ldw	r2,12(r21)
    8f34:	b0800515 	stw	r2,20(r22)
    8f38:	31000a26 	beq	r6,r4,8f64 <_realloc_r+0x4e4>
    8f3c:	b0800604 	addi	r2,r22,24
    8f40:	ad400404 	addi	r21,r21,16
    8f44:	003fa906 	br	8dec <__alt_data_end+0xf8008dec>
    8f48:	a9000417 	ldw	r4,16(r21)
    8f4c:	90800604 	addi	r2,r18,24
    8f50:	a8c00604 	addi	r3,r21,24
    8f54:	91000415 	stw	r4,16(r18)
    8f58:	a9000517 	ldw	r4,20(r21)
    8f5c:	91000515 	stw	r4,20(r18)
    8f60:	003f0406 	br	8b74 <__alt_data_end+0xf8008b74>
    8f64:	a8c00417 	ldw	r3,16(r21)
    8f68:	ad400604 	addi	r21,r21,24
    8f6c:	b0800804 	addi	r2,r22,32
    8f70:	b0c00615 	stw	r3,24(r22)
    8f74:	a8ffff17 	ldw	r3,-4(r21)
    8f78:	b0c00715 	stw	r3,28(r22)
    8f7c:	003f9b06 	br	8dec <__alt_data_end+0xf8008dec>
    8f80:	9005883a 	mov	r2,r18
    8f84:	003fc706 	br	8ea4 <__alt_data_end+0xf8008ea4>
    8f88:	a80b883a 	mov	r5,r21
    8f8c:	9009883a 	mov	r4,r18
    8f90:	00078000 	call	7800 <memmove>
    8f94:	003fc906 	br	8ebc <__alt_data_end+0xf8008ebc>
    8f98:	a8800217 	ldw	r2,8(r21)
    8f9c:	b0800415 	stw	r2,16(r22)
    8fa0:	a8800317 	ldw	r2,12(r21)
    8fa4:	b0800515 	stw	r2,20(r22)
    8fa8:	31000726 	beq	r6,r4,8fc8 <_realloc_r+0x548>
    8fac:	b0800604 	addi	r2,r22,24
    8fb0:	ad400404 	addi	r21,r21,16
    8fb4:	003fbb06 	br	8ea4 <__alt_data_end+0xf8008ea4>
    8fb8:	a009883a 	mov	r4,r20
    8fbc:	000e8a40 	call	e8a4 <__malloc_unlock>
    8fc0:	0005883a 	mov	r2,zero
    8fc4:	003f0a06 	br	8bf0 <__alt_data_end+0xf8008bf0>
    8fc8:	a8c00417 	ldw	r3,16(r21)
    8fcc:	ad400604 	addi	r21,r21,24
    8fd0:	b0800804 	addi	r2,r22,32
    8fd4:	b0c00615 	stw	r3,24(r22)
    8fd8:	a8ffff17 	ldw	r3,-4(r21)
    8fdc:	b0c00715 	stw	r3,28(r22)
    8fe0:	003fb006 	br	8ea4 <__alt_data_end+0xf8008ea4>

00008fe4 <__fpclassifyd>:
    8fe4:	00a00034 	movhi	r2,32768
    8fe8:	10bfffc4 	addi	r2,r2,-1
    8fec:	2884703a 	and	r2,r5,r2
    8ff0:	10000726 	beq	r2,zero,9010 <__fpclassifyd+0x2c>
    8ff4:	00fffc34 	movhi	r3,65520
    8ff8:	019ff834 	movhi	r6,32736
    8ffc:	28c7883a 	add	r3,r5,r3
    9000:	31bfffc4 	addi	r6,r6,-1
    9004:	30c00536 	bltu	r6,r3,901c <__fpclassifyd+0x38>
    9008:	00800104 	movi	r2,4
    900c:	f800283a 	ret
    9010:	2000021e 	bne	r4,zero,901c <__fpclassifyd+0x38>
    9014:	00800084 	movi	r2,2
    9018:	f800283a 	ret
    901c:	00dffc34 	movhi	r3,32752
    9020:	019ff834 	movhi	r6,32736
    9024:	28cb883a 	add	r5,r5,r3
    9028:	31bfffc4 	addi	r6,r6,-1
    902c:	317ff62e 	bgeu	r6,r5,9008 <__alt_data_end+0xf8009008>
    9030:	01400434 	movhi	r5,16
    9034:	297fffc4 	addi	r5,r5,-1
    9038:	28800236 	bltu	r5,r2,9044 <__fpclassifyd+0x60>
    903c:	008000c4 	movi	r2,3
    9040:	f800283a 	ret
    9044:	10c00226 	beq	r2,r3,9050 <__fpclassifyd+0x6c>
    9048:	0005883a 	mov	r2,zero
    904c:	f800283a 	ret
    9050:	2005003a 	cmpeq	r2,r4,zero
    9054:	f800283a 	ret

00009058 <__sread>:
    9058:	defffe04 	addi	sp,sp,-8
    905c:	dc000015 	stw	r16,0(sp)
    9060:	2821883a 	mov	r16,r5
    9064:	2940038f 	ldh	r5,14(r5)
    9068:	dfc00115 	stw	ra,4(sp)
    906c:	000ae4c0 	call	ae4c <_read_r>
    9070:	10000716 	blt	r2,zero,9090 <__sread+0x38>
    9074:	80c01417 	ldw	r3,80(r16)
    9078:	1887883a 	add	r3,r3,r2
    907c:	80c01415 	stw	r3,80(r16)
    9080:	dfc00117 	ldw	ra,4(sp)
    9084:	dc000017 	ldw	r16,0(sp)
    9088:	dec00204 	addi	sp,sp,8
    908c:	f800283a 	ret
    9090:	80c0030b 	ldhu	r3,12(r16)
    9094:	18fbffcc 	andi	r3,r3,61439
    9098:	80c0030d 	sth	r3,12(r16)
    909c:	dfc00117 	ldw	ra,4(sp)
    90a0:	dc000017 	ldw	r16,0(sp)
    90a4:	dec00204 	addi	sp,sp,8
    90a8:	f800283a 	ret

000090ac <__seofread>:
    90ac:	0005883a 	mov	r2,zero
    90b0:	f800283a 	ret

000090b4 <__swrite>:
    90b4:	2880030b 	ldhu	r2,12(r5)
    90b8:	defffb04 	addi	sp,sp,-20
    90bc:	dcc00315 	stw	r19,12(sp)
    90c0:	dc800215 	stw	r18,8(sp)
    90c4:	dc400115 	stw	r17,4(sp)
    90c8:	dc000015 	stw	r16,0(sp)
    90cc:	dfc00415 	stw	ra,16(sp)
    90d0:	10c0400c 	andi	r3,r2,256
    90d4:	2821883a 	mov	r16,r5
    90d8:	2023883a 	mov	r17,r4
    90dc:	3025883a 	mov	r18,r6
    90e0:	3827883a 	mov	r19,r7
    90e4:	18000526 	beq	r3,zero,90fc <__swrite+0x48>
    90e8:	2940038f 	ldh	r5,14(r5)
    90ec:	01c00084 	movi	r7,2
    90f0:	000d883a 	mov	r6,zero
    90f4:	000adec0 	call	adec <_lseek_r>
    90f8:	8080030b 	ldhu	r2,12(r16)
    90fc:	8140038f 	ldh	r5,14(r16)
    9100:	10bbffcc 	andi	r2,r2,61439
    9104:	980f883a 	mov	r7,r19
    9108:	900d883a 	mov	r6,r18
    910c:	8809883a 	mov	r4,r17
    9110:	8080030d 	sth	r2,12(r16)
    9114:	dfc00417 	ldw	ra,16(sp)
    9118:	dcc00317 	ldw	r19,12(sp)
    911c:	dc800217 	ldw	r18,8(sp)
    9120:	dc400117 	ldw	r17,4(sp)
    9124:	dc000017 	ldw	r16,0(sp)
    9128:	dec00504 	addi	sp,sp,20
    912c:	000a8b81 	jmpi	a8b8 <_write_r>

00009130 <__sseek>:
    9130:	defffe04 	addi	sp,sp,-8
    9134:	dc000015 	stw	r16,0(sp)
    9138:	2821883a 	mov	r16,r5
    913c:	2940038f 	ldh	r5,14(r5)
    9140:	dfc00115 	stw	ra,4(sp)
    9144:	000adec0 	call	adec <_lseek_r>
    9148:	00ffffc4 	movi	r3,-1
    914c:	10c00826 	beq	r2,r3,9170 <__sseek+0x40>
    9150:	80c0030b 	ldhu	r3,12(r16)
    9154:	80801415 	stw	r2,80(r16)
    9158:	18c40014 	ori	r3,r3,4096
    915c:	80c0030d 	sth	r3,12(r16)
    9160:	dfc00117 	ldw	ra,4(sp)
    9164:	dc000017 	ldw	r16,0(sp)
    9168:	dec00204 	addi	sp,sp,8
    916c:	f800283a 	ret
    9170:	80c0030b 	ldhu	r3,12(r16)
    9174:	18fbffcc 	andi	r3,r3,61439
    9178:	80c0030d 	sth	r3,12(r16)
    917c:	dfc00117 	ldw	ra,4(sp)
    9180:	dc000017 	ldw	r16,0(sp)
    9184:	dec00204 	addi	sp,sp,8
    9188:	f800283a 	ret

0000918c <__sclose>:
    918c:	2940038f 	ldh	r5,14(r5)
    9190:	000a9181 	jmpi	a918 <_close_r>

00009194 <strcmp>:
    9194:	2144b03a 	or	r2,r4,r5
    9198:	108000cc 	andi	r2,r2,3
    919c:	1000171e 	bne	r2,zero,91fc <strcmp+0x68>
    91a0:	20800017 	ldw	r2,0(r4)
    91a4:	28c00017 	ldw	r3,0(r5)
    91a8:	10c0141e 	bne	r2,r3,91fc <strcmp+0x68>
    91ac:	027fbff4 	movhi	r9,65279
    91b0:	4a7fbfc4 	addi	r9,r9,-257
    91b4:	0086303a 	nor	r3,zero,r2
    91b8:	02202074 	movhi	r8,32897
    91bc:	1245883a 	add	r2,r2,r9
    91c0:	42202004 	addi	r8,r8,-32640
    91c4:	10c4703a 	and	r2,r2,r3
    91c8:	1204703a 	and	r2,r2,r8
    91cc:	10000226 	beq	r2,zero,91d8 <strcmp+0x44>
    91d0:	00002306 	br	9260 <strcmp+0xcc>
    91d4:	1000221e 	bne	r2,zero,9260 <strcmp+0xcc>
    91d8:	21000104 	addi	r4,r4,4
    91dc:	20c00017 	ldw	r3,0(r4)
    91e0:	29400104 	addi	r5,r5,4
    91e4:	29800017 	ldw	r6,0(r5)
    91e8:	1a4f883a 	add	r7,r3,r9
    91ec:	00c4303a 	nor	r2,zero,r3
    91f0:	3884703a 	and	r2,r7,r2
    91f4:	1204703a 	and	r2,r2,r8
    91f8:	19bff626 	beq	r3,r6,91d4 <__alt_data_end+0xf80091d4>
    91fc:	20800003 	ldbu	r2,0(r4)
    9200:	10c03fcc 	andi	r3,r2,255
    9204:	18c0201c 	xori	r3,r3,128
    9208:	18ffe004 	addi	r3,r3,-128
    920c:	18000c26 	beq	r3,zero,9240 <strcmp+0xac>
    9210:	29800007 	ldb	r6,0(r5)
    9214:	19800326 	beq	r3,r6,9224 <strcmp+0x90>
    9218:	00001306 	br	9268 <strcmp+0xd4>
    921c:	29800007 	ldb	r6,0(r5)
    9220:	11800b1e 	bne	r2,r6,9250 <strcmp+0xbc>
    9224:	21000044 	addi	r4,r4,1
    9228:	20c00003 	ldbu	r3,0(r4)
    922c:	29400044 	addi	r5,r5,1
    9230:	18803fcc 	andi	r2,r3,255
    9234:	1080201c 	xori	r2,r2,128
    9238:	10bfe004 	addi	r2,r2,-128
    923c:	103ff71e 	bne	r2,zero,921c <__alt_data_end+0xf800921c>
    9240:	0007883a 	mov	r3,zero
    9244:	28800003 	ldbu	r2,0(r5)
    9248:	1885c83a 	sub	r2,r3,r2
    924c:	f800283a 	ret
    9250:	28800003 	ldbu	r2,0(r5)
    9254:	18c03fcc 	andi	r3,r3,255
    9258:	1885c83a 	sub	r2,r3,r2
    925c:	f800283a 	ret
    9260:	0005883a 	mov	r2,zero
    9264:	f800283a 	ret
    9268:	10c03fcc 	andi	r3,r2,255
    926c:	003ff506 	br	9244 <__alt_data_end+0xf8009244>

00009270 <__sprint_r.part.0>:
    9270:	28801917 	ldw	r2,100(r5)
    9274:	defff604 	addi	sp,sp,-40
    9278:	dd400515 	stw	r21,20(sp)
    927c:	dfc00915 	stw	ra,36(sp)
    9280:	df000815 	stw	fp,32(sp)
    9284:	ddc00715 	stw	r23,28(sp)
    9288:	dd800615 	stw	r22,24(sp)
    928c:	dd000415 	stw	r20,16(sp)
    9290:	dcc00315 	stw	r19,12(sp)
    9294:	dc800215 	stw	r18,8(sp)
    9298:	dc400115 	stw	r17,4(sp)
    929c:	dc000015 	stw	r16,0(sp)
    92a0:	1088000c 	andi	r2,r2,8192
    92a4:	302b883a 	mov	r21,r6
    92a8:	10002e26 	beq	r2,zero,9364 <__sprint_r.part.0+0xf4>
    92ac:	30800217 	ldw	r2,8(r6)
    92b0:	35800017 	ldw	r22,0(r6)
    92b4:	10002926 	beq	r2,zero,935c <__sprint_r.part.0+0xec>
    92b8:	2827883a 	mov	r19,r5
    92bc:	2029883a 	mov	r20,r4
    92c0:	b5c00104 	addi	r23,r22,4
    92c4:	04bfffc4 	movi	r18,-1
    92c8:	bc400017 	ldw	r17,0(r23)
    92cc:	b4000017 	ldw	r16,0(r22)
    92d0:	0039883a 	mov	fp,zero
    92d4:	8822d0ba 	srli	r17,r17,2
    92d8:	8800031e 	bne	r17,zero,92e8 <__sprint_r.part.0+0x78>
    92dc:	00001806 	br	9340 <__sprint_r.part.0+0xd0>
    92e0:	84000104 	addi	r16,r16,4
    92e4:	8f001526 	beq	r17,fp,933c <__sprint_r.part.0+0xcc>
    92e8:	81400017 	ldw	r5,0(r16)
    92ec:	980d883a 	mov	r6,r19
    92f0:	a009883a 	mov	r4,r20
    92f4:	000ac980 	call	ac98 <_fputwc_r>
    92f8:	e7000044 	addi	fp,fp,1
    92fc:	14bff81e 	bne	r2,r18,92e0 <__alt_data_end+0xf80092e0>
    9300:	9005883a 	mov	r2,r18
    9304:	a8000215 	stw	zero,8(r21)
    9308:	a8000115 	stw	zero,4(r21)
    930c:	dfc00917 	ldw	ra,36(sp)
    9310:	df000817 	ldw	fp,32(sp)
    9314:	ddc00717 	ldw	r23,28(sp)
    9318:	dd800617 	ldw	r22,24(sp)
    931c:	dd400517 	ldw	r21,20(sp)
    9320:	dd000417 	ldw	r20,16(sp)
    9324:	dcc00317 	ldw	r19,12(sp)
    9328:	dc800217 	ldw	r18,8(sp)
    932c:	dc400117 	ldw	r17,4(sp)
    9330:	dc000017 	ldw	r16,0(sp)
    9334:	dec00a04 	addi	sp,sp,40
    9338:	f800283a 	ret
    933c:	a8800217 	ldw	r2,8(r21)
    9340:	8c63883a 	add	r17,r17,r17
    9344:	8c63883a 	add	r17,r17,r17
    9348:	1445c83a 	sub	r2,r2,r17
    934c:	a8800215 	stw	r2,8(r21)
    9350:	b5800204 	addi	r22,r22,8
    9354:	bdc00204 	addi	r23,r23,8
    9358:	103fdb1e 	bne	r2,zero,92c8 <__alt_data_end+0xf80092c8>
    935c:	0005883a 	mov	r2,zero
    9360:	003fe806 	br	9304 <__alt_data_end+0xf8009304>
    9364:	0006cf80 	call	6cf8 <__sfvwrite_r>
    9368:	003fe606 	br	9304 <__alt_data_end+0xf8009304>

0000936c <__sprint_r>:
    936c:	30c00217 	ldw	r3,8(r6)
    9370:	18000126 	beq	r3,zero,9378 <__sprint_r+0xc>
    9374:	00092701 	jmpi	9270 <__sprint_r.part.0>
    9378:	30000115 	stw	zero,4(r6)
    937c:	0005883a 	mov	r2,zero
    9380:	f800283a 	ret

00009384 <___vfiprintf_internal_r>:
    9384:	deffc904 	addi	sp,sp,-220
    9388:	df003515 	stw	fp,212(sp)
    938c:	dd003115 	stw	r20,196(sp)
    9390:	dfc03615 	stw	ra,216(sp)
    9394:	ddc03415 	stw	r23,208(sp)
    9398:	dd803315 	stw	r22,204(sp)
    939c:	dd403215 	stw	r21,200(sp)
    93a0:	dcc03015 	stw	r19,192(sp)
    93a4:	dc802f15 	stw	r18,188(sp)
    93a8:	dc402e15 	stw	r17,184(sp)
    93ac:	dc002d15 	stw	r16,180(sp)
    93b0:	d9002015 	stw	r4,128(sp)
    93b4:	d9c02215 	stw	r7,136(sp)
    93b8:	2829883a 	mov	r20,r5
    93bc:	3039883a 	mov	fp,r6
    93c0:	20000226 	beq	r4,zero,93cc <___vfiprintf_internal_r+0x48>
    93c4:	20800e17 	ldw	r2,56(r4)
    93c8:	1000cf26 	beq	r2,zero,9708 <___vfiprintf_internal_r+0x384>
    93cc:	a080030b 	ldhu	r2,12(r20)
    93d0:	10c8000c 	andi	r3,r2,8192
    93d4:	1800061e 	bne	r3,zero,93f0 <___vfiprintf_internal_r+0x6c>
    93d8:	a1001917 	ldw	r4,100(r20)
    93dc:	00f7ffc4 	movi	r3,-8193
    93e0:	10880014 	ori	r2,r2,8192
    93e4:	20c6703a 	and	r3,r4,r3
    93e8:	a080030d 	sth	r2,12(r20)
    93ec:	a0c01915 	stw	r3,100(r20)
    93f0:	10c0020c 	andi	r3,r2,8
    93f4:	1800a926 	beq	r3,zero,969c <___vfiprintf_internal_r+0x318>
    93f8:	a0c00417 	ldw	r3,16(r20)
    93fc:	1800a726 	beq	r3,zero,969c <___vfiprintf_internal_r+0x318>
    9400:	1080068c 	andi	r2,r2,26
    9404:	00c00284 	movi	r3,10
    9408:	10c0ac26 	beq	r2,r3,96bc <___vfiprintf_internal_r+0x338>
    940c:	da801a04 	addi	r10,sp,104
    9410:	da801e15 	stw	r10,120(sp)
    9414:	d8801e17 	ldw	r2,120(sp)
    9418:	da8019c4 	addi	r10,sp,103
    941c:	05800074 	movhi	r22,1
    9420:	05c00074 	movhi	r23,1
    9424:	da801f15 	stw	r10,124(sp)
    9428:	1295c83a 	sub	r10,r2,r10
    942c:	b5885f04 	addi	r22,r22,8572
    9430:	bdc85b04 	addi	r23,r23,8556
    9434:	dec01a15 	stw	sp,104(sp)
    9438:	d8001c15 	stw	zero,112(sp)
    943c:	d8001b15 	stw	zero,108(sp)
    9440:	d8002615 	stw	zero,152(sp)
    9444:	d8002315 	stw	zero,140(sp)
    9448:	da802715 	stw	r10,156(sp)
    944c:	d811883a 	mov	r8,sp
    9450:	dd002115 	stw	r20,132(sp)
    9454:	e021883a 	mov	r16,fp
    9458:	80800007 	ldb	r2,0(r16)
    945c:	1003ea26 	beq	r2,zero,a408 <___vfiprintf_internal_r+0x1084>
    9460:	00c00944 	movi	r3,37
    9464:	8025883a 	mov	r18,r16
    9468:	10c0021e 	bne	r2,r3,9474 <___vfiprintf_internal_r+0xf0>
    946c:	00001606 	br	94c8 <___vfiprintf_internal_r+0x144>
    9470:	10c00326 	beq	r2,r3,9480 <___vfiprintf_internal_r+0xfc>
    9474:	94800044 	addi	r18,r18,1
    9478:	90800007 	ldb	r2,0(r18)
    947c:	103ffc1e 	bne	r2,zero,9470 <__alt_data_end+0xf8009470>
    9480:	9423c83a 	sub	r17,r18,r16
    9484:	88001026 	beq	r17,zero,94c8 <___vfiprintf_internal_r+0x144>
    9488:	d8c01c17 	ldw	r3,112(sp)
    948c:	d8801b17 	ldw	r2,108(sp)
    9490:	44000015 	stw	r16,0(r8)
    9494:	88c7883a 	add	r3,r17,r3
    9498:	10800044 	addi	r2,r2,1
    949c:	44400115 	stw	r17,4(r8)
    94a0:	d8c01c15 	stw	r3,112(sp)
    94a4:	d8801b15 	stw	r2,108(sp)
    94a8:	010001c4 	movi	r4,7
    94ac:	2080760e 	bge	r4,r2,9688 <___vfiprintf_internal_r+0x304>
    94b0:	1803821e 	bne	r3,zero,a2bc <___vfiprintf_internal_r+0xf38>
    94b4:	da802317 	ldw	r10,140(sp)
    94b8:	d8001b15 	stw	zero,108(sp)
    94bc:	d811883a 	mov	r8,sp
    94c0:	5455883a 	add	r10,r10,r17
    94c4:	da802315 	stw	r10,140(sp)
    94c8:	90800007 	ldb	r2,0(r18)
    94cc:	10044626 	beq	r2,zero,a5e8 <___vfiprintf_internal_r+0x1264>
    94d0:	90c00047 	ldb	r3,1(r18)
    94d4:	94000044 	addi	r16,r18,1
    94d8:	d8001d85 	stb	zero,118(sp)
    94dc:	0009883a 	mov	r4,zero
    94e0:	000f883a 	mov	r7,zero
    94e4:	027fffc4 	movi	r9,-1
    94e8:	0023883a 	mov	r17,zero
    94ec:	0029883a 	mov	r20,zero
    94f0:	01401604 	movi	r5,88
    94f4:	01800244 	movi	r6,9
    94f8:	03400a84 	movi	r13,42
    94fc:	03001b04 	movi	r12,108
    9500:	84000044 	addi	r16,r16,1
    9504:	18bff804 	addi	r2,r3,-32
    9508:	28827336 	bltu	r5,r2,9ed8 <___vfiprintf_internal_r+0xb54>
    950c:	100490ba 	slli	r2,r2,2
    9510:	02800074 	movhi	r10,1
    9514:	52a54904 	addi	r10,r10,-27356
    9518:	1285883a 	add	r2,r2,r10
    951c:	10800017 	ldw	r2,0(r2)
    9520:	1000683a 	jmp	r2
    9524:	00009c0c 	andi	zero,zero,624
    9528:	00009ed8 	cmpnei	zero,zero,635
    952c:	00009ed8 	cmpnei	zero,zero,635
    9530:	00009c2c 	andhi	zero,zero,624
    9534:	00009ed8 	cmpnei	zero,zero,635
    9538:	00009ed8 	cmpnei	zero,zero,635
    953c:	00009ed8 	cmpnei	zero,zero,635
    9540:	00009ed8 	cmpnei	zero,zero,635
    9544:	00009ed8 	cmpnei	zero,zero,635
    9548:	00009ed8 	cmpnei	zero,zero,635
    954c:	00009e14 	movui	zero,632
    9550:	00009e30 	cmpltui	zero,zero,632
    9554:	00009ed8 	cmpnei	zero,zero,635
    9558:	00009718 	cmpnei	zero,zero,604
    955c:	00009e40 	call	9e4 <usb_send_data+0x104>
    9560:	00009ed8 	cmpnei	zero,zero,635
    9564:	00009c38 	rdprs	zero,zero,624
    9568:	00009c44 	movi	zero,625
    956c:	00009c44 	movi	zero,625
    9570:	00009c44 	movi	zero,625
    9574:	00009c44 	movi	zero,625
    9578:	00009c44 	movi	zero,625
    957c:	00009c44 	movi	zero,625
    9580:	00009c44 	movi	zero,625
    9584:	00009c44 	movi	zero,625
    9588:	00009c44 	movi	zero,625
    958c:	00009ed8 	cmpnei	zero,zero,635
    9590:	00009ed8 	cmpnei	zero,zero,635
    9594:	00009ed8 	cmpnei	zero,zero,635
    9598:	00009ed8 	cmpnei	zero,zero,635
    959c:	00009ed8 	cmpnei	zero,zero,635
    95a0:	00009ed8 	cmpnei	zero,zero,635
    95a4:	00009ed8 	cmpnei	zero,zero,635
    95a8:	00009ed8 	cmpnei	zero,zero,635
    95ac:	00009ed8 	cmpnei	zero,zero,635
    95b0:	00009ed8 	cmpnei	zero,zero,635
    95b4:	00009c70 	cmpltui	zero,zero,625
    95b8:	00009ed8 	cmpnei	zero,zero,635
    95bc:	00009ed8 	cmpnei	zero,zero,635
    95c0:	00009ed8 	cmpnei	zero,zero,635
    95c4:	00009ed8 	cmpnei	zero,zero,635
    95c8:	00009ed8 	cmpnei	zero,zero,635
    95cc:	00009ed8 	cmpnei	zero,zero,635
    95d0:	00009ed8 	cmpnei	zero,zero,635
    95d4:	00009ed8 	cmpnei	zero,zero,635
    95d8:	00009ed8 	cmpnei	zero,zero,635
    95dc:	00009ed8 	cmpnei	zero,zero,635
    95e0:	00009ca8 	cmpgeui	zero,zero,626
    95e4:	00009ed8 	cmpnei	zero,zero,635
    95e8:	00009ed8 	cmpnei	zero,zero,635
    95ec:	00009ed8 	cmpnei	zero,zero,635
    95f0:	00009ed8 	cmpnei	zero,zero,635
    95f4:	00009ed8 	cmpnei	zero,zero,635
    95f8:	00009d00 	call	9d0 <usb_send_data+0xf0>
    95fc:	00009ed8 	cmpnei	zero,zero,635
    9600:	00009ed8 	cmpnei	zero,zero,635
    9604:	00009d70 	cmpltui	zero,zero,629
    9608:	00009ed8 	cmpnei	zero,zero,635
    960c:	00009ed8 	cmpnei	zero,zero,635
    9610:	00009ed8 	cmpnei	zero,zero,635
    9614:	00009ed8 	cmpnei	zero,zero,635
    9618:	00009ed8 	cmpnei	zero,zero,635
    961c:	00009ed8 	cmpnei	zero,zero,635
    9620:	00009ed8 	cmpnei	zero,zero,635
    9624:	00009ed8 	cmpnei	zero,zero,635
    9628:	00009ed8 	cmpnei	zero,zero,635
    962c:	00009ed8 	cmpnei	zero,zero,635
    9630:	00009b1c 	xori	zero,zero,620
    9634:	00009b48 	cmpgei	zero,zero,621
    9638:	00009ed8 	cmpnei	zero,zero,635
    963c:	00009ed8 	cmpnei	zero,zero,635
    9640:	00009ed8 	cmpnei	zero,zero,635
    9644:	00009e80 	call	9e8 <usb_send_data+0x108>
    9648:	00009b48 	cmpgei	zero,zero,621
    964c:	00009ed8 	cmpnei	zero,zero,635
    9650:	00009ed8 	cmpnei	zero,zero,635
    9654:	000099dc 	xori	zero,zero,615
    9658:	00009ed8 	cmpnei	zero,zero,635
    965c:	000099ec 	andhi	zero,zero,615
    9660:	00009a28 	cmpgeui	zero,zero,616
    9664:	00009724 	muli	zero,zero,604
    9668:	000099d0 	cmplti	zero,zero,615
    966c:	00009ed8 	cmpnei	zero,zero,635
    9670:	00009dac 	andhi	zero,zero,630
    9674:	00009ed8 	cmpnei	zero,zero,635
    9678:	00009e04 	movi	zero,632
    967c:	00009ed8 	cmpnei	zero,zero,635
    9680:	00009ed8 	cmpnei	zero,zero,635
    9684:	00009ac8 	cmpgei	zero,zero,619
    9688:	42000204 	addi	r8,r8,8
    968c:	da802317 	ldw	r10,140(sp)
    9690:	5455883a 	add	r10,r10,r17
    9694:	da802315 	stw	r10,140(sp)
    9698:	003f8b06 	br	94c8 <__alt_data_end+0xf80094c8>
    969c:	d9002017 	ldw	r4,128(sp)
    96a0:	a00b883a 	mov	r5,r20
    96a4:	00048a00 	call	48a0 <__swsetup_r>
    96a8:	1003b11e 	bne	r2,zero,a570 <___vfiprintf_internal_r+0x11ec>
    96ac:	a080030b 	ldhu	r2,12(r20)
    96b0:	00c00284 	movi	r3,10
    96b4:	1080068c 	andi	r2,r2,26
    96b8:	10ff541e 	bne	r2,r3,940c <__alt_data_end+0xf800940c>
    96bc:	a080038f 	ldh	r2,14(r20)
    96c0:	103f5216 	blt	r2,zero,940c <__alt_data_end+0xf800940c>
    96c4:	d9c02217 	ldw	r7,136(sp)
    96c8:	d9002017 	ldw	r4,128(sp)
    96cc:	e00d883a 	mov	r6,fp
    96d0:	a00b883a 	mov	r5,r20
    96d4:	000a7fc0 	call	a7fc <__sbprintf>
    96d8:	dfc03617 	ldw	ra,216(sp)
    96dc:	df003517 	ldw	fp,212(sp)
    96e0:	ddc03417 	ldw	r23,208(sp)
    96e4:	dd803317 	ldw	r22,204(sp)
    96e8:	dd403217 	ldw	r21,200(sp)
    96ec:	dd003117 	ldw	r20,196(sp)
    96f0:	dcc03017 	ldw	r19,192(sp)
    96f4:	dc802f17 	ldw	r18,188(sp)
    96f8:	dc402e17 	ldw	r17,184(sp)
    96fc:	dc002d17 	ldw	r16,180(sp)
    9700:	dec03704 	addi	sp,sp,220
    9704:	f800283a 	ret
    9708:	00068740 	call	6874 <__sinit>
    970c:	003f2f06 	br	93cc <__alt_data_end+0xf80093cc>
    9710:	0463c83a 	sub	r17,zero,r17
    9714:	d8802215 	stw	r2,136(sp)
    9718:	a5000114 	ori	r20,r20,4
    971c:	80c00007 	ldb	r3,0(r16)
    9720:	003f7706 	br	9500 <__alt_data_end+0xf8009500>
    9724:	00800c04 	movi	r2,48
    9728:	da802217 	ldw	r10,136(sp)
    972c:	d8801d05 	stb	r2,116(sp)
    9730:	00801e04 	movi	r2,120
    9734:	d8801d45 	stb	r2,117(sp)
    9738:	d8001d85 	stb	zero,118(sp)
    973c:	50c00104 	addi	r3,r10,4
    9740:	54800017 	ldw	r18,0(r10)
    9744:	0027883a 	mov	r19,zero
    9748:	a0800094 	ori	r2,r20,2
    974c:	48030b16 	blt	r9,zero,a37c <___vfiprintf_internal_r+0xff8>
    9750:	00bfdfc4 	movi	r2,-129
    9754:	a096703a 	and	r11,r20,r2
    9758:	d8c02215 	stw	r3,136(sp)
    975c:	5d000094 	ori	r20,r11,2
    9760:	90032b1e 	bne	r18,zero,a410 <___vfiprintf_internal_r+0x108c>
    9764:	00800074 	movhi	r2,1
    9768:	1087fa04 	addi	r2,r2,8168
    976c:	d8802615 	stw	r2,152(sp)
    9770:	0039883a 	mov	fp,zero
    9774:	48017b1e 	bne	r9,zero,9d64 <___vfiprintf_internal_r+0x9e0>
    9778:	0013883a 	mov	r9,zero
    977c:	0027883a 	mov	r19,zero
    9780:	dd401a04 	addi	r21,sp,104
    9784:	4825883a 	mov	r18,r9
    9788:	4cc0010e 	bge	r9,r19,9790 <___vfiprintf_internal_r+0x40c>
    978c:	9825883a 	mov	r18,r19
    9790:	e7003fcc 	andi	fp,fp,255
    9794:	e700201c 	xori	fp,fp,128
    9798:	e73fe004 	addi	fp,fp,-128
    979c:	e0000126 	beq	fp,zero,97a4 <___vfiprintf_internal_r+0x420>
    97a0:	94800044 	addi	r18,r18,1
    97a4:	a380008c 	andi	r14,r20,2
    97a8:	70000126 	beq	r14,zero,97b0 <___vfiprintf_internal_r+0x42c>
    97ac:	94800084 	addi	r18,r18,2
    97b0:	a700210c 	andi	fp,r20,132
    97b4:	e001df1e 	bne	fp,zero,9f34 <___vfiprintf_internal_r+0xbb0>
    97b8:	8c87c83a 	sub	r3,r17,r18
    97bc:	00c1dd0e 	bge	zero,r3,9f34 <___vfiprintf_internal_r+0xbb0>
    97c0:	01c00404 	movi	r7,16
    97c4:	d8801c17 	ldw	r2,112(sp)
    97c8:	38c3ad0e 	bge	r7,r3,a680 <___vfiprintf_internal_r+0x12fc>
    97cc:	02800074 	movhi	r10,1
    97d0:	52885f04 	addi	r10,r10,8572
    97d4:	dc002915 	stw	r16,164(sp)
    97d8:	d9801b17 	ldw	r6,108(sp)
    97dc:	da802415 	stw	r10,144(sp)
    97e0:	03c001c4 	movi	r15,7
    97e4:	da402515 	stw	r9,148(sp)
    97e8:	db802815 	stw	r14,160(sp)
    97ec:	1821883a 	mov	r16,r3
    97f0:	00000506 	br	9808 <___vfiprintf_internal_r+0x484>
    97f4:	31400084 	addi	r5,r6,2
    97f8:	42000204 	addi	r8,r8,8
    97fc:	200d883a 	mov	r6,r4
    9800:	843ffc04 	addi	r16,r16,-16
    9804:	3c000d0e 	bge	r7,r16,983c <___vfiprintf_internal_r+0x4b8>
    9808:	10800404 	addi	r2,r2,16
    980c:	31000044 	addi	r4,r6,1
    9810:	45800015 	stw	r22,0(r8)
    9814:	41c00115 	stw	r7,4(r8)
    9818:	d8801c15 	stw	r2,112(sp)
    981c:	d9001b15 	stw	r4,108(sp)
    9820:	793ff40e 	bge	r15,r4,97f4 <__alt_data_end+0xf80097f4>
    9824:	1001b51e 	bne	r2,zero,9efc <___vfiprintf_internal_r+0xb78>
    9828:	843ffc04 	addi	r16,r16,-16
    982c:	000d883a 	mov	r6,zero
    9830:	01400044 	movi	r5,1
    9834:	d811883a 	mov	r8,sp
    9838:	3c3ff316 	blt	r7,r16,9808 <__alt_data_end+0xf8009808>
    983c:	8007883a 	mov	r3,r16
    9840:	da402517 	ldw	r9,148(sp)
    9844:	db802817 	ldw	r14,160(sp)
    9848:	dc002917 	ldw	r16,164(sp)
    984c:	da802417 	ldw	r10,144(sp)
    9850:	1885883a 	add	r2,r3,r2
    9854:	40c00115 	stw	r3,4(r8)
    9858:	42800015 	stw	r10,0(r8)
    985c:	d8801c15 	stw	r2,112(sp)
    9860:	d9401b15 	stw	r5,108(sp)
    9864:	00c001c4 	movi	r3,7
    9868:	19426016 	blt	r3,r5,a1ec <___vfiprintf_internal_r+0xe68>
    986c:	d8c01d87 	ldb	r3,118(sp)
    9870:	42000204 	addi	r8,r8,8
    9874:	29000044 	addi	r4,r5,1
    9878:	1801b31e 	bne	r3,zero,9f48 <___vfiprintf_internal_r+0xbc4>
    987c:	7001c026 	beq	r14,zero,9f80 <___vfiprintf_internal_r+0xbfc>
    9880:	d8c01d04 	addi	r3,sp,116
    9884:	10800084 	addi	r2,r2,2
    9888:	40c00015 	stw	r3,0(r8)
    988c:	00c00084 	movi	r3,2
    9890:	40c00115 	stw	r3,4(r8)
    9894:	d8801c15 	stw	r2,112(sp)
    9898:	d9001b15 	stw	r4,108(sp)
    989c:	00c001c4 	movi	r3,7
    98a0:	1902650e 	bge	r3,r4,a238 <___vfiprintf_internal_r+0xeb4>
    98a4:	10029a1e 	bne	r2,zero,a310 <___vfiprintf_internal_r+0xf8c>
    98a8:	00c02004 	movi	r3,128
    98ac:	01000044 	movi	r4,1
    98b0:	000b883a 	mov	r5,zero
    98b4:	d811883a 	mov	r8,sp
    98b8:	e0c1b31e 	bne	fp,r3,9f88 <___vfiprintf_internal_r+0xc04>
    98bc:	8cb9c83a 	sub	fp,r17,r18
    98c0:	0701b10e 	bge	zero,fp,9f88 <___vfiprintf_internal_r+0xc04>
    98c4:	01c00404 	movi	r7,16
    98c8:	3f03890e 	bge	r7,fp,a6f0 <___vfiprintf_internal_r+0x136c>
    98cc:	00c00074 	movhi	r3,1
    98d0:	18c85b04 	addi	r3,r3,8556
    98d4:	d8c02415 	stw	r3,144(sp)
    98d8:	8007883a 	mov	r3,r16
    98dc:	034001c4 	movi	r13,7
    98e0:	e021883a 	mov	r16,fp
    98e4:	da402515 	stw	r9,148(sp)
    98e8:	1839883a 	mov	fp,r3
    98ec:	00000506 	br	9904 <___vfiprintf_internal_r+0x580>
    98f0:	29800084 	addi	r6,r5,2
    98f4:	42000204 	addi	r8,r8,8
    98f8:	180b883a 	mov	r5,r3
    98fc:	843ffc04 	addi	r16,r16,-16
    9900:	3c000d0e 	bge	r7,r16,9938 <___vfiprintf_internal_r+0x5b4>
    9904:	10800404 	addi	r2,r2,16
    9908:	28c00044 	addi	r3,r5,1
    990c:	45c00015 	stw	r23,0(r8)
    9910:	41c00115 	stw	r7,4(r8)
    9914:	d8801c15 	stw	r2,112(sp)
    9918:	d8c01b15 	stw	r3,108(sp)
    991c:	68fff40e 	bge	r13,r3,98f0 <__alt_data_end+0xf80098f0>
    9920:	1002241e 	bne	r2,zero,a1b4 <___vfiprintf_internal_r+0xe30>
    9924:	843ffc04 	addi	r16,r16,-16
    9928:	01800044 	movi	r6,1
    992c:	000b883a 	mov	r5,zero
    9930:	d811883a 	mov	r8,sp
    9934:	3c3ff316 	blt	r7,r16,9904 <__alt_data_end+0xf8009904>
    9938:	da402517 	ldw	r9,148(sp)
    993c:	e007883a 	mov	r3,fp
    9940:	8039883a 	mov	fp,r16
    9944:	1821883a 	mov	r16,r3
    9948:	d8c02417 	ldw	r3,144(sp)
    994c:	1705883a 	add	r2,r2,fp
    9950:	47000115 	stw	fp,4(r8)
    9954:	40c00015 	stw	r3,0(r8)
    9958:	d8801c15 	stw	r2,112(sp)
    995c:	d9801b15 	stw	r6,108(sp)
    9960:	00c001c4 	movi	r3,7
    9964:	19827616 	blt	r3,r6,a340 <___vfiprintf_internal_r+0xfbc>
    9968:	4cf9c83a 	sub	fp,r9,r19
    996c:	42000204 	addi	r8,r8,8
    9970:	31000044 	addi	r4,r6,1
    9974:	300b883a 	mov	r5,r6
    9978:	07018516 	blt	zero,fp,9f90 <___vfiprintf_internal_r+0xc0c>
    997c:	9885883a 	add	r2,r19,r2
    9980:	45400015 	stw	r21,0(r8)
    9984:	44c00115 	stw	r19,4(r8)
    9988:	d8801c15 	stw	r2,112(sp)
    998c:	d9001b15 	stw	r4,108(sp)
    9990:	00c001c4 	movi	r3,7
    9994:	1901dd0e 	bge	r3,r4,a10c <___vfiprintf_internal_r+0xd88>
    9998:	1002401e 	bne	r2,zero,a29c <___vfiprintf_internal_r+0xf18>
    999c:	d8001b15 	stw	zero,108(sp)
    99a0:	a2c0010c 	andi	r11,r20,4
    99a4:	58000226 	beq	r11,zero,99b0 <___vfiprintf_internal_r+0x62c>
    99a8:	8ca7c83a 	sub	r19,r17,r18
    99ac:	04c2f216 	blt	zero,r19,a578 <___vfiprintf_internal_r+0x11f4>
    99b0:	8c80010e 	bge	r17,r18,99b8 <___vfiprintf_internal_r+0x634>
    99b4:	9023883a 	mov	r17,r18
    99b8:	da802317 	ldw	r10,140(sp)
    99bc:	5455883a 	add	r10,r10,r17
    99c0:	da802315 	stw	r10,140(sp)
    99c4:	d8001b15 	stw	zero,108(sp)
    99c8:	d811883a 	mov	r8,sp
    99cc:	003ea206 	br	9458 <__alt_data_end+0xf8009458>
    99d0:	a5000814 	ori	r20,r20,32
    99d4:	80c00007 	ldb	r3,0(r16)
    99d8:	003ec906 	br	9500 <__alt_data_end+0xf8009500>
    99dc:	80c00007 	ldb	r3,0(r16)
    99e0:	1b030926 	beq	r3,r12,a608 <___vfiprintf_internal_r+0x1284>
    99e4:	a5000414 	ori	r20,r20,16
    99e8:	003ec506 	br	9500 <__alt_data_end+0xf8009500>
    99ec:	21003fcc 	andi	r4,r4,255
    99f0:	20035e1e 	bne	r4,zero,a76c <___vfiprintf_internal_r+0x13e8>
    99f4:	a080080c 	andi	r2,r20,32
    99f8:	1002a526 	beq	r2,zero,a490 <___vfiprintf_internal_r+0x110c>
    99fc:	da802217 	ldw	r10,136(sp)
    9a00:	50800017 	ldw	r2,0(r10)
    9a04:	da802317 	ldw	r10,140(sp)
    9a08:	5007d7fa 	srai	r3,r10,31
    9a0c:	da802217 	ldw	r10,136(sp)
    9a10:	10c00115 	stw	r3,4(r2)
    9a14:	52800104 	addi	r10,r10,4
    9a18:	da802215 	stw	r10,136(sp)
    9a1c:	da802317 	ldw	r10,140(sp)
    9a20:	12800015 	stw	r10,0(r2)
    9a24:	003e8c06 	br	9458 <__alt_data_end+0xf8009458>
    9a28:	21003fcc 	andi	r4,r4,255
    9a2c:	2003511e 	bne	r4,zero,a774 <___vfiprintf_internal_r+0x13f0>
    9a30:	a080080c 	andi	r2,r20,32
    9a34:	1000a126 	beq	r2,zero,9cbc <___vfiprintf_internal_r+0x938>
    9a38:	da802217 	ldw	r10,136(sp)
    9a3c:	d8001d85 	stb	zero,118(sp)
    9a40:	50800204 	addi	r2,r10,8
    9a44:	54800017 	ldw	r18,0(r10)
    9a48:	54c00117 	ldw	r19,4(r10)
    9a4c:	4802b416 	blt	r9,zero,a520 <___vfiprintf_internal_r+0x119c>
    9a50:	013fdfc4 	movi	r4,-129
    9a54:	94c6b03a 	or	r3,r18,r19
    9a58:	d8802215 	stw	r2,136(sp)
    9a5c:	a128703a 	and	r20,r20,r4
    9a60:	1800a226 	beq	r3,zero,9cec <___vfiprintf_internal_r+0x968>
    9a64:	0039883a 	mov	fp,zero
    9a68:	dd401a04 	addi	r21,sp,104
    9a6c:	9006d0fa 	srli	r3,r18,3
    9a70:	9808977a 	slli	r4,r19,29
    9a74:	9826d0fa 	srli	r19,r19,3
    9a78:	948001cc 	andi	r18,r18,7
    9a7c:	90800c04 	addi	r2,r18,48
    9a80:	ad7fffc4 	addi	r21,r21,-1
    9a84:	20e4b03a 	or	r18,r4,r3
    9a88:	a8800005 	stb	r2,0(r21)
    9a8c:	94c6b03a 	or	r3,r18,r19
    9a90:	183ff61e 	bne	r3,zero,9a6c <__alt_data_end+0xf8009a6c>
    9a94:	a0c0004c 	andi	r3,r20,1
    9a98:	18005926 	beq	r3,zero,9c00 <___vfiprintf_internal_r+0x87c>
    9a9c:	10803fcc 	andi	r2,r2,255
    9aa0:	1080201c 	xori	r2,r2,128
    9aa4:	10bfe004 	addi	r2,r2,-128
    9aa8:	00c00c04 	movi	r3,48
    9aac:	10c05426 	beq	r2,r3,9c00 <___vfiprintf_internal_r+0x87c>
    9ab0:	da801e17 	ldw	r10,120(sp)
    9ab4:	a8bfffc4 	addi	r2,r21,-1
    9ab8:	a8ffffc5 	stb	r3,-1(r21)
    9abc:	50a7c83a 	sub	r19,r10,r2
    9ac0:	102b883a 	mov	r21,r2
    9ac4:	003f2f06 	br	9784 <__alt_data_end+0xf8009784>
    9ac8:	21003fcc 	andi	r4,r4,255
    9acc:	2003421e 	bne	r4,zero,a7d8 <___vfiprintf_internal_r+0x1454>
    9ad0:	00800074 	movhi	r2,1
    9ad4:	1087fa04 	addi	r2,r2,8168
    9ad8:	d8802615 	stw	r2,152(sp)
    9adc:	a080080c 	andi	r2,r20,32
    9ae0:	1000aa26 	beq	r2,zero,9d8c <___vfiprintf_internal_r+0xa08>
    9ae4:	da802217 	ldw	r10,136(sp)
    9ae8:	54800017 	ldw	r18,0(r10)
    9aec:	54c00117 	ldw	r19,4(r10)
    9af0:	52800204 	addi	r10,r10,8
    9af4:	da802215 	stw	r10,136(sp)
    9af8:	a080004c 	andi	r2,r20,1
    9afc:	1001d226 	beq	r2,zero,a248 <___vfiprintf_internal_r+0xec4>
    9b00:	94c4b03a 	or	r2,r18,r19
    9b04:	1002351e 	bne	r2,zero,a3dc <___vfiprintf_internal_r+0x1058>
    9b08:	d8001d85 	stb	zero,118(sp)
    9b0c:	48022216 	blt	r9,zero,a398 <___vfiprintf_internal_r+0x1014>
    9b10:	00bfdfc4 	movi	r2,-129
    9b14:	a0a8703a 	and	r20,r20,r2
    9b18:	003f1506 	br	9770 <__alt_data_end+0xf8009770>
    9b1c:	da802217 	ldw	r10,136(sp)
    9b20:	04800044 	movi	r18,1
    9b24:	d8001d85 	stb	zero,118(sp)
    9b28:	50800017 	ldw	r2,0(r10)
    9b2c:	52800104 	addi	r10,r10,4
    9b30:	da802215 	stw	r10,136(sp)
    9b34:	d8801005 	stb	r2,64(sp)
    9b38:	9027883a 	mov	r19,r18
    9b3c:	dd401004 	addi	r21,sp,64
    9b40:	0013883a 	mov	r9,zero
    9b44:	003f1706 	br	97a4 <__alt_data_end+0xf80097a4>
    9b48:	21003fcc 	andi	r4,r4,255
    9b4c:	2003201e 	bne	r4,zero,a7d0 <___vfiprintf_internal_r+0x144c>
    9b50:	a080080c 	andi	r2,r20,32
    9b54:	10004b26 	beq	r2,zero,9c84 <___vfiprintf_internal_r+0x900>
    9b58:	da802217 	ldw	r10,136(sp)
    9b5c:	50800117 	ldw	r2,4(r10)
    9b60:	54800017 	ldw	r18,0(r10)
    9b64:	52800204 	addi	r10,r10,8
    9b68:	da802215 	stw	r10,136(sp)
    9b6c:	1027883a 	mov	r19,r2
    9b70:	10022c16 	blt	r2,zero,a424 <___vfiprintf_internal_r+0x10a0>
    9b74:	df001d83 	ldbu	fp,118(sp)
    9b78:	48007216 	blt	r9,zero,9d44 <___vfiprintf_internal_r+0x9c0>
    9b7c:	00ffdfc4 	movi	r3,-129
    9b80:	94c4b03a 	or	r2,r18,r19
    9b84:	a0e8703a 	and	r20,r20,r3
    9b88:	1000cc26 	beq	r2,zero,9ebc <___vfiprintf_internal_r+0xb38>
    9b8c:	98021026 	beq	r19,zero,a3d0 <___vfiprintf_internal_r+0x104c>
    9b90:	dc402415 	stw	r17,144(sp)
    9b94:	dc002515 	stw	r16,148(sp)
    9b98:	9823883a 	mov	r17,r19
    9b9c:	9021883a 	mov	r16,r18
    9ba0:	dd401a04 	addi	r21,sp,104
    9ba4:	4825883a 	mov	r18,r9
    9ba8:	4027883a 	mov	r19,r8
    9bac:	8009883a 	mov	r4,r16
    9bb0:	880b883a 	mov	r5,r17
    9bb4:	01800284 	movi	r6,10
    9bb8:	000f883a 	mov	r7,zero
    9bbc:	000b7640 	call	b764 <__umoddi3>
    9bc0:	10800c04 	addi	r2,r2,48
    9bc4:	ad7fffc4 	addi	r21,r21,-1
    9bc8:	8009883a 	mov	r4,r16
    9bcc:	880b883a 	mov	r5,r17
    9bd0:	a8800005 	stb	r2,0(r21)
    9bd4:	01800284 	movi	r6,10
    9bd8:	000f883a 	mov	r7,zero
    9bdc:	000b1ec0 	call	b1ec <__udivdi3>
    9be0:	1021883a 	mov	r16,r2
    9be4:	10c4b03a 	or	r2,r2,r3
    9be8:	1823883a 	mov	r17,r3
    9bec:	103fef1e 	bne	r2,zero,9bac <__alt_data_end+0xf8009bac>
    9bf0:	dc402417 	ldw	r17,144(sp)
    9bf4:	dc002517 	ldw	r16,148(sp)
    9bf8:	9013883a 	mov	r9,r18
    9bfc:	9811883a 	mov	r8,r19
    9c00:	da801e17 	ldw	r10,120(sp)
    9c04:	5567c83a 	sub	r19,r10,r21
    9c08:	003ede06 	br	9784 <__alt_data_end+0xf8009784>
    9c0c:	38803fcc 	andi	r2,r7,255
    9c10:	1080201c 	xori	r2,r2,128
    9c14:	10bfe004 	addi	r2,r2,-128
    9c18:	1002371e 	bne	r2,zero,a4f8 <___vfiprintf_internal_r+0x1174>
    9c1c:	01000044 	movi	r4,1
    9c20:	01c00804 	movi	r7,32
    9c24:	80c00007 	ldb	r3,0(r16)
    9c28:	003e3506 	br	9500 <__alt_data_end+0xf8009500>
    9c2c:	a5000054 	ori	r20,r20,1
    9c30:	80c00007 	ldb	r3,0(r16)
    9c34:	003e3206 	br	9500 <__alt_data_end+0xf8009500>
    9c38:	a5002014 	ori	r20,r20,128
    9c3c:	80c00007 	ldb	r3,0(r16)
    9c40:	003e2f06 	br	9500 <__alt_data_end+0xf8009500>
    9c44:	8015883a 	mov	r10,r16
    9c48:	0023883a 	mov	r17,zero
    9c4c:	18bff404 	addi	r2,r3,-48
    9c50:	50c00007 	ldb	r3,0(r10)
    9c54:	8c4002a4 	muli	r17,r17,10
    9c58:	84000044 	addi	r16,r16,1
    9c5c:	8015883a 	mov	r10,r16
    9c60:	1463883a 	add	r17,r2,r17
    9c64:	18bff404 	addi	r2,r3,-48
    9c68:	30bff92e 	bgeu	r6,r2,9c50 <__alt_data_end+0xf8009c50>
    9c6c:	003e2506 	br	9504 <__alt_data_end+0xf8009504>
    9c70:	21003fcc 	andi	r4,r4,255
    9c74:	2002d41e 	bne	r4,zero,a7c8 <___vfiprintf_internal_r+0x1444>
    9c78:	a5000414 	ori	r20,r20,16
    9c7c:	a080080c 	andi	r2,r20,32
    9c80:	103fb51e 	bne	r2,zero,9b58 <__alt_data_end+0xf8009b58>
    9c84:	a080040c 	andi	r2,r20,16
    9c88:	1001f826 	beq	r2,zero,a46c <___vfiprintf_internal_r+0x10e8>
    9c8c:	da802217 	ldw	r10,136(sp)
    9c90:	54800017 	ldw	r18,0(r10)
    9c94:	52800104 	addi	r10,r10,4
    9c98:	da802215 	stw	r10,136(sp)
    9c9c:	9027d7fa 	srai	r19,r18,31
    9ca0:	9805883a 	mov	r2,r19
    9ca4:	003fb206 	br	9b70 <__alt_data_end+0xf8009b70>
    9ca8:	21003fcc 	andi	r4,r4,255
    9cac:	2002c41e 	bne	r4,zero,a7c0 <___vfiprintf_internal_r+0x143c>
    9cb0:	a5000414 	ori	r20,r20,16
    9cb4:	a080080c 	andi	r2,r20,32
    9cb8:	103f5f1e 	bne	r2,zero,9a38 <__alt_data_end+0xf8009a38>
    9cbc:	a080040c 	andi	r2,r20,16
    9cc0:	10020f26 	beq	r2,zero,a500 <___vfiprintf_internal_r+0x117c>
    9cc4:	da802217 	ldw	r10,136(sp)
    9cc8:	d8001d85 	stb	zero,118(sp)
    9ccc:	0027883a 	mov	r19,zero
    9cd0:	50800104 	addi	r2,r10,4
    9cd4:	54800017 	ldw	r18,0(r10)
    9cd8:	48021116 	blt	r9,zero,a520 <___vfiprintf_internal_r+0x119c>
    9cdc:	00ffdfc4 	movi	r3,-129
    9ce0:	d8802215 	stw	r2,136(sp)
    9ce4:	a0e8703a 	and	r20,r20,r3
    9ce8:	903f5e1e 	bne	r18,zero,9a64 <__alt_data_end+0xf8009a64>
    9cec:	0039883a 	mov	fp,zero
    9cf0:	4802a626 	beq	r9,zero,a78c <___vfiprintf_internal_r+0x1408>
    9cf4:	0025883a 	mov	r18,zero
    9cf8:	0027883a 	mov	r19,zero
    9cfc:	003f5a06 	br	9a68 <__alt_data_end+0xf8009a68>
    9d00:	21003fcc 	andi	r4,r4,255
    9d04:	20029f1e 	bne	r4,zero,a784 <___vfiprintf_internal_r+0x1400>
    9d08:	a5000414 	ori	r20,r20,16
    9d0c:	a080080c 	andi	r2,r20,32
    9d10:	10005e1e 	bne	r2,zero,9e8c <___vfiprintf_internal_r+0xb08>
    9d14:	a080040c 	andi	r2,r20,16
    9d18:	1001a21e 	bne	r2,zero,a3a4 <___vfiprintf_internal_r+0x1020>
    9d1c:	a080100c 	andi	r2,r20,64
    9d20:	d8001d85 	stb	zero,118(sp)
    9d24:	da802217 	ldw	r10,136(sp)
    9d28:	1002231e 	bne	r2,zero,a5b8 <___vfiprintf_internal_r+0x1234>
    9d2c:	50800104 	addi	r2,r10,4
    9d30:	54800017 	ldw	r18,0(r10)
    9d34:	0027883a 	mov	r19,zero
    9d38:	4801a00e 	bge	r9,zero,a3bc <___vfiprintf_internal_r+0x1038>
    9d3c:	d8802215 	stw	r2,136(sp)
    9d40:	0039883a 	mov	fp,zero
    9d44:	94c4b03a 	or	r2,r18,r19
    9d48:	103f901e 	bne	r2,zero,9b8c <__alt_data_end+0xf8009b8c>
    9d4c:	00800044 	movi	r2,1
    9d50:	10803fcc 	andi	r2,r2,255
    9d54:	00c00044 	movi	r3,1
    9d58:	10c05926 	beq	r2,r3,9ec0 <___vfiprintf_internal_r+0xb3c>
    9d5c:	00c00084 	movi	r3,2
    9d60:	10ffe41e 	bne	r2,r3,9cf4 <__alt_data_end+0xf8009cf4>
    9d64:	0025883a 	mov	r18,zero
    9d68:	0027883a 	mov	r19,zero
    9d6c:	00013d06 	br	a264 <___vfiprintf_internal_r+0xee0>
    9d70:	21003fcc 	andi	r4,r4,255
    9d74:	2002811e 	bne	r4,zero,a77c <___vfiprintf_internal_r+0x13f8>
    9d78:	00800074 	movhi	r2,1
    9d7c:	1087f504 	addi	r2,r2,8148
    9d80:	d8802615 	stw	r2,152(sp)
    9d84:	a080080c 	andi	r2,r20,32
    9d88:	103f561e 	bne	r2,zero,9ae4 <__alt_data_end+0xf8009ae4>
    9d8c:	a080040c 	andi	r2,r20,16
    9d90:	1001d126 	beq	r2,zero,a4d8 <___vfiprintf_internal_r+0x1154>
    9d94:	da802217 	ldw	r10,136(sp)
    9d98:	0027883a 	mov	r19,zero
    9d9c:	54800017 	ldw	r18,0(r10)
    9da0:	52800104 	addi	r10,r10,4
    9da4:	da802215 	stw	r10,136(sp)
    9da8:	003f5306 	br	9af8 <__alt_data_end+0xf8009af8>
    9dac:	da802217 	ldw	r10,136(sp)
    9db0:	d8001d85 	stb	zero,118(sp)
    9db4:	55400017 	ldw	r21,0(r10)
    9db8:	50c00104 	addi	r3,r10,4
    9dbc:	a8024226 	beq	r21,zero,a6c8 <___vfiprintf_internal_r+0x1344>
    9dc0:	48021816 	blt	r9,zero,a624 <___vfiprintf_internal_r+0x12a0>
    9dc4:	480d883a 	mov	r6,r9
    9dc8:	000b883a 	mov	r5,zero
    9dcc:	a809883a 	mov	r4,r21
    9dd0:	d8c02a15 	stw	r3,168(sp)
    9dd4:	da002b15 	stw	r8,172(sp)
    9dd8:	da402c15 	stw	r9,176(sp)
    9ddc:	00075d40 	call	75d4 <memchr>
    9de0:	d8c02a17 	ldw	r3,168(sp)
    9de4:	da002b17 	ldw	r8,172(sp)
    9de8:	da402c17 	ldw	r9,176(sp)
    9dec:	10024826 	beq	r2,zero,a710 <___vfiprintf_internal_r+0x138c>
    9df0:	1567c83a 	sub	r19,r2,r21
    9df4:	df001d83 	ldbu	fp,118(sp)
    9df8:	d8c02215 	stw	r3,136(sp)
    9dfc:	0013883a 	mov	r9,zero
    9e00:	003e6006 	br	9784 <__alt_data_end+0xf8009784>
    9e04:	21003fcc 	andi	r4,r4,255
    9e08:	203fc026 	beq	r4,zero,9d0c <__alt_data_end+0xf8009d0c>
    9e0c:	d9c01d85 	stb	r7,118(sp)
    9e10:	003fbe06 	br	9d0c <__alt_data_end+0xf8009d0c>
    9e14:	da802217 	ldw	r10,136(sp)
    9e18:	54400017 	ldw	r17,0(r10)
    9e1c:	50800104 	addi	r2,r10,4
    9e20:	883e3b16 	blt	r17,zero,9710 <__alt_data_end+0xf8009710>
    9e24:	d8802215 	stw	r2,136(sp)
    9e28:	80c00007 	ldb	r3,0(r16)
    9e2c:	003db406 	br	9500 <__alt_data_end+0xf8009500>
    9e30:	01000044 	movi	r4,1
    9e34:	01c00ac4 	movi	r7,43
    9e38:	80c00007 	ldb	r3,0(r16)
    9e3c:	003db006 	br	9500 <__alt_data_end+0xf8009500>
    9e40:	80c00007 	ldb	r3,0(r16)
    9e44:	82800044 	addi	r10,r16,1
    9e48:	1b423c26 	beq	r3,r13,a73c <___vfiprintf_internal_r+0x13b8>
    9e4c:	18bff404 	addi	r2,r3,-48
    9e50:	0013883a 	mov	r9,zero
    9e54:	30822b36 	bltu	r6,r2,a704 <___vfiprintf_internal_r+0x1380>
    9e58:	50c00007 	ldb	r3,0(r10)
    9e5c:	4a4002a4 	muli	r9,r9,10
    9e60:	54000044 	addi	r16,r10,1
    9e64:	8015883a 	mov	r10,r16
    9e68:	4893883a 	add	r9,r9,r2
    9e6c:	18bff404 	addi	r2,r3,-48
    9e70:	30bff92e 	bgeu	r6,r2,9e58 <__alt_data_end+0xf8009e58>
    9e74:	483da30e 	bge	r9,zero,9504 <__alt_data_end+0xf8009504>
    9e78:	027fffc4 	movi	r9,-1
    9e7c:	003da106 	br	9504 <__alt_data_end+0xf8009504>
    9e80:	a5001014 	ori	r20,r20,64
    9e84:	80c00007 	ldb	r3,0(r16)
    9e88:	003d9d06 	br	9500 <__alt_data_end+0xf8009500>
    9e8c:	da802217 	ldw	r10,136(sp)
    9e90:	d8001d85 	stb	zero,118(sp)
    9e94:	50c00204 	addi	r3,r10,8
    9e98:	54800017 	ldw	r18,0(r10)
    9e9c:	54c00117 	ldw	r19,4(r10)
    9ea0:	4801ca16 	blt	r9,zero,a5cc <___vfiprintf_internal_r+0x1248>
    9ea4:	013fdfc4 	movi	r4,-129
    9ea8:	94c4b03a 	or	r2,r18,r19
    9eac:	d8c02215 	stw	r3,136(sp)
    9eb0:	a128703a 	and	r20,r20,r4
    9eb4:	0039883a 	mov	fp,zero
    9eb8:	103f341e 	bne	r2,zero,9b8c <__alt_data_end+0xf8009b8c>
    9ebc:	483e2e26 	beq	r9,zero,9778 <__alt_data_end+0xf8009778>
    9ec0:	0025883a 	mov	r18,zero
    9ec4:	94800c04 	addi	r18,r18,48
    9ec8:	dc8019c5 	stb	r18,103(sp)
    9ecc:	dcc02717 	ldw	r19,156(sp)
    9ed0:	dd4019c4 	addi	r21,sp,103
    9ed4:	003e2b06 	br	9784 <__alt_data_end+0xf8009784>
    9ed8:	21003fcc 	andi	r4,r4,255
    9edc:	2002361e 	bne	r4,zero,a7b8 <___vfiprintf_internal_r+0x1434>
    9ee0:	1801c126 	beq	r3,zero,a5e8 <___vfiprintf_internal_r+0x1264>
    9ee4:	04800044 	movi	r18,1
    9ee8:	d8c01005 	stb	r3,64(sp)
    9eec:	d8001d85 	stb	zero,118(sp)
    9ef0:	9027883a 	mov	r19,r18
    9ef4:	dd401004 	addi	r21,sp,64
    9ef8:	003f1106 	br	9b40 <__alt_data_end+0xf8009b40>
    9efc:	d9402117 	ldw	r5,132(sp)
    9f00:	d9002017 	ldw	r4,128(sp)
    9f04:	d9801a04 	addi	r6,sp,104
    9f08:	d9c02b15 	stw	r7,172(sp)
    9f0c:	dbc02a15 	stw	r15,168(sp)
    9f10:	00092700 	call	9270 <__sprint_r.part.0>
    9f14:	d9c02b17 	ldw	r7,172(sp)
    9f18:	dbc02a17 	ldw	r15,168(sp)
    9f1c:	10006d1e 	bne	r2,zero,a0d4 <___vfiprintf_internal_r+0xd50>
    9f20:	d9801b17 	ldw	r6,108(sp)
    9f24:	d8801c17 	ldw	r2,112(sp)
    9f28:	d811883a 	mov	r8,sp
    9f2c:	31400044 	addi	r5,r6,1
    9f30:	003e3306 	br	9800 <__alt_data_end+0xf8009800>
    9f34:	d9401b17 	ldw	r5,108(sp)
    9f38:	d8801c17 	ldw	r2,112(sp)
    9f3c:	29000044 	addi	r4,r5,1
    9f40:	d8c01d87 	ldb	r3,118(sp)
    9f44:	183e4d26 	beq	r3,zero,987c <__alt_data_end+0xf800987c>
    9f48:	00c00044 	movi	r3,1
    9f4c:	d9401d84 	addi	r5,sp,118
    9f50:	10c5883a 	add	r2,r2,r3
    9f54:	41400015 	stw	r5,0(r8)
    9f58:	40c00115 	stw	r3,4(r8)
    9f5c:	d8801c15 	stw	r2,112(sp)
    9f60:	d9001b15 	stw	r4,108(sp)
    9f64:	014001c4 	movi	r5,7
    9f68:	2900a90e 	bge	r5,r4,a210 <___vfiprintf_internal_r+0xe8c>
    9f6c:	1000da1e 	bne	r2,zero,a2d8 <___vfiprintf_internal_r+0xf54>
    9f70:	7000ab1e 	bne	r14,zero,a220 <___vfiprintf_internal_r+0xe9c>
    9f74:	000b883a 	mov	r5,zero
    9f78:	1809883a 	mov	r4,r3
    9f7c:	d811883a 	mov	r8,sp
    9f80:	00c02004 	movi	r3,128
    9f84:	e0fe4d26 	beq	fp,r3,98bc <__alt_data_end+0xf80098bc>
    9f88:	4cf9c83a 	sub	fp,r9,r19
    9f8c:	073e7b0e 	bge	zero,fp,997c <__alt_data_end+0xf800997c>
    9f90:	01c00404 	movi	r7,16
    9f94:	3f01900e 	bge	r7,fp,a5d8 <___vfiprintf_internal_r+0x1254>
    9f98:	00c00074 	movhi	r3,1
    9f9c:	18c85b04 	addi	r3,r3,8556
    9fa0:	d8c02415 	stw	r3,144(sp)
    9fa4:	034001c4 	movi	r13,7
    9fa8:	00000506 	br	9fc0 <___vfiprintf_internal_r+0xc3c>
    9fac:	29000084 	addi	r4,r5,2
    9fb0:	42000204 	addi	r8,r8,8
    9fb4:	180b883a 	mov	r5,r3
    9fb8:	e73ffc04 	addi	fp,fp,-16
    9fbc:	3f000d0e 	bge	r7,fp,9ff4 <___vfiprintf_internal_r+0xc70>
    9fc0:	10800404 	addi	r2,r2,16
    9fc4:	28c00044 	addi	r3,r5,1
    9fc8:	45c00015 	stw	r23,0(r8)
    9fcc:	41c00115 	stw	r7,4(r8)
    9fd0:	d8801c15 	stw	r2,112(sp)
    9fd4:	d8c01b15 	stw	r3,108(sp)
    9fd8:	68fff40e 	bge	r13,r3,9fac <__alt_data_end+0xf8009fac>
    9fdc:	1000101e 	bne	r2,zero,a020 <___vfiprintf_internal_r+0xc9c>
    9fe0:	e73ffc04 	addi	fp,fp,-16
    9fe4:	01000044 	movi	r4,1
    9fe8:	000b883a 	mov	r5,zero
    9fec:	d811883a 	mov	r8,sp
    9ff0:	3f3ff316 	blt	r7,fp,9fc0 <__alt_data_end+0xf8009fc0>
    9ff4:	da802417 	ldw	r10,144(sp)
    9ff8:	1705883a 	add	r2,r2,fp
    9ffc:	47000115 	stw	fp,4(r8)
    a000:	42800015 	stw	r10,0(r8)
    a004:	d8801c15 	stw	r2,112(sp)
    a008:	d9001b15 	stw	r4,108(sp)
    a00c:	00c001c4 	movi	r3,7
    a010:	19003616 	blt	r3,r4,a0ec <___vfiprintf_internal_r+0xd68>
    a014:	42000204 	addi	r8,r8,8
    a018:	21000044 	addi	r4,r4,1
    a01c:	003e5706 	br	997c <__alt_data_end+0xf800997c>
    a020:	d9402117 	ldw	r5,132(sp)
    a024:	d9002017 	ldw	r4,128(sp)
    a028:	d9801a04 	addi	r6,sp,104
    a02c:	d9c02b15 	stw	r7,172(sp)
    a030:	db402a15 	stw	r13,168(sp)
    a034:	00092700 	call	9270 <__sprint_r.part.0>
    a038:	d9c02b17 	ldw	r7,172(sp)
    a03c:	db402a17 	ldw	r13,168(sp)
    a040:	1000241e 	bne	r2,zero,a0d4 <___vfiprintf_internal_r+0xd50>
    a044:	d9401b17 	ldw	r5,108(sp)
    a048:	d8801c17 	ldw	r2,112(sp)
    a04c:	d811883a 	mov	r8,sp
    a050:	29000044 	addi	r4,r5,1
    a054:	003fd806 	br	9fb8 <__alt_data_end+0xf8009fb8>
    a058:	d9401b17 	ldw	r5,108(sp)
    a05c:	00c00074 	movhi	r3,1
    a060:	18c85f04 	addi	r3,r3,8572
    a064:	d8c02415 	stw	r3,144(sp)
    a068:	29400044 	addi	r5,r5,1
    a06c:	d8c02417 	ldw	r3,144(sp)
    a070:	14c5883a 	add	r2,r2,r19
    a074:	44c00115 	stw	r19,4(r8)
    a078:	40c00015 	stw	r3,0(r8)
    a07c:	d8801c15 	stw	r2,112(sp)
    a080:	d9401b15 	stw	r5,108(sp)
    a084:	00c001c4 	movi	r3,7
    a088:	1940070e 	bge	r3,r5,a0a8 <___vfiprintf_internal_r+0xd24>
    a08c:	103e4826 	beq	r2,zero,99b0 <__alt_data_end+0xf80099b0>
    a090:	d9402117 	ldw	r5,132(sp)
    a094:	d9002017 	ldw	r4,128(sp)
    a098:	d9801a04 	addi	r6,sp,104
    a09c:	00092700 	call	9270 <__sprint_r.part.0>
    a0a0:	10000c1e 	bne	r2,zero,a0d4 <___vfiprintf_internal_r+0xd50>
    a0a4:	d8801c17 	ldw	r2,112(sp)
    a0a8:	8c80010e 	bge	r17,r18,a0b0 <___vfiprintf_internal_r+0xd2c>
    a0ac:	9023883a 	mov	r17,r18
    a0b0:	da802317 	ldw	r10,140(sp)
    a0b4:	5455883a 	add	r10,r10,r17
    a0b8:	da802315 	stw	r10,140(sp)
    a0bc:	103e4126 	beq	r2,zero,99c4 <__alt_data_end+0xf80099c4>
    a0c0:	d9402117 	ldw	r5,132(sp)
    a0c4:	d9002017 	ldw	r4,128(sp)
    a0c8:	d9801a04 	addi	r6,sp,104
    a0cc:	00092700 	call	9270 <__sprint_r.part.0>
    a0d0:	103e3c26 	beq	r2,zero,99c4 <__alt_data_end+0xf80099c4>
    a0d4:	dd002117 	ldw	r20,132(sp)
    a0d8:	a080030b 	ldhu	r2,12(r20)
    a0dc:	1080100c 	andi	r2,r2,64
    a0e0:	1001231e 	bne	r2,zero,a570 <___vfiprintf_internal_r+0x11ec>
    a0e4:	d8802317 	ldw	r2,140(sp)
    a0e8:	003d7b06 	br	96d8 <__alt_data_end+0xf80096d8>
    a0ec:	1000991e 	bne	r2,zero,a354 <___vfiprintf_internal_r+0xfd0>
    a0f0:	00c00044 	movi	r3,1
    a0f4:	9805883a 	mov	r2,r19
    a0f8:	dd400015 	stw	r21,0(sp)
    a0fc:	dcc00115 	stw	r19,4(sp)
    a100:	dcc01c15 	stw	r19,112(sp)
    a104:	d8c01b15 	stw	r3,108(sp)
    a108:	d811883a 	mov	r8,sp
    a10c:	42000204 	addi	r8,r8,8
    a110:	a2c0010c 	andi	r11,r20,4
    a114:	583fe426 	beq	r11,zero,a0a8 <__alt_data_end+0xf800a0a8>
    a118:	8ca7c83a 	sub	r19,r17,r18
    a11c:	04ffe20e 	bge	zero,r19,a0a8 <__alt_data_end+0xf800a0a8>
    a120:	01c00404 	movi	r7,16
    a124:	3cffcc0e 	bge	r7,r19,a058 <__alt_data_end+0xf800a058>
    a128:	02800074 	movhi	r10,1
    a12c:	52885f04 	addi	r10,r10,8572
    a130:	d9001b17 	ldw	r4,108(sp)
    a134:	da802415 	stw	r10,144(sp)
    a138:	382b883a 	mov	r21,r7
    a13c:	050001c4 	movi	r20,7
    a140:	df002017 	ldw	fp,128(sp)
    a144:	00000506 	br	a15c <___vfiprintf_internal_r+0xdd8>
    a148:	21400084 	addi	r5,r4,2
    a14c:	42000204 	addi	r8,r8,8
    a150:	1809883a 	mov	r4,r3
    a154:	9cfffc04 	addi	r19,r19,-16
    a158:	acffc40e 	bge	r21,r19,a06c <__alt_data_end+0xf800a06c>
    a15c:	10800404 	addi	r2,r2,16
    a160:	20c00044 	addi	r3,r4,1
    a164:	45800015 	stw	r22,0(r8)
    a168:	45400115 	stw	r21,4(r8)
    a16c:	d8801c15 	stw	r2,112(sp)
    a170:	d8c01b15 	stw	r3,108(sp)
    a174:	a0fff40e 	bge	r20,r3,a148 <__alt_data_end+0xf800a148>
    a178:	1000041e 	bne	r2,zero,a18c <___vfiprintf_internal_r+0xe08>
    a17c:	01400044 	movi	r5,1
    a180:	0009883a 	mov	r4,zero
    a184:	d811883a 	mov	r8,sp
    a188:	003ff206 	br	a154 <__alt_data_end+0xf800a154>
    a18c:	d9402117 	ldw	r5,132(sp)
    a190:	d9801a04 	addi	r6,sp,104
    a194:	e009883a 	mov	r4,fp
    a198:	00092700 	call	9270 <__sprint_r.part.0>
    a19c:	103fcd1e 	bne	r2,zero,a0d4 <__alt_data_end+0xf800a0d4>
    a1a0:	d9001b17 	ldw	r4,108(sp)
    a1a4:	d8801c17 	ldw	r2,112(sp)
    a1a8:	d811883a 	mov	r8,sp
    a1ac:	21400044 	addi	r5,r4,1
    a1b0:	003fe806 	br	a154 <__alt_data_end+0xf800a154>
    a1b4:	d9402117 	ldw	r5,132(sp)
    a1b8:	d9002017 	ldw	r4,128(sp)
    a1bc:	d9801a04 	addi	r6,sp,104
    a1c0:	d9c02b15 	stw	r7,172(sp)
    a1c4:	db402a15 	stw	r13,168(sp)
    a1c8:	00092700 	call	9270 <__sprint_r.part.0>
    a1cc:	d9c02b17 	ldw	r7,172(sp)
    a1d0:	db402a17 	ldw	r13,168(sp)
    a1d4:	103fbf1e 	bne	r2,zero,a0d4 <__alt_data_end+0xf800a0d4>
    a1d8:	d9401b17 	ldw	r5,108(sp)
    a1dc:	d8801c17 	ldw	r2,112(sp)
    a1e0:	d811883a 	mov	r8,sp
    a1e4:	29800044 	addi	r6,r5,1
    a1e8:	003dc406 	br	98fc <__alt_data_end+0xf80098fc>
    a1ec:	1000d21e 	bne	r2,zero,a538 <___vfiprintf_internal_r+0x11b4>
    a1f0:	d8c01d87 	ldb	r3,118(sp)
    a1f4:	18009526 	beq	r3,zero,a44c <___vfiprintf_internal_r+0x10c8>
    a1f8:	00800044 	movi	r2,1
    a1fc:	d8c01d84 	addi	r3,sp,118
    a200:	1009883a 	mov	r4,r2
    a204:	d8c00015 	stw	r3,0(sp)
    a208:	d8800115 	stw	r2,4(sp)
    a20c:	d811883a 	mov	r8,sp
    a210:	200b883a 	mov	r5,r4
    a214:	42000204 	addi	r8,r8,8
    a218:	21000044 	addi	r4,r4,1
    a21c:	003d9706 	br	987c <__alt_data_end+0xf800987c>
    a220:	d9001d04 	addi	r4,sp,116
    a224:	00800084 	movi	r2,2
    a228:	d9000015 	stw	r4,0(sp)
    a22c:	d8800115 	stw	r2,4(sp)
    a230:	1809883a 	mov	r4,r3
    a234:	d811883a 	mov	r8,sp
    a238:	200b883a 	mov	r5,r4
    a23c:	42000204 	addi	r8,r8,8
    a240:	21000044 	addi	r4,r4,1
    a244:	003f4e06 	br	9f80 <__alt_data_end+0xf8009f80>
    a248:	d8001d85 	stb	zero,118(sp)
    a24c:	48005016 	blt	r9,zero,a390 <___vfiprintf_internal_r+0x100c>
    a250:	00ffdfc4 	movi	r3,-129
    a254:	94c4b03a 	or	r2,r18,r19
    a258:	a0e8703a 	and	r20,r20,r3
    a25c:	103d4426 	beq	r2,zero,9770 <__alt_data_end+0xf8009770>
    a260:	0039883a 	mov	fp,zero
    a264:	d9002617 	ldw	r4,152(sp)
    a268:	dd401a04 	addi	r21,sp,104
    a26c:	908003cc 	andi	r2,r18,15
    a270:	9806973a 	slli	r3,r19,28
    a274:	2085883a 	add	r2,r4,r2
    a278:	9024d13a 	srli	r18,r18,4
    a27c:	10800003 	ldbu	r2,0(r2)
    a280:	9826d13a 	srli	r19,r19,4
    a284:	ad7fffc4 	addi	r21,r21,-1
    a288:	1ca4b03a 	or	r18,r3,r18
    a28c:	a8800005 	stb	r2,0(r21)
    a290:	94c4b03a 	or	r2,r18,r19
    a294:	103ff51e 	bne	r2,zero,a26c <__alt_data_end+0xf800a26c>
    a298:	003e5906 	br	9c00 <__alt_data_end+0xf8009c00>
    a29c:	d9402117 	ldw	r5,132(sp)
    a2a0:	d9002017 	ldw	r4,128(sp)
    a2a4:	d9801a04 	addi	r6,sp,104
    a2a8:	00092700 	call	9270 <__sprint_r.part.0>
    a2ac:	103f891e 	bne	r2,zero,a0d4 <__alt_data_end+0xf800a0d4>
    a2b0:	d8801c17 	ldw	r2,112(sp)
    a2b4:	d811883a 	mov	r8,sp
    a2b8:	003f9506 	br	a110 <__alt_data_end+0xf800a110>
    a2bc:	d9402117 	ldw	r5,132(sp)
    a2c0:	d9002017 	ldw	r4,128(sp)
    a2c4:	d9801a04 	addi	r6,sp,104
    a2c8:	00092700 	call	9270 <__sprint_r.part.0>
    a2cc:	103f811e 	bne	r2,zero,a0d4 <__alt_data_end+0xf800a0d4>
    a2d0:	d811883a 	mov	r8,sp
    a2d4:	003ced06 	br	968c <__alt_data_end+0xf800968c>
    a2d8:	d9402117 	ldw	r5,132(sp)
    a2dc:	d9002017 	ldw	r4,128(sp)
    a2e0:	d9801a04 	addi	r6,sp,104
    a2e4:	da402c15 	stw	r9,176(sp)
    a2e8:	db802a15 	stw	r14,168(sp)
    a2ec:	00092700 	call	9270 <__sprint_r.part.0>
    a2f0:	da402c17 	ldw	r9,176(sp)
    a2f4:	db802a17 	ldw	r14,168(sp)
    a2f8:	103f761e 	bne	r2,zero,a0d4 <__alt_data_end+0xf800a0d4>
    a2fc:	d9401b17 	ldw	r5,108(sp)
    a300:	d8801c17 	ldw	r2,112(sp)
    a304:	d811883a 	mov	r8,sp
    a308:	29000044 	addi	r4,r5,1
    a30c:	003d5b06 	br	987c <__alt_data_end+0xf800987c>
    a310:	d9402117 	ldw	r5,132(sp)
    a314:	d9002017 	ldw	r4,128(sp)
    a318:	d9801a04 	addi	r6,sp,104
    a31c:	da402c15 	stw	r9,176(sp)
    a320:	00092700 	call	9270 <__sprint_r.part.0>
    a324:	da402c17 	ldw	r9,176(sp)
    a328:	103f6a1e 	bne	r2,zero,a0d4 <__alt_data_end+0xf800a0d4>
    a32c:	d9401b17 	ldw	r5,108(sp)
    a330:	d8801c17 	ldw	r2,112(sp)
    a334:	d811883a 	mov	r8,sp
    a338:	29000044 	addi	r4,r5,1
    a33c:	003f1006 	br	9f80 <__alt_data_end+0xf8009f80>
    a340:	1000c31e 	bne	r2,zero,a650 <___vfiprintf_internal_r+0x12cc>
    a344:	01000044 	movi	r4,1
    a348:	000b883a 	mov	r5,zero
    a34c:	d811883a 	mov	r8,sp
    a350:	003f0d06 	br	9f88 <__alt_data_end+0xf8009f88>
    a354:	d9402117 	ldw	r5,132(sp)
    a358:	d9002017 	ldw	r4,128(sp)
    a35c:	d9801a04 	addi	r6,sp,104
    a360:	00092700 	call	9270 <__sprint_r.part.0>
    a364:	103f5b1e 	bne	r2,zero,a0d4 <__alt_data_end+0xf800a0d4>
    a368:	d9001b17 	ldw	r4,108(sp)
    a36c:	d8801c17 	ldw	r2,112(sp)
    a370:	d811883a 	mov	r8,sp
    a374:	21000044 	addi	r4,r4,1
    a378:	003d8006 	br	997c <__alt_data_end+0xf800997c>
    a37c:	01000074 	movhi	r4,1
    a380:	2107fa04 	addi	r4,r4,8168
    a384:	d9002615 	stw	r4,152(sp)
    a388:	d8c02215 	stw	r3,136(sp)
    a38c:	1029883a 	mov	r20,r2
    a390:	94c4b03a 	or	r2,r18,r19
    a394:	103fb21e 	bne	r2,zero,a260 <__alt_data_end+0xf800a260>
    a398:	0039883a 	mov	fp,zero
    a39c:	00800084 	movi	r2,2
    a3a0:	003e6b06 	br	9d50 <__alt_data_end+0xf8009d50>
    a3a4:	da802217 	ldw	r10,136(sp)
    a3a8:	d8001d85 	stb	zero,118(sp)
    a3ac:	0027883a 	mov	r19,zero
    a3b0:	50800104 	addi	r2,r10,4
    a3b4:	54800017 	ldw	r18,0(r10)
    a3b8:	483e6016 	blt	r9,zero,9d3c <__alt_data_end+0xf8009d3c>
    a3bc:	00ffdfc4 	movi	r3,-129
    a3c0:	d8802215 	stw	r2,136(sp)
    a3c4:	a0e8703a 	and	r20,r20,r3
    a3c8:	0039883a 	mov	fp,zero
    a3cc:	903ebb26 	beq	r18,zero,9ebc <__alt_data_end+0xf8009ebc>
    a3d0:	00800244 	movi	r2,9
    a3d4:	14bdee36 	bltu	r2,r18,9b90 <__alt_data_end+0xf8009b90>
    a3d8:	003eba06 	br	9ec4 <__alt_data_end+0xf8009ec4>
    a3dc:	00800c04 	movi	r2,48
    a3e0:	d8c01d45 	stb	r3,117(sp)
    a3e4:	d8801d05 	stb	r2,116(sp)
    a3e8:	d8001d85 	stb	zero,118(sp)
    a3ec:	a0c00094 	ori	r3,r20,2
    a3f0:	4800a916 	blt	r9,zero,a698 <___vfiprintf_internal_r+0x1314>
    a3f4:	00bfdfc4 	movi	r2,-129
    a3f8:	a096703a 	and	r11,r20,r2
    a3fc:	5d000094 	ori	r20,r11,2
    a400:	0039883a 	mov	fp,zero
    a404:	003f9706 	br	a264 <__alt_data_end+0xf800a264>
    a408:	8025883a 	mov	r18,r16
    a40c:	003c2e06 	br	94c8 <__alt_data_end+0xf80094c8>
    a410:	00800074 	movhi	r2,1
    a414:	1087fa04 	addi	r2,r2,8168
    a418:	0039883a 	mov	fp,zero
    a41c:	d8802615 	stw	r2,152(sp)
    a420:	003f9006 	br	a264 <__alt_data_end+0xf800a264>
    a424:	04a5c83a 	sub	r18,zero,r18
    a428:	07000b44 	movi	fp,45
    a42c:	9004c03a 	cmpne	r2,r18,zero
    a430:	04e7c83a 	sub	r19,zero,r19
    a434:	df001d85 	stb	fp,118(sp)
    a438:	98a7c83a 	sub	r19,r19,r2
    a43c:	48009f16 	blt	r9,zero,a6bc <___vfiprintf_internal_r+0x1338>
    a440:	00bfdfc4 	movi	r2,-129
    a444:	a0a8703a 	and	r20,r20,r2
    a448:	003dd006 	br	9b8c <__alt_data_end+0xf8009b8c>
    a44c:	70004c26 	beq	r14,zero,a580 <___vfiprintf_internal_r+0x11fc>
    a450:	00800084 	movi	r2,2
    a454:	d8c01d04 	addi	r3,sp,116
    a458:	d8c00015 	stw	r3,0(sp)
    a45c:	d8800115 	stw	r2,4(sp)
    a460:	01000044 	movi	r4,1
    a464:	d811883a 	mov	r8,sp
    a468:	003f7306 	br	a238 <__alt_data_end+0xf800a238>
    a46c:	a080100c 	andi	r2,r20,64
    a470:	da802217 	ldw	r10,136(sp)
    a474:	103e0626 	beq	r2,zero,9c90 <__alt_data_end+0xf8009c90>
    a478:	5480000f 	ldh	r18,0(r10)
    a47c:	52800104 	addi	r10,r10,4
    a480:	da802215 	stw	r10,136(sp)
    a484:	9027d7fa 	srai	r19,r18,31
    a488:	9805883a 	mov	r2,r19
    a48c:	003db806 	br	9b70 <__alt_data_end+0xf8009b70>
    a490:	a080040c 	andi	r2,r20,16
    a494:	1000091e 	bne	r2,zero,a4bc <___vfiprintf_internal_r+0x1138>
    a498:	a2c0100c 	andi	r11,r20,64
    a49c:	58000726 	beq	r11,zero,a4bc <___vfiprintf_internal_r+0x1138>
    a4a0:	da802217 	ldw	r10,136(sp)
    a4a4:	50800017 	ldw	r2,0(r10)
    a4a8:	52800104 	addi	r10,r10,4
    a4ac:	da802215 	stw	r10,136(sp)
    a4b0:	da802317 	ldw	r10,140(sp)
    a4b4:	1280000d 	sth	r10,0(r2)
    a4b8:	003be706 	br	9458 <__alt_data_end+0xf8009458>
    a4bc:	da802217 	ldw	r10,136(sp)
    a4c0:	50800017 	ldw	r2,0(r10)
    a4c4:	52800104 	addi	r10,r10,4
    a4c8:	da802215 	stw	r10,136(sp)
    a4cc:	da802317 	ldw	r10,140(sp)
    a4d0:	12800015 	stw	r10,0(r2)
    a4d4:	003be006 	br	9458 <__alt_data_end+0xf8009458>
    a4d8:	a080100c 	andi	r2,r20,64
    a4dc:	da802217 	ldw	r10,136(sp)
    a4e0:	10003026 	beq	r2,zero,a5a4 <___vfiprintf_internal_r+0x1220>
    a4e4:	5480000b 	ldhu	r18,0(r10)
    a4e8:	52800104 	addi	r10,r10,4
    a4ec:	0027883a 	mov	r19,zero
    a4f0:	da802215 	stw	r10,136(sp)
    a4f4:	003d8006 	br	9af8 <__alt_data_end+0xf8009af8>
    a4f8:	80c00007 	ldb	r3,0(r16)
    a4fc:	003c0006 	br	9500 <__alt_data_end+0xf8009500>
    a500:	a080100c 	andi	r2,r20,64
    a504:	d8001d85 	stb	zero,118(sp)
    a508:	da802217 	ldw	r10,136(sp)
    a50c:	1000201e 	bne	r2,zero,a590 <___vfiprintf_internal_r+0x120c>
    a510:	50800104 	addi	r2,r10,4
    a514:	54800017 	ldw	r18,0(r10)
    a518:	0027883a 	mov	r19,zero
    a51c:	483def0e 	bge	r9,zero,9cdc <__alt_data_end+0xf8009cdc>
    a520:	94c6b03a 	or	r3,r18,r19
    a524:	d8802215 	stw	r2,136(sp)
    a528:	183d4e1e 	bne	r3,zero,9a64 <__alt_data_end+0xf8009a64>
    a52c:	0039883a 	mov	fp,zero
    a530:	0005883a 	mov	r2,zero
    a534:	003e0606 	br	9d50 <__alt_data_end+0xf8009d50>
    a538:	d9402117 	ldw	r5,132(sp)
    a53c:	d9002017 	ldw	r4,128(sp)
    a540:	d9801a04 	addi	r6,sp,104
    a544:	da402c15 	stw	r9,176(sp)
    a548:	db802a15 	stw	r14,168(sp)
    a54c:	00092700 	call	9270 <__sprint_r.part.0>
    a550:	da402c17 	ldw	r9,176(sp)
    a554:	db802a17 	ldw	r14,168(sp)
    a558:	103ede1e 	bne	r2,zero,a0d4 <__alt_data_end+0xf800a0d4>
    a55c:	d9401b17 	ldw	r5,108(sp)
    a560:	d8801c17 	ldw	r2,112(sp)
    a564:	d811883a 	mov	r8,sp
    a568:	29000044 	addi	r4,r5,1
    a56c:	003e7406 	br	9f40 <__alt_data_end+0xf8009f40>
    a570:	00bfffc4 	movi	r2,-1
    a574:	003c5806 	br	96d8 <__alt_data_end+0xf80096d8>
    a578:	d811883a 	mov	r8,sp
    a57c:	003ee806 	br	a120 <__alt_data_end+0xf800a120>
    a580:	000b883a 	mov	r5,zero
    a584:	01000044 	movi	r4,1
    a588:	d811883a 	mov	r8,sp
    a58c:	003e7c06 	br	9f80 <__alt_data_end+0xf8009f80>
    a590:	50800104 	addi	r2,r10,4
    a594:	5480000b 	ldhu	r18,0(r10)
    a598:	0027883a 	mov	r19,zero
    a59c:	483dcf0e 	bge	r9,zero,9cdc <__alt_data_end+0xf8009cdc>
    a5a0:	003fdf06 	br	a520 <__alt_data_end+0xf800a520>
    a5a4:	54800017 	ldw	r18,0(r10)
    a5a8:	52800104 	addi	r10,r10,4
    a5ac:	0027883a 	mov	r19,zero
    a5b0:	da802215 	stw	r10,136(sp)
    a5b4:	003d5006 	br	9af8 <__alt_data_end+0xf8009af8>
    a5b8:	50800104 	addi	r2,r10,4
    a5bc:	5480000b 	ldhu	r18,0(r10)
    a5c0:	0027883a 	mov	r19,zero
    a5c4:	483f7d0e 	bge	r9,zero,a3bc <__alt_data_end+0xf800a3bc>
    a5c8:	003ddc06 	br	9d3c <__alt_data_end+0xf8009d3c>
    a5cc:	d8c02215 	stw	r3,136(sp)
    a5d0:	0039883a 	mov	fp,zero
    a5d4:	003ddb06 	br	9d44 <__alt_data_end+0xf8009d44>
    a5d8:	02800074 	movhi	r10,1
    a5dc:	52885b04 	addi	r10,r10,8556
    a5e0:	da802415 	stw	r10,144(sp)
    a5e4:	003e8306 	br	9ff4 <__alt_data_end+0xf8009ff4>
    a5e8:	d8801c17 	ldw	r2,112(sp)
    a5ec:	dd002117 	ldw	r20,132(sp)
    a5f0:	103eb926 	beq	r2,zero,a0d8 <__alt_data_end+0xf800a0d8>
    a5f4:	d9002017 	ldw	r4,128(sp)
    a5f8:	d9801a04 	addi	r6,sp,104
    a5fc:	a00b883a 	mov	r5,r20
    a600:	00092700 	call	9270 <__sprint_r.part.0>
    a604:	003eb406 	br	a0d8 <__alt_data_end+0xf800a0d8>
    a608:	80c00043 	ldbu	r3,1(r16)
    a60c:	a5000814 	ori	r20,r20,32
    a610:	84000044 	addi	r16,r16,1
    a614:	18c03fcc 	andi	r3,r3,255
    a618:	18c0201c 	xori	r3,r3,128
    a61c:	18ffe004 	addi	r3,r3,-128
    a620:	003bb706 	br	9500 <__alt_data_end+0xf8009500>
    a624:	a809883a 	mov	r4,r21
    a628:	d8c02a15 	stw	r3,168(sp)
    a62c:	da002b15 	stw	r8,172(sp)
    a630:	00025380 	call	2538 <strlen>
    a634:	d8c02a17 	ldw	r3,168(sp)
    a638:	1027883a 	mov	r19,r2
    a63c:	df001d83 	ldbu	fp,118(sp)
    a640:	d8c02215 	stw	r3,136(sp)
    a644:	0013883a 	mov	r9,zero
    a648:	da002b17 	ldw	r8,172(sp)
    a64c:	003c4d06 	br	9784 <__alt_data_end+0xf8009784>
    a650:	d9402117 	ldw	r5,132(sp)
    a654:	d9002017 	ldw	r4,128(sp)
    a658:	d9801a04 	addi	r6,sp,104
    a65c:	da402c15 	stw	r9,176(sp)
    a660:	00092700 	call	9270 <__sprint_r.part.0>
    a664:	da402c17 	ldw	r9,176(sp)
    a668:	103e9a1e 	bne	r2,zero,a0d4 <__alt_data_end+0xf800a0d4>
    a66c:	d9401b17 	ldw	r5,108(sp)
    a670:	d8801c17 	ldw	r2,112(sp)
    a674:	d811883a 	mov	r8,sp
    a678:	29000044 	addi	r4,r5,1
    a67c:	003e4206 	br	9f88 <__alt_data_end+0xf8009f88>
    a680:	d9401b17 	ldw	r5,108(sp)
    a684:	01000074 	movhi	r4,1
    a688:	21085f04 	addi	r4,r4,8572
    a68c:	d9002415 	stw	r4,144(sp)
    a690:	29400044 	addi	r5,r5,1
    a694:	003c6d06 	br	984c <__alt_data_end+0xf800984c>
    a698:	0039883a 	mov	fp,zero
    a69c:	00800084 	movi	r2,2
    a6a0:	10803fcc 	andi	r2,r2,255
    a6a4:	01000044 	movi	r4,1
    a6a8:	11001e26 	beq	r2,r4,a724 <___vfiprintf_internal_r+0x13a0>
    a6ac:	01000084 	movi	r4,2
    a6b0:	11001e1e 	bne	r2,r4,a72c <___vfiprintf_internal_r+0x13a8>
    a6b4:	1829883a 	mov	r20,r3
    a6b8:	003eea06 	br	a264 <__alt_data_end+0xf800a264>
    a6bc:	a007883a 	mov	r3,r20
    a6c0:	00800044 	movi	r2,1
    a6c4:	003ff606 	br	a6a0 <__alt_data_end+0xf800a6a0>
    a6c8:	00800184 	movi	r2,6
    a6cc:	1240012e 	bgeu	r2,r9,a6d4 <___vfiprintf_internal_r+0x1350>
    a6d0:	1013883a 	mov	r9,r2
    a6d4:	4827883a 	mov	r19,r9
    a6d8:	4825883a 	mov	r18,r9
    a6dc:	48001516 	blt	r9,zero,a734 <___vfiprintf_internal_r+0x13b0>
    a6e0:	05400074 	movhi	r21,1
    a6e4:	d8c02215 	stw	r3,136(sp)
    a6e8:	ad47ff04 	addi	r21,r21,8188
    a6ec:	003d1406 	br	9b40 <__alt_data_end+0xf8009b40>
    a6f0:	02800074 	movhi	r10,1
    a6f4:	52885b04 	addi	r10,r10,8556
    a6f8:	da802415 	stw	r10,144(sp)
    a6fc:	200d883a 	mov	r6,r4
    a700:	003c9106 	br	9948 <__alt_data_end+0xf8009948>
    a704:	5021883a 	mov	r16,r10
    a708:	0013883a 	mov	r9,zero
    a70c:	003b7d06 	br	9504 <__alt_data_end+0xf8009504>
    a710:	4827883a 	mov	r19,r9
    a714:	df001d83 	ldbu	fp,118(sp)
    a718:	d8c02215 	stw	r3,136(sp)
    a71c:	0013883a 	mov	r9,zero
    a720:	003c1806 	br	9784 <__alt_data_end+0xf8009784>
    a724:	1829883a 	mov	r20,r3
    a728:	003d1806 	br	9b8c <__alt_data_end+0xf8009b8c>
    a72c:	1829883a 	mov	r20,r3
    a730:	003ccd06 	br	9a68 <__alt_data_end+0xf8009a68>
    a734:	0025883a 	mov	r18,zero
    a738:	003fe906 	br	a6e0 <__alt_data_end+0xf800a6e0>
    a73c:	d8802217 	ldw	r2,136(sp)
    a740:	80c00043 	ldbu	r3,1(r16)
    a744:	5021883a 	mov	r16,r10
    a748:	12400017 	ldw	r9,0(r2)
    a74c:	10800104 	addi	r2,r2,4
    a750:	d8802215 	stw	r2,136(sp)
    a754:	483faf0e 	bge	r9,zero,a614 <__alt_data_end+0xf800a614>
    a758:	18c03fcc 	andi	r3,r3,255
    a75c:	18c0201c 	xori	r3,r3,128
    a760:	027fffc4 	movi	r9,-1
    a764:	18ffe004 	addi	r3,r3,-128
    a768:	003b6506 	br	9500 <__alt_data_end+0xf8009500>
    a76c:	d9c01d85 	stb	r7,118(sp)
    a770:	003ca006 	br	99f4 <__alt_data_end+0xf80099f4>
    a774:	d9c01d85 	stb	r7,118(sp)
    a778:	003cad06 	br	9a30 <__alt_data_end+0xf8009a30>
    a77c:	d9c01d85 	stb	r7,118(sp)
    a780:	003d7d06 	br	9d78 <__alt_data_end+0xf8009d78>
    a784:	d9c01d85 	stb	r7,118(sp)
    a788:	003d5f06 	br	9d08 <__alt_data_end+0xf8009d08>
    a78c:	a080004c 	andi	r2,r20,1
    a790:	0039883a 	mov	fp,zero
    a794:	10000526 	beq	r2,zero,a7ac <___vfiprintf_internal_r+0x1428>
    a798:	00800c04 	movi	r2,48
    a79c:	d88019c5 	stb	r2,103(sp)
    a7a0:	dcc02717 	ldw	r19,156(sp)
    a7a4:	dd4019c4 	addi	r21,sp,103
    a7a8:	003bf606 	br	9784 <__alt_data_end+0xf8009784>
    a7ac:	0027883a 	mov	r19,zero
    a7b0:	dd401a04 	addi	r21,sp,104
    a7b4:	003bf306 	br	9784 <__alt_data_end+0xf8009784>
    a7b8:	d9c01d85 	stb	r7,118(sp)
    a7bc:	003dc806 	br	9ee0 <__alt_data_end+0xf8009ee0>
    a7c0:	d9c01d85 	stb	r7,118(sp)
    a7c4:	003d3a06 	br	9cb0 <__alt_data_end+0xf8009cb0>
    a7c8:	d9c01d85 	stb	r7,118(sp)
    a7cc:	003d2a06 	br	9c78 <__alt_data_end+0xf8009c78>
    a7d0:	d9c01d85 	stb	r7,118(sp)
    a7d4:	003cde06 	br	9b50 <__alt_data_end+0xf8009b50>
    a7d8:	d9c01d85 	stb	r7,118(sp)
    a7dc:	003cbc06 	br	9ad0 <__alt_data_end+0xf8009ad0>

0000a7e0 <__vfiprintf_internal>:
    a7e0:	00800074 	movhi	r2,1
    a7e4:	1090b404 	addi	r2,r2,17104
    a7e8:	300f883a 	mov	r7,r6
    a7ec:	280d883a 	mov	r6,r5
    a7f0:	200b883a 	mov	r5,r4
    a7f4:	11000017 	ldw	r4,0(r2)
    a7f8:	00093841 	jmpi	9384 <___vfiprintf_internal_r>

0000a7fc <__sbprintf>:
    a7fc:	2880030b 	ldhu	r2,12(r5)
    a800:	2ac01917 	ldw	r11,100(r5)
    a804:	2a80038b 	ldhu	r10,14(r5)
    a808:	2a400717 	ldw	r9,28(r5)
    a80c:	2a000917 	ldw	r8,36(r5)
    a810:	defee204 	addi	sp,sp,-1144
    a814:	00c10004 	movi	r3,1024
    a818:	dc011a15 	stw	r16,1128(sp)
    a81c:	10bfff4c 	andi	r2,r2,65533
    a820:	2821883a 	mov	r16,r5
    a824:	d8cb883a 	add	r5,sp,r3
    a828:	dc811c15 	stw	r18,1136(sp)
    a82c:	dc411b15 	stw	r17,1132(sp)
    a830:	dfc11d15 	stw	ra,1140(sp)
    a834:	2025883a 	mov	r18,r4
    a838:	d881030d 	sth	r2,1036(sp)
    a83c:	dac11915 	stw	r11,1124(sp)
    a840:	da81038d 	sth	r10,1038(sp)
    a844:	da410715 	stw	r9,1052(sp)
    a848:	da010915 	stw	r8,1060(sp)
    a84c:	dec10015 	stw	sp,1024(sp)
    a850:	dec10415 	stw	sp,1040(sp)
    a854:	d8c10215 	stw	r3,1032(sp)
    a858:	d8c10515 	stw	r3,1044(sp)
    a85c:	d8010615 	stw	zero,1048(sp)
    a860:	00093840 	call	9384 <___vfiprintf_internal_r>
    a864:	1023883a 	mov	r17,r2
    a868:	10000416 	blt	r2,zero,a87c <__sbprintf+0x80>
    a86c:	d9410004 	addi	r5,sp,1024
    a870:	9009883a 	mov	r4,r18
    a874:	00064980 	call	6498 <_fflush_r>
    a878:	10000d1e 	bne	r2,zero,a8b0 <__sbprintf+0xb4>
    a87c:	d881030b 	ldhu	r2,1036(sp)
    a880:	1080100c 	andi	r2,r2,64
    a884:	10000326 	beq	r2,zero,a894 <__sbprintf+0x98>
    a888:	8080030b 	ldhu	r2,12(r16)
    a88c:	10801014 	ori	r2,r2,64
    a890:	8080030d 	sth	r2,12(r16)
    a894:	8805883a 	mov	r2,r17
    a898:	dfc11d17 	ldw	ra,1140(sp)
    a89c:	dc811c17 	ldw	r18,1136(sp)
    a8a0:	dc411b17 	ldw	r17,1132(sp)
    a8a4:	dc011a17 	ldw	r16,1128(sp)
    a8a8:	dec11e04 	addi	sp,sp,1144
    a8ac:	f800283a 	ret
    a8b0:	047fffc4 	movi	r17,-1
    a8b4:	003ff106 	br	a87c <__alt_data_end+0xf800a87c>

0000a8b8 <_write_r>:
    a8b8:	defffd04 	addi	sp,sp,-12
    a8bc:	2805883a 	mov	r2,r5
    a8c0:	dc000015 	stw	r16,0(sp)
    a8c4:	04000074 	movhi	r16,1
    a8c8:	dc400115 	stw	r17,4(sp)
    a8cc:	300b883a 	mov	r5,r6
    a8d0:	84183604 	addi	r16,r16,24792
    a8d4:	2023883a 	mov	r17,r4
    a8d8:	380d883a 	mov	r6,r7
    a8dc:	1009883a 	mov	r4,r2
    a8e0:	dfc00215 	stw	ra,8(sp)
    a8e4:	80000015 	stw	zero,0(r16)
    a8e8:	000ed240 	call	ed24 <write>
    a8ec:	00ffffc4 	movi	r3,-1
    a8f0:	10c00526 	beq	r2,r3,a908 <_write_r+0x50>
    a8f4:	dfc00217 	ldw	ra,8(sp)
    a8f8:	dc400117 	ldw	r17,4(sp)
    a8fc:	dc000017 	ldw	r16,0(sp)
    a900:	dec00304 	addi	sp,sp,12
    a904:	f800283a 	ret
    a908:	80c00017 	ldw	r3,0(r16)
    a90c:	183ff926 	beq	r3,zero,a8f4 <__alt_data_end+0xf800a8f4>
    a910:	88c00015 	stw	r3,0(r17)
    a914:	003ff706 	br	a8f4 <__alt_data_end+0xf800a8f4>

0000a918 <_close_r>:
    a918:	defffd04 	addi	sp,sp,-12
    a91c:	dc000015 	stw	r16,0(sp)
    a920:	04000074 	movhi	r16,1
    a924:	dc400115 	stw	r17,4(sp)
    a928:	84183604 	addi	r16,r16,24792
    a92c:	2023883a 	mov	r17,r4
    a930:	2809883a 	mov	r4,r5
    a934:	dfc00215 	stw	ra,8(sp)
    a938:	80000015 	stw	zero,0(r16)
    a93c:	000e3400 	call	e340 <close>
    a940:	00ffffc4 	movi	r3,-1
    a944:	10c00526 	beq	r2,r3,a95c <_close_r+0x44>
    a948:	dfc00217 	ldw	ra,8(sp)
    a94c:	dc400117 	ldw	r17,4(sp)
    a950:	dc000017 	ldw	r16,0(sp)
    a954:	dec00304 	addi	sp,sp,12
    a958:	f800283a 	ret
    a95c:	80c00017 	ldw	r3,0(r16)
    a960:	183ff926 	beq	r3,zero,a948 <__alt_data_end+0xf800a948>
    a964:	88c00015 	stw	r3,0(r17)
    a968:	003ff706 	br	a948 <__alt_data_end+0xf800a948>

0000a96c <_calloc_r>:
    a96c:	298b383a 	mul	r5,r5,r6
    a970:	defffe04 	addi	sp,sp,-8
    a974:	dfc00115 	stw	ra,4(sp)
    a978:	dc000015 	stw	r16,0(sp)
    a97c:	0001b980 	call	1b98 <_malloc_r>
    a980:	10002926 	beq	r2,zero,aa28 <_calloc_r+0xbc>
    a984:	11bfff17 	ldw	r6,-4(r2)
    a988:	1021883a 	mov	r16,r2
    a98c:	00bfff04 	movi	r2,-4
    a990:	308c703a 	and	r6,r6,r2
    a994:	00c00904 	movi	r3,36
    a998:	308d883a 	add	r6,r6,r2
    a99c:	19801636 	bltu	r3,r6,a9f8 <_calloc_r+0x8c>
    a9a0:	008004c4 	movi	r2,19
    a9a4:	11800b2e 	bgeu	r2,r6,a9d4 <_calloc_r+0x68>
    a9a8:	80000015 	stw	zero,0(r16)
    a9ac:	80000115 	stw	zero,4(r16)
    a9b0:	008006c4 	movi	r2,27
    a9b4:	11801a2e 	bgeu	r2,r6,aa20 <_calloc_r+0xb4>
    a9b8:	80000215 	stw	zero,8(r16)
    a9bc:	80000315 	stw	zero,12(r16)
    a9c0:	30c0151e 	bne	r6,r3,aa18 <_calloc_r+0xac>
    a9c4:	80000415 	stw	zero,16(r16)
    a9c8:	80800604 	addi	r2,r16,24
    a9cc:	80000515 	stw	zero,20(r16)
    a9d0:	00000106 	br	a9d8 <_calloc_r+0x6c>
    a9d4:	8005883a 	mov	r2,r16
    a9d8:	10000015 	stw	zero,0(r2)
    a9dc:	10000115 	stw	zero,4(r2)
    a9e0:	10000215 	stw	zero,8(r2)
    a9e4:	8005883a 	mov	r2,r16
    a9e8:	dfc00117 	ldw	ra,4(sp)
    a9ec:	dc000017 	ldw	r16,0(sp)
    a9f0:	dec00204 	addi	sp,sp,8
    a9f4:	f800283a 	ret
    a9f8:	000b883a 	mov	r5,zero
    a9fc:	8009883a 	mov	r4,r16
    aa00:	000795c0 	call	795c <memset>
    aa04:	8005883a 	mov	r2,r16
    aa08:	dfc00117 	ldw	ra,4(sp)
    aa0c:	dc000017 	ldw	r16,0(sp)
    aa10:	dec00204 	addi	sp,sp,8
    aa14:	f800283a 	ret
    aa18:	80800404 	addi	r2,r16,16
    aa1c:	003fee06 	br	a9d8 <__alt_data_end+0xf800a9d8>
    aa20:	80800204 	addi	r2,r16,8
    aa24:	003fec06 	br	a9d8 <__alt_data_end+0xf800a9d8>
    aa28:	0005883a 	mov	r2,zero
    aa2c:	003fee06 	br	a9e8 <__alt_data_end+0xf800a9e8>

0000aa30 <_fclose_r>:
    aa30:	28003926 	beq	r5,zero,ab18 <_fclose_r+0xe8>
    aa34:	defffc04 	addi	sp,sp,-16
    aa38:	dc400115 	stw	r17,4(sp)
    aa3c:	dc000015 	stw	r16,0(sp)
    aa40:	dfc00315 	stw	ra,12(sp)
    aa44:	dc800215 	stw	r18,8(sp)
    aa48:	2023883a 	mov	r17,r4
    aa4c:	2821883a 	mov	r16,r5
    aa50:	20000226 	beq	r4,zero,aa5c <_fclose_r+0x2c>
    aa54:	20800e17 	ldw	r2,56(r4)
    aa58:	10002726 	beq	r2,zero,aaf8 <_fclose_r+0xc8>
    aa5c:	8080030f 	ldh	r2,12(r16)
    aa60:	1000071e 	bne	r2,zero,aa80 <_fclose_r+0x50>
    aa64:	0005883a 	mov	r2,zero
    aa68:	dfc00317 	ldw	ra,12(sp)
    aa6c:	dc800217 	ldw	r18,8(sp)
    aa70:	dc400117 	ldw	r17,4(sp)
    aa74:	dc000017 	ldw	r16,0(sp)
    aa78:	dec00404 	addi	sp,sp,16
    aa7c:	f800283a 	ret
    aa80:	800b883a 	mov	r5,r16
    aa84:	8809883a 	mov	r4,r17
    aa88:	000627c0 	call	627c <__sflush_r>
    aa8c:	1025883a 	mov	r18,r2
    aa90:	80800b17 	ldw	r2,44(r16)
    aa94:	10000426 	beq	r2,zero,aaa8 <_fclose_r+0x78>
    aa98:	81400717 	ldw	r5,28(r16)
    aa9c:	8809883a 	mov	r4,r17
    aaa0:	103ee83a 	callr	r2
    aaa4:	10001616 	blt	r2,zero,ab00 <_fclose_r+0xd0>
    aaa8:	8080030b 	ldhu	r2,12(r16)
    aaac:	1080200c 	andi	r2,r2,128
    aab0:	1000151e 	bne	r2,zero,ab08 <_fclose_r+0xd8>
    aab4:	81400c17 	ldw	r5,48(r16)
    aab8:	28000526 	beq	r5,zero,aad0 <_fclose_r+0xa0>
    aabc:	80801004 	addi	r2,r16,64
    aac0:	28800226 	beq	r5,r2,aacc <_fclose_r+0x9c>
    aac4:	8809883a 	mov	r4,r17
    aac8:	00069e80 	call	69e8 <_free_r>
    aacc:	80000c15 	stw	zero,48(r16)
    aad0:	81401117 	ldw	r5,68(r16)
    aad4:	28000326 	beq	r5,zero,aae4 <_fclose_r+0xb4>
    aad8:	8809883a 	mov	r4,r17
    aadc:	00069e80 	call	69e8 <_free_r>
    aae0:	80001115 	stw	zero,68(r16)
    aae4:	00068840 	call	6884 <__sfp_lock_acquire>
    aae8:	8000030d 	sth	zero,12(r16)
    aaec:	00068880 	call	6888 <__sfp_lock_release>
    aaf0:	9005883a 	mov	r2,r18
    aaf4:	003fdc06 	br	aa68 <__alt_data_end+0xf800aa68>
    aaf8:	00068740 	call	6874 <__sinit>
    aafc:	003fd706 	br	aa5c <__alt_data_end+0xf800aa5c>
    ab00:	04bfffc4 	movi	r18,-1
    ab04:	003fe806 	br	aaa8 <__alt_data_end+0xf800aaa8>
    ab08:	81400417 	ldw	r5,16(r16)
    ab0c:	8809883a 	mov	r4,r17
    ab10:	00069e80 	call	69e8 <_free_r>
    ab14:	003fe706 	br	aab4 <__alt_data_end+0xf800aab4>
    ab18:	0005883a 	mov	r2,zero
    ab1c:	f800283a 	ret

0000ab20 <fclose>:
    ab20:	00800074 	movhi	r2,1
    ab24:	1090b404 	addi	r2,r2,17104
    ab28:	200b883a 	mov	r5,r4
    ab2c:	11000017 	ldw	r4,0(r2)
    ab30:	000aa301 	jmpi	aa30 <_fclose_r>

0000ab34 <__fputwc>:
    ab34:	defff804 	addi	sp,sp,-32
    ab38:	dcc00415 	stw	r19,16(sp)
    ab3c:	dc800315 	stw	r18,12(sp)
    ab40:	dc000115 	stw	r16,4(sp)
    ab44:	dfc00715 	stw	ra,28(sp)
    ab48:	dd400615 	stw	r21,24(sp)
    ab4c:	dd000515 	stw	r20,20(sp)
    ab50:	dc400215 	stw	r17,8(sp)
    ab54:	2027883a 	mov	r19,r4
    ab58:	2825883a 	mov	r18,r5
    ab5c:	3021883a 	mov	r16,r6
    ab60:	00073c40 	call	73c4 <__locale_mb_cur_max>
    ab64:	00c00044 	movi	r3,1
    ab68:	10c03e26 	beq	r2,r3,ac64 <__fputwc+0x130>
    ab6c:	81c01704 	addi	r7,r16,92
    ab70:	900d883a 	mov	r6,r18
    ab74:	d80b883a 	mov	r5,sp
    ab78:	9809883a 	mov	r4,r19
    ab7c:	000b0040 	call	b004 <_wcrtomb_r>
    ab80:	1029883a 	mov	r20,r2
    ab84:	00bfffc4 	movi	r2,-1
    ab88:	a0802026 	beq	r20,r2,ac0c <__fputwc+0xd8>
    ab8c:	d9400003 	ldbu	r5,0(sp)
    ab90:	a0001c26 	beq	r20,zero,ac04 <__fputwc+0xd0>
    ab94:	0023883a 	mov	r17,zero
    ab98:	05400284 	movi	r21,10
    ab9c:	00000906 	br	abc4 <__fputwc+0x90>
    aba0:	80800017 	ldw	r2,0(r16)
    aba4:	11400005 	stb	r5,0(r2)
    aba8:	80c00017 	ldw	r3,0(r16)
    abac:	18c00044 	addi	r3,r3,1
    abb0:	80c00015 	stw	r3,0(r16)
    abb4:	8c400044 	addi	r17,r17,1
    abb8:	dc45883a 	add	r2,sp,r17
    abbc:	8d00112e 	bgeu	r17,r20,ac04 <__fputwc+0xd0>
    abc0:	11400003 	ldbu	r5,0(r2)
    abc4:	80c00217 	ldw	r3,8(r16)
    abc8:	18ffffc4 	addi	r3,r3,-1
    abcc:	80c00215 	stw	r3,8(r16)
    abd0:	183ff30e 	bge	r3,zero,aba0 <__alt_data_end+0xf800aba0>
    abd4:	80800617 	ldw	r2,24(r16)
    abd8:	18801916 	blt	r3,r2,ac40 <__fputwc+0x10c>
    abdc:	80800017 	ldw	r2,0(r16)
    abe0:	11400005 	stb	r5,0(r2)
    abe4:	80800017 	ldw	r2,0(r16)
    abe8:	10c00003 	ldbu	r3,0(r2)
    abec:	10800044 	addi	r2,r2,1
    abf0:	1d402326 	beq	r3,r21,ac80 <__fputwc+0x14c>
    abf4:	80800015 	stw	r2,0(r16)
    abf8:	8c400044 	addi	r17,r17,1
    abfc:	dc45883a 	add	r2,sp,r17
    ac00:	8d3fef36 	bltu	r17,r20,abc0 <__alt_data_end+0xf800abc0>
    ac04:	9005883a 	mov	r2,r18
    ac08:	00000406 	br	ac1c <__fputwc+0xe8>
    ac0c:	80c0030b 	ldhu	r3,12(r16)
    ac10:	a005883a 	mov	r2,r20
    ac14:	18c01014 	ori	r3,r3,64
    ac18:	80c0030d 	sth	r3,12(r16)
    ac1c:	dfc00717 	ldw	ra,28(sp)
    ac20:	dd400617 	ldw	r21,24(sp)
    ac24:	dd000517 	ldw	r20,20(sp)
    ac28:	dcc00417 	ldw	r19,16(sp)
    ac2c:	dc800317 	ldw	r18,12(sp)
    ac30:	dc400217 	ldw	r17,8(sp)
    ac34:	dc000117 	ldw	r16,4(sp)
    ac38:	dec00804 	addi	sp,sp,32
    ac3c:	f800283a 	ret
    ac40:	800d883a 	mov	r6,r16
    ac44:	29403fcc 	andi	r5,r5,255
    ac48:	9809883a 	mov	r4,r19
    ac4c:	000aeac0 	call	aeac <__swbuf_r>
    ac50:	10bfffe0 	cmpeqi	r2,r2,-1
    ac54:	10803fcc 	andi	r2,r2,255
    ac58:	103fd626 	beq	r2,zero,abb4 <__alt_data_end+0xf800abb4>
    ac5c:	00bfffc4 	movi	r2,-1
    ac60:	003fee06 	br	ac1c <__alt_data_end+0xf800ac1c>
    ac64:	90ffffc4 	addi	r3,r18,-1
    ac68:	01003f84 	movi	r4,254
    ac6c:	20ffbf36 	bltu	r4,r3,ab6c <__alt_data_end+0xf800ab6c>
    ac70:	900b883a 	mov	r5,r18
    ac74:	dc800005 	stb	r18,0(sp)
    ac78:	1029883a 	mov	r20,r2
    ac7c:	003fc506 	br	ab94 <__alt_data_end+0xf800ab94>
    ac80:	800d883a 	mov	r6,r16
    ac84:	a80b883a 	mov	r5,r21
    ac88:	9809883a 	mov	r4,r19
    ac8c:	000aeac0 	call	aeac <__swbuf_r>
    ac90:	10bfffe0 	cmpeqi	r2,r2,-1
    ac94:	003fef06 	br	ac54 <__alt_data_end+0xf800ac54>

0000ac98 <_fputwc_r>:
    ac98:	3080030b 	ldhu	r2,12(r6)
    ac9c:	10c8000c 	andi	r3,r2,8192
    aca0:	1800051e 	bne	r3,zero,acb8 <_fputwc_r+0x20>
    aca4:	30c01917 	ldw	r3,100(r6)
    aca8:	10880014 	ori	r2,r2,8192
    acac:	3080030d 	sth	r2,12(r6)
    acb0:	18880014 	ori	r2,r3,8192
    acb4:	30801915 	stw	r2,100(r6)
    acb8:	000ab341 	jmpi	ab34 <__fputwc>

0000acbc <fputwc>:
    acbc:	00800074 	movhi	r2,1
    acc0:	defffc04 	addi	sp,sp,-16
    acc4:	1090b404 	addi	r2,r2,17104
    acc8:	dc000115 	stw	r16,4(sp)
    accc:	14000017 	ldw	r16,0(r2)
    acd0:	dc400215 	stw	r17,8(sp)
    acd4:	dfc00315 	stw	ra,12(sp)
    acd8:	2023883a 	mov	r17,r4
    acdc:	80000226 	beq	r16,zero,ace8 <fputwc+0x2c>
    ace0:	80800e17 	ldw	r2,56(r16)
    ace4:	10001026 	beq	r2,zero,ad28 <fputwc+0x6c>
    ace8:	2880030b 	ldhu	r2,12(r5)
    acec:	10c8000c 	andi	r3,r2,8192
    acf0:	1800051e 	bne	r3,zero,ad08 <fputwc+0x4c>
    acf4:	28c01917 	ldw	r3,100(r5)
    acf8:	10880014 	ori	r2,r2,8192
    acfc:	2880030d 	sth	r2,12(r5)
    ad00:	18880014 	ori	r2,r3,8192
    ad04:	28801915 	stw	r2,100(r5)
    ad08:	280d883a 	mov	r6,r5
    ad0c:	8009883a 	mov	r4,r16
    ad10:	880b883a 	mov	r5,r17
    ad14:	dfc00317 	ldw	ra,12(sp)
    ad18:	dc400217 	ldw	r17,8(sp)
    ad1c:	dc000117 	ldw	r16,4(sp)
    ad20:	dec00404 	addi	sp,sp,16
    ad24:	000ab341 	jmpi	ab34 <__fputwc>
    ad28:	8009883a 	mov	r4,r16
    ad2c:	d9400015 	stw	r5,0(sp)
    ad30:	00068740 	call	6874 <__sinit>
    ad34:	d9400017 	ldw	r5,0(sp)
    ad38:	003feb06 	br	ace8 <__alt_data_end+0xf800ace8>

0000ad3c <_fstat_r>:
    ad3c:	defffd04 	addi	sp,sp,-12
    ad40:	2805883a 	mov	r2,r5
    ad44:	dc000015 	stw	r16,0(sp)
    ad48:	04000074 	movhi	r16,1
    ad4c:	dc400115 	stw	r17,4(sp)
    ad50:	84183604 	addi	r16,r16,24792
    ad54:	2023883a 	mov	r17,r4
    ad58:	300b883a 	mov	r5,r6
    ad5c:	1009883a 	mov	r4,r2
    ad60:	dfc00215 	stw	ra,8(sp)
    ad64:	80000015 	stw	zero,0(r16)
    ad68:	000e4780 	call	e478 <fstat>
    ad6c:	00ffffc4 	movi	r3,-1
    ad70:	10c00526 	beq	r2,r3,ad88 <_fstat_r+0x4c>
    ad74:	dfc00217 	ldw	ra,8(sp)
    ad78:	dc400117 	ldw	r17,4(sp)
    ad7c:	dc000017 	ldw	r16,0(sp)
    ad80:	dec00304 	addi	sp,sp,12
    ad84:	f800283a 	ret
    ad88:	80c00017 	ldw	r3,0(r16)
    ad8c:	183ff926 	beq	r3,zero,ad74 <__alt_data_end+0xf800ad74>
    ad90:	88c00015 	stw	r3,0(r17)
    ad94:	003ff706 	br	ad74 <__alt_data_end+0xf800ad74>

0000ad98 <_isatty_r>:
    ad98:	defffd04 	addi	sp,sp,-12
    ad9c:	dc000015 	stw	r16,0(sp)
    ada0:	04000074 	movhi	r16,1
    ada4:	dc400115 	stw	r17,4(sp)
    ada8:	84183604 	addi	r16,r16,24792
    adac:	2023883a 	mov	r17,r4
    adb0:	2809883a 	mov	r4,r5
    adb4:	dfc00215 	stw	ra,8(sp)
    adb8:	80000015 	stw	zero,0(r16)
    adbc:	000e5640 	call	e564 <isatty>
    adc0:	00ffffc4 	movi	r3,-1
    adc4:	10c00526 	beq	r2,r3,addc <_isatty_r+0x44>
    adc8:	dfc00217 	ldw	ra,8(sp)
    adcc:	dc400117 	ldw	r17,4(sp)
    add0:	dc000017 	ldw	r16,0(sp)
    add4:	dec00304 	addi	sp,sp,12
    add8:	f800283a 	ret
    addc:	80c00017 	ldw	r3,0(r16)
    ade0:	183ff926 	beq	r3,zero,adc8 <__alt_data_end+0xf800adc8>
    ade4:	88c00015 	stw	r3,0(r17)
    ade8:	003ff706 	br	adc8 <__alt_data_end+0xf800adc8>

0000adec <_lseek_r>:
    adec:	defffd04 	addi	sp,sp,-12
    adf0:	2805883a 	mov	r2,r5
    adf4:	dc000015 	stw	r16,0(sp)
    adf8:	04000074 	movhi	r16,1
    adfc:	dc400115 	stw	r17,4(sp)
    ae00:	300b883a 	mov	r5,r6
    ae04:	84183604 	addi	r16,r16,24792
    ae08:	2023883a 	mov	r17,r4
    ae0c:	380d883a 	mov	r6,r7
    ae10:	1009883a 	mov	r4,r2
    ae14:	dfc00215 	stw	ra,8(sp)
    ae18:	80000015 	stw	zero,0(r16)
    ae1c:	000e7300 	call	e730 <lseek>
    ae20:	00ffffc4 	movi	r3,-1
    ae24:	10c00526 	beq	r2,r3,ae3c <_lseek_r+0x50>
    ae28:	dfc00217 	ldw	ra,8(sp)
    ae2c:	dc400117 	ldw	r17,4(sp)
    ae30:	dc000017 	ldw	r16,0(sp)
    ae34:	dec00304 	addi	sp,sp,12
    ae38:	f800283a 	ret
    ae3c:	80c00017 	ldw	r3,0(r16)
    ae40:	183ff926 	beq	r3,zero,ae28 <__alt_data_end+0xf800ae28>
    ae44:	88c00015 	stw	r3,0(r17)
    ae48:	003ff706 	br	ae28 <__alt_data_end+0xf800ae28>

0000ae4c <_read_r>:
    ae4c:	defffd04 	addi	sp,sp,-12
    ae50:	2805883a 	mov	r2,r5
    ae54:	dc000015 	stw	r16,0(sp)
    ae58:	04000074 	movhi	r16,1
    ae5c:	dc400115 	stw	r17,4(sp)
    ae60:	300b883a 	mov	r5,r6
    ae64:	84183604 	addi	r16,r16,24792
    ae68:	2023883a 	mov	r17,r4
    ae6c:	380d883a 	mov	r6,r7
    ae70:	1009883a 	mov	r4,r2
    ae74:	dfc00215 	stw	ra,8(sp)
    ae78:	80000015 	stw	zero,0(r16)
    ae7c:	000e9040 	call	e904 <read>
    ae80:	00ffffc4 	movi	r3,-1
    ae84:	10c00526 	beq	r2,r3,ae9c <_read_r+0x50>
    ae88:	dfc00217 	ldw	ra,8(sp)
    ae8c:	dc400117 	ldw	r17,4(sp)
    ae90:	dc000017 	ldw	r16,0(sp)
    ae94:	dec00304 	addi	sp,sp,12
    ae98:	f800283a 	ret
    ae9c:	80c00017 	ldw	r3,0(r16)
    aea0:	183ff926 	beq	r3,zero,ae88 <__alt_data_end+0xf800ae88>
    aea4:	88c00015 	stw	r3,0(r17)
    aea8:	003ff706 	br	ae88 <__alt_data_end+0xf800ae88>

0000aeac <__swbuf_r>:
    aeac:	defffb04 	addi	sp,sp,-20
    aeb0:	dcc00315 	stw	r19,12(sp)
    aeb4:	dc800215 	stw	r18,8(sp)
    aeb8:	dc000015 	stw	r16,0(sp)
    aebc:	dfc00415 	stw	ra,16(sp)
    aec0:	dc400115 	stw	r17,4(sp)
    aec4:	2025883a 	mov	r18,r4
    aec8:	2827883a 	mov	r19,r5
    aecc:	3021883a 	mov	r16,r6
    aed0:	20000226 	beq	r4,zero,aedc <__swbuf_r+0x30>
    aed4:	20800e17 	ldw	r2,56(r4)
    aed8:	10004226 	beq	r2,zero,afe4 <__swbuf_r+0x138>
    aedc:	80800617 	ldw	r2,24(r16)
    aee0:	8100030b 	ldhu	r4,12(r16)
    aee4:	80800215 	stw	r2,8(r16)
    aee8:	2080020c 	andi	r2,r4,8
    aeec:	10003626 	beq	r2,zero,afc8 <__swbuf_r+0x11c>
    aef0:	80c00417 	ldw	r3,16(r16)
    aef4:	18003426 	beq	r3,zero,afc8 <__swbuf_r+0x11c>
    aef8:	2088000c 	andi	r2,r4,8192
    aefc:	9c403fcc 	andi	r17,r19,255
    af00:	10001a26 	beq	r2,zero,af6c <__swbuf_r+0xc0>
    af04:	80800017 	ldw	r2,0(r16)
    af08:	81000517 	ldw	r4,20(r16)
    af0c:	10c7c83a 	sub	r3,r2,r3
    af10:	1900200e 	bge	r3,r4,af94 <__swbuf_r+0xe8>
    af14:	18c00044 	addi	r3,r3,1
    af18:	81000217 	ldw	r4,8(r16)
    af1c:	11400044 	addi	r5,r2,1
    af20:	81400015 	stw	r5,0(r16)
    af24:	213fffc4 	addi	r4,r4,-1
    af28:	81000215 	stw	r4,8(r16)
    af2c:	14c00005 	stb	r19,0(r2)
    af30:	80800517 	ldw	r2,20(r16)
    af34:	10c01e26 	beq	r2,r3,afb0 <__swbuf_r+0x104>
    af38:	8080030b 	ldhu	r2,12(r16)
    af3c:	1080004c 	andi	r2,r2,1
    af40:	10000226 	beq	r2,zero,af4c <__swbuf_r+0xa0>
    af44:	00800284 	movi	r2,10
    af48:	88801926 	beq	r17,r2,afb0 <__swbuf_r+0x104>
    af4c:	8805883a 	mov	r2,r17
    af50:	dfc00417 	ldw	ra,16(sp)
    af54:	dcc00317 	ldw	r19,12(sp)
    af58:	dc800217 	ldw	r18,8(sp)
    af5c:	dc400117 	ldw	r17,4(sp)
    af60:	dc000017 	ldw	r16,0(sp)
    af64:	dec00504 	addi	sp,sp,20
    af68:	f800283a 	ret
    af6c:	81401917 	ldw	r5,100(r16)
    af70:	00b7ffc4 	movi	r2,-8193
    af74:	21080014 	ori	r4,r4,8192
    af78:	2884703a 	and	r2,r5,r2
    af7c:	80801915 	stw	r2,100(r16)
    af80:	80800017 	ldw	r2,0(r16)
    af84:	8100030d 	sth	r4,12(r16)
    af88:	81000517 	ldw	r4,20(r16)
    af8c:	10c7c83a 	sub	r3,r2,r3
    af90:	193fe016 	blt	r3,r4,af14 <__alt_data_end+0xf800af14>
    af94:	800b883a 	mov	r5,r16
    af98:	9009883a 	mov	r4,r18
    af9c:	00064980 	call	6498 <_fflush_r>
    afa0:	1000071e 	bne	r2,zero,afc0 <__swbuf_r+0x114>
    afa4:	80800017 	ldw	r2,0(r16)
    afa8:	00c00044 	movi	r3,1
    afac:	003fda06 	br	af18 <__alt_data_end+0xf800af18>
    afb0:	800b883a 	mov	r5,r16
    afb4:	9009883a 	mov	r4,r18
    afb8:	00064980 	call	6498 <_fflush_r>
    afbc:	103fe326 	beq	r2,zero,af4c <__alt_data_end+0xf800af4c>
    afc0:	00bfffc4 	movi	r2,-1
    afc4:	003fe206 	br	af50 <__alt_data_end+0xf800af50>
    afc8:	800b883a 	mov	r5,r16
    afcc:	9009883a 	mov	r4,r18
    afd0:	00048a00 	call	48a0 <__swsetup_r>
    afd4:	103ffa1e 	bne	r2,zero,afc0 <__alt_data_end+0xf800afc0>
    afd8:	8100030b 	ldhu	r4,12(r16)
    afdc:	80c00417 	ldw	r3,16(r16)
    afe0:	003fc506 	br	aef8 <__alt_data_end+0xf800aef8>
    afe4:	00068740 	call	6874 <__sinit>
    afe8:	003fbc06 	br	aedc <__alt_data_end+0xf800aedc>

0000afec <__swbuf>:
    afec:	00800074 	movhi	r2,1
    aff0:	1090b404 	addi	r2,r2,17104
    aff4:	280d883a 	mov	r6,r5
    aff8:	200b883a 	mov	r5,r4
    affc:	11000017 	ldw	r4,0(r2)
    b000:	000aeac1 	jmpi	aeac <__swbuf_r>

0000b004 <_wcrtomb_r>:
    b004:	defff604 	addi	sp,sp,-40
    b008:	00800074 	movhi	r2,1
    b00c:	dc800815 	stw	r18,32(sp)
    b010:	dc400715 	stw	r17,28(sp)
    b014:	dc000615 	stw	r16,24(sp)
    b018:	1090b604 	addi	r2,r2,17112
    b01c:	dfc00915 	stw	ra,36(sp)
    b020:	2021883a 	mov	r16,r4
    b024:	3823883a 	mov	r17,r7
    b028:	14800017 	ldw	r18,0(r2)
    b02c:	28001426 	beq	r5,zero,b080 <_wcrtomb_r+0x7c>
    b030:	d9400415 	stw	r5,16(sp)
    b034:	d9800515 	stw	r6,20(sp)
    b038:	00073b80 	call	73b8 <__locale_charset>
    b03c:	d9800517 	ldw	r6,20(sp)
    b040:	d9400417 	ldw	r5,16(sp)
    b044:	100f883a 	mov	r7,r2
    b048:	dc400015 	stw	r17,0(sp)
    b04c:	8009883a 	mov	r4,r16
    b050:	903ee83a 	callr	r18
    b054:	00ffffc4 	movi	r3,-1
    b058:	10c0031e 	bne	r2,r3,b068 <_wcrtomb_r+0x64>
    b05c:	88000015 	stw	zero,0(r17)
    b060:	00c02284 	movi	r3,138
    b064:	80c00015 	stw	r3,0(r16)
    b068:	dfc00917 	ldw	ra,36(sp)
    b06c:	dc800817 	ldw	r18,32(sp)
    b070:	dc400717 	ldw	r17,28(sp)
    b074:	dc000617 	ldw	r16,24(sp)
    b078:	dec00a04 	addi	sp,sp,40
    b07c:	f800283a 	ret
    b080:	00073b80 	call	73b8 <__locale_charset>
    b084:	100f883a 	mov	r7,r2
    b088:	dc400015 	stw	r17,0(sp)
    b08c:	000d883a 	mov	r6,zero
    b090:	d9400104 	addi	r5,sp,4
    b094:	8009883a 	mov	r4,r16
    b098:	903ee83a 	callr	r18
    b09c:	003fed06 	br	b054 <__alt_data_end+0xf800b054>

0000b0a0 <wcrtomb>:
    b0a0:	defff604 	addi	sp,sp,-40
    b0a4:	00800074 	movhi	r2,1
    b0a8:	dc800615 	stw	r18,24(sp)
    b0ac:	dc400515 	stw	r17,20(sp)
    b0b0:	1090b404 	addi	r2,r2,17104
    b0b4:	dfc00915 	stw	ra,36(sp)
    b0b8:	dd000815 	stw	r20,32(sp)
    b0bc:	dcc00715 	stw	r19,28(sp)
    b0c0:	dc000415 	stw	r16,16(sp)
    b0c4:	3025883a 	mov	r18,r6
    b0c8:	14400017 	ldw	r17,0(r2)
    b0cc:	20001926 	beq	r4,zero,b134 <wcrtomb+0x94>
    b0d0:	00800074 	movhi	r2,1
    b0d4:	1090b604 	addi	r2,r2,17112
    b0d8:	15000017 	ldw	r20,0(r2)
    b0dc:	2021883a 	mov	r16,r4
    b0e0:	2827883a 	mov	r19,r5
    b0e4:	00073b80 	call	73b8 <__locale_charset>
    b0e8:	100f883a 	mov	r7,r2
    b0ec:	dc800015 	stw	r18,0(sp)
    b0f0:	980d883a 	mov	r6,r19
    b0f4:	800b883a 	mov	r5,r16
    b0f8:	8809883a 	mov	r4,r17
    b0fc:	a03ee83a 	callr	r20
    b100:	00ffffc4 	movi	r3,-1
    b104:	10c0031e 	bne	r2,r3,b114 <wcrtomb+0x74>
    b108:	90000015 	stw	zero,0(r18)
    b10c:	00c02284 	movi	r3,138
    b110:	88c00015 	stw	r3,0(r17)
    b114:	dfc00917 	ldw	ra,36(sp)
    b118:	dd000817 	ldw	r20,32(sp)
    b11c:	dcc00717 	ldw	r19,28(sp)
    b120:	dc800617 	ldw	r18,24(sp)
    b124:	dc400517 	ldw	r17,20(sp)
    b128:	dc000417 	ldw	r16,16(sp)
    b12c:	dec00a04 	addi	sp,sp,40
    b130:	f800283a 	ret
    b134:	00800074 	movhi	r2,1
    b138:	1090b604 	addi	r2,r2,17112
    b13c:	14000017 	ldw	r16,0(r2)
    b140:	00073b80 	call	73b8 <__locale_charset>
    b144:	100f883a 	mov	r7,r2
    b148:	dc800015 	stw	r18,0(sp)
    b14c:	000d883a 	mov	r6,zero
    b150:	d9400104 	addi	r5,sp,4
    b154:	8809883a 	mov	r4,r17
    b158:	803ee83a 	callr	r16
    b15c:	003fe806 	br	b100 <__alt_data_end+0xf800b100>

0000b160 <__ascii_wctomb>:
    b160:	28000526 	beq	r5,zero,b178 <__ascii_wctomb+0x18>
    b164:	00803fc4 	movi	r2,255
    b168:	11800536 	bltu	r2,r6,b180 <__ascii_wctomb+0x20>
    b16c:	29800005 	stb	r6,0(r5)
    b170:	00800044 	movi	r2,1
    b174:	f800283a 	ret
    b178:	0005883a 	mov	r2,zero
    b17c:	f800283a 	ret
    b180:	00802284 	movi	r2,138
    b184:	20800015 	stw	r2,0(r4)
    b188:	00bfffc4 	movi	r2,-1
    b18c:	f800283a 	ret

0000b190 <_wctomb_r>:
    b190:	00800074 	movhi	r2,1
    b194:	defff904 	addi	sp,sp,-28
    b198:	1090b604 	addi	r2,r2,17112
    b19c:	dfc00615 	stw	ra,24(sp)
    b1a0:	dc400515 	stw	r17,20(sp)
    b1a4:	dc000415 	stw	r16,16(sp)
    b1a8:	3823883a 	mov	r17,r7
    b1ac:	14000017 	ldw	r16,0(r2)
    b1b0:	d9000115 	stw	r4,4(sp)
    b1b4:	d9400215 	stw	r5,8(sp)
    b1b8:	d9800315 	stw	r6,12(sp)
    b1bc:	00073b80 	call	73b8 <__locale_charset>
    b1c0:	d9800317 	ldw	r6,12(sp)
    b1c4:	d9400217 	ldw	r5,8(sp)
    b1c8:	d9000117 	ldw	r4,4(sp)
    b1cc:	100f883a 	mov	r7,r2
    b1d0:	dc400015 	stw	r17,0(sp)
    b1d4:	803ee83a 	callr	r16
    b1d8:	dfc00617 	ldw	ra,24(sp)
    b1dc:	dc400517 	ldw	r17,20(sp)
    b1e0:	dc000417 	ldw	r16,16(sp)
    b1e4:	dec00704 	addi	sp,sp,28
    b1e8:	f800283a 	ret

0000b1ec <__udivdi3>:
    b1ec:	defff504 	addi	sp,sp,-44
    b1f0:	dcc00415 	stw	r19,16(sp)
    b1f4:	dc000115 	stw	r16,4(sp)
    b1f8:	dfc00a15 	stw	ra,40(sp)
    b1fc:	df000915 	stw	fp,36(sp)
    b200:	ddc00815 	stw	r23,32(sp)
    b204:	dd800715 	stw	r22,28(sp)
    b208:	dd400615 	stw	r21,24(sp)
    b20c:	dd000515 	stw	r20,20(sp)
    b210:	dc800315 	stw	r18,12(sp)
    b214:	dc400215 	stw	r17,8(sp)
    b218:	2027883a 	mov	r19,r4
    b21c:	2821883a 	mov	r16,r5
    b220:	3800411e 	bne	r7,zero,b328 <__udivdi3+0x13c>
    b224:	3023883a 	mov	r17,r6
    b228:	2025883a 	mov	r18,r4
    b22c:	2980522e 	bgeu	r5,r6,b378 <__udivdi3+0x18c>
    b230:	00bfffd4 	movui	r2,65535
    b234:	282d883a 	mov	r22,r5
    b238:	1180a836 	bltu	r2,r6,b4dc <__udivdi3+0x2f0>
    b23c:	00803fc4 	movi	r2,255
    b240:	1185803a 	cmpltu	r2,r2,r6
    b244:	100490fa 	slli	r2,r2,3
    b248:	3086d83a 	srl	r3,r6,r2
    b24c:	01000074 	movhi	r4,1
    b250:	21086304 	addi	r4,r4,8588
    b254:	20c7883a 	add	r3,r4,r3
    b258:	18c00003 	ldbu	r3,0(r3)
    b25c:	1885883a 	add	r2,r3,r2
    b260:	00c00804 	movi	r3,32
    b264:	1887c83a 	sub	r3,r3,r2
    b268:	18000526 	beq	r3,zero,b280 <__udivdi3+0x94>
    b26c:	80e0983a 	sll	r16,r16,r3
    b270:	9884d83a 	srl	r2,r19,r2
    b274:	30e2983a 	sll	r17,r6,r3
    b278:	98e4983a 	sll	r18,r19,r3
    b27c:	142cb03a 	or	r22,r2,r16
    b280:	882ad43a 	srli	r21,r17,16
    b284:	b009883a 	mov	r4,r22
    b288:	8d3fffcc 	andi	r20,r17,65535
    b28c:	a80b883a 	mov	r5,r21
    b290:	0001b180 	call	1b18 <__umodsi3>
    b294:	b009883a 	mov	r4,r22
    b298:	a80b883a 	mov	r5,r21
    b29c:	1027883a 	mov	r19,r2
    b2a0:	0001ab40 	call	1ab4 <__udivsi3>
    b2a4:	102d883a 	mov	r22,r2
    b2a8:	9826943a 	slli	r19,r19,16
    b2ac:	9004d43a 	srli	r2,r18,16
    b2b0:	a5a1383a 	mul	r16,r20,r22
    b2b4:	14c4b03a 	or	r2,r2,r19
    b2b8:	1400052e 	bgeu	r2,r16,b2d0 <__udivdi3+0xe4>
    b2bc:	1445883a 	add	r2,r2,r17
    b2c0:	b0ffffc4 	addi	r3,r22,-1
    b2c4:	14400136 	bltu	r2,r17,b2cc <__udivdi3+0xe0>
    b2c8:	14012336 	bltu	r2,r16,b758 <__udivdi3+0x56c>
    b2cc:	182d883a 	mov	r22,r3
    b2d0:	1421c83a 	sub	r16,r2,r16
    b2d4:	a80b883a 	mov	r5,r21
    b2d8:	8009883a 	mov	r4,r16
    b2dc:	0001b180 	call	1b18 <__umodsi3>
    b2e0:	1027883a 	mov	r19,r2
    b2e4:	a80b883a 	mov	r5,r21
    b2e8:	8009883a 	mov	r4,r16
    b2ec:	0001ab40 	call	1ab4 <__udivsi3>
    b2f0:	9826943a 	slli	r19,r19,16
    b2f4:	a0a9383a 	mul	r20,r20,r2
    b2f8:	94bfffcc 	andi	r18,r18,65535
    b2fc:	94e4b03a 	or	r18,r18,r19
    b300:	9500052e 	bgeu	r18,r20,b318 <__udivdi3+0x12c>
    b304:	8ca5883a 	add	r18,r17,r18
    b308:	10ffffc4 	addi	r3,r2,-1
    b30c:	9440f136 	bltu	r18,r17,b6d4 <__udivdi3+0x4e8>
    b310:	9500f02e 	bgeu	r18,r20,b6d4 <__udivdi3+0x4e8>
    b314:	10bfff84 	addi	r2,r2,-2
    b318:	b00c943a 	slli	r6,r22,16
    b31c:	0007883a 	mov	r3,zero
    b320:	3084b03a 	or	r2,r6,r2
    b324:	00005906 	br	b48c <__udivdi3+0x2a0>
    b328:	29c05636 	bltu	r5,r7,b484 <__udivdi3+0x298>
    b32c:	00bfffd4 	movui	r2,65535
    b330:	11c0622e 	bgeu	r2,r7,b4bc <__udivdi3+0x2d0>
    b334:	00804034 	movhi	r2,256
    b338:	10bfffc4 	addi	r2,r2,-1
    b33c:	11c0ee36 	bltu	r2,r7,b6f8 <__udivdi3+0x50c>
    b340:	00800404 	movi	r2,16
    b344:	3886d83a 	srl	r3,r7,r2
    b348:	01000074 	movhi	r4,1
    b34c:	21086304 	addi	r4,r4,8588
    b350:	20c7883a 	add	r3,r4,r3
    b354:	18c00003 	ldbu	r3,0(r3)
    b358:	05400804 	movi	r21,32
    b35c:	1885883a 	add	r2,r3,r2
    b360:	a8abc83a 	sub	r21,r21,r2
    b364:	a800621e 	bne	r21,zero,b4f0 <__udivdi3+0x304>
    b368:	3c00e936 	bltu	r7,r16,b710 <__udivdi3+0x524>
    b36c:	9985403a 	cmpgeu	r2,r19,r6
    b370:	0007883a 	mov	r3,zero
    b374:	00004506 	br	b48c <__udivdi3+0x2a0>
    b378:	3000041e 	bne	r6,zero,b38c <__udivdi3+0x1a0>
    b37c:	000b883a 	mov	r5,zero
    b380:	01000044 	movi	r4,1
    b384:	0001ab40 	call	1ab4 <__udivsi3>
    b388:	1023883a 	mov	r17,r2
    b38c:	00bfffd4 	movui	r2,65535
    b390:	14404e2e 	bgeu	r2,r17,b4cc <__udivdi3+0x2e0>
    b394:	00804034 	movhi	r2,256
    b398:	10bfffc4 	addi	r2,r2,-1
    b39c:	1440d836 	bltu	r2,r17,b700 <__udivdi3+0x514>
    b3a0:	00800404 	movi	r2,16
    b3a4:	8886d83a 	srl	r3,r17,r2
    b3a8:	01000074 	movhi	r4,1
    b3ac:	21086304 	addi	r4,r4,8588
    b3b0:	20c7883a 	add	r3,r4,r3
    b3b4:	18c00003 	ldbu	r3,0(r3)
    b3b8:	1885883a 	add	r2,r3,r2
    b3bc:	00c00804 	movi	r3,32
    b3c0:	1887c83a 	sub	r3,r3,r2
    b3c4:	18008f1e 	bne	r3,zero,b604 <__udivdi3+0x418>
    b3c8:	882ad43a 	srli	r21,r17,16
    b3cc:	8461c83a 	sub	r16,r16,r17
    b3d0:	8d3fffcc 	andi	r20,r17,65535
    b3d4:	00c00044 	movi	r3,1
    b3d8:	8009883a 	mov	r4,r16
    b3dc:	a80b883a 	mov	r5,r21
    b3e0:	d8c00015 	stw	r3,0(sp)
    b3e4:	0001b180 	call	1b18 <__umodsi3>
    b3e8:	8009883a 	mov	r4,r16
    b3ec:	a80b883a 	mov	r5,r21
    b3f0:	1027883a 	mov	r19,r2
    b3f4:	0001ab40 	call	1ab4 <__udivsi3>
    b3f8:	9826943a 	slli	r19,r19,16
    b3fc:	9008d43a 	srli	r4,r18,16
    b400:	1521383a 	mul	r16,r2,r20
    b404:	102d883a 	mov	r22,r2
    b408:	24c8b03a 	or	r4,r4,r19
    b40c:	d8c00017 	ldw	r3,0(sp)
    b410:	2400052e 	bgeu	r4,r16,b428 <__udivdi3+0x23c>
    b414:	2449883a 	add	r4,r4,r17
    b418:	b0bfffc4 	addi	r2,r22,-1
    b41c:	24400136 	bltu	r4,r17,b424 <__udivdi3+0x238>
    b420:	2400ca36 	bltu	r4,r16,b74c <__udivdi3+0x560>
    b424:	102d883a 	mov	r22,r2
    b428:	2421c83a 	sub	r16,r4,r16
    b42c:	a80b883a 	mov	r5,r21
    b430:	8009883a 	mov	r4,r16
    b434:	d8c00015 	stw	r3,0(sp)
    b438:	0001b180 	call	1b18 <__umodsi3>
    b43c:	1027883a 	mov	r19,r2
    b440:	a80b883a 	mov	r5,r21
    b444:	8009883a 	mov	r4,r16
    b448:	0001ab40 	call	1ab4 <__udivsi3>
    b44c:	9826943a 	slli	r19,r19,16
    b450:	1529383a 	mul	r20,r2,r20
    b454:	94bfffcc 	andi	r18,r18,65535
    b458:	94e4b03a 	or	r18,r18,r19
    b45c:	d8c00017 	ldw	r3,0(sp)
    b460:	9500052e 	bgeu	r18,r20,b478 <__udivdi3+0x28c>
    b464:	8ca5883a 	add	r18,r17,r18
    b468:	113fffc4 	addi	r4,r2,-1
    b46c:	94409736 	bltu	r18,r17,b6cc <__udivdi3+0x4e0>
    b470:	9500962e 	bgeu	r18,r20,b6cc <__udivdi3+0x4e0>
    b474:	10bfff84 	addi	r2,r2,-2
    b478:	b00c943a 	slli	r6,r22,16
    b47c:	3084b03a 	or	r2,r6,r2
    b480:	00000206 	br	b48c <__udivdi3+0x2a0>
    b484:	0007883a 	mov	r3,zero
    b488:	0005883a 	mov	r2,zero
    b48c:	dfc00a17 	ldw	ra,40(sp)
    b490:	df000917 	ldw	fp,36(sp)
    b494:	ddc00817 	ldw	r23,32(sp)
    b498:	dd800717 	ldw	r22,28(sp)
    b49c:	dd400617 	ldw	r21,24(sp)
    b4a0:	dd000517 	ldw	r20,20(sp)
    b4a4:	dcc00417 	ldw	r19,16(sp)
    b4a8:	dc800317 	ldw	r18,12(sp)
    b4ac:	dc400217 	ldw	r17,8(sp)
    b4b0:	dc000117 	ldw	r16,4(sp)
    b4b4:	dec00b04 	addi	sp,sp,44
    b4b8:	f800283a 	ret
    b4bc:	00803fc4 	movi	r2,255
    b4c0:	11c5803a 	cmpltu	r2,r2,r7
    b4c4:	100490fa 	slli	r2,r2,3
    b4c8:	003f9e06 	br	b344 <__alt_data_end+0xf800b344>
    b4cc:	00803fc4 	movi	r2,255
    b4d0:	1445803a 	cmpltu	r2,r2,r17
    b4d4:	100490fa 	slli	r2,r2,3
    b4d8:	003fb206 	br	b3a4 <__alt_data_end+0xf800b3a4>
    b4dc:	00804034 	movhi	r2,256
    b4e0:	10bfffc4 	addi	r2,r2,-1
    b4e4:	11808836 	bltu	r2,r6,b708 <__udivdi3+0x51c>
    b4e8:	00800404 	movi	r2,16
    b4ec:	003f5606 	br	b248 <__alt_data_end+0xf800b248>
    b4f0:	30aed83a 	srl	r23,r6,r2
    b4f4:	3d4e983a 	sll	r7,r7,r21
    b4f8:	80acd83a 	srl	r22,r16,r2
    b4fc:	9884d83a 	srl	r2,r19,r2
    b500:	3deeb03a 	or	r23,r7,r23
    b504:	b824d43a 	srli	r18,r23,16
    b508:	8560983a 	sll	r16,r16,r21
    b50c:	b009883a 	mov	r4,r22
    b510:	900b883a 	mov	r5,r18
    b514:	3568983a 	sll	r20,r6,r21
    b518:	1420b03a 	or	r16,r2,r16
    b51c:	0001b180 	call	1b18 <__umodsi3>
    b520:	b009883a 	mov	r4,r22
    b524:	900b883a 	mov	r5,r18
    b528:	1023883a 	mov	r17,r2
    b52c:	0001ab40 	call	1ab4 <__udivsi3>
    b530:	8808943a 	slli	r4,r17,16
    b534:	bf3fffcc 	andi	fp,r23,65535
    b538:	8006d43a 	srli	r3,r16,16
    b53c:	e0a3383a 	mul	r17,fp,r2
    b540:	100d883a 	mov	r6,r2
    b544:	1906b03a 	or	r3,r3,r4
    b548:	1c40042e 	bgeu	r3,r17,b55c <__udivdi3+0x370>
    b54c:	1dc7883a 	add	r3,r3,r23
    b550:	10bfffc4 	addi	r2,r2,-1
    b554:	1dc0752e 	bgeu	r3,r23,b72c <__udivdi3+0x540>
    b558:	100d883a 	mov	r6,r2
    b55c:	1c63c83a 	sub	r17,r3,r17
    b560:	900b883a 	mov	r5,r18
    b564:	8809883a 	mov	r4,r17
    b568:	d9800015 	stw	r6,0(sp)
    b56c:	0001b180 	call	1b18 <__umodsi3>
    b570:	102d883a 	mov	r22,r2
    b574:	8809883a 	mov	r4,r17
    b578:	900b883a 	mov	r5,r18
    b57c:	0001ab40 	call	1ab4 <__udivsi3>
    b580:	b02c943a 	slli	r22,r22,16
    b584:	e089383a 	mul	r4,fp,r2
    b588:	843fffcc 	andi	r16,r16,65535
    b58c:	85a0b03a 	or	r16,r16,r22
    b590:	d9800017 	ldw	r6,0(sp)
    b594:	8100042e 	bgeu	r16,r4,b5a8 <__udivdi3+0x3bc>
    b598:	85e1883a 	add	r16,r16,r23
    b59c:	10ffffc4 	addi	r3,r2,-1
    b5a0:	85c05e2e 	bgeu	r16,r23,b71c <__udivdi3+0x530>
    b5a4:	1805883a 	mov	r2,r3
    b5a8:	300c943a 	slli	r6,r6,16
    b5ac:	a17fffcc 	andi	r5,r20,65535
    b5b0:	a028d43a 	srli	r20,r20,16
    b5b4:	3084b03a 	or	r2,r6,r2
    b5b8:	10ffffcc 	andi	r3,r2,65535
    b5bc:	100cd43a 	srli	r6,r2,16
    b5c0:	194f383a 	mul	r7,r3,r5
    b5c4:	1d07383a 	mul	r3,r3,r20
    b5c8:	314b383a 	mul	r5,r6,r5
    b5cc:	3810d43a 	srli	r8,r7,16
    b5d0:	8121c83a 	sub	r16,r16,r4
    b5d4:	1947883a 	add	r3,r3,r5
    b5d8:	40c7883a 	add	r3,r8,r3
    b5dc:	350d383a 	mul	r6,r6,r20
    b5e0:	1940022e 	bgeu	r3,r5,b5ec <__udivdi3+0x400>
    b5e4:	01000074 	movhi	r4,1
    b5e8:	310d883a 	add	r6,r6,r4
    b5ec:	1828d43a 	srli	r20,r3,16
    b5f0:	a18d883a 	add	r6,r20,r6
    b5f4:	81803e36 	bltu	r16,r6,b6f0 <__udivdi3+0x504>
    b5f8:	81803826 	beq	r16,r6,b6dc <__udivdi3+0x4f0>
    b5fc:	0007883a 	mov	r3,zero
    b600:	003fa206 	br	b48c <__alt_data_end+0xf800b48c>
    b604:	88e2983a 	sll	r17,r17,r3
    b608:	80a8d83a 	srl	r20,r16,r2
    b60c:	80e0983a 	sll	r16,r16,r3
    b610:	882ad43a 	srli	r21,r17,16
    b614:	9884d83a 	srl	r2,r19,r2
    b618:	a009883a 	mov	r4,r20
    b61c:	a80b883a 	mov	r5,r21
    b620:	142eb03a 	or	r23,r2,r16
    b624:	98e4983a 	sll	r18,r19,r3
    b628:	0001b180 	call	1b18 <__umodsi3>
    b62c:	a009883a 	mov	r4,r20
    b630:	a80b883a 	mov	r5,r21
    b634:	1021883a 	mov	r16,r2
    b638:	0001ab40 	call	1ab4 <__udivsi3>
    b63c:	1039883a 	mov	fp,r2
    b640:	8d3fffcc 	andi	r20,r17,65535
    b644:	8020943a 	slli	r16,r16,16
    b648:	b804d43a 	srli	r2,r23,16
    b64c:	a72d383a 	mul	r22,r20,fp
    b650:	1404b03a 	or	r2,r2,r16
    b654:	1580062e 	bgeu	r2,r22,b670 <__udivdi3+0x484>
    b658:	1445883a 	add	r2,r2,r17
    b65c:	e0ffffc4 	addi	r3,fp,-1
    b660:	14403836 	bltu	r2,r17,b744 <__udivdi3+0x558>
    b664:	1580372e 	bgeu	r2,r22,b744 <__udivdi3+0x558>
    b668:	e73fff84 	addi	fp,fp,-2
    b66c:	1445883a 	add	r2,r2,r17
    b670:	15adc83a 	sub	r22,r2,r22
    b674:	a80b883a 	mov	r5,r21
    b678:	b009883a 	mov	r4,r22
    b67c:	0001b180 	call	1b18 <__umodsi3>
    b680:	1027883a 	mov	r19,r2
    b684:	b009883a 	mov	r4,r22
    b688:	a80b883a 	mov	r5,r21
    b68c:	0001ab40 	call	1ab4 <__udivsi3>
    b690:	9826943a 	slli	r19,r19,16
    b694:	a0a1383a 	mul	r16,r20,r2
    b698:	b93fffcc 	andi	r4,r23,65535
    b69c:	24c8b03a 	or	r4,r4,r19
    b6a0:	2400062e 	bgeu	r4,r16,b6bc <__udivdi3+0x4d0>
    b6a4:	2449883a 	add	r4,r4,r17
    b6a8:	10ffffc4 	addi	r3,r2,-1
    b6ac:	24402336 	bltu	r4,r17,b73c <__udivdi3+0x550>
    b6b0:	2400222e 	bgeu	r4,r16,b73c <__udivdi3+0x550>
    b6b4:	10bfff84 	addi	r2,r2,-2
    b6b8:	2449883a 	add	r4,r4,r17
    b6bc:	e038943a 	slli	fp,fp,16
    b6c0:	2421c83a 	sub	r16,r4,r16
    b6c4:	e086b03a 	or	r3,fp,r2
    b6c8:	003f4306 	br	b3d8 <__alt_data_end+0xf800b3d8>
    b6cc:	2005883a 	mov	r2,r4
    b6d0:	003f6906 	br	b478 <__alt_data_end+0xf800b478>
    b6d4:	1805883a 	mov	r2,r3
    b6d8:	003f0f06 	br	b318 <__alt_data_end+0xf800b318>
    b6dc:	1806943a 	slli	r3,r3,16
    b6e0:	9d66983a 	sll	r19,r19,r21
    b6e4:	39ffffcc 	andi	r7,r7,65535
    b6e8:	19c7883a 	add	r3,r3,r7
    b6ec:	98ffc32e 	bgeu	r19,r3,b5fc <__alt_data_end+0xf800b5fc>
    b6f0:	10bfffc4 	addi	r2,r2,-1
    b6f4:	003fc106 	br	b5fc <__alt_data_end+0xf800b5fc>
    b6f8:	00800604 	movi	r2,24
    b6fc:	003f1106 	br	b344 <__alt_data_end+0xf800b344>
    b700:	00800604 	movi	r2,24
    b704:	003f2706 	br	b3a4 <__alt_data_end+0xf800b3a4>
    b708:	00800604 	movi	r2,24
    b70c:	003ece06 	br	b248 <__alt_data_end+0xf800b248>
    b710:	0007883a 	mov	r3,zero
    b714:	00800044 	movi	r2,1
    b718:	003f5c06 	br	b48c <__alt_data_end+0xf800b48c>
    b71c:	813fa12e 	bgeu	r16,r4,b5a4 <__alt_data_end+0xf800b5a4>
    b720:	10bfff84 	addi	r2,r2,-2
    b724:	85e1883a 	add	r16,r16,r23
    b728:	003f9f06 	br	b5a8 <__alt_data_end+0xf800b5a8>
    b72c:	1c7f8a2e 	bgeu	r3,r17,b558 <__alt_data_end+0xf800b558>
    b730:	31bfff84 	addi	r6,r6,-2
    b734:	1dc7883a 	add	r3,r3,r23
    b738:	003f8806 	br	b55c <__alt_data_end+0xf800b55c>
    b73c:	1805883a 	mov	r2,r3
    b740:	003fde06 	br	b6bc <__alt_data_end+0xf800b6bc>
    b744:	1839883a 	mov	fp,r3
    b748:	003fc906 	br	b670 <__alt_data_end+0xf800b670>
    b74c:	b5bfff84 	addi	r22,r22,-2
    b750:	2449883a 	add	r4,r4,r17
    b754:	003f3406 	br	b428 <__alt_data_end+0xf800b428>
    b758:	b5bfff84 	addi	r22,r22,-2
    b75c:	1445883a 	add	r2,r2,r17
    b760:	003edb06 	br	b2d0 <__alt_data_end+0xf800b2d0>

0000b764 <__umoddi3>:
    b764:	defff404 	addi	sp,sp,-48
    b768:	df000a15 	stw	fp,40(sp)
    b76c:	dc400315 	stw	r17,12(sp)
    b770:	dc000215 	stw	r16,8(sp)
    b774:	dfc00b15 	stw	ra,44(sp)
    b778:	ddc00915 	stw	r23,36(sp)
    b77c:	dd800815 	stw	r22,32(sp)
    b780:	dd400715 	stw	r21,28(sp)
    b784:	dd000615 	stw	r20,24(sp)
    b788:	dcc00515 	stw	r19,20(sp)
    b78c:	dc800415 	stw	r18,16(sp)
    b790:	2021883a 	mov	r16,r4
    b794:	2823883a 	mov	r17,r5
    b798:	2839883a 	mov	fp,r5
    b79c:	38003c1e 	bne	r7,zero,b890 <__umoddi3+0x12c>
    b7a0:	3027883a 	mov	r19,r6
    b7a4:	2029883a 	mov	r20,r4
    b7a8:	2980512e 	bgeu	r5,r6,b8f0 <__umoddi3+0x18c>
    b7ac:	00bfffd4 	movui	r2,65535
    b7b0:	11809a36 	bltu	r2,r6,ba1c <__umoddi3+0x2b8>
    b7b4:	01003fc4 	movi	r4,255
    b7b8:	2189803a 	cmpltu	r4,r4,r6
    b7bc:	200890fa 	slli	r4,r4,3
    b7c0:	3104d83a 	srl	r2,r6,r4
    b7c4:	00c00074 	movhi	r3,1
    b7c8:	18c86304 	addi	r3,r3,8588
    b7cc:	1885883a 	add	r2,r3,r2
    b7d0:	10c00003 	ldbu	r3,0(r2)
    b7d4:	00800804 	movi	r2,32
    b7d8:	1909883a 	add	r4,r3,r4
    b7dc:	1125c83a 	sub	r18,r2,r4
    b7e0:	90000526 	beq	r18,zero,b7f8 <__umoddi3+0x94>
    b7e4:	8ca2983a 	sll	r17,r17,r18
    b7e8:	8108d83a 	srl	r4,r16,r4
    b7ec:	34a6983a 	sll	r19,r6,r18
    b7f0:	84a8983a 	sll	r20,r16,r18
    b7f4:	2478b03a 	or	fp,r4,r17
    b7f8:	982ed43a 	srli	r23,r19,16
    b7fc:	e009883a 	mov	r4,fp
    b800:	9dbfffcc 	andi	r22,r19,65535
    b804:	b80b883a 	mov	r5,r23
    b808:	0001b180 	call	1b18 <__umodsi3>
    b80c:	e009883a 	mov	r4,fp
    b810:	b80b883a 	mov	r5,r23
    b814:	102b883a 	mov	r21,r2
    b818:	0001ab40 	call	1ab4 <__udivsi3>
    b81c:	a806943a 	slli	r3,r21,16
    b820:	a008d43a 	srli	r4,r20,16
    b824:	b085383a 	mul	r2,r22,r2
    b828:	20c8b03a 	or	r4,r4,r3
    b82c:	2080032e 	bgeu	r4,r2,b83c <__umoddi3+0xd8>
    b830:	24c9883a 	add	r4,r4,r19
    b834:	24c00136 	bltu	r4,r19,b83c <__umoddi3+0xd8>
    b838:	20811036 	bltu	r4,r2,bc7c <__umoddi3+0x518>
    b83c:	20abc83a 	sub	r21,r4,r2
    b840:	b80b883a 	mov	r5,r23
    b844:	a809883a 	mov	r4,r21
    b848:	0001b180 	call	1b18 <__umodsi3>
    b84c:	1023883a 	mov	r17,r2
    b850:	b80b883a 	mov	r5,r23
    b854:	a809883a 	mov	r4,r21
    b858:	0001ab40 	call	1ab4 <__udivsi3>
    b85c:	8822943a 	slli	r17,r17,16
    b860:	b085383a 	mul	r2,r22,r2
    b864:	a0ffffcc 	andi	r3,r20,65535
    b868:	1c46b03a 	or	r3,r3,r17
    b86c:	1880042e 	bgeu	r3,r2,b880 <__umoddi3+0x11c>
    b870:	1cc7883a 	add	r3,r3,r19
    b874:	1cc00236 	bltu	r3,r19,b880 <__umoddi3+0x11c>
    b878:	1880012e 	bgeu	r3,r2,b880 <__umoddi3+0x11c>
    b87c:	1cc7883a 	add	r3,r3,r19
    b880:	1885c83a 	sub	r2,r3,r2
    b884:	1484d83a 	srl	r2,r2,r18
    b888:	0007883a 	mov	r3,zero
    b88c:	00004f06 	br	b9cc <__umoddi3+0x268>
    b890:	29c04c36 	bltu	r5,r7,b9c4 <__umoddi3+0x260>
    b894:	00bfffd4 	movui	r2,65535
    b898:	11c0582e 	bgeu	r2,r7,b9fc <__umoddi3+0x298>
    b89c:	00804034 	movhi	r2,256
    b8a0:	10bfffc4 	addi	r2,r2,-1
    b8a4:	11c0e736 	bltu	r2,r7,bc44 <__umoddi3+0x4e0>
    b8a8:	01000404 	movi	r4,16
    b8ac:	3904d83a 	srl	r2,r7,r4
    b8b0:	00c00074 	movhi	r3,1
    b8b4:	18c86304 	addi	r3,r3,8588
    b8b8:	1885883a 	add	r2,r3,r2
    b8bc:	14c00003 	ldbu	r19,0(r2)
    b8c0:	00c00804 	movi	r3,32
    b8c4:	9927883a 	add	r19,r19,r4
    b8c8:	1ce9c83a 	sub	r20,r3,r19
    b8cc:	a000581e 	bne	r20,zero,ba30 <__umoddi3+0x2cc>
    b8d0:	3c400136 	bltu	r7,r17,b8d8 <__umoddi3+0x174>
    b8d4:	8180eb36 	bltu	r16,r6,bc84 <__umoddi3+0x520>
    b8d8:	8185c83a 	sub	r2,r16,r6
    b8dc:	89e3c83a 	sub	r17,r17,r7
    b8e0:	8089803a 	cmpltu	r4,r16,r2
    b8e4:	8939c83a 	sub	fp,r17,r4
    b8e8:	e007883a 	mov	r3,fp
    b8ec:	00003706 	br	b9cc <__umoddi3+0x268>
    b8f0:	3000041e 	bne	r6,zero,b904 <__umoddi3+0x1a0>
    b8f4:	000b883a 	mov	r5,zero
    b8f8:	01000044 	movi	r4,1
    b8fc:	0001ab40 	call	1ab4 <__udivsi3>
    b900:	1027883a 	mov	r19,r2
    b904:	00bfffd4 	movui	r2,65535
    b908:	14c0402e 	bgeu	r2,r19,ba0c <__umoddi3+0x2a8>
    b90c:	00804034 	movhi	r2,256
    b910:	10bfffc4 	addi	r2,r2,-1
    b914:	14c0cd36 	bltu	r2,r19,bc4c <__umoddi3+0x4e8>
    b918:	00800404 	movi	r2,16
    b91c:	9886d83a 	srl	r3,r19,r2
    b920:	01000074 	movhi	r4,1
    b924:	21086304 	addi	r4,r4,8588
    b928:	20c7883a 	add	r3,r4,r3
    b92c:	18c00003 	ldbu	r3,0(r3)
    b930:	1887883a 	add	r3,r3,r2
    b934:	00800804 	movi	r2,32
    b938:	10e5c83a 	sub	r18,r2,r3
    b93c:	9000901e 	bne	r18,zero,bb80 <__umoddi3+0x41c>
    b940:	982cd43a 	srli	r22,r19,16
    b944:	8ce3c83a 	sub	r17,r17,r19
    b948:	9d7fffcc 	andi	r21,r19,65535
    b94c:	b00b883a 	mov	r5,r22
    b950:	8809883a 	mov	r4,r17
    b954:	0001b180 	call	1b18 <__umodsi3>
    b958:	8809883a 	mov	r4,r17
    b95c:	b00b883a 	mov	r5,r22
    b960:	1021883a 	mov	r16,r2
    b964:	0001ab40 	call	1ab4 <__udivsi3>
    b968:	8006943a 	slli	r3,r16,16
    b96c:	a008d43a 	srli	r4,r20,16
    b970:	1545383a 	mul	r2,r2,r21
    b974:	20c8b03a 	or	r4,r4,r3
    b978:	2080042e 	bgeu	r4,r2,b98c <__umoddi3+0x228>
    b97c:	24c9883a 	add	r4,r4,r19
    b980:	24c00236 	bltu	r4,r19,b98c <__umoddi3+0x228>
    b984:	2080012e 	bgeu	r4,r2,b98c <__umoddi3+0x228>
    b988:	24c9883a 	add	r4,r4,r19
    b98c:	20a1c83a 	sub	r16,r4,r2
    b990:	b00b883a 	mov	r5,r22
    b994:	8009883a 	mov	r4,r16
    b998:	0001b180 	call	1b18 <__umodsi3>
    b99c:	1023883a 	mov	r17,r2
    b9a0:	b00b883a 	mov	r5,r22
    b9a4:	8009883a 	mov	r4,r16
    b9a8:	0001ab40 	call	1ab4 <__udivsi3>
    b9ac:	8822943a 	slli	r17,r17,16
    b9b0:	1545383a 	mul	r2,r2,r21
    b9b4:	a53fffcc 	andi	r20,r20,65535
    b9b8:	a446b03a 	or	r3,r20,r17
    b9bc:	18bfb02e 	bgeu	r3,r2,b880 <__alt_data_end+0xf800b880>
    b9c0:	003fab06 	br	b870 <__alt_data_end+0xf800b870>
    b9c4:	2005883a 	mov	r2,r4
    b9c8:	2807883a 	mov	r3,r5
    b9cc:	dfc00b17 	ldw	ra,44(sp)
    b9d0:	df000a17 	ldw	fp,40(sp)
    b9d4:	ddc00917 	ldw	r23,36(sp)
    b9d8:	dd800817 	ldw	r22,32(sp)
    b9dc:	dd400717 	ldw	r21,28(sp)
    b9e0:	dd000617 	ldw	r20,24(sp)
    b9e4:	dcc00517 	ldw	r19,20(sp)
    b9e8:	dc800417 	ldw	r18,16(sp)
    b9ec:	dc400317 	ldw	r17,12(sp)
    b9f0:	dc000217 	ldw	r16,8(sp)
    b9f4:	dec00c04 	addi	sp,sp,48
    b9f8:	f800283a 	ret
    b9fc:	04c03fc4 	movi	r19,255
    ba00:	99c9803a 	cmpltu	r4,r19,r7
    ba04:	200890fa 	slli	r4,r4,3
    ba08:	003fa806 	br	b8ac <__alt_data_end+0xf800b8ac>
    ba0c:	00803fc4 	movi	r2,255
    ba10:	14c5803a 	cmpltu	r2,r2,r19
    ba14:	100490fa 	slli	r2,r2,3
    ba18:	003fc006 	br	b91c <__alt_data_end+0xf800b91c>
    ba1c:	00804034 	movhi	r2,256
    ba20:	10bfffc4 	addi	r2,r2,-1
    ba24:	11808b36 	bltu	r2,r6,bc54 <__umoddi3+0x4f0>
    ba28:	01000404 	movi	r4,16
    ba2c:	003f6406 	br	b7c0 <__alt_data_end+0xf800b7c0>
    ba30:	34c4d83a 	srl	r2,r6,r19
    ba34:	3d0e983a 	sll	r7,r7,r20
    ba38:	8cf8d83a 	srl	fp,r17,r19
    ba3c:	8d10983a 	sll	r8,r17,r20
    ba40:	38aab03a 	or	r21,r7,r2
    ba44:	a82cd43a 	srli	r22,r21,16
    ba48:	84e2d83a 	srl	r17,r16,r19
    ba4c:	e009883a 	mov	r4,fp
    ba50:	b00b883a 	mov	r5,r22
    ba54:	8a22b03a 	or	r17,r17,r8
    ba58:	3524983a 	sll	r18,r6,r20
    ba5c:	0001b180 	call	1b18 <__umodsi3>
    ba60:	e009883a 	mov	r4,fp
    ba64:	b00b883a 	mov	r5,r22
    ba68:	102f883a 	mov	r23,r2
    ba6c:	0001ab40 	call	1ab4 <__udivsi3>
    ba70:	100d883a 	mov	r6,r2
    ba74:	b808943a 	slli	r4,r23,16
    ba78:	aa3fffcc 	andi	r8,r21,65535
    ba7c:	8804d43a 	srli	r2,r17,16
    ba80:	41af383a 	mul	r23,r8,r6
    ba84:	8520983a 	sll	r16,r16,r20
    ba88:	1104b03a 	or	r2,r2,r4
    ba8c:	15c0042e 	bgeu	r2,r23,baa0 <__umoddi3+0x33c>
    ba90:	1545883a 	add	r2,r2,r21
    ba94:	30ffffc4 	addi	r3,r6,-1
    ba98:	1540742e 	bgeu	r2,r21,bc6c <__umoddi3+0x508>
    ba9c:	180d883a 	mov	r6,r3
    baa0:	15efc83a 	sub	r23,r2,r23
    baa4:	b00b883a 	mov	r5,r22
    baa8:	b809883a 	mov	r4,r23
    baac:	d9800115 	stw	r6,4(sp)
    bab0:	da000015 	stw	r8,0(sp)
    bab4:	0001b180 	call	1b18 <__umodsi3>
    bab8:	b00b883a 	mov	r5,r22
    babc:	b809883a 	mov	r4,r23
    bac0:	1039883a 	mov	fp,r2
    bac4:	0001ab40 	call	1ab4 <__udivsi3>
    bac8:	da000017 	ldw	r8,0(sp)
    bacc:	e038943a 	slli	fp,fp,16
    bad0:	100b883a 	mov	r5,r2
    bad4:	4089383a 	mul	r4,r8,r2
    bad8:	8a3fffcc 	andi	r8,r17,65535
    badc:	4710b03a 	or	r8,r8,fp
    bae0:	d9800117 	ldw	r6,4(sp)
    bae4:	4100042e 	bgeu	r8,r4,baf8 <__umoddi3+0x394>
    bae8:	4551883a 	add	r8,r8,r21
    baec:	10bfffc4 	addi	r2,r2,-1
    baf0:	45405a2e 	bgeu	r8,r21,bc5c <__umoddi3+0x4f8>
    baf4:	100b883a 	mov	r5,r2
    baf8:	300c943a 	slli	r6,r6,16
    bafc:	91ffffcc 	andi	r7,r18,65535
    bb00:	9004d43a 	srli	r2,r18,16
    bb04:	314cb03a 	or	r6,r6,r5
    bb08:	317fffcc 	andi	r5,r6,65535
    bb0c:	300cd43a 	srli	r6,r6,16
    bb10:	29d3383a 	mul	r9,r5,r7
    bb14:	288b383a 	mul	r5,r5,r2
    bb18:	31cf383a 	mul	r7,r6,r7
    bb1c:	4806d43a 	srli	r3,r9,16
    bb20:	4111c83a 	sub	r8,r8,r4
    bb24:	29cb883a 	add	r5,r5,r7
    bb28:	194b883a 	add	r5,r3,r5
    bb2c:	3085383a 	mul	r2,r6,r2
    bb30:	29c0022e 	bgeu	r5,r7,bb3c <__umoddi3+0x3d8>
    bb34:	00c00074 	movhi	r3,1
    bb38:	10c5883a 	add	r2,r2,r3
    bb3c:	2808d43a 	srli	r4,r5,16
    bb40:	280a943a 	slli	r5,r5,16
    bb44:	4a7fffcc 	andi	r9,r9,65535
    bb48:	2085883a 	add	r2,r4,r2
    bb4c:	2a4b883a 	add	r5,r5,r9
    bb50:	40803636 	bltu	r8,r2,bc2c <__umoddi3+0x4c8>
    bb54:	40804d26 	beq	r8,r2,bc8c <__umoddi3+0x528>
    bb58:	4089c83a 	sub	r4,r8,r2
    bb5c:	280f883a 	mov	r7,r5
    bb60:	81cfc83a 	sub	r7,r16,r7
    bb64:	81c7803a 	cmpltu	r3,r16,r7
    bb68:	20c7c83a 	sub	r3,r4,r3
    bb6c:	1cc4983a 	sll	r2,r3,r19
    bb70:	3d0ed83a 	srl	r7,r7,r20
    bb74:	1d06d83a 	srl	r3,r3,r20
    bb78:	11c4b03a 	or	r2,r2,r7
    bb7c:	003f9306 	br	b9cc <__alt_data_end+0xf800b9cc>
    bb80:	9ca6983a 	sll	r19,r19,r18
    bb84:	88e8d83a 	srl	r20,r17,r3
    bb88:	80c4d83a 	srl	r2,r16,r3
    bb8c:	982cd43a 	srli	r22,r19,16
    bb90:	8ca2983a 	sll	r17,r17,r18
    bb94:	a009883a 	mov	r4,r20
    bb98:	b00b883a 	mov	r5,r22
    bb9c:	1478b03a 	or	fp,r2,r17
    bba0:	0001b180 	call	1b18 <__umodsi3>
    bba4:	a009883a 	mov	r4,r20
    bba8:	b00b883a 	mov	r5,r22
    bbac:	1023883a 	mov	r17,r2
    bbb0:	0001ab40 	call	1ab4 <__udivsi3>
    bbb4:	9d7fffcc 	andi	r21,r19,65535
    bbb8:	880a943a 	slli	r5,r17,16
    bbbc:	e008d43a 	srli	r4,fp,16
    bbc0:	a885383a 	mul	r2,r21,r2
    bbc4:	84a8983a 	sll	r20,r16,r18
    bbc8:	2148b03a 	or	r4,r4,r5
    bbcc:	2080042e 	bgeu	r4,r2,bbe0 <__umoddi3+0x47c>
    bbd0:	24c9883a 	add	r4,r4,r19
    bbd4:	24c00236 	bltu	r4,r19,bbe0 <__umoddi3+0x47c>
    bbd8:	2080012e 	bgeu	r4,r2,bbe0 <__umoddi3+0x47c>
    bbdc:	24c9883a 	add	r4,r4,r19
    bbe0:	20a3c83a 	sub	r17,r4,r2
    bbe4:	b00b883a 	mov	r5,r22
    bbe8:	8809883a 	mov	r4,r17
    bbec:	0001b180 	call	1b18 <__umodsi3>
    bbf0:	102f883a 	mov	r23,r2
    bbf4:	8809883a 	mov	r4,r17
    bbf8:	b00b883a 	mov	r5,r22
    bbfc:	0001ab40 	call	1ab4 <__udivsi3>
    bc00:	b82e943a 	slli	r23,r23,16
    bc04:	a885383a 	mul	r2,r21,r2
    bc08:	e13fffcc 	andi	r4,fp,65535
    bc0c:	25c8b03a 	or	r4,r4,r23
    bc10:	2080042e 	bgeu	r4,r2,bc24 <__umoddi3+0x4c0>
    bc14:	24c9883a 	add	r4,r4,r19
    bc18:	24c00236 	bltu	r4,r19,bc24 <__umoddi3+0x4c0>
    bc1c:	2080012e 	bgeu	r4,r2,bc24 <__umoddi3+0x4c0>
    bc20:	24c9883a 	add	r4,r4,r19
    bc24:	20a3c83a 	sub	r17,r4,r2
    bc28:	003f4806 	br	b94c <__alt_data_end+0xf800b94c>
    bc2c:	2c8fc83a 	sub	r7,r5,r18
    bc30:	1545c83a 	sub	r2,r2,r21
    bc34:	29cb803a 	cmpltu	r5,r5,r7
    bc38:	1145c83a 	sub	r2,r2,r5
    bc3c:	4089c83a 	sub	r4,r8,r2
    bc40:	003fc706 	br	bb60 <__alt_data_end+0xf800bb60>
    bc44:	01000604 	movi	r4,24
    bc48:	003f1806 	br	b8ac <__alt_data_end+0xf800b8ac>
    bc4c:	00800604 	movi	r2,24
    bc50:	003f3206 	br	b91c <__alt_data_end+0xf800b91c>
    bc54:	01000604 	movi	r4,24
    bc58:	003ed906 	br	b7c0 <__alt_data_end+0xf800b7c0>
    bc5c:	413fa52e 	bgeu	r8,r4,baf4 <__alt_data_end+0xf800baf4>
    bc60:	297fff84 	addi	r5,r5,-2
    bc64:	4551883a 	add	r8,r8,r21
    bc68:	003fa306 	br	baf8 <__alt_data_end+0xf800baf8>
    bc6c:	15ff8b2e 	bgeu	r2,r23,ba9c <__alt_data_end+0xf800ba9c>
    bc70:	31bfff84 	addi	r6,r6,-2
    bc74:	1545883a 	add	r2,r2,r21
    bc78:	003f8906 	br	baa0 <__alt_data_end+0xf800baa0>
    bc7c:	24c9883a 	add	r4,r4,r19
    bc80:	003eee06 	br	b83c <__alt_data_end+0xf800b83c>
    bc84:	8005883a 	mov	r2,r16
    bc88:	003f1706 	br	b8e8 <__alt_data_end+0xf800b8e8>
    bc8c:	817fe736 	bltu	r16,r5,bc2c <__alt_data_end+0xf800bc2c>
    bc90:	280f883a 	mov	r7,r5
    bc94:	0009883a 	mov	r4,zero
    bc98:	003fb106 	br	bb60 <__alt_data_end+0xf800bb60>

0000bc9c <__adddf3>:
    bc9c:	02c00434 	movhi	r11,16
    bca0:	5affffc4 	addi	r11,r11,-1
    bca4:	2806d7fa 	srli	r3,r5,31
    bca8:	2ad4703a 	and	r10,r5,r11
    bcac:	3ad2703a 	and	r9,r7,r11
    bcb0:	3804d53a 	srli	r2,r7,20
    bcb4:	3018d77a 	srli	r12,r6,29
    bcb8:	280ad53a 	srli	r5,r5,20
    bcbc:	501490fa 	slli	r10,r10,3
    bcc0:	2010d77a 	srli	r8,r4,29
    bcc4:	481290fa 	slli	r9,r9,3
    bcc8:	380ed7fa 	srli	r7,r7,31
    bccc:	defffb04 	addi	sp,sp,-20
    bcd0:	dc800215 	stw	r18,8(sp)
    bcd4:	dc400115 	stw	r17,4(sp)
    bcd8:	dc000015 	stw	r16,0(sp)
    bcdc:	dfc00415 	stw	ra,16(sp)
    bce0:	dcc00315 	stw	r19,12(sp)
    bce4:	1c803fcc 	andi	r18,r3,255
    bce8:	2c01ffcc 	andi	r16,r5,2047
    bcec:	5210b03a 	or	r8,r10,r8
    bcf0:	202290fa 	slli	r17,r4,3
    bcf4:	1081ffcc 	andi	r2,r2,2047
    bcf8:	4b12b03a 	or	r9,r9,r12
    bcfc:	300c90fa 	slli	r6,r6,3
    bd00:	91c07526 	beq	r18,r7,bed8 <__adddf3+0x23c>
    bd04:	8087c83a 	sub	r3,r16,r2
    bd08:	00c0ab0e 	bge	zero,r3,bfb8 <__adddf3+0x31c>
    bd0c:	10002a1e 	bne	r2,zero,bdb8 <__adddf3+0x11c>
    bd10:	4984b03a 	or	r2,r9,r6
    bd14:	1000961e 	bne	r2,zero,bf70 <__adddf3+0x2d4>
    bd18:	888001cc 	andi	r2,r17,7
    bd1c:	10000726 	beq	r2,zero,bd3c <__adddf3+0xa0>
    bd20:	888003cc 	andi	r2,r17,15
    bd24:	00c00104 	movi	r3,4
    bd28:	10c00426 	beq	r2,r3,bd3c <__adddf3+0xa0>
    bd2c:	88c7883a 	add	r3,r17,r3
    bd30:	1c63803a 	cmpltu	r17,r3,r17
    bd34:	4451883a 	add	r8,r8,r17
    bd38:	1823883a 	mov	r17,r3
    bd3c:	4080202c 	andhi	r2,r8,128
    bd40:	10005926 	beq	r2,zero,bea8 <__adddf3+0x20c>
    bd44:	84000044 	addi	r16,r16,1
    bd48:	0081ffc4 	movi	r2,2047
    bd4c:	8080ba26 	beq	r16,r2,c038 <__adddf3+0x39c>
    bd50:	00bfe034 	movhi	r2,65408
    bd54:	10bfffc4 	addi	r2,r2,-1
    bd58:	4090703a 	and	r8,r8,r2
    bd5c:	4004977a 	slli	r2,r8,29
    bd60:	4010927a 	slli	r8,r8,9
    bd64:	8822d0fa 	srli	r17,r17,3
    bd68:	8401ffcc 	andi	r16,r16,2047
    bd6c:	4010d33a 	srli	r8,r8,12
    bd70:	9007883a 	mov	r3,r18
    bd74:	1444b03a 	or	r2,r2,r17
    bd78:	8401ffcc 	andi	r16,r16,2047
    bd7c:	8020953a 	slli	r16,r16,20
    bd80:	18c03fcc 	andi	r3,r3,255
    bd84:	01000434 	movhi	r4,16
    bd88:	213fffc4 	addi	r4,r4,-1
    bd8c:	180697fa 	slli	r3,r3,31
    bd90:	4110703a 	and	r8,r8,r4
    bd94:	4410b03a 	or	r8,r8,r16
    bd98:	40c6b03a 	or	r3,r8,r3
    bd9c:	dfc00417 	ldw	ra,16(sp)
    bda0:	dcc00317 	ldw	r19,12(sp)
    bda4:	dc800217 	ldw	r18,8(sp)
    bda8:	dc400117 	ldw	r17,4(sp)
    bdac:	dc000017 	ldw	r16,0(sp)
    bdb0:	dec00504 	addi	sp,sp,20
    bdb4:	f800283a 	ret
    bdb8:	0081ffc4 	movi	r2,2047
    bdbc:	80bfd626 	beq	r16,r2,bd18 <__alt_data_end+0xf800bd18>
    bdc0:	4a402034 	orhi	r9,r9,128
    bdc4:	00800e04 	movi	r2,56
    bdc8:	10c09f16 	blt	r2,r3,c048 <__adddf3+0x3ac>
    bdcc:	008007c4 	movi	r2,31
    bdd0:	10c0c216 	blt	r2,r3,c0dc <__adddf3+0x440>
    bdd4:	00800804 	movi	r2,32
    bdd8:	10c5c83a 	sub	r2,r2,r3
    bddc:	488a983a 	sll	r5,r9,r2
    bde0:	30c8d83a 	srl	r4,r6,r3
    bde4:	3084983a 	sll	r2,r6,r2
    bde8:	48c6d83a 	srl	r3,r9,r3
    bdec:	290cb03a 	or	r6,r5,r4
    bdf0:	1004c03a 	cmpne	r2,r2,zero
    bdf4:	308cb03a 	or	r6,r6,r2
    bdf8:	898dc83a 	sub	r6,r17,r6
    bdfc:	89a3803a 	cmpltu	r17,r17,r6
    be00:	40d1c83a 	sub	r8,r8,r3
    be04:	4451c83a 	sub	r8,r8,r17
    be08:	3023883a 	mov	r17,r6
    be0c:	4080202c 	andhi	r2,r8,128
    be10:	10002326 	beq	r2,zero,bea0 <__adddf3+0x204>
    be14:	04c02034 	movhi	r19,128
    be18:	9cffffc4 	addi	r19,r19,-1
    be1c:	44e6703a 	and	r19,r8,r19
    be20:	98007626 	beq	r19,zero,bffc <__adddf3+0x360>
    be24:	9809883a 	mov	r4,r19
    be28:	000e2a00 	call	e2a0 <__clzsi2>
    be2c:	10fffe04 	addi	r3,r2,-8
    be30:	010007c4 	movi	r4,31
    be34:	20c07716 	blt	r4,r3,c014 <__adddf3+0x378>
    be38:	00800804 	movi	r2,32
    be3c:	10c5c83a 	sub	r2,r2,r3
    be40:	8884d83a 	srl	r2,r17,r2
    be44:	98d0983a 	sll	r8,r19,r3
    be48:	88e2983a 	sll	r17,r17,r3
    be4c:	1204b03a 	or	r2,r2,r8
    be50:	1c007416 	blt	r3,r16,c024 <__adddf3+0x388>
    be54:	1c21c83a 	sub	r16,r3,r16
    be58:	82000044 	addi	r8,r16,1
    be5c:	00c007c4 	movi	r3,31
    be60:	1a009116 	blt	r3,r8,c0a8 <__adddf3+0x40c>
    be64:	00c00804 	movi	r3,32
    be68:	1a07c83a 	sub	r3,r3,r8
    be6c:	8a08d83a 	srl	r4,r17,r8
    be70:	88e2983a 	sll	r17,r17,r3
    be74:	10c6983a 	sll	r3,r2,r3
    be78:	1210d83a 	srl	r8,r2,r8
    be7c:	8804c03a 	cmpne	r2,r17,zero
    be80:	1906b03a 	or	r3,r3,r4
    be84:	18a2b03a 	or	r17,r3,r2
    be88:	0021883a 	mov	r16,zero
    be8c:	003fa206 	br	bd18 <__alt_data_end+0xf800bd18>
    be90:	1890b03a 	or	r8,r3,r2
    be94:	40017d26 	beq	r8,zero,c48c <__adddf3+0x7f0>
    be98:	1011883a 	mov	r8,r2
    be9c:	1823883a 	mov	r17,r3
    bea0:	888001cc 	andi	r2,r17,7
    bea4:	103f9e1e 	bne	r2,zero,bd20 <__alt_data_end+0xf800bd20>
    bea8:	4004977a 	slli	r2,r8,29
    beac:	8822d0fa 	srli	r17,r17,3
    beb0:	4010d0fa 	srli	r8,r8,3
    beb4:	9007883a 	mov	r3,r18
    beb8:	1444b03a 	or	r2,r2,r17
    bebc:	0101ffc4 	movi	r4,2047
    bec0:	81002426 	beq	r16,r4,bf54 <__adddf3+0x2b8>
    bec4:	8120703a 	and	r16,r16,r4
    bec8:	01000434 	movhi	r4,16
    becc:	213fffc4 	addi	r4,r4,-1
    bed0:	4110703a 	and	r8,r8,r4
    bed4:	003fa806 	br	bd78 <__alt_data_end+0xf800bd78>
    bed8:	8089c83a 	sub	r4,r16,r2
    bedc:	01005e0e 	bge	zero,r4,c058 <__adddf3+0x3bc>
    bee0:	10002b26 	beq	r2,zero,bf90 <__adddf3+0x2f4>
    bee4:	0081ffc4 	movi	r2,2047
    bee8:	80bf8b26 	beq	r16,r2,bd18 <__alt_data_end+0xf800bd18>
    beec:	4a402034 	orhi	r9,r9,128
    bef0:	00800e04 	movi	r2,56
    bef4:	1100a40e 	bge	r2,r4,c188 <__adddf3+0x4ec>
    bef8:	498cb03a 	or	r6,r9,r6
    befc:	300ac03a 	cmpne	r5,r6,zero
    bf00:	0013883a 	mov	r9,zero
    bf04:	2c4b883a 	add	r5,r5,r17
    bf08:	2c63803a 	cmpltu	r17,r5,r17
    bf0c:	4a11883a 	add	r8,r9,r8
    bf10:	8a11883a 	add	r8,r17,r8
    bf14:	2823883a 	mov	r17,r5
    bf18:	4080202c 	andhi	r2,r8,128
    bf1c:	103fe026 	beq	r2,zero,bea0 <__alt_data_end+0xf800bea0>
    bf20:	84000044 	addi	r16,r16,1
    bf24:	0081ffc4 	movi	r2,2047
    bf28:	8080d226 	beq	r16,r2,c274 <__adddf3+0x5d8>
    bf2c:	00bfe034 	movhi	r2,65408
    bf30:	10bfffc4 	addi	r2,r2,-1
    bf34:	4090703a 	and	r8,r8,r2
    bf38:	880ad07a 	srli	r5,r17,1
    bf3c:	400897fa 	slli	r4,r8,31
    bf40:	88c0004c 	andi	r3,r17,1
    bf44:	28e2b03a 	or	r17,r5,r3
    bf48:	4010d07a 	srli	r8,r8,1
    bf4c:	2462b03a 	or	r17,r4,r17
    bf50:	003f7106 	br	bd18 <__alt_data_end+0xf800bd18>
    bf54:	4088b03a 	or	r4,r8,r2
    bf58:	20014526 	beq	r4,zero,c470 <__adddf3+0x7d4>
    bf5c:	01000434 	movhi	r4,16
    bf60:	42000234 	orhi	r8,r8,8
    bf64:	213fffc4 	addi	r4,r4,-1
    bf68:	4110703a 	and	r8,r8,r4
    bf6c:	003f8206 	br	bd78 <__alt_data_end+0xf800bd78>
    bf70:	18ffffc4 	addi	r3,r3,-1
    bf74:	1800491e 	bne	r3,zero,c09c <__adddf3+0x400>
    bf78:	898bc83a 	sub	r5,r17,r6
    bf7c:	8963803a 	cmpltu	r17,r17,r5
    bf80:	4251c83a 	sub	r8,r8,r9
    bf84:	4451c83a 	sub	r8,r8,r17
    bf88:	2823883a 	mov	r17,r5
    bf8c:	003f9f06 	br	be0c <__alt_data_end+0xf800be0c>
    bf90:	4984b03a 	or	r2,r9,r6
    bf94:	103f6026 	beq	r2,zero,bd18 <__alt_data_end+0xf800bd18>
    bf98:	213fffc4 	addi	r4,r4,-1
    bf9c:	2000931e 	bne	r4,zero,c1ec <__adddf3+0x550>
    bfa0:	898d883a 	add	r6,r17,r6
    bfa4:	3463803a 	cmpltu	r17,r6,r17
    bfa8:	4251883a 	add	r8,r8,r9
    bfac:	8a11883a 	add	r8,r17,r8
    bfb0:	3023883a 	mov	r17,r6
    bfb4:	003fd806 	br	bf18 <__alt_data_end+0xf800bf18>
    bfb8:	1800541e 	bne	r3,zero,c10c <__adddf3+0x470>
    bfbc:	80800044 	addi	r2,r16,1
    bfc0:	1081ffcc 	andi	r2,r2,2047
    bfc4:	00c00044 	movi	r3,1
    bfc8:	1880a00e 	bge	r3,r2,c24c <__adddf3+0x5b0>
    bfcc:	8989c83a 	sub	r4,r17,r6
    bfd0:	8905803a 	cmpltu	r2,r17,r4
    bfd4:	4267c83a 	sub	r19,r8,r9
    bfd8:	98a7c83a 	sub	r19,r19,r2
    bfdc:	9880202c 	andhi	r2,r19,128
    bfe0:	10006326 	beq	r2,zero,c170 <__adddf3+0x4d4>
    bfe4:	3463c83a 	sub	r17,r6,r17
    bfe8:	4a07c83a 	sub	r3,r9,r8
    bfec:	344d803a 	cmpltu	r6,r6,r17
    bff0:	19a7c83a 	sub	r19,r3,r6
    bff4:	3825883a 	mov	r18,r7
    bff8:	983f8a1e 	bne	r19,zero,be24 <__alt_data_end+0xf800be24>
    bffc:	8809883a 	mov	r4,r17
    c000:	000e2a00 	call	e2a0 <__clzsi2>
    c004:	10800804 	addi	r2,r2,32
    c008:	10fffe04 	addi	r3,r2,-8
    c00c:	010007c4 	movi	r4,31
    c010:	20ff890e 	bge	r4,r3,be38 <__alt_data_end+0xf800be38>
    c014:	10bff604 	addi	r2,r2,-40
    c018:	8884983a 	sll	r2,r17,r2
    c01c:	0023883a 	mov	r17,zero
    c020:	1c3f8c0e 	bge	r3,r16,be54 <__alt_data_end+0xf800be54>
    c024:	023fe034 	movhi	r8,65408
    c028:	423fffc4 	addi	r8,r8,-1
    c02c:	80e1c83a 	sub	r16,r16,r3
    c030:	1210703a 	and	r8,r2,r8
    c034:	003f3806 	br	bd18 <__alt_data_end+0xf800bd18>
    c038:	9007883a 	mov	r3,r18
    c03c:	0011883a 	mov	r8,zero
    c040:	0005883a 	mov	r2,zero
    c044:	003f4c06 	br	bd78 <__alt_data_end+0xf800bd78>
    c048:	498cb03a 	or	r6,r9,r6
    c04c:	300cc03a 	cmpne	r6,r6,zero
    c050:	0007883a 	mov	r3,zero
    c054:	003f6806 	br	bdf8 <__alt_data_end+0xf800bdf8>
    c058:	20009c1e 	bne	r4,zero,c2cc <__adddf3+0x630>
    c05c:	80800044 	addi	r2,r16,1
    c060:	1141ffcc 	andi	r5,r2,2047
    c064:	01000044 	movi	r4,1
    c068:	2140670e 	bge	r4,r5,c208 <__adddf3+0x56c>
    c06c:	0101ffc4 	movi	r4,2047
    c070:	11007f26 	beq	r2,r4,c270 <__adddf3+0x5d4>
    c074:	898d883a 	add	r6,r17,r6
    c078:	4247883a 	add	r3,r8,r9
    c07c:	3451803a 	cmpltu	r8,r6,r17
    c080:	40d1883a 	add	r8,r8,r3
    c084:	402297fa 	slli	r17,r8,31
    c088:	300cd07a 	srli	r6,r6,1
    c08c:	4010d07a 	srli	r8,r8,1
    c090:	1021883a 	mov	r16,r2
    c094:	89a2b03a 	or	r17,r17,r6
    c098:	003f1f06 	br	bd18 <__alt_data_end+0xf800bd18>
    c09c:	0081ffc4 	movi	r2,2047
    c0a0:	80bf481e 	bne	r16,r2,bdc4 <__alt_data_end+0xf800bdc4>
    c0a4:	003f1c06 	br	bd18 <__alt_data_end+0xf800bd18>
    c0a8:	843ff844 	addi	r16,r16,-31
    c0ac:	01000804 	movi	r4,32
    c0b0:	1406d83a 	srl	r3,r2,r16
    c0b4:	41005026 	beq	r8,r4,c1f8 <__adddf3+0x55c>
    c0b8:	01001004 	movi	r4,64
    c0bc:	2211c83a 	sub	r8,r4,r8
    c0c0:	1204983a 	sll	r2,r2,r8
    c0c4:	88a2b03a 	or	r17,r17,r2
    c0c8:	8822c03a 	cmpne	r17,r17,zero
    c0cc:	1c62b03a 	or	r17,r3,r17
    c0d0:	0011883a 	mov	r8,zero
    c0d4:	0021883a 	mov	r16,zero
    c0d8:	003f7106 	br	bea0 <__alt_data_end+0xf800bea0>
    c0dc:	193ff804 	addi	r4,r3,-32
    c0e0:	00800804 	movi	r2,32
    c0e4:	4908d83a 	srl	r4,r9,r4
    c0e8:	18804526 	beq	r3,r2,c200 <__adddf3+0x564>
    c0ec:	00801004 	movi	r2,64
    c0f0:	10c5c83a 	sub	r2,r2,r3
    c0f4:	4886983a 	sll	r3,r9,r2
    c0f8:	198cb03a 	or	r6,r3,r6
    c0fc:	300cc03a 	cmpne	r6,r6,zero
    c100:	218cb03a 	or	r6,r4,r6
    c104:	0007883a 	mov	r3,zero
    c108:	003f3b06 	br	bdf8 <__alt_data_end+0xf800bdf8>
    c10c:	80002a26 	beq	r16,zero,c1b8 <__adddf3+0x51c>
    c110:	0101ffc4 	movi	r4,2047
    c114:	11006826 	beq	r2,r4,c2b8 <__adddf3+0x61c>
    c118:	00c7c83a 	sub	r3,zero,r3
    c11c:	42002034 	orhi	r8,r8,128
    c120:	01000e04 	movi	r4,56
    c124:	20c07c16 	blt	r4,r3,c318 <__adddf3+0x67c>
    c128:	010007c4 	movi	r4,31
    c12c:	20c0da16 	blt	r4,r3,c498 <__adddf3+0x7fc>
    c130:	01000804 	movi	r4,32
    c134:	20c9c83a 	sub	r4,r4,r3
    c138:	4114983a 	sll	r10,r8,r4
    c13c:	88cad83a 	srl	r5,r17,r3
    c140:	8908983a 	sll	r4,r17,r4
    c144:	40c6d83a 	srl	r3,r8,r3
    c148:	5162b03a 	or	r17,r10,r5
    c14c:	2008c03a 	cmpne	r4,r4,zero
    c150:	8922b03a 	or	r17,r17,r4
    c154:	3463c83a 	sub	r17,r6,r17
    c158:	48c7c83a 	sub	r3,r9,r3
    c15c:	344d803a 	cmpltu	r6,r6,r17
    c160:	1991c83a 	sub	r8,r3,r6
    c164:	1021883a 	mov	r16,r2
    c168:	3825883a 	mov	r18,r7
    c16c:	003f2706 	br	be0c <__alt_data_end+0xf800be0c>
    c170:	24d0b03a 	or	r8,r4,r19
    c174:	40001b1e 	bne	r8,zero,c1e4 <__adddf3+0x548>
    c178:	0005883a 	mov	r2,zero
    c17c:	0007883a 	mov	r3,zero
    c180:	0021883a 	mov	r16,zero
    c184:	003f4d06 	br	bebc <__alt_data_end+0xf800bebc>
    c188:	008007c4 	movi	r2,31
    c18c:	11003c16 	blt	r2,r4,c280 <__adddf3+0x5e4>
    c190:	00800804 	movi	r2,32
    c194:	1105c83a 	sub	r2,r2,r4
    c198:	488e983a 	sll	r7,r9,r2
    c19c:	310ad83a 	srl	r5,r6,r4
    c1a0:	3084983a 	sll	r2,r6,r2
    c1a4:	4912d83a 	srl	r9,r9,r4
    c1a8:	394ab03a 	or	r5,r7,r5
    c1ac:	1004c03a 	cmpne	r2,r2,zero
    c1b0:	288ab03a 	or	r5,r5,r2
    c1b4:	003f5306 	br	bf04 <__alt_data_end+0xf800bf04>
    c1b8:	4448b03a 	or	r4,r8,r17
    c1bc:	20003e26 	beq	r4,zero,c2b8 <__adddf3+0x61c>
    c1c0:	00c6303a 	nor	r3,zero,r3
    c1c4:	18003a1e 	bne	r3,zero,c2b0 <__adddf3+0x614>
    c1c8:	3463c83a 	sub	r17,r6,r17
    c1cc:	4a07c83a 	sub	r3,r9,r8
    c1d0:	344d803a 	cmpltu	r6,r6,r17
    c1d4:	1991c83a 	sub	r8,r3,r6
    c1d8:	1021883a 	mov	r16,r2
    c1dc:	3825883a 	mov	r18,r7
    c1e0:	003f0a06 	br	be0c <__alt_data_end+0xf800be0c>
    c1e4:	2023883a 	mov	r17,r4
    c1e8:	003f0d06 	br	be20 <__alt_data_end+0xf800be20>
    c1ec:	0081ffc4 	movi	r2,2047
    c1f0:	80bf3f1e 	bne	r16,r2,bef0 <__alt_data_end+0xf800bef0>
    c1f4:	003ec806 	br	bd18 <__alt_data_end+0xf800bd18>
    c1f8:	0005883a 	mov	r2,zero
    c1fc:	003fb106 	br	c0c4 <__alt_data_end+0xf800c0c4>
    c200:	0007883a 	mov	r3,zero
    c204:	003fbc06 	br	c0f8 <__alt_data_end+0xf800c0f8>
    c208:	4444b03a 	or	r2,r8,r17
    c20c:	8000871e 	bne	r16,zero,c42c <__adddf3+0x790>
    c210:	1000ba26 	beq	r2,zero,c4fc <__adddf3+0x860>
    c214:	4984b03a 	or	r2,r9,r6
    c218:	103ebf26 	beq	r2,zero,bd18 <__alt_data_end+0xf800bd18>
    c21c:	8985883a 	add	r2,r17,r6
    c220:	4247883a 	add	r3,r8,r9
    c224:	1451803a 	cmpltu	r8,r2,r17
    c228:	40d1883a 	add	r8,r8,r3
    c22c:	40c0202c 	andhi	r3,r8,128
    c230:	1023883a 	mov	r17,r2
    c234:	183f1a26 	beq	r3,zero,bea0 <__alt_data_end+0xf800bea0>
    c238:	00bfe034 	movhi	r2,65408
    c23c:	10bfffc4 	addi	r2,r2,-1
    c240:	2021883a 	mov	r16,r4
    c244:	4090703a 	and	r8,r8,r2
    c248:	003eb306 	br	bd18 <__alt_data_end+0xf800bd18>
    c24c:	4444b03a 	or	r2,r8,r17
    c250:	8000291e 	bne	r16,zero,c2f8 <__adddf3+0x65c>
    c254:	10004b1e 	bne	r2,zero,c384 <__adddf3+0x6e8>
    c258:	4990b03a 	or	r8,r9,r6
    c25c:	40008b26 	beq	r8,zero,c48c <__adddf3+0x7f0>
    c260:	4811883a 	mov	r8,r9
    c264:	3023883a 	mov	r17,r6
    c268:	3825883a 	mov	r18,r7
    c26c:	003eaa06 	br	bd18 <__alt_data_end+0xf800bd18>
    c270:	1021883a 	mov	r16,r2
    c274:	0011883a 	mov	r8,zero
    c278:	0005883a 	mov	r2,zero
    c27c:	003f0f06 	br	bebc <__alt_data_end+0xf800bebc>
    c280:	217ff804 	addi	r5,r4,-32
    c284:	00800804 	movi	r2,32
    c288:	494ad83a 	srl	r5,r9,r5
    c28c:	20807d26 	beq	r4,r2,c484 <__adddf3+0x7e8>
    c290:	00801004 	movi	r2,64
    c294:	1109c83a 	sub	r4,r2,r4
    c298:	4912983a 	sll	r9,r9,r4
    c29c:	498cb03a 	or	r6,r9,r6
    c2a0:	300cc03a 	cmpne	r6,r6,zero
    c2a4:	298ab03a 	or	r5,r5,r6
    c2a8:	0013883a 	mov	r9,zero
    c2ac:	003f1506 	br	bf04 <__alt_data_end+0xf800bf04>
    c2b0:	0101ffc4 	movi	r4,2047
    c2b4:	113f9a1e 	bne	r2,r4,c120 <__alt_data_end+0xf800c120>
    c2b8:	4811883a 	mov	r8,r9
    c2bc:	3023883a 	mov	r17,r6
    c2c0:	1021883a 	mov	r16,r2
    c2c4:	3825883a 	mov	r18,r7
    c2c8:	003e9306 	br	bd18 <__alt_data_end+0xf800bd18>
    c2cc:	8000161e 	bne	r16,zero,c328 <__adddf3+0x68c>
    c2d0:	444ab03a 	or	r5,r8,r17
    c2d4:	28005126 	beq	r5,zero,c41c <__adddf3+0x780>
    c2d8:	0108303a 	nor	r4,zero,r4
    c2dc:	20004d1e 	bne	r4,zero,c414 <__adddf3+0x778>
    c2e0:	89a3883a 	add	r17,r17,r6
    c2e4:	4253883a 	add	r9,r8,r9
    c2e8:	898d803a 	cmpltu	r6,r17,r6
    c2ec:	3251883a 	add	r8,r6,r9
    c2f0:	1021883a 	mov	r16,r2
    c2f4:	003f0806 	br	bf18 <__alt_data_end+0xf800bf18>
    c2f8:	1000301e 	bne	r2,zero,c3bc <__adddf3+0x720>
    c2fc:	4984b03a 	or	r2,r9,r6
    c300:	10007126 	beq	r2,zero,c4c8 <__adddf3+0x82c>
    c304:	4811883a 	mov	r8,r9
    c308:	3023883a 	mov	r17,r6
    c30c:	3825883a 	mov	r18,r7
    c310:	0401ffc4 	movi	r16,2047
    c314:	003e8006 	br	bd18 <__alt_data_end+0xf800bd18>
    c318:	4462b03a 	or	r17,r8,r17
    c31c:	8822c03a 	cmpne	r17,r17,zero
    c320:	0007883a 	mov	r3,zero
    c324:	003f8b06 	br	c154 <__alt_data_end+0xf800c154>
    c328:	0141ffc4 	movi	r5,2047
    c32c:	11403b26 	beq	r2,r5,c41c <__adddf3+0x780>
    c330:	0109c83a 	sub	r4,zero,r4
    c334:	42002034 	orhi	r8,r8,128
    c338:	01400e04 	movi	r5,56
    c33c:	29006716 	blt	r5,r4,c4dc <__adddf3+0x840>
    c340:	014007c4 	movi	r5,31
    c344:	29007016 	blt	r5,r4,c508 <__adddf3+0x86c>
    c348:	01400804 	movi	r5,32
    c34c:	290bc83a 	sub	r5,r5,r4
    c350:	4154983a 	sll	r10,r8,r5
    c354:	890ed83a 	srl	r7,r17,r4
    c358:	894a983a 	sll	r5,r17,r5
    c35c:	4108d83a 	srl	r4,r8,r4
    c360:	51e2b03a 	or	r17,r10,r7
    c364:	280ac03a 	cmpne	r5,r5,zero
    c368:	8962b03a 	or	r17,r17,r5
    c36c:	89a3883a 	add	r17,r17,r6
    c370:	2253883a 	add	r9,r4,r9
    c374:	898d803a 	cmpltu	r6,r17,r6
    c378:	3251883a 	add	r8,r6,r9
    c37c:	1021883a 	mov	r16,r2
    c380:	003ee506 	br	bf18 <__alt_data_end+0xf800bf18>
    c384:	4984b03a 	or	r2,r9,r6
    c388:	103e6326 	beq	r2,zero,bd18 <__alt_data_end+0xf800bd18>
    c38c:	8987c83a 	sub	r3,r17,r6
    c390:	88c9803a 	cmpltu	r4,r17,r3
    c394:	4245c83a 	sub	r2,r8,r9
    c398:	1105c83a 	sub	r2,r2,r4
    c39c:	1100202c 	andhi	r4,r2,128
    c3a0:	203ebb26 	beq	r4,zero,be90 <__alt_data_end+0xf800be90>
    c3a4:	3463c83a 	sub	r17,r6,r17
    c3a8:	4a07c83a 	sub	r3,r9,r8
    c3ac:	344d803a 	cmpltu	r6,r6,r17
    c3b0:	1991c83a 	sub	r8,r3,r6
    c3b4:	3825883a 	mov	r18,r7
    c3b8:	003e5706 	br	bd18 <__alt_data_end+0xf800bd18>
    c3bc:	4984b03a 	or	r2,r9,r6
    c3c0:	10002e26 	beq	r2,zero,c47c <__adddf3+0x7e0>
    c3c4:	4004d0fa 	srli	r2,r8,3
    c3c8:	8822d0fa 	srli	r17,r17,3
    c3cc:	4010977a 	slli	r8,r8,29
    c3d0:	10c0022c 	andhi	r3,r2,8
    c3d4:	4462b03a 	or	r17,r8,r17
    c3d8:	18000826 	beq	r3,zero,c3fc <__adddf3+0x760>
    c3dc:	4808d0fa 	srli	r4,r9,3
    c3e0:	20c0022c 	andhi	r3,r4,8
    c3e4:	1800051e 	bne	r3,zero,c3fc <__adddf3+0x760>
    c3e8:	300cd0fa 	srli	r6,r6,3
    c3ec:	4806977a 	slli	r3,r9,29
    c3f0:	2005883a 	mov	r2,r4
    c3f4:	3825883a 	mov	r18,r7
    c3f8:	19a2b03a 	or	r17,r3,r6
    c3fc:	8810d77a 	srli	r8,r17,29
    c400:	100490fa 	slli	r2,r2,3
    c404:	882290fa 	slli	r17,r17,3
    c408:	0401ffc4 	movi	r16,2047
    c40c:	4090b03a 	or	r8,r8,r2
    c410:	003e4106 	br	bd18 <__alt_data_end+0xf800bd18>
    c414:	0141ffc4 	movi	r5,2047
    c418:	117fc71e 	bne	r2,r5,c338 <__alt_data_end+0xf800c338>
    c41c:	4811883a 	mov	r8,r9
    c420:	3023883a 	mov	r17,r6
    c424:	1021883a 	mov	r16,r2
    c428:	003e3b06 	br	bd18 <__alt_data_end+0xf800bd18>
    c42c:	10002f26 	beq	r2,zero,c4ec <__adddf3+0x850>
    c430:	4984b03a 	or	r2,r9,r6
    c434:	10001126 	beq	r2,zero,c47c <__adddf3+0x7e0>
    c438:	4004d0fa 	srli	r2,r8,3
    c43c:	8822d0fa 	srli	r17,r17,3
    c440:	4010977a 	slli	r8,r8,29
    c444:	10c0022c 	andhi	r3,r2,8
    c448:	4462b03a 	or	r17,r8,r17
    c44c:	183feb26 	beq	r3,zero,c3fc <__alt_data_end+0xf800c3fc>
    c450:	4808d0fa 	srli	r4,r9,3
    c454:	20c0022c 	andhi	r3,r4,8
    c458:	183fe81e 	bne	r3,zero,c3fc <__alt_data_end+0xf800c3fc>
    c45c:	300cd0fa 	srli	r6,r6,3
    c460:	4806977a 	slli	r3,r9,29
    c464:	2005883a 	mov	r2,r4
    c468:	19a2b03a 	or	r17,r3,r6
    c46c:	003fe306 	br	c3fc <__alt_data_end+0xf800c3fc>
    c470:	0011883a 	mov	r8,zero
    c474:	0005883a 	mov	r2,zero
    c478:	003e3f06 	br	bd78 <__alt_data_end+0xf800bd78>
    c47c:	0401ffc4 	movi	r16,2047
    c480:	003e2506 	br	bd18 <__alt_data_end+0xf800bd18>
    c484:	0013883a 	mov	r9,zero
    c488:	003f8406 	br	c29c <__alt_data_end+0xf800c29c>
    c48c:	0005883a 	mov	r2,zero
    c490:	0007883a 	mov	r3,zero
    c494:	003e8906 	br	bebc <__alt_data_end+0xf800bebc>
    c498:	197ff804 	addi	r5,r3,-32
    c49c:	01000804 	movi	r4,32
    c4a0:	414ad83a 	srl	r5,r8,r5
    c4a4:	19002426 	beq	r3,r4,c538 <__adddf3+0x89c>
    c4a8:	01001004 	movi	r4,64
    c4ac:	20c7c83a 	sub	r3,r4,r3
    c4b0:	40c6983a 	sll	r3,r8,r3
    c4b4:	1c46b03a 	or	r3,r3,r17
    c4b8:	1806c03a 	cmpne	r3,r3,zero
    c4bc:	28e2b03a 	or	r17,r5,r3
    c4c0:	0007883a 	mov	r3,zero
    c4c4:	003f2306 	br	c154 <__alt_data_end+0xf800c154>
    c4c8:	0007883a 	mov	r3,zero
    c4cc:	5811883a 	mov	r8,r11
    c4d0:	00bfffc4 	movi	r2,-1
    c4d4:	0401ffc4 	movi	r16,2047
    c4d8:	003e7806 	br	bebc <__alt_data_end+0xf800bebc>
    c4dc:	4462b03a 	or	r17,r8,r17
    c4e0:	8822c03a 	cmpne	r17,r17,zero
    c4e4:	0009883a 	mov	r4,zero
    c4e8:	003fa006 	br	c36c <__alt_data_end+0xf800c36c>
    c4ec:	4811883a 	mov	r8,r9
    c4f0:	3023883a 	mov	r17,r6
    c4f4:	0401ffc4 	movi	r16,2047
    c4f8:	003e0706 	br	bd18 <__alt_data_end+0xf800bd18>
    c4fc:	4811883a 	mov	r8,r9
    c500:	3023883a 	mov	r17,r6
    c504:	003e0406 	br	bd18 <__alt_data_end+0xf800bd18>
    c508:	21fff804 	addi	r7,r4,-32
    c50c:	01400804 	movi	r5,32
    c510:	41ced83a 	srl	r7,r8,r7
    c514:	21400a26 	beq	r4,r5,c540 <__adddf3+0x8a4>
    c518:	01401004 	movi	r5,64
    c51c:	2909c83a 	sub	r4,r5,r4
    c520:	4108983a 	sll	r4,r8,r4
    c524:	2448b03a 	or	r4,r4,r17
    c528:	2008c03a 	cmpne	r4,r4,zero
    c52c:	3922b03a 	or	r17,r7,r4
    c530:	0009883a 	mov	r4,zero
    c534:	003f8d06 	br	c36c <__alt_data_end+0xf800c36c>
    c538:	0007883a 	mov	r3,zero
    c53c:	003fdd06 	br	c4b4 <__alt_data_end+0xf800c4b4>
    c540:	0009883a 	mov	r4,zero
    c544:	003ff706 	br	c524 <__alt_data_end+0xf800c524>

0000c548 <__divdf3>:
    c548:	defff204 	addi	sp,sp,-56
    c54c:	dd400915 	stw	r21,36(sp)
    c550:	282ad53a 	srli	r21,r5,20
    c554:	dd000815 	stw	r20,32(sp)
    c558:	2828d7fa 	srli	r20,r5,31
    c55c:	dc000415 	stw	r16,16(sp)
    c560:	04000434 	movhi	r16,16
    c564:	df000c15 	stw	fp,48(sp)
    c568:	843fffc4 	addi	r16,r16,-1
    c56c:	dfc00d15 	stw	ra,52(sp)
    c570:	ddc00b15 	stw	r23,44(sp)
    c574:	dd800a15 	stw	r22,40(sp)
    c578:	dcc00715 	stw	r19,28(sp)
    c57c:	dc800615 	stw	r18,24(sp)
    c580:	dc400515 	stw	r17,20(sp)
    c584:	ad41ffcc 	andi	r21,r21,2047
    c588:	2c20703a 	and	r16,r5,r16
    c58c:	a7003fcc 	andi	fp,r20,255
    c590:	a8006126 	beq	r21,zero,c718 <__divdf3+0x1d0>
    c594:	0081ffc4 	movi	r2,2047
    c598:	2025883a 	mov	r18,r4
    c59c:	a8803726 	beq	r21,r2,c67c <__divdf3+0x134>
    c5a0:	80800434 	orhi	r2,r16,16
    c5a4:	100490fa 	slli	r2,r2,3
    c5a8:	2020d77a 	srli	r16,r4,29
    c5ac:	202490fa 	slli	r18,r4,3
    c5b0:	ad7f0044 	addi	r21,r21,-1023
    c5b4:	80a0b03a 	or	r16,r16,r2
    c5b8:	0027883a 	mov	r19,zero
    c5bc:	0013883a 	mov	r9,zero
    c5c0:	3804d53a 	srli	r2,r7,20
    c5c4:	382cd7fa 	srli	r22,r7,31
    c5c8:	04400434 	movhi	r17,16
    c5cc:	8c7fffc4 	addi	r17,r17,-1
    c5d0:	1081ffcc 	andi	r2,r2,2047
    c5d4:	3011883a 	mov	r8,r6
    c5d8:	3c62703a 	and	r17,r7,r17
    c5dc:	b5c03fcc 	andi	r23,r22,255
    c5e0:	10006c26 	beq	r2,zero,c794 <__divdf3+0x24c>
    c5e4:	00c1ffc4 	movi	r3,2047
    c5e8:	10c06426 	beq	r2,r3,c77c <__divdf3+0x234>
    c5ec:	88c00434 	orhi	r3,r17,16
    c5f0:	180690fa 	slli	r3,r3,3
    c5f4:	3022d77a 	srli	r17,r6,29
    c5f8:	301090fa 	slli	r8,r6,3
    c5fc:	10bf0044 	addi	r2,r2,-1023
    c600:	88e2b03a 	or	r17,r17,r3
    c604:	000f883a 	mov	r7,zero
    c608:	a58cf03a 	xor	r6,r20,r22
    c60c:	3cc8b03a 	or	r4,r7,r19
    c610:	a8abc83a 	sub	r21,r21,r2
    c614:	008003c4 	movi	r2,15
    c618:	3007883a 	mov	r3,r6
    c61c:	34c03fcc 	andi	r19,r6,255
    c620:	11009036 	bltu	r2,r4,c864 <__divdf3+0x31c>
    c624:	200890ba 	slli	r4,r4,2
    c628:	00800074 	movhi	r2,1
    c62c:	10b18f04 	addi	r2,r2,-14788
    c630:	2089883a 	add	r4,r4,r2
    c634:	20800017 	ldw	r2,0(r4)
    c638:	1000683a 	jmp	r2
    c63c:	0000c864 	muli	zero,zero,801
    c640:	0000c6b4 	movhi	zero,794
    c644:	0000c854 	movui	zero,801
    c648:	0000c6a8 	cmpgeui	zero,zero,794
    c64c:	0000c854 	movui	zero,801
    c650:	0000c828 	cmpgeui	zero,zero,800
    c654:	0000c854 	movui	zero,801
    c658:	0000c6a8 	cmpgeui	zero,zero,794
    c65c:	0000c6b4 	movhi	zero,794
    c660:	0000c6b4 	movhi	zero,794
    c664:	0000c828 	cmpgeui	zero,zero,800
    c668:	0000c6a8 	cmpgeui	zero,zero,794
    c66c:	0000c698 	cmpnei	zero,zero,794
    c670:	0000c698 	cmpnei	zero,zero,794
    c674:	0000c698 	cmpnei	zero,zero,794
    c678:	0000cb48 	cmpgei	zero,zero,813
    c67c:	2404b03a 	or	r2,r4,r16
    c680:	1000661e 	bne	r2,zero,c81c <__divdf3+0x2d4>
    c684:	04c00204 	movi	r19,8
    c688:	0021883a 	mov	r16,zero
    c68c:	0025883a 	mov	r18,zero
    c690:	02400084 	movi	r9,2
    c694:	003fca06 	br	c5c0 <__alt_data_end+0xf800c5c0>
    c698:	8023883a 	mov	r17,r16
    c69c:	9011883a 	mov	r8,r18
    c6a0:	e02f883a 	mov	r23,fp
    c6a4:	480f883a 	mov	r7,r9
    c6a8:	00800084 	movi	r2,2
    c6ac:	3881311e 	bne	r7,r2,cb74 <__divdf3+0x62c>
    c6b0:	b827883a 	mov	r19,r23
    c6b4:	98c0004c 	andi	r3,r19,1
    c6b8:	0081ffc4 	movi	r2,2047
    c6bc:	000b883a 	mov	r5,zero
    c6c0:	0025883a 	mov	r18,zero
    c6c4:	1004953a 	slli	r2,r2,20
    c6c8:	18c03fcc 	andi	r3,r3,255
    c6cc:	04400434 	movhi	r17,16
    c6d0:	8c7fffc4 	addi	r17,r17,-1
    c6d4:	180697fa 	slli	r3,r3,31
    c6d8:	2c4a703a 	and	r5,r5,r17
    c6dc:	288ab03a 	or	r5,r5,r2
    c6e0:	28c6b03a 	or	r3,r5,r3
    c6e4:	9005883a 	mov	r2,r18
    c6e8:	dfc00d17 	ldw	ra,52(sp)
    c6ec:	df000c17 	ldw	fp,48(sp)
    c6f0:	ddc00b17 	ldw	r23,44(sp)
    c6f4:	dd800a17 	ldw	r22,40(sp)
    c6f8:	dd400917 	ldw	r21,36(sp)
    c6fc:	dd000817 	ldw	r20,32(sp)
    c700:	dcc00717 	ldw	r19,28(sp)
    c704:	dc800617 	ldw	r18,24(sp)
    c708:	dc400517 	ldw	r17,20(sp)
    c70c:	dc000417 	ldw	r16,16(sp)
    c710:	dec00e04 	addi	sp,sp,56
    c714:	f800283a 	ret
    c718:	2404b03a 	or	r2,r4,r16
    c71c:	2027883a 	mov	r19,r4
    c720:	10003926 	beq	r2,zero,c808 <__divdf3+0x2c0>
    c724:	80012e26 	beq	r16,zero,cbe0 <__divdf3+0x698>
    c728:	8009883a 	mov	r4,r16
    c72c:	d9800315 	stw	r6,12(sp)
    c730:	d9c00215 	stw	r7,8(sp)
    c734:	000e2a00 	call	e2a0 <__clzsi2>
    c738:	d9800317 	ldw	r6,12(sp)
    c73c:	d9c00217 	ldw	r7,8(sp)
    c740:	113ffd44 	addi	r4,r2,-11
    c744:	00c00704 	movi	r3,28
    c748:	19012116 	blt	r3,r4,cbd0 <__divdf3+0x688>
    c74c:	00c00744 	movi	r3,29
    c750:	147ffe04 	addi	r17,r2,-8
    c754:	1907c83a 	sub	r3,r3,r4
    c758:	8460983a 	sll	r16,r16,r17
    c75c:	98c6d83a 	srl	r3,r19,r3
    c760:	9c64983a 	sll	r18,r19,r17
    c764:	1c20b03a 	or	r16,r3,r16
    c768:	1080fcc4 	addi	r2,r2,1011
    c76c:	00abc83a 	sub	r21,zero,r2
    c770:	0027883a 	mov	r19,zero
    c774:	0013883a 	mov	r9,zero
    c778:	003f9106 	br	c5c0 <__alt_data_end+0xf800c5c0>
    c77c:	3446b03a 	or	r3,r6,r17
    c780:	18001f1e 	bne	r3,zero,c800 <__divdf3+0x2b8>
    c784:	0023883a 	mov	r17,zero
    c788:	0011883a 	mov	r8,zero
    c78c:	01c00084 	movi	r7,2
    c790:	003f9d06 	br	c608 <__alt_data_end+0xf800c608>
    c794:	3446b03a 	or	r3,r6,r17
    c798:	18001526 	beq	r3,zero,c7f0 <__divdf3+0x2a8>
    c79c:	88011b26 	beq	r17,zero,cc0c <__divdf3+0x6c4>
    c7a0:	8809883a 	mov	r4,r17
    c7a4:	d9800315 	stw	r6,12(sp)
    c7a8:	da400115 	stw	r9,4(sp)
    c7ac:	000e2a00 	call	e2a0 <__clzsi2>
    c7b0:	d9800317 	ldw	r6,12(sp)
    c7b4:	da400117 	ldw	r9,4(sp)
    c7b8:	113ffd44 	addi	r4,r2,-11
    c7bc:	00c00704 	movi	r3,28
    c7c0:	19010e16 	blt	r3,r4,cbfc <__divdf3+0x6b4>
    c7c4:	00c00744 	movi	r3,29
    c7c8:	123ffe04 	addi	r8,r2,-8
    c7cc:	1907c83a 	sub	r3,r3,r4
    c7d0:	8a22983a 	sll	r17,r17,r8
    c7d4:	30c6d83a 	srl	r3,r6,r3
    c7d8:	3210983a 	sll	r8,r6,r8
    c7dc:	1c62b03a 	or	r17,r3,r17
    c7e0:	1080fcc4 	addi	r2,r2,1011
    c7e4:	0085c83a 	sub	r2,zero,r2
    c7e8:	000f883a 	mov	r7,zero
    c7ec:	003f8606 	br	c608 <__alt_data_end+0xf800c608>
    c7f0:	0023883a 	mov	r17,zero
    c7f4:	0011883a 	mov	r8,zero
    c7f8:	01c00044 	movi	r7,1
    c7fc:	003f8206 	br	c608 <__alt_data_end+0xf800c608>
    c800:	01c000c4 	movi	r7,3
    c804:	003f8006 	br	c608 <__alt_data_end+0xf800c608>
    c808:	04c00104 	movi	r19,4
    c80c:	0021883a 	mov	r16,zero
    c810:	0025883a 	mov	r18,zero
    c814:	02400044 	movi	r9,1
    c818:	003f6906 	br	c5c0 <__alt_data_end+0xf800c5c0>
    c81c:	04c00304 	movi	r19,12
    c820:	024000c4 	movi	r9,3
    c824:	003f6606 	br	c5c0 <__alt_data_end+0xf800c5c0>
    c828:	01400434 	movhi	r5,16
    c82c:	0007883a 	mov	r3,zero
    c830:	297fffc4 	addi	r5,r5,-1
    c834:	04bfffc4 	movi	r18,-1
    c838:	0081ffc4 	movi	r2,2047
    c83c:	003fa106 	br	c6c4 <__alt_data_end+0xf800c6c4>
    c840:	00c00044 	movi	r3,1
    c844:	1887c83a 	sub	r3,r3,r2
    c848:	01000e04 	movi	r4,56
    c84c:	20c1210e 	bge	r4,r3,ccd4 <__divdf3+0x78c>
    c850:	98c0004c 	andi	r3,r19,1
    c854:	0005883a 	mov	r2,zero
    c858:	000b883a 	mov	r5,zero
    c85c:	0025883a 	mov	r18,zero
    c860:	003f9806 	br	c6c4 <__alt_data_end+0xf800c6c4>
    c864:	8c00fd36 	bltu	r17,r16,cc5c <__divdf3+0x714>
    c868:	8440fb26 	beq	r16,r17,cc58 <__divdf3+0x710>
    c86c:	8007883a 	mov	r3,r16
    c870:	ad7fffc4 	addi	r21,r21,-1
    c874:	0021883a 	mov	r16,zero
    c878:	4004d63a 	srli	r2,r8,24
    c87c:	8822923a 	slli	r17,r17,8
    c880:	1809883a 	mov	r4,r3
    c884:	402c923a 	slli	r22,r8,8
    c888:	88b8b03a 	or	fp,r17,r2
    c88c:	e028d43a 	srli	r20,fp,16
    c890:	d8c00015 	stw	r3,0(sp)
    c894:	e5ffffcc 	andi	r23,fp,65535
    c898:	a00b883a 	mov	r5,r20
    c89c:	0001ab40 	call	1ab4 <__udivsi3>
    c8a0:	d8c00017 	ldw	r3,0(sp)
    c8a4:	a00b883a 	mov	r5,r20
    c8a8:	d8800315 	stw	r2,12(sp)
    c8ac:	1809883a 	mov	r4,r3
    c8b0:	0001b180 	call	1b18 <__umodsi3>
    c8b4:	d9800317 	ldw	r6,12(sp)
    c8b8:	1006943a 	slli	r3,r2,16
    c8bc:	9004d43a 	srli	r2,r18,16
    c8c0:	b9a3383a 	mul	r17,r23,r6
    c8c4:	10c4b03a 	or	r2,r2,r3
    c8c8:	1440062e 	bgeu	r2,r17,c8e4 <__divdf3+0x39c>
    c8cc:	1705883a 	add	r2,r2,fp
    c8d0:	30ffffc4 	addi	r3,r6,-1
    c8d4:	1700ee36 	bltu	r2,fp,cc90 <__divdf3+0x748>
    c8d8:	1440ed2e 	bgeu	r2,r17,cc90 <__divdf3+0x748>
    c8dc:	31bfff84 	addi	r6,r6,-2
    c8e0:	1705883a 	add	r2,r2,fp
    c8e4:	1463c83a 	sub	r17,r2,r17
    c8e8:	a00b883a 	mov	r5,r20
    c8ec:	8809883a 	mov	r4,r17
    c8f0:	d9800315 	stw	r6,12(sp)
    c8f4:	0001ab40 	call	1ab4 <__udivsi3>
    c8f8:	a00b883a 	mov	r5,r20
    c8fc:	8809883a 	mov	r4,r17
    c900:	d8800215 	stw	r2,8(sp)
    c904:	0001b180 	call	1b18 <__umodsi3>
    c908:	d9c00217 	ldw	r7,8(sp)
    c90c:	1004943a 	slli	r2,r2,16
    c910:	94bfffcc 	andi	r18,r18,65535
    c914:	b9d1383a 	mul	r8,r23,r7
    c918:	90a4b03a 	or	r18,r18,r2
    c91c:	d9800317 	ldw	r6,12(sp)
    c920:	9200062e 	bgeu	r18,r8,c93c <__divdf3+0x3f4>
    c924:	9725883a 	add	r18,r18,fp
    c928:	38bfffc4 	addi	r2,r7,-1
    c92c:	9700d636 	bltu	r18,fp,cc88 <__divdf3+0x740>
    c930:	9200d52e 	bgeu	r18,r8,cc88 <__divdf3+0x740>
    c934:	39ffff84 	addi	r7,r7,-2
    c938:	9725883a 	add	r18,r18,fp
    c93c:	3004943a 	slli	r2,r6,16
    c940:	b012d43a 	srli	r9,r22,16
    c944:	b1bfffcc 	andi	r6,r22,65535
    c948:	11e2b03a 	or	r17,r2,r7
    c94c:	8806d43a 	srli	r3,r17,16
    c950:	893fffcc 	andi	r4,r17,65535
    c954:	218b383a 	mul	r5,r4,r6
    c958:	30c5383a 	mul	r2,r6,r3
    c95c:	2249383a 	mul	r4,r4,r9
    c960:	280ed43a 	srli	r7,r5,16
    c964:	9225c83a 	sub	r18,r18,r8
    c968:	2089883a 	add	r4,r4,r2
    c96c:	3909883a 	add	r4,r7,r4
    c970:	1a47383a 	mul	r3,r3,r9
    c974:	2080022e 	bgeu	r4,r2,c980 <__divdf3+0x438>
    c978:	00800074 	movhi	r2,1
    c97c:	1887883a 	add	r3,r3,r2
    c980:	2004d43a 	srli	r2,r4,16
    c984:	2008943a 	slli	r4,r4,16
    c988:	297fffcc 	andi	r5,r5,65535
    c98c:	10c7883a 	add	r3,r2,r3
    c990:	2149883a 	add	r4,r4,r5
    c994:	90c0a536 	bltu	r18,r3,cc2c <__divdf3+0x6e4>
    c998:	90c0bf26 	beq	r18,r3,cc98 <__divdf3+0x750>
    c99c:	90c7c83a 	sub	r3,r18,r3
    c9a0:	810fc83a 	sub	r7,r16,r4
    c9a4:	81e5803a 	cmpltu	r18,r16,r7
    c9a8:	1ca5c83a 	sub	r18,r3,r18
    c9ac:	e480c126 	beq	fp,r18,ccb4 <__divdf3+0x76c>
    c9b0:	a00b883a 	mov	r5,r20
    c9b4:	9009883a 	mov	r4,r18
    c9b8:	d9800315 	stw	r6,12(sp)
    c9bc:	d9c00215 	stw	r7,8(sp)
    c9c0:	da400115 	stw	r9,4(sp)
    c9c4:	0001ab40 	call	1ab4 <__udivsi3>
    c9c8:	a00b883a 	mov	r5,r20
    c9cc:	9009883a 	mov	r4,r18
    c9d0:	d8800015 	stw	r2,0(sp)
    c9d4:	0001b180 	call	1b18 <__umodsi3>
    c9d8:	d9c00217 	ldw	r7,8(sp)
    c9dc:	da000017 	ldw	r8,0(sp)
    c9e0:	1006943a 	slli	r3,r2,16
    c9e4:	3804d43a 	srli	r2,r7,16
    c9e8:	ba21383a 	mul	r16,r23,r8
    c9ec:	d9800317 	ldw	r6,12(sp)
    c9f0:	10c4b03a 	or	r2,r2,r3
    c9f4:	da400117 	ldw	r9,4(sp)
    c9f8:	1400062e 	bgeu	r2,r16,ca14 <__divdf3+0x4cc>
    c9fc:	1705883a 	add	r2,r2,fp
    ca00:	40ffffc4 	addi	r3,r8,-1
    ca04:	1700ad36 	bltu	r2,fp,ccbc <__divdf3+0x774>
    ca08:	1400ac2e 	bgeu	r2,r16,ccbc <__divdf3+0x774>
    ca0c:	423fff84 	addi	r8,r8,-2
    ca10:	1705883a 	add	r2,r2,fp
    ca14:	1421c83a 	sub	r16,r2,r16
    ca18:	a00b883a 	mov	r5,r20
    ca1c:	8009883a 	mov	r4,r16
    ca20:	d9800315 	stw	r6,12(sp)
    ca24:	d9c00215 	stw	r7,8(sp)
    ca28:	da000015 	stw	r8,0(sp)
    ca2c:	da400115 	stw	r9,4(sp)
    ca30:	0001ab40 	call	1ab4 <__udivsi3>
    ca34:	8009883a 	mov	r4,r16
    ca38:	a00b883a 	mov	r5,r20
    ca3c:	1025883a 	mov	r18,r2
    ca40:	0001b180 	call	1b18 <__umodsi3>
    ca44:	d9c00217 	ldw	r7,8(sp)
    ca48:	1004943a 	slli	r2,r2,16
    ca4c:	bcaf383a 	mul	r23,r23,r18
    ca50:	393fffcc 	andi	r4,r7,65535
    ca54:	2088b03a 	or	r4,r4,r2
    ca58:	d9800317 	ldw	r6,12(sp)
    ca5c:	da000017 	ldw	r8,0(sp)
    ca60:	da400117 	ldw	r9,4(sp)
    ca64:	25c0062e 	bgeu	r4,r23,ca80 <__divdf3+0x538>
    ca68:	2709883a 	add	r4,r4,fp
    ca6c:	90bfffc4 	addi	r2,r18,-1
    ca70:	27009436 	bltu	r4,fp,ccc4 <__divdf3+0x77c>
    ca74:	25c0932e 	bgeu	r4,r23,ccc4 <__divdf3+0x77c>
    ca78:	94bfff84 	addi	r18,r18,-2
    ca7c:	2709883a 	add	r4,r4,fp
    ca80:	4004943a 	slli	r2,r8,16
    ca84:	25efc83a 	sub	r23,r4,r23
    ca88:	1490b03a 	or	r8,r2,r18
    ca8c:	4008d43a 	srli	r4,r8,16
    ca90:	40ffffcc 	andi	r3,r8,65535
    ca94:	30c5383a 	mul	r2,r6,r3
    ca98:	1a47383a 	mul	r3,r3,r9
    ca9c:	310d383a 	mul	r6,r6,r4
    caa0:	100ad43a 	srli	r5,r2,16
    caa4:	4913383a 	mul	r9,r9,r4
    caa8:	1987883a 	add	r3,r3,r6
    caac:	28c7883a 	add	r3,r5,r3
    cab0:	1980022e 	bgeu	r3,r6,cabc <__divdf3+0x574>
    cab4:	01000074 	movhi	r4,1
    cab8:	4913883a 	add	r9,r9,r4
    cabc:	1808d43a 	srli	r4,r3,16
    cac0:	1806943a 	slli	r3,r3,16
    cac4:	10bfffcc 	andi	r2,r2,65535
    cac8:	2253883a 	add	r9,r4,r9
    cacc:	1887883a 	add	r3,r3,r2
    cad0:	ba403836 	bltu	r23,r9,cbb4 <__divdf3+0x66c>
    cad4:	ba403626 	beq	r23,r9,cbb0 <__divdf3+0x668>
    cad8:	42000054 	ori	r8,r8,1
    cadc:	a880ffc4 	addi	r2,r21,1023
    cae0:	00bf570e 	bge	zero,r2,c840 <__alt_data_end+0xf800c840>
    cae4:	40c001cc 	andi	r3,r8,7
    cae8:	18000726 	beq	r3,zero,cb08 <__divdf3+0x5c0>
    caec:	40c003cc 	andi	r3,r8,15
    caf0:	01000104 	movi	r4,4
    caf4:	19000426 	beq	r3,r4,cb08 <__divdf3+0x5c0>
    caf8:	4107883a 	add	r3,r8,r4
    cafc:	1a11803a 	cmpltu	r8,r3,r8
    cb00:	8a23883a 	add	r17,r17,r8
    cb04:	1811883a 	mov	r8,r3
    cb08:	88c0402c 	andhi	r3,r17,256
    cb0c:	18000426 	beq	r3,zero,cb20 <__divdf3+0x5d8>
    cb10:	00ffc034 	movhi	r3,65280
    cb14:	18ffffc4 	addi	r3,r3,-1
    cb18:	a8810004 	addi	r2,r21,1024
    cb1c:	88e2703a 	and	r17,r17,r3
    cb20:	00c1ff84 	movi	r3,2046
    cb24:	18bee316 	blt	r3,r2,c6b4 <__alt_data_end+0xf800c6b4>
    cb28:	8824977a 	slli	r18,r17,29
    cb2c:	4010d0fa 	srli	r8,r8,3
    cb30:	8822927a 	slli	r17,r17,9
    cb34:	1081ffcc 	andi	r2,r2,2047
    cb38:	9224b03a 	or	r18,r18,r8
    cb3c:	880ad33a 	srli	r5,r17,12
    cb40:	98c0004c 	andi	r3,r19,1
    cb44:	003edf06 	br	c6c4 <__alt_data_end+0xf800c6c4>
    cb48:	8080022c 	andhi	r2,r16,8
    cb4c:	10001226 	beq	r2,zero,cb98 <__divdf3+0x650>
    cb50:	8880022c 	andhi	r2,r17,8
    cb54:	1000101e 	bne	r2,zero,cb98 <__divdf3+0x650>
    cb58:	00800434 	movhi	r2,16
    cb5c:	89400234 	orhi	r5,r17,8
    cb60:	10bfffc4 	addi	r2,r2,-1
    cb64:	b007883a 	mov	r3,r22
    cb68:	288a703a 	and	r5,r5,r2
    cb6c:	4025883a 	mov	r18,r8
    cb70:	003f3106 	br	c838 <__alt_data_end+0xf800c838>
    cb74:	008000c4 	movi	r2,3
    cb78:	3880a626 	beq	r7,r2,ce14 <__divdf3+0x8cc>
    cb7c:	00800044 	movi	r2,1
    cb80:	3880521e 	bne	r7,r2,cccc <__divdf3+0x784>
    cb84:	b807883a 	mov	r3,r23
    cb88:	0005883a 	mov	r2,zero
    cb8c:	000b883a 	mov	r5,zero
    cb90:	0025883a 	mov	r18,zero
    cb94:	003ecb06 	br	c6c4 <__alt_data_end+0xf800c6c4>
    cb98:	00800434 	movhi	r2,16
    cb9c:	81400234 	orhi	r5,r16,8
    cba0:	10bfffc4 	addi	r2,r2,-1
    cba4:	a007883a 	mov	r3,r20
    cba8:	288a703a 	and	r5,r5,r2
    cbac:	003f2206 	br	c838 <__alt_data_end+0xf800c838>
    cbb0:	183fca26 	beq	r3,zero,cadc <__alt_data_end+0xf800cadc>
    cbb4:	e5ef883a 	add	r23,fp,r23
    cbb8:	40bfffc4 	addi	r2,r8,-1
    cbbc:	bf00392e 	bgeu	r23,fp,cca4 <__divdf3+0x75c>
    cbc0:	1011883a 	mov	r8,r2
    cbc4:	ba7fc41e 	bne	r23,r9,cad8 <__alt_data_end+0xf800cad8>
    cbc8:	b0ffc31e 	bne	r22,r3,cad8 <__alt_data_end+0xf800cad8>
    cbcc:	003fc306 	br	cadc <__alt_data_end+0xf800cadc>
    cbd0:	143ff604 	addi	r16,r2,-40
    cbd4:	9c20983a 	sll	r16,r19,r16
    cbd8:	0025883a 	mov	r18,zero
    cbdc:	003ee206 	br	c768 <__alt_data_end+0xf800c768>
    cbe0:	d9800315 	stw	r6,12(sp)
    cbe4:	d9c00215 	stw	r7,8(sp)
    cbe8:	000e2a00 	call	e2a0 <__clzsi2>
    cbec:	10800804 	addi	r2,r2,32
    cbf0:	d9c00217 	ldw	r7,8(sp)
    cbf4:	d9800317 	ldw	r6,12(sp)
    cbf8:	003ed106 	br	c740 <__alt_data_end+0xf800c740>
    cbfc:	147ff604 	addi	r17,r2,-40
    cc00:	3462983a 	sll	r17,r6,r17
    cc04:	0011883a 	mov	r8,zero
    cc08:	003ef506 	br	c7e0 <__alt_data_end+0xf800c7e0>
    cc0c:	3009883a 	mov	r4,r6
    cc10:	d9800315 	stw	r6,12(sp)
    cc14:	da400115 	stw	r9,4(sp)
    cc18:	000e2a00 	call	e2a0 <__clzsi2>
    cc1c:	10800804 	addi	r2,r2,32
    cc20:	da400117 	ldw	r9,4(sp)
    cc24:	d9800317 	ldw	r6,12(sp)
    cc28:	003ee306 	br	c7b8 <__alt_data_end+0xf800c7b8>
    cc2c:	85a1883a 	add	r16,r16,r22
    cc30:	8585803a 	cmpltu	r2,r16,r22
    cc34:	1705883a 	add	r2,r2,fp
    cc38:	14a5883a 	add	r18,r2,r18
    cc3c:	88bfffc4 	addi	r2,r17,-1
    cc40:	e4800c2e 	bgeu	fp,r18,cc74 <__divdf3+0x72c>
    cc44:	90c03e36 	bltu	r18,r3,cd40 <__divdf3+0x7f8>
    cc48:	1c806926 	beq	r3,r18,cdf0 <__divdf3+0x8a8>
    cc4c:	90c7c83a 	sub	r3,r18,r3
    cc50:	1023883a 	mov	r17,r2
    cc54:	003f5206 	br	c9a0 <__alt_data_end+0xf800c9a0>
    cc58:	923f0436 	bltu	r18,r8,c86c <__alt_data_end+0xf800c86c>
    cc5c:	800897fa 	slli	r4,r16,31
    cc60:	9004d07a 	srli	r2,r18,1
    cc64:	8006d07a 	srli	r3,r16,1
    cc68:	902097fa 	slli	r16,r18,31
    cc6c:	20a4b03a 	or	r18,r4,r2
    cc70:	003f0106 	br	c878 <__alt_data_end+0xf800c878>
    cc74:	e4bff51e 	bne	fp,r18,cc4c <__alt_data_end+0xf800cc4c>
    cc78:	85bff22e 	bgeu	r16,r22,cc44 <__alt_data_end+0xf800cc44>
    cc7c:	e0c7c83a 	sub	r3,fp,r3
    cc80:	1023883a 	mov	r17,r2
    cc84:	003f4606 	br	c9a0 <__alt_data_end+0xf800c9a0>
    cc88:	100f883a 	mov	r7,r2
    cc8c:	003f2b06 	br	c93c <__alt_data_end+0xf800c93c>
    cc90:	180d883a 	mov	r6,r3
    cc94:	003f1306 	br	c8e4 <__alt_data_end+0xf800c8e4>
    cc98:	813fe436 	bltu	r16,r4,cc2c <__alt_data_end+0xf800cc2c>
    cc9c:	0007883a 	mov	r3,zero
    cca0:	003f3f06 	br	c9a0 <__alt_data_end+0xf800c9a0>
    cca4:	ba402c36 	bltu	r23,r9,cd58 <__divdf3+0x810>
    cca8:	4dc05426 	beq	r9,r23,cdfc <__divdf3+0x8b4>
    ccac:	1011883a 	mov	r8,r2
    ccb0:	003f8906 	br	cad8 <__alt_data_end+0xf800cad8>
    ccb4:	023fffc4 	movi	r8,-1
    ccb8:	003f8806 	br	cadc <__alt_data_end+0xf800cadc>
    ccbc:	1811883a 	mov	r8,r3
    ccc0:	003f5406 	br	ca14 <__alt_data_end+0xf800ca14>
    ccc4:	1025883a 	mov	r18,r2
    ccc8:	003f6d06 	br	ca80 <__alt_data_end+0xf800ca80>
    cccc:	b827883a 	mov	r19,r23
    ccd0:	003f8206 	br	cadc <__alt_data_end+0xf800cadc>
    ccd4:	010007c4 	movi	r4,31
    ccd8:	20c02616 	blt	r4,r3,cd74 <__divdf3+0x82c>
    ccdc:	00800804 	movi	r2,32
    cce0:	10c5c83a 	sub	r2,r2,r3
    cce4:	888a983a 	sll	r5,r17,r2
    cce8:	40c8d83a 	srl	r4,r8,r3
    ccec:	4084983a 	sll	r2,r8,r2
    ccf0:	88e2d83a 	srl	r17,r17,r3
    ccf4:	2906b03a 	or	r3,r5,r4
    ccf8:	1004c03a 	cmpne	r2,r2,zero
    ccfc:	1886b03a 	or	r3,r3,r2
    cd00:	188001cc 	andi	r2,r3,7
    cd04:	10000726 	beq	r2,zero,cd24 <__divdf3+0x7dc>
    cd08:	188003cc 	andi	r2,r3,15
    cd0c:	01000104 	movi	r4,4
    cd10:	11000426 	beq	r2,r4,cd24 <__divdf3+0x7dc>
    cd14:	1805883a 	mov	r2,r3
    cd18:	10c00104 	addi	r3,r2,4
    cd1c:	1885803a 	cmpltu	r2,r3,r2
    cd20:	88a3883a 	add	r17,r17,r2
    cd24:	8880202c 	andhi	r2,r17,128
    cd28:	10002726 	beq	r2,zero,cdc8 <__divdf3+0x880>
    cd2c:	98c0004c 	andi	r3,r19,1
    cd30:	00800044 	movi	r2,1
    cd34:	000b883a 	mov	r5,zero
    cd38:	0025883a 	mov	r18,zero
    cd3c:	003e6106 	br	c6c4 <__alt_data_end+0xf800c6c4>
    cd40:	85a1883a 	add	r16,r16,r22
    cd44:	8585803a 	cmpltu	r2,r16,r22
    cd48:	1705883a 	add	r2,r2,fp
    cd4c:	14a5883a 	add	r18,r2,r18
    cd50:	8c7fff84 	addi	r17,r17,-2
    cd54:	003f1106 	br	c99c <__alt_data_end+0xf800c99c>
    cd58:	b589883a 	add	r4,r22,r22
    cd5c:	25ad803a 	cmpltu	r22,r4,r22
    cd60:	b739883a 	add	fp,r22,fp
    cd64:	40bfff84 	addi	r2,r8,-2
    cd68:	bf2f883a 	add	r23,r23,fp
    cd6c:	202d883a 	mov	r22,r4
    cd70:	003f9306 	br	cbc0 <__alt_data_end+0xf800cbc0>
    cd74:	013ff844 	movi	r4,-31
    cd78:	2085c83a 	sub	r2,r4,r2
    cd7c:	8888d83a 	srl	r4,r17,r2
    cd80:	00800804 	movi	r2,32
    cd84:	18802126 	beq	r3,r2,ce0c <__divdf3+0x8c4>
    cd88:	00801004 	movi	r2,64
    cd8c:	10c5c83a 	sub	r2,r2,r3
    cd90:	8884983a 	sll	r2,r17,r2
    cd94:	1204b03a 	or	r2,r2,r8
    cd98:	1004c03a 	cmpne	r2,r2,zero
    cd9c:	2084b03a 	or	r2,r4,r2
    cda0:	144001cc 	andi	r17,r2,7
    cda4:	88000d1e 	bne	r17,zero,cddc <__divdf3+0x894>
    cda8:	000b883a 	mov	r5,zero
    cdac:	1024d0fa 	srli	r18,r2,3
    cdb0:	98c0004c 	andi	r3,r19,1
    cdb4:	0005883a 	mov	r2,zero
    cdb8:	9464b03a 	or	r18,r18,r17
    cdbc:	003e4106 	br	c6c4 <__alt_data_end+0xf800c6c4>
    cdc0:	1007883a 	mov	r3,r2
    cdc4:	0023883a 	mov	r17,zero
    cdc8:	880a927a 	slli	r5,r17,9
    cdcc:	1805883a 	mov	r2,r3
    cdd0:	8822977a 	slli	r17,r17,29
    cdd4:	280ad33a 	srli	r5,r5,12
    cdd8:	003ff406 	br	cdac <__alt_data_end+0xf800cdac>
    cddc:	10c003cc 	andi	r3,r2,15
    cde0:	01000104 	movi	r4,4
    cde4:	193ff626 	beq	r3,r4,cdc0 <__alt_data_end+0xf800cdc0>
    cde8:	0023883a 	mov	r17,zero
    cdec:	003fca06 	br	cd18 <__alt_data_end+0xf800cd18>
    cdf0:	813fd336 	bltu	r16,r4,cd40 <__alt_data_end+0xf800cd40>
    cdf4:	1023883a 	mov	r17,r2
    cdf8:	003fa806 	br	cc9c <__alt_data_end+0xf800cc9c>
    cdfc:	b0ffd636 	bltu	r22,r3,cd58 <__alt_data_end+0xf800cd58>
    ce00:	1011883a 	mov	r8,r2
    ce04:	b0ff341e 	bne	r22,r3,cad8 <__alt_data_end+0xf800cad8>
    ce08:	003f3406 	br	cadc <__alt_data_end+0xf800cadc>
    ce0c:	0005883a 	mov	r2,zero
    ce10:	003fe006 	br	cd94 <__alt_data_end+0xf800cd94>
    ce14:	00800434 	movhi	r2,16
    ce18:	89400234 	orhi	r5,r17,8
    ce1c:	10bfffc4 	addi	r2,r2,-1
    ce20:	b807883a 	mov	r3,r23
    ce24:	288a703a 	and	r5,r5,r2
    ce28:	4025883a 	mov	r18,r8
    ce2c:	003e8206 	br	c838 <__alt_data_end+0xf800c838>

0000ce30 <__eqdf2>:
    ce30:	2804d53a 	srli	r2,r5,20
    ce34:	3806d53a 	srli	r3,r7,20
    ce38:	02000434 	movhi	r8,16
    ce3c:	423fffc4 	addi	r8,r8,-1
    ce40:	1081ffcc 	andi	r2,r2,2047
    ce44:	0281ffc4 	movi	r10,2047
    ce48:	2a12703a 	and	r9,r5,r8
    ce4c:	18c1ffcc 	andi	r3,r3,2047
    ce50:	3a10703a 	and	r8,r7,r8
    ce54:	280ad7fa 	srli	r5,r5,31
    ce58:	380ed7fa 	srli	r7,r7,31
    ce5c:	12801026 	beq	r2,r10,cea0 <__eqdf2+0x70>
    ce60:	0281ffc4 	movi	r10,2047
    ce64:	1a800a26 	beq	r3,r10,ce90 <__eqdf2+0x60>
    ce68:	10c00226 	beq	r2,r3,ce74 <__eqdf2+0x44>
    ce6c:	00800044 	movi	r2,1
    ce70:	f800283a 	ret
    ce74:	4a3ffd1e 	bne	r9,r8,ce6c <__alt_data_end+0xf800ce6c>
    ce78:	21bffc1e 	bne	r4,r6,ce6c <__alt_data_end+0xf800ce6c>
    ce7c:	29c00c26 	beq	r5,r7,ceb0 <__eqdf2+0x80>
    ce80:	103ffa1e 	bne	r2,zero,ce6c <__alt_data_end+0xf800ce6c>
    ce84:	2244b03a 	or	r2,r4,r9
    ce88:	1004c03a 	cmpne	r2,r2,zero
    ce8c:	f800283a 	ret
    ce90:	3214b03a 	or	r10,r6,r8
    ce94:	503ff426 	beq	r10,zero,ce68 <__alt_data_end+0xf800ce68>
    ce98:	00800044 	movi	r2,1
    ce9c:	f800283a 	ret
    cea0:	2254b03a 	or	r10,r4,r9
    cea4:	503fee26 	beq	r10,zero,ce60 <__alt_data_end+0xf800ce60>
    cea8:	00800044 	movi	r2,1
    ceac:	f800283a 	ret
    ceb0:	0005883a 	mov	r2,zero
    ceb4:	f800283a 	ret

0000ceb8 <__gedf2>:
    ceb8:	2804d53a 	srli	r2,r5,20
    cebc:	3806d53a 	srli	r3,r7,20
    cec0:	02000434 	movhi	r8,16
    cec4:	423fffc4 	addi	r8,r8,-1
    cec8:	1081ffcc 	andi	r2,r2,2047
    cecc:	0241ffc4 	movi	r9,2047
    ced0:	2a14703a 	and	r10,r5,r8
    ced4:	18c1ffcc 	andi	r3,r3,2047
    ced8:	3a10703a 	and	r8,r7,r8
    cedc:	280ad7fa 	srli	r5,r5,31
    cee0:	380ed7fa 	srli	r7,r7,31
    cee4:	12401d26 	beq	r2,r9,cf5c <__gedf2+0xa4>
    cee8:	0241ffc4 	movi	r9,2047
    ceec:	1a401226 	beq	r3,r9,cf38 <__gedf2+0x80>
    cef0:	1000081e 	bne	r2,zero,cf14 <__gedf2+0x5c>
    cef4:	2296b03a 	or	r11,r4,r10
    cef8:	5813003a 	cmpeq	r9,r11,zero
    cefc:	1800091e 	bne	r3,zero,cf24 <__gedf2+0x6c>
    cf00:	3218b03a 	or	r12,r6,r8
    cf04:	6000071e 	bne	r12,zero,cf24 <__gedf2+0x6c>
    cf08:	0005883a 	mov	r2,zero
    cf0c:	5800101e 	bne	r11,zero,cf50 <__gedf2+0x98>
    cf10:	f800283a 	ret
    cf14:	18000c1e 	bne	r3,zero,cf48 <__gedf2+0x90>
    cf18:	3212b03a 	or	r9,r6,r8
    cf1c:	48000c26 	beq	r9,zero,cf50 <__gedf2+0x98>
    cf20:	0013883a 	mov	r9,zero
    cf24:	39c03fcc 	andi	r7,r7,255
    cf28:	48000826 	beq	r9,zero,cf4c <__gedf2+0x94>
    cf2c:	38000926 	beq	r7,zero,cf54 <__gedf2+0x9c>
    cf30:	00800044 	movi	r2,1
    cf34:	f800283a 	ret
    cf38:	3212b03a 	or	r9,r6,r8
    cf3c:	483fec26 	beq	r9,zero,cef0 <__alt_data_end+0xf800cef0>
    cf40:	00bfff84 	movi	r2,-2
    cf44:	f800283a 	ret
    cf48:	39c03fcc 	andi	r7,r7,255
    cf4c:	29c00626 	beq	r5,r7,cf68 <__gedf2+0xb0>
    cf50:	283ff726 	beq	r5,zero,cf30 <__alt_data_end+0xf800cf30>
    cf54:	00bfffc4 	movi	r2,-1
    cf58:	f800283a 	ret
    cf5c:	2292b03a 	or	r9,r4,r10
    cf60:	483fe126 	beq	r9,zero,cee8 <__alt_data_end+0xf800cee8>
    cf64:	003ff606 	br	cf40 <__alt_data_end+0xf800cf40>
    cf68:	18bff916 	blt	r3,r2,cf50 <__alt_data_end+0xf800cf50>
    cf6c:	10c00316 	blt	r2,r3,cf7c <__gedf2+0xc4>
    cf70:	42bff736 	bltu	r8,r10,cf50 <__alt_data_end+0xf800cf50>
    cf74:	52000326 	beq	r10,r8,cf84 <__gedf2+0xcc>
    cf78:	5200042e 	bgeu	r10,r8,cf8c <__gedf2+0xd4>
    cf7c:	283fec1e 	bne	r5,zero,cf30 <__alt_data_end+0xf800cf30>
    cf80:	003ff406 	br	cf54 <__alt_data_end+0xf800cf54>
    cf84:	313ff236 	bltu	r6,r4,cf50 <__alt_data_end+0xf800cf50>
    cf88:	21bffc36 	bltu	r4,r6,cf7c <__alt_data_end+0xf800cf7c>
    cf8c:	0005883a 	mov	r2,zero
    cf90:	f800283a 	ret

0000cf94 <__ledf2>:
    cf94:	2804d53a 	srli	r2,r5,20
    cf98:	3810d53a 	srli	r8,r7,20
    cf9c:	00c00434 	movhi	r3,16
    cfa0:	18ffffc4 	addi	r3,r3,-1
    cfa4:	1081ffcc 	andi	r2,r2,2047
    cfa8:	0241ffc4 	movi	r9,2047
    cfac:	28d4703a 	and	r10,r5,r3
    cfb0:	4201ffcc 	andi	r8,r8,2047
    cfb4:	38c6703a 	and	r3,r7,r3
    cfb8:	280ad7fa 	srli	r5,r5,31
    cfbc:	380ed7fa 	srli	r7,r7,31
    cfc0:	12401f26 	beq	r2,r9,d040 <__ledf2+0xac>
    cfc4:	0241ffc4 	movi	r9,2047
    cfc8:	42401426 	beq	r8,r9,d01c <__ledf2+0x88>
    cfcc:	1000091e 	bne	r2,zero,cff4 <__ledf2+0x60>
    cfd0:	2296b03a 	or	r11,r4,r10
    cfd4:	5813003a 	cmpeq	r9,r11,zero
    cfd8:	29403fcc 	andi	r5,r5,255
    cfdc:	40000a1e 	bne	r8,zero,d008 <__ledf2+0x74>
    cfe0:	30d8b03a 	or	r12,r6,r3
    cfe4:	6000081e 	bne	r12,zero,d008 <__ledf2+0x74>
    cfe8:	0005883a 	mov	r2,zero
    cfec:	5800111e 	bne	r11,zero,d034 <__ledf2+0xa0>
    cff0:	f800283a 	ret
    cff4:	29403fcc 	andi	r5,r5,255
    cff8:	40000c1e 	bne	r8,zero,d02c <__ledf2+0x98>
    cffc:	30d2b03a 	or	r9,r6,r3
    d000:	48000c26 	beq	r9,zero,d034 <__ledf2+0xa0>
    d004:	0013883a 	mov	r9,zero
    d008:	39c03fcc 	andi	r7,r7,255
    d00c:	48000826 	beq	r9,zero,d030 <__ledf2+0x9c>
    d010:	38001126 	beq	r7,zero,d058 <__ledf2+0xc4>
    d014:	00800044 	movi	r2,1
    d018:	f800283a 	ret
    d01c:	30d2b03a 	or	r9,r6,r3
    d020:	483fea26 	beq	r9,zero,cfcc <__alt_data_end+0xf800cfcc>
    d024:	00800084 	movi	r2,2
    d028:	f800283a 	ret
    d02c:	39c03fcc 	andi	r7,r7,255
    d030:	39400726 	beq	r7,r5,d050 <__ledf2+0xbc>
    d034:	2800081e 	bne	r5,zero,d058 <__ledf2+0xc4>
    d038:	00800044 	movi	r2,1
    d03c:	f800283a 	ret
    d040:	2292b03a 	or	r9,r4,r10
    d044:	483fdf26 	beq	r9,zero,cfc4 <__alt_data_end+0xf800cfc4>
    d048:	00800084 	movi	r2,2
    d04c:	f800283a 	ret
    d050:	4080030e 	bge	r8,r2,d060 <__ledf2+0xcc>
    d054:	383fef26 	beq	r7,zero,d014 <__alt_data_end+0xf800d014>
    d058:	00bfffc4 	movi	r2,-1
    d05c:	f800283a 	ret
    d060:	123feb16 	blt	r2,r8,d010 <__alt_data_end+0xf800d010>
    d064:	1abff336 	bltu	r3,r10,d034 <__alt_data_end+0xf800d034>
    d068:	50c00326 	beq	r10,r3,d078 <__ledf2+0xe4>
    d06c:	50c0042e 	bgeu	r10,r3,d080 <__ledf2+0xec>
    d070:	283fe81e 	bne	r5,zero,d014 <__alt_data_end+0xf800d014>
    d074:	003ff806 	br	d058 <__alt_data_end+0xf800d058>
    d078:	313fee36 	bltu	r6,r4,d034 <__alt_data_end+0xf800d034>
    d07c:	21bffc36 	bltu	r4,r6,d070 <__alt_data_end+0xf800d070>
    d080:	0005883a 	mov	r2,zero
    d084:	f800283a 	ret

0000d088 <__muldf3>:
    d088:	defff304 	addi	sp,sp,-52
    d08c:	2804d53a 	srli	r2,r5,20
    d090:	dd800915 	stw	r22,36(sp)
    d094:	282cd7fa 	srli	r22,r5,31
    d098:	dc000315 	stw	r16,12(sp)
    d09c:	04000434 	movhi	r16,16
    d0a0:	dd400815 	stw	r21,32(sp)
    d0a4:	dc800515 	stw	r18,20(sp)
    d0a8:	843fffc4 	addi	r16,r16,-1
    d0ac:	dfc00c15 	stw	ra,48(sp)
    d0b0:	df000b15 	stw	fp,44(sp)
    d0b4:	ddc00a15 	stw	r23,40(sp)
    d0b8:	dd000715 	stw	r20,28(sp)
    d0bc:	dcc00615 	stw	r19,24(sp)
    d0c0:	dc400415 	stw	r17,16(sp)
    d0c4:	1481ffcc 	andi	r18,r2,2047
    d0c8:	2c20703a 	and	r16,r5,r16
    d0cc:	b02b883a 	mov	r21,r22
    d0d0:	b2403fcc 	andi	r9,r22,255
    d0d4:	90006026 	beq	r18,zero,d258 <__muldf3+0x1d0>
    d0d8:	0081ffc4 	movi	r2,2047
    d0dc:	2029883a 	mov	r20,r4
    d0e0:	90803626 	beq	r18,r2,d1bc <__muldf3+0x134>
    d0e4:	80800434 	orhi	r2,r16,16
    d0e8:	100490fa 	slli	r2,r2,3
    d0ec:	2020d77a 	srli	r16,r4,29
    d0f0:	202890fa 	slli	r20,r4,3
    d0f4:	94bf0044 	addi	r18,r18,-1023
    d0f8:	80a0b03a 	or	r16,r16,r2
    d0fc:	0027883a 	mov	r19,zero
    d100:	0039883a 	mov	fp,zero
    d104:	3804d53a 	srli	r2,r7,20
    d108:	382ed7fa 	srli	r23,r7,31
    d10c:	04400434 	movhi	r17,16
    d110:	8c7fffc4 	addi	r17,r17,-1
    d114:	1081ffcc 	andi	r2,r2,2047
    d118:	3011883a 	mov	r8,r6
    d11c:	3c62703a 	and	r17,r7,r17
    d120:	ba803fcc 	andi	r10,r23,255
    d124:	10006d26 	beq	r2,zero,d2dc <__muldf3+0x254>
    d128:	00c1ffc4 	movi	r3,2047
    d12c:	10c06526 	beq	r2,r3,d2c4 <__muldf3+0x23c>
    d130:	88c00434 	orhi	r3,r17,16
    d134:	180690fa 	slli	r3,r3,3
    d138:	3022d77a 	srli	r17,r6,29
    d13c:	301090fa 	slli	r8,r6,3
    d140:	10bf0044 	addi	r2,r2,-1023
    d144:	88e2b03a 	or	r17,r17,r3
    d148:	000b883a 	mov	r5,zero
    d14c:	9085883a 	add	r2,r18,r2
    d150:	2cc8b03a 	or	r4,r5,r19
    d154:	00c003c4 	movi	r3,15
    d158:	bdacf03a 	xor	r22,r23,r22
    d15c:	12c00044 	addi	r11,r2,1
    d160:	19009936 	bltu	r3,r4,d3c8 <__muldf3+0x340>
    d164:	200890ba 	slli	r4,r4,2
    d168:	00c00074 	movhi	r3,1
    d16c:	18f45f04 	addi	r3,r3,-11908
    d170:	20c9883a 	add	r4,r4,r3
    d174:	20c00017 	ldw	r3,0(r4)
    d178:	1800683a 	jmp	r3
    d17c:	0000d3c8 	cmpgei	zero,zero,847
    d180:	0000d1dc 	xori	zero,zero,839
    d184:	0000d1dc 	xori	zero,zero,839
    d188:	0000d1d8 	cmpnei	zero,zero,839
    d18c:	0000d3a4 	muli	zero,zero,846
    d190:	0000d3a4 	muli	zero,zero,846
    d194:	0000d38c 	andi	zero,zero,846
    d198:	0000d1d8 	cmpnei	zero,zero,839
    d19c:	0000d3a4 	muli	zero,zero,846
    d1a0:	0000d38c 	andi	zero,zero,846
    d1a4:	0000d3a4 	muli	zero,zero,846
    d1a8:	0000d1d8 	cmpnei	zero,zero,839
    d1ac:	0000d3b4 	movhi	zero,846
    d1b0:	0000d3b4 	movhi	zero,846
    d1b4:	0000d3b4 	movhi	zero,846
    d1b8:	0000d5d0 	cmplti	zero,zero,855
    d1bc:	2404b03a 	or	r2,r4,r16
    d1c0:	10006f1e 	bne	r2,zero,d380 <__muldf3+0x2f8>
    d1c4:	04c00204 	movi	r19,8
    d1c8:	0021883a 	mov	r16,zero
    d1cc:	0029883a 	mov	r20,zero
    d1d0:	07000084 	movi	fp,2
    d1d4:	003fcb06 	br	d104 <__alt_data_end+0xf800d104>
    d1d8:	502d883a 	mov	r22,r10
    d1dc:	00800084 	movi	r2,2
    d1e0:	28805726 	beq	r5,r2,d340 <__muldf3+0x2b8>
    d1e4:	008000c4 	movi	r2,3
    d1e8:	28816626 	beq	r5,r2,d784 <__muldf3+0x6fc>
    d1ec:	00800044 	movi	r2,1
    d1f0:	2881411e 	bne	r5,r2,d6f8 <__muldf3+0x670>
    d1f4:	b02b883a 	mov	r21,r22
    d1f8:	0005883a 	mov	r2,zero
    d1fc:	000b883a 	mov	r5,zero
    d200:	0029883a 	mov	r20,zero
    d204:	1004953a 	slli	r2,r2,20
    d208:	a8c03fcc 	andi	r3,r21,255
    d20c:	04400434 	movhi	r17,16
    d210:	8c7fffc4 	addi	r17,r17,-1
    d214:	180697fa 	slli	r3,r3,31
    d218:	2c4a703a 	and	r5,r5,r17
    d21c:	288ab03a 	or	r5,r5,r2
    d220:	28c6b03a 	or	r3,r5,r3
    d224:	a005883a 	mov	r2,r20
    d228:	dfc00c17 	ldw	ra,48(sp)
    d22c:	df000b17 	ldw	fp,44(sp)
    d230:	ddc00a17 	ldw	r23,40(sp)
    d234:	dd800917 	ldw	r22,36(sp)
    d238:	dd400817 	ldw	r21,32(sp)
    d23c:	dd000717 	ldw	r20,28(sp)
    d240:	dcc00617 	ldw	r19,24(sp)
    d244:	dc800517 	ldw	r18,20(sp)
    d248:	dc400417 	ldw	r17,16(sp)
    d24c:	dc000317 	ldw	r16,12(sp)
    d250:	dec00d04 	addi	sp,sp,52
    d254:	f800283a 	ret
    d258:	2404b03a 	or	r2,r4,r16
    d25c:	2027883a 	mov	r19,r4
    d260:	10004226 	beq	r2,zero,d36c <__muldf3+0x2e4>
    d264:	8000fc26 	beq	r16,zero,d658 <__muldf3+0x5d0>
    d268:	8009883a 	mov	r4,r16
    d26c:	d9800215 	stw	r6,8(sp)
    d270:	d9c00015 	stw	r7,0(sp)
    d274:	da400115 	stw	r9,4(sp)
    d278:	000e2a00 	call	e2a0 <__clzsi2>
    d27c:	d9800217 	ldw	r6,8(sp)
    d280:	d9c00017 	ldw	r7,0(sp)
    d284:	da400117 	ldw	r9,4(sp)
    d288:	113ffd44 	addi	r4,r2,-11
    d28c:	00c00704 	movi	r3,28
    d290:	1900ed16 	blt	r3,r4,d648 <__muldf3+0x5c0>
    d294:	00c00744 	movi	r3,29
    d298:	147ffe04 	addi	r17,r2,-8
    d29c:	1907c83a 	sub	r3,r3,r4
    d2a0:	8460983a 	sll	r16,r16,r17
    d2a4:	98c6d83a 	srl	r3,r19,r3
    d2a8:	9c68983a 	sll	r20,r19,r17
    d2ac:	1c20b03a 	or	r16,r3,r16
    d2b0:	1080fcc4 	addi	r2,r2,1011
    d2b4:	00a5c83a 	sub	r18,zero,r2
    d2b8:	0027883a 	mov	r19,zero
    d2bc:	0039883a 	mov	fp,zero
    d2c0:	003f9006 	br	d104 <__alt_data_end+0xf800d104>
    d2c4:	3446b03a 	or	r3,r6,r17
    d2c8:	1800261e 	bne	r3,zero,d364 <__muldf3+0x2dc>
    d2cc:	0023883a 	mov	r17,zero
    d2d0:	0011883a 	mov	r8,zero
    d2d4:	01400084 	movi	r5,2
    d2d8:	003f9c06 	br	d14c <__alt_data_end+0xf800d14c>
    d2dc:	3446b03a 	or	r3,r6,r17
    d2e0:	18001c26 	beq	r3,zero,d354 <__muldf3+0x2cc>
    d2e4:	8800ce26 	beq	r17,zero,d620 <__muldf3+0x598>
    d2e8:	8809883a 	mov	r4,r17
    d2ec:	d9800215 	stw	r6,8(sp)
    d2f0:	da400115 	stw	r9,4(sp)
    d2f4:	da800015 	stw	r10,0(sp)
    d2f8:	000e2a00 	call	e2a0 <__clzsi2>
    d2fc:	d9800217 	ldw	r6,8(sp)
    d300:	da400117 	ldw	r9,4(sp)
    d304:	da800017 	ldw	r10,0(sp)
    d308:	113ffd44 	addi	r4,r2,-11
    d30c:	00c00704 	movi	r3,28
    d310:	1900bf16 	blt	r3,r4,d610 <__muldf3+0x588>
    d314:	00c00744 	movi	r3,29
    d318:	123ffe04 	addi	r8,r2,-8
    d31c:	1907c83a 	sub	r3,r3,r4
    d320:	8a22983a 	sll	r17,r17,r8
    d324:	30c6d83a 	srl	r3,r6,r3
    d328:	3210983a 	sll	r8,r6,r8
    d32c:	1c62b03a 	or	r17,r3,r17
    d330:	1080fcc4 	addi	r2,r2,1011
    d334:	0085c83a 	sub	r2,zero,r2
    d338:	000b883a 	mov	r5,zero
    d33c:	003f8306 	br	d14c <__alt_data_end+0xf800d14c>
    d340:	b02b883a 	mov	r21,r22
    d344:	0081ffc4 	movi	r2,2047
    d348:	000b883a 	mov	r5,zero
    d34c:	0029883a 	mov	r20,zero
    d350:	003fac06 	br	d204 <__alt_data_end+0xf800d204>
    d354:	0023883a 	mov	r17,zero
    d358:	0011883a 	mov	r8,zero
    d35c:	01400044 	movi	r5,1
    d360:	003f7a06 	br	d14c <__alt_data_end+0xf800d14c>
    d364:	014000c4 	movi	r5,3
    d368:	003f7806 	br	d14c <__alt_data_end+0xf800d14c>
    d36c:	04c00104 	movi	r19,4
    d370:	0021883a 	mov	r16,zero
    d374:	0029883a 	mov	r20,zero
    d378:	07000044 	movi	fp,1
    d37c:	003f6106 	br	d104 <__alt_data_end+0xf800d104>
    d380:	04c00304 	movi	r19,12
    d384:	070000c4 	movi	fp,3
    d388:	003f5e06 	br	d104 <__alt_data_end+0xf800d104>
    d38c:	01400434 	movhi	r5,16
    d390:	002b883a 	mov	r21,zero
    d394:	297fffc4 	addi	r5,r5,-1
    d398:	053fffc4 	movi	r20,-1
    d39c:	0081ffc4 	movi	r2,2047
    d3a0:	003f9806 	br	d204 <__alt_data_end+0xf800d204>
    d3a4:	8023883a 	mov	r17,r16
    d3a8:	a011883a 	mov	r8,r20
    d3ac:	e00b883a 	mov	r5,fp
    d3b0:	003f8a06 	br	d1dc <__alt_data_end+0xf800d1dc>
    d3b4:	8023883a 	mov	r17,r16
    d3b8:	a011883a 	mov	r8,r20
    d3bc:	482d883a 	mov	r22,r9
    d3c0:	e00b883a 	mov	r5,fp
    d3c4:	003f8506 	br	d1dc <__alt_data_end+0xf800d1dc>
    d3c8:	a00ad43a 	srli	r5,r20,16
    d3cc:	401ad43a 	srli	r13,r8,16
    d3d0:	a53fffcc 	andi	r20,r20,65535
    d3d4:	423fffcc 	andi	r8,r8,65535
    d3d8:	4519383a 	mul	r12,r8,r20
    d3dc:	4147383a 	mul	r3,r8,r5
    d3e0:	6d09383a 	mul	r4,r13,r20
    d3e4:	600cd43a 	srli	r6,r12,16
    d3e8:	2b5d383a 	mul	r14,r5,r13
    d3ec:	20c9883a 	add	r4,r4,r3
    d3f0:	310d883a 	add	r6,r6,r4
    d3f4:	30c0022e 	bgeu	r6,r3,d400 <__muldf3+0x378>
    d3f8:	00c00074 	movhi	r3,1
    d3fc:	70dd883a 	add	r14,r14,r3
    d400:	8826d43a 	srli	r19,r17,16
    d404:	8bffffcc 	andi	r15,r17,65535
    d408:	7d23383a 	mul	r17,r15,r20
    d40c:	7949383a 	mul	r4,r15,r5
    d410:	9d29383a 	mul	r20,r19,r20
    d414:	8814d43a 	srli	r10,r17,16
    d418:	3012943a 	slli	r9,r6,16
    d41c:	a129883a 	add	r20,r20,r4
    d420:	633fffcc 	andi	r12,r12,65535
    d424:	5515883a 	add	r10,r10,r20
    d428:	3006d43a 	srli	r3,r6,16
    d42c:	4b13883a 	add	r9,r9,r12
    d430:	2ccb383a 	mul	r5,r5,r19
    d434:	5100022e 	bgeu	r10,r4,d440 <__muldf3+0x3b8>
    d438:	01000074 	movhi	r4,1
    d43c:	290b883a 	add	r5,r5,r4
    d440:	802ad43a 	srli	r21,r16,16
    d444:	843fffcc 	andi	r16,r16,65535
    d448:	440d383a 	mul	r6,r8,r16
    d44c:	4565383a 	mul	r18,r8,r21
    d450:	8349383a 	mul	r4,r16,r13
    d454:	500e943a 	slli	r7,r10,16
    d458:	3010d43a 	srli	r8,r6,16
    d45c:	5028d43a 	srli	r20,r10,16
    d460:	2489883a 	add	r4,r4,r18
    d464:	8abfffcc 	andi	r10,r17,65535
    d468:	3a95883a 	add	r10,r7,r10
    d46c:	4119883a 	add	r12,r8,r4
    d470:	a169883a 	add	r20,r20,r5
    d474:	1a87883a 	add	r3,r3,r10
    d478:	6d5b383a 	mul	r13,r13,r21
    d47c:	6480022e 	bgeu	r12,r18,d488 <__muldf3+0x400>
    d480:	01000074 	movhi	r4,1
    d484:	691b883a 	add	r13,r13,r4
    d488:	7c25383a 	mul	r18,r15,r16
    d48c:	7d4b383a 	mul	r5,r15,r21
    d490:	84cf383a 	mul	r7,r16,r19
    d494:	901ed43a 	srli	r15,r18,16
    d498:	6008d43a 	srli	r4,r12,16
    d49c:	6010943a 	slli	r8,r12,16
    d4a0:	394f883a 	add	r7,r7,r5
    d4a4:	333fffcc 	andi	r12,r6,65535
    d4a8:	79df883a 	add	r15,r15,r7
    d4ac:	235b883a 	add	r13,r4,r13
    d4b0:	9d63383a 	mul	r17,r19,r21
    d4b4:	4309883a 	add	r4,r8,r12
    d4b8:	7940022e 	bgeu	r15,r5,d4c4 <__muldf3+0x43c>
    d4bc:	01400074 	movhi	r5,1
    d4c0:	8963883a 	add	r17,r17,r5
    d4c4:	780a943a 	slli	r5,r15,16
    d4c8:	91bfffcc 	andi	r6,r18,65535
    d4cc:	70c7883a 	add	r3,r14,r3
    d4d0:	298d883a 	add	r6,r5,r6
    d4d4:	1a8f803a 	cmpltu	r7,r3,r10
    d4d8:	350b883a 	add	r5,r6,r20
    d4dc:	20c7883a 	add	r3,r4,r3
    d4e0:	3955883a 	add	r10,r7,r5
    d4e4:	1909803a 	cmpltu	r4,r3,r4
    d4e8:	6a91883a 	add	r8,r13,r10
    d4ec:	780cd43a 	srli	r6,r15,16
    d4f0:	2219883a 	add	r12,r4,r8
    d4f4:	2d0b803a 	cmpltu	r5,r5,r20
    d4f8:	51cf803a 	cmpltu	r7,r10,r7
    d4fc:	29ceb03a 	or	r7,r5,r7
    d500:	4351803a 	cmpltu	r8,r8,r13
    d504:	610b803a 	cmpltu	r5,r12,r4
    d508:	4148b03a 	or	r4,r8,r5
    d50c:	398f883a 	add	r7,r7,r6
    d510:	3909883a 	add	r4,r7,r4
    d514:	1810927a 	slli	r8,r3,9
    d518:	2449883a 	add	r4,r4,r17
    d51c:	2008927a 	slli	r4,r4,9
    d520:	6022d5fa 	srli	r17,r12,23
    d524:	1806d5fa 	srli	r3,r3,23
    d528:	4252b03a 	or	r9,r8,r9
    d52c:	600a927a 	slli	r5,r12,9
    d530:	4810c03a 	cmpne	r8,r9,zero
    d534:	2462b03a 	or	r17,r4,r17
    d538:	40c6b03a 	or	r3,r8,r3
    d53c:	8900402c 	andhi	r4,r17,256
    d540:	1950b03a 	or	r8,r3,r5
    d544:	20000726 	beq	r4,zero,d564 <__muldf3+0x4dc>
    d548:	4006d07a 	srli	r3,r8,1
    d54c:	880497fa 	slli	r2,r17,31
    d550:	4200004c 	andi	r8,r8,1
    d554:	8822d07a 	srli	r17,r17,1
    d558:	1a10b03a 	or	r8,r3,r8
    d55c:	1210b03a 	or	r8,r2,r8
    d560:	5805883a 	mov	r2,r11
    d564:	1140ffc4 	addi	r5,r2,1023
    d568:	0140440e 	bge	zero,r5,d67c <__muldf3+0x5f4>
    d56c:	40c001cc 	andi	r3,r8,7
    d570:	18000726 	beq	r3,zero,d590 <__muldf3+0x508>
    d574:	40c003cc 	andi	r3,r8,15
    d578:	01000104 	movi	r4,4
    d57c:	19000426 	beq	r3,r4,d590 <__muldf3+0x508>
    d580:	4107883a 	add	r3,r8,r4
    d584:	1a11803a 	cmpltu	r8,r3,r8
    d588:	8a23883a 	add	r17,r17,r8
    d58c:	1811883a 	mov	r8,r3
    d590:	88c0402c 	andhi	r3,r17,256
    d594:	18000426 	beq	r3,zero,d5a8 <__muldf3+0x520>
    d598:	11410004 	addi	r5,r2,1024
    d59c:	00bfc034 	movhi	r2,65280
    d5a0:	10bfffc4 	addi	r2,r2,-1
    d5a4:	88a2703a 	and	r17,r17,r2
    d5a8:	0081ff84 	movi	r2,2046
    d5ac:	117f6416 	blt	r2,r5,d340 <__alt_data_end+0xf800d340>
    d5b0:	8828977a 	slli	r20,r17,29
    d5b4:	4010d0fa 	srli	r8,r8,3
    d5b8:	8822927a 	slli	r17,r17,9
    d5bc:	2881ffcc 	andi	r2,r5,2047
    d5c0:	a228b03a 	or	r20,r20,r8
    d5c4:	880ad33a 	srli	r5,r17,12
    d5c8:	b02b883a 	mov	r21,r22
    d5cc:	003f0d06 	br	d204 <__alt_data_end+0xf800d204>
    d5d0:	8080022c 	andhi	r2,r16,8
    d5d4:	10000926 	beq	r2,zero,d5fc <__muldf3+0x574>
    d5d8:	8880022c 	andhi	r2,r17,8
    d5dc:	1000071e 	bne	r2,zero,d5fc <__muldf3+0x574>
    d5e0:	00800434 	movhi	r2,16
    d5e4:	89400234 	orhi	r5,r17,8
    d5e8:	10bfffc4 	addi	r2,r2,-1
    d5ec:	b82b883a 	mov	r21,r23
    d5f0:	288a703a 	and	r5,r5,r2
    d5f4:	4029883a 	mov	r20,r8
    d5f8:	003f6806 	br	d39c <__alt_data_end+0xf800d39c>
    d5fc:	00800434 	movhi	r2,16
    d600:	81400234 	orhi	r5,r16,8
    d604:	10bfffc4 	addi	r2,r2,-1
    d608:	288a703a 	and	r5,r5,r2
    d60c:	003f6306 	br	d39c <__alt_data_end+0xf800d39c>
    d610:	147ff604 	addi	r17,r2,-40
    d614:	3462983a 	sll	r17,r6,r17
    d618:	0011883a 	mov	r8,zero
    d61c:	003f4406 	br	d330 <__alt_data_end+0xf800d330>
    d620:	3009883a 	mov	r4,r6
    d624:	d9800215 	stw	r6,8(sp)
    d628:	da400115 	stw	r9,4(sp)
    d62c:	da800015 	stw	r10,0(sp)
    d630:	000e2a00 	call	e2a0 <__clzsi2>
    d634:	10800804 	addi	r2,r2,32
    d638:	da800017 	ldw	r10,0(sp)
    d63c:	da400117 	ldw	r9,4(sp)
    d640:	d9800217 	ldw	r6,8(sp)
    d644:	003f3006 	br	d308 <__alt_data_end+0xf800d308>
    d648:	143ff604 	addi	r16,r2,-40
    d64c:	9c20983a 	sll	r16,r19,r16
    d650:	0029883a 	mov	r20,zero
    d654:	003f1606 	br	d2b0 <__alt_data_end+0xf800d2b0>
    d658:	d9800215 	stw	r6,8(sp)
    d65c:	d9c00015 	stw	r7,0(sp)
    d660:	da400115 	stw	r9,4(sp)
    d664:	000e2a00 	call	e2a0 <__clzsi2>
    d668:	10800804 	addi	r2,r2,32
    d66c:	da400117 	ldw	r9,4(sp)
    d670:	d9c00017 	ldw	r7,0(sp)
    d674:	d9800217 	ldw	r6,8(sp)
    d678:	003f0306 	br	d288 <__alt_data_end+0xf800d288>
    d67c:	00c00044 	movi	r3,1
    d680:	1947c83a 	sub	r3,r3,r5
    d684:	00800e04 	movi	r2,56
    d688:	10feda16 	blt	r2,r3,d1f4 <__alt_data_end+0xf800d1f4>
    d68c:	008007c4 	movi	r2,31
    d690:	10c01b16 	blt	r2,r3,d700 <__muldf3+0x678>
    d694:	00800804 	movi	r2,32
    d698:	10c5c83a 	sub	r2,r2,r3
    d69c:	888a983a 	sll	r5,r17,r2
    d6a0:	40c8d83a 	srl	r4,r8,r3
    d6a4:	4084983a 	sll	r2,r8,r2
    d6a8:	88e2d83a 	srl	r17,r17,r3
    d6ac:	2906b03a 	or	r3,r5,r4
    d6b0:	1004c03a 	cmpne	r2,r2,zero
    d6b4:	1886b03a 	or	r3,r3,r2
    d6b8:	188001cc 	andi	r2,r3,7
    d6bc:	10000726 	beq	r2,zero,d6dc <__muldf3+0x654>
    d6c0:	188003cc 	andi	r2,r3,15
    d6c4:	01000104 	movi	r4,4
    d6c8:	11000426 	beq	r2,r4,d6dc <__muldf3+0x654>
    d6cc:	1805883a 	mov	r2,r3
    d6d0:	10c00104 	addi	r3,r2,4
    d6d4:	1885803a 	cmpltu	r2,r3,r2
    d6d8:	88a3883a 	add	r17,r17,r2
    d6dc:	8880202c 	andhi	r2,r17,128
    d6e0:	10001c26 	beq	r2,zero,d754 <__muldf3+0x6cc>
    d6e4:	b02b883a 	mov	r21,r22
    d6e8:	00800044 	movi	r2,1
    d6ec:	000b883a 	mov	r5,zero
    d6f0:	0029883a 	mov	r20,zero
    d6f4:	003ec306 	br	d204 <__alt_data_end+0xf800d204>
    d6f8:	5805883a 	mov	r2,r11
    d6fc:	003f9906 	br	d564 <__alt_data_end+0xf800d564>
    d700:	00bff844 	movi	r2,-31
    d704:	1145c83a 	sub	r2,r2,r5
    d708:	8888d83a 	srl	r4,r17,r2
    d70c:	00800804 	movi	r2,32
    d710:	18801a26 	beq	r3,r2,d77c <__muldf3+0x6f4>
    d714:	00801004 	movi	r2,64
    d718:	10c5c83a 	sub	r2,r2,r3
    d71c:	8884983a 	sll	r2,r17,r2
    d720:	1204b03a 	or	r2,r2,r8
    d724:	1004c03a 	cmpne	r2,r2,zero
    d728:	2084b03a 	or	r2,r4,r2
    d72c:	144001cc 	andi	r17,r2,7
    d730:	88000d1e 	bne	r17,zero,d768 <__muldf3+0x6e0>
    d734:	000b883a 	mov	r5,zero
    d738:	1028d0fa 	srli	r20,r2,3
    d73c:	b02b883a 	mov	r21,r22
    d740:	0005883a 	mov	r2,zero
    d744:	a468b03a 	or	r20,r20,r17
    d748:	003eae06 	br	d204 <__alt_data_end+0xf800d204>
    d74c:	1007883a 	mov	r3,r2
    d750:	0023883a 	mov	r17,zero
    d754:	880a927a 	slli	r5,r17,9
    d758:	1805883a 	mov	r2,r3
    d75c:	8822977a 	slli	r17,r17,29
    d760:	280ad33a 	srli	r5,r5,12
    d764:	003ff406 	br	d738 <__alt_data_end+0xf800d738>
    d768:	10c003cc 	andi	r3,r2,15
    d76c:	01000104 	movi	r4,4
    d770:	193ff626 	beq	r3,r4,d74c <__alt_data_end+0xf800d74c>
    d774:	0023883a 	mov	r17,zero
    d778:	003fd506 	br	d6d0 <__alt_data_end+0xf800d6d0>
    d77c:	0005883a 	mov	r2,zero
    d780:	003fe706 	br	d720 <__alt_data_end+0xf800d720>
    d784:	00800434 	movhi	r2,16
    d788:	89400234 	orhi	r5,r17,8
    d78c:	10bfffc4 	addi	r2,r2,-1
    d790:	b02b883a 	mov	r21,r22
    d794:	288a703a 	and	r5,r5,r2
    d798:	4029883a 	mov	r20,r8
    d79c:	003eff06 	br	d39c <__alt_data_end+0xf800d39c>

0000d7a0 <__subdf3>:
    d7a0:	02000434 	movhi	r8,16
    d7a4:	423fffc4 	addi	r8,r8,-1
    d7a8:	defffb04 	addi	sp,sp,-20
    d7ac:	2a14703a 	and	r10,r5,r8
    d7b0:	3812d53a 	srli	r9,r7,20
    d7b4:	3a10703a 	and	r8,r7,r8
    d7b8:	2006d77a 	srli	r3,r4,29
    d7bc:	3004d77a 	srli	r2,r6,29
    d7c0:	dc000015 	stw	r16,0(sp)
    d7c4:	501490fa 	slli	r10,r10,3
    d7c8:	2820d53a 	srli	r16,r5,20
    d7cc:	401090fa 	slli	r8,r8,3
    d7d0:	dc800215 	stw	r18,8(sp)
    d7d4:	dc400115 	stw	r17,4(sp)
    d7d8:	dfc00415 	stw	ra,16(sp)
    d7dc:	202290fa 	slli	r17,r4,3
    d7e0:	dcc00315 	stw	r19,12(sp)
    d7e4:	4a41ffcc 	andi	r9,r9,2047
    d7e8:	0101ffc4 	movi	r4,2047
    d7ec:	2824d7fa 	srli	r18,r5,31
    d7f0:	8401ffcc 	andi	r16,r16,2047
    d7f4:	50c6b03a 	or	r3,r10,r3
    d7f8:	380ed7fa 	srli	r7,r7,31
    d7fc:	408ab03a 	or	r5,r8,r2
    d800:	300c90fa 	slli	r6,r6,3
    d804:	49009626 	beq	r9,r4,da60 <__subdf3+0x2c0>
    d808:	39c0005c 	xori	r7,r7,1
    d80c:	8245c83a 	sub	r2,r16,r9
    d810:	3c807426 	beq	r7,r18,d9e4 <__subdf3+0x244>
    d814:	0080af0e 	bge	zero,r2,dad4 <__subdf3+0x334>
    d818:	48002a1e 	bne	r9,zero,d8c4 <__subdf3+0x124>
    d81c:	2988b03a 	or	r4,r5,r6
    d820:	20009a1e 	bne	r4,zero,da8c <__subdf3+0x2ec>
    d824:	888001cc 	andi	r2,r17,7
    d828:	10000726 	beq	r2,zero,d848 <__subdf3+0xa8>
    d82c:	888003cc 	andi	r2,r17,15
    d830:	01000104 	movi	r4,4
    d834:	11000426 	beq	r2,r4,d848 <__subdf3+0xa8>
    d838:	890b883a 	add	r5,r17,r4
    d83c:	2c63803a 	cmpltu	r17,r5,r17
    d840:	1c47883a 	add	r3,r3,r17
    d844:	2823883a 	mov	r17,r5
    d848:	1880202c 	andhi	r2,r3,128
    d84c:	10005926 	beq	r2,zero,d9b4 <__subdf3+0x214>
    d850:	84000044 	addi	r16,r16,1
    d854:	0081ffc4 	movi	r2,2047
    d858:	8080be26 	beq	r16,r2,db54 <__subdf3+0x3b4>
    d85c:	017fe034 	movhi	r5,65408
    d860:	297fffc4 	addi	r5,r5,-1
    d864:	1946703a 	and	r3,r3,r5
    d868:	1804977a 	slli	r2,r3,29
    d86c:	1806927a 	slli	r3,r3,9
    d870:	8822d0fa 	srli	r17,r17,3
    d874:	8401ffcc 	andi	r16,r16,2047
    d878:	180ad33a 	srli	r5,r3,12
    d87c:	9100004c 	andi	r4,r18,1
    d880:	1444b03a 	or	r2,r2,r17
    d884:	80c1ffcc 	andi	r3,r16,2047
    d888:	1820953a 	slli	r16,r3,20
    d88c:	20c03fcc 	andi	r3,r4,255
    d890:	180897fa 	slli	r4,r3,31
    d894:	00c00434 	movhi	r3,16
    d898:	18ffffc4 	addi	r3,r3,-1
    d89c:	28c6703a 	and	r3,r5,r3
    d8a0:	1c06b03a 	or	r3,r3,r16
    d8a4:	1906b03a 	or	r3,r3,r4
    d8a8:	dfc00417 	ldw	ra,16(sp)
    d8ac:	dcc00317 	ldw	r19,12(sp)
    d8b0:	dc800217 	ldw	r18,8(sp)
    d8b4:	dc400117 	ldw	r17,4(sp)
    d8b8:	dc000017 	ldw	r16,0(sp)
    d8bc:	dec00504 	addi	sp,sp,20
    d8c0:	f800283a 	ret
    d8c4:	0101ffc4 	movi	r4,2047
    d8c8:	813fd626 	beq	r16,r4,d824 <__alt_data_end+0xf800d824>
    d8cc:	29402034 	orhi	r5,r5,128
    d8d0:	01000e04 	movi	r4,56
    d8d4:	2080a316 	blt	r4,r2,db64 <__subdf3+0x3c4>
    d8d8:	010007c4 	movi	r4,31
    d8dc:	2080c616 	blt	r4,r2,dbf8 <__subdf3+0x458>
    d8e0:	01000804 	movi	r4,32
    d8e4:	2089c83a 	sub	r4,r4,r2
    d8e8:	2910983a 	sll	r8,r5,r4
    d8ec:	308ed83a 	srl	r7,r6,r2
    d8f0:	3108983a 	sll	r4,r6,r4
    d8f4:	2884d83a 	srl	r2,r5,r2
    d8f8:	41ccb03a 	or	r6,r8,r7
    d8fc:	2008c03a 	cmpne	r4,r4,zero
    d900:	310cb03a 	or	r6,r6,r4
    d904:	898dc83a 	sub	r6,r17,r6
    d908:	89a3803a 	cmpltu	r17,r17,r6
    d90c:	1887c83a 	sub	r3,r3,r2
    d910:	1c47c83a 	sub	r3,r3,r17
    d914:	3023883a 	mov	r17,r6
    d918:	1880202c 	andhi	r2,r3,128
    d91c:	10002326 	beq	r2,zero,d9ac <__subdf3+0x20c>
    d920:	04c02034 	movhi	r19,128
    d924:	9cffffc4 	addi	r19,r19,-1
    d928:	1ce6703a 	and	r19,r3,r19
    d92c:	98007a26 	beq	r19,zero,db18 <__subdf3+0x378>
    d930:	9809883a 	mov	r4,r19
    d934:	000e2a00 	call	e2a0 <__clzsi2>
    d938:	113ffe04 	addi	r4,r2,-8
    d93c:	00c007c4 	movi	r3,31
    d940:	19007b16 	blt	r3,r4,db30 <__subdf3+0x390>
    d944:	00800804 	movi	r2,32
    d948:	1105c83a 	sub	r2,r2,r4
    d94c:	8884d83a 	srl	r2,r17,r2
    d950:	9906983a 	sll	r3,r19,r4
    d954:	8922983a 	sll	r17,r17,r4
    d958:	10c4b03a 	or	r2,r2,r3
    d95c:	24007816 	blt	r4,r16,db40 <__subdf3+0x3a0>
    d960:	2421c83a 	sub	r16,r4,r16
    d964:	80c00044 	addi	r3,r16,1
    d968:	010007c4 	movi	r4,31
    d96c:	20c09516 	blt	r4,r3,dbc4 <__subdf3+0x424>
    d970:	01400804 	movi	r5,32
    d974:	28cbc83a 	sub	r5,r5,r3
    d978:	88c8d83a 	srl	r4,r17,r3
    d97c:	8962983a 	sll	r17,r17,r5
    d980:	114a983a 	sll	r5,r2,r5
    d984:	10c6d83a 	srl	r3,r2,r3
    d988:	8804c03a 	cmpne	r2,r17,zero
    d98c:	290ab03a 	or	r5,r5,r4
    d990:	28a2b03a 	or	r17,r5,r2
    d994:	0021883a 	mov	r16,zero
    d998:	003fa206 	br	d824 <__alt_data_end+0xf800d824>
    d99c:	2090b03a 	or	r8,r4,r2
    d9a0:	40018e26 	beq	r8,zero,dfdc <__subdf3+0x83c>
    d9a4:	1007883a 	mov	r3,r2
    d9a8:	2023883a 	mov	r17,r4
    d9ac:	888001cc 	andi	r2,r17,7
    d9b0:	103f9e1e 	bne	r2,zero,d82c <__alt_data_end+0xf800d82c>
    d9b4:	1804977a 	slli	r2,r3,29
    d9b8:	8822d0fa 	srli	r17,r17,3
    d9bc:	1810d0fa 	srli	r8,r3,3
    d9c0:	9100004c 	andi	r4,r18,1
    d9c4:	1444b03a 	or	r2,r2,r17
    d9c8:	00c1ffc4 	movi	r3,2047
    d9cc:	80c02826 	beq	r16,r3,da70 <__subdf3+0x2d0>
    d9d0:	01400434 	movhi	r5,16
    d9d4:	297fffc4 	addi	r5,r5,-1
    d9d8:	80e0703a 	and	r16,r16,r3
    d9dc:	414a703a 	and	r5,r8,r5
    d9e0:	003fa806 	br	d884 <__alt_data_end+0xf800d884>
    d9e4:	0080630e 	bge	zero,r2,db74 <__subdf3+0x3d4>
    d9e8:	48003026 	beq	r9,zero,daac <__subdf3+0x30c>
    d9ec:	0101ffc4 	movi	r4,2047
    d9f0:	813f8c26 	beq	r16,r4,d824 <__alt_data_end+0xf800d824>
    d9f4:	29402034 	orhi	r5,r5,128
    d9f8:	01000e04 	movi	r4,56
    d9fc:	2080a90e 	bge	r4,r2,dca4 <__subdf3+0x504>
    da00:	298cb03a 	or	r6,r5,r6
    da04:	3012c03a 	cmpne	r9,r6,zero
    da08:	0005883a 	mov	r2,zero
    da0c:	4c53883a 	add	r9,r9,r17
    da10:	4c63803a 	cmpltu	r17,r9,r17
    da14:	10c7883a 	add	r3,r2,r3
    da18:	88c7883a 	add	r3,r17,r3
    da1c:	4823883a 	mov	r17,r9
    da20:	1880202c 	andhi	r2,r3,128
    da24:	1000d026 	beq	r2,zero,dd68 <__subdf3+0x5c8>
    da28:	84000044 	addi	r16,r16,1
    da2c:	0081ffc4 	movi	r2,2047
    da30:	8080fe26 	beq	r16,r2,de2c <__subdf3+0x68c>
    da34:	00bfe034 	movhi	r2,65408
    da38:	10bfffc4 	addi	r2,r2,-1
    da3c:	1886703a 	and	r3,r3,r2
    da40:	880ad07a 	srli	r5,r17,1
    da44:	180497fa 	slli	r2,r3,31
    da48:	8900004c 	andi	r4,r17,1
    da4c:	2922b03a 	or	r17,r5,r4
    da50:	1806d07a 	srli	r3,r3,1
    da54:	1462b03a 	or	r17,r2,r17
    da58:	3825883a 	mov	r18,r7
    da5c:	003f7106 	br	d824 <__alt_data_end+0xf800d824>
    da60:	2984b03a 	or	r2,r5,r6
    da64:	103f6826 	beq	r2,zero,d808 <__alt_data_end+0xf800d808>
    da68:	39c03fcc 	andi	r7,r7,255
    da6c:	003f6706 	br	d80c <__alt_data_end+0xf800d80c>
    da70:	4086b03a 	or	r3,r8,r2
    da74:	18015226 	beq	r3,zero,dfc0 <__subdf3+0x820>
    da78:	00c00434 	movhi	r3,16
    da7c:	41400234 	orhi	r5,r8,8
    da80:	18ffffc4 	addi	r3,r3,-1
    da84:	28ca703a 	and	r5,r5,r3
    da88:	003f7e06 	br	d884 <__alt_data_end+0xf800d884>
    da8c:	10bfffc4 	addi	r2,r2,-1
    da90:	1000491e 	bne	r2,zero,dbb8 <__subdf3+0x418>
    da94:	898fc83a 	sub	r7,r17,r6
    da98:	89e3803a 	cmpltu	r17,r17,r7
    da9c:	1947c83a 	sub	r3,r3,r5
    daa0:	1c47c83a 	sub	r3,r3,r17
    daa4:	3823883a 	mov	r17,r7
    daa8:	003f9b06 	br	d918 <__alt_data_end+0xf800d918>
    daac:	2988b03a 	or	r4,r5,r6
    dab0:	203f5c26 	beq	r4,zero,d824 <__alt_data_end+0xf800d824>
    dab4:	10bfffc4 	addi	r2,r2,-1
    dab8:	1000931e 	bne	r2,zero,dd08 <__subdf3+0x568>
    dabc:	898d883a 	add	r6,r17,r6
    dac0:	3463803a 	cmpltu	r17,r6,r17
    dac4:	1947883a 	add	r3,r3,r5
    dac8:	88c7883a 	add	r3,r17,r3
    dacc:	3023883a 	mov	r17,r6
    dad0:	003fd306 	br	da20 <__alt_data_end+0xf800da20>
    dad4:	1000541e 	bne	r2,zero,dc28 <__subdf3+0x488>
    dad8:	80800044 	addi	r2,r16,1
    dadc:	1081ffcc 	andi	r2,r2,2047
    dae0:	01000044 	movi	r4,1
    dae4:	2080a20e 	bge	r4,r2,dd70 <__subdf3+0x5d0>
    dae8:	8989c83a 	sub	r4,r17,r6
    daec:	8905803a 	cmpltu	r2,r17,r4
    daf0:	1967c83a 	sub	r19,r3,r5
    daf4:	98a7c83a 	sub	r19,r19,r2
    daf8:	9880202c 	andhi	r2,r19,128
    dafc:	10006326 	beq	r2,zero,dc8c <__subdf3+0x4ec>
    db00:	3463c83a 	sub	r17,r6,r17
    db04:	28c7c83a 	sub	r3,r5,r3
    db08:	344d803a 	cmpltu	r6,r6,r17
    db0c:	19a7c83a 	sub	r19,r3,r6
    db10:	3825883a 	mov	r18,r7
    db14:	983f861e 	bne	r19,zero,d930 <__alt_data_end+0xf800d930>
    db18:	8809883a 	mov	r4,r17
    db1c:	000e2a00 	call	e2a0 <__clzsi2>
    db20:	10800804 	addi	r2,r2,32
    db24:	113ffe04 	addi	r4,r2,-8
    db28:	00c007c4 	movi	r3,31
    db2c:	193f850e 	bge	r3,r4,d944 <__alt_data_end+0xf800d944>
    db30:	10bff604 	addi	r2,r2,-40
    db34:	8884983a 	sll	r2,r17,r2
    db38:	0023883a 	mov	r17,zero
    db3c:	243f880e 	bge	r4,r16,d960 <__alt_data_end+0xf800d960>
    db40:	00ffe034 	movhi	r3,65408
    db44:	18ffffc4 	addi	r3,r3,-1
    db48:	8121c83a 	sub	r16,r16,r4
    db4c:	10c6703a 	and	r3,r2,r3
    db50:	003f3406 	br	d824 <__alt_data_end+0xf800d824>
    db54:	9100004c 	andi	r4,r18,1
    db58:	000b883a 	mov	r5,zero
    db5c:	0005883a 	mov	r2,zero
    db60:	003f4806 	br	d884 <__alt_data_end+0xf800d884>
    db64:	298cb03a 	or	r6,r5,r6
    db68:	300cc03a 	cmpne	r6,r6,zero
    db6c:	0005883a 	mov	r2,zero
    db70:	003f6406 	br	d904 <__alt_data_end+0xf800d904>
    db74:	10009a1e 	bne	r2,zero,dde0 <__subdf3+0x640>
    db78:	82400044 	addi	r9,r16,1
    db7c:	4881ffcc 	andi	r2,r9,2047
    db80:	02800044 	movi	r10,1
    db84:	5080670e 	bge	r10,r2,dd24 <__subdf3+0x584>
    db88:	0081ffc4 	movi	r2,2047
    db8c:	4880af26 	beq	r9,r2,de4c <__subdf3+0x6ac>
    db90:	898d883a 	add	r6,r17,r6
    db94:	1945883a 	add	r2,r3,r5
    db98:	3447803a 	cmpltu	r3,r6,r17
    db9c:	1887883a 	add	r3,r3,r2
    dba0:	182297fa 	slli	r17,r3,31
    dba4:	300cd07a 	srli	r6,r6,1
    dba8:	1806d07a 	srli	r3,r3,1
    dbac:	4821883a 	mov	r16,r9
    dbb0:	89a2b03a 	or	r17,r17,r6
    dbb4:	003f1b06 	br	d824 <__alt_data_end+0xf800d824>
    dbb8:	0101ffc4 	movi	r4,2047
    dbbc:	813f441e 	bne	r16,r4,d8d0 <__alt_data_end+0xf800d8d0>
    dbc0:	003f1806 	br	d824 <__alt_data_end+0xf800d824>
    dbc4:	843ff844 	addi	r16,r16,-31
    dbc8:	01400804 	movi	r5,32
    dbcc:	1408d83a 	srl	r4,r2,r16
    dbd0:	19405026 	beq	r3,r5,dd14 <__subdf3+0x574>
    dbd4:	01401004 	movi	r5,64
    dbd8:	28c7c83a 	sub	r3,r5,r3
    dbdc:	10c4983a 	sll	r2,r2,r3
    dbe0:	88a2b03a 	or	r17,r17,r2
    dbe4:	8822c03a 	cmpne	r17,r17,zero
    dbe8:	2462b03a 	or	r17,r4,r17
    dbec:	0007883a 	mov	r3,zero
    dbf0:	0021883a 	mov	r16,zero
    dbf4:	003f6d06 	br	d9ac <__alt_data_end+0xf800d9ac>
    dbf8:	11fff804 	addi	r7,r2,-32
    dbfc:	01000804 	movi	r4,32
    dc00:	29ced83a 	srl	r7,r5,r7
    dc04:	11004526 	beq	r2,r4,dd1c <__subdf3+0x57c>
    dc08:	01001004 	movi	r4,64
    dc0c:	2089c83a 	sub	r4,r4,r2
    dc10:	2904983a 	sll	r2,r5,r4
    dc14:	118cb03a 	or	r6,r2,r6
    dc18:	300cc03a 	cmpne	r6,r6,zero
    dc1c:	398cb03a 	or	r6,r7,r6
    dc20:	0005883a 	mov	r2,zero
    dc24:	003f3706 	br	d904 <__alt_data_end+0xf800d904>
    dc28:	80002a26 	beq	r16,zero,dcd4 <__subdf3+0x534>
    dc2c:	0101ffc4 	movi	r4,2047
    dc30:	49006626 	beq	r9,r4,ddcc <__subdf3+0x62c>
    dc34:	0085c83a 	sub	r2,zero,r2
    dc38:	18c02034 	orhi	r3,r3,128
    dc3c:	01000e04 	movi	r4,56
    dc40:	20807e16 	blt	r4,r2,de3c <__subdf3+0x69c>
    dc44:	010007c4 	movi	r4,31
    dc48:	2080e716 	blt	r4,r2,dfe8 <__subdf3+0x848>
    dc4c:	01000804 	movi	r4,32
    dc50:	2089c83a 	sub	r4,r4,r2
    dc54:	1914983a 	sll	r10,r3,r4
    dc58:	8890d83a 	srl	r8,r17,r2
    dc5c:	8908983a 	sll	r4,r17,r4
    dc60:	1884d83a 	srl	r2,r3,r2
    dc64:	5222b03a 	or	r17,r10,r8
    dc68:	2006c03a 	cmpne	r3,r4,zero
    dc6c:	88e2b03a 	or	r17,r17,r3
    dc70:	3463c83a 	sub	r17,r6,r17
    dc74:	2885c83a 	sub	r2,r5,r2
    dc78:	344d803a 	cmpltu	r6,r6,r17
    dc7c:	1187c83a 	sub	r3,r2,r6
    dc80:	4821883a 	mov	r16,r9
    dc84:	3825883a 	mov	r18,r7
    dc88:	003f2306 	br	d918 <__alt_data_end+0xf800d918>
    dc8c:	24d0b03a 	or	r8,r4,r19
    dc90:	40001b1e 	bne	r8,zero,dd00 <__subdf3+0x560>
    dc94:	0005883a 	mov	r2,zero
    dc98:	0009883a 	mov	r4,zero
    dc9c:	0021883a 	mov	r16,zero
    dca0:	003f4906 	br	d9c8 <__alt_data_end+0xf800d9c8>
    dca4:	010007c4 	movi	r4,31
    dca8:	20803a16 	blt	r4,r2,dd94 <__subdf3+0x5f4>
    dcac:	01000804 	movi	r4,32
    dcb0:	2089c83a 	sub	r4,r4,r2
    dcb4:	2912983a 	sll	r9,r5,r4
    dcb8:	3090d83a 	srl	r8,r6,r2
    dcbc:	3108983a 	sll	r4,r6,r4
    dcc0:	2884d83a 	srl	r2,r5,r2
    dcc4:	4a12b03a 	or	r9,r9,r8
    dcc8:	2008c03a 	cmpne	r4,r4,zero
    dccc:	4912b03a 	or	r9,r9,r4
    dcd0:	003f4e06 	br	da0c <__alt_data_end+0xf800da0c>
    dcd4:	1c48b03a 	or	r4,r3,r17
    dcd8:	20003c26 	beq	r4,zero,ddcc <__subdf3+0x62c>
    dcdc:	0084303a 	nor	r2,zero,r2
    dce0:	1000381e 	bne	r2,zero,ddc4 <__subdf3+0x624>
    dce4:	3463c83a 	sub	r17,r6,r17
    dce8:	28c5c83a 	sub	r2,r5,r3
    dcec:	344d803a 	cmpltu	r6,r6,r17
    dcf0:	1187c83a 	sub	r3,r2,r6
    dcf4:	4821883a 	mov	r16,r9
    dcf8:	3825883a 	mov	r18,r7
    dcfc:	003f0606 	br	d918 <__alt_data_end+0xf800d918>
    dd00:	2023883a 	mov	r17,r4
    dd04:	003f0906 	br	d92c <__alt_data_end+0xf800d92c>
    dd08:	0101ffc4 	movi	r4,2047
    dd0c:	813f3a1e 	bne	r16,r4,d9f8 <__alt_data_end+0xf800d9f8>
    dd10:	003ec406 	br	d824 <__alt_data_end+0xf800d824>
    dd14:	0005883a 	mov	r2,zero
    dd18:	003fb106 	br	dbe0 <__alt_data_end+0xf800dbe0>
    dd1c:	0005883a 	mov	r2,zero
    dd20:	003fbc06 	br	dc14 <__alt_data_end+0xf800dc14>
    dd24:	1c44b03a 	or	r2,r3,r17
    dd28:	80008e1e 	bne	r16,zero,df64 <__subdf3+0x7c4>
    dd2c:	1000c826 	beq	r2,zero,e050 <__subdf3+0x8b0>
    dd30:	2984b03a 	or	r2,r5,r6
    dd34:	103ebb26 	beq	r2,zero,d824 <__alt_data_end+0xf800d824>
    dd38:	8989883a 	add	r4,r17,r6
    dd3c:	1945883a 	add	r2,r3,r5
    dd40:	2447803a 	cmpltu	r3,r4,r17
    dd44:	1887883a 	add	r3,r3,r2
    dd48:	1880202c 	andhi	r2,r3,128
    dd4c:	2023883a 	mov	r17,r4
    dd50:	103f1626 	beq	r2,zero,d9ac <__alt_data_end+0xf800d9ac>
    dd54:	00bfe034 	movhi	r2,65408
    dd58:	10bfffc4 	addi	r2,r2,-1
    dd5c:	5021883a 	mov	r16,r10
    dd60:	1886703a 	and	r3,r3,r2
    dd64:	003eaf06 	br	d824 <__alt_data_end+0xf800d824>
    dd68:	3825883a 	mov	r18,r7
    dd6c:	003f0f06 	br	d9ac <__alt_data_end+0xf800d9ac>
    dd70:	1c44b03a 	or	r2,r3,r17
    dd74:	8000251e 	bne	r16,zero,de0c <__subdf3+0x66c>
    dd78:	1000661e 	bne	r2,zero,df14 <__subdf3+0x774>
    dd7c:	2990b03a 	or	r8,r5,r6
    dd80:	40009626 	beq	r8,zero,dfdc <__subdf3+0x83c>
    dd84:	2807883a 	mov	r3,r5
    dd88:	3023883a 	mov	r17,r6
    dd8c:	3825883a 	mov	r18,r7
    dd90:	003ea406 	br	d824 <__alt_data_end+0xf800d824>
    dd94:	127ff804 	addi	r9,r2,-32
    dd98:	01000804 	movi	r4,32
    dd9c:	2a52d83a 	srl	r9,r5,r9
    dda0:	11008c26 	beq	r2,r4,dfd4 <__subdf3+0x834>
    dda4:	01001004 	movi	r4,64
    dda8:	2085c83a 	sub	r2,r4,r2
    ddac:	2884983a 	sll	r2,r5,r2
    ddb0:	118cb03a 	or	r6,r2,r6
    ddb4:	300cc03a 	cmpne	r6,r6,zero
    ddb8:	4992b03a 	or	r9,r9,r6
    ddbc:	0005883a 	mov	r2,zero
    ddc0:	003f1206 	br	da0c <__alt_data_end+0xf800da0c>
    ddc4:	0101ffc4 	movi	r4,2047
    ddc8:	493f9c1e 	bne	r9,r4,dc3c <__alt_data_end+0xf800dc3c>
    ddcc:	2807883a 	mov	r3,r5
    ddd0:	3023883a 	mov	r17,r6
    ddd4:	4821883a 	mov	r16,r9
    ddd8:	3825883a 	mov	r18,r7
    dddc:	003e9106 	br	d824 <__alt_data_end+0xf800d824>
    dde0:	80001f1e 	bne	r16,zero,de60 <__subdf3+0x6c0>
    dde4:	1c48b03a 	or	r4,r3,r17
    dde8:	20005a26 	beq	r4,zero,df54 <__subdf3+0x7b4>
    ddec:	0084303a 	nor	r2,zero,r2
    ddf0:	1000561e 	bne	r2,zero,df4c <__subdf3+0x7ac>
    ddf4:	89a3883a 	add	r17,r17,r6
    ddf8:	1945883a 	add	r2,r3,r5
    ddfc:	898d803a 	cmpltu	r6,r17,r6
    de00:	3087883a 	add	r3,r6,r2
    de04:	4821883a 	mov	r16,r9
    de08:	003f0506 	br	da20 <__alt_data_end+0xf800da20>
    de0c:	10002b1e 	bne	r2,zero,debc <__subdf3+0x71c>
    de10:	2984b03a 	or	r2,r5,r6
    de14:	10008026 	beq	r2,zero,e018 <__subdf3+0x878>
    de18:	2807883a 	mov	r3,r5
    de1c:	3023883a 	mov	r17,r6
    de20:	3825883a 	mov	r18,r7
    de24:	0401ffc4 	movi	r16,2047
    de28:	003e7e06 	br	d824 <__alt_data_end+0xf800d824>
    de2c:	3809883a 	mov	r4,r7
    de30:	0011883a 	mov	r8,zero
    de34:	0005883a 	mov	r2,zero
    de38:	003ee306 	br	d9c8 <__alt_data_end+0xf800d9c8>
    de3c:	1c62b03a 	or	r17,r3,r17
    de40:	8822c03a 	cmpne	r17,r17,zero
    de44:	0005883a 	mov	r2,zero
    de48:	003f8906 	br	dc70 <__alt_data_end+0xf800dc70>
    de4c:	3809883a 	mov	r4,r7
    de50:	4821883a 	mov	r16,r9
    de54:	0011883a 	mov	r8,zero
    de58:	0005883a 	mov	r2,zero
    de5c:	003eda06 	br	d9c8 <__alt_data_end+0xf800d9c8>
    de60:	0101ffc4 	movi	r4,2047
    de64:	49003b26 	beq	r9,r4,df54 <__subdf3+0x7b4>
    de68:	0085c83a 	sub	r2,zero,r2
    de6c:	18c02034 	orhi	r3,r3,128
    de70:	01000e04 	movi	r4,56
    de74:	20806e16 	blt	r4,r2,e030 <__subdf3+0x890>
    de78:	010007c4 	movi	r4,31
    de7c:	20807716 	blt	r4,r2,e05c <__subdf3+0x8bc>
    de80:	01000804 	movi	r4,32
    de84:	2089c83a 	sub	r4,r4,r2
    de88:	1914983a 	sll	r10,r3,r4
    de8c:	8890d83a 	srl	r8,r17,r2
    de90:	8908983a 	sll	r4,r17,r4
    de94:	1884d83a 	srl	r2,r3,r2
    de98:	5222b03a 	or	r17,r10,r8
    de9c:	2006c03a 	cmpne	r3,r4,zero
    dea0:	88e2b03a 	or	r17,r17,r3
    dea4:	89a3883a 	add	r17,r17,r6
    dea8:	1145883a 	add	r2,r2,r5
    deac:	898d803a 	cmpltu	r6,r17,r6
    deb0:	3087883a 	add	r3,r6,r2
    deb4:	4821883a 	mov	r16,r9
    deb8:	003ed906 	br	da20 <__alt_data_end+0xf800da20>
    debc:	2984b03a 	or	r2,r5,r6
    dec0:	10004226 	beq	r2,zero,dfcc <__subdf3+0x82c>
    dec4:	1808d0fa 	srli	r4,r3,3
    dec8:	8822d0fa 	srli	r17,r17,3
    decc:	1806977a 	slli	r3,r3,29
    ded0:	2080022c 	andhi	r2,r4,8
    ded4:	1c62b03a 	or	r17,r3,r17
    ded8:	10000826 	beq	r2,zero,defc <__subdf3+0x75c>
    dedc:	2812d0fa 	srli	r9,r5,3
    dee0:	4880022c 	andhi	r2,r9,8
    dee4:	1000051e 	bne	r2,zero,defc <__subdf3+0x75c>
    dee8:	300cd0fa 	srli	r6,r6,3
    deec:	2804977a 	slli	r2,r5,29
    def0:	4809883a 	mov	r4,r9
    def4:	3825883a 	mov	r18,r7
    def8:	11a2b03a 	or	r17,r2,r6
    defc:	8806d77a 	srli	r3,r17,29
    df00:	200890fa 	slli	r4,r4,3
    df04:	882290fa 	slli	r17,r17,3
    df08:	0401ffc4 	movi	r16,2047
    df0c:	1906b03a 	or	r3,r3,r4
    df10:	003e4406 	br	d824 <__alt_data_end+0xf800d824>
    df14:	2984b03a 	or	r2,r5,r6
    df18:	103e4226 	beq	r2,zero,d824 <__alt_data_end+0xf800d824>
    df1c:	8989c83a 	sub	r4,r17,r6
    df20:	8911803a 	cmpltu	r8,r17,r4
    df24:	1945c83a 	sub	r2,r3,r5
    df28:	1205c83a 	sub	r2,r2,r8
    df2c:	1200202c 	andhi	r8,r2,128
    df30:	403e9a26 	beq	r8,zero,d99c <__alt_data_end+0xf800d99c>
    df34:	3463c83a 	sub	r17,r6,r17
    df38:	28c5c83a 	sub	r2,r5,r3
    df3c:	344d803a 	cmpltu	r6,r6,r17
    df40:	1187c83a 	sub	r3,r2,r6
    df44:	3825883a 	mov	r18,r7
    df48:	003e3606 	br	d824 <__alt_data_end+0xf800d824>
    df4c:	0101ffc4 	movi	r4,2047
    df50:	493fc71e 	bne	r9,r4,de70 <__alt_data_end+0xf800de70>
    df54:	2807883a 	mov	r3,r5
    df58:	3023883a 	mov	r17,r6
    df5c:	4821883a 	mov	r16,r9
    df60:	003e3006 	br	d824 <__alt_data_end+0xf800d824>
    df64:	10003626 	beq	r2,zero,e040 <__subdf3+0x8a0>
    df68:	2984b03a 	or	r2,r5,r6
    df6c:	10001726 	beq	r2,zero,dfcc <__subdf3+0x82c>
    df70:	1808d0fa 	srli	r4,r3,3
    df74:	8822d0fa 	srli	r17,r17,3
    df78:	1806977a 	slli	r3,r3,29
    df7c:	2080022c 	andhi	r2,r4,8
    df80:	1c62b03a 	or	r17,r3,r17
    df84:	10000726 	beq	r2,zero,dfa4 <__subdf3+0x804>
    df88:	2812d0fa 	srli	r9,r5,3
    df8c:	4880022c 	andhi	r2,r9,8
    df90:	1000041e 	bne	r2,zero,dfa4 <__subdf3+0x804>
    df94:	300cd0fa 	srli	r6,r6,3
    df98:	2804977a 	slli	r2,r5,29
    df9c:	4809883a 	mov	r4,r9
    dfa0:	11a2b03a 	or	r17,r2,r6
    dfa4:	8806d77a 	srli	r3,r17,29
    dfa8:	200890fa 	slli	r4,r4,3
    dfac:	882290fa 	slli	r17,r17,3
    dfb0:	3825883a 	mov	r18,r7
    dfb4:	1906b03a 	or	r3,r3,r4
    dfb8:	0401ffc4 	movi	r16,2047
    dfbc:	003e1906 	br	d824 <__alt_data_end+0xf800d824>
    dfc0:	000b883a 	mov	r5,zero
    dfc4:	0005883a 	mov	r2,zero
    dfc8:	003e2e06 	br	d884 <__alt_data_end+0xf800d884>
    dfcc:	0401ffc4 	movi	r16,2047
    dfd0:	003e1406 	br	d824 <__alt_data_end+0xf800d824>
    dfd4:	0005883a 	mov	r2,zero
    dfd8:	003f7506 	br	ddb0 <__alt_data_end+0xf800ddb0>
    dfdc:	0005883a 	mov	r2,zero
    dfe0:	0009883a 	mov	r4,zero
    dfe4:	003e7806 	br	d9c8 <__alt_data_end+0xf800d9c8>
    dfe8:	123ff804 	addi	r8,r2,-32
    dfec:	01000804 	movi	r4,32
    dff0:	1a10d83a 	srl	r8,r3,r8
    dff4:	11002526 	beq	r2,r4,e08c <__subdf3+0x8ec>
    dff8:	01001004 	movi	r4,64
    dffc:	2085c83a 	sub	r2,r4,r2
    e000:	1884983a 	sll	r2,r3,r2
    e004:	1444b03a 	or	r2,r2,r17
    e008:	1004c03a 	cmpne	r2,r2,zero
    e00c:	40a2b03a 	or	r17,r8,r2
    e010:	0005883a 	mov	r2,zero
    e014:	003f1606 	br	dc70 <__alt_data_end+0xf800dc70>
    e018:	02000434 	movhi	r8,16
    e01c:	0009883a 	mov	r4,zero
    e020:	423fffc4 	addi	r8,r8,-1
    e024:	00bfffc4 	movi	r2,-1
    e028:	0401ffc4 	movi	r16,2047
    e02c:	003e6606 	br	d9c8 <__alt_data_end+0xf800d9c8>
    e030:	1c62b03a 	or	r17,r3,r17
    e034:	8822c03a 	cmpne	r17,r17,zero
    e038:	0005883a 	mov	r2,zero
    e03c:	003f9906 	br	dea4 <__alt_data_end+0xf800dea4>
    e040:	2807883a 	mov	r3,r5
    e044:	3023883a 	mov	r17,r6
    e048:	0401ffc4 	movi	r16,2047
    e04c:	003df506 	br	d824 <__alt_data_end+0xf800d824>
    e050:	2807883a 	mov	r3,r5
    e054:	3023883a 	mov	r17,r6
    e058:	003df206 	br	d824 <__alt_data_end+0xf800d824>
    e05c:	123ff804 	addi	r8,r2,-32
    e060:	01000804 	movi	r4,32
    e064:	1a10d83a 	srl	r8,r3,r8
    e068:	11000a26 	beq	r2,r4,e094 <__subdf3+0x8f4>
    e06c:	01001004 	movi	r4,64
    e070:	2085c83a 	sub	r2,r4,r2
    e074:	1884983a 	sll	r2,r3,r2
    e078:	1444b03a 	or	r2,r2,r17
    e07c:	1004c03a 	cmpne	r2,r2,zero
    e080:	40a2b03a 	or	r17,r8,r2
    e084:	0005883a 	mov	r2,zero
    e088:	003f8606 	br	dea4 <__alt_data_end+0xf800dea4>
    e08c:	0005883a 	mov	r2,zero
    e090:	003fdc06 	br	e004 <__alt_data_end+0xf800e004>
    e094:	0005883a 	mov	r2,zero
    e098:	003ff706 	br	e078 <__alt_data_end+0xf800e078>

0000e09c <__fixdfsi>:
    e09c:	280cd53a 	srli	r6,r5,20
    e0a0:	00c00434 	movhi	r3,16
    e0a4:	18ffffc4 	addi	r3,r3,-1
    e0a8:	3181ffcc 	andi	r6,r6,2047
    e0ac:	01c0ff84 	movi	r7,1022
    e0b0:	28c6703a 	and	r3,r5,r3
    e0b4:	280ad7fa 	srli	r5,r5,31
    e0b8:	3980120e 	bge	r7,r6,e104 <__fixdfsi+0x68>
    e0bc:	00810744 	movi	r2,1053
    e0c0:	11800c16 	blt	r2,r6,e0f4 <__fixdfsi+0x58>
    e0c4:	00810cc4 	movi	r2,1075
    e0c8:	1185c83a 	sub	r2,r2,r6
    e0cc:	01c007c4 	movi	r7,31
    e0d0:	18c00434 	orhi	r3,r3,16
    e0d4:	38800d16 	blt	r7,r2,e10c <__fixdfsi+0x70>
    e0d8:	31befb44 	addi	r6,r6,-1043
    e0dc:	2084d83a 	srl	r2,r4,r2
    e0e0:	1986983a 	sll	r3,r3,r6
    e0e4:	1884b03a 	or	r2,r3,r2
    e0e8:	28000726 	beq	r5,zero,e108 <__fixdfsi+0x6c>
    e0ec:	0085c83a 	sub	r2,zero,r2
    e0f0:	f800283a 	ret
    e0f4:	00a00034 	movhi	r2,32768
    e0f8:	10bfffc4 	addi	r2,r2,-1
    e0fc:	2885883a 	add	r2,r5,r2
    e100:	f800283a 	ret
    e104:	0005883a 	mov	r2,zero
    e108:	f800283a 	ret
    e10c:	008104c4 	movi	r2,1043
    e110:	1185c83a 	sub	r2,r2,r6
    e114:	1884d83a 	srl	r2,r3,r2
    e118:	003ff306 	br	e0e8 <__alt_data_end+0xf800e0e8>

0000e11c <__floatsidf>:
    e11c:	defffd04 	addi	sp,sp,-12
    e120:	dfc00215 	stw	ra,8(sp)
    e124:	dc400115 	stw	r17,4(sp)
    e128:	dc000015 	stw	r16,0(sp)
    e12c:	20002b26 	beq	r4,zero,e1dc <__floatsidf+0xc0>
    e130:	2023883a 	mov	r17,r4
    e134:	2020d7fa 	srli	r16,r4,31
    e138:	20002d16 	blt	r4,zero,e1f0 <__floatsidf+0xd4>
    e13c:	8809883a 	mov	r4,r17
    e140:	000e2a00 	call	e2a0 <__clzsi2>
    e144:	01410784 	movi	r5,1054
    e148:	288bc83a 	sub	r5,r5,r2
    e14c:	01010cc4 	movi	r4,1075
    e150:	2149c83a 	sub	r4,r4,r5
    e154:	00c007c4 	movi	r3,31
    e158:	1900160e 	bge	r3,r4,e1b4 <__floatsidf+0x98>
    e15c:	00c104c4 	movi	r3,1043
    e160:	1947c83a 	sub	r3,r3,r5
    e164:	88c6983a 	sll	r3,r17,r3
    e168:	00800434 	movhi	r2,16
    e16c:	10bfffc4 	addi	r2,r2,-1
    e170:	1886703a 	and	r3,r3,r2
    e174:	2941ffcc 	andi	r5,r5,2047
    e178:	800d883a 	mov	r6,r16
    e17c:	0005883a 	mov	r2,zero
    e180:	280a953a 	slli	r5,r5,20
    e184:	31803fcc 	andi	r6,r6,255
    e188:	01000434 	movhi	r4,16
    e18c:	300c97fa 	slli	r6,r6,31
    e190:	213fffc4 	addi	r4,r4,-1
    e194:	1906703a 	and	r3,r3,r4
    e198:	1946b03a 	or	r3,r3,r5
    e19c:	1986b03a 	or	r3,r3,r6
    e1a0:	dfc00217 	ldw	ra,8(sp)
    e1a4:	dc400117 	ldw	r17,4(sp)
    e1a8:	dc000017 	ldw	r16,0(sp)
    e1ac:	dec00304 	addi	sp,sp,12
    e1b0:	f800283a 	ret
    e1b4:	00c002c4 	movi	r3,11
    e1b8:	1887c83a 	sub	r3,r3,r2
    e1bc:	88c6d83a 	srl	r3,r17,r3
    e1c0:	8904983a 	sll	r2,r17,r4
    e1c4:	01000434 	movhi	r4,16
    e1c8:	213fffc4 	addi	r4,r4,-1
    e1cc:	2941ffcc 	andi	r5,r5,2047
    e1d0:	1906703a 	and	r3,r3,r4
    e1d4:	800d883a 	mov	r6,r16
    e1d8:	003fe906 	br	e180 <__alt_data_end+0xf800e180>
    e1dc:	000d883a 	mov	r6,zero
    e1e0:	000b883a 	mov	r5,zero
    e1e4:	0007883a 	mov	r3,zero
    e1e8:	0005883a 	mov	r2,zero
    e1ec:	003fe406 	br	e180 <__alt_data_end+0xf800e180>
    e1f0:	0123c83a 	sub	r17,zero,r4
    e1f4:	003fd106 	br	e13c <__alt_data_end+0xf800e13c>

0000e1f8 <__floatunsidf>:
    e1f8:	defffe04 	addi	sp,sp,-8
    e1fc:	dc000015 	stw	r16,0(sp)
    e200:	dfc00115 	stw	ra,4(sp)
    e204:	2021883a 	mov	r16,r4
    e208:	20002226 	beq	r4,zero,e294 <__floatunsidf+0x9c>
    e20c:	000e2a00 	call	e2a0 <__clzsi2>
    e210:	01010784 	movi	r4,1054
    e214:	2089c83a 	sub	r4,r4,r2
    e218:	01810cc4 	movi	r6,1075
    e21c:	310dc83a 	sub	r6,r6,r4
    e220:	00c007c4 	movi	r3,31
    e224:	1980120e 	bge	r3,r6,e270 <__floatunsidf+0x78>
    e228:	00c104c4 	movi	r3,1043
    e22c:	1907c83a 	sub	r3,r3,r4
    e230:	80ca983a 	sll	r5,r16,r3
    e234:	00800434 	movhi	r2,16
    e238:	10bfffc4 	addi	r2,r2,-1
    e23c:	2101ffcc 	andi	r4,r4,2047
    e240:	0021883a 	mov	r16,zero
    e244:	288a703a 	and	r5,r5,r2
    e248:	2008953a 	slli	r4,r4,20
    e24c:	00c00434 	movhi	r3,16
    e250:	18ffffc4 	addi	r3,r3,-1
    e254:	28c6703a 	and	r3,r5,r3
    e258:	8005883a 	mov	r2,r16
    e25c:	1906b03a 	or	r3,r3,r4
    e260:	dfc00117 	ldw	ra,4(sp)
    e264:	dc000017 	ldw	r16,0(sp)
    e268:	dec00204 	addi	sp,sp,8
    e26c:	f800283a 	ret
    e270:	00c002c4 	movi	r3,11
    e274:	188bc83a 	sub	r5,r3,r2
    e278:	814ad83a 	srl	r5,r16,r5
    e27c:	00c00434 	movhi	r3,16
    e280:	18ffffc4 	addi	r3,r3,-1
    e284:	81a0983a 	sll	r16,r16,r6
    e288:	2101ffcc 	andi	r4,r4,2047
    e28c:	28ca703a 	and	r5,r5,r3
    e290:	003fed06 	br	e248 <__alt_data_end+0xf800e248>
    e294:	0009883a 	mov	r4,zero
    e298:	000b883a 	mov	r5,zero
    e29c:	003fea06 	br	e248 <__alt_data_end+0xf800e248>

0000e2a0 <__clzsi2>:
    e2a0:	00bfffd4 	movui	r2,65535
    e2a4:	11000536 	bltu	r2,r4,e2bc <__clzsi2+0x1c>
    e2a8:	00803fc4 	movi	r2,255
    e2ac:	11000f36 	bltu	r2,r4,e2ec <__clzsi2+0x4c>
    e2b0:	00800804 	movi	r2,32
    e2b4:	0007883a 	mov	r3,zero
    e2b8:	00000506 	br	e2d0 <__clzsi2+0x30>
    e2bc:	00804034 	movhi	r2,256
    e2c0:	10bfffc4 	addi	r2,r2,-1
    e2c4:	11000c2e 	bgeu	r2,r4,e2f8 <__clzsi2+0x58>
    e2c8:	00800204 	movi	r2,8
    e2cc:	00c00604 	movi	r3,24
    e2d0:	20c8d83a 	srl	r4,r4,r3
    e2d4:	00c00074 	movhi	r3,1
    e2d8:	18c86304 	addi	r3,r3,8588
    e2dc:	1909883a 	add	r4,r3,r4
    e2e0:	20c00003 	ldbu	r3,0(r4)
    e2e4:	10c5c83a 	sub	r2,r2,r3
    e2e8:	f800283a 	ret
    e2ec:	00800604 	movi	r2,24
    e2f0:	00c00204 	movi	r3,8
    e2f4:	003ff606 	br	e2d0 <__alt_data_end+0xf800e2d0>
    e2f8:	00800404 	movi	r2,16
    e2fc:	1007883a 	mov	r3,r2
    e300:	003ff306 	br	e2d0 <__alt_data_end+0xf800e2d0>

0000e304 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e304:	defffe04 	addi	sp,sp,-8
    e308:	dfc00115 	stw	ra,4(sp)
    e30c:	df000015 	stw	fp,0(sp)
    e310:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e314:	d0a00b17 	ldw	r2,-32724(gp)
    e318:	10000326 	beq	r2,zero,e328 <alt_get_errno+0x24>
    e31c:	d0a00b17 	ldw	r2,-32724(gp)
    e320:	103ee83a 	callr	r2
    e324:	00000106 	br	e32c <alt_get_errno+0x28>
    e328:	d0a78504 	addi	r2,gp,-25068
}
    e32c:	e037883a 	mov	sp,fp
    e330:	dfc00117 	ldw	ra,4(sp)
    e334:	df000017 	ldw	fp,0(sp)
    e338:	dec00204 	addi	sp,sp,8
    e33c:	f800283a 	ret

0000e340 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    e340:	defffb04 	addi	sp,sp,-20
    e344:	dfc00415 	stw	ra,16(sp)
    e348:	df000315 	stw	fp,12(sp)
    e34c:	df000304 	addi	fp,sp,12
    e350:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    e354:	e0bfff17 	ldw	r2,-4(fp)
    e358:	10000616 	blt	r2,zero,e374 <close+0x34>
    e35c:	e0bfff17 	ldw	r2,-4(fp)
    e360:	10c00324 	muli	r3,r2,12
    e364:	00800074 	movhi	r2,1
    e368:	108bf104 	addi	r2,r2,12228
    e36c:	1885883a 	add	r2,r3,r2
    e370:	00000106 	br	e378 <close+0x38>
    e374:	0005883a 	mov	r2,zero
    e378:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    e37c:	e0bffd17 	ldw	r2,-12(fp)
    e380:	10001926 	beq	r2,zero,e3e8 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    e384:	e0bffd17 	ldw	r2,-12(fp)
    e388:	10800017 	ldw	r2,0(r2)
    e38c:	10800417 	ldw	r2,16(r2)
    e390:	10000626 	beq	r2,zero,e3ac <close+0x6c>
    e394:	e0bffd17 	ldw	r2,-12(fp)
    e398:	10800017 	ldw	r2,0(r2)
    e39c:	10800417 	ldw	r2,16(r2)
    e3a0:	e13ffd17 	ldw	r4,-12(fp)
    e3a4:	103ee83a 	callr	r2
    e3a8:	00000106 	br	e3b0 <close+0x70>
    e3ac:	0005883a 	mov	r2,zero
    e3b0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    e3b4:	e13fff17 	ldw	r4,-4(fp)
    e3b8:	000ea000 	call	ea00 <alt_release_fd>
    if (rval < 0)
    e3bc:	e0bffe17 	ldw	r2,-8(fp)
    e3c0:	1000070e 	bge	r2,zero,e3e0 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    e3c4:	000e3040 	call	e304 <alt_get_errno>
    e3c8:	1007883a 	mov	r3,r2
    e3cc:	e0bffe17 	ldw	r2,-8(fp)
    e3d0:	0085c83a 	sub	r2,zero,r2
    e3d4:	18800015 	stw	r2,0(r3)
      return -1;
    e3d8:	00bfffc4 	movi	r2,-1
    e3dc:	00000706 	br	e3fc <close+0xbc>
    }
    return 0;
    e3e0:	0005883a 	mov	r2,zero
    e3e4:	00000506 	br	e3fc <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e3e8:	000e3040 	call	e304 <alt_get_errno>
    e3ec:	1007883a 	mov	r3,r2
    e3f0:	00801444 	movi	r2,81
    e3f4:	18800015 	stw	r2,0(r3)
    return -1;
    e3f8:	00bfffc4 	movi	r2,-1
  }
}
    e3fc:	e037883a 	mov	sp,fp
    e400:	dfc00117 	ldw	ra,4(sp)
    e404:	df000017 	ldw	fp,0(sp)
    e408:	dec00204 	addi	sp,sp,8
    e40c:	f800283a 	ret

0000e410 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    e410:	defffc04 	addi	sp,sp,-16
    e414:	df000315 	stw	fp,12(sp)
    e418:	df000304 	addi	fp,sp,12
    e41c:	e13ffd15 	stw	r4,-12(fp)
    e420:	e17ffe15 	stw	r5,-8(fp)
    e424:	e1bfff15 	stw	r6,-4(fp)
  return len;
    e428:	e0bfff17 	ldw	r2,-4(fp)
}
    e42c:	e037883a 	mov	sp,fp
    e430:	df000017 	ldw	fp,0(sp)
    e434:	dec00104 	addi	sp,sp,4
    e438:	f800283a 	ret

0000e43c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e43c:	defffe04 	addi	sp,sp,-8
    e440:	dfc00115 	stw	ra,4(sp)
    e444:	df000015 	stw	fp,0(sp)
    e448:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e44c:	d0a00b17 	ldw	r2,-32724(gp)
    e450:	10000326 	beq	r2,zero,e460 <alt_get_errno+0x24>
    e454:	d0a00b17 	ldw	r2,-32724(gp)
    e458:	103ee83a 	callr	r2
    e45c:	00000106 	br	e464 <alt_get_errno+0x28>
    e460:	d0a78504 	addi	r2,gp,-25068
}
    e464:	e037883a 	mov	sp,fp
    e468:	dfc00117 	ldw	ra,4(sp)
    e46c:	df000017 	ldw	fp,0(sp)
    e470:	dec00204 	addi	sp,sp,8
    e474:	f800283a 	ret

0000e478 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    e478:	defffb04 	addi	sp,sp,-20
    e47c:	dfc00415 	stw	ra,16(sp)
    e480:	df000315 	stw	fp,12(sp)
    e484:	df000304 	addi	fp,sp,12
    e488:	e13ffe15 	stw	r4,-8(fp)
    e48c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e490:	e0bffe17 	ldw	r2,-8(fp)
    e494:	10000616 	blt	r2,zero,e4b0 <fstat+0x38>
    e498:	e0bffe17 	ldw	r2,-8(fp)
    e49c:	10c00324 	muli	r3,r2,12
    e4a0:	00800074 	movhi	r2,1
    e4a4:	108bf104 	addi	r2,r2,12228
    e4a8:	1885883a 	add	r2,r3,r2
    e4ac:	00000106 	br	e4b4 <fstat+0x3c>
    e4b0:	0005883a 	mov	r2,zero
    e4b4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    e4b8:	e0bffd17 	ldw	r2,-12(fp)
    e4bc:	10001026 	beq	r2,zero,e500 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    e4c0:	e0bffd17 	ldw	r2,-12(fp)
    e4c4:	10800017 	ldw	r2,0(r2)
    e4c8:	10800817 	ldw	r2,32(r2)
    e4cc:	10000726 	beq	r2,zero,e4ec <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    e4d0:	e0bffd17 	ldw	r2,-12(fp)
    e4d4:	10800017 	ldw	r2,0(r2)
    e4d8:	10800817 	ldw	r2,32(r2)
    e4dc:	e17fff17 	ldw	r5,-4(fp)
    e4e0:	e13ffd17 	ldw	r4,-12(fp)
    e4e4:	103ee83a 	callr	r2
    e4e8:	00000a06 	br	e514 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    e4ec:	e0bfff17 	ldw	r2,-4(fp)
    e4f0:	00c80004 	movi	r3,8192
    e4f4:	10c00115 	stw	r3,4(r2)
      return 0;
    e4f8:	0005883a 	mov	r2,zero
    e4fc:	00000506 	br	e514 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e500:	000e43c0 	call	e43c <alt_get_errno>
    e504:	1007883a 	mov	r3,r2
    e508:	00801444 	movi	r2,81
    e50c:	18800015 	stw	r2,0(r3)
    return -1;
    e510:	00bfffc4 	movi	r2,-1
  }
}
    e514:	e037883a 	mov	sp,fp
    e518:	dfc00117 	ldw	ra,4(sp)
    e51c:	df000017 	ldw	fp,0(sp)
    e520:	dec00204 	addi	sp,sp,8
    e524:	f800283a 	ret

0000e528 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e528:	defffe04 	addi	sp,sp,-8
    e52c:	dfc00115 	stw	ra,4(sp)
    e530:	df000015 	stw	fp,0(sp)
    e534:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e538:	d0a00b17 	ldw	r2,-32724(gp)
    e53c:	10000326 	beq	r2,zero,e54c <alt_get_errno+0x24>
    e540:	d0a00b17 	ldw	r2,-32724(gp)
    e544:	103ee83a 	callr	r2
    e548:	00000106 	br	e550 <alt_get_errno+0x28>
    e54c:	d0a78504 	addi	r2,gp,-25068
}
    e550:	e037883a 	mov	sp,fp
    e554:	dfc00117 	ldw	ra,4(sp)
    e558:	df000017 	ldw	fp,0(sp)
    e55c:	dec00204 	addi	sp,sp,8
    e560:	f800283a 	ret

0000e564 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    e564:	deffed04 	addi	sp,sp,-76
    e568:	dfc01215 	stw	ra,72(sp)
    e56c:	df001115 	stw	fp,68(sp)
    e570:	df001104 	addi	fp,sp,68
    e574:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e578:	e0bfff17 	ldw	r2,-4(fp)
    e57c:	10000616 	blt	r2,zero,e598 <isatty+0x34>
    e580:	e0bfff17 	ldw	r2,-4(fp)
    e584:	10c00324 	muli	r3,r2,12
    e588:	00800074 	movhi	r2,1
    e58c:	108bf104 	addi	r2,r2,12228
    e590:	1885883a 	add	r2,r3,r2
    e594:	00000106 	br	e59c <isatty+0x38>
    e598:	0005883a 	mov	r2,zero
    e59c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    e5a0:	e0bfef17 	ldw	r2,-68(fp)
    e5a4:	10000e26 	beq	r2,zero,e5e0 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    e5a8:	e0bfef17 	ldw	r2,-68(fp)
    e5ac:	10800017 	ldw	r2,0(r2)
    e5b0:	10800817 	ldw	r2,32(r2)
    e5b4:	1000021e 	bne	r2,zero,e5c0 <isatty+0x5c>
    {
      return 1;
    e5b8:	00800044 	movi	r2,1
    e5bc:	00000d06 	br	e5f4 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    e5c0:	e0bff004 	addi	r2,fp,-64
    e5c4:	100b883a 	mov	r5,r2
    e5c8:	e13fff17 	ldw	r4,-4(fp)
    e5cc:	000e4780 	call	e478 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    e5d0:	e0bff117 	ldw	r2,-60(fp)
    e5d4:	10880020 	cmpeqi	r2,r2,8192
    e5d8:	10803fcc 	andi	r2,r2,255
    e5dc:	00000506 	br	e5f4 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e5e0:	000e5280 	call	e528 <alt_get_errno>
    e5e4:	1007883a 	mov	r3,r2
    e5e8:	00801444 	movi	r2,81
    e5ec:	18800015 	stw	r2,0(r3)
    return 0;
    e5f0:	0005883a 	mov	r2,zero
  }
}
    e5f4:	e037883a 	mov	sp,fp
    e5f8:	dfc00117 	ldw	ra,4(sp)
    e5fc:	df000017 	ldw	fp,0(sp)
    e600:	dec00204 	addi	sp,sp,8
    e604:	f800283a 	ret

0000e608 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    e608:	defffc04 	addi	sp,sp,-16
    e60c:	df000315 	stw	fp,12(sp)
    e610:	df000304 	addi	fp,sp,12
    e614:	e13ffd15 	stw	r4,-12(fp)
    e618:	e17ffe15 	stw	r5,-8(fp)
    e61c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    e620:	e0fffe17 	ldw	r3,-8(fp)
    e624:	e0bffd17 	ldw	r2,-12(fp)
    e628:	18800c26 	beq	r3,r2,e65c <alt_load_section+0x54>
  {
    while( to != end )
    e62c:	00000806 	br	e650 <alt_load_section+0x48>
    {
      *to++ = *from++;
    e630:	e0bffe17 	ldw	r2,-8(fp)
    e634:	10c00104 	addi	r3,r2,4
    e638:	e0fffe15 	stw	r3,-8(fp)
    e63c:	e0fffd17 	ldw	r3,-12(fp)
    e640:	19000104 	addi	r4,r3,4
    e644:	e13ffd15 	stw	r4,-12(fp)
    e648:	18c00017 	ldw	r3,0(r3)
    e64c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    e650:	e0fffe17 	ldw	r3,-8(fp)
    e654:	e0bfff17 	ldw	r2,-4(fp)
    e658:	18bff51e 	bne	r3,r2,e630 <__alt_data_end+0xf800e630>
    {
      *to++ = *from++;
    }
  }
}
    e65c:	0001883a 	nop
    e660:	e037883a 	mov	sp,fp
    e664:	df000017 	ldw	fp,0(sp)
    e668:	dec00104 	addi	sp,sp,4
    e66c:	f800283a 	ret

0000e670 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    e670:	defffe04 	addi	sp,sp,-8
    e674:	dfc00115 	stw	ra,4(sp)
    e678:	df000015 	stw	fp,0(sp)
    e67c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    e680:	01800074 	movhi	r6,1
    e684:	3190c304 	addi	r6,r6,17164
    e688:	01400074 	movhi	r5,1
    e68c:	29495504 	addi	r5,r5,9556
    e690:	01000074 	movhi	r4,1
    e694:	2110c304 	addi	r4,r4,17164
    e698:	000e6080 	call	e608 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    e69c:	01800034 	movhi	r6,0
    e6a0:	31807004 	addi	r6,r6,448
    e6a4:	01400034 	movhi	r5,0
    e6a8:	29400804 	addi	r5,r5,32
    e6ac:	01000034 	movhi	r4,0
    e6b0:	21000804 	addi	r4,r4,32
    e6b4:	000e6080 	call	e608 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    e6b8:	01800074 	movhi	r6,1
    e6bc:	31895504 	addi	r6,r6,9556
    e6c0:	01400074 	movhi	r5,1
    e6c4:	29469904 	addi	r5,r5,6756
    e6c8:	01000074 	movhi	r4,1
    e6cc:	21069904 	addi	r4,r4,6756
    e6d0:	000e6080 	call	e608 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    e6d4:	0010bb80 	call	10bb8 <alt_dcache_flush_all>
  alt_icache_flush_all();
    e6d8:	0010d780 	call	10d78 <alt_icache_flush_all>
}
    e6dc:	0001883a 	nop
    e6e0:	e037883a 	mov	sp,fp
    e6e4:	dfc00117 	ldw	ra,4(sp)
    e6e8:	df000017 	ldw	fp,0(sp)
    e6ec:	dec00204 	addi	sp,sp,8
    e6f0:	f800283a 	ret

0000e6f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e6f4:	defffe04 	addi	sp,sp,-8
    e6f8:	dfc00115 	stw	ra,4(sp)
    e6fc:	df000015 	stw	fp,0(sp)
    e700:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e704:	d0a00b17 	ldw	r2,-32724(gp)
    e708:	10000326 	beq	r2,zero,e718 <alt_get_errno+0x24>
    e70c:	d0a00b17 	ldw	r2,-32724(gp)
    e710:	103ee83a 	callr	r2
    e714:	00000106 	br	e71c <alt_get_errno+0x28>
    e718:	d0a78504 	addi	r2,gp,-25068
}
    e71c:	e037883a 	mov	sp,fp
    e720:	dfc00117 	ldw	ra,4(sp)
    e724:	df000017 	ldw	fp,0(sp)
    e728:	dec00204 	addi	sp,sp,8
    e72c:	f800283a 	ret

0000e730 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    e730:	defff904 	addi	sp,sp,-28
    e734:	dfc00615 	stw	ra,24(sp)
    e738:	df000515 	stw	fp,20(sp)
    e73c:	df000504 	addi	fp,sp,20
    e740:	e13ffd15 	stw	r4,-12(fp)
    e744:	e17ffe15 	stw	r5,-8(fp)
    e748:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    e74c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e750:	e0bffd17 	ldw	r2,-12(fp)
    e754:	10000616 	blt	r2,zero,e770 <lseek+0x40>
    e758:	e0bffd17 	ldw	r2,-12(fp)
    e75c:	10c00324 	muli	r3,r2,12
    e760:	00800074 	movhi	r2,1
    e764:	108bf104 	addi	r2,r2,12228
    e768:	1885883a 	add	r2,r3,r2
    e76c:	00000106 	br	e774 <lseek+0x44>
    e770:	0005883a 	mov	r2,zero
    e774:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    e778:	e0bffc17 	ldw	r2,-16(fp)
    e77c:	10001026 	beq	r2,zero,e7c0 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    e780:	e0bffc17 	ldw	r2,-16(fp)
    e784:	10800017 	ldw	r2,0(r2)
    e788:	10800717 	ldw	r2,28(r2)
    e78c:	10000926 	beq	r2,zero,e7b4 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    e790:	e0bffc17 	ldw	r2,-16(fp)
    e794:	10800017 	ldw	r2,0(r2)
    e798:	10800717 	ldw	r2,28(r2)
    e79c:	e1bfff17 	ldw	r6,-4(fp)
    e7a0:	e17ffe17 	ldw	r5,-8(fp)
    e7a4:	e13ffc17 	ldw	r4,-16(fp)
    e7a8:	103ee83a 	callr	r2
    e7ac:	e0bffb15 	stw	r2,-20(fp)
    e7b0:	00000506 	br	e7c8 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    e7b4:	00bfde84 	movi	r2,-134
    e7b8:	e0bffb15 	stw	r2,-20(fp)
    e7bc:	00000206 	br	e7c8 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    e7c0:	00bfebc4 	movi	r2,-81
    e7c4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    e7c8:	e0bffb17 	ldw	r2,-20(fp)
    e7cc:	1000070e 	bge	r2,zero,e7ec <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    e7d0:	000e6f40 	call	e6f4 <alt_get_errno>
    e7d4:	1007883a 	mov	r3,r2
    e7d8:	e0bffb17 	ldw	r2,-20(fp)
    e7dc:	0085c83a 	sub	r2,zero,r2
    e7e0:	18800015 	stw	r2,0(r3)
    rc = -1;
    e7e4:	00bfffc4 	movi	r2,-1
    e7e8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    e7ec:	e0bffb17 	ldw	r2,-20(fp)
}
    e7f0:	e037883a 	mov	sp,fp
    e7f4:	dfc00117 	ldw	ra,4(sp)
    e7f8:	df000017 	ldw	fp,0(sp)
    e7fc:	dec00204 	addi	sp,sp,8
    e800:	f800283a 	ret

0000e804 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    e804:	defffd04 	addi	sp,sp,-12
    e808:	dfc00215 	stw	ra,8(sp)
    e80c:	df000115 	stw	fp,4(sp)
    e810:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    e814:	0009883a 	mov	r4,zero
    e818:	000ee500 	call	ee50 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    e81c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    e820:	000ee880 	call	ee88 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    e824:	01800074 	movhi	r6,1
    e828:	3188a604 	addi	r6,r6,8856
    e82c:	01400074 	movhi	r5,1
    e830:	2948a604 	addi	r5,r5,8856
    e834:	01000074 	movhi	r4,1
    e838:	2108a604 	addi	r4,r4,8856
    e83c:	00111100 	call	11110 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    e840:	0010cb80 	call	10cb8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    e844:	01000074 	movhi	r4,1
    e848:	21034604 	addi	r4,r4,3352
    e84c:	00116d00 	call	116d0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    e850:	d0a78917 	ldw	r2,-25052(gp)
    e854:	d0e78a17 	ldw	r3,-25048(gp)
    e858:	d1278b17 	ldw	r4,-25044(gp)
    e85c:	200d883a 	mov	r6,r4
    e860:	180b883a 	mov	r5,r3
    e864:	1009883a 	mov	r4,r2
    e868:	00019180 	call	1918 <main>
    e86c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    e870:	01000044 	movi	r4,1
    e874:	000e3400 	call	e340 <close>
  exit (result);
    e878:	e13fff17 	ldw	r4,-4(fp)
    e87c:	00116e40 	call	116e4 <exit>

0000e880 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    e880:	defffe04 	addi	sp,sp,-8
    e884:	df000115 	stw	fp,4(sp)
    e888:	df000104 	addi	fp,sp,4
    e88c:	e13fff15 	stw	r4,-4(fp)
}
    e890:	0001883a 	nop
    e894:	e037883a 	mov	sp,fp
    e898:	df000017 	ldw	fp,0(sp)
    e89c:	dec00104 	addi	sp,sp,4
    e8a0:	f800283a 	ret

0000e8a4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    e8a4:	defffe04 	addi	sp,sp,-8
    e8a8:	df000115 	stw	fp,4(sp)
    e8ac:	df000104 	addi	fp,sp,4
    e8b0:	e13fff15 	stw	r4,-4(fp)
}
    e8b4:	0001883a 	nop
    e8b8:	e037883a 	mov	sp,fp
    e8bc:	df000017 	ldw	fp,0(sp)
    e8c0:	dec00104 	addi	sp,sp,4
    e8c4:	f800283a 	ret

0000e8c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e8c8:	defffe04 	addi	sp,sp,-8
    e8cc:	dfc00115 	stw	ra,4(sp)
    e8d0:	df000015 	stw	fp,0(sp)
    e8d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e8d8:	d0a00b17 	ldw	r2,-32724(gp)
    e8dc:	10000326 	beq	r2,zero,e8ec <alt_get_errno+0x24>
    e8e0:	d0a00b17 	ldw	r2,-32724(gp)
    e8e4:	103ee83a 	callr	r2
    e8e8:	00000106 	br	e8f0 <alt_get_errno+0x28>
    e8ec:	d0a78504 	addi	r2,gp,-25068
}
    e8f0:	e037883a 	mov	sp,fp
    e8f4:	dfc00117 	ldw	ra,4(sp)
    e8f8:	df000017 	ldw	fp,0(sp)
    e8fc:	dec00204 	addi	sp,sp,8
    e900:	f800283a 	ret

0000e904 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    e904:	defff904 	addi	sp,sp,-28
    e908:	dfc00615 	stw	ra,24(sp)
    e90c:	df000515 	stw	fp,20(sp)
    e910:	df000504 	addi	fp,sp,20
    e914:	e13ffd15 	stw	r4,-12(fp)
    e918:	e17ffe15 	stw	r5,-8(fp)
    e91c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e920:	e0bffd17 	ldw	r2,-12(fp)
    e924:	10000616 	blt	r2,zero,e940 <read+0x3c>
    e928:	e0bffd17 	ldw	r2,-12(fp)
    e92c:	10c00324 	muli	r3,r2,12
    e930:	00800074 	movhi	r2,1
    e934:	108bf104 	addi	r2,r2,12228
    e938:	1885883a 	add	r2,r3,r2
    e93c:	00000106 	br	e944 <read+0x40>
    e940:	0005883a 	mov	r2,zero
    e944:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    e948:	e0bffb17 	ldw	r2,-20(fp)
    e94c:	10002226 	beq	r2,zero,e9d8 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    e950:	e0bffb17 	ldw	r2,-20(fp)
    e954:	10800217 	ldw	r2,8(r2)
    e958:	108000cc 	andi	r2,r2,3
    e95c:	10800060 	cmpeqi	r2,r2,1
    e960:	1000181e 	bne	r2,zero,e9c4 <read+0xc0>
        (fd->dev->read))
    e964:	e0bffb17 	ldw	r2,-20(fp)
    e968:	10800017 	ldw	r2,0(r2)
    e96c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    e970:	10001426 	beq	r2,zero,e9c4 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    e974:	e0bffb17 	ldw	r2,-20(fp)
    e978:	10800017 	ldw	r2,0(r2)
    e97c:	10800517 	ldw	r2,20(r2)
    e980:	e0ffff17 	ldw	r3,-4(fp)
    e984:	180d883a 	mov	r6,r3
    e988:	e17ffe17 	ldw	r5,-8(fp)
    e98c:	e13ffb17 	ldw	r4,-20(fp)
    e990:	103ee83a 	callr	r2
    e994:	e0bffc15 	stw	r2,-16(fp)
    e998:	e0bffc17 	ldw	r2,-16(fp)
    e99c:	1000070e 	bge	r2,zero,e9bc <read+0xb8>
        {
          ALT_ERRNO = -rval;
    e9a0:	000e8c80 	call	e8c8 <alt_get_errno>
    e9a4:	1007883a 	mov	r3,r2
    e9a8:	e0bffc17 	ldw	r2,-16(fp)
    e9ac:	0085c83a 	sub	r2,zero,r2
    e9b0:	18800015 	stw	r2,0(r3)
          return -1;
    e9b4:	00bfffc4 	movi	r2,-1
    e9b8:	00000c06 	br	e9ec <read+0xe8>
        }
        return rval;
    e9bc:	e0bffc17 	ldw	r2,-16(fp)
    e9c0:	00000a06 	br	e9ec <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    e9c4:	000e8c80 	call	e8c8 <alt_get_errno>
    e9c8:	1007883a 	mov	r3,r2
    e9cc:	00800344 	movi	r2,13
    e9d0:	18800015 	stw	r2,0(r3)
    e9d4:	00000406 	br	e9e8 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    e9d8:	000e8c80 	call	e8c8 <alt_get_errno>
    e9dc:	1007883a 	mov	r3,r2
    e9e0:	00801444 	movi	r2,81
    e9e4:	18800015 	stw	r2,0(r3)
  }
  return -1;
    e9e8:	00bfffc4 	movi	r2,-1
}
    e9ec:	e037883a 	mov	sp,fp
    e9f0:	dfc00117 	ldw	ra,4(sp)
    e9f4:	df000017 	ldw	fp,0(sp)
    e9f8:	dec00204 	addi	sp,sp,8
    e9fc:	f800283a 	ret

0000ea00 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    ea00:	defffe04 	addi	sp,sp,-8
    ea04:	df000115 	stw	fp,4(sp)
    ea08:	df000104 	addi	fp,sp,4
    ea0c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    ea10:	e0bfff17 	ldw	r2,-4(fp)
    ea14:	108000d0 	cmplti	r2,r2,3
    ea18:	10000d1e 	bne	r2,zero,ea50 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    ea1c:	00800074 	movhi	r2,1
    ea20:	108bf104 	addi	r2,r2,12228
    ea24:	e0ffff17 	ldw	r3,-4(fp)
    ea28:	18c00324 	muli	r3,r3,12
    ea2c:	10c5883a 	add	r2,r2,r3
    ea30:	10800204 	addi	r2,r2,8
    ea34:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    ea38:	00800074 	movhi	r2,1
    ea3c:	108bf104 	addi	r2,r2,12228
    ea40:	e0ffff17 	ldw	r3,-4(fp)
    ea44:	18c00324 	muli	r3,r3,12
    ea48:	10c5883a 	add	r2,r2,r3
    ea4c:	10000015 	stw	zero,0(r2)
  }
}
    ea50:	0001883a 	nop
    ea54:	e037883a 	mov	sp,fp
    ea58:	df000017 	ldw	fp,0(sp)
    ea5c:	dec00104 	addi	sp,sp,4
    ea60:	f800283a 	ret

0000ea64 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    ea64:	defff904 	addi	sp,sp,-28
    ea68:	df000615 	stw	fp,24(sp)
    ea6c:	df000604 	addi	fp,sp,24
    ea70:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ea74:	0005303a 	rdctl	r2,status
    ea78:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ea7c:	e0fffe17 	ldw	r3,-8(fp)
    ea80:	00bfff84 	movi	r2,-2
    ea84:	1884703a 	and	r2,r3,r2
    ea88:	1001703a 	wrctl	status,r2
  
  return context;
    ea8c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    ea90:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    ea94:	d0a00c17 	ldw	r2,-32720(gp)
    ea98:	10c000c4 	addi	r3,r2,3
    ea9c:	00bfff04 	movi	r2,-4
    eaa0:	1884703a 	and	r2,r3,r2
    eaa4:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    eaa8:	d0e00c17 	ldw	r3,-32720(gp)
    eaac:	e0bfff17 	ldw	r2,-4(fp)
    eab0:	1887883a 	add	r3,r3,r2
    eab4:	00820034 	movhi	r2,2048
    eab8:	10800004 	addi	r2,r2,0
    eabc:	10c0062e 	bgeu	r2,r3,ead8 <sbrk+0x74>
    eac0:	e0bffb17 	ldw	r2,-20(fp)
    eac4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    eac8:	e0bffa17 	ldw	r2,-24(fp)
    eacc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    ead0:	00bfffc4 	movi	r2,-1
    ead4:	00000b06 	br	eb04 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    ead8:	d0a00c17 	ldw	r2,-32720(gp)
    eadc:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    eae0:	d0e00c17 	ldw	r3,-32720(gp)
    eae4:	e0bfff17 	ldw	r2,-4(fp)
    eae8:	1885883a 	add	r2,r3,r2
    eaec:	d0a00c15 	stw	r2,-32720(gp)
    eaf0:	e0bffb17 	ldw	r2,-20(fp)
    eaf4:	e0bffc15 	stw	r2,-16(fp)
    eaf8:	e0bffc17 	ldw	r2,-16(fp)
    eafc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    eb00:	e0bffd17 	ldw	r2,-12(fp)
} 
    eb04:	e037883a 	mov	sp,fp
    eb08:	df000017 	ldw	fp,0(sp)
    eb0c:	dec00104 	addi	sp,sp,4
    eb10:	f800283a 	ret

0000eb14 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    eb14:	defffa04 	addi	sp,sp,-24
    eb18:	df000515 	stw	fp,20(sp)
    eb1c:	df000504 	addi	fp,sp,20
    eb20:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    eb24:	0005303a 	rdctl	r2,status
    eb28:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    eb2c:	e0fffc17 	ldw	r3,-16(fp)
    eb30:	00bfff84 	movi	r2,-2
    eb34:	1884703a 	and	r2,r3,r2
    eb38:	1001703a 	wrctl	status,r2
  
  return context;
    eb3c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    eb40:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    eb44:	e0bfff17 	ldw	r2,-4(fp)
    eb48:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    eb4c:	e0bffd17 	ldw	r2,-12(fp)
    eb50:	10800017 	ldw	r2,0(r2)
    eb54:	e0fffd17 	ldw	r3,-12(fp)
    eb58:	18c00117 	ldw	r3,4(r3)
    eb5c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    eb60:	e0bffd17 	ldw	r2,-12(fp)
    eb64:	10800117 	ldw	r2,4(r2)
    eb68:	e0fffd17 	ldw	r3,-12(fp)
    eb6c:	18c00017 	ldw	r3,0(r3)
    eb70:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    eb74:	e0bffd17 	ldw	r2,-12(fp)
    eb78:	e0fffd17 	ldw	r3,-12(fp)
    eb7c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    eb80:	e0bffd17 	ldw	r2,-12(fp)
    eb84:	e0fffd17 	ldw	r3,-12(fp)
    eb88:	10c00015 	stw	r3,0(r2)
    eb8c:	e0bffb17 	ldw	r2,-20(fp)
    eb90:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    eb94:	e0bffe17 	ldw	r2,-8(fp)
    eb98:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    eb9c:	0001883a 	nop
    eba0:	e037883a 	mov	sp,fp
    eba4:	df000017 	ldw	fp,0(sp)
    eba8:	dec00104 	addi	sp,sp,4
    ebac:	f800283a 	ret

0000ebb0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    ebb0:	defffb04 	addi	sp,sp,-20
    ebb4:	dfc00415 	stw	ra,16(sp)
    ebb8:	df000315 	stw	fp,12(sp)
    ebbc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    ebc0:	d0a00d17 	ldw	r2,-32716(gp)
    ebc4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    ebc8:	d0a78d17 	ldw	r2,-25036(gp)
    ebcc:	10800044 	addi	r2,r2,1
    ebd0:	d0a78d15 	stw	r2,-25036(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    ebd4:	00002e06 	br	ec90 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    ebd8:	e0bffd17 	ldw	r2,-12(fp)
    ebdc:	10800017 	ldw	r2,0(r2)
    ebe0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    ebe4:	e0bffd17 	ldw	r2,-12(fp)
    ebe8:	10800403 	ldbu	r2,16(r2)
    ebec:	10803fcc 	andi	r2,r2,255
    ebf0:	10000426 	beq	r2,zero,ec04 <alt_tick+0x54>
    ebf4:	d0a78d17 	ldw	r2,-25036(gp)
    ebf8:	1000021e 	bne	r2,zero,ec04 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    ebfc:	e0bffd17 	ldw	r2,-12(fp)
    ec00:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    ec04:	e0bffd17 	ldw	r2,-12(fp)
    ec08:	10800217 	ldw	r2,8(r2)
    ec0c:	d0e78d17 	ldw	r3,-25036(gp)
    ec10:	18801d36 	bltu	r3,r2,ec88 <alt_tick+0xd8>
    ec14:	e0bffd17 	ldw	r2,-12(fp)
    ec18:	10800403 	ldbu	r2,16(r2)
    ec1c:	10803fcc 	andi	r2,r2,255
    ec20:	1000191e 	bne	r2,zero,ec88 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    ec24:	e0bffd17 	ldw	r2,-12(fp)
    ec28:	10800317 	ldw	r2,12(r2)
    ec2c:	e0fffd17 	ldw	r3,-12(fp)
    ec30:	18c00517 	ldw	r3,20(r3)
    ec34:	1809883a 	mov	r4,r3
    ec38:	103ee83a 	callr	r2
    ec3c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    ec40:	e0bfff17 	ldw	r2,-4(fp)
    ec44:	1000031e 	bne	r2,zero,ec54 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    ec48:	e13ffd17 	ldw	r4,-12(fp)
    ec4c:	000eb140 	call	eb14 <alt_alarm_stop>
    ec50:	00000d06 	br	ec88 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    ec54:	e0bffd17 	ldw	r2,-12(fp)
    ec58:	10c00217 	ldw	r3,8(r2)
    ec5c:	e0bfff17 	ldw	r2,-4(fp)
    ec60:	1887883a 	add	r3,r3,r2
    ec64:	e0bffd17 	ldw	r2,-12(fp)
    ec68:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    ec6c:	e0bffd17 	ldw	r2,-12(fp)
    ec70:	10c00217 	ldw	r3,8(r2)
    ec74:	d0a78d17 	ldw	r2,-25036(gp)
    ec78:	1880032e 	bgeu	r3,r2,ec88 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    ec7c:	e0bffd17 	ldw	r2,-12(fp)
    ec80:	00c00044 	movi	r3,1
    ec84:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    ec88:	e0bffe17 	ldw	r2,-8(fp)
    ec8c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    ec90:	e0fffd17 	ldw	r3,-12(fp)
    ec94:	d0a00d04 	addi	r2,gp,-32716
    ec98:	18bfcf1e 	bne	r3,r2,ebd8 <__alt_data_end+0xf800ebd8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    ec9c:	0001883a 	nop
}
    eca0:	0001883a 	nop
    eca4:	e037883a 	mov	sp,fp
    eca8:	dfc00117 	ldw	ra,4(sp)
    ecac:	df000017 	ldw	fp,0(sp)
    ecb0:	dec00204 	addi	sp,sp,8
    ecb4:	f800283a 	ret

0000ecb8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    ecb8:	defffd04 	addi	sp,sp,-12
    ecbc:	dfc00215 	stw	ra,8(sp)
    ecc0:	df000115 	stw	fp,4(sp)
    ecc4:	df000104 	addi	fp,sp,4
    ecc8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    eccc:	e13fff17 	ldw	r4,-4(fp)
    ecd0:	0010a600 	call	10a60 <alt_busy_sleep>
}
    ecd4:	e037883a 	mov	sp,fp
    ecd8:	dfc00117 	ldw	ra,4(sp)
    ecdc:	df000017 	ldw	fp,0(sp)
    ece0:	dec00204 	addi	sp,sp,8
    ece4:	f800283a 	ret

0000ece8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ece8:	defffe04 	addi	sp,sp,-8
    ecec:	dfc00115 	stw	ra,4(sp)
    ecf0:	df000015 	stw	fp,0(sp)
    ecf4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ecf8:	d0a00b17 	ldw	r2,-32724(gp)
    ecfc:	10000326 	beq	r2,zero,ed0c <alt_get_errno+0x24>
    ed00:	d0a00b17 	ldw	r2,-32724(gp)
    ed04:	103ee83a 	callr	r2
    ed08:	00000106 	br	ed10 <alt_get_errno+0x28>
    ed0c:	d0a78504 	addi	r2,gp,-25068
}
    ed10:	e037883a 	mov	sp,fp
    ed14:	dfc00117 	ldw	ra,4(sp)
    ed18:	df000017 	ldw	fp,0(sp)
    ed1c:	dec00204 	addi	sp,sp,8
    ed20:	f800283a 	ret

0000ed24 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    ed24:	defff904 	addi	sp,sp,-28
    ed28:	dfc00615 	stw	ra,24(sp)
    ed2c:	df000515 	stw	fp,20(sp)
    ed30:	df000504 	addi	fp,sp,20
    ed34:	e13ffd15 	stw	r4,-12(fp)
    ed38:	e17ffe15 	stw	r5,-8(fp)
    ed3c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ed40:	e0bffd17 	ldw	r2,-12(fp)
    ed44:	10000616 	blt	r2,zero,ed60 <write+0x3c>
    ed48:	e0bffd17 	ldw	r2,-12(fp)
    ed4c:	10c00324 	muli	r3,r2,12
    ed50:	00800074 	movhi	r2,1
    ed54:	108bf104 	addi	r2,r2,12228
    ed58:	1885883a 	add	r2,r3,r2
    ed5c:	00000106 	br	ed64 <write+0x40>
    ed60:	0005883a 	mov	r2,zero
    ed64:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    ed68:	e0bffb17 	ldw	r2,-20(fp)
    ed6c:	10002126 	beq	r2,zero,edf4 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    ed70:	e0bffb17 	ldw	r2,-20(fp)
    ed74:	10800217 	ldw	r2,8(r2)
    ed78:	108000cc 	andi	r2,r2,3
    ed7c:	10001826 	beq	r2,zero,ede0 <write+0xbc>
    ed80:	e0bffb17 	ldw	r2,-20(fp)
    ed84:	10800017 	ldw	r2,0(r2)
    ed88:	10800617 	ldw	r2,24(r2)
    ed8c:	10001426 	beq	r2,zero,ede0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    ed90:	e0bffb17 	ldw	r2,-20(fp)
    ed94:	10800017 	ldw	r2,0(r2)
    ed98:	10800617 	ldw	r2,24(r2)
    ed9c:	e0ffff17 	ldw	r3,-4(fp)
    eda0:	180d883a 	mov	r6,r3
    eda4:	e17ffe17 	ldw	r5,-8(fp)
    eda8:	e13ffb17 	ldw	r4,-20(fp)
    edac:	103ee83a 	callr	r2
    edb0:	e0bffc15 	stw	r2,-16(fp)
    edb4:	e0bffc17 	ldw	r2,-16(fp)
    edb8:	1000070e 	bge	r2,zero,edd8 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    edbc:	000ece80 	call	ece8 <alt_get_errno>
    edc0:	1007883a 	mov	r3,r2
    edc4:	e0bffc17 	ldw	r2,-16(fp)
    edc8:	0085c83a 	sub	r2,zero,r2
    edcc:	18800015 	stw	r2,0(r3)
        return -1;
    edd0:	00bfffc4 	movi	r2,-1
    edd4:	00000c06 	br	ee08 <write+0xe4>
      }
      return rval;
    edd8:	e0bffc17 	ldw	r2,-16(fp)
    eddc:	00000a06 	br	ee08 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    ede0:	000ece80 	call	ece8 <alt_get_errno>
    ede4:	1007883a 	mov	r3,r2
    ede8:	00800344 	movi	r2,13
    edec:	18800015 	stw	r2,0(r3)
    edf0:	00000406 	br	ee04 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    edf4:	000ece80 	call	ece8 <alt_get_errno>
    edf8:	1007883a 	mov	r3,r2
    edfc:	00801444 	movi	r2,81
    ee00:	18800015 	stw	r2,0(r3)
  }
  return -1;
    ee04:	00bfffc4 	movi	r2,-1
}
    ee08:	e037883a 	mov	sp,fp
    ee0c:	dfc00117 	ldw	ra,4(sp)
    ee10:	df000017 	ldw	fp,0(sp)
    ee14:	dec00204 	addi	sp,sp,8
    ee18:	f800283a 	ret

0000ee1c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    ee1c:	defffd04 	addi	sp,sp,-12
    ee20:	dfc00215 	stw	ra,8(sp)
    ee24:	df000115 	stw	fp,4(sp)
    ee28:	df000104 	addi	fp,sp,4
    ee2c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    ee30:	d1600804 	addi	r5,gp,-32736
    ee34:	e13fff17 	ldw	r4,-4(fp)
    ee38:	0010c140 	call	10c14 <alt_dev_llist_insert>
}
    ee3c:	e037883a 	mov	sp,fp
    ee40:	dfc00117 	ldw	ra,4(sp)
    ee44:	df000017 	ldw	fp,0(sp)
    ee48:	dec00204 	addi	sp,sp,8
    ee4c:	f800283a 	ret

0000ee50 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    ee50:	defffd04 	addi	sp,sp,-12
    ee54:	dfc00215 	stw	ra,8(sp)
    ee58:	df000115 	stw	fp,4(sp)
    ee5c:	df000104 	addi	fp,sp,4
    ee60:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU_0, cpu_0);
    ee64:	00113e00 	call	113e0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    ee68:	00800044 	movi	r2,1
    ee6c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    ee70:	0001883a 	nop
    ee74:	e037883a 	mov	sp,fp
    ee78:	dfc00117 	ldw	ra,4(sp)
    ee7c:	df000017 	ldw	fp,0(sp)
    ee80:	dec00204 	addi	sp,sp,8
    ee84:	f800283a 	ret

0000ee88 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ee88:	defffe04 	addi	sp,sp,-8
    ee8c:	dfc00115 	stw	ra,4(sp)
    ee90:	df000015 	stw	fp,0(sp)
    ee94:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ee98:	01c0fa04 	movi	r7,1000
    ee9c:	01800044 	movi	r6,1
    eea0:	000b883a 	mov	r5,zero
    eea4:	01020034 	movhi	r4,2048
    eea8:	00108b80 	call	108b8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    eeac:	000d883a 	mov	r6,zero
    eeb0:	000b883a 	mov	r5,zero
    eeb4:	01000074 	movhi	r4,1
    eeb8:	210c5b04 	addi	r4,r4,12652
    eebc:	000f0600 	call	f060 <altera_avalon_jtag_uart_init>
    eec0:	01000074 	movhi	r4,1
    eec4:	210c5104 	addi	r4,r4,12612
    eec8:	000ee1c0 	call	ee1c <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD_16207_0, lcd_16207_0);
    eecc:	01000074 	movhi	r4,1
    eed0:	21107304 	addi	r4,r4,16844
    eed4:	00106ac0 	call	106ac <altera_avalon_lcd_16207_init>
    eed8:	01000074 	movhi	r4,1
    eedc:	21106904 	addi	r4,r4,16804
    eee0:	000ee1c0 	call	ee1c <alt_dev_reg>
}
    eee4:	0001883a 	nop
    eee8:	e037883a 	mov	sp,fp
    eeec:	dfc00117 	ldw	ra,4(sp)
    eef0:	df000017 	ldw	fp,0(sp)
    eef4:	dec00204 	addi	sp,sp,8
    eef8:	f800283a 	ret

0000eefc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    eefc:	defffa04 	addi	sp,sp,-24
    ef00:	dfc00515 	stw	ra,20(sp)
    ef04:	df000415 	stw	fp,16(sp)
    ef08:	df000404 	addi	fp,sp,16
    ef0c:	e13ffd15 	stw	r4,-12(fp)
    ef10:	e17ffe15 	stw	r5,-8(fp)
    ef14:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    ef18:	e0bffd17 	ldw	r2,-12(fp)
    ef1c:	10800017 	ldw	r2,0(r2)
    ef20:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    ef24:	e0bffc17 	ldw	r2,-16(fp)
    ef28:	10c00a04 	addi	r3,r2,40
    ef2c:	e0bffd17 	ldw	r2,-12(fp)
    ef30:	10800217 	ldw	r2,8(r2)
    ef34:	100f883a 	mov	r7,r2
    ef38:	e1bfff17 	ldw	r6,-4(fp)
    ef3c:	e17ffe17 	ldw	r5,-8(fp)
    ef40:	1809883a 	mov	r4,r3
    ef44:	000f5240 	call	f524 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    ef48:	e037883a 	mov	sp,fp
    ef4c:	dfc00117 	ldw	ra,4(sp)
    ef50:	df000017 	ldw	fp,0(sp)
    ef54:	dec00204 	addi	sp,sp,8
    ef58:	f800283a 	ret

0000ef5c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    ef5c:	defffa04 	addi	sp,sp,-24
    ef60:	dfc00515 	stw	ra,20(sp)
    ef64:	df000415 	stw	fp,16(sp)
    ef68:	df000404 	addi	fp,sp,16
    ef6c:	e13ffd15 	stw	r4,-12(fp)
    ef70:	e17ffe15 	stw	r5,-8(fp)
    ef74:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    ef78:	e0bffd17 	ldw	r2,-12(fp)
    ef7c:	10800017 	ldw	r2,0(r2)
    ef80:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    ef84:	e0bffc17 	ldw	r2,-16(fp)
    ef88:	10c00a04 	addi	r3,r2,40
    ef8c:	e0bffd17 	ldw	r2,-12(fp)
    ef90:	10800217 	ldw	r2,8(r2)
    ef94:	100f883a 	mov	r7,r2
    ef98:	e1bfff17 	ldw	r6,-4(fp)
    ef9c:	e17ffe17 	ldw	r5,-8(fp)
    efa0:	1809883a 	mov	r4,r3
    efa4:	000f7400 	call	f740 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    efa8:	e037883a 	mov	sp,fp
    efac:	dfc00117 	ldw	ra,4(sp)
    efb0:	df000017 	ldw	fp,0(sp)
    efb4:	dec00204 	addi	sp,sp,8
    efb8:	f800283a 	ret

0000efbc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    efbc:	defffc04 	addi	sp,sp,-16
    efc0:	dfc00315 	stw	ra,12(sp)
    efc4:	df000215 	stw	fp,8(sp)
    efc8:	df000204 	addi	fp,sp,8
    efcc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    efd0:	e0bfff17 	ldw	r2,-4(fp)
    efd4:	10800017 	ldw	r2,0(r2)
    efd8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    efdc:	e0bffe17 	ldw	r2,-8(fp)
    efe0:	10c00a04 	addi	r3,r2,40
    efe4:	e0bfff17 	ldw	r2,-4(fp)
    efe8:	10800217 	ldw	r2,8(r2)
    efec:	100b883a 	mov	r5,r2
    eff0:	1809883a 	mov	r4,r3
    eff4:	000f3cc0 	call	f3cc <altera_avalon_jtag_uart_close>
}
    eff8:	e037883a 	mov	sp,fp
    effc:	dfc00117 	ldw	ra,4(sp)
    f000:	df000017 	ldw	fp,0(sp)
    f004:	dec00204 	addi	sp,sp,8
    f008:	f800283a 	ret

0000f00c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    f00c:	defffa04 	addi	sp,sp,-24
    f010:	dfc00515 	stw	ra,20(sp)
    f014:	df000415 	stw	fp,16(sp)
    f018:	df000404 	addi	fp,sp,16
    f01c:	e13ffd15 	stw	r4,-12(fp)
    f020:	e17ffe15 	stw	r5,-8(fp)
    f024:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    f028:	e0bffd17 	ldw	r2,-12(fp)
    f02c:	10800017 	ldw	r2,0(r2)
    f030:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    f034:	e0bffc17 	ldw	r2,-16(fp)
    f038:	10800a04 	addi	r2,r2,40
    f03c:	e1bfff17 	ldw	r6,-4(fp)
    f040:	e17ffe17 	ldw	r5,-8(fp)
    f044:	1009883a 	mov	r4,r2
    f048:	000f4340 	call	f434 <altera_avalon_jtag_uart_ioctl>
}
    f04c:	e037883a 	mov	sp,fp
    f050:	dfc00117 	ldw	ra,4(sp)
    f054:	df000017 	ldw	fp,0(sp)
    f058:	dec00204 	addi	sp,sp,8
    f05c:	f800283a 	ret

0000f060 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    f060:	defffa04 	addi	sp,sp,-24
    f064:	dfc00515 	stw	ra,20(sp)
    f068:	df000415 	stw	fp,16(sp)
    f06c:	df000404 	addi	fp,sp,16
    f070:	e13ffd15 	stw	r4,-12(fp)
    f074:	e17ffe15 	stw	r5,-8(fp)
    f078:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f07c:	e0bffd17 	ldw	r2,-12(fp)
    f080:	00c00044 	movi	r3,1
    f084:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    f088:	e0bffd17 	ldw	r2,-12(fp)
    f08c:	10800017 	ldw	r2,0(r2)
    f090:	10800104 	addi	r2,r2,4
    f094:	1007883a 	mov	r3,r2
    f098:	e0bffd17 	ldw	r2,-12(fp)
    f09c:	10800817 	ldw	r2,32(r2)
    f0a0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    f0a4:	e0bffe17 	ldw	r2,-8(fp)
    f0a8:	e0ffff17 	ldw	r3,-4(fp)
    f0ac:	d8000015 	stw	zero,0(sp)
    f0b0:	e1fffd17 	ldw	r7,-12(fp)
    f0b4:	01800074 	movhi	r6,1
    f0b8:	31bc4804 	addi	r6,r6,-3808
    f0bc:	180b883a 	mov	r5,r3
    f0c0:	1009883a 	mov	r4,r2
    f0c4:	0010dac0 	call	10dac <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    f0c8:	e0bffd17 	ldw	r2,-12(fp)
    f0cc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    f0d0:	e0bffd17 	ldw	r2,-12(fp)
    f0d4:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    f0d8:	d0e78c17 	ldw	r3,-25040(gp)
    f0dc:	e1fffd17 	ldw	r7,-12(fp)
    f0e0:	01800074 	movhi	r6,1
    f0e4:	31bccb04 	addi	r6,r6,-3284
    f0e8:	180b883a 	mov	r5,r3
    f0ec:	1009883a 	mov	r4,r2
    f0f0:	00109340 	call	10934 <alt_alarm_start>
    f0f4:	1000040e 	bge	r2,zero,f108 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    f0f8:	e0fffd17 	ldw	r3,-12(fp)
    f0fc:	00a00034 	movhi	r2,32768
    f100:	10bfffc4 	addi	r2,r2,-1
    f104:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    f108:	0001883a 	nop
    f10c:	e037883a 	mov	sp,fp
    f110:	dfc00117 	ldw	ra,4(sp)
    f114:	df000017 	ldw	fp,0(sp)
    f118:	dec00204 	addi	sp,sp,8
    f11c:	f800283a 	ret

0000f120 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    f120:	defff804 	addi	sp,sp,-32
    f124:	df000715 	stw	fp,28(sp)
    f128:	df000704 	addi	fp,sp,28
    f12c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    f130:	e0bfff17 	ldw	r2,-4(fp)
    f134:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    f138:	e0bffb17 	ldw	r2,-20(fp)
    f13c:	10800017 	ldw	r2,0(r2)
    f140:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f144:	e0bffc17 	ldw	r2,-16(fp)
    f148:	10800104 	addi	r2,r2,4
    f14c:	10800037 	ldwio	r2,0(r2)
    f150:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    f154:	e0bffd17 	ldw	r2,-12(fp)
    f158:	1080c00c 	andi	r2,r2,768
    f15c:	10006d26 	beq	r2,zero,f314 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    f160:	e0bffd17 	ldw	r2,-12(fp)
    f164:	1080400c 	andi	r2,r2,256
    f168:	10003526 	beq	r2,zero,f240 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    f16c:	00800074 	movhi	r2,1
    f170:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f174:	e0bffb17 	ldw	r2,-20(fp)
    f178:	10800a17 	ldw	r2,40(r2)
    f17c:	10800044 	addi	r2,r2,1
    f180:	1081ffcc 	andi	r2,r2,2047
    f184:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    f188:	e0bffb17 	ldw	r2,-20(fp)
    f18c:	10c00b17 	ldw	r3,44(r2)
    f190:	e0bffe17 	ldw	r2,-8(fp)
    f194:	18801526 	beq	r3,r2,f1ec <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    f198:	e0bffc17 	ldw	r2,-16(fp)
    f19c:	10800037 	ldwio	r2,0(r2)
    f1a0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    f1a4:	e0bff917 	ldw	r2,-28(fp)
    f1a8:	10a0000c 	andi	r2,r2,32768
    f1ac:	10001126 	beq	r2,zero,f1f4 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    f1b0:	e0bffb17 	ldw	r2,-20(fp)
    f1b4:	10800a17 	ldw	r2,40(r2)
    f1b8:	e0fff917 	ldw	r3,-28(fp)
    f1bc:	1809883a 	mov	r4,r3
    f1c0:	e0fffb17 	ldw	r3,-20(fp)
    f1c4:	1885883a 	add	r2,r3,r2
    f1c8:	10800e04 	addi	r2,r2,56
    f1cc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f1d0:	e0bffb17 	ldw	r2,-20(fp)
    f1d4:	10800a17 	ldw	r2,40(r2)
    f1d8:	10800044 	addi	r2,r2,1
    f1dc:	10c1ffcc 	andi	r3,r2,2047
    f1e0:	e0bffb17 	ldw	r2,-20(fp)
    f1e4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    f1e8:	003fe206 	br	f174 <__alt_data_end+0xf800f174>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    f1ec:	0001883a 	nop
    f1f0:	00000106 	br	f1f8 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    f1f4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    f1f8:	e0bff917 	ldw	r2,-28(fp)
    f1fc:	10bfffec 	andhi	r2,r2,65535
    f200:	10000f26 	beq	r2,zero,f240 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f204:	e0bffb17 	ldw	r2,-20(fp)
    f208:	10c00817 	ldw	r3,32(r2)
    f20c:	00bfff84 	movi	r2,-2
    f210:	1886703a 	and	r3,r3,r2
    f214:	e0bffb17 	ldw	r2,-20(fp)
    f218:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    f21c:	e0bffc17 	ldw	r2,-16(fp)
    f220:	10800104 	addi	r2,r2,4
    f224:	1007883a 	mov	r3,r2
    f228:	e0bffb17 	ldw	r2,-20(fp)
    f22c:	10800817 	ldw	r2,32(r2)
    f230:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f234:	e0bffc17 	ldw	r2,-16(fp)
    f238:	10800104 	addi	r2,r2,4
    f23c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    f240:	e0bffd17 	ldw	r2,-12(fp)
    f244:	1080800c 	andi	r2,r2,512
    f248:	103fbe26 	beq	r2,zero,f144 <__alt_data_end+0xf800f144>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    f24c:	e0bffd17 	ldw	r2,-12(fp)
    f250:	1004d43a 	srli	r2,r2,16
    f254:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    f258:	00001406 	br	f2ac <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    f25c:	e0bffc17 	ldw	r2,-16(fp)
    f260:	e0fffb17 	ldw	r3,-20(fp)
    f264:	18c00d17 	ldw	r3,52(r3)
    f268:	e13ffb17 	ldw	r4,-20(fp)
    f26c:	20c7883a 	add	r3,r4,r3
    f270:	18c20e04 	addi	r3,r3,2104
    f274:	18c00003 	ldbu	r3,0(r3)
    f278:	18c03fcc 	andi	r3,r3,255
    f27c:	18c0201c 	xori	r3,r3,128
    f280:	18ffe004 	addi	r3,r3,-128
    f284:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f288:	e0bffb17 	ldw	r2,-20(fp)
    f28c:	10800d17 	ldw	r2,52(r2)
    f290:	10800044 	addi	r2,r2,1
    f294:	10c1ffcc 	andi	r3,r2,2047
    f298:	e0bffb17 	ldw	r2,-20(fp)
    f29c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    f2a0:	e0bffa17 	ldw	r2,-24(fp)
    f2a4:	10bfffc4 	addi	r2,r2,-1
    f2a8:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    f2ac:	e0bffa17 	ldw	r2,-24(fp)
    f2b0:	10000526 	beq	r2,zero,f2c8 <altera_avalon_jtag_uart_irq+0x1a8>
    f2b4:	e0bffb17 	ldw	r2,-20(fp)
    f2b8:	10c00d17 	ldw	r3,52(r2)
    f2bc:	e0bffb17 	ldw	r2,-20(fp)
    f2c0:	10800c17 	ldw	r2,48(r2)
    f2c4:	18bfe51e 	bne	r3,r2,f25c <__alt_data_end+0xf800f25c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    f2c8:	e0bffa17 	ldw	r2,-24(fp)
    f2cc:	103f9d26 	beq	r2,zero,f144 <__alt_data_end+0xf800f144>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f2d0:	e0bffb17 	ldw	r2,-20(fp)
    f2d4:	10c00817 	ldw	r3,32(r2)
    f2d8:	00bfff44 	movi	r2,-3
    f2dc:	1886703a 	and	r3,r3,r2
    f2e0:	e0bffb17 	ldw	r2,-20(fp)
    f2e4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f2e8:	e0bffb17 	ldw	r2,-20(fp)
    f2ec:	10800017 	ldw	r2,0(r2)
    f2f0:	10800104 	addi	r2,r2,4
    f2f4:	1007883a 	mov	r3,r2
    f2f8:	e0bffb17 	ldw	r2,-20(fp)
    f2fc:	10800817 	ldw	r2,32(r2)
    f300:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f304:	e0bffc17 	ldw	r2,-16(fp)
    f308:	10800104 	addi	r2,r2,4
    f30c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    f310:	003f8c06 	br	f144 <__alt_data_end+0xf800f144>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    f314:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    f318:	0001883a 	nop
    f31c:	e037883a 	mov	sp,fp
    f320:	df000017 	ldw	fp,0(sp)
    f324:	dec00104 	addi	sp,sp,4
    f328:	f800283a 	ret

0000f32c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    f32c:	defff804 	addi	sp,sp,-32
    f330:	df000715 	stw	fp,28(sp)
    f334:	df000704 	addi	fp,sp,28
    f338:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    f33c:	e0bffb17 	ldw	r2,-20(fp)
    f340:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    f344:	e0bff917 	ldw	r2,-28(fp)
    f348:	10800017 	ldw	r2,0(r2)
    f34c:	10800104 	addi	r2,r2,4
    f350:	10800037 	ldwio	r2,0(r2)
    f354:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    f358:	e0bffa17 	ldw	r2,-24(fp)
    f35c:	1081000c 	andi	r2,r2,1024
    f360:	10000b26 	beq	r2,zero,f390 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    f364:	e0bff917 	ldw	r2,-28(fp)
    f368:	10800017 	ldw	r2,0(r2)
    f36c:	10800104 	addi	r2,r2,4
    f370:	1007883a 	mov	r3,r2
    f374:	e0bff917 	ldw	r2,-28(fp)
    f378:	10800817 	ldw	r2,32(r2)
    f37c:	10810014 	ori	r2,r2,1024
    f380:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    f384:	e0bff917 	ldw	r2,-28(fp)
    f388:	10000915 	stw	zero,36(r2)
    f38c:	00000a06 	br	f3b8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    f390:	e0bff917 	ldw	r2,-28(fp)
    f394:	10c00917 	ldw	r3,36(r2)
    f398:	00a00034 	movhi	r2,32768
    f39c:	10bfff04 	addi	r2,r2,-4
    f3a0:	10c00536 	bltu	r2,r3,f3b8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    f3a4:	e0bff917 	ldw	r2,-28(fp)
    f3a8:	10800917 	ldw	r2,36(r2)
    f3ac:	10c00044 	addi	r3,r2,1
    f3b0:	e0bff917 	ldw	r2,-28(fp)
    f3b4:	10c00915 	stw	r3,36(r2)
    f3b8:	d0a78c17 	ldw	r2,-25040(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    f3bc:	e037883a 	mov	sp,fp
    f3c0:	df000017 	ldw	fp,0(sp)
    f3c4:	dec00104 	addi	sp,sp,4
    f3c8:	f800283a 	ret

0000f3cc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    f3cc:	defffd04 	addi	sp,sp,-12
    f3d0:	df000215 	stw	fp,8(sp)
    f3d4:	df000204 	addi	fp,sp,8
    f3d8:	e13ffe15 	stw	r4,-8(fp)
    f3dc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    f3e0:	00000506 	br	f3f8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    f3e4:	e0bfff17 	ldw	r2,-4(fp)
    f3e8:	1090000c 	andi	r2,r2,16384
    f3ec:	10000226 	beq	r2,zero,f3f8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    f3f0:	00bffd44 	movi	r2,-11
    f3f4:	00000b06 	br	f424 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    f3f8:	e0bffe17 	ldw	r2,-8(fp)
    f3fc:	10c00d17 	ldw	r3,52(r2)
    f400:	e0bffe17 	ldw	r2,-8(fp)
    f404:	10800c17 	ldw	r2,48(r2)
    f408:	18800526 	beq	r3,r2,f420 <altera_avalon_jtag_uart_close+0x54>
    f40c:	e0bffe17 	ldw	r2,-8(fp)
    f410:	10c00917 	ldw	r3,36(r2)
    f414:	e0bffe17 	ldw	r2,-8(fp)
    f418:	10800117 	ldw	r2,4(r2)
    f41c:	18bff136 	bltu	r3,r2,f3e4 <__alt_data_end+0xf800f3e4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    f420:	0005883a 	mov	r2,zero
}
    f424:	e037883a 	mov	sp,fp
    f428:	df000017 	ldw	fp,0(sp)
    f42c:	dec00104 	addi	sp,sp,4
    f430:	f800283a 	ret

0000f434 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    f434:	defffa04 	addi	sp,sp,-24
    f438:	df000515 	stw	fp,20(sp)
    f43c:	df000504 	addi	fp,sp,20
    f440:	e13ffd15 	stw	r4,-12(fp)
    f444:	e17ffe15 	stw	r5,-8(fp)
    f448:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    f44c:	00bff9c4 	movi	r2,-25
    f450:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    f454:	e0bffe17 	ldw	r2,-8(fp)
    f458:	10da8060 	cmpeqi	r3,r2,27137
    f45c:	1800031e 	bne	r3,zero,f46c <altera_avalon_jtag_uart_ioctl+0x38>
    f460:	109a80a0 	cmpeqi	r2,r2,27138
    f464:	1000181e 	bne	r2,zero,f4c8 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    f468:	00002906 	br	f510 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    f46c:	e0bffd17 	ldw	r2,-12(fp)
    f470:	10c00117 	ldw	r3,4(r2)
    f474:	00a00034 	movhi	r2,32768
    f478:	10bfffc4 	addi	r2,r2,-1
    f47c:	18802126 	beq	r3,r2,f504 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    f480:	e0bfff17 	ldw	r2,-4(fp)
    f484:	10800017 	ldw	r2,0(r2)
    f488:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    f48c:	e0bffc17 	ldw	r2,-16(fp)
    f490:	10800090 	cmplti	r2,r2,2
    f494:	1000061e 	bne	r2,zero,f4b0 <altera_avalon_jtag_uart_ioctl+0x7c>
    f498:	e0fffc17 	ldw	r3,-16(fp)
    f49c:	00a00034 	movhi	r2,32768
    f4a0:	10bfffc4 	addi	r2,r2,-1
    f4a4:	18800226 	beq	r3,r2,f4b0 <altera_avalon_jtag_uart_ioctl+0x7c>
    f4a8:	e0bffc17 	ldw	r2,-16(fp)
    f4ac:	00000206 	br	f4b8 <altera_avalon_jtag_uart_ioctl+0x84>
    f4b0:	00a00034 	movhi	r2,32768
    f4b4:	10bfff84 	addi	r2,r2,-2
    f4b8:	e0fffd17 	ldw	r3,-12(fp)
    f4bc:	18800115 	stw	r2,4(r3)
      rc = 0;
    f4c0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    f4c4:	00000f06 	br	f504 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    f4c8:	e0bffd17 	ldw	r2,-12(fp)
    f4cc:	10c00117 	ldw	r3,4(r2)
    f4d0:	00a00034 	movhi	r2,32768
    f4d4:	10bfffc4 	addi	r2,r2,-1
    f4d8:	18800c26 	beq	r3,r2,f50c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    f4dc:	e0bffd17 	ldw	r2,-12(fp)
    f4e0:	10c00917 	ldw	r3,36(r2)
    f4e4:	e0bffd17 	ldw	r2,-12(fp)
    f4e8:	10800117 	ldw	r2,4(r2)
    f4ec:	1885803a 	cmpltu	r2,r3,r2
    f4f0:	10c03fcc 	andi	r3,r2,255
    f4f4:	e0bfff17 	ldw	r2,-4(fp)
    f4f8:	10c00015 	stw	r3,0(r2)
      rc = 0;
    f4fc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    f500:	00000206 	br	f50c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    f504:	0001883a 	nop
    f508:	00000106 	br	f510 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    f50c:	0001883a 	nop

  default:
    break;
  }

  return rc;
    f510:	e0bffb17 	ldw	r2,-20(fp)
}
    f514:	e037883a 	mov	sp,fp
    f518:	df000017 	ldw	fp,0(sp)
    f51c:	dec00104 	addi	sp,sp,4
    f520:	f800283a 	ret

0000f524 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    f524:	defff304 	addi	sp,sp,-52
    f528:	dfc00c15 	stw	ra,48(sp)
    f52c:	df000b15 	stw	fp,44(sp)
    f530:	df000b04 	addi	fp,sp,44
    f534:	e13ffc15 	stw	r4,-16(fp)
    f538:	e17ffd15 	stw	r5,-12(fp)
    f53c:	e1bffe15 	stw	r6,-8(fp)
    f540:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    f544:	e0bffd17 	ldw	r2,-12(fp)
    f548:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    f54c:	00004706 	br	f66c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    f550:	e0bffc17 	ldw	r2,-16(fp)
    f554:	10800a17 	ldw	r2,40(r2)
    f558:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    f55c:	e0bffc17 	ldw	r2,-16(fp)
    f560:	10800b17 	ldw	r2,44(r2)
    f564:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    f568:	e0fff717 	ldw	r3,-36(fp)
    f56c:	e0bff817 	ldw	r2,-32(fp)
    f570:	18800536 	bltu	r3,r2,f588 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    f574:	e0fff717 	ldw	r3,-36(fp)
    f578:	e0bff817 	ldw	r2,-32(fp)
    f57c:	1885c83a 	sub	r2,r3,r2
    f580:	e0bff615 	stw	r2,-40(fp)
    f584:	00000406 	br	f598 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    f588:	00c20004 	movi	r3,2048
    f58c:	e0bff817 	ldw	r2,-32(fp)
    f590:	1885c83a 	sub	r2,r3,r2
    f594:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    f598:	e0bff617 	ldw	r2,-40(fp)
    f59c:	10001e26 	beq	r2,zero,f618 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    f5a0:	e0fffe17 	ldw	r3,-8(fp)
    f5a4:	e0bff617 	ldw	r2,-40(fp)
    f5a8:	1880022e 	bgeu	r3,r2,f5b4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    f5ac:	e0bffe17 	ldw	r2,-8(fp)
    f5b0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    f5b4:	e0bffc17 	ldw	r2,-16(fp)
    f5b8:	10c00e04 	addi	r3,r2,56
    f5bc:	e0bff817 	ldw	r2,-32(fp)
    f5c0:	1885883a 	add	r2,r3,r2
    f5c4:	e1bff617 	ldw	r6,-40(fp)
    f5c8:	100b883a 	mov	r5,r2
    f5cc:	e13ff517 	ldw	r4,-44(fp)
    f5d0:	00076b80 	call	76b8 <memcpy>
      ptr   += n;
    f5d4:	e0fff517 	ldw	r3,-44(fp)
    f5d8:	e0bff617 	ldw	r2,-40(fp)
    f5dc:	1885883a 	add	r2,r3,r2
    f5e0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    f5e4:	e0fffe17 	ldw	r3,-8(fp)
    f5e8:	e0bff617 	ldw	r2,-40(fp)
    f5ec:	1885c83a 	sub	r2,r3,r2
    f5f0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f5f4:	e0fff817 	ldw	r3,-32(fp)
    f5f8:	e0bff617 	ldw	r2,-40(fp)
    f5fc:	1885883a 	add	r2,r3,r2
    f600:	10c1ffcc 	andi	r3,r2,2047
    f604:	e0bffc17 	ldw	r2,-16(fp)
    f608:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    f60c:	e0bffe17 	ldw	r2,-8(fp)
    f610:	00bfcf16 	blt	zero,r2,f550 <__alt_data_end+0xf800f550>
    f614:	00000106 	br	f61c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    f618:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    f61c:	e0fff517 	ldw	r3,-44(fp)
    f620:	e0bffd17 	ldw	r2,-12(fp)
    f624:	1880141e 	bne	r3,r2,f678 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    f628:	e0bfff17 	ldw	r2,-4(fp)
    f62c:	1090000c 	andi	r2,r2,16384
    f630:	1000131e 	bne	r2,zero,f680 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    f634:	0001883a 	nop
    f638:	e0bffc17 	ldw	r2,-16(fp)
    f63c:	10c00a17 	ldw	r3,40(r2)
    f640:	e0bff717 	ldw	r2,-36(fp)
    f644:	1880051e 	bne	r3,r2,f65c <altera_avalon_jtag_uart_read+0x138>
    f648:	e0bffc17 	ldw	r2,-16(fp)
    f64c:	10c00917 	ldw	r3,36(r2)
    f650:	e0bffc17 	ldw	r2,-16(fp)
    f654:	10800117 	ldw	r2,4(r2)
    f658:	18bff736 	bltu	r3,r2,f638 <__alt_data_end+0xf800f638>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    f65c:	e0bffc17 	ldw	r2,-16(fp)
    f660:	10c00a17 	ldw	r3,40(r2)
    f664:	e0bff717 	ldw	r2,-36(fp)
    f668:	18800726 	beq	r3,r2,f688 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    f66c:	e0bffe17 	ldw	r2,-8(fp)
    f670:	00bfb716 	blt	zero,r2,f550 <__alt_data_end+0xf800f550>
    f674:	00000506 	br	f68c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    f678:	0001883a 	nop
    f67c:	00000306 	br	f68c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    f680:	0001883a 	nop
    f684:	00000106 	br	f68c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    f688:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    f68c:	e0fff517 	ldw	r3,-44(fp)
    f690:	e0bffd17 	ldw	r2,-12(fp)
    f694:	18801826 	beq	r3,r2,f6f8 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f698:	0005303a 	rdctl	r2,status
    f69c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f6a0:	e0fffb17 	ldw	r3,-20(fp)
    f6a4:	00bfff84 	movi	r2,-2
    f6a8:	1884703a 	and	r2,r3,r2
    f6ac:	1001703a 	wrctl	status,r2
  
  return context;
    f6b0:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    f6b4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f6b8:	e0bffc17 	ldw	r2,-16(fp)
    f6bc:	10800817 	ldw	r2,32(r2)
    f6c0:	10c00054 	ori	r3,r2,1
    f6c4:	e0bffc17 	ldw	r2,-16(fp)
    f6c8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f6cc:	e0bffc17 	ldw	r2,-16(fp)
    f6d0:	10800017 	ldw	r2,0(r2)
    f6d4:	10800104 	addi	r2,r2,4
    f6d8:	1007883a 	mov	r3,r2
    f6dc:	e0bffc17 	ldw	r2,-16(fp)
    f6e0:	10800817 	ldw	r2,32(r2)
    f6e4:	18800035 	stwio	r2,0(r3)
    f6e8:	e0bffa17 	ldw	r2,-24(fp)
    f6ec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f6f0:	e0bff917 	ldw	r2,-28(fp)
    f6f4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    f6f8:	e0fff517 	ldw	r3,-44(fp)
    f6fc:	e0bffd17 	ldw	r2,-12(fp)
    f700:	18800426 	beq	r3,r2,f714 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    f704:	e0fff517 	ldw	r3,-44(fp)
    f708:	e0bffd17 	ldw	r2,-12(fp)
    f70c:	1885c83a 	sub	r2,r3,r2
    f710:	00000606 	br	f72c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    f714:	e0bfff17 	ldw	r2,-4(fp)
    f718:	1090000c 	andi	r2,r2,16384
    f71c:	10000226 	beq	r2,zero,f728 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    f720:	00bffd44 	movi	r2,-11
    f724:	00000106 	br	f72c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    f728:	00bffec4 	movi	r2,-5
}
    f72c:	e037883a 	mov	sp,fp
    f730:	dfc00117 	ldw	ra,4(sp)
    f734:	df000017 	ldw	fp,0(sp)
    f738:	dec00204 	addi	sp,sp,8
    f73c:	f800283a 	ret

0000f740 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    f740:	defff304 	addi	sp,sp,-52
    f744:	dfc00c15 	stw	ra,48(sp)
    f748:	df000b15 	stw	fp,44(sp)
    f74c:	df000b04 	addi	fp,sp,44
    f750:	e13ffc15 	stw	r4,-16(fp)
    f754:	e17ffd15 	stw	r5,-12(fp)
    f758:	e1bffe15 	stw	r6,-8(fp)
    f75c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    f760:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    f764:	e0bffd17 	ldw	r2,-12(fp)
    f768:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    f76c:	00003706 	br	f84c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    f770:	e0bffc17 	ldw	r2,-16(fp)
    f774:	10800c17 	ldw	r2,48(r2)
    f778:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    f77c:	e0bffc17 	ldw	r2,-16(fp)
    f780:	10800d17 	ldw	r2,52(r2)
    f784:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    f788:	e0fff917 	ldw	r3,-28(fp)
    f78c:	e0bff517 	ldw	r2,-44(fp)
    f790:	1880062e 	bgeu	r3,r2,f7ac <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    f794:	e0fff517 	ldw	r3,-44(fp)
    f798:	e0bff917 	ldw	r2,-28(fp)
    f79c:	1885c83a 	sub	r2,r3,r2
    f7a0:	10bfffc4 	addi	r2,r2,-1
    f7a4:	e0bff615 	stw	r2,-40(fp)
    f7a8:	00000b06 	br	f7d8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    f7ac:	e0bff517 	ldw	r2,-44(fp)
    f7b0:	10000526 	beq	r2,zero,f7c8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    f7b4:	00c20004 	movi	r3,2048
    f7b8:	e0bff917 	ldw	r2,-28(fp)
    f7bc:	1885c83a 	sub	r2,r3,r2
    f7c0:	e0bff615 	stw	r2,-40(fp)
    f7c4:	00000406 	br	f7d8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    f7c8:	00c1ffc4 	movi	r3,2047
    f7cc:	e0bff917 	ldw	r2,-28(fp)
    f7d0:	1885c83a 	sub	r2,r3,r2
    f7d4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    f7d8:	e0bff617 	ldw	r2,-40(fp)
    f7dc:	10001e26 	beq	r2,zero,f858 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    f7e0:	e0fffe17 	ldw	r3,-8(fp)
    f7e4:	e0bff617 	ldw	r2,-40(fp)
    f7e8:	1880022e 	bgeu	r3,r2,f7f4 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    f7ec:	e0bffe17 	ldw	r2,-8(fp)
    f7f0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    f7f4:	e0bffc17 	ldw	r2,-16(fp)
    f7f8:	10c20e04 	addi	r3,r2,2104
    f7fc:	e0bff917 	ldw	r2,-28(fp)
    f800:	1885883a 	add	r2,r3,r2
    f804:	e1bff617 	ldw	r6,-40(fp)
    f808:	e17ffd17 	ldw	r5,-12(fp)
    f80c:	1009883a 	mov	r4,r2
    f810:	00076b80 	call	76b8 <memcpy>
      ptr   += n;
    f814:	e0fffd17 	ldw	r3,-12(fp)
    f818:	e0bff617 	ldw	r2,-40(fp)
    f81c:	1885883a 	add	r2,r3,r2
    f820:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    f824:	e0fffe17 	ldw	r3,-8(fp)
    f828:	e0bff617 	ldw	r2,-40(fp)
    f82c:	1885c83a 	sub	r2,r3,r2
    f830:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f834:	e0fff917 	ldw	r3,-28(fp)
    f838:	e0bff617 	ldw	r2,-40(fp)
    f83c:	1885883a 	add	r2,r3,r2
    f840:	10c1ffcc 	andi	r3,r2,2047
    f844:	e0bffc17 	ldw	r2,-16(fp)
    f848:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    f84c:	e0bffe17 	ldw	r2,-8(fp)
    f850:	00bfc716 	blt	zero,r2,f770 <__alt_data_end+0xf800f770>
    f854:	00000106 	br	f85c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    f858:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f85c:	0005303a 	rdctl	r2,status
    f860:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f864:	e0fffb17 	ldw	r3,-20(fp)
    f868:	00bfff84 	movi	r2,-2
    f86c:	1884703a 	and	r2,r3,r2
    f870:	1001703a 	wrctl	status,r2
  
  return context;
    f874:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    f878:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f87c:	e0bffc17 	ldw	r2,-16(fp)
    f880:	10800817 	ldw	r2,32(r2)
    f884:	10c00094 	ori	r3,r2,2
    f888:	e0bffc17 	ldw	r2,-16(fp)
    f88c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f890:	e0bffc17 	ldw	r2,-16(fp)
    f894:	10800017 	ldw	r2,0(r2)
    f898:	10800104 	addi	r2,r2,4
    f89c:	1007883a 	mov	r3,r2
    f8a0:	e0bffc17 	ldw	r2,-16(fp)
    f8a4:	10800817 	ldw	r2,32(r2)
    f8a8:	18800035 	stwio	r2,0(r3)
    f8ac:	e0bffa17 	ldw	r2,-24(fp)
    f8b0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f8b4:	e0bff817 	ldw	r2,-32(fp)
    f8b8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    f8bc:	e0bffe17 	ldw	r2,-8(fp)
    f8c0:	0080100e 	bge	zero,r2,f904 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    f8c4:	e0bfff17 	ldw	r2,-4(fp)
    f8c8:	1090000c 	andi	r2,r2,16384
    f8cc:	1000101e 	bne	r2,zero,f910 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    f8d0:	0001883a 	nop
    f8d4:	e0bffc17 	ldw	r2,-16(fp)
    f8d8:	10c00d17 	ldw	r3,52(r2)
    f8dc:	e0bff517 	ldw	r2,-44(fp)
    f8e0:	1880051e 	bne	r3,r2,f8f8 <altera_avalon_jtag_uart_write+0x1b8>
    f8e4:	e0bffc17 	ldw	r2,-16(fp)
    f8e8:	10c00917 	ldw	r3,36(r2)
    f8ec:	e0bffc17 	ldw	r2,-16(fp)
    f8f0:	10800117 	ldw	r2,4(r2)
    f8f4:	18bff736 	bltu	r3,r2,f8d4 <__alt_data_end+0xf800f8d4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    f8f8:	e0bffc17 	ldw	r2,-16(fp)
    f8fc:	10800917 	ldw	r2,36(r2)
    f900:	1000051e 	bne	r2,zero,f918 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    f904:	e0bffe17 	ldw	r2,-8(fp)
    f908:	00bfd016 	blt	zero,r2,f84c <__alt_data_end+0xf800f84c>
    f90c:	00000306 	br	f91c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    f910:	0001883a 	nop
    f914:	00000106 	br	f91c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    f918:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    f91c:	e0fffd17 	ldw	r3,-12(fp)
    f920:	e0bff717 	ldw	r2,-36(fp)
    f924:	18800426 	beq	r3,r2,f938 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    f928:	e0fffd17 	ldw	r3,-12(fp)
    f92c:	e0bff717 	ldw	r2,-36(fp)
    f930:	1885c83a 	sub	r2,r3,r2
    f934:	00000606 	br	f950 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    f938:	e0bfff17 	ldw	r2,-4(fp)
    f93c:	1090000c 	andi	r2,r2,16384
    f940:	10000226 	beq	r2,zero,f94c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    f944:	00bffd44 	movi	r2,-11
    f948:	00000106 	br	f950 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    f94c:	00bffec4 	movi	r2,-5
}
    f950:	e037883a 	mov	sp,fp
    f954:	dfc00117 	ldw	ra,4(sp)
    f958:	df000017 	ldw	fp,0(sp)
    f95c:	dec00204 	addi	sp,sp,8
    f960:	f800283a 	ret

0000f964 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
    f964:	defffa04 	addi	sp,sp,-24
    f968:	dfc00515 	stw	ra,20(sp)
    f96c:	df000415 	stw	fp,16(sp)
    f970:	df000404 	addi	fp,sp,16
    f974:	e13ffe15 	stw	r4,-8(fp)
    f978:	2805883a 	mov	r2,r5
    f97c:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
    f980:	e0bffe17 	ldw	r2,-8(fp)
    f984:	10800017 	ldw	r2,0(r2)
    f988:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
    f98c:	008003f4 	movhi	r2,15
    f990:	10909004 	addi	r2,r2,16960
    f994:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    f998:	e0bffe17 	ldw	r2,-8(fp)
    f99c:	10800803 	ldbu	r2,32(r2)
    f9a0:	10803fcc 	andi	r2,r2,255
    f9a4:	1080201c 	xori	r2,r2,128
    f9a8:	10bfe004 	addi	r2,r2,-128
    f9ac:	1000151e 	bne	r2,zero,fa04 <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
    f9b0:	00000906 	br	f9d8 <lcd_write_command+0x74>
    if (--i == 0)
    f9b4:	e0bffc17 	ldw	r2,-16(fp)
    f9b8:	10bfffc4 	addi	r2,r2,-1
    f9bc:	e0bffc15 	stw	r2,-16(fp)
    f9c0:	e0bffc17 	ldw	r2,-16(fp)
    f9c4:	1000041e 	bne	r2,zero,f9d8 <lcd_write_command+0x74>
    {
      sp->broken = 1;
    f9c8:	e0bffe17 	ldw	r2,-8(fp)
    f9cc:	00c00044 	movi	r3,1
    f9d0:	10c00805 	stb	r3,32(r2)
      return;
    f9d4:	00000c06 	br	fa08 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
    f9d8:	e0bffd17 	ldw	r2,-12(fp)
    f9dc:	10800104 	addi	r2,r2,4
    f9e0:	10800037 	ldwio	r2,0(r2)
    f9e4:	1080200c 	andi	r2,r2,128
    f9e8:	103ff21e 	bne	r2,zero,f9b4 <__alt_data_end+0xf800f9b4>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
    f9ec:	01001904 	movi	r4,100
    f9f0:	000ecb80 	call	ecb8 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
    f9f4:	e0bffd17 	ldw	r2,-12(fp)
    f9f8:	e0ffff03 	ldbu	r3,-4(fp)
    f9fc:	10c00035 	stwio	r3,0(r2)
    fa00:	00000106 	br	fa08 <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
    fa04:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
    fa08:	e037883a 	mov	sp,fp
    fa0c:	dfc00117 	ldw	ra,4(sp)
    fa10:	df000017 	ldw	fp,0(sp)
    fa14:	dec00204 	addi	sp,sp,8
    fa18:	f800283a 	ret

0000fa1c <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
    fa1c:	defffa04 	addi	sp,sp,-24
    fa20:	dfc00515 	stw	ra,20(sp)
    fa24:	df000415 	stw	fp,16(sp)
    fa28:	df000404 	addi	fp,sp,16
    fa2c:	e13ffe15 	stw	r4,-8(fp)
    fa30:	2805883a 	mov	r2,r5
    fa34:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
    fa38:	e0bffe17 	ldw	r2,-8(fp)
    fa3c:	10800017 	ldw	r2,0(r2)
    fa40:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
    fa44:	008003f4 	movhi	r2,15
    fa48:	10909004 	addi	r2,r2,16960
    fa4c:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    fa50:	e0bffe17 	ldw	r2,-8(fp)
    fa54:	10800803 	ldbu	r2,32(r2)
    fa58:	10803fcc 	andi	r2,r2,255
    fa5c:	1080201c 	xori	r2,r2,128
    fa60:	10bfe004 	addi	r2,r2,-128
    fa64:	10001d1e 	bne	r2,zero,fadc <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
    fa68:	00000906 	br	fa90 <lcd_write_data+0x74>
    if (--i == 0)
    fa6c:	e0bffc17 	ldw	r2,-16(fp)
    fa70:	10bfffc4 	addi	r2,r2,-1
    fa74:	e0bffc15 	stw	r2,-16(fp)
    fa78:	e0bffc17 	ldw	r2,-16(fp)
    fa7c:	1000041e 	bne	r2,zero,fa90 <lcd_write_data+0x74>
    {
      sp->broken = 1;
    fa80:	e0bffe17 	ldw	r2,-8(fp)
    fa84:	00c00044 	movi	r3,1
    fa88:	10c00805 	stb	r3,32(r2)
      return;
    fa8c:	00001406 	br	fae0 <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
    fa90:	e0bffd17 	ldw	r2,-12(fp)
    fa94:	10800104 	addi	r2,r2,4
    fa98:	10800037 	ldwio	r2,0(r2)
    fa9c:	1080200c 	andi	r2,r2,128
    faa0:	103ff21e 	bne	r2,zero,fa6c <__alt_data_end+0xf800fa6c>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
    faa4:	01001904 	movi	r4,100
    faa8:	000ecb80 	call	ecb8 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
    faac:	e0bffd17 	ldw	r2,-12(fp)
    fab0:	10800204 	addi	r2,r2,8
    fab4:	1007883a 	mov	r3,r2
    fab8:	e0bfff03 	ldbu	r2,-4(fp)
    fabc:	18800035 	stwio	r2,0(r3)

  sp->address++;
    fac0:	e0bffe17 	ldw	r2,-8(fp)
    fac4:	108008c3 	ldbu	r2,35(r2)
    fac8:	10800044 	addi	r2,r2,1
    facc:	1007883a 	mov	r3,r2
    fad0:	e0bffe17 	ldw	r2,-8(fp)
    fad4:	10c008c5 	stb	r3,35(r2)
    fad8:	00000106 	br	fae0 <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
    fadc:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
    fae0:	e037883a 	mov	sp,fp
    fae4:	dfc00117 	ldw	ra,4(sp)
    fae8:	df000017 	ldw	fp,0(sp)
    faec:	dec00204 	addi	sp,sp,8
    faf0:	f800283a 	ret

0000faf4 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
    faf4:	defffc04 	addi	sp,sp,-16
    faf8:	dfc00315 	stw	ra,12(sp)
    fafc:	df000215 	stw	fp,8(sp)
    fb00:	df000204 	addi	fp,sp,8
    fb04:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
    fb08:	01400044 	movi	r5,1
    fb0c:	e13fff17 	ldw	r4,-4(fp)
    fb10:	000f9640 	call	f964 <lcd_write_command>

  sp->x = 0;
    fb14:	e0bfff17 	ldw	r2,-4(fp)
    fb18:	10000845 	stb	zero,33(r2)
  sp->y = 0;
    fb1c:	e0bfff17 	ldw	r2,-4(fp)
    fb20:	10000885 	stb	zero,34(r2)
  sp->address = 0;
    fb24:	e0bfff17 	ldw	r2,-4(fp)
    fb28:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    fb2c:	e03ffe15 	stw	zero,-8(fp)
    fb30:	00001b06 	br	fba0 <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    fb34:	e0bffe17 	ldw	r2,-8(fp)
    fb38:	108018e4 	muli	r2,r2,99
    fb3c:	10801004 	addi	r2,r2,64
    fb40:	e0ffff17 	ldw	r3,-4(fp)
    fb44:	1885883a 	add	r2,r3,r2
    fb48:	01801444 	movi	r6,81
    fb4c:	01400804 	movi	r5,32
    fb50:	1009883a 	mov	r4,r2
    fb54:	000795c0 	call	795c <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    fb58:	e0bffe17 	ldw	r2,-8(fp)
    fb5c:	108018e4 	muli	r2,r2,99
    fb60:	10800c04 	addi	r2,r2,48
    fb64:	e0ffff17 	ldw	r3,-4(fp)
    fb68:	1885883a 	add	r2,r3,r2
    fb6c:	01800404 	movi	r6,16
    fb70:	01400804 	movi	r5,32
    fb74:	1009883a 	mov	r4,r2
    fb78:	000795c0 	call	795c <memset>
    sp->line[y].width = 0;
    fb7c:	e0ffff17 	ldw	r3,-4(fp)
    fb80:	e0bffe17 	ldw	r2,-8(fp)
    fb84:	108018e4 	muli	r2,r2,99
    fb88:	1885883a 	add	r2,r3,r2
    fb8c:	10802444 	addi	r2,r2,145
    fb90:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    fb94:	e0bffe17 	ldw	r2,-8(fp)
    fb98:	10800044 	addi	r2,r2,1
    fb9c:	e0bffe15 	stw	r2,-8(fp)
    fba0:	e0bffe17 	ldw	r2,-8(fp)
    fba4:	10800090 	cmplti	r2,r2,2
    fba8:	103fe21e 	bne	r2,zero,fb34 <__alt_data_end+0xf800fb34>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
    fbac:	0001883a 	nop
    fbb0:	e037883a 	mov	sp,fp
    fbb4:	dfc00117 	ldw	ra,4(sp)
    fbb8:	df000017 	ldw	fp,0(sp)
    fbbc:	dec00204 	addi	sp,sp,8
    fbc0:	f800283a 	ret

0000fbc4 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
    fbc4:	defff704 	addi	sp,sp,-36
    fbc8:	dfc00815 	stw	ra,32(sp)
    fbcc:	df000715 	stw	fp,28(sp)
    fbd0:	df000704 	addi	fp,sp,28
    fbd4:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
    fbd8:	e0bfff17 	ldw	r2,-4(fp)
    fbdc:	10800943 	ldbu	r2,37(r2)
    fbe0:	10803fcc 	andi	r2,r2,255
    fbe4:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    fbe8:	e03ff915 	stw	zero,-28(fp)
    fbec:	00006706 	br	fd8c <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
    fbf0:	e0ffff17 	ldw	r3,-4(fp)
    fbf4:	e0bff917 	ldw	r2,-28(fp)
    fbf8:	108018e4 	muli	r2,r2,99
    fbfc:	1885883a 	add	r2,r3,r2
    fc00:	10802444 	addi	r2,r2,145
    fc04:	10800003 	ldbu	r2,0(r2)
    fc08:	10803fcc 	andi	r2,r2,255
    fc0c:	1080201c 	xori	r2,r2,128
    fc10:	10bfe004 	addi	r2,r2,-128
    fc14:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    fc18:	e0ffff17 	ldw	r3,-4(fp)
    fc1c:	e0bff917 	ldw	r2,-28(fp)
    fc20:	108018e4 	muli	r2,r2,99
    fc24:	1885883a 	add	r2,r3,r2
    fc28:	10802484 	addi	r2,r2,146
    fc2c:	10800003 	ldbu	r2,0(r2)
    fc30:	10c03fcc 	andi	r3,r2,255
    fc34:	e0bffc17 	ldw	r2,-16(fp)
    fc38:	1885383a 	mul	r2,r3,r2
    fc3c:	1005d23a 	srai	r2,r2,8
    fc40:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
    fc44:	e0fffb17 	ldw	r3,-20(fp)
    fc48:	e0bffd17 	ldw	r2,-12(fp)
    fc4c:	18800116 	blt	r3,r2,fc54 <lcd_repaint_screen+0x90>
      offset = 0;
    fc50:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
    fc54:	e03ffa15 	stw	zero,-24(fp)
    fc58:	00004606 	br	fd74 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
    fc5c:	e0fffa17 	ldw	r3,-24(fp)
    fc60:	e0bffb17 	ldw	r2,-20(fp)
    fc64:	1885883a 	add	r2,r3,r2
    fc68:	e17ffd17 	ldw	r5,-12(fp)
    fc6c:	1009883a 	mov	r4,r2
    fc70:	0001a400 	call	1a40 <__modsi3>
    fc74:	1009883a 	mov	r4,r2
    fc78:	e0ffff17 	ldw	r3,-4(fp)
    fc7c:	e0bff917 	ldw	r2,-28(fp)
    fc80:	108018e4 	muli	r2,r2,99
    fc84:	1885883a 	add	r2,r3,r2
    fc88:	1105883a 	add	r2,r2,r4
    fc8c:	10801004 	addi	r2,r2,64
    fc90:	10800003 	ldbu	r2,0(r2)
    fc94:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
    fc98:	e0ffff17 	ldw	r3,-4(fp)
    fc9c:	e0bff917 	ldw	r2,-28(fp)
    fca0:	108018e4 	muli	r2,r2,99
    fca4:	1887883a 	add	r3,r3,r2
    fca8:	e0bffa17 	ldw	r2,-24(fp)
    fcac:	1885883a 	add	r2,r3,r2
    fcb0:	10800c04 	addi	r2,r2,48
    fcb4:	10800003 	ldbu	r2,0(r2)
    fcb8:	10c03fcc 	andi	r3,r2,255
    fcbc:	18c0201c 	xori	r3,r3,128
    fcc0:	18ffe004 	addi	r3,r3,-128
    fcc4:	e0bffe07 	ldb	r2,-8(fp)
    fcc8:	18802726 	beq	r3,r2,fd68 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
    fccc:	e0fff917 	ldw	r3,-28(fp)
    fcd0:	d0a00f04 	addi	r2,gp,-32708
    fcd4:	1885883a 	add	r2,r3,r2
    fcd8:	10800003 	ldbu	r2,0(r2)
    fcdc:	1007883a 	mov	r3,r2
    fce0:	e0bffa17 	ldw	r2,-24(fp)
    fce4:	1885883a 	add	r2,r3,r2
    fce8:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
    fcec:	e0fffe43 	ldbu	r3,-7(fp)
    fcf0:	e0bfff17 	ldw	r2,-4(fp)
    fcf4:	108008c3 	ldbu	r2,35(r2)
    fcf8:	10803fcc 	andi	r2,r2,255
    fcfc:	1080201c 	xori	r2,r2,128
    fd00:	10bfe004 	addi	r2,r2,-128
    fd04:	18800a26 	beq	r3,r2,fd30 <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
    fd08:	e0fffe43 	ldbu	r3,-7(fp)
    fd0c:	00bfe004 	movi	r2,-128
    fd10:	1884b03a 	or	r2,r3,r2
    fd14:	10803fcc 	andi	r2,r2,255
    fd18:	100b883a 	mov	r5,r2
    fd1c:	e13fff17 	ldw	r4,-4(fp)
    fd20:	000f9640 	call	f964 <lcd_write_command>
          sp->address = address;
    fd24:	e0fffe43 	ldbu	r3,-7(fp)
    fd28:	e0bfff17 	ldw	r2,-4(fp)
    fd2c:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
    fd30:	e0bffe03 	ldbu	r2,-8(fp)
    fd34:	10803fcc 	andi	r2,r2,255
    fd38:	100b883a 	mov	r5,r2
    fd3c:	e13fff17 	ldw	r4,-4(fp)
    fd40:	000fa1c0 	call	fa1c <lcd_write_data>
        sp->line[y].visible[x] = c;
    fd44:	e0ffff17 	ldw	r3,-4(fp)
    fd48:	e0bff917 	ldw	r2,-28(fp)
    fd4c:	108018e4 	muli	r2,r2,99
    fd50:	1887883a 	add	r3,r3,r2
    fd54:	e0bffa17 	ldw	r2,-24(fp)
    fd58:	1885883a 	add	r2,r3,r2
    fd5c:	10800c04 	addi	r2,r2,48
    fd60:	e0fffe03 	ldbu	r3,-8(fp)
    fd64:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
    fd68:	e0bffa17 	ldw	r2,-24(fp)
    fd6c:	10800044 	addi	r2,r2,1
    fd70:	e0bffa15 	stw	r2,-24(fp)
    fd74:	e0bffa17 	ldw	r2,-24(fp)
    fd78:	10800410 	cmplti	r2,r2,16
    fd7c:	103fb71e 	bne	r2,zero,fc5c <__alt_data_end+0xf800fc5c>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    fd80:	e0bff917 	ldw	r2,-28(fp)
    fd84:	10800044 	addi	r2,r2,1
    fd88:	e0bff915 	stw	r2,-28(fp)
    fd8c:	e0bff917 	ldw	r2,-28(fp)
    fd90:	10800090 	cmplti	r2,r2,2
    fd94:	103f961e 	bne	r2,zero,fbf0 <__alt_data_end+0xf800fbf0>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
    fd98:	0001883a 	nop
    fd9c:	e037883a 	mov	sp,fp
    fda0:	dfc00117 	ldw	ra,4(sp)
    fda4:	df000017 	ldw	fp,0(sp)
    fda8:	dec00204 	addi	sp,sp,8
    fdac:	f800283a 	ret

0000fdb0 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
    fdb0:	defffc04 	addi	sp,sp,-16
    fdb4:	dfc00315 	stw	ra,12(sp)
    fdb8:	df000215 	stw	fp,8(sp)
    fdbc:	df000204 	addi	fp,sp,8
    fdc0:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    fdc4:	e03ffe15 	stw	zero,-8(fp)
    fdc8:	00001d06 	br	fe40 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
    fdcc:	e0bffe17 	ldw	r2,-8(fp)
    fdd0:	00800f16 	blt	zero,r2,fe10 <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    fdd4:	e0bffe17 	ldw	r2,-8(fp)
    fdd8:	108018e4 	muli	r2,r2,99
    fddc:	10801004 	addi	r2,r2,64
    fde0:	e0ffff17 	ldw	r3,-4(fp)
    fde4:	1889883a 	add	r4,r3,r2
    fde8:	e0bffe17 	ldw	r2,-8(fp)
    fdec:	10800044 	addi	r2,r2,1
    fdf0:	108018e4 	muli	r2,r2,99
    fdf4:	10801004 	addi	r2,r2,64
    fdf8:	e0ffff17 	ldw	r3,-4(fp)
    fdfc:	1885883a 	add	r2,r3,r2
    fe00:	01801404 	movi	r6,80
    fe04:	100b883a 	mov	r5,r2
    fe08:	00076b80 	call	76b8 <memcpy>
    fe0c:	00000906 	br	fe34 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
    fe10:	e0bffe17 	ldw	r2,-8(fp)
    fe14:	108018e4 	muli	r2,r2,99
    fe18:	10801004 	addi	r2,r2,64
    fe1c:	e0ffff17 	ldw	r3,-4(fp)
    fe20:	1885883a 	add	r2,r3,r2
    fe24:	01801404 	movi	r6,80
    fe28:	01400804 	movi	r5,32
    fe2c:	1009883a 	mov	r4,r2
    fe30:	000795c0 	call	795c <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    fe34:	e0bffe17 	ldw	r2,-8(fp)
    fe38:	10800044 	addi	r2,r2,1
    fe3c:	e0bffe15 	stw	r2,-8(fp)
    fe40:	e0bffe17 	ldw	r2,-8(fp)
    fe44:	10800090 	cmplti	r2,r2,2
    fe48:	103fe01e 	bne	r2,zero,fdcc <__alt_data_end+0xf800fdcc>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
    fe4c:	e0bfff17 	ldw	r2,-4(fp)
    fe50:	10800883 	ldbu	r2,34(r2)
    fe54:	10bfffc4 	addi	r2,r2,-1
    fe58:	1007883a 	mov	r3,r2
    fe5c:	e0bfff17 	ldw	r2,-4(fp)
    fe60:	10c00885 	stb	r3,34(r2)
}
    fe64:	0001883a 	nop
    fe68:	e037883a 	mov	sp,fp
    fe6c:	dfc00117 	ldw	ra,4(sp)
    fe70:	df000017 	ldw	fp,0(sp)
    fe74:	dec00204 	addi	sp,sp,8
    fe78:	f800283a 	ret

0000fe7c <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
    fe7c:	defff904 	addi	sp,sp,-28
    fe80:	dfc00615 	stw	ra,24(sp)
    fe84:	df000515 	stw	fp,20(sp)
    fe88:	df000504 	addi	fp,sp,20
    fe8c:	e13ffe15 	stw	r4,-8(fp)
    fe90:	2805883a 	mov	r2,r5
    fe94:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
    fe98:	e03ffb15 	stw	zero,-20(fp)
    fe9c:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
    fea0:	e0bffe17 	ldw	r2,-8(fp)
    fea4:	10800a03 	ldbu	r2,40(r2)
    fea8:	10803fcc 	andi	r2,r2,255
    feac:	1080201c 	xori	r2,r2,128
    feb0:	10bfe004 	addi	r2,r2,-128
    feb4:	108016d8 	cmpnei	r2,r2,91
    feb8:	1000411e 	bne	r2,zero,ffc0 <lcd_handle_escape+0x144>
  {
    char * ptr = sp->escape+1;
    febc:	e0bffe17 	ldw	r2,-8(fp)
    fec0:	10800a04 	addi	r2,r2,40
    fec4:	10800044 	addi	r2,r2,1
    fec8:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
    fecc:	00000c06 	br	ff00 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
    fed0:	e0bffb17 	ldw	r2,-20(fp)
    fed4:	10c002a4 	muli	r3,r2,10
    fed8:	e0bffd17 	ldw	r2,-12(fp)
    fedc:	11000044 	addi	r4,r2,1
    fee0:	e13ffd15 	stw	r4,-12(fp)
    fee4:	10800003 	ldbu	r2,0(r2)
    fee8:	10803fcc 	andi	r2,r2,255
    feec:	1080201c 	xori	r2,r2,128
    fef0:	10bfe004 	addi	r2,r2,-128
    fef4:	10bff404 	addi	r2,r2,-48
    fef8:	1885883a 	add	r2,r3,r2
    fefc:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
    ff00:	d0e01117 	ldw	r3,-32700(gp)
    ff04:	e0bffd17 	ldw	r2,-12(fp)
    ff08:	10800003 	ldbu	r2,0(r2)
    ff0c:	10803fcc 	andi	r2,r2,255
    ff10:	1080201c 	xori	r2,r2,128
    ff14:	10bfe004 	addi	r2,r2,-128
    ff18:	10800044 	addi	r2,r2,1
    ff1c:	1885883a 	add	r2,r3,r2
    ff20:	10800003 	ldbu	r2,0(r2)
    ff24:	10803fcc 	andi	r2,r2,255
    ff28:	1080010c 	andi	r2,r2,4
    ff2c:	103fe81e 	bne	r2,zero,fed0 <__alt_data_end+0xf800fed0>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    ff30:	e0bffd17 	ldw	r2,-12(fp)
    ff34:	10800003 	ldbu	r2,0(r2)
    ff38:	10803fcc 	andi	r2,r2,255
    ff3c:	1080201c 	xori	r2,r2,128
    ff40:	10bfe004 	addi	r2,r2,-128
    ff44:	10800ed8 	cmpnei	r2,r2,59
    ff48:	10001f1e 	bne	r2,zero,ffc8 <lcd_handle_escape+0x14c>
    {
      ptr++;
    ff4c:	e0bffd17 	ldw	r2,-12(fp)
    ff50:	10800044 	addi	r2,r2,1
    ff54:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
    ff58:	00000c06 	br	ff8c <lcd_handle_escape+0x110>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    ff5c:	e0bffc17 	ldw	r2,-16(fp)
    ff60:	10c002a4 	muli	r3,r2,10
    ff64:	e0bffd17 	ldw	r2,-12(fp)
    ff68:	11000044 	addi	r4,r2,1
    ff6c:	e13ffd15 	stw	r4,-12(fp)
    ff70:	10800003 	ldbu	r2,0(r2)
    ff74:	10803fcc 	andi	r2,r2,255
    ff78:	1080201c 	xori	r2,r2,128
    ff7c:	10bfe004 	addi	r2,r2,-128
    ff80:	10bff404 	addi	r2,r2,-48
    ff84:	1885883a 	add	r2,r3,r2
    ff88:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
    ff8c:	d0e01117 	ldw	r3,-32700(gp)
    ff90:	e0bffd17 	ldw	r2,-12(fp)
    ff94:	10800003 	ldbu	r2,0(r2)
    ff98:	10803fcc 	andi	r2,r2,255
    ff9c:	1080201c 	xori	r2,r2,128
    ffa0:	10bfe004 	addi	r2,r2,-128
    ffa4:	10800044 	addi	r2,r2,1
    ffa8:	1885883a 	add	r2,r3,r2
    ffac:	10800003 	ldbu	r2,0(r2)
    ffb0:	10803fcc 	andi	r2,r2,255
    ffb4:	1080010c 	andi	r2,r2,4
    ffb8:	103fe81e 	bne	r2,zero,ff5c <__alt_data_end+0xf800ff5c>
    ffbc:	00000206 	br	ffc8 <lcd_handle_escape+0x14c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
    ffc0:	00bfffc4 	movi	r2,-1
    ffc4:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
    ffc8:	e0bfff07 	ldb	r2,-4(fp)
    ffcc:	10c012a0 	cmpeqi	r3,r2,74
    ffd0:	1800291e 	bne	r3,zero,10078 <lcd_handle_escape+0x1fc>
    ffd4:	10c012c8 	cmpgei	r3,r2,75
    ffd8:	1800031e 	bne	r3,zero,ffe8 <lcd_handle_escape+0x16c>
    ffdc:	10801220 	cmpeqi	r2,r2,72
    ffe0:	1000061e 	bne	r2,zero,fffc <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
    ffe4:	00004a06 	br	10110 <lcd_handle_escape+0x294>
    }
  }
  else
    parm1 = -1;

  switch (c)
    ffe8:	10c012e0 	cmpeqi	r3,r2,75
    ffec:	1800281e 	bne	r3,zero,10090 <lcd_handle_escape+0x214>
    fff0:	108019a0 	cmpeqi	r2,r2,102
    fff4:	1000011e 	bne	r2,zero,fffc <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
    fff8:	00004506 	br	10110 <lcd_handle_escape+0x294>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
    fffc:	e0bffc17 	ldw	r2,-16(fp)
   10000:	0080050e 	bge	zero,r2,10018 <lcd_handle_escape+0x19c>
      sp->x = parm2 - 1;
   10004:	e0bffc17 	ldw	r2,-16(fp)
   10008:	10bfffc4 	addi	r2,r2,-1
   1000c:	1007883a 	mov	r3,r2
   10010:	e0bffe17 	ldw	r2,-8(fp)
   10014:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
   10018:	e0bffb17 	ldw	r2,-20(fp)
   1001c:	0080370e 	bge	zero,r2,100fc <lcd_handle_escape+0x280>
    {
      sp->y = parm1 - 1;
   10020:	e0bffb17 	ldw	r2,-20(fp)
   10024:	10bfffc4 	addi	r2,r2,-1
   10028:	1007883a 	mov	r3,r2
   1002c:	e0bffe17 	ldw	r2,-8(fp)
   10030:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
   10034:	e0bffe17 	ldw	r2,-8(fp)
   10038:	10800883 	ldbu	r2,34(r2)
   1003c:	10803fcc 	andi	r2,r2,255
   10040:	10800170 	cmpltui	r2,r2,5
   10044:	1000061e 	bne	r2,zero,10060 <lcd_handle_escape+0x1e4>
        sp->y = ALT_LCD_HEIGHT * 2;
   10048:	e0bffe17 	ldw	r2,-8(fp)
   1004c:	00c00104 	movi	r3,4
   10050:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
   10054:	00000206 	br	10060 <lcd_handle_escape+0x1e4>
        lcd_scroll_up(sp);
   10058:	e13ffe17 	ldw	r4,-8(fp)
   1005c:	000fdb00 	call	fdb0 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
   10060:	e0bffe17 	ldw	r2,-8(fp)
   10064:	10800883 	ldbu	r2,34(r2)
   10068:	10803fcc 	andi	r2,r2,255
   1006c:	108000e8 	cmpgeui	r2,r2,3
   10070:	103ff91e 	bne	r2,zero,10058 <__alt_data_end+0xf8010058>
        lcd_scroll_up(sp);
    }
    break;
   10074:	00002106 	br	100fc <lcd_handle_escape+0x280>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
   10078:	e0bffb17 	ldw	r2,-20(fp)
   1007c:	10800098 	cmpnei	r2,r2,2
   10080:	1000201e 	bne	r2,zero,10104 <lcd_handle_escape+0x288>
      lcd_clear_screen(sp);
   10084:	e13ffe17 	ldw	r4,-8(fp)
   10088:	000faf40 	call	faf4 <lcd_clear_screen>
    break;
   1008c:	00001d06 	br	10104 <lcd_handle_escape+0x288>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
   10090:	e0bffb17 	ldw	r2,-20(fp)
   10094:	00801d16 	blt	zero,r2,1010c <lcd_handle_escape+0x290>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
   10098:	e0bffe17 	ldw	r2,-8(fp)
   1009c:	10800843 	ldbu	r2,33(r2)
   100a0:	10803fcc 	andi	r2,r2,255
   100a4:	10801428 	cmpgeui	r2,r2,80
   100a8:	1000181e 	bne	r2,zero,1010c <lcd_handle_escape+0x290>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
   100ac:	e0bffe17 	ldw	r2,-8(fp)
   100b0:	10800883 	ldbu	r2,34(r2)
   100b4:	10803fcc 	andi	r2,r2,255
   100b8:	108018e4 	muli	r2,r2,99
   100bc:	10801004 	addi	r2,r2,64
   100c0:	e0fffe17 	ldw	r3,-8(fp)
   100c4:	1887883a 	add	r3,r3,r2
   100c8:	e0bffe17 	ldw	r2,-8(fp)
   100cc:	10800843 	ldbu	r2,33(r2)
   100d0:	10803fcc 	andi	r2,r2,255
   100d4:	1889883a 	add	r4,r3,r2
   100d8:	e0bffe17 	ldw	r2,-8(fp)
   100dc:	10800843 	ldbu	r2,33(r2)
   100e0:	10803fcc 	andi	r2,r2,255
   100e4:	00c01404 	movi	r3,80
   100e8:	1885c83a 	sub	r2,r3,r2
   100ec:	100d883a 	mov	r6,r2
   100f0:	01400804 	movi	r5,32
   100f4:	000795c0 	call	795c <memset>
    }
    break;
   100f8:	00000406 	br	1010c <lcd_handle_escape+0x290>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
   100fc:	0001883a 	nop
   10100:	00000306 	br	10110 <lcd_handle_escape+0x294>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
   10104:	0001883a 	nop
   10108:	00000106 	br	10110 <lcd_handle_escape+0x294>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
   1010c:	0001883a 	nop
  }
}
   10110:	0001883a 	nop
   10114:	e037883a 	mov	sp,fp
   10118:	dfc00117 	ldw	ra,4(sp)
   1011c:	df000017 	ldw	fp,0(sp)
   10120:	dec00204 	addi	sp,sp,8
   10124:	f800283a 	ret

00010128 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
   10128:	defff304 	addi	sp,sp,-52
   1012c:	dfc00c15 	stw	ra,48(sp)
   10130:	df000b15 	stw	fp,44(sp)
   10134:	df000b04 	addi	fp,sp,44
   10138:	e13ffc15 	stw	r4,-16(fp)
   1013c:	e17ffd15 	stw	r5,-12(fp)
   10140:	e1bffe15 	stw	r6,-8(fp)
   10144:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
   10148:	e0bffe17 	ldw	r2,-8(fp)
   1014c:	e0fffd17 	ldw	r3,-12(fp)
   10150:	1885883a 	add	r2,r3,r2
   10154:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
   10158:	e0bffc17 	ldw	r2,-16(fp)
   1015c:	00c00044 	movi	r3,1
   10160:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
   10164:	00009906 	br	103cc <altera_avalon_lcd_16207_write+0x2a4>
  {
    char c = *ptr;
   10168:	e0bffd17 	ldw	r2,-12(fp)
   1016c:	10800003 	ldbu	r2,0(r2)
   10170:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
   10174:	e0bffc17 	ldw	r2,-16(fp)
   10178:	10800903 	ldbu	r2,36(r2)
   1017c:	10803fcc 	andi	r2,r2,255
   10180:	1080201c 	xori	r2,r2,128
   10184:	10bfe004 	addi	r2,r2,-128
   10188:	10003716 	blt	r2,zero,10268 <altera_avalon_lcd_16207_write+0x140>
    {
      unsigned int esccount = sp->esccount;
   1018c:	e0bffc17 	ldw	r2,-16(fp)
   10190:	10800903 	ldbu	r2,36(r2)
   10194:	10803fcc 	andi	r2,r2,255
   10198:	1080201c 	xori	r2,r2,128
   1019c:	10bfe004 	addi	r2,r2,-128
   101a0:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
   101a4:	e0bffa17 	ldw	r2,-24(fp)
   101a8:	1000031e 	bne	r2,zero,101b8 <altera_avalon_lcd_16207_write+0x90>
   101ac:	e0bff907 	ldb	r2,-28(fp)
   101b0:	108016d8 	cmpnei	r2,r2,91
   101b4:	10000d1e 	bne	r2,zero,101ec <altera_avalon_lcd_16207_write+0xc4>
   101b8:	e0bffa17 	ldw	r2,-24(fp)
   101bc:	10001826 	beq	r2,zero,10220 <altera_avalon_lcd_16207_write+0xf8>
          (esccount > 0 && !isdigit(c) && c != ';'))
   101c0:	d0e01117 	ldw	r3,-32700(gp)
   101c4:	e0bff907 	ldb	r2,-28(fp)
   101c8:	10800044 	addi	r2,r2,1
   101cc:	1885883a 	add	r2,r3,r2
   101d0:	10800003 	ldbu	r2,0(r2)
   101d4:	10803fcc 	andi	r2,r2,255
   101d8:	1080010c 	andi	r2,r2,4
   101dc:	1000101e 	bne	r2,zero,10220 <altera_avalon_lcd_16207_write+0xf8>
   101e0:	e0bff907 	ldb	r2,-28(fp)
   101e4:	10800ee0 	cmpeqi	r2,r2,59
   101e8:	10000d1e 	bne	r2,zero,10220 <altera_avalon_lcd_16207_write+0xf8>
      {
        sp->escape[esccount] = 0;
   101ec:	e0fffc17 	ldw	r3,-16(fp)
   101f0:	e0bffa17 	ldw	r2,-24(fp)
   101f4:	1885883a 	add	r2,r3,r2
   101f8:	10800a04 	addi	r2,r2,40
   101fc:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
   10200:	e0bff907 	ldb	r2,-28(fp)
   10204:	100b883a 	mov	r5,r2
   10208:	e13ffc17 	ldw	r4,-16(fp)
   1020c:	000fe7c0 	call	fe7c <lcd_handle_escape>

        sp->esccount = -1;
   10210:	e0bffc17 	ldw	r2,-16(fp)
   10214:	00ffffc4 	movi	r3,-1
   10218:	10c00905 	stb	r3,36(r2)
   1021c:	00006806 	br	103c0 <altera_avalon_lcd_16207_write+0x298>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
   10220:	e0bffc17 	ldw	r2,-16(fp)
   10224:	10800903 	ldbu	r2,36(r2)
   10228:	10803fcc 	andi	r2,r2,255
   1022c:	108001e8 	cmpgeui	r2,r2,7
   10230:	1000631e 	bne	r2,zero,103c0 <altera_avalon_lcd_16207_write+0x298>
      {
        sp->escape[esccount] = c;
   10234:	e0fffc17 	ldw	r3,-16(fp)
   10238:	e0bffa17 	ldw	r2,-24(fp)
   1023c:	1885883a 	add	r2,r3,r2
   10240:	10800a04 	addi	r2,r2,40
   10244:	e0fff903 	ldbu	r3,-28(fp)
   10248:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
   1024c:	e0bffc17 	ldw	r2,-16(fp)
   10250:	10800903 	ldbu	r2,36(r2)
   10254:	10800044 	addi	r2,r2,1
   10258:	1007883a 	mov	r3,r2
   1025c:	e0bffc17 	ldw	r2,-16(fp)
   10260:	10c00905 	stb	r3,36(r2)
   10264:	00005606 	br	103c0 <altera_avalon_lcd_16207_write+0x298>
      }
    }
    else if (c == 27) /* ESC */
   10268:	e0bff907 	ldb	r2,-28(fp)
   1026c:	108006d8 	cmpnei	r2,r2,27
   10270:	1000031e 	bne	r2,zero,10280 <altera_avalon_lcd_16207_write+0x158>
    {
      sp->esccount = 0;
   10274:	e0bffc17 	ldw	r2,-16(fp)
   10278:	10000905 	stb	zero,36(r2)
   1027c:	00005006 	br	103c0 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\r')
   10280:	e0bff907 	ldb	r2,-28(fp)
   10284:	10800358 	cmpnei	r2,r2,13
   10288:	1000031e 	bne	r2,zero,10298 <altera_avalon_lcd_16207_write+0x170>
    {
      sp->x = 0;
   1028c:	e0bffc17 	ldw	r2,-16(fp)
   10290:	10000845 	stb	zero,33(r2)
   10294:	00004a06 	br	103c0 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\n')
   10298:	e0bff907 	ldb	r2,-28(fp)
   1029c:	10800298 	cmpnei	r2,r2,10
   102a0:	1000101e 	bne	r2,zero,102e4 <altera_avalon_lcd_16207_write+0x1bc>
    {
      sp->x = 0;
   102a4:	e0bffc17 	ldw	r2,-16(fp)
   102a8:	10000845 	stb	zero,33(r2)
      sp->y++;
   102ac:	e0bffc17 	ldw	r2,-16(fp)
   102b0:	10800883 	ldbu	r2,34(r2)
   102b4:	10800044 	addi	r2,r2,1
   102b8:	1007883a 	mov	r3,r2
   102bc:	e0bffc17 	ldw	r2,-16(fp)
   102c0:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
   102c4:	e0bffc17 	ldw	r2,-16(fp)
   102c8:	10800883 	ldbu	r2,34(r2)
   102cc:	10803fcc 	andi	r2,r2,255
   102d0:	108000f0 	cmpltui	r2,r2,3
   102d4:	10003a1e 	bne	r2,zero,103c0 <altera_avalon_lcd_16207_write+0x298>
        lcd_scroll_up(sp);
   102d8:	e13ffc17 	ldw	r4,-16(fp)
   102dc:	000fdb00 	call	fdb0 <lcd_scroll_up>
   102e0:	00003706 	br	103c0 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\b')
   102e4:	e0bff907 	ldb	r2,-28(fp)
   102e8:	10800218 	cmpnei	r2,r2,8
   102ec:	10000b1e 	bne	r2,zero,1031c <altera_avalon_lcd_16207_write+0x1f4>
    {
      if (sp->x > 0)
   102f0:	e0bffc17 	ldw	r2,-16(fp)
   102f4:	10800843 	ldbu	r2,33(r2)
   102f8:	10803fcc 	andi	r2,r2,255
   102fc:	10003026 	beq	r2,zero,103c0 <altera_avalon_lcd_16207_write+0x298>
        sp->x--;
   10300:	e0bffc17 	ldw	r2,-16(fp)
   10304:	10800843 	ldbu	r2,33(r2)
   10308:	10bfffc4 	addi	r2,r2,-1
   1030c:	1007883a 	mov	r3,r2
   10310:	e0bffc17 	ldw	r2,-16(fp)
   10314:	10c00845 	stb	r3,33(r2)
   10318:	00002906 	br	103c0 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (isprint(c))
   1031c:	d0e01117 	ldw	r3,-32700(gp)
   10320:	e0bff907 	ldb	r2,-28(fp)
   10324:	10800044 	addi	r2,r2,1
   10328:	1885883a 	add	r2,r3,r2
   1032c:	10800003 	ldbu	r2,0(r2)
   10330:	10803fcc 	andi	r2,r2,255
   10334:	1080201c 	xori	r2,r2,128
   10338:	10bfe004 	addi	r2,r2,-128
   1033c:	108025cc 	andi	r2,r2,151
   10340:	10001f26 	beq	r2,zero,103c0 <altera_avalon_lcd_16207_write+0x298>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
   10344:	e0bffc17 	ldw	r2,-16(fp)
   10348:	10800883 	ldbu	r2,34(r2)
   1034c:	10803fcc 	andi	r2,r2,255
   10350:	108000b0 	cmpltui	r2,r2,2
   10354:	1000021e 	bne	r2,zero,10360 <altera_avalon_lcd_16207_write+0x238>
        lcd_scroll_up(sp);
   10358:	e13ffc17 	ldw	r4,-16(fp)
   1035c:	000fdb00 	call	fdb0 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
   10360:	e0bffc17 	ldw	r2,-16(fp)
   10364:	10800843 	ldbu	r2,33(r2)
   10368:	10803fcc 	andi	r2,r2,255
   1036c:	10801428 	cmpgeui	r2,r2,80
   10370:	10000d1e 	bne	r2,zero,103a8 <altera_avalon_lcd_16207_write+0x280>
        sp->line[sp->y].data[sp->x] = c;
   10374:	e0bffc17 	ldw	r2,-16(fp)
   10378:	10800883 	ldbu	r2,34(r2)
   1037c:	10c03fcc 	andi	r3,r2,255
   10380:	e0bffc17 	ldw	r2,-16(fp)
   10384:	10800843 	ldbu	r2,33(r2)
   10388:	10803fcc 	andi	r2,r2,255
   1038c:	e13ffc17 	ldw	r4,-16(fp)
   10390:	18c018e4 	muli	r3,r3,99
   10394:	20c7883a 	add	r3,r4,r3
   10398:	1885883a 	add	r2,r3,r2
   1039c:	10801004 	addi	r2,r2,64
   103a0:	e0fff903 	ldbu	r3,-28(fp)
   103a4:	10c00005 	stb	r3,0(r2)

      sp->x++;
   103a8:	e0bffc17 	ldw	r2,-16(fp)
   103ac:	10800843 	ldbu	r2,33(r2)
   103b0:	10800044 	addi	r2,r2,1
   103b4:	1007883a 	mov	r3,r2
   103b8:	e0bffc17 	ldw	r2,-16(fp)
   103bc:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
   103c0:	e0bffd17 	ldw	r2,-12(fp)
   103c4:	10800044 	addi	r2,r2,1
   103c8:	e0bffd15 	stw	r2,-12(fp)
   103cc:	e0fffd17 	ldw	r3,-12(fp)
   103d0:	e0bff817 	ldw	r2,-32(fp)
   103d4:	18bf6436 	bltu	r3,r2,10168 <__alt_data_end+0xf8010168>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
   103d8:	00800404 	movi	r2,16
   103dc:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   103e0:	e03ff515 	stw	zero,-44(fp)
   103e4:	00003706 	br	104c4 <altera_avalon_lcd_16207_write+0x39c>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
   103e8:	00801404 	movi	r2,80
   103ec:	e0bff715 	stw	r2,-36(fp)
   103f0:	00001106 	br	10438 <altera_avalon_lcd_16207_write+0x310>
      if (sp->line[y].data[width-1] != ' ')
   103f4:	e0bff717 	ldw	r2,-36(fp)
   103f8:	10bfffc4 	addi	r2,r2,-1
   103fc:	e13ffc17 	ldw	r4,-16(fp)
   10400:	e0fff517 	ldw	r3,-44(fp)
   10404:	18c018e4 	muli	r3,r3,99
   10408:	20c7883a 	add	r3,r4,r3
   1040c:	1885883a 	add	r2,r3,r2
   10410:	10801004 	addi	r2,r2,64
   10414:	10800003 	ldbu	r2,0(r2)
   10418:	10803fcc 	andi	r2,r2,255
   1041c:	1080201c 	xori	r2,r2,128
   10420:	10bfe004 	addi	r2,r2,-128
   10424:	10800820 	cmpeqi	r2,r2,32
   10428:	10000626 	beq	r2,zero,10444 <altera_avalon_lcd_16207_write+0x31c>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
   1042c:	e0bff717 	ldw	r2,-36(fp)
   10430:	10bfffc4 	addi	r2,r2,-1
   10434:	e0bff715 	stw	r2,-36(fp)
   10438:	e0bff717 	ldw	r2,-36(fp)
   1043c:	00bfed16 	blt	zero,r2,103f4 <__alt_data_end+0xf80103f4>
   10440:	00000106 	br	10448 <altera_avalon_lcd_16207_write+0x320>
      if (sp->line[y].data[width-1] != ' ')
        break;
   10444:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
   10448:	e0bff717 	ldw	r2,-36(fp)
   1044c:	10800448 	cmpgei	r2,r2,17
   10450:	1000031e 	bne	r2,zero,10460 <altera_avalon_lcd_16207_write+0x338>
      width = ALT_LCD_WIDTH;
   10454:	00800404 	movi	r2,16
   10458:	e0bff715 	stw	r2,-36(fp)
   1045c:	00000306 	br	1046c <altera_avalon_lcd_16207_write+0x344>
    else
      width++;
   10460:	e0bff717 	ldw	r2,-36(fp)
   10464:	10800044 	addi	r2,r2,1
   10468:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
   1046c:	e0bff717 	ldw	r2,-36(fp)
   10470:	1009883a 	mov	r4,r2
   10474:	e0fffc17 	ldw	r3,-16(fp)
   10478:	e0bff517 	ldw	r2,-44(fp)
   1047c:	108018e4 	muli	r2,r2,99
   10480:	1885883a 	add	r2,r3,r2
   10484:	10802444 	addi	r2,r2,145
   10488:	11000005 	stb	r4,0(r2)
    if (widthmax < width)
   1048c:	e0fff617 	ldw	r3,-40(fp)
   10490:	e0bff717 	ldw	r2,-36(fp)
   10494:	1880020e 	bge	r3,r2,104a0 <altera_avalon_lcd_16207_write+0x378>
      widthmax = width;
   10498:	e0bff717 	ldw	r2,-36(fp)
   1049c:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
   104a0:	e0fffc17 	ldw	r3,-16(fp)
   104a4:	e0bff517 	ldw	r2,-44(fp)
   104a8:	108018e4 	muli	r2,r2,99
   104ac:	1885883a 	add	r2,r3,r2
   104b0:	10802484 	addi	r2,r2,146
   104b4:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   104b8:	e0bff517 	ldw	r2,-44(fp)
   104bc:	10800044 	addi	r2,r2,1
   104c0:	e0bff515 	stw	r2,-44(fp)
   104c4:	e0bff517 	ldw	r2,-44(fp)
   104c8:	10800090 	cmplti	r2,r2,2
   104cc:	103fc61e 	bne	r2,zero,103e8 <__alt_data_end+0xf80103e8>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
   104d0:	e0bff617 	ldw	r2,-40(fp)
   104d4:	10800448 	cmpgei	r2,r2,17
   104d8:	1000031e 	bne	r2,zero,104e8 <altera_avalon_lcd_16207_write+0x3c0>
    sp->scrollmax = 0;
   104dc:	e0bffc17 	ldw	r2,-16(fp)
   104e0:	10000985 	stb	zero,38(r2)
   104e4:	00002e06 	br	105a0 <altera_avalon_lcd_16207_write+0x478>
  else
  {
    widthmax *= 2;
   104e8:	e0bff617 	ldw	r2,-40(fp)
   104ec:	1085883a 	add	r2,r2,r2
   104f0:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
   104f4:	e0bff617 	ldw	r2,-40(fp)
   104f8:	1007883a 	mov	r3,r2
   104fc:	e0bffc17 	ldw	r2,-16(fp)
   10500:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   10504:	e03ff515 	stw	zero,-44(fp)
   10508:	00002206 	br	10594 <altera_avalon_lcd_16207_write+0x46c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
   1050c:	e0fffc17 	ldw	r3,-16(fp)
   10510:	e0bff517 	ldw	r2,-44(fp)
   10514:	108018e4 	muli	r2,r2,99
   10518:	1885883a 	add	r2,r3,r2
   1051c:	10802444 	addi	r2,r2,145
   10520:	10800003 	ldbu	r2,0(r2)
   10524:	10803fcc 	andi	r2,r2,255
   10528:	1080201c 	xori	r2,r2,128
   1052c:	10bfe004 	addi	r2,r2,-128
   10530:	10800450 	cmplti	r2,r2,17
   10534:	1000141e 	bne	r2,zero,10588 <altera_avalon_lcd_16207_write+0x460>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
   10538:	e0fffc17 	ldw	r3,-16(fp)
   1053c:	e0bff517 	ldw	r2,-44(fp)
   10540:	108018e4 	muli	r2,r2,99
   10544:	1885883a 	add	r2,r3,r2
   10548:	10802444 	addi	r2,r2,145
   1054c:	10800003 	ldbu	r2,0(r2)
   10550:	10803fcc 	andi	r2,r2,255
   10554:	1080201c 	xori	r2,r2,128
   10558:	10bfe004 	addi	r2,r2,-128
   1055c:	1004923a 	slli	r2,r2,8
   10560:	e17ff617 	ldw	r5,-40(fp)
   10564:	1009883a 	mov	r4,r2
   10568:	00019bc0 	call	19bc <__divsi3>
   1056c:	1009883a 	mov	r4,r2
   10570:	e0fffc17 	ldw	r3,-16(fp)
   10574:	e0bff517 	ldw	r2,-44(fp)
   10578:	108018e4 	muli	r2,r2,99
   1057c:	1885883a 	add	r2,r3,r2
   10580:	10802484 	addi	r2,r2,146
   10584:	11000005 	stb	r4,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
   10588:	e0bff517 	ldw	r2,-44(fp)
   1058c:	10800044 	addi	r2,r2,1
   10590:	e0bff515 	stw	r2,-44(fp)
   10594:	e0bff517 	ldw	r2,-44(fp)
   10598:	10800090 	cmplti	r2,r2,2
   1059c:	103fdb1e 	bne	r2,zero,1050c <__alt_data_end+0xf801050c>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
   105a0:	e0bffc17 	ldw	r2,-16(fp)
   105a4:	10800943 	ldbu	r2,37(r2)
   105a8:	10803fcc 	andi	r2,r2,255
   105ac:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
   105b0:	e13ffc17 	ldw	r4,-16(fp)
   105b4:	000fbc40 	call	fbc4 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
   105b8:	e0bffc17 	ldw	r2,-16(fp)
   105bc:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
   105c0:	e0bffc17 	ldw	r2,-16(fp)
   105c4:	10800943 	ldbu	r2,37(r2)
   105c8:	10c03fcc 	andi	r3,r2,255
   105cc:	e0bffb17 	ldw	r2,-20(fp)
   105d0:	18800426 	beq	r3,r2,105e4 <altera_avalon_lcd_16207_write+0x4bc>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
   105d4:	e0bffc17 	ldw	r2,-16(fp)
   105d8:	00c00044 	movi	r3,1
   105dc:	10c009c5 	stb	r3,39(r2)
  }
   105e0:	003fef06 	br	105a0 <__alt_data_end+0xf80105a0>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
   105e4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
   105e8:	e0bffe17 	ldw	r2,-8(fp)
}
   105ec:	e037883a 	mov	sp,fp
   105f0:	dfc00117 	ldw	ra,4(sp)
   105f4:	df000017 	ldw	fp,0(sp)
   105f8:	dec00204 	addi	sp,sp,8
   105fc:	f800283a 	ret

00010600 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
   10600:	defffc04 	addi	sp,sp,-16
   10604:	dfc00315 	stw	ra,12(sp)
   10608:	df000215 	stw	fp,8(sp)
   1060c:	df000204 	addi	fp,sp,8
   10610:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
   10614:	e0bfff17 	ldw	r2,-4(fp)
   10618:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
   1061c:	e0bffe17 	ldw	r2,-8(fp)
   10620:	10800943 	ldbu	r2,37(r2)
   10624:	10803fcc 	andi	r2,r2,255
   10628:	10c00044 	addi	r3,r2,1
   1062c:	e0bffe17 	ldw	r2,-8(fp)
   10630:	10800983 	ldbu	r2,38(r2)
   10634:	10803fcc 	andi	r2,r2,255
   10638:	18800316 	blt	r3,r2,10648 <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
   1063c:	e0bffe17 	ldw	r2,-8(fp)
   10640:	10000945 	stb	zero,37(r2)
   10644:	00000606 	br	10660 <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
   10648:	e0bffe17 	ldw	r2,-8(fp)
   1064c:	10800943 	ldbu	r2,37(r2)
   10650:	10800044 	addi	r2,r2,1
   10654:	1007883a 	mov	r3,r2
   10658:	e0bffe17 	ldw	r2,-8(fp)
   1065c:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
   10660:	e0bffe17 	ldw	r2,-8(fp)
   10664:	10800983 	ldbu	r2,38(r2)
   10668:	10803fcc 	andi	r2,r2,255
   1066c:	10000826 	beq	r2,zero,10690 <alt_lcd_16207_timeout+0x90>
   10670:	e0bffe17 	ldw	r2,-8(fp)
   10674:	108009c3 	ldbu	r2,39(r2)
   10678:	10803fcc 	andi	r2,r2,255
   1067c:	1080201c 	xori	r2,r2,128
   10680:	10bfe004 	addi	r2,r2,-128
   10684:	1000021e 	bne	r2,zero,10690 <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
   10688:	e13ffe17 	ldw	r4,-8(fp)
   1068c:	000fbc40 	call	fbc4 <lcd_repaint_screen>

  return sp->period;
   10690:	e0bffe17 	ldw	r2,-8(fp)
   10694:	10800717 	ldw	r2,28(r2)
}
   10698:	e037883a 	mov	sp,fp
   1069c:	dfc00117 	ldw	ra,4(sp)
   106a0:	df000017 	ldw	fp,0(sp)
   106a4:	dec00204 	addi	sp,sp,8
   106a8:	f800283a 	ret

000106ac <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
   106ac:	defffc04 	addi	sp,sp,-16
   106b0:	dfc00315 	stw	ra,12(sp)
   106b4:	df000215 	stw	fp,8(sp)
   106b8:	df000204 	addi	fp,sp,8
   106bc:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
   106c0:	e0bfff17 	ldw	r2,-4(fp)
   106c4:	10800017 	ldw	r2,0(r2)
   106c8:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
   106cc:	e0bfff17 	ldw	r2,-4(fp)
   106d0:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
   106d4:	010ea604 	movi	r4,15000
   106d8:	000ecb80 	call	ecb8 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
   106dc:	e0bffe17 	ldw	r2,-8(fp)
   106e0:	00c00c04 	movi	r3,48
   106e4:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
   106e8:	01040104 	movi	r4,4100
   106ec:	000ecb80 	call	ecb8 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
   106f0:	e0bffe17 	ldw	r2,-8(fp)
   106f4:	00c00c04 	movi	r3,48
   106f8:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
   106fc:	0100fa04 	movi	r4,1000
   10700:	000ecb80 	call	ecb8 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
   10704:	e0bffe17 	ldw	r2,-8(fp)
   10708:	00c00c04 	movi	r3,48
   1070c:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
   10710:	01400e04 	movi	r5,56
   10714:	e13fff17 	ldw	r4,-4(fp)
   10718:	000f9640 	call	f964 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
   1071c:	01400204 	movi	r5,8
   10720:	e13fff17 	ldw	r4,-4(fp)
   10724:	000f9640 	call	f964 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
   10728:	e13fff17 	ldw	r4,-4(fp)
   1072c:	000faf40 	call	faf4 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
   10730:	01400184 	movi	r5,6
   10734:	e13fff17 	ldw	r4,-4(fp)
   10738:	000f9640 	call	f964 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
   1073c:	01400304 	movi	r5,12
   10740:	e13fff17 	ldw	r4,-4(fp)
   10744:	000f9640 	call	f964 <lcd_write_command>

  sp->esccount = -1;
   10748:	e0bfff17 	ldw	r2,-4(fp)
   1074c:	00ffffc4 	movi	r3,-1
   10750:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
   10754:	e0bfff17 	ldw	r2,-4(fp)
   10758:	10800a04 	addi	r2,r2,40
   1075c:	01800204 	movi	r6,8
   10760:	000b883a 	mov	r5,zero
   10764:	1009883a 	mov	r4,r2
   10768:	000795c0 	call	795c <memset>

  sp->scrollpos = 0;
   1076c:	e0bfff17 	ldw	r2,-4(fp)
   10770:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
   10774:	e0bfff17 	ldw	r2,-4(fp)
   10778:	10000985 	stb	zero,38(r2)
  sp->active = 0;
   1077c:	e0bfff17 	ldw	r2,-4(fp)
   10780:	100009c5 	stb	zero,39(r2)
   10784:	d0a78c17 	ldw	r2,-25040(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
   10788:	01400284 	movi	r5,10
   1078c:	1009883a 	mov	r4,r2
   10790:	0001ab40 	call	1ab4 <__udivsi3>
   10794:	1007883a 	mov	r3,r2
   10798:	e0bfff17 	ldw	r2,-4(fp)
   1079c:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
   107a0:	e0bfff17 	ldw	r2,-4(fp)
   107a4:	10c00104 	addi	r3,r2,4
   107a8:	e0bfff17 	ldw	r2,-4(fp)
   107ac:	10800717 	ldw	r2,28(r2)
   107b0:	e1ffff17 	ldw	r7,-4(fp)
   107b4:	01800074 	movhi	r6,1
   107b8:	31818004 	addi	r6,r6,1536
   107bc:	100b883a 	mov	r5,r2
   107c0:	1809883a 	mov	r4,r3
   107c4:	00109340 	call	10934 <alt_alarm_start>
}
   107c8:	0001883a 	nop
   107cc:	e037883a 	mov	sp,fp
   107d0:	dfc00117 	ldw	ra,4(sp)
   107d4:	df000017 	ldw	fp,0(sp)
   107d8:	dec00204 	addi	sp,sp,8
   107dc:	f800283a 	ret

000107e0 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
   107e0:	defffa04 	addi	sp,sp,-24
   107e4:	dfc00515 	stw	ra,20(sp)
   107e8:	df000415 	stw	fp,16(sp)
   107ec:	df000404 	addi	fp,sp,16
   107f0:	e13ffd15 	stw	r4,-12(fp)
   107f4:	e17ffe15 	stw	r5,-8(fp)
   107f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
   107fc:	e0bffd17 	ldw	r2,-12(fp)
   10800:	10800017 	ldw	r2,0(r2)
   10804:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
   10808:	e0bffc17 	ldw	r2,-16(fp)
   1080c:	10c00a04 	addi	r3,r2,40
   10810:	e0bffd17 	ldw	r2,-12(fp)
   10814:	10800217 	ldw	r2,8(r2)
   10818:	100f883a 	mov	r7,r2
   1081c:	e1bfff17 	ldw	r6,-4(fp)
   10820:	e17ffe17 	ldw	r5,-8(fp)
   10824:	1809883a 	mov	r4,r3
   10828:	00101280 	call	10128 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
   1082c:	e037883a 	mov	sp,fp
   10830:	dfc00117 	ldw	ra,4(sp)
   10834:	df000017 	ldw	fp,0(sp)
   10838:	dec00204 	addi	sp,sp,8
   1083c:	f800283a 	ret

00010840 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   10840:	defffa04 	addi	sp,sp,-24
   10844:	dfc00515 	stw	ra,20(sp)
   10848:	df000415 	stw	fp,16(sp)
   1084c:	df000404 	addi	fp,sp,16
   10850:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   10854:	0007883a 	mov	r3,zero
   10858:	e0bfff17 	ldw	r2,-4(fp)
   1085c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   10860:	e0bfff17 	ldw	r2,-4(fp)
   10864:	10800104 	addi	r2,r2,4
   10868:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1086c:	0005303a 	rdctl	r2,status
   10870:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10874:	e0fffd17 	ldw	r3,-12(fp)
   10878:	00bfff84 	movi	r2,-2
   1087c:	1884703a 	and	r2,r3,r2
   10880:	1001703a 	wrctl	status,r2
  
  return context;
   10884:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   10888:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   1088c:	000ebb00 	call	ebb0 <alt_tick>
   10890:	e0bffc17 	ldw	r2,-16(fp)
   10894:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10898:	e0bffe17 	ldw	r2,-8(fp)
   1089c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   108a0:	0001883a 	nop
   108a4:	e037883a 	mov	sp,fp
   108a8:	dfc00117 	ldw	ra,4(sp)
   108ac:	df000017 	ldw	fp,0(sp)
   108b0:	dec00204 	addi	sp,sp,8
   108b4:	f800283a 	ret

000108b8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   108b8:	defff804 	addi	sp,sp,-32
   108bc:	dfc00715 	stw	ra,28(sp)
   108c0:	df000615 	stw	fp,24(sp)
   108c4:	df000604 	addi	fp,sp,24
   108c8:	e13ffc15 	stw	r4,-16(fp)
   108cc:	e17ffd15 	stw	r5,-12(fp)
   108d0:	e1bffe15 	stw	r6,-8(fp)
   108d4:	e1ffff15 	stw	r7,-4(fp)
   108d8:	e0bfff17 	ldw	r2,-4(fp)
   108dc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   108e0:	d0a78c17 	ldw	r2,-25040(gp)
   108e4:	1000021e 	bne	r2,zero,108f0 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   108e8:	e0bffb17 	ldw	r2,-20(fp)
   108ec:	d0a78c15 	stw	r2,-25040(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   108f0:	e0bffc17 	ldw	r2,-16(fp)
   108f4:	10800104 	addi	r2,r2,4
   108f8:	00c001c4 	movi	r3,7
   108fc:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   10900:	d8000015 	stw	zero,0(sp)
   10904:	e1fffc17 	ldw	r7,-16(fp)
   10908:	01800074 	movhi	r6,1
   1090c:	31821004 	addi	r6,r6,2112
   10910:	e17ffe17 	ldw	r5,-8(fp)
   10914:	e13ffd17 	ldw	r4,-12(fp)
   10918:	0010dac0 	call	10dac <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   1091c:	0001883a 	nop
   10920:	e037883a 	mov	sp,fp
   10924:	dfc00117 	ldw	ra,4(sp)
   10928:	df000017 	ldw	fp,0(sp)
   1092c:	dec00204 	addi	sp,sp,8
   10930:	f800283a 	ret

00010934 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   10934:	defff504 	addi	sp,sp,-44
   10938:	df000a15 	stw	fp,40(sp)
   1093c:	df000a04 	addi	fp,sp,40
   10940:	e13ffc15 	stw	r4,-16(fp)
   10944:	e17ffd15 	stw	r5,-12(fp)
   10948:	e1bffe15 	stw	r6,-8(fp)
   1094c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   10950:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   10954:	d0a78c17 	ldw	r2,-25040(gp)
  
  if (alt_ticks_per_second ())
   10958:	10003c26 	beq	r2,zero,10a4c <alt_alarm_start+0x118>
  {
    if (alarm)
   1095c:	e0bffc17 	ldw	r2,-16(fp)
   10960:	10003826 	beq	r2,zero,10a44 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   10964:	e0bffc17 	ldw	r2,-16(fp)
   10968:	e0fffe17 	ldw	r3,-8(fp)
   1096c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   10970:	e0bffc17 	ldw	r2,-16(fp)
   10974:	e0ffff17 	ldw	r3,-4(fp)
   10978:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1097c:	0005303a 	rdctl	r2,status
   10980:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10984:	e0fff917 	ldw	r3,-28(fp)
   10988:	00bfff84 	movi	r2,-2
   1098c:	1884703a 	and	r2,r3,r2
   10990:	1001703a 	wrctl	status,r2
  
  return context;
   10994:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   10998:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1099c:	d0a78d17 	ldw	r2,-25036(gp)
      
      current_nticks = alt_nticks();
   109a0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   109a4:	e0fffd17 	ldw	r3,-12(fp)
   109a8:	e0bff617 	ldw	r2,-40(fp)
   109ac:	1885883a 	add	r2,r3,r2
   109b0:	10c00044 	addi	r3,r2,1
   109b4:	e0bffc17 	ldw	r2,-16(fp)
   109b8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   109bc:	e0bffc17 	ldw	r2,-16(fp)
   109c0:	10c00217 	ldw	r3,8(r2)
   109c4:	e0bff617 	ldw	r2,-40(fp)
   109c8:	1880042e 	bgeu	r3,r2,109dc <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   109cc:	e0bffc17 	ldw	r2,-16(fp)
   109d0:	00c00044 	movi	r3,1
   109d4:	10c00405 	stb	r3,16(r2)
   109d8:	00000206 	br	109e4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   109dc:	e0bffc17 	ldw	r2,-16(fp)
   109e0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   109e4:	e0bffc17 	ldw	r2,-16(fp)
   109e8:	d0e00d04 	addi	r3,gp,-32716
   109ec:	e0fffa15 	stw	r3,-24(fp)
   109f0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   109f4:	e0bffb17 	ldw	r2,-20(fp)
   109f8:	e0fffa17 	ldw	r3,-24(fp)
   109fc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   10a00:	e0bffa17 	ldw	r2,-24(fp)
   10a04:	10c00017 	ldw	r3,0(r2)
   10a08:	e0bffb17 	ldw	r2,-20(fp)
   10a0c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   10a10:	e0bffa17 	ldw	r2,-24(fp)
   10a14:	10800017 	ldw	r2,0(r2)
   10a18:	e0fffb17 	ldw	r3,-20(fp)
   10a1c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   10a20:	e0bffa17 	ldw	r2,-24(fp)
   10a24:	e0fffb17 	ldw	r3,-20(fp)
   10a28:	10c00015 	stw	r3,0(r2)
   10a2c:	e0bff817 	ldw	r2,-32(fp)
   10a30:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10a34:	e0bff717 	ldw	r2,-36(fp)
   10a38:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   10a3c:	0005883a 	mov	r2,zero
   10a40:	00000306 	br	10a50 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   10a44:	00bffa84 	movi	r2,-22
   10a48:	00000106 	br	10a50 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   10a4c:	00bfde84 	movi	r2,-134
  }
}
   10a50:	e037883a 	mov	sp,fp
   10a54:	df000017 	ldw	fp,0(sp)
   10a58:	dec00104 	addi	sp,sp,4
   10a5c:	f800283a 	ret

00010a60 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   10a60:	defffa04 	addi	sp,sp,-24
   10a64:	dfc00515 	stw	ra,20(sp)
   10a68:	df000415 	stw	fp,16(sp)
   10a6c:	df000404 	addi	fp,sp,16
   10a70:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   10a74:	008000c4 	movi	r2,3
   10a78:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   10a7c:	e0fffd17 	ldw	r3,-12(fp)
   10a80:	008003f4 	movhi	r2,15
   10a84:	10909004 	addi	r2,r2,16960
   10a88:	1885383a 	mul	r2,r3,r2
   10a8c:	100b883a 	mov	r5,r2
   10a90:	01017db4 	movhi	r4,1526
   10a94:	21384004 	addi	r4,r4,-7936
   10a98:	0001ab40 	call	1ab4 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   10a9c:	100b883a 	mov	r5,r2
   10aa0:	01200034 	movhi	r4,32768
   10aa4:	213fffc4 	addi	r4,r4,-1
   10aa8:	0001ab40 	call	1ab4 <__udivsi3>
   10aac:	100b883a 	mov	r5,r2
   10ab0:	e13fff17 	ldw	r4,-4(fp)
   10ab4:	0001ab40 	call	1ab4 <__udivsi3>
   10ab8:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   10abc:	e0bffe17 	ldw	r2,-8(fp)
   10ac0:	10002a26 	beq	r2,zero,10b6c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   10ac4:	e03ffc15 	stw	zero,-16(fp)
   10ac8:	00001706 	br	10b28 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   10acc:	00a00034 	movhi	r2,32768
   10ad0:	10bfffc4 	addi	r2,r2,-1
   10ad4:	10bfffc4 	addi	r2,r2,-1
   10ad8:	103ffe1e 	bne	r2,zero,10ad4 <__alt_data_end+0xf8010ad4>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   10adc:	e0fffd17 	ldw	r3,-12(fp)
   10ae0:	008003f4 	movhi	r2,15
   10ae4:	10909004 	addi	r2,r2,16960
   10ae8:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   10aec:	100b883a 	mov	r5,r2
   10af0:	01017db4 	movhi	r4,1526
   10af4:	21384004 	addi	r4,r4,-7936
   10af8:	0001ab40 	call	1ab4 <__udivsi3>
   10afc:	100b883a 	mov	r5,r2
   10b00:	01200034 	movhi	r4,32768
   10b04:	213fffc4 	addi	r4,r4,-1
   10b08:	0001ab40 	call	1ab4 <__udivsi3>
   10b0c:	1007883a 	mov	r3,r2
   10b10:	e0bfff17 	ldw	r2,-4(fp)
   10b14:	10c5c83a 	sub	r2,r2,r3
   10b18:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   10b1c:	e0bffc17 	ldw	r2,-16(fp)
   10b20:	10800044 	addi	r2,r2,1
   10b24:	e0bffc15 	stw	r2,-16(fp)
   10b28:	e0fffc17 	ldw	r3,-16(fp)
   10b2c:	e0bffe17 	ldw	r2,-8(fp)
   10b30:	18bfe616 	blt	r3,r2,10acc <__alt_data_end+0xf8010acc>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   10b34:	e0fffd17 	ldw	r3,-12(fp)
   10b38:	008003f4 	movhi	r2,15
   10b3c:	10909004 	addi	r2,r2,16960
   10b40:	1885383a 	mul	r2,r3,r2
   10b44:	100b883a 	mov	r5,r2
   10b48:	01017db4 	movhi	r4,1526
   10b4c:	21384004 	addi	r4,r4,-7936
   10b50:	0001ab40 	call	1ab4 <__udivsi3>
   10b54:	1007883a 	mov	r3,r2
   10b58:	e0bfff17 	ldw	r2,-4(fp)
   10b5c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   10b60:	10bfffc4 	addi	r2,r2,-1
   10b64:	103ffe1e 	bne	r2,zero,10b60 <__alt_data_end+0xf8010b60>
   10b68:	00000d06 	br	10ba0 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   10b6c:	e0fffd17 	ldw	r3,-12(fp)
   10b70:	008003f4 	movhi	r2,15
   10b74:	10909004 	addi	r2,r2,16960
   10b78:	1885383a 	mul	r2,r3,r2
   10b7c:	100b883a 	mov	r5,r2
   10b80:	01017db4 	movhi	r4,1526
   10b84:	21384004 	addi	r4,r4,-7936
   10b88:	0001ab40 	call	1ab4 <__udivsi3>
   10b8c:	1007883a 	mov	r3,r2
   10b90:	e0bfff17 	ldw	r2,-4(fp)
   10b94:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   10b98:	10bfffc4 	addi	r2,r2,-1
   10b9c:	00bffe16 	blt	zero,r2,10b98 <__alt_data_end+0xf8010b98>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   10ba0:	0005883a 	mov	r2,zero
}
   10ba4:	e037883a 	mov	sp,fp
   10ba8:	dfc00117 	ldw	ra,4(sp)
   10bac:	df000017 	ldw	fp,0(sp)
   10bb0:	dec00204 	addi	sp,sp,8
   10bb4:	f800283a 	ret

00010bb8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   10bb8:	deffff04 	addi	sp,sp,-4
   10bbc:	df000015 	stw	fp,0(sp)
   10bc0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   10bc4:	0001883a 	nop
   10bc8:	e037883a 	mov	sp,fp
   10bcc:	df000017 	ldw	fp,0(sp)
   10bd0:	dec00104 	addi	sp,sp,4
   10bd4:	f800283a 	ret

00010bd8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10bd8:	defffe04 	addi	sp,sp,-8
   10bdc:	dfc00115 	stw	ra,4(sp)
   10be0:	df000015 	stw	fp,0(sp)
   10be4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10be8:	d0a00b17 	ldw	r2,-32724(gp)
   10bec:	10000326 	beq	r2,zero,10bfc <alt_get_errno+0x24>
   10bf0:	d0a00b17 	ldw	r2,-32724(gp)
   10bf4:	103ee83a 	callr	r2
   10bf8:	00000106 	br	10c00 <alt_get_errno+0x28>
   10bfc:	d0a78504 	addi	r2,gp,-25068
}
   10c00:	e037883a 	mov	sp,fp
   10c04:	dfc00117 	ldw	ra,4(sp)
   10c08:	df000017 	ldw	fp,0(sp)
   10c0c:	dec00204 	addi	sp,sp,8
   10c10:	f800283a 	ret

00010c14 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   10c14:	defffa04 	addi	sp,sp,-24
   10c18:	dfc00515 	stw	ra,20(sp)
   10c1c:	df000415 	stw	fp,16(sp)
   10c20:	df000404 	addi	fp,sp,16
   10c24:	e13ffe15 	stw	r4,-8(fp)
   10c28:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   10c2c:	e0bffe17 	ldw	r2,-8(fp)
   10c30:	10000326 	beq	r2,zero,10c40 <alt_dev_llist_insert+0x2c>
   10c34:	e0bffe17 	ldw	r2,-8(fp)
   10c38:	10800217 	ldw	r2,8(r2)
   10c3c:	1000061e 	bne	r2,zero,10c58 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   10c40:	0010bd80 	call	10bd8 <alt_get_errno>
   10c44:	1007883a 	mov	r3,r2
   10c48:	00800584 	movi	r2,22
   10c4c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   10c50:	00bffa84 	movi	r2,-22
   10c54:	00001306 	br	10ca4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   10c58:	e0bffe17 	ldw	r2,-8(fp)
   10c5c:	e0ffff17 	ldw	r3,-4(fp)
   10c60:	e0fffc15 	stw	r3,-16(fp)
   10c64:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10c68:	e0bffd17 	ldw	r2,-12(fp)
   10c6c:	e0fffc17 	ldw	r3,-16(fp)
   10c70:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   10c74:	e0bffc17 	ldw	r2,-16(fp)
   10c78:	10c00017 	ldw	r3,0(r2)
   10c7c:	e0bffd17 	ldw	r2,-12(fp)
   10c80:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   10c84:	e0bffc17 	ldw	r2,-16(fp)
   10c88:	10800017 	ldw	r2,0(r2)
   10c8c:	e0fffd17 	ldw	r3,-12(fp)
   10c90:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   10c94:	e0bffc17 	ldw	r2,-16(fp)
   10c98:	e0fffd17 	ldw	r3,-12(fp)
   10c9c:	10c00015 	stw	r3,0(r2)

  return 0;  
   10ca0:	0005883a 	mov	r2,zero
}
   10ca4:	e037883a 	mov	sp,fp
   10ca8:	dfc00117 	ldw	ra,4(sp)
   10cac:	df000017 	ldw	fp,0(sp)
   10cb0:	dec00204 	addi	sp,sp,8
   10cb4:	f800283a 	ret

00010cb8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   10cb8:	defffd04 	addi	sp,sp,-12
   10cbc:	dfc00215 	stw	ra,8(sp)
   10cc0:	df000115 	stw	fp,4(sp)
   10cc4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10cc8:	00800074 	movhi	r2,1
   10ccc:	10869804 	addi	r2,r2,6752
   10cd0:	e0bfff15 	stw	r2,-4(fp)
   10cd4:	00000606 	br	10cf0 <_do_ctors+0x38>
        (*ctor) (); 
   10cd8:	e0bfff17 	ldw	r2,-4(fp)
   10cdc:	10800017 	ldw	r2,0(r2)
   10ce0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10ce4:	e0bfff17 	ldw	r2,-4(fp)
   10ce8:	10bfff04 	addi	r2,r2,-4
   10cec:	e0bfff15 	stw	r2,-4(fp)
   10cf0:	e0ffff17 	ldw	r3,-4(fp)
   10cf4:	00800074 	movhi	r2,1
   10cf8:	10869904 	addi	r2,r2,6756
   10cfc:	18bff62e 	bgeu	r3,r2,10cd8 <__alt_data_end+0xf8010cd8>
        (*ctor) (); 
}
   10d00:	0001883a 	nop
   10d04:	e037883a 	mov	sp,fp
   10d08:	dfc00117 	ldw	ra,4(sp)
   10d0c:	df000017 	ldw	fp,0(sp)
   10d10:	dec00204 	addi	sp,sp,8
   10d14:	f800283a 	ret

00010d18 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   10d18:	defffd04 	addi	sp,sp,-12
   10d1c:	dfc00215 	stw	ra,8(sp)
   10d20:	df000115 	stw	fp,4(sp)
   10d24:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10d28:	00800074 	movhi	r2,1
   10d2c:	10869804 	addi	r2,r2,6752
   10d30:	e0bfff15 	stw	r2,-4(fp)
   10d34:	00000606 	br	10d50 <_do_dtors+0x38>
        (*dtor) (); 
   10d38:	e0bfff17 	ldw	r2,-4(fp)
   10d3c:	10800017 	ldw	r2,0(r2)
   10d40:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10d44:	e0bfff17 	ldw	r2,-4(fp)
   10d48:	10bfff04 	addi	r2,r2,-4
   10d4c:	e0bfff15 	stw	r2,-4(fp)
   10d50:	e0ffff17 	ldw	r3,-4(fp)
   10d54:	00800074 	movhi	r2,1
   10d58:	10869904 	addi	r2,r2,6756
   10d5c:	18bff62e 	bgeu	r3,r2,10d38 <__alt_data_end+0xf8010d38>
        (*dtor) (); 
}
   10d60:	0001883a 	nop
   10d64:	e037883a 	mov	sp,fp
   10d68:	dfc00117 	ldw	ra,4(sp)
   10d6c:	df000017 	ldw	fp,0(sp)
   10d70:	dec00204 	addi	sp,sp,8
   10d74:	f800283a 	ret

00010d78 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   10d78:	defffe04 	addi	sp,sp,-8
   10d7c:	dfc00115 	stw	ra,4(sp)
   10d80:	df000015 	stw	fp,0(sp)
   10d84:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   10d88:	01440004 	movi	r5,4096
   10d8c:	0009883a 	mov	r4,zero
   10d90:	00116400 	call	11640 <alt_icache_flush>
#endif
}
   10d94:	0001883a 	nop
   10d98:	e037883a 	mov	sp,fp
   10d9c:	dfc00117 	ldw	ra,4(sp)
   10da0:	df000017 	ldw	fp,0(sp)
   10da4:	dec00204 	addi	sp,sp,8
   10da8:	f800283a 	ret

00010dac <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10dac:	defff904 	addi	sp,sp,-28
   10db0:	dfc00615 	stw	ra,24(sp)
   10db4:	df000515 	stw	fp,20(sp)
   10db8:	df000504 	addi	fp,sp,20
   10dbc:	e13ffc15 	stw	r4,-16(fp)
   10dc0:	e17ffd15 	stw	r5,-12(fp)
   10dc4:	e1bffe15 	stw	r6,-8(fp)
   10dc8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   10dcc:	e0800217 	ldw	r2,8(fp)
   10dd0:	d8800015 	stw	r2,0(sp)
   10dd4:	e1ffff17 	ldw	r7,-4(fp)
   10dd8:	e1bffe17 	ldw	r6,-8(fp)
   10ddc:	e17ffd17 	ldw	r5,-12(fp)
   10de0:	e13ffc17 	ldw	r4,-16(fp)
   10de4:	0010f5c0 	call	10f5c <alt_iic_isr_register>
}  
   10de8:	e037883a 	mov	sp,fp
   10dec:	dfc00117 	ldw	ra,4(sp)
   10df0:	df000017 	ldw	fp,0(sp)
   10df4:	dec00204 	addi	sp,sp,8
   10df8:	f800283a 	ret

00010dfc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   10dfc:	defff904 	addi	sp,sp,-28
   10e00:	df000615 	stw	fp,24(sp)
   10e04:	df000604 	addi	fp,sp,24
   10e08:	e13ffe15 	stw	r4,-8(fp)
   10e0c:	e17fff15 	stw	r5,-4(fp)
   10e10:	e0bfff17 	ldw	r2,-4(fp)
   10e14:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10e18:	0005303a 	rdctl	r2,status
   10e1c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10e20:	e0fffb17 	ldw	r3,-20(fp)
   10e24:	00bfff84 	movi	r2,-2
   10e28:	1884703a 	and	r2,r3,r2
   10e2c:	1001703a 	wrctl	status,r2
  
  return context;
   10e30:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10e34:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   10e38:	00c00044 	movi	r3,1
   10e3c:	e0bffa17 	ldw	r2,-24(fp)
   10e40:	1884983a 	sll	r2,r3,r2
   10e44:	1007883a 	mov	r3,r2
   10e48:	d0a78e17 	ldw	r2,-25032(gp)
   10e4c:	1884b03a 	or	r2,r3,r2
   10e50:	d0a78e15 	stw	r2,-25032(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10e54:	d0a78e17 	ldw	r2,-25032(gp)
   10e58:	100170fa 	wrctl	ienable,r2
   10e5c:	e0bffc17 	ldw	r2,-16(fp)
   10e60:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10e64:	e0bffd17 	ldw	r2,-12(fp)
   10e68:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   10e6c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   10e70:	0001883a 	nop
}
   10e74:	e037883a 	mov	sp,fp
   10e78:	df000017 	ldw	fp,0(sp)
   10e7c:	dec00104 	addi	sp,sp,4
   10e80:	f800283a 	ret

00010e84 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   10e84:	defff904 	addi	sp,sp,-28
   10e88:	df000615 	stw	fp,24(sp)
   10e8c:	df000604 	addi	fp,sp,24
   10e90:	e13ffe15 	stw	r4,-8(fp)
   10e94:	e17fff15 	stw	r5,-4(fp)
   10e98:	e0bfff17 	ldw	r2,-4(fp)
   10e9c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10ea0:	0005303a 	rdctl	r2,status
   10ea4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10ea8:	e0fffb17 	ldw	r3,-20(fp)
   10eac:	00bfff84 	movi	r2,-2
   10eb0:	1884703a 	and	r2,r3,r2
   10eb4:	1001703a 	wrctl	status,r2
  
  return context;
   10eb8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10ebc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   10ec0:	00c00044 	movi	r3,1
   10ec4:	e0bffa17 	ldw	r2,-24(fp)
   10ec8:	1884983a 	sll	r2,r3,r2
   10ecc:	0084303a 	nor	r2,zero,r2
   10ed0:	1007883a 	mov	r3,r2
   10ed4:	d0a78e17 	ldw	r2,-25032(gp)
   10ed8:	1884703a 	and	r2,r3,r2
   10edc:	d0a78e15 	stw	r2,-25032(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10ee0:	d0a78e17 	ldw	r2,-25032(gp)
   10ee4:	100170fa 	wrctl	ienable,r2
   10ee8:	e0bffc17 	ldw	r2,-16(fp)
   10eec:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10ef0:	e0bffd17 	ldw	r2,-12(fp)
   10ef4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   10ef8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   10efc:	0001883a 	nop
}
   10f00:	e037883a 	mov	sp,fp
   10f04:	df000017 	ldw	fp,0(sp)
   10f08:	dec00104 	addi	sp,sp,4
   10f0c:	f800283a 	ret

00010f10 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   10f10:	defffc04 	addi	sp,sp,-16
   10f14:	df000315 	stw	fp,12(sp)
   10f18:	df000304 	addi	fp,sp,12
   10f1c:	e13ffe15 	stw	r4,-8(fp)
   10f20:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   10f24:	000530fa 	rdctl	r2,ienable
   10f28:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   10f2c:	00c00044 	movi	r3,1
   10f30:	e0bfff17 	ldw	r2,-4(fp)
   10f34:	1884983a 	sll	r2,r3,r2
   10f38:	1007883a 	mov	r3,r2
   10f3c:	e0bffd17 	ldw	r2,-12(fp)
   10f40:	1884703a 	and	r2,r3,r2
   10f44:	1004c03a 	cmpne	r2,r2,zero
   10f48:	10803fcc 	andi	r2,r2,255
}
   10f4c:	e037883a 	mov	sp,fp
   10f50:	df000017 	ldw	fp,0(sp)
   10f54:	dec00104 	addi	sp,sp,4
   10f58:	f800283a 	ret

00010f5c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10f5c:	defff504 	addi	sp,sp,-44
   10f60:	dfc00a15 	stw	ra,40(sp)
   10f64:	df000915 	stw	fp,36(sp)
   10f68:	df000904 	addi	fp,sp,36
   10f6c:	e13ffc15 	stw	r4,-16(fp)
   10f70:	e17ffd15 	stw	r5,-12(fp)
   10f74:	e1bffe15 	stw	r6,-8(fp)
   10f78:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   10f7c:	00bffa84 	movi	r2,-22
   10f80:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   10f84:	e0bffd17 	ldw	r2,-12(fp)
   10f88:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   10f8c:	e0bff817 	ldw	r2,-32(fp)
   10f90:	10800808 	cmpgei	r2,r2,32
   10f94:	1000271e 	bne	r2,zero,11034 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10f98:	0005303a 	rdctl	r2,status
   10f9c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10fa0:	e0fffb17 	ldw	r3,-20(fp)
   10fa4:	00bfff84 	movi	r2,-2
   10fa8:	1884703a 	and	r2,r3,r2
   10fac:	1001703a 	wrctl	status,r2
  
  return context;
   10fb0:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   10fb4:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   10fb8:	00800074 	movhi	r2,1
   10fbc:	10984f04 	addi	r2,r2,24892
   10fc0:	e0fff817 	ldw	r3,-32(fp)
   10fc4:	180690fa 	slli	r3,r3,3
   10fc8:	10c5883a 	add	r2,r2,r3
   10fcc:	e0fffe17 	ldw	r3,-8(fp)
   10fd0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   10fd4:	00800074 	movhi	r2,1
   10fd8:	10984f04 	addi	r2,r2,24892
   10fdc:	e0fff817 	ldw	r3,-32(fp)
   10fe0:	180690fa 	slli	r3,r3,3
   10fe4:	10c5883a 	add	r2,r2,r3
   10fe8:	10800104 	addi	r2,r2,4
   10fec:	e0ffff17 	ldw	r3,-4(fp)
   10ff0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   10ff4:	e0bffe17 	ldw	r2,-8(fp)
   10ff8:	10000526 	beq	r2,zero,11010 <alt_iic_isr_register+0xb4>
   10ffc:	e0bff817 	ldw	r2,-32(fp)
   11000:	100b883a 	mov	r5,r2
   11004:	e13ffc17 	ldw	r4,-16(fp)
   11008:	0010dfc0 	call	10dfc <alt_ic_irq_enable>
   1100c:	00000406 	br	11020 <alt_iic_isr_register+0xc4>
   11010:	e0bff817 	ldw	r2,-32(fp)
   11014:	100b883a 	mov	r5,r2
   11018:	e13ffc17 	ldw	r4,-16(fp)
   1101c:	0010e840 	call	10e84 <alt_ic_irq_disable>
   11020:	e0bff715 	stw	r2,-36(fp)
   11024:	e0bffa17 	ldw	r2,-24(fp)
   11028:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1102c:	e0bff917 	ldw	r2,-28(fp)
   11030:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   11034:	e0bff717 	ldw	r2,-36(fp)
}
   11038:	e037883a 	mov	sp,fp
   1103c:	dfc00117 	ldw	ra,4(sp)
   11040:	df000017 	ldw	fp,0(sp)
   11044:	dec00204 	addi	sp,sp,8
   11048:	f800283a 	ret

0001104c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1104c:	defff904 	addi	sp,sp,-28
   11050:	dfc00615 	stw	ra,24(sp)
   11054:	df000515 	stw	fp,20(sp)
   11058:	df000504 	addi	fp,sp,20
   1105c:	e13ffc15 	stw	r4,-16(fp)
   11060:	e17ffd15 	stw	r5,-12(fp)
   11064:	e1bffe15 	stw	r6,-8(fp)
   11068:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   1106c:	e1bfff17 	ldw	r6,-4(fp)
   11070:	e17ffe17 	ldw	r5,-8(fp)
   11074:	e13ffd17 	ldw	r4,-12(fp)
   11078:	001128c0 	call	1128c <open>
   1107c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   11080:	e0bffb17 	ldw	r2,-20(fp)
   11084:	10001c16 	blt	r2,zero,110f8 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   11088:	00800074 	movhi	r2,1
   1108c:	108bf104 	addi	r2,r2,12228
   11090:	e0fffb17 	ldw	r3,-20(fp)
   11094:	18c00324 	muli	r3,r3,12
   11098:	10c5883a 	add	r2,r2,r3
   1109c:	10c00017 	ldw	r3,0(r2)
   110a0:	e0bffc17 	ldw	r2,-16(fp)
   110a4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   110a8:	00800074 	movhi	r2,1
   110ac:	108bf104 	addi	r2,r2,12228
   110b0:	e0fffb17 	ldw	r3,-20(fp)
   110b4:	18c00324 	muli	r3,r3,12
   110b8:	10c5883a 	add	r2,r2,r3
   110bc:	10800104 	addi	r2,r2,4
   110c0:	10c00017 	ldw	r3,0(r2)
   110c4:	e0bffc17 	ldw	r2,-16(fp)
   110c8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   110cc:	00800074 	movhi	r2,1
   110d0:	108bf104 	addi	r2,r2,12228
   110d4:	e0fffb17 	ldw	r3,-20(fp)
   110d8:	18c00324 	muli	r3,r3,12
   110dc:	10c5883a 	add	r2,r2,r3
   110e0:	10800204 	addi	r2,r2,8
   110e4:	10c00017 	ldw	r3,0(r2)
   110e8:	e0bffc17 	ldw	r2,-16(fp)
   110ec:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   110f0:	e13ffb17 	ldw	r4,-20(fp)
   110f4:	000ea000 	call	ea00 <alt_release_fd>
  }
} 
   110f8:	0001883a 	nop
   110fc:	e037883a 	mov	sp,fp
   11100:	dfc00117 	ldw	ra,4(sp)
   11104:	df000017 	ldw	fp,0(sp)
   11108:	dec00204 	addi	sp,sp,8
   1110c:	f800283a 	ret

00011110 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   11110:	defffb04 	addi	sp,sp,-20
   11114:	dfc00415 	stw	ra,16(sp)
   11118:	df000315 	stw	fp,12(sp)
   1111c:	df000304 	addi	fp,sp,12
   11120:	e13ffd15 	stw	r4,-12(fp)
   11124:	e17ffe15 	stw	r5,-8(fp)
   11128:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   1112c:	01c07fc4 	movi	r7,511
   11130:	01800044 	movi	r6,1
   11134:	e17ffd17 	ldw	r5,-12(fp)
   11138:	01000074 	movhi	r4,1
   1113c:	210bf404 	addi	r4,r4,12240
   11140:	001104c0 	call	1104c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   11144:	01c07fc4 	movi	r7,511
   11148:	000d883a 	mov	r6,zero
   1114c:	e17ffe17 	ldw	r5,-8(fp)
   11150:	01000074 	movhi	r4,1
   11154:	210bf104 	addi	r4,r4,12228
   11158:	001104c0 	call	1104c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   1115c:	01c07fc4 	movi	r7,511
   11160:	01800044 	movi	r6,1
   11164:	e17fff17 	ldw	r5,-4(fp)
   11168:	01000074 	movhi	r4,1
   1116c:	210bf704 	addi	r4,r4,12252
   11170:	001104c0 	call	1104c <alt_open_fd>
}  
   11174:	0001883a 	nop
   11178:	e037883a 	mov	sp,fp
   1117c:	dfc00117 	ldw	ra,4(sp)
   11180:	df000017 	ldw	fp,0(sp)
   11184:	dec00204 	addi	sp,sp,8
   11188:	f800283a 	ret

0001118c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1118c:	defffe04 	addi	sp,sp,-8
   11190:	dfc00115 	stw	ra,4(sp)
   11194:	df000015 	stw	fp,0(sp)
   11198:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1119c:	d0a00b17 	ldw	r2,-32724(gp)
   111a0:	10000326 	beq	r2,zero,111b0 <alt_get_errno+0x24>
   111a4:	d0a00b17 	ldw	r2,-32724(gp)
   111a8:	103ee83a 	callr	r2
   111ac:	00000106 	br	111b4 <alt_get_errno+0x28>
   111b0:	d0a78504 	addi	r2,gp,-25068
}
   111b4:	e037883a 	mov	sp,fp
   111b8:	dfc00117 	ldw	ra,4(sp)
   111bc:	df000017 	ldw	fp,0(sp)
   111c0:	dec00204 	addi	sp,sp,8
   111c4:	f800283a 	ret

000111c8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   111c8:	defffd04 	addi	sp,sp,-12
   111cc:	df000215 	stw	fp,8(sp)
   111d0:	df000204 	addi	fp,sp,8
   111d4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   111d8:	e0bfff17 	ldw	r2,-4(fp)
   111dc:	10800217 	ldw	r2,8(r2)
   111e0:	10d00034 	orhi	r3,r2,16384
   111e4:	e0bfff17 	ldw	r2,-4(fp)
   111e8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   111ec:	e03ffe15 	stw	zero,-8(fp)
   111f0:	00001d06 	br	11268 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   111f4:	00800074 	movhi	r2,1
   111f8:	108bf104 	addi	r2,r2,12228
   111fc:	e0fffe17 	ldw	r3,-8(fp)
   11200:	18c00324 	muli	r3,r3,12
   11204:	10c5883a 	add	r2,r2,r3
   11208:	10c00017 	ldw	r3,0(r2)
   1120c:	e0bfff17 	ldw	r2,-4(fp)
   11210:	10800017 	ldw	r2,0(r2)
   11214:	1880111e 	bne	r3,r2,1125c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   11218:	00800074 	movhi	r2,1
   1121c:	108bf104 	addi	r2,r2,12228
   11220:	e0fffe17 	ldw	r3,-8(fp)
   11224:	18c00324 	muli	r3,r3,12
   11228:	10c5883a 	add	r2,r2,r3
   1122c:	10800204 	addi	r2,r2,8
   11230:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   11234:	1000090e 	bge	r2,zero,1125c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   11238:	e0bffe17 	ldw	r2,-8(fp)
   1123c:	10c00324 	muli	r3,r2,12
   11240:	00800074 	movhi	r2,1
   11244:	108bf104 	addi	r2,r2,12228
   11248:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1124c:	e0bfff17 	ldw	r2,-4(fp)
   11250:	18800226 	beq	r3,r2,1125c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   11254:	00bffcc4 	movi	r2,-13
   11258:	00000806 	br	1127c <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1125c:	e0bffe17 	ldw	r2,-8(fp)
   11260:	10800044 	addi	r2,r2,1
   11264:	e0bffe15 	stw	r2,-8(fp)
   11268:	d0a00a17 	ldw	r2,-32728(gp)
   1126c:	1007883a 	mov	r3,r2
   11270:	e0bffe17 	ldw	r2,-8(fp)
   11274:	18bfdf2e 	bgeu	r3,r2,111f4 <__alt_data_end+0xf80111f4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   11278:	0005883a 	mov	r2,zero
}
   1127c:	e037883a 	mov	sp,fp
   11280:	df000017 	ldw	fp,0(sp)
   11284:	dec00104 	addi	sp,sp,4
   11288:	f800283a 	ret

0001128c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1128c:	defff604 	addi	sp,sp,-40
   11290:	dfc00915 	stw	ra,36(sp)
   11294:	df000815 	stw	fp,32(sp)
   11298:	df000804 	addi	fp,sp,32
   1129c:	e13ffd15 	stw	r4,-12(fp)
   112a0:	e17ffe15 	stw	r5,-8(fp)
   112a4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   112a8:	00bfffc4 	movi	r2,-1
   112ac:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   112b0:	00bffb44 	movi	r2,-19
   112b4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   112b8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   112bc:	d1600804 	addi	r5,gp,-32736
   112c0:	e13ffd17 	ldw	r4,-12(fp)
   112c4:	00114040 	call	11404 <alt_find_dev>
   112c8:	e0bff815 	stw	r2,-32(fp)
   112cc:	e0bff817 	ldw	r2,-32(fp)
   112d0:	1000051e 	bne	r2,zero,112e8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   112d4:	e13ffd17 	ldw	r4,-12(fp)
   112d8:	00114940 	call	11494 <alt_find_file>
   112dc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   112e0:	00800044 	movi	r2,1
   112e4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   112e8:	e0bff817 	ldw	r2,-32(fp)
   112ec:	10002926 	beq	r2,zero,11394 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   112f0:	e13ff817 	ldw	r4,-32(fp)
   112f4:	001159c0 	call	1159c <alt_get_fd>
   112f8:	e0bff915 	stw	r2,-28(fp)
   112fc:	e0bff917 	ldw	r2,-28(fp)
   11300:	1000030e 	bge	r2,zero,11310 <open+0x84>
    {
      status = index;
   11304:	e0bff917 	ldw	r2,-28(fp)
   11308:	e0bffa15 	stw	r2,-24(fp)
   1130c:	00002306 	br	1139c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   11310:	e0bff917 	ldw	r2,-28(fp)
   11314:	10c00324 	muli	r3,r2,12
   11318:	00800074 	movhi	r2,1
   1131c:	108bf104 	addi	r2,r2,12228
   11320:	1885883a 	add	r2,r3,r2
   11324:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   11328:	e0fffe17 	ldw	r3,-8(fp)
   1132c:	00900034 	movhi	r2,16384
   11330:	10bfffc4 	addi	r2,r2,-1
   11334:	1886703a 	and	r3,r3,r2
   11338:	e0bffc17 	ldw	r2,-16(fp)
   1133c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   11340:	e0bffb17 	ldw	r2,-20(fp)
   11344:	1000051e 	bne	r2,zero,1135c <open+0xd0>
   11348:	e13ffc17 	ldw	r4,-16(fp)
   1134c:	00111c80 	call	111c8 <alt_file_locked>
   11350:	e0bffa15 	stw	r2,-24(fp)
   11354:	e0bffa17 	ldw	r2,-24(fp)
   11358:	10001016 	blt	r2,zero,1139c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1135c:	e0bff817 	ldw	r2,-32(fp)
   11360:	10800317 	ldw	r2,12(r2)
   11364:	10000826 	beq	r2,zero,11388 <open+0xfc>
   11368:	e0bff817 	ldw	r2,-32(fp)
   1136c:	10800317 	ldw	r2,12(r2)
   11370:	e1ffff17 	ldw	r7,-4(fp)
   11374:	e1bffe17 	ldw	r6,-8(fp)
   11378:	e17ffd17 	ldw	r5,-12(fp)
   1137c:	e13ffc17 	ldw	r4,-16(fp)
   11380:	103ee83a 	callr	r2
   11384:	00000106 	br	1138c <open+0x100>
   11388:	0005883a 	mov	r2,zero
   1138c:	e0bffa15 	stw	r2,-24(fp)
   11390:	00000206 	br	1139c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   11394:	00bffb44 	movi	r2,-19
   11398:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   1139c:	e0bffa17 	ldw	r2,-24(fp)
   113a0:	1000090e 	bge	r2,zero,113c8 <open+0x13c>
  {
    alt_release_fd (index);  
   113a4:	e13ff917 	ldw	r4,-28(fp)
   113a8:	000ea000 	call	ea00 <alt_release_fd>
    ALT_ERRNO = -status;
   113ac:	001118c0 	call	1118c <alt_get_errno>
   113b0:	1007883a 	mov	r3,r2
   113b4:	e0bffa17 	ldw	r2,-24(fp)
   113b8:	0085c83a 	sub	r2,zero,r2
   113bc:	18800015 	stw	r2,0(r3)
    return -1;
   113c0:	00bfffc4 	movi	r2,-1
   113c4:	00000106 	br	113cc <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   113c8:	e0bff917 	ldw	r2,-28(fp)
}
   113cc:	e037883a 	mov	sp,fp
   113d0:	dfc00117 	ldw	ra,4(sp)
   113d4:	df000017 	ldw	fp,0(sp)
   113d8:	dec00204 	addi	sp,sp,8
   113dc:	f800283a 	ret

000113e0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   113e0:	deffff04 	addi	sp,sp,-4
   113e4:	df000015 	stw	fp,0(sp)
   113e8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   113ec:	000170fa 	wrctl	ienable,zero
}
   113f0:	0001883a 	nop
   113f4:	e037883a 	mov	sp,fp
   113f8:	df000017 	ldw	fp,0(sp)
   113fc:	dec00104 	addi	sp,sp,4
   11400:	f800283a 	ret

00011404 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   11404:	defffa04 	addi	sp,sp,-24
   11408:	dfc00515 	stw	ra,20(sp)
   1140c:	df000415 	stw	fp,16(sp)
   11410:	df000404 	addi	fp,sp,16
   11414:	e13ffe15 	stw	r4,-8(fp)
   11418:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1141c:	e0bfff17 	ldw	r2,-4(fp)
   11420:	10800017 	ldw	r2,0(r2)
   11424:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   11428:	e13ffe17 	ldw	r4,-8(fp)
   1142c:	00025380 	call	2538 <strlen>
   11430:	10800044 	addi	r2,r2,1
   11434:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11438:	00000d06 	br	11470 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1143c:	e0bffc17 	ldw	r2,-16(fp)
   11440:	10800217 	ldw	r2,8(r2)
   11444:	e0fffd17 	ldw	r3,-12(fp)
   11448:	180d883a 	mov	r6,r3
   1144c:	e17ffe17 	ldw	r5,-8(fp)
   11450:	1009883a 	mov	r4,r2
   11454:	001171c0 	call	1171c <memcmp>
   11458:	1000021e 	bne	r2,zero,11464 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1145c:	e0bffc17 	ldw	r2,-16(fp)
   11460:	00000706 	br	11480 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   11464:	e0bffc17 	ldw	r2,-16(fp)
   11468:	10800017 	ldw	r2,0(r2)
   1146c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11470:	e0fffc17 	ldw	r3,-16(fp)
   11474:	e0bfff17 	ldw	r2,-4(fp)
   11478:	18bff01e 	bne	r3,r2,1143c <__alt_data_end+0xf801143c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   1147c:	0005883a 	mov	r2,zero
}
   11480:	e037883a 	mov	sp,fp
   11484:	dfc00117 	ldw	ra,4(sp)
   11488:	df000017 	ldw	fp,0(sp)
   1148c:	dec00204 	addi	sp,sp,8
   11490:	f800283a 	ret

00011494 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   11494:	defffb04 	addi	sp,sp,-20
   11498:	dfc00415 	stw	ra,16(sp)
   1149c:	df000315 	stw	fp,12(sp)
   114a0:	df000304 	addi	fp,sp,12
   114a4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   114a8:	d0a00617 	ldw	r2,-32744(gp)
   114ac:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   114b0:	00003106 	br	11578 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   114b4:	e0bffd17 	ldw	r2,-12(fp)
   114b8:	10800217 	ldw	r2,8(r2)
   114bc:	1009883a 	mov	r4,r2
   114c0:	00025380 	call	2538 <strlen>
   114c4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   114c8:	e0bffd17 	ldw	r2,-12(fp)
   114cc:	10c00217 	ldw	r3,8(r2)
   114d0:	e0bffe17 	ldw	r2,-8(fp)
   114d4:	10bfffc4 	addi	r2,r2,-1
   114d8:	1885883a 	add	r2,r3,r2
   114dc:	10800003 	ldbu	r2,0(r2)
   114e0:	10803fcc 	andi	r2,r2,255
   114e4:	1080201c 	xori	r2,r2,128
   114e8:	10bfe004 	addi	r2,r2,-128
   114ec:	10800bd8 	cmpnei	r2,r2,47
   114f0:	1000031e 	bne	r2,zero,11500 <alt_find_file+0x6c>
    {
      len -= 1;
   114f4:	e0bffe17 	ldw	r2,-8(fp)
   114f8:	10bfffc4 	addi	r2,r2,-1
   114fc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11500:	e0bffe17 	ldw	r2,-8(fp)
   11504:	e0ffff17 	ldw	r3,-4(fp)
   11508:	1885883a 	add	r2,r3,r2
   1150c:	10800003 	ldbu	r2,0(r2)
   11510:	10803fcc 	andi	r2,r2,255
   11514:	1080201c 	xori	r2,r2,128
   11518:	10bfe004 	addi	r2,r2,-128
   1151c:	10800be0 	cmpeqi	r2,r2,47
   11520:	1000081e 	bne	r2,zero,11544 <alt_find_file+0xb0>
   11524:	e0bffe17 	ldw	r2,-8(fp)
   11528:	e0ffff17 	ldw	r3,-4(fp)
   1152c:	1885883a 	add	r2,r3,r2
   11530:	10800003 	ldbu	r2,0(r2)
   11534:	10803fcc 	andi	r2,r2,255
   11538:	1080201c 	xori	r2,r2,128
   1153c:	10bfe004 	addi	r2,r2,-128
   11540:	10000a1e 	bne	r2,zero,1156c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   11544:	e0bffd17 	ldw	r2,-12(fp)
   11548:	10800217 	ldw	r2,8(r2)
   1154c:	e0fffe17 	ldw	r3,-8(fp)
   11550:	180d883a 	mov	r6,r3
   11554:	e17fff17 	ldw	r5,-4(fp)
   11558:	1009883a 	mov	r4,r2
   1155c:	001171c0 	call	1171c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11560:	1000021e 	bne	r2,zero,1156c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   11564:	e0bffd17 	ldw	r2,-12(fp)
   11568:	00000706 	br	11588 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   1156c:	e0bffd17 	ldw	r2,-12(fp)
   11570:	10800017 	ldw	r2,0(r2)
   11574:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   11578:	e0fffd17 	ldw	r3,-12(fp)
   1157c:	d0a00604 	addi	r2,gp,-32744
   11580:	18bfcc1e 	bne	r3,r2,114b4 <__alt_data_end+0xf80114b4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   11584:	0005883a 	mov	r2,zero
}
   11588:	e037883a 	mov	sp,fp
   1158c:	dfc00117 	ldw	ra,4(sp)
   11590:	df000017 	ldw	fp,0(sp)
   11594:	dec00204 	addi	sp,sp,8
   11598:	f800283a 	ret

0001159c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1159c:	defffc04 	addi	sp,sp,-16
   115a0:	df000315 	stw	fp,12(sp)
   115a4:	df000304 	addi	fp,sp,12
   115a8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   115ac:	00bffa04 	movi	r2,-24
   115b0:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   115b4:	e03ffd15 	stw	zero,-12(fp)
   115b8:	00001906 	br	11620 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   115bc:	00800074 	movhi	r2,1
   115c0:	108bf104 	addi	r2,r2,12228
   115c4:	e0fffd17 	ldw	r3,-12(fp)
   115c8:	18c00324 	muli	r3,r3,12
   115cc:	10c5883a 	add	r2,r2,r3
   115d0:	10800017 	ldw	r2,0(r2)
   115d4:	10000f1e 	bne	r2,zero,11614 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   115d8:	00800074 	movhi	r2,1
   115dc:	108bf104 	addi	r2,r2,12228
   115e0:	e0fffd17 	ldw	r3,-12(fp)
   115e4:	18c00324 	muli	r3,r3,12
   115e8:	10c5883a 	add	r2,r2,r3
   115ec:	e0ffff17 	ldw	r3,-4(fp)
   115f0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   115f4:	d0e00a17 	ldw	r3,-32728(gp)
   115f8:	e0bffd17 	ldw	r2,-12(fp)
   115fc:	1880020e 	bge	r3,r2,11608 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   11600:	e0bffd17 	ldw	r2,-12(fp)
   11604:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   11608:	e0bffd17 	ldw	r2,-12(fp)
   1160c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   11610:	00000606 	br	1162c <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11614:	e0bffd17 	ldw	r2,-12(fp)
   11618:	10800044 	addi	r2,r2,1
   1161c:	e0bffd15 	stw	r2,-12(fp)
   11620:	e0bffd17 	ldw	r2,-12(fp)
   11624:	10800810 	cmplti	r2,r2,32
   11628:	103fe41e 	bne	r2,zero,115bc <__alt_data_end+0xf80115bc>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   1162c:	e0bffe17 	ldw	r2,-8(fp)
}
   11630:	e037883a 	mov	sp,fp
   11634:	df000017 	ldw	fp,0(sp)
   11638:	dec00104 	addi	sp,sp,4
   1163c:	f800283a 	ret

00011640 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   11640:	defffb04 	addi	sp,sp,-20
   11644:	df000415 	stw	fp,16(sp)
   11648:	df000404 	addi	fp,sp,16
   1164c:	e13ffe15 	stw	r4,-8(fp)
   11650:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   11654:	e0bfff17 	ldw	r2,-4(fp)
   11658:	10840070 	cmpltui	r2,r2,4097
   1165c:	1000021e 	bne	r2,zero,11668 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   11660:	00840004 	movi	r2,4096
   11664:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   11668:	e0fffe17 	ldw	r3,-8(fp)
   1166c:	e0bfff17 	ldw	r2,-4(fp)
   11670:	1885883a 	add	r2,r3,r2
   11674:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   11678:	e0bffe17 	ldw	r2,-8(fp)
   1167c:	e0bffc15 	stw	r2,-16(fp)
   11680:	00000506 	br	11698 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   11684:	e0bffc17 	ldw	r2,-16(fp)
   11688:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1168c:	e0bffc17 	ldw	r2,-16(fp)
   11690:	10800804 	addi	r2,r2,32
   11694:	e0bffc15 	stw	r2,-16(fp)
   11698:	e0fffc17 	ldw	r3,-16(fp)
   1169c:	e0bffd17 	ldw	r2,-12(fp)
   116a0:	18bff836 	bltu	r3,r2,11684 <__alt_data_end+0xf8011684>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   116a4:	e0bffe17 	ldw	r2,-8(fp)
   116a8:	108007cc 	andi	r2,r2,31
   116ac:	10000226 	beq	r2,zero,116b8 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   116b0:	e0bffc17 	ldw	r2,-16(fp)
   116b4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   116b8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   116bc:	0001883a 	nop
   116c0:	e037883a 	mov	sp,fp
   116c4:	df000017 	ldw	fp,0(sp)
   116c8:	dec00104 	addi	sp,sp,4
   116cc:	f800283a 	ret

000116d0 <atexit>:
   116d0:	200b883a 	mov	r5,r4
   116d4:	000f883a 	mov	r7,zero
   116d8:	000d883a 	mov	r6,zero
   116dc:	0009883a 	mov	r4,zero
   116e0:	00117981 	jmpi	11798 <__register_exitproc>

000116e4 <exit>:
   116e4:	defffe04 	addi	sp,sp,-8
   116e8:	000b883a 	mov	r5,zero
   116ec:	dc000015 	stw	r16,0(sp)
   116f0:	dfc00115 	stw	ra,4(sp)
   116f4:	2021883a 	mov	r16,r4
   116f8:	00118b00 	call	118b0 <__call_exitprocs>
   116fc:	00800074 	movhi	r2,1
   11700:	1090b304 	addi	r2,r2,17100
   11704:	11000017 	ldw	r4,0(r2)
   11708:	20800f17 	ldw	r2,60(r4)
   1170c:	10000126 	beq	r2,zero,11714 <exit+0x30>
   11710:	103ee83a 	callr	r2
   11714:	8009883a 	mov	r4,r16
   11718:	0011a300 	call	11a30 <_exit>

0001171c <memcmp>:
   1171c:	01c000c4 	movi	r7,3
   11720:	3980192e 	bgeu	r7,r6,11788 <memcmp+0x6c>
   11724:	2144b03a 	or	r2,r4,r5
   11728:	11c4703a 	and	r2,r2,r7
   1172c:	10000f26 	beq	r2,zero,1176c <memcmp+0x50>
   11730:	20800003 	ldbu	r2,0(r4)
   11734:	28c00003 	ldbu	r3,0(r5)
   11738:	10c0151e 	bne	r2,r3,11790 <memcmp+0x74>
   1173c:	31bfff84 	addi	r6,r6,-2
   11740:	01ffffc4 	movi	r7,-1
   11744:	00000406 	br	11758 <memcmp+0x3c>
   11748:	20800003 	ldbu	r2,0(r4)
   1174c:	28c00003 	ldbu	r3,0(r5)
   11750:	31bfffc4 	addi	r6,r6,-1
   11754:	10c00e1e 	bne	r2,r3,11790 <memcmp+0x74>
   11758:	21000044 	addi	r4,r4,1
   1175c:	29400044 	addi	r5,r5,1
   11760:	31fff91e 	bne	r6,r7,11748 <__alt_data_end+0xf8011748>
   11764:	0005883a 	mov	r2,zero
   11768:	f800283a 	ret
   1176c:	20c00017 	ldw	r3,0(r4)
   11770:	28800017 	ldw	r2,0(r5)
   11774:	18bfee1e 	bne	r3,r2,11730 <__alt_data_end+0xf8011730>
   11778:	31bfff04 	addi	r6,r6,-4
   1177c:	21000104 	addi	r4,r4,4
   11780:	29400104 	addi	r5,r5,4
   11784:	39bff936 	bltu	r7,r6,1176c <__alt_data_end+0xf801176c>
   11788:	303fe91e 	bne	r6,zero,11730 <__alt_data_end+0xf8011730>
   1178c:	003ff506 	br	11764 <__alt_data_end+0xf8011764>
   11790:	10c5c83a 	sub	r2,r2,r3
   11794:	f800283a 	ret

00011798 <__register_exitproc>:
   11798:	defffa04 	addi	sp,sp,-24
   1179c:	dc000315 	stw	r16,12(sp)
   117a0:	04000074 	movhi	r16,1
   117a4:	8410b304 	addi	r16,r16,17100
   117a8:	80c00017 	ldw	r3,0(r16)
   117ac:	dc400415 	stw	r17,16(sp)
   117b0:	dfc00515 	stw	ra,20(sp)
   117b4:	18805217 	ldw	r2,328(r3)
   117b8:	2023883a 	mov	r17,r4
   117bc:	10003726 	beq	r2,zero,1189c <__register_exitproc+0x104>
   117c0:	10c00117 	ldw	r3,4(r2)
   117c4:	010007c4 	movi	r4,31
   117c8:	20c00e16 	blt	r4,r3,11804 <__register_exitproc+0x6c>
   117cc:	1a000044 	addi	r8,r3,1
   117d0:	8800221e 	bne	r17,zero,1185c <__register_exitproc+0xc4>
   117d4:	18c00084 	addi	r3,r3,2
   117d8:	18c7883a 	add	r3,r3,r3
   117dc:	18c7883a 	add	r3,r3,r3
   117e0:	12000115 	stw	r8,4(r2)
   117e4:	10c7883a 	add	r3,r2,r3
   117e8:	19400015 	stw	r5,0(r3)
   117ec:	0005883a 	mov	r2,zero
   117f0:	dfc00517 	ldw	ra,20(sp)
   117f4:	dc400417 	ldw	r17,16(sp)
   117f8:	dc000317 	ldw	r16,12(sp)
   117fc:	dec00604 	addi	sp,sp,24
   11800:	f800283a 	ret
   11804:	00800034 	movhi	r2,0
   11808:	1086dc04 	addi	r2,r2,7024
   1180c:	10002626 	beq	r2,zero,118a8 <__register_exitproc+0x110>
   11810:	01006404 	movi	r4,400
   11814:	d9400015 	stw	r5,0(sp)
   11818:	d9800115 	stw	r6,4(sp)
   1181c:	d9c00215 	stw	r7,8(sp)
   11820:	0001b700 	call	1b70 <malloc>
   11824:	d9400017 	ldw	r5,0(sp)
   11828:	d9800117 	ldw	r6,4(sp)
   1182c:	d9c00217 	ldw	r7,8(sp)
   11830:	10001d26 	beq	r2,zero,118a8 <__register_exitproc+0x110>
   11834:	81000017 	ldw	r4,0(r16)
   11838:	10000115 	stw	zero,4(r2)
   1183c:	02000044 	movi	r8,1
   11840:	22405217 	ldw	r9,328(r4)
   11844:	0007883a 	mov	r3,zero
   11848:	12400015 	stw	r9,0(r2)
   1184c:	20805215 	stw	r2,328(r4)
   11850:	10006215 	stw	zero,392(r2)
   11854:	10006315 	stw	zero,396(r2)
   11858:	883fde26 	beq	r17,zero,117d4 <__alt_data_end+0xf80117d4>
   1185c:	18c9883a 	add	r4,r3,r3
   11860:	2109883a 	add	r4,r4,r4
   11864:	1109883a 	add	r4,r2,r4
   11868:	21802215 	stw	r6,136(r4)
   1186c:	01800044 	movi	r6,1
   11870:	12406217 	ldw	r9,392(r2)
   11874:	30cc983a 	sll	r6,r6,r3
   11878:	4992b03a 	or	r9,r9,r6
   1187c:	12406215 	stw	r9,392(r2)
   11880:	21c04215 	stw	r7,264(r4)
   11884:	01000084 	movi	r4,2
   11888:	893fd21e 	bne	r17,r4,117d4 <__alt_data_end+0xf80117d4>
   1188c:	11006317 	ldw	r4,396(r2)
   11890:	218cb03a 	or	r6,r4,r6
   11894:	11806315 	stw	r6,396(r2)
   11898:	003fce06 	br	117d4 <__alt_data_end+0xf80117d4>
   1189c:	18805304 	addi	r2,r3,332
   118a0:	18805215 	stw	r2,328(r3)
   118a4:	003fc606 	br	117c0 <__alt_data_end+0xf80117c0>
   118a8:	00bfffc4 	movi	r2,-1
   118ac:	003fd006 	br	117f0 <__alt_data_end+0xf80117f0>

000118b0 <__call_exitprocs>:
   118b0:	defff504 	addi	sp,sp,-44
   118b4:	df000915 	stw	fp,36(sp)
   118b8:	dd400615 	stw	r21,24(sp)
   118bc:	dc800315 	stw	r18,12(sp)
   118c0:	dfc00a15 	stw	ra,40(sp)
   118c4:	ddc00815 	stw	r23,32(sp)
   118c8:	dd800715 	stw	r22,28(sp)
   118cc:	dd000515 	stw	r20,20(sp)
   118d0:	dcc00415 	stw	r19,16(sp)
   118d4:	dc400215 	stw	r17,8(sp)
   118d8:	dc000115 	stw	r16,4(sp)
   118dc:	d9000015 	stw	r4,0(sp)
   118e0:	2839883a 	mov	fp,r5
   118e4:	04800044 	movi	r18,1
   118e8:	057fffc4 	movi	r21,-1
   118ec:	00800074 	movhi	r2,1
   118f0:	1090b304 	addi	r2,r2,17100
   118f4:	12000017 	ldw	r8,0(r2)
   118f8:	45005217 	ldw	r20,328(r8)
   118fc:	44c05204 	addi	r19,r8,328
   11900:	a0001c26 	beq	r20,zero,11974 <__call_exitprocs+0xc4>
   11904:	a0800117 	ldw	r2,4(r20)
   11908:	15ffffc4 	addi	r23,r2,-1
   1190c:	b8000d16 	blt	r23,zero,11944 <__call_exitprocs+0x94>
   11910:	14000044 	addi	r16,r2,1
   11914:	8421883a 	add	r16,r16,r16
   11918:	8421883a 	add	r16,r16,r16
   1191c:	84402004 	addi	r17,r16,128
   11920:	a463883a 	add	r17,r20,r17
   11924:	a421883a 	add	r16,r20,r16
   11928:	e0001e26 	beq	fp,zero,119a4 <__call_exitprocs+0xf4>
   1192c:	80804017 	ldw	r2,256(r16)
   11930:	e0801c26 	beq	fp,r2,119a4 <__call_exitprocs+0xf4>
   11934:	bdffffc4 	addi	r23,r23,-1
   11938:	843fff04 	addi	r16,r16,-4
   1193c:	8c7fff04 	addi	r17,r17,-4
   11940:	bd7ff91e 	bne	r23,r21,11928 <__alt_data_end+0xf8011928>
   11944:	00800034 	movhi	r2,0
   11948:	1086e104 	addi	r2,r2,7044
   1194c:	10000926 	beq	r2,zero,11974 <__call_exitprocs+0xc4>
   11950:	a0800117 	ldw	r2,4(r20)
   11954:	1000301e 	bne	r2,zero,11a18 <__call_exitprocs+0x168>
   11958:	a0800017 	ldw	r2,0(r20)
   1195c:	10003226 	beq	r2,zero,11a28 <__call_exitprocs+0x178>
   11960:	a009883a 	mov	r4,r20
   11964:	98800015 	stw	r2,0(r19)
   11968:	0001b840 	call	1b84 <free>
   1196c:	9d000017 	ldw	r20,0(r19)
   11970:	a03fe41e 	bne	r20,zero,11904 <__alt_data_end+0xf8011904>
   11974:	dfc00a17 	ldw	ra,40(sp)
   11978:	df000917 	ldw	fp,36(sp)
   1197c:	ddc00817 	ldw	r23,32(sp)
   11980:	dd800717 	ldw	r22,28(sp)
   11984:	dd400617 	ldw	r21,24(sp)
   11988:	dd000517 	ldw	r20,20(sp)
   1198c:	dcc00417 	ldw	r19,16(sp)
   11990:	dc800317 	ldw	r18,12(sp)
   11994:	dc400217 	ldw	r17,8(sp)
   11998:	dc000117 	ldw	r16,4(sp)
   1199c:	dec00b04 	addi	sp,sp,44
   119a0:	f800283a 	ret
   119a4:	a0800117 	ldw	r2,4(r20)
   119a8:	80c00017 	ldw	r3,0(r16)
   119ac:	10bfffc4 	addi	r2,r2,-1
   119b0:	15c01426 	beq	r2,r23,11a04 <__call_exitprocs+0x154>
   119b4:	80000015 	stw	zero,0(r16)
   119b8:	183fde26 	beq	r3,zero,11934 <__alt_data_end+0xf8011934>
   119bc:	95c8983a 	sll	r4,r18,r23
   119c0:	a0806217 	ldw	r2,392(r20)
   119c4:	a5800117 	ldw	r22,4(r20)
   119c8:	2084703a 	and	r2,r4,r2
   119cc:	10000b26 	beq	r2,zero,119fc <__call_exitprocs+0x14c>
   119d0:	a0806317 	ldw	r2,396(r20)
   119d4:	2088703a 	and	r4,r4,r2
   119d8:	20000c1e 	bne	r4,zero,11a0c <__call_exitprocs+0x15c>
   119dc:	89400017 	ldw	r5,0(r17)
   119e0:	d9000017 	ldw	r4,0(sp)
   119e4:	183ee83a 	callr	r3
   119e8:	a0800117 	ldw	r2,4(r20)
   119ec:	15bfbf1e 	bne	r2,r22,118ec <__alt_data_end+0xf80118ec>
   119f0:	98800017 	ldw	r2,0(r19)
   119f4:	153fcf26 	beq	r2,r20,11934 <__alt_data_end+0xf8011934>
   119f8:	003fbc06 	br	118ec <__alt_data_end+0xf80118ec>
   119fc:	183ee83a 	callr	r3
   11a00:	003ff906 	br	119e8 <__alt_data_end+0xf80119e8>
   11a04:	a5c00115 	stw	r23,4(r20)
   11a08:	003feb06 	br	119b8 <__alt_data_end+0xf80119b8>
   11a0c:	89000017 	ldw	r4,0(r17)
   11a10:	183ee83a 	callr	r3
   11a14:	003ff406 	br	119e8 <__alt_data_end+0xf80119e8>
   11a18:	a0800017 	ldw	r2,0(r20)
   11a1c:	a027883a 	mov	r19,r20
   11a20:	1029883a 	mov	r20,r2
   11a24:	003fb606 	br	11900 <__alt_data_end+0xf8011900>
   11a28:	0005883a 	mov	r2,zero
   11a2c:	003ffb06 	br	11a1c <__alt_data_end+0xf8011a1c>

00011a30 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   11a30:	defffd04 	addi	sp,sp,-12
   11a34:	df000215 	stw	fp,8(sp)
   11a38:	df000204 	addi	fp,sp,8
   11a3c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   11a40:	0001883a 	nop
   11a44:	e0bfff17 	ldw	r2,-4(fp)
   11a48:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   11a4c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   11a50:	10000226 	beq	r2,zero,11a5c <_exit+0x2c>
    ALT_SIM_FAIL();
   11a54:	002af070 	cmpltui	zero,zero,43969
   11a58:	00000106 	br	11a60 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   11a5c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   11a60:	003fff06 	br	11a60 <__alt_data_end+0xf8011a60>
