
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module bt-spi-system(

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK_50,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// SW //////////
	input 		    [17:0]		SW,

	//////////// USB 2.0 OTG (Cypress CY7C67200) //////////
	output		     [1:0]		OTG_ADDR,
	output		          		OTG_CS_N,
	inout 		    [15:0]		OTG_DATA,
	input 		          		OTG_INT,
	output		          		OTG_RD_N,
	output		          		OTG_RST_N,
	output		          		OTG_WE_N,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [31:0]		DRAM_DQ,
	output		     [3:0]		DRAM_DQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_WE_N,


	//////////// Flash //////////
	output		    [22:0]		FL_ADDR,
	output		          		FL_CE_N,
	inout 		     [7:0]		FL_DQ,
	output		          		FL_OE_N,
	output		          		FL_RST_N,
	input 		          		FL_RY,
	output		          		FL_WE_N,
	output		          		FL_WP_N,


	//////////// GPIO, GPIO connect to RFS //////////
	inout 		          		BT_KEY,
	input 		          		BT_UART_RX,
	output		          		BT_UART_TX,
);




//=======================================================
//  REG/WIRE declarations
//=======================================================

assign  BT_UART_TX = txd;
assign  rxd  = BT_UART_RX;

wire 				rts; // request to send		  
wire 				cts; // clear to send
wire 				rxd;
wire 				txd;
wire	 [7:0]   uart_data;
wire	         rdempty;
wire	         write;
reg	     	   read;
reg	         cnt;
//=======================================================
//  Structural coding
//=======================================================

// UART Controller
uart_control UART0(

	.clk(CLOCK_50),
	.reset_n(KEY[0]),
	// tx
	.write(write),
	.writedata(uart_data),

	// rx
	.read(read),
	.readdata(uart_data),
	.rdempty(rdempty),
	//
	.uart_clk_25m(cnt),
	.uart_tx(txd),
	.uart_rx(rxd)
	
);	

//read
always@(posedge CLOCK_50)
begin
  if (~rdempty)
		read <= 1;
  else
		read <= 0;
end
assign  write = ( read & (~rdempty) );

always@(posedge CLOCK_50 or negedge KEY[0])
begin
  if(!KEY[0])
    LEDR <= 0;
  else if(KEY[0] & write)
  begin
    case(uart_data)
	 10'h30:LEDR <= LEDR | 8'd1;
	 10'h31:LEDR <= LEDR | 8'd2;
	 10'h32:LEDR <= LEDR | 8'd4;
	 10'h33:LEDR <= LEDR | 8'd8;
	 10'h34:LEDR <= LEDR & 8'he;
	 10'h35:LEDR <= LEDR & 8'hd;
	 10'h36:LEDR <= LEDR & 8'hb;
	 10'h37:LEDR <= LEDR & 8'h7;
	 10'h38:LEDR <= LEDR | 8'hf;
	 10'h39:LEDR <= LEDR & 8'h0;
	 default : LEDR <= LEDR;
	 endcase
  end
  else
    LEDR <= LEDR;
end

always@(posedge CLOCK_50)
	cnt <= cnt + 1;

endmodule
