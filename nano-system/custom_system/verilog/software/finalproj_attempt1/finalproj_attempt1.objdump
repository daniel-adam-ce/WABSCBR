
finalproj_attempt1.elf:     file format elf32-littlenios2
finalproj_attempt1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000248

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00017660 memsz 0x00017660 flags r-x
    LOAD off    0x00018680 vaddr 0x00017680 paddr 0x00019560 align 2**12
         filesz 0x00001ee0 memsz 0x00001ee0 flags rw-
    LOAD off    0x0001b440 vaddr 0x0001b440 paddr 0x0001b440 align 2**12
         filesz 0x00000000 memsz 0x000006fc flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00016e04  00000248  00000248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000634  0001704c  0001704c  0001804c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ee0  00017680  00019560  00018680  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000006fc  0001b440  0001b440  0001b440  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  0001bb3c  0001bb3c  0001a560  2**0
                  CONTENTS
  7 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM 00000000  09000000  09000000  0001a560  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001a560  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000fc0  00000000  00000000  0001a588  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00028cb4  00000000  00000000  0001b548  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009da4  00000000  00000000  000441fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000d30e  00000000  00000000  0004dfa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003038  00000000  00000000  0005b2b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000050cd  00000000  00000000  0005e2e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00017a8c  00000000  00000000  000633b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  0007ae44  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001950  00000000  00000000  0007ae68  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00080f36  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  00080f39  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00080f3e  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00080f3f  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00080f40  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00080f44  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00080f48  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  00080f4c  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  00080f55  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  00080f5e  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  00080f67  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000031  00000000  00000000  00080f72  2**0
                  CONTENTS, READONLY
 30 .jdi          0000abe3  00000000  00000000  00080fa3  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     001ae257  00000000  00000000  0008bb86  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000248 l    d  .text	00000000 .text
0001704c l    d  .rodata	00000000 .rodata
00017680 l    d  .rwdata	00000000 .rwdata
0001b440 l    d  .bss	00000000 .bss
0001bb3c l    d  .SDRAM	00000000 .SDRAM
09000000 l    d  .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM	00000000 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../finalproj_attempt1_bsp//obj/HAL/src/crt0.o
00000280 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001722e l     O .rodata	00000010 zeroes.4404
00003500 l     F .text	000000bc __sbprintf
0001723e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00003710 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00005240 l     F .text	00000008 __fp_unlock
00005254 l     F .text	0000019c __sinit.part.1
000053f0 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00017680 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00017ac4 l     O .rwdata	00000020 lc_ctype_charset
00017aa4 l     O .rwdata	00000020 lc_message_charset
00017ae4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00017270 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
000087ec l     F .text	000000fc __sprint_r.part.0
000173a4 l     O .rodata	00000010 blanks.4348
00017394 l     O .rodata	00000010 zeroes.4349
00009d78 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000da34 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000db40 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000db6c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000dc58 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000dd38 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000de24 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
0000e260 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00019550 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000e4ac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000e5e0 l     F .text	00000034 alt_dev_reg
000180cc l     O .rwdata	00001060 JTAG_UART
0001912c l     O .rwdata	00000030 AV_Config
0001915c l     O .rwdata	00000030 Audio_Subsystem_Audio
0001918c l     O .rwdata	0000002c Char_LCD_16x2
000191b8 l     O .rwdata	0000002c IrDA
000191e4 l     O .rwdata	0000002c Expansion_JP5
00019210 l     O .rwdata	0000002c Green_LEDs
0001923c l     O .rwdata	0000002c HEX3_HEX0
00019268 l     O .rwdata	0000002c HEX7_HEX4
00019294 l     O .rwdata	0000002c Pushbuttons
000192c0 l     O .rwdata	0000002c Red_LEDs
000192ec l     O .rwdata	0000002c Slider_Switches
00019318 l     O .rwdata	00000038 PS2_Port
00019350 l     O .rwdata	00000038 PS2_Port_Dual
00019388 l     O .rwdata	0000002c Serial_Port
000193b4 l     O .rwdata	00000034 USB
000193e8 l     O .rwdata	0000005c VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA
00019444 l     O .rwdata	0000005c Video_In_Subsystem_Video_In_DMA
000194a0 l     O .rwdata	00000054 VGA_Subsystem_VGA_Pixel_DMA
000194f4 l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 Altera_UP_SD_Card_Avalon_Interface.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00013340 l     F .text	00000210 altera_avalon_jtag_uart_irq
00013550 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00013b88 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00015f38 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001619c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0001645c l     F .text	0000003c alt_get_errno
00016498 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0001b4a8 g     O .bss	00000004 alt_instruction_exception_handler
0001b470 g     O .bss	00000004 aux_status_register
00007e30 g     F .text	00000074 _mprec_log10
00007f1c g     F .text	0000008c __any_on
0000a314 g     F .text	00000054 _isatty_r
0001727c g     O .rodata	00000028 __mprec_tinytens
0000df34 g     F .text	0000007c alt_main
0001580c g     F .text	0000024c alt_up_pixel_buffer_dma_draw_vline
00001180 g     F .text	000000c0 _puts_r
0001ba3c g     O .bss	00000100 alt_irq
00014744 g     F .text	00000060 alt_up_ps2_disable_read_interrupt
0000a368 g     F .text	00000060 _lseek_r
00019560 g       *ABS*	00000000 __flash_rwdata_start
00013cec g     F .text	00000040 alt_up_character_lcd_send_cmd
0000c560 g     F .text	00000088 .hidden __eqdf2
0000f1cc g     F .text	000001a4 Check_for_Master_Boot_Record
0001bb3c g       *ABS*	00000000 __alt_heap_start
00012f6c g     F .text	000001bc alt_up_sd_card_fclose
00001144 g     F .text	0000003c printf
0000a580 g     F .text	0000009c _wcrtomb_r
000086ac g     F .text	0000005c __sseek
00005590 g     F .text	00000010 __sinit
0000a428 g     F .text	00000140 __swbuf_r
0001455c g     F .text	00000034 read_CE_bit
00006058 g     F .text	0000007c _setlocale_r
000053f8 g     F .text	00000068 __sfmoreglue
0000dfd4 g     F .text	00000024 __malloc_unlock
000148e4 g     F .text	0000009c alt_up_ps2_read_data_byte_timeout
00014dd8 g     F .text	00000090 alt_up_rs232_read_fd
0001b494 g     O .bss	00000004 current_sector_modified
00006d28 g     F .text	0000015c memmove
00005578 g     F .text	00000018 _cleanup
00006fac g     F .text	000000a8 _Balloc
00011b90 g     F .text	000000c4 alt_up_sd_card_is_Present
0000ef14 g     F .text	0000004c Save_Modified_Sector
00014f74 g     F .text	00000194 alt_up_pixel_buffer_dma_draw
0000c5e8 g     F .text	000000dc .hidden __gtdf2
00016854 g     F .text	00000024 altera_nios2_gen2_irq_init
00013c78 g     F .text	00000074 get_DDRAM_addr
00014f38 g     F .text	0000003c alt_up_pixel_buffer_dma_open_dev
00000000 g     F .entry	0000001c __reset
0001b48c g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000a2b8 g     F .text	0000005c _fstat_r
0001b458 g     O .bss	00000004 errno
00008628 g     F .text	00000008 __seofread
0001b460 g     O .bss	00000004 alt_argv
00021520 g       *ABS*	00000000 _gp
00012148 g     F .text	0000037c alt_up_sd_card_fopen
00011cc0 g     F .text	000000d0 alt_up_sd_card_find_first
0001b480 g     O .bss	00000004 command_argument_register
00015108 g     F .text	0000005c alt_up_pixel_buffer_dma_change_back_buffer_address
00017f4c g     O .rwdata	00000180 alt_fd_list
0001140c g     F .text	0000012c find_first_empty_record_in_root_directory
000160d8 g     F .text	00000090 alt_find_dev
00006be0 g     F .text	00000148 memcpy
00013e94 g     F .text	00000050 alt_up_character_lcd_write_fd
00005248 g     F .text	0000000c _cleanup_r
0000d84c g     F .text	000000dc .hidden __floatsidf
00016260 g     F .text	0000007c alt_io_redirect
0000c6c4 g     F .text	000000f4 .hidden __ltdf2
0001704c g       *ABS*	00000000 __DTOR_END__
0001442c g     F .text	00000090 alt_up_irda_write_fd
00014d64 g     F .text	00000074 alt_up_rs232_read_data
00001240 g     F .text	00000014 puts
00016ab4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00011014 g     F .text	000001ac find_first_empty_cluster
0000850c g     F .text	00000074 __fpclassifyd
00007d8c g     F .text	000000a4 __ratio
00011ad4 g     F .text	000000bc alt_up_sd_card_open_dev
00009d5c g     F .text	0000001c __vfiprintf_internal
000151c4 g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
00014228 g     F .text	00000040 alt_up_irda_get_used_space_in_read_FIFO
00013748 g     F .text	0000021c altera_avalon_jtag_uart_read
00001114 g     F .text	00000030 _printf_r
0000b310 g     F .text	00000064 .hidden __udivsi3
0000dc94 g     F .text	000000a4 isatty
000172cc g     O .rodata	000000c8 __mprec_tens
000155fc g     F .text	00000210 alt_up_pixel_buffer_dma_draw_hline
000060d4 g     F .text	0000000c __locale_charset
000141c8 g     F .text	00000060 alt_up_irda_disable_read_interrupt
00016a24 g     F .text	00000090 alt_icache_flush
0001b454 g     O .bss	00000004 __malloc_top_pad
00019528 g     O .rwdata	00000004 __mb_cur_max
00006104 g     F .text	0000000c _localeconv_r
000073b8 g     F .text	0000003c __i2b
00005a14 g     F .text	000004bc __sfvwrite_r
00010314 g     F .text	000000b8 get_dir_divider_location
00008580 g     F .text	00000054 _sbrk_r
00015b20 g     F .text	00000084 helper_plot_pixel
0000ffe4 g     F .text	000000c4 filename_to_upper_case
000124c4 g     F .text	00000088 alt_up_sd_card_set_attributes
0000f370 g     F .text	0000027c Read_File_Record_At_Offset
0000a3c8 g     F .text	00000060 _read_r
00019548 g     O .rwdata	00000004 alt_max_fd
00014ce0 g     F .text	00000044 alt_up_rs232_check_parity
00010ba0 g     F .text	00000474 find_file_in_directory
00009fac g     F .text	000000f0 _fclose_r
00014590 g     F .text	00000030 read_num_bytes_available
00005210 g     F .text	00000030 fflush
0001b450 g     O .bss	00000004 __malloc_max_sbrked_mem
000162dc g     F .text	00000180 alt_irq_register
000144f8 g     F .text	00000034 read_RI_bit
00011c54 g     F .text	0000006c alt_up_sd_card_is_FAT16
0000b3cc g     F .text	000008ac .hidden __adddf3
00007b34 g     F .text	0000010c __b2d
000151f8 g     F .text	00000128 alt_up_pixel_buffer_dma_clear_screen
0000ace0 g     F .text	00000538 .hidden __umoddi3
0000de60 g     F .text	000000d4 lseek
00019520 g     O .rwdata	00000004 _global_impure_ptr
00010668 g     F .text	00000538 get_home_directory_cluster_for_file
00007fa8 g     F .text	00000564 _realloc_r
0001bb3c g       *ABS*	00000000 __bss_end
00015320 g     F .text	000002dc alt_up_pixel_buffer_dma_draw_box
0001674c g     F .text	00000108 alt_tick
0000a768 g     F .text	00000578 .hidden __udivdi3
0000a214 g     F .text	00000024 _fputwc_r
000172a4 g     O .rodata	00000028 __mprec_bigtens
0000719c g     F .text	00000104 __s2b
0000d928 g     F .text	000000a8 .hidden __floatunsidf
00007874 g     F .text	00000060 __mcmp
0001b498 g     O .bss	00000004 current_sector_index
000145f4 g     F .text	0000002c read_data_byte
000055b0 g     F .text	00000018 __fp_lock_all
000166b0 g     F .text	0000009c alt_alarm_stop
0001452c g     F .text	00000030 read_RE_bit
0000f0ec g     F .text	000000e0 mark_cluster
0001b49c g     O .bss	00000004 alt_irq_active
00014268 g     F .text	0000003c alt_up_irda_get_available_space_in_write_FIFO
000000fc g     F .exceptions	000000d8 alt_irq_handler
00017f24 g     O .rwdata	00000028 alt_dev_null
00011538 g     F .text	0000018c convert_filename_to_name_extension
00014134 g     F .text	00000038 alt_up_character_lcd_cursor_blink_on
000147a4 g     F .text	00000074 alt_up_ps2_write_data_byte
00015f18 g     F .text	00000020 alt_dcache_flush_all
000072a0 g     F .text	00000068 __hi0bits
0001b46c g     O .bss	00000004 is_sd_card_formated_as_FAT16
00015a58 g     F .text	000000c8 alt_up_pixel_buffer_dma_draw_rectangle
0000d7cc g     F .text	00000080 .hidden __fixdfsi
000111c0 g     F .text	0000024c find_first_empty_record_in_a_subdirectory
00019560 g       *ABS*	00000000 __ram_rwdata_end
00019540 g     O .rwdata	00000008 alt_dev_list
0000e4e8 g     F .text	000000f8 write
00016c18 g     F .text	000000a0 _putc_r
0001b490 g     O .bss	00000004 device_pointer
00015ba4 g     F .text	00000248 alt_up_pixel_buffer_dma_draw_line
00017680 g       *ABS*	00000000 __ram_rodata_end
0000dba8 g     F .text	000000b0 fstat
00014e68 g     F .text	00000094 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
0000c6c4 g     F .text	000000f4 .hidden __ledf2
000075ec g     F .text	00000140 __pow5mult
00008900 g     F .text	0000145c ___vfiprintf_internal_r
0001b448 g     O .bss	00000004 __nlocale_changed
0000b374 g     F .text	00000058 .hidden __umodsi3
0001bb3c g       *ABS*	00000000 end
00014ad4 g     F .text	00000098 alt_up_ps2_write_fd
000142a4 g     F .text	00000044 alt_up_irda_check_parity
0001328c g     F .text	000000b4 altera_avalon_jtag_uart_init
000001d4 g     F .exceptions	00000074 alt_instruction_exception_entry
0001704c g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
00013c04 g     F .text	00000074 alt_avalon_timer_sc_init
0000d9d0 g     F .text	00000064 .hidden __clzsi2
00013964 g     F .text	00000224 altera_avalon_jtag_uart_write
000055a0 g     F .text	00000004 __sfp_lock_acquire
00006afc g     F .text	000000e4 memchr
00013da0 g     F .text	0000007c alt_up_character_lcd_write
000012ec g     F .text	000021f8 ___vfprintf_internal_r
00005704 g     F .text	00000310 _free_r
0000dff8 g     F .text	0000022c alt_printf
000060e0 g     F .text	00000010 __locale_mb_cur_max
00016e98 g     F .text	00000180 __call_exitprocs
0001b444 g     O .bss	00000004 __mlocale_changed
0001952c g     O .rwdata	00000004 __malloc_sbrk_base
00000248 g     F .text	0000003c _start
0001b4a0 g     O .bss	00000004 _alt_tick_rate
0000772c g     F .text	00000148 __lshift
0001b4a4 g     O .bss	00000004 _alt_nticks
0000e29c g     F .text	000000fc read
0000e64c g     F .text	00000814 alt_sys_init
00013fe4 g     F .text	0000008c alt_up_character_lcd_shift_display
00000f30 g     F .text	000001e4 draw_big_A
00016d80 g     F .text	00000118 __register_exitproc
000149f0 g     F .text	00000058 alt_up_ps2_clear_fifo
00014ca4 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
000073f4 g     F .text	000001f8 __multiply
00014070 g     F .text	0000008c alt_up_character_lcd_erase_pos
000135f0 g     F .text	00000068 altera_avalon_jtag_uart_close
00017680 g       *ABS*	00000000 __ram_rwdata_start
0001704c g       *ABS*	00000000 __ram_rodata_start
0001b4ac g     O .bss	00000028 __malloc_current_mallinfo
00007c40 g     F .text	0000014c __d2b
0001b468 g     O .bss	00000004 initialized
00013128 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00016980 g     F .text	000000a4 alt_get_fd
0001b4d4 g     O .bss	00000014 search_data
00009e94 g     F .text	00000054 _close_r
00016b9c g     F .text	0000007c memcmp
000131e8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0001bb3c g       *ABS*	00000000 __alt_stack_base
00013238 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0001416c g     F .text	0000005c alt_up_irda_enable_read_interrupt
000035bc g     F .text	00000154 __swsetup_r
0000bc78 g     F .text	000008e8 .hidden __divdf3
00005460 g     F .text	00000118 __sfp
0001b4e8 g     O .bss	00000054 boot_sector_data
00007ea4 g     F .text	00000078 __copybits
00017b1c g     O .rwdata	00000408 __malloc_av_
000055ac g     F .text	00000004 __sinit_lock_release
0000c7b8 g     F .text	00000718 .hidden __muldf3
000085d4 g     F .text	00000054 __sread
00014c04 g     F .text	00000060 alt_up_rs232_disable_read_interrupt
00016878 g     F .text	00000108 alt_find_file
00015f74 g     F .text	000000a4 alt_dev_llist_insert
0000dfb0 g     F .text	00000024 __malloc_lock
0000e3fc g     F .text	000000b0 sbrk
000051b4 g     F .text	0000005c _fflush_r
00009ee8 g     F .text	000000c4 _calloc_r
0001b440 g       *ABS*	00000000 __bss_start
00006e84 g     F .text	00000128 memset
00000284 g     F .text	00000cac main
0001b464 g     O .bss	00000004 alt_envp
0001b44c g     O .bss	00000004 __malloc_max_total_mem
00015164 g     F .text	00000060 alt_up_pixel_buffer_dma_swap_buffers
00013188 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000a568 g     F .text	00000018 __swbuf
0001254c g     F .text	00000088 alt_up_sd_card_get_attributes
0000ee60 g     F .text	000000b4 Write_Sector_Data
0001294c g     F .text	00000620 alt_up_sd_card_write
00013f58 g     F .text	0000008c alt_up_character_lcd_shift_cursor
00008708 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
0000a09c g     F .text	00000014 fclose
00014980 g     F .text	00000070 alt_up_ps2_read_data_byte
00003910 g     F .text	00001688 _dtoa_r
000062f0 g     F .text	0000080c _malloc_r
0000a6dc g     F .text	00000030 __ascii_wctomb
0001954c g     O .rwdata	00000004 alt_errno
00005ed0 g     F .text	000000c4 _fwalk
000142e8 g     F .text	00000040 alt_up_irda_write_data
00014b6c g     F .text	0000003c alt_up_ps2_open_dev
00016cb8 g     F .text	000000c8 putc
0000b218 g     F .text	00000084 .hidden __divsi3
00013d64 g     F .text	0000003c alt_up_character_lcd_open_dev
000055e0 g     F .text	00000124 _malloc_trim_r
000146e8 g     F .text	0000005c alt_up_ps2_enable_read_interrupt
0001704c g       *ABS*	00000000 __CTOR_END__
0001b474 g     O .bss	00000004 status_register
00013d2c g     F .text	00000038 alt_up_character_lcd_init
00008710 g     F .text	000000dc strcmp
0001b47c g     O .bss	00000004 command_register
0001704c g       *ABS*	00000000 __flash_rodata_start
0001704c g       *ABS*	00000000 __DTOR_LIST__
00014efc g     F .text	0000003c alt_up_rs232_open_dev
0000c560 g     F .text	00000088 .hidden __nedf2
0000e614 g     F .text	00000038 alt_irq_init
0000e398 g     F .text	00000064 alt_release_fd
0000f038 g     F .text	000000b4 get_cluster_flag
000145c0 g     F .text	00000034 read_data_valid
000140fc g     F .text	00000038 alt_up_character_lcd_cursor_off
000173b4 g     O .rodata	00000100 .hidden __clz_tab
0000f5ec g     F .text	0000028c Write_File_Record_At_Offset
0001b440 g     O .bss	00000004 _PathLocale
00014880 g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
00016b50 g     F .text	00000014 atexit
00009e34 g     F .text	00000060 _write_r
00006110 g     F .text	00000018 setlocale
0000f878 g     F .text	00000680 Check_for_DOS_FAT
000116c4 g     F .text	000002c8 create_file
00019524 g     O .rwdata	00000004 _impure_ptr
0001b478 g     O .bss	00000004 CSD_register_w0
0001b45c g     O .bss	00000004 alt_argc
00004f98 g     F .text	0000021c __sflush_r
00016078 g     F .text	00000060 _do_dtors
000060fc g     F .text	00000008 __locale_cjk_lang
09000000 g       *ABS*	00000000 __alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
00000020 g       .exceptions	00000000 alt_irq_entry
00007ad0 g     F .text	00000064 __ulp
000055c8 g     F .text	00000018 __fp_unlock_all
00019538 g     O .rwdata	00000008 alt_fs_list
000100a8 g     F .text	0000026c check_file_name_for_FAT16_compliance
0001b484 g     O .bss	00000004 buffer_memory
00014ba8 g     F .text	0000005c alt_up_rs232_enable_read_interrupt
00014d24 g     F .text	00000040 alt_up_rs232_write_data
00000020 g       *ABS*	00000000 __ram_exceptions_start
00006128 g     F .text	0000000c localeconv
0001b488 g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
00019560 g       *ABS*	00000000 _edata
0001bb3c g       *ABS*	00000000 _end
0001b53c g     O .bss	00000500 active_files
0000a0b0 g     F .text	00000164 __fputwc
00000248 g       *ABS*	00000000 __ram_exceptions_end
0001198c g     F .text	00000148 copy_file_record_name_to_string
00013658 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0000fef8 g     F .text	000000ec Look_for_FAT16
00008630 g     F .text	0000007c __swrite
00019530 g     O .rwdata	00000004 __malloc_trim_threshold
000060f0 g     F .text	0000000c __locale_msgcharset
00016b64 g     F .text	00000038 exit
00014328 g     F .text	00000074 alt_up_irda_read_data
00011d90 g     F .text	000003b8 alt_up_sd_card_find_next
00005f94 g     F .text	000000c4 _fwalk_reent
00014620 g     F .text	000000c8 alt_up_ps2_init
000078d4 g     F .text	000001fc __mdiff
0000b29c g     F .text	00000074 .hidden __modsi3
0000ef60 g     F .text	000000d8 Read_Sector_Data
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000055a4 g     F .text	00000004 __sfp_lock_release
00013e1c g     F .text	00000078 alt_up_character_lcd_string
000144bc g     F .text	0000003c alt_up_irda_open_dev
00017018 g     F .text	00000034 _exit
00015dec g     F .text	0000012c alt_alarm_start
000125d4 g     F .text	00000378 alt_up_sd_card_read
00006134 g     F .text	000001bc __smakebuf_r
00014818 g     F .text	00000068 alt_up_ps2_wait_for_ack
00001254 g     F .text	00000098 strlen
0001655c g     F .text	00000154 open
0000c5e8 g     F .text	000000dc .hidden __gedf2
0000e224 g     F .text	0000003c alt_putchar
00019534 g     O .rwdata	00000004 __wctomb
000088e8 g     F .text	00000018 __sprint_r
00016168 g     F .text	00000034 alt_icache_flush_all
00013ee4 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
00019554 g     O .rwdata	00000004 alt_priority_mask
000034e4 g     F .text	0000001c __vfprintf_internal
0000a70c g     F .text	0000005c _wctomb_r
00014a48 g     F .text	0000008c alt_up_ps2_read_fd
0000ced0 g     F .text	000008fc .hidden __subdf3
0001439c g     F .text	00000090 alt_up_irda_read_fd
00007308 g     F .text	000000b0 __lo0bits
00019558 g     O .rwdata	00000008 alt_alarm_list
00016018 g     F .text	00000060 _do_ctors
00014c64 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
0000a61c g     F .text	000000c0 wcrtomb
0000da70 g     F .text	000000d0 close
0000dda0 g     F .text	00000084 alt_load
000103cc g     F .text	0000029c match_file_record_to_name_ext
0000a238 g     F .text	00000080 fputwc
000055a8 g     F .text	00000004 __sinit_lock_acquire
0000707c g     F .text	00000120 __multadd
00007054 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409214 	ori	at,at,584
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d40 	call	1d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	008000b4 	movhi	r2,2
 140:	10ae8f04 	addi	r2,r2,-17860
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000b4 	movhi	r2,2
 158:	10ae8f04 	addi	r2,r2,-17860
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	e17ffd17 	ldw	r5,-12(fp)
 174:	1009883a 	mov	r4,r2
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700012c>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	0001883a 	nop
}
 1bc:	0001883a 	nop
 1c0:	e037883a 	mov	sp,fp
 1c4:	dfc00117 	ldw	ra,4(sp)
 1c8:	df000017 	ldw	fp,0(sp)
 1cc:	dec00204 	addi	sp,sp,8
 1d0:	f800283a 	ret

000001d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d4:	defffb04 	addi	sp,sp,-20
 1d8:	dfc00415 	stw	ra,16(sp)
 1dc:	df000315 	stw	fp,12(sp)
 1e0:	df000304 	addi	fp,sp,12
 1e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e8:	000531fa 	rdctl	r2,exception
 1ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1f0:	e0bffd17 	ldw	r2,-12(fp)
 1f4:	10801f0c 	andi	r2,r2,124
 1f8:	1004d0ba 	srli	r2,r2,2
 1fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 200:	0005333a 	rdctl	r2,badaddr
 204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 208:	d0a7e217 	ldw	r2,-24696(gp)
 20c:	10000726 	beq	r2,zero,22c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 210:	d0a7e217 	ldw	r2,-24696(gp)
 214:	e0fffd17 	ldw	r3,-12(fp)
 218:	e1bffe17 	ldw	r6,-8(fp)
 21c:	e17fff17 	ldw	r5,-4(fp)
 220:	1809883a 	mov	r4,r3
 224:	103ee83a 	callr	r2
 228:	00000206 	br	234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 22c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 230:	0005883a 	mov	r2,zero
}
 234:	e037883a 	mov	sp,fp
 238:	dfc00117 	ldw	ra,4(sp)
 23c:	df000017 	ldw	fp,0(sp)
 240:	dec00204 	addi	sp,sp,8
 244:	f800283a 	ret

Disassembly of section .text:

00000248 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     248:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     24c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     250:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     254:	d6854814 	ori	gp,gp,5408
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     258:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     25c:	10ad1014 	ori	r2,r2,46144

    movhi r3, %hi(__bss_end)
     260:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     264:	18eecf14 	ori	r3,r3,47932

    beq r2, r3, 1f
     268:	10c00326 	beq	r2,r3,278 <_start+0x30>

0:
    stw zero, (r2)
     26c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     270:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     274:	10fffd36 	bltu	r2,r3,26c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700026c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     278:	000dda00 	call	dda0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     27c:	000df340 	call	df34 <alt_main>

00000280 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     280:	003fff06 	br	280 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000280>

00000284 <main>:
 * 	-- places a blue box on the VGA display, and places a text string inside the box.
 *		-- draws a big A on the screen, for ALTERA
 *		-- "bounces" a colored box around the screen
********************************************************************************/
int main(void)
{
     284:	defffe04 	addi	sp,sp,-8
     288:	dfc00115 	stw	ra,4(sp)
     28c:	df000015 	stw	fp,0(sp)
     290:	d839883a 	mov	fp,sp
     294:	023fff34 	movhi	r8,65532
     298:	423fdb04 	addi	r8,r8,-148
     29c:	da37883a 	add	sp,sp,r8
	alt_up_pixel_buffer_dma_dev *pixel_buffer_dev;
	alt_up_char_buffer_dev *char_buffer_dev;
	alt_up_sd_card_dev * sd_card;
	short int handler;
	short att1=0, att2=0, att3=0, att;
     2a0:	00bfff34 	movhi	r2,65532
     2a4:	10bfe804 	addi	r2,r2,-96
     2a8:	1705883a 	add	r2,r2,fp
     2ac:	1000000d 	sth	zero,0(r2)
     2b0:	00ffff34 	movhi	r3,65532
     2b4:	18ffe884 	addi	r3,r3,-94
     2b8:	1f07883a 	add	r3,r3,fp
     2bc:	1800000d 	sth	zero,0(r3)
     2c0:	013fff34 	movhi	r4,65532
     2c4:	213fe904 	addi	r4,r4,-92
     2c8:	2709883a 	add	r4,r4,fp
     2cc:	2000000d 	sth	zero,0(r4)
	short buffer[512][256];

	sd_card = alt_up_sd_card_open_dev("/dev/SD_Card");
     2d0:	01000074 	movhi	r4,1
     2d4:	211c1304 	addi	r4,r4,28748
     2d8:	0011ad40 	call	11ad4 <alt_up_sd_card_open_dev>
     2dc:	00ffff34 	movhi	r3,65532
     2e0:	18ffea04 	addi	r3,r3,-88
     2e4:	1f07883a 	add	r3,r3,fp
     2e8:	18800015 	stw	r2,0(r3)

	 	 if (sd_card!=NULL){
     2ec:	013fff34 	movhi	r4,65532
     2f0:	213fea04 	addi	r4,r4,-88
     2f4:	2709883a 	add	r4,r4,fp
     2f8:	20800017 	ldw	r2,0(r4)
     2fc:	10006426 	beq	r2,zero,490 <main+0x20c>
			if (alt_up_sd_card_is_Present()){
     300:	0011b900 	call	11b90 <alt_up_sd_card_is_Present>
     304:	10803fcc 	andi	r2,r2,255
     308:	10000726 	beq	r2,zero,328 <main+0xa4>
				printf("An SD Card was found!\n");
     30c:	01000074 	movhi	r4,1
     310:	211c1704 	addi	r4,r4,28764
     314:	00012400 	call	1240 <puts>
			else {
				printf("No SD Card Found. \n Exiting the program.");
				return -1;
			}

	 		if (alt_up_sd_card_is_FAT16()){
     318:	0011c540 	call	11c54 <alt_up_sd_card_is_FAT16>
     31c:	10803fcc 	andi	r2,r2,255
     320:	10005626 	beq	r2,zero,47c <main+0x1f8>
     324:	00000506 	br	33c <main+0xb8>
	 	 if (sd_card!=NULL){
			if (alt_up_sd_card_is_Present()){
				printf("An SD Card was found!\n");
			}
			else {
				printf("No SD Card Found. \n Exiting the program.");
     328:	01000074 	movhi	r4,1
     32c:	211c1d04 	addi	r4,r4,28788
     330:	00011440 	call	1144 <printf>
				return -1;
     334:	00bfffc4 	movi	r2,-1
     338:	0002f806 	br	f1c <main+0xc98>
			}

	 		if (alt_up_sd_card_is_FAT16()){
				printf("FAT-16 partiton found!\n");
     33c:	01000074 	movhi	r4,1
     340:	211c2804 	addi	r4,r4,28832
     344:	00012400 	call	1240 <puts>

				handler = alt_up_sd_card_fopen("test.bmp", false);
     348:	000b883a 	mov	r5,zero
     34c:	01000074 	movhi	r4,1
     350:	211c2e04 	addi	r4,r4,28856
     354:	00121480 	call	12148 <alt_up_sd_card_fopen>
     358:	00ffff34 	movhi	r3,65532
     35c:	18ffeb04 	addi	r3,r3,-84
     360:	1f07883a 	add	r3,r3,fp
     364:	1880000d 	sth	r2,0(r3)
				att = alt_up_sd_card_get_attributes(handler);
     368:	013fff34 	movhi	r4,65532
     36c:	213feb04 	addi	r4,r4,-84
     370:	2709883a 	add	r4,r4,fp
     374:	2080000f 	ldh	r2,0(r4)
     378:	1009883a 	mov	r4,r2
     37c:	001254c0 	call	1254c <alt_up_sd_card_get_attributes>
     380:	00ffff34 	movhi	r3,65532
     384:	18ffeb84 	addi	r3,r3,-82
     388:	1f07883a 	add	r3,r3,fp
     38c:	1880000d 	sth	r2,0(r3)

				/* initialize the pixel buffer HAL */
				pixel_buffer_dev = alt_up_pixel_buffer_dma_open_dev ("/dev/VGA_Subsystem_VGA_Pixel_DMA");
     390:	01000074 	movhi	r4,1
     394:	211c3104 	addi	r4,r4,28868
     398:	0014f380 	call	14f38 <alt_up_pixel_buffer_dma_open_dev>
     39c:	013fff34 	movhi	r4,65532
     3a0:	213fde04 	addi	r4,r4,-136
     3a4:	2709883a 	add	r4,r4,fp
     3a8:	20800015 	stw	r2,0(r4)
				if ( pixel_buffer_dev == NULL)
     3ac:	00ffff34 	movhi	r3,65532
     3b0:	18ffde04 	addi	r3,r3,-136
     3b4:	1f07883a 	add	r3,r3,fp
     3b8:	18800017 	ldw	r2,0(r3)
     3bc:	1000041e 	bne	r2,zero,3d0 <main+0x14c>
					alt_printf ("Error: could not open VGA pixel buffer device\n");
     3c0:	01000074 	movhi	r4,1
     3c4:	211c3a04 	addi	r4,r4,28904
     3c8:	000dff80 	call	dff8 <alt_printf>
     3cc:	00000306 	br	3dc <main+0x158>
				else
					alt_printf ("Opened character VGA pixel buffer device\n");
     3d0:	01000074 	movhi	r4,1
     3d4:	211c4604 	addi	r4,r4,28952
     3d8:	000dff80 	call	dff8 <alt_printf>

				/* set both the main buffer and back buffer to the allocated space */
				alt_up_pixel_buffer_dma_change_back_buffer_address(pixel_buffer_dev, (unsigned int) buffer);
     3dc:	013fff34 	movhi	r4,65532
     3e0:	213fec04 	addi	r4,r4,-80
     3e4:	e105883a 	add	r2,fp,r4
     3e8:	100b883a 	mov	r5,r2
     3ec:	00bfff34 	movhi	r2,65532
     3f0:	10bfde04 	addi	r2,r2,-136
     3f4:	1705883a 	add	r2,r2,fp
     3f8:	11000017 	ldw	r4,0(r2)
     3fc:	00151080 	call	15108 <alt_up_pixel_buffer_dma_change_back_buffer_address>
				alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer_dev);
     400:	00ffff34 	movhi	r3,65532
     404:	18ffde04 	addi	r3,r3,-136
     408:	1f07883a 	add	r3,r3,fp
     40c:	19000017 	ldw	r4,0(r3)
     410:	00151640 	call	15164 <alt_up_pixel_buffer_dma_swap_buffers>
				while (alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buffer_dev));
     414:	0001883a 	nop
     418:	00bfff34 	movhi	r2,65532
     41c:	10bfde04 	addi	r2,r2,-136
     420:	1705883a 	add	r2,r2,fp
     424:	11000017 	ldw	r4,0(r2)
     428:	00151c40 	call	151c4 <alt_up_pixel_buffer_dma_check_swap_buffers_status>
     42c:	103ffa1e 	bne	r2,zero,418 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000418>
				alt_up_pixel_buffer_dma_change_back_buffer_address(pixel_buffer_dev, (unsigned int) buffer);
     430:	00ffff34 	movhi	r3,65532
     434:	18ffec04 	addi	r3,r3,-80
     438:	e0c5883a 	add	r2,fp,r3
     43c:	100b883a 	mov	r5,r2
     440:	00bfff34 	movhi	r2,65532
     444:	10bfde04 	addi	r2,r2,-136
     448:	1705883a 	add	r2,r2,fp
     44c:	11000017 	ldw	r4,0(r2)
     450:	00151080 	call	15108 <alt_up_pixel_buffer_dma_change_back_buffer_address>

				/* clear the graphics screen */
				alt_up_pixel_buffer_dma_clear_screen(pixel_buffer_dev, 0);
     454:	000b883a 	mov	r5,zero
     458:	00ffff34 	movhi	r3,65532
     45c:	18ffde04 	addi	r3,r3,-136
     460:	1f07883a 	add	r3,r3,fp
     464:	19000017 	ldw	r4,0(r3)
     468:	00151f80 	call	151f8 <alt_up_pixel_buffer_dma_clear_screen>
			else{
				printf("No FAT-16 partition found - Exiting!\n");
				return -1;
			}

			printf("The SD Card contains the following files:\n");
     46c:	01000074 	movhi	r4,1
     470:	211c5b04 	addi	r4,r4,29036
     474:	00012400 	call	1240 <puts>
     478:	00000506 	br	490 <main+0x20c>

				/* clear the graphics screen */
				alt_up_pixel_buffer_dma_clear_screen(pixel_buffer_dev, 0);
			}
			else{
				printf("No FAT-16 partition found - Exiting!\n");
     47c:	01000074 	movhi	r4,1
     480:	211c5104 	addi	r4,r4,28996
     484:	00012400 	call	1240 <puts>
				return -1;
     488:	00bfffc4 	movi	r2,-1
     48c:	0002a306 	br	f1c <main+0xc98>
			//find_files (".");

		}

	/* used for drawing coordinates */
	int x1, y1, x2, y2, deltax_1, deltax_2, deltay_1, deltay_2, delay = 0;
     490:	013fff34 	movhi	r4,65532
     494:	213fe704 	addi	r4,r4,-100
     498:	2709883a 	add	r4,r4,fp
     49c:	20000015 	stw	zero,0(r4)

	/* create a message to be displayed on the VGA display */
	char text_top_row[40] = "Altera DE2-115\0";
     4a0:	00800134 	movhi	r2,4
     4a4:	10800e04 	addi	r2,r2,56
     4a8:	00ffff34 	movhi	r3,65532
     4ac:	18ffde04 	addi	r3,r3,-136
     4b0:	1f07883a 	add	r3,r3,fp
     4b4:	1885883a 	add	r2,r3,r2
     4b8:	00c00074 	movhi	r3,1
     4bc:	18dc6604 	addi	r3,r3,29080
     4c0:	19000017 	ldw	r4,0(r3)
     4c4:	11000015 	stw	r4,0(r2)
     4c8:	19000117 	ldw	r4,4(r3)
     4cc:	11000115 	stw	r4,4(r2)
     4d0:	19000217 	ldw	r4,8(r3)
     4d4:	11000215 	stw	r4,8(r2)
     4d8:	18c00317 	ldw	r3,12(r3)
     4dc:	10c00315 	stw	r3,12(r2)
     4e0:	10000415 	stw	zero,16(r2)
     4e4:	10000515 	stw	zero,20(r2)
     4e8:	10000615 	stw	zero,24(r2)
     4ec:	10000715 	stw	zero,28(r2)
     4f0:	10000815 	stw	zero,32(r2)
     4f4:	10000915 	stw	zero,36(r2)
	char text_bottom_row[40] = "Media Computer\0";
     4f8:	00800134 	movhi	r2,4
     4fc:	10801804 	addi	r2,r2,96
     500:	013fff34 	movhi	r4,65532
     504:	213fde04 	addi	r4,r4,-136
     508:	2709883a 	add	r4,r4,fp
     50c:	2085883a 	add	r2,r4,r2
     510:	00c00074 	movhi	r3,1
     514:	18dc7004 	addi	r3,r3,29120
     518:	19000017 	ldw	r4,0(r3)
     51c:	11000015 	stw	r4,0(r2)
     520:	19000117 	ldw	r4,4(r3)
     524:	11000115 	stw	r4,4(r2)
     528:	19000217 	ldw	r4,8(r3)
     52c:	11000215 	stw	r4,8(r2)
     530:	18c00317 	ldw	r3,12(r3)
     534:	10c00315 	stw	r3,12(r2)
     538:	10000415 	stw	zero,16(r2)
     53c:	10000515 	stw	zero,20(r2)
     540:	10000615 	stw	zero,24(r2)
     544:	10000715 	stw	zero,28(r2)
     548:	10000815 	stw	zero,32(r2)
     54c:	10000915 	stw	zero,36(r2)
		alt_printf ("Opened character buffer device\n");
	alt_up_char_buffer_string(char_buffer_dev, text_top_row, 35, 29);
	alt_up_char_buffer_string(char_buffer_dev, text_bottom_row, 35, 30);*/

	/* now draw a background box for the text */
	alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, 34*4, 28*4, 50*4, 32*4, 0x187F, 0);
     550:	d8000215 	stw	zero,8(sp)
     554:	00861fc4 	movi	r2,6271
     558:	d8800115 	stw	r2,4(sp)
     55c:	00802004 	movi	r2,128
     560:	d8800015 	stw	r2,0(sp)
     564:	01c03204 	movi	r7,200
     568:	01801c04 	movi	r6,112
     56c:	01402204 	movi	r5,136
     570:	00bfff34 	movhi	r2,65532
     574:	10bfde04 	addi	r2,r2,-136
     578:	1705883a 	add	r2,r2,fp
     57c:	11000017 	ldw	r4,0(r2)
     580:	00153200 	call	15320 <alt_up_pixel_buffer_dma_draw_box>

	/* now draw a big A for ALTERA */
	draw_big_A (pixel_buffer_dev);
     584:	00ffff34 	movhi	r3,65532
     588:	18ffde04 	addi	r3,r3,-136
     58c:	1f07883a 	add	r3,r3,fp
     590:	19000017 	ldw	r4,0(r3)
     594:	0000f300 	call	f30 <draw_big_A>

	/* now draw a red rectangle with diagonal green lines */
	x1 = 20; y1 = 20;
     598:	00800504 	movi	r2,20
     59c:	013fff34 	movhi	r4,65532
     5a0:	213fdf04 	addi	r4,r4,-132
     5a4:	2709883a 	add	r4,r4,fp
     5a8:	20800015 	stw	r2,0(r4)
     5ac:	00800504 	movi	r2,20
     5b0:	00ffff34 	movhi	r3,65532
     5b4:	18ffe004 	addi	r3,r3,-128
     5b8:	1f07883a 	add	r3,r3,fp
     5bc:	18800015 	stw	r2,0(r3)
	x2 = 50; y2 = 50;
     5c0:	00800c84 	movi	r2,50
     5c4:	013fff34 	movhi	r4,65532
     5c8:	213fe104 	addi	r4,r4,-124
     5cc:	2709883a 	add	r4,r4,fp
     5d0:	20800015 	stw	r2,0(r4)
     5d4:	00800c84 	movi	r2,50
     5d8:	00ffff34 	movhi	r3,65532
     5dc:	18ffe204 	addi	r3,r3,-120
     5e0:	1f07883a 	add	r3,r3,fp
     5e4:	18800015 	stw	r2,0(r3)
	alt_up_pixel_buffer_dma_draw_rectangle(pixel_buffer_dev, x1, y1, x2, y2, 0xF800, 0);
     5e8:	d8000215 	stw	zero,8(sp)
     5ec:	00be0014 	movui	r2,63488
     5f0:	d8800115 	stw	r2,4(sp)
     5f4:	013fff34 	movhi	r4,65532
     5f8:	213fe204 	addi	r4,r4,-120
     5fc:	2709883a 	add	r4,r4,fp
     600:	20800017 	ldw	r2,0(r4)
     604:	d8800015 	stw	r2,0(sp)
     608:	00bfff34 	movhi	r2,65532
     60c:	10bfe104 	addi	r2,r2,-124
     610:	1705883a 	add	r2,r2,fp
     614:	11c00017 	ldw	r7,0(r2)
     618:	00ffff34 	movhi	r3,65532
     61c:	18ffe004 	addi	r3,r3,-128
     620:	1f07883a 	add	r3,r3,fp
     624:	19800017 	ldw	r6,0(r3)
     628:	013fff34 	movhi	r4,65532
     62c:	213fdf04 	addi	r4,r4,-132
     630:	2709883a 	add	r4,r4,fp
     634:	21400017 	ldw	r5,0(r4)
     638:	00bfff34 	movhi	r2,65532
     63c:	10bfde04 	addi	r2,r2,-136
     640:	1705883a 	add	r2,r2,fp
     644:	11000017 	ldw	r4,0(r2)
     648:	0015a580 	call	15a58 <alt_up_pixel_buffer_dma_draw_rectangle>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, x1, y1, x2, y2, 0x07e0, 0);
     64c:	d8000215 	stw	zero,8(sp)
     650:	0081f804 	movi	r2,2016
     654:	d8800115 	stw	r2,4(sp)
     658:	00ffff34 	movhi	r3,65532
     65c:	18ffe204 	addi	r3,r3,-120
     660:	1f07883a 	add	r3,r3,fp
     664:	18800017 	ldw	r2,0(r3)
     668:	d8800015 	stw	r2,0(sp)
     66c:	013fff34 	movhi	r4,65532
     670:	213fe104 	addi	r4,r4,-124
     674:	2709883a 	add	r4,r4,fp
     678:	21c00017 	ldw	r7,0(r4)
     67c:	00bfff34 	movhi	r2,65532
     680:	10bfe004 	addi	r2,r2,-128
     684:	1705883a 	add	r2,r2,fp
     688:	11800017 	ldw	r6,0(r2)
     68c:	00ffff34 	movhi	r3,65532
     690:	18ffdf04 	addi	r3,r3,-132
     694:	1f07883a 	add	r3,r3,fp
     698:	19400017 	ldw	r5,0(r3)
     69c:	00bfff34 	movhi	r2,65532
     6a0:	10bfde04 	addi	r2,r2,-136
     6a4:	1705883a 	add	r2,r2,fp
     6a8:	11000017 	ldw	r4,0(r2)
     6ac:	0015ba40 	call	15ba4 <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, x1, y2, x2, y1, 0x07e0, 0);
     6b0:	d8000215 	stw	zero,8(sp)
     6b4:	0081f804 	movi	r2,2016
     6b8:	d8800115 	stw	r2,4(sp)
     6bc:	00ffff34 	movhi	r3,65532
     6c0:	18ffe004 	addi	r3,r3,-128
     6c4:	1f07883a 	add	r3,r3,fp
     6c8:	18800017 	ldw	r2,0(r3)
     6cc:	d8800015 	stw	r2,0(sp)
     6d0:	013fff34 	movhi	r4,65532
     6d4:	213fe104 	addi	r4,r4,-124
     6d8:	2709883a 	add	r4,r4,fp
     6dc:	21c00017 	ldw	r7,0(r4)
     6e0:	00bfff34 	movhi	r2,65532
     6e4:	10bfe204 	addi	r2,r2,-120
     6e8:	1705883a 	add	r2,r2,fp
     6ec:	11800017 	ldw	r6,0(r2)
     6f0:	00ffff34 	movhi	r3,65532
     6f4:	18ffdf04 	addi	r3,r3,-132
     6f8:	1f07883a 	add	r3,r3,fp
     6fc:	19400017 	ldw	r5,0(r3)
     700:	00bfff34 	movhi	r2,65532
     704:	10bfde04 	addi	r2,r2,-136
     708:	1705883a 	add	r2,r2,fp
     70c:	11000017 	ldw	r4,0(r2)
     710:	0015ba40 	call	15ba4 <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer_dev);
     714:	00ffff34 	movhi	r3,65532
     718:	18ffde04 	addi	r3,r3,-136
     71c:	1f07883a 	add	r3,r3,fp
     720:	19000017 	ldw	r4,0(r3)
     724:	00151640 	call	15164 <alt_up_pixel_buffer_dma_swap_buffers>

	/* set the direction in which the box will move */
	deltax_1 = deltax_2 = deltay_1 = deltay_2 = 1;
     728:	00800044 	movi	r2,1
     72c:	013fff34 	movhi	r4,65532
     730:	213fe604 	addi	r4,r4,-104
     734:	2709883a 	add	r4,r4,fp
     738:	20800015 	stw	r2,0(r4)
     73c:	00ffff34 	movhi	r3,65532
     740:	18ffe604 	addi	r3,r3,-104
     744:	1f07883a 	add	r3,r3,fp
     748:	18800017 	ldw	r2,0(r3)
     74c:	013fff34 	movhi	r4,65532
     750:	213fe504 	addi	r4,r4,-108
     754:	2709883a 	add	r4,r4,fp
     758:	20800015 	stw	r2,0(r4)
     75c:	00ffff34 	movhi	r3,65532
     760:	18ffe504 	addi	r3,r3,-108
     764:	1f07883a 	add	r3,r3,fp
     768:	18800017 	ldw	r2,0(r3)
     76c:	013fff34 	movhi	r4,65532
     770:	213fe404 	addi	r4,r4,-112
     774:	2709883a 	add	r4,r4,fp
     778:	20800015 	stw	r2,0(r4)
     77c:	00ffff34 	movhi	r3,65532
     780:	18ffe404 	addi	r3,r3,-112
     784:	1f07883a 	add	r3,r3,fp
     788:	18800017 	ldw	r2,0(r3)
     78c:	013fff34 	movhi	r4,65532
     790:	213fe304 	addi	r4,r4,-116
     794:	2709883a 	add	r4,r4,fp
     798:	20800015 	stw	r2,0(r4)

	while(1)
	{
		if (alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buffer_dev) == 0)
     79c:	00bfff34 	movhi	r2,65532
     7a0:	10bfde04 	addi	r2,r2,-136
     7a4:	1705883a 	add	r2,r2,fp
     7a8:	11000017 	ldw	r4,0(r2)
     7ac:	00151c40 	call	151c4 <alt_up_pixel_buffer_dma_check_swap_buffers_status>
     7b0:	103ffa1e 	bne	r2,zero,79c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700079c>
		{
			/* If the screen has been drawn completely then we can draw a new image. This
			 * section of the code will only be entered once every 60th of a second, because
			 * this is how long it take the VGA controller to copy the image from memory to
			 * the screen. */
			delay = 1 - delay;
     7b4:	00c00044 	movi	r3,1
     7b8:	013fff34 	movhi	r4,65532
     7bc:	213fe704 	addi	r4,r4,-100
     7c0:	2709883a 	add	r4,r4,fp
     7c4:	20800017 	ldw	r2,0(r4)
     7c8:	1885c83a 	sub	r2,r3,r2
     7cc:	00ffff34 	movhi	r3,65532
     7d0:	18ffe704 	addi	r3,r3,-100
     7d4:	1f07883a 	add	r3,r3,fp
     7d8:	18800015 	stw	r2,0(r3)

			if (delay == 0)
     7dc:	013fff34 	movhi	r4,65532
     7e0:	213fe704 	addi	r4,r4,-100
     7e4:	2709883a 	add	r4,r4,fp
     7e8:	20800017 	ldw	r2,0(r4)
     7ec:	1001c51e 	bne	r2,zero,f04 <main+0xc80>
			{
				/* The delay is inserted to slow down the animation from 60 frames per second
				 * to 30. Every other refresh cycle the code below will execute. We first erase
				 * the box with Erase Rectangle */
				alt_up_pixel_buffer_dma_draw_rectangle(pixel_buffer_dev, x1, y1, x2, y2, 0, 0);
     7f0:	d8000215 	stw	zero,8(sp)
     7f4:	d8000115 	stw	zero,4(sp)
     7f8:	00ffff34 	movhi	r3,65532
     7fc:	18ffe204 	addi	r3,r3,-120
     800:	1f07883a 	add	r3,r3,fp
     804:	18800017 	ldw	r2,0(r3)
     808:	d8800015 	stw	r2,0(sp)
     80c:	013fff34 	movhi	r4,65532
     810:	213fe104 	addi	r4,r4,-124
     814:	2709883a 	add	r4,r4,fp
     818:	21c00017 	ldw	r7,0(r4)
     81c:	00bfff34 	movhi	r2,65532
     820:	10bfe004 	addi	r2,r2,-128
     824:	1705883a 	add	r2,r2,fp
     828:	11800017 	ldw	r6,0(r2)
     82c:	00ffff34 	movhi	r3,65532
     830:	18ffdf04 	addi	r3,r3,-132
     834:	1f07883a 	add	r3,r3,fp
     838:	19400017 	ldw	r5,0(r3)
     83c:	00bfff34 	movhi	r2,65532
     840:	10bfde04 	addi	r2,r2,-136
     844:	1705883a 	add	r2,r2,fp
     848:	11000017 	ldw	r4,0(r2)
     84c:	0015a580 	call	15a58 <alt_up_pixel_buffer_dma_draw_rectangle>
				alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, x1, y1, x2, y2, 0, 0);
     850:	d8000215 	stw	zero,8(sp)
     854:	d8000115 	stw	zero,4(sp)
     858:	00ffff34 	movhi	r3,65532
     85c:	18ffe204 	addi	r3,r3,-120
     860:	1f07883a 	add	r3,r3,fp
     864:	18800017 	ldw	r2,0(r3)
     868:	d8800015 	stw	r2,0(sp)
     86c:	013fff34 	movhi	r4,65532
     870:	213fe104 	addi	r4,r4,-124
     874:	2709883a 	add	r4,r4,fp
     878:	21c00017 	ldw	r7,0(r4)
     87c:	00bfff34 	movhi	r2,65532
     880:	10bfe004 	addi	r2,r2,-128
     884:	1705883a 	add	r2,r2,fp
     888:	11800017 	ldw	r6,0(r2)
     88c:	00ffff34 	movhi	r3,65532
     890:	18ffdf04 	addi	r3,r3,-132
     894:	1f07883a 	add	r3,r3,fp
     898:	19400017 	ldw	r5,0(r3)
     89c:	00bfff34 	movhi	r2,65532
     8a0:	10bfde04 	addi	r2,r2,-136
     8a4:	1705883a 	add	r2,r2,fp
     8a8:	11000017 	ldw	r4,0(r2)
     8ac:	0015ba40 	call	15ba4 <alt_up_pixel_buffer_dma_draw_line>
				alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, x1, y2, x2, y1, 0, 0);
     8b0:	d8000215 	stw	zero,8(sp)
     8b4:	d8000115 	stw	zero,4(sp)
     8b8:	00ffff34 	movhi	r3,65532
     8bc:	18ffe004 	addi	r3,r3,-128
     8c0:	1f07883a 	add	r3,r3,fp
     8c4:	18800017 	ldw	r2,0(r3)
     8c8:	d8800015 	stw	r2,0(sp)
     8cc:	013fff34 	movhi	r4,65532
     8d0:	213fe104 	addi	r4,r4,-124
     8d4:	2709883a 	add	r4,r4,fp
     8d8:	21c00017 	ldw	r7,0(r4)
     8dc:	00bfff34 	movhi	r2,65532
     8e0:	10bfe204 	addi	r2,r2,-120
     8e4:	1705883a 	add	r2,r2,fp
     8e8:	11800017 	ldw	r6,0(r2)
     8ec:	00ffff34 	movhi	r3,65532
     8f0:	18ffdf04 	addi	r3,r3,-132
     8f4:	1f07883a 	add	r3,r3,fp
     8f8:	19400017 	ldw	r5,0(r3)
     8fc:	00bfff34 	movhi	r2,65532
     900:	10bfde04 	addi	r2,r2,-136
     904:	1705883a 	add	r2,r2,fp
     908:	11000017 	ldw	r4,0(r2)
     90c:	0015ba40 	call	15ba4 <alt_up_pixel_buffer_dma_draw_line>

				// move the rectangle
				x1 = x1 + deltax_1;
     910:	013fff34 	movhi	r4,65532
     914:	213fdf04 	addi	r4,r4,-132
     918:	2709883a 	add	r4,r4,fp
     91c:	20c00017 	ldw	r3,0(r4)
     920:	013fff34 	movhi	r4,65532
     924:	213fe304 	addi	r4,r4,-116
     928:	2709883a 	add	r4,r4,fp
     92c:	20800017 	ldw	r2,0(r4)
     930:	1885883a 	add	r2,r3,r2
     934:	00ffff34 	movhi	r3,65532
     938:	18ffdf04 	addi	r3,r3,-132
     93c:	1f07883a 	add	r3,r3,fp
     940:	18800015 	stw	r2,0(r3)
				x2 = x2 + deltax_2;
     944:	013fff34 	movhi	r4,65532
     948:	213fe104 	addi	r4,r4,-124
     94c:	2709883a 	add	r4,r4,fp
     950:	20c00017 	ldw	r3,0(r4)
     954:	013fff34 	movhi	r4,65532
     958:	213fe404 	addi	r4,r4,-112
     95c:	2709883a 	add	r4,r4,fp
     960:	20800017 	ldw	r2,0(r4)
     964:	1885883a 	add	r2,r3,r2
     968:	00ffff34 	movhi	r3,65532
     96c:	18ffe104 	addi	r3,r3,-124
     970:	1f07883a 	add	r3,r3,fp
     974:	18800015 	stw	r2,0(r3)
				y1 = y1 + deltay_1;
     978:	013fff34 	movhi	r4,65532
     97c:	213fe004 	addi	r4,r4,-128
     980:	2709883a 	add	r4,r4,fp
     984:	20c00017 	ldw	r3,0(r4)
     988:	013fff34 	movhi	r4,65532
     98c:	213fe504 	addi	r4,r4,-108
     990:	2709883a 	add	r4,r4,fp
     994:	20800017 	ldw	r2,0(r4)
     998:	1885883a 	add	r2,r3,r2
     99c:	00ffff34 	movhi	r3,65532
     9a0:	18ffe004 	addi	r3,r3,-128
     9a4:	1f07883a 	add	r3,r3,fp
     9a8:	18800015 	stw	r2,0(r3)
				y2 = y2 + deltay_2;
     9ac:	013fff34 	movhi	r4,65532
     9b0:	213fe204 	addi	r4,r4,-120
     9b4:	2709883a 	add	r4,r4,fp
     9b8:	20c00017 	ldw	r3,0(r4)
     9bc:	013fff34 	movhi	r4,65532
     9c0:	213fe604 	addi	r4,r4,-104
     9c4:	2709883a 	add	r4,r4,fp
     9c8:	20800017 	ldw	r2,0(r4)
     9cc:	1885883a 	add	r2,r3,r2
     9d0:	00ffff34 	movhi	r3,65532
     9d4:	18ffe204 	addi	r3,r3,-120
     9d8:	1f07883a 	add	r3,r3,fp
     9dc:	18800015 	stw	r2,0(r3)
				if ((deltax_1 > 0) && (x1 >= alt_up_pixel_buffer_dma_x_res(pixel_buffer_dev) - 1))
     9e0:	013fff34 	movhi	r4,65532
     9e4:	213fe304 	addi	r4,r4,-116
     9e8:	2709883a 	add	r4,r4,fp
     9ec:	20800017 	ldw	r2,0(r4)
     9f0:	00801f0e 	bge	zero,r2,a70 <main+0x7ec>
     9f4:	00ffff34 	movhi	r3,65532
     9f8:	18ffde04 	addi	r3,r3,-136
     9fc:	1f07883a 	add	r3,r3,fp
     a00:	18800017 	ldw	r2,0(r3)
     a04:	10800f17 	ldw	r2,60(r2)
     a08:	10bfffc4 	addi	r2,r2,-1
     a0c:	013fff34 	movhi	r4,65532
     a10:	213fdf04 	addi	r4,r4,-132
     a14:	2709883a 	add	r4,r4,fp
     a18:	20c00017 	ldw	r3,0(r4)
     a1c:	18801436 	bltu	r3,r2,a70 <main+0x7ec>
				{
					x1 = alt_up_pixel_buffer_dma_x_res(pixel_buffer_dev) - 1;
     a20:	00ffff34 	movhi	r3,65532
     a24:	18ffde04 	addi	r3,r3,-136
     a28:	1f07883a 	add	r3,r3,fp
     a2c:	18800017 	ldw	r2,0(r3)
     a30:	10800f17 	ldw	r2,60(r2)
     a34:	10bfffc4 	addi	r2,r2,-1
     a38:	013fff34 	movhi	r4,65532
     a3c:	213fdf04 	addi	r4,r4,-132
     a40:	2709883a 	add	r4,r4,fp
     a44:	20800015 	stw	r2,0(r4)
					deltax_1 = -deltax_1;
     a48:	00ffff34 	movhi	r3,65532
     a4c:	18ffe304 	addi	r3,r3,-116
     a50:	1f07883a 	add	r3,r3,fp
     a54:	18800017 	ldw	r2,0(r3)
     a58:	0085c83a 	sub	r2,zero,r2
     a5c:	013fff34 	movhi	r4,65532
     a60:	213fe304 	addi	r4,r4,-116
     a64:	2709883a 	add	r4,r4,fp
     a68:	20800015 	stw	r2,0(r4)
     a6c:	00001706 	br	acc <main+0x848>
				}
				else if ((deltax_1 < 0) && (x1 <= 0))
     a70:	00ffff34 	movhi	r3,65532
     a74:	18ffe304 	addi	r3,r3,-116
     a78:	1f07883a 	add	r3,r3,fp
     a7c:	18800017 	ldw	r2,0(r3)
     a80:	1000120e 	bge	r2,zero,acc <main+0x848>
     a84:	013fff34 	movhi	r4,65532
     a88:	213fdf04 	addi	r4,r4,-132
     a8c:	2709883a 	add	r4,r4,fp
     a90:	20800017 	ldw	r2,0(r4)
     a94:	00800d16 	blt	zero,r2,acc <main+0x848>
				{
					x1 = 0;
     a98:	00bfff34 	movhi	r2,65532
     a9c:	10bfdf04 	addi	r2,r2,-132
     aa0:	1705883a 	add	r2,r2,fp
     aa4:	10000015 	stw	zero,0(r2)
					deltax_1 = -deltax_1;
     aa8:	00ffff34 	movhi	r3,65532
     aac:	18ffe304 	addi	r3,r3,-116
     ab0:	1f07883a 	add	r3,r3,fp
     ab4:	18800017 	ldw	r2,0(r3)
     ab8:	0085c83a 	sub	r2,zero,r2
     abc:	013fff34 	movhi	r4,65532
     ac0:	213fe304 	addi	r4,r4,-116
     ac4:	2709883a 	add	r4,r4,fp
     ac8:	20800015 	stw	r2,0(r4)
				}
				if ((deltax_2 > 0) && (x2 >= alt_up_pixel_buffer_dma_x_res(pixel_buffer_dev) - 1))
     acc:	00ffff34 	movhi	r3,65532
     ad0:	18ffe404 	addi	r3,r3,-112
     ad4:	1f07883a 	add	r3,r3,fp
     ad8:	18800017 	ldw	r2,0(r3)
     adc:	00801f0e 	bge	zero,r2,b5c <main+0x8d8>
     ae0:	013fff34 	movhi	r4,65532
     ae4:	213fde04 	addi	r4,r4,-136
     ae8:	2709883a 	add	r4,r4,fp
     aec:	20800017 	ldw	r2,0(r4)
     af0:	10800f17 	ldw	r2,60(r2)
     af4:	10bfffc4 	addi	r2,r2,-1
     af8:	013fff34 	movhi	r4,65532
     afc:	213fe104 	addi	r4,r4,-124
     b00:	2709883a 	add	r4,r4,fp
     b04:	20c00017 	ldw	r3,0(r4)
     b08:	18801436 	bltu	r3,r2,b5c <main+0x8d8>
				{
					x2 = alt_up_pixel_buffer_dma_x_res(pixel_buffer_dev) - 1;
     b0c:	00ffff34 	movhi	r3,65532
     b10:	18ffde04 	addi	r3,r3,-136
     b14:	1f07883a 	add	r3,r3,fp
     b18:	18800017 	ldw	r2,0(r3)
     b1c:	10800f17 	ldw	r2,60(r2)
     b20:	10bfffc4 	addi	r2,r2,-1
     b24:	013fff34 	movhi	r4,65532
     b28:	213fe104 	addi	r4,r4,-124
     b2c:	2709883a 	add	r4,r4,fp
     b30:	20800015 	stw	r2,0(r4)
					deltax_2 = -deltax_2;
     b34:	00ffff34 	movhi	r3,65532
     b38:	18ffe404 	addi	r3,r3,-112
     b3c:	1f07883a 	add	r3,r3,fp
     b40:	18800017 	ldw	r2,0(r3)
     b44:	0085c83a 	sub	r2,zero,r2
     b48:	013fff34 	movhi	r4,65532
     b4c:	213fe404 	addi	r4,r4,-112
     b50:	2709883a 	add	r4,r4,fp
     b54:	20800015 	stw	r2,0(r4)
     b58:	00001706 	br	bb8 <main+0x934>
				}
				else if ((deltax_2 < 0) && (x2 <= 0))
     b5c:	00ffff34 	movhi	r3,65532
     b60:	18ffe404 	addi	r3,r3,-112
     b64:	1f07883a 	add	r3,r3,fp
     b68:	18800017 	ldw	r2,0(r3)
     b6c:	1000120e 	bge	r2,zero,bb8 <main+0x934>
     b70:	013fff34 	movhi	r4,65532
     b74:	213fe104 	addi	r4,r4,-124
     b78:	2709883a 	add	r4,r4,fp
     b7c:	20800017 	ldw	r2,0(r4)
     b80:	00800d16 	blt	zero,r2,bb8 <main+0x934>
				{
					x2 = 0;
     b84:	00bfff34 	movhi	r2,65532
     b88:	10bfe104 	addi	r2,r2,-124
     b8c:	1705883a 	add	r2,r2,fp
     b90:	10000015 	stw	zero,0(r2)
					deltax_2 = -deltax_2;
     b94:	00ffff34 	movhi	r3,65532
     b98:	18ffe404 	addi	r3,r3,-112
     b9c:	1f07883a 	add	r3,r3,fp
     ba0:	18800017 	ldw	r2,0(r3)
     ba4:	0085c83a 	sub	r2,zero,r2
     ba8:	013fff34 	movhi	r4,65532
     bac:	213fe404 	addi	r4,r4,-112
     bb0:	2709883a 	add	r4,r4,fp
     bb4:	20800015 	stw	r2,0(r4)
				}
				if ((deltay_1 > 0) && (y1 >= alt_up_pixel_buffer_dma_y_res(pixel_buffer_dev) - 1))
     bb8:	00ffff34 	movhi	r3,65532
     bbc:	18ffe504 	addi	r3,r3,-108
     bc0:	1f07883a 	add	r3,r3,fp
     bc4:	18800017 	ldw	r2,0(r3)
     bc8:	00801f0e 	bge	zero,r2,c48 <main+0x9c4>
     bcc:	013fff34 	movhi	r4,65532
     bd0:	213fde04 	addi	r4,r4,-136
     bd4:	2709883a 	add	r4,r4,fp
     bd8:	20800017 	ldw	r2,0(r4)
     bdc:	10801017 	ldw	r2,64(r2)
     be0:	10bfffc4 	addi	r2,r2,-1
     be4:	013fff34 	movhi	r4,65532
     be8:	213fe004 	addi	r4,r4,-128
     bec:	2709883a 	add	r4,r4,fp
     bf0:	20c00017 	ldw	r3,0(r4)
     bf4:	18801436 	bltu	r3,r2,c48 <main+0x9c4>
				{
					y1 = alt_up_pixel_buffer_dma_y_res(pixel_buffer_dev) - 1;
     bf8:	00ffff34 	movhi	r3,65532
     bfc:	18ffde04 	addi	r3,r3,-136
     c00:	1f07883a 	add	r3,r3,fp
     c04:	18800017 	ldw	r2,0(r3)
     c08:	10801017 	ldw	r2,64(r2)
     c0c:	10bfffc4 	addi	r2,r2,-1
     c10:	013fff34 	movhi	r4,65532
     c14:	213fe004 	addi	r4,r4,-128
     c18:	2709883a 	add	r4,r4,fp
     c1c:	20800015 	stw	r2,0(r4)
					deltay_1 = -deltay_1;
     c20:	00ffff34 	movhi	r3,65532
     c24:	18ffe504 	addi	r3,r3,-108
     c28:	1f07883a 	add	r3,r3,fp
     c2c:	18800017 	ldw	r2,0(r3)
     c30:	0085c83a 	sub	r2,zero,r2
     c34:	013fff34 	movhi	r4,65532
     c38:	213fe504 	addi	r4,r4,-108
     c3c:	2709883a 	add	r4,r4,fp
     c40:	20800015 	stw	r2,0(r4)
     c44:	00001706 	br	ca4 <main+0xa20>
				}
				else if ((deltay_1 < 0) && (y1 <= 0))
     c48:	00ffff34 	movhi	r3,65532
     c4c:	18ffe504 	addi	r3,r3,-108
     c50:	1f07883a 	add	r3,r3,fp
     c54:	18800017 	ldw	r2,0(r3)
     c58:	1000120e 	bge	r2,zero,ca4 <main+0xa20>
     c5c:	013fff34 	movhi	r4,65532
     c60:	213fe004 	addi	r4,r4,-128
     c64:	2709883a 	add	r4,r4,fp
     c68:	20800017 	ldw	r2,0(r4)
     c6c:	00800d16 	blt	zero,r2,ca4 <main+0xa20>
				{
					y1 = 0;
     c70:	00bfff34 	movhi	r2,65532
     c74:	10bfe004 	addi	r2,r2,-128
     c78:	1705883a 	add	r2,r2,fp
     c7c:	10000015 	stw	zero,0(r2)
					deltay_1 = -deltay_1;
     c80:	00ffff34 	movhi	r3,65532
     c84:	18ffe504 	addi	r3,r3,-108
     c88:	1f07883a 	add	r3,r3,fp
     c8c:	18800017 	ldw	r2,0(r3)
     c90:	0085c83a 	sub	r2,zero,r2
     c94:	013fff34 	movhi	r4,65532
     c98:	213fe504 	addi	r4,r4,-108
     c9c:	2709883a 	add	r4,r4,fp
     ca0:	20800015 	stw	r2,0(r4)
				}
				if ((deltay_2 > 0) && (y2 >= alt_up_pixel_buffer_dma_y_res(pixel_buffer_dev) - 1))
     ca4:	00ffff34 	movhi	r3,65532
     ca8:	18ffe604 	addi	r3,r3,-104
     cac:	1f07883a 	add	r3,r3,fp
     cb0:	18800017 	ldw	r2,0(r3)
     cb4:	00801f0e 	bge	zero,r2,d34 <main+0xab0>
     cb8:	013fff34 	movhi	r4,65532
     cbc:	213fde04 	addi	r4,r4,-136
     cc0:	2709883a 	add	r4,r4,fp
     cc4:	20800017 	ldw	r2,0(r4)
     cc8:	10801017 	ldw	r2,64(r2)
     ccc:	10bfffc4 	addi	r2,r2,-1
     cd0:	013fff34 	movhi	r4,65532
     cd4:	213fe204 	addi	r4,r4,-120
     cd8:	2709883a 	add	r4,r4,fp
     cdc:	20c00017 	ldw	r3,0(r4)
     ce0:	18801436 	bltu	r3,r2,d34 <main+0xab0>
				{
					y2 = alt_up_pixel_buffer_dma_y_res(pixel_buffer_dev) - 1;
     ce4:	00ffff34 	movhi	r3,65532
     ce8:	18ffde04 	addi	r3,r3,-136
     cec:	1f07883a 	add	r3,r3,fp
     cf0:	18800017 	ldw	r2,0(r3)
     cf4:	10801017 	ldw	r2,64(r2)
     cf8:	10bfffc4 	addi	r2,r2,-1
     cfc:	013fff34 	movhi	r4,65532
     d00:	213fe204 	addi	r4,r4,-120
     d04:	2709883a 	add	r4,r4,fp
     d08:	20800015 	stw	r2,0(r4)
					deltay_2 = -deltay_2;
     d0c:	00ffff34 	movhi	r3,65532
     d10:	18ffe604 	addi	r3,r3,-104
     d14:	1f07883a 	add	r3,r3,fp
     d18:	18800017 	ldw	r2,0(r3)
     d1c:	0085c83a 	sub	r2,zero,r2
     d20:	013fff34 	movhi	r4,65532
     d24:	213fe604 	addi	r4,r4,-104
     d28:	2709883a 	add	r4,r4,fp
     d2c:	20800015 	stw	r2,0(r4)
     d30:	00001706 	br	d90 <main+0xb0c>
				}
				else if ((deltay_2 < 0) && (y2 <= 0))
     d34:	00ffff34 	movhi	r3,65532
     d38:	18ffe604 	addi	r3,r3,-104
     d3c:	1f07883a 	add	r3,r3,fp
     d40:	18800017 	ldw	r2,0(r3)
     d44:	1000120e 	bge	r2,zero,d90 <main+0xb0c>
     d48:	013fff34 	movhi	r4,65532
     d4c:	213fe204 	addi	r4,r4,-120
     d50:	2709883a 	add	r4,r4,fp
     d54:	20800017 	ldw	r2,0(r4)
     d58:	00800d16 	blt	zero,r2,d90 <main+0xb0c>
				{
					y2 = 0;
     d5c:	00bfff34 	movhi	r2,65532
     d60:	10bfe204 	addi	r2,r2,-120
     d64:	1705883a 	add	r2,r2,fp
     d68:	10000015 	stw	zero,0(r2)
					deltay_2 = -deltay_2;
     d6c:	00ffff34 	movhi	r3,65532
     d70:	18ffe604 	addi	r3,r3,-104
     d74:	1f07883a 	add	r3,r3,fp
     d78:	18800017 	ldw	r2,0(r3)
     d7c:	0085c83a 	sub	r2,zero,r2
     d80:	013fff34 	movhi	r4,65532
     d84:	213fe604 	addi	r4,r4,-104
     d88:	2709883a 	add	r4,r4,fp
     d8c:	20800015 	stw	r2,0(r4)
				}

				// redraw Rectangle with diagonal lines
				alt_up_pixel_buffer_dma_draw_rectangle(pixel_buffer_dev, x1, y1, x2, y2, 0xF800, 0);
     d90:	d8000215 	stw	zero,8(sp)
     d94:	00be0014 	movui	r2,63488
     d98:	d8800115 	stw	r2,4(sp)
     d9c:	00ffff34 	movhi	r3,65532
     da0:	18ffe204 	addi	r3,r3,-120
     da4:	1f07883a 	add	r3,r3,fp
     da8:	18800017 	ldw	r2,0(r3)
     dac:	d8800015 	stw	r2,0(sp)
     db0:	013fff34 	movhi	r4,65532
     db4:	213fe104 	addi	r4,r4,-124
     db8:	2709883a 	add	r4,r4,fp
     dbc:	21c00017 	ldw	r7,0(r4)
     dc0:	00bfff34 	movhi	r2,65532
     dc4:	10bfe004 	addi	r2,r2,-128
     dc8:	1705883a 	add	r2,r2,fp
     dcc:	11800017 	ldw	r6,0(r2)
     dd0:	00ffff34 	movhi	r3,65532
     dd4:	18ffdf04 	addi	r3,r3,-132
     dd8:	1f07883a 	add	r3,r3,fp
     ddc:	19400017 	ldw	r5,0(r3)
     de0:	00bfff34 	movhi	r2,65532
     de4:	10bfde04 	addi	r2,r2,-136
     de8:	1705883a 	add	r2,r2,fp
     dec:	11000017 	ldw	r4,0(r2)
     df0:	0015a580 	call	15a58 <alt_up_pixel_buffer_dma_draw_rectangle>
				alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, x1, y1, x2, y2, 0x07e0, 0);
     df4:	d8000215 	stw	zero,8(sp)
     df8:	0081f804 	movi	r2,2016
     dfc:	d8800115 	stw	r2,4(sp)
     e00:	00ffff34 	movhi	r3,65532
     e04:	18ffe204 	addi	r3,r3,-120
     e08:	1f07883a 	add	r3,r3,fp
     e0c:	18800017 	ldw	r2,0(r3)
     e10:	d8800015 	stw	r2,0(sp)
     e14:	013fff34 	movhi	r4,65532
     e18:	213fe104 	addi	r4,r4,-124
     e1c:	2709883a 	add	r4,r4,fp
     e20:	21c00017 	ldw	r7,0(r4)
     e24:	00bfff34 	movhi	r2,65532
     e28:	10bfe004 	addi	r2,r2,-128
     e2c:	1705883a 	add	r2,r2,fp
     e30:	11800017 	ldw	r6,0(r2)
     e34:	00ffff34 	movhi	r3,65532
     e38:	18ffdf04 	addi	r3,r3,-132
     e3c:	1f07883a 	add	r3,r3,fp
     e40:	19400017 	ldw	r5,0(r3)
     e44:	00bfff34 	movhi	r2,65532
     e48:	10bfde04 	addi	r2,r2,-136
     e4c:	1705883a 	add	r2,r2,fp
     e50:	11000017 	ldw	r4,0(r2)
     e54:	0015ba40 	call	15ba4 <alt_up_pixel_buffer_dma_draw_line>
				alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, x1, y2, x2, y1, 0x07e0, 0);
     e58:	d8000215 	stw	zero,8(sp)
     e5c:	0081f804 	movi	r2,2016
     e60:	d8800115 	stw	r2,4(sp)
     e64:	00ffff34 	movhi	r3,65532
     e68:	18ffe004 	addi	r3,r3,-128
     e6c:	1f07883a 	add	r3,r3,fp
     e70:	18800017 	ldw	r2,0(r3)
     e74:	d8800015 	stw	r2,0(sp)
     e78:	013fff34 	movhi	r4,65532
     e7c:	213fe104 	addi	r4,r4,-124
     e80:	2709883a 	add	r4,r4,fp
     e84:	21c00017 	ldw	r7,0(r4)
     e88:	00bfff34 	movhi	r2,65532
     e8c:	10bfe204 	addi	r2,r2,-120
     e90:	1705883a 	add	r2,r2,fp
     e94:	11800017 	ldw	r6,0(r2)
     e98:	00ffff34 	movhi	r3,65532
     e9c:	18ffdf04 	addi	r3,r3,-132
     ea0:	1f07883a 	add	r3,r3,fp
     ea4:	19400017 	ldw	r5,0(r3)
     ea8:	00bfff34 	movhi	r2,65532
     eac:	10bfde04 	addi	r2,r2,-136
     eb0:	1705883a 	add	r2,r2,fp
     eb4:	11000017 	ldw	r4,0(r2)
     eb8:	0015ba40 	call	15ba4 <alt_up_pixel_buffer_dma_draw_line>

				// redraw the box in the foreground
				alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, 34*4, 28*4, 50*4, 32*4, 0x187F, 0);
     ebc:	d8000215 	stw	zero,8(sp)
     ec0:	00861fc4 	movi	r2,6271
     ec4:	d8800115 	stw	r2,4(sp)
     ec8:	00802004 	movi	r2,128
     ecc:	d8800015 	stw	r2,0(sp)
     ed0:	01c03204 	movi	r7,200
     ed4:	01801c04 	movi	r6,112
     ed8:	01402204 	movi	r5,136
     edc:	00ffff34 	movhi	r3,65532
     ee0:	18ffde04 	addi	r3,r3,-136
     ee4:	1f07883a 	add	r3,r3,fp
     ee8:	19000017 	ldw	r4,0(r3)
     eec:	00153200 	call	15320 <alt_up_pixel_buffer_dma_draw_box>

				draw_big_A (pixel_buffer_dev);
     ef0:	00bfff34 	movhi	r2,65532
     ef4:	10bfde04 	addi	r2,r2,-136
     ef8:	1705883a 	add	r2,r2,fp
     efc:	11000017 	ldw	r4,0(r2)
     f00:	0000f300 	call	f30 <draw_big_A>
			}

			/* Execute a swap buffer command. This will allow us to check if the screen has
			 * been redrawn before generating a new animation frame. */
			alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer_dev);
     f04:	00ffff34 	movhi	r3,65532
     f08:	18ffde04 	addi	r3,r3,-136
     f0c:	1f07883a 	add	r3,r3,fp
     f10:	19000017 	ldw	r4,0(r3)
     f14:	00151640 	call	15164 <alt_up_pixel_buffer_dma_swap_buffers>
		}
	}
     f18:	003e2006 	br	79c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700079c>
}
     f1c:	e037883a 	mov	sp,fp
     f20:	dfc00117 	ldw	ra,4(sp)
     f24:	df000017 	ldw	fp,0(sp)
     f28:	dec00204 	addi	sp,sp,8
     f2c:	f800283a 	ret

00000f30 <draw_big_A>:

/* draws a big letter A on the screen */
void draw_big_A(alt_up_pixel_buffer_dma_dev *pixel_buffer_dev )
{
     f30:	defffa04 	addi	sp,sp,-24
     f34:	dfc00515 	stw	ra,20(sp)
     f38:	df000415 	stw	fp,16(sp)
     f3c:	df000404 	addi	fp,sp,16
     f40:	e13fff15 	stw	r4,-4(fp)
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 10, 88, 44, 10, 0xffff, 0);
     f44:	d8000215 	stw	zero,8(sp)
     f48:	00bfffd4 	movui	r2,65535
     f4c:	d8800115 	stw	r2,4(sp)
     f50:	00800284 	movi	r2,10
     f54:	d8800015 	stw	r2,0(sp)
     f58:	01c00b04 	movi	r7,44
     f5c:	01801604 	movi	r6,88
     f60:	01400284 	movi	r5,10
     f64:	e13fff17 	ldw	r4,-4(fp)
     f68:	0015ba40 	call	15ba4 <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 44, 10, 72, 10, 0xffff, 0);
     f6c:	d8000215 	stw	zero,8(sp)
     f70:	00bfffd4 	movui	r2,65535
     f74:	d8800115 	stw	r2,4(sp)
     f78:	00800284 	movi	r2,10
     f7c:	d8800015 	stw	r2,0(sp)
     f80:	01c01204 	movi	r7,72
     f84:	01800284 	movi	r6,10
     f88:	01400b04 	movi	r5,44
     f8c:	e13fff17 	ldw	r4,-4(fp)
     f90:	0015ba40 	call	15ba4 <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 72, 10, 106, 88, 0xffff, 0);
     f94:	d8000215 	stw	zero,8(sp)
     f98:	00bfffd4 	movui	r2,65535
     f9c:	d8800115 	stw	r2,4(sp)
     fa0:	00801604 	movi	r2,88
     fa4:	d8800015 	stw	r2,0(sp)
     fa8:	01c01a84 	movi	r7,106
     fac:	01800284 	movi	r6,10
     fb0:	01401204 	movi	r5,72
     fb4:	e13fff17 	ldw	r4,-4(fp)
     fb8:	0015ba40 	call	15ba4 <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 106, 88, 81, 88, 0xffff, 0);
     fbc:	d8000215 	stw	zero,8(sp)
     fc0:	00bfffd4 	movui	r2,65535
     fc4:	d8800115 	stw	r2,4(sp)
     fc8:	00801604 	movi	r2,88
     fcc:	d8800015 	stw	r2,0(sp)
     fd0:	01c01444 	movi	r7,81
     fd4:	01801604 	movi	r6,88
     fd8:	01401a84 	movi	r5,106
     fdc:	e13fff17 	ldw	r4,-4(fp)
     fe0:	0015ba40 	call	15ba4 <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 81, 88, 75, 77, 0xffff, 0);
     fe4:	d8000215 	stw	zero,8(sp)
     fe8:	00bfffd4 	movui	r2,65535
     fec:	d8800115 	stw	r2,4(sp)
     ff0:	00801344 	movi	r2,77
     ff4:	d8800015 	stw	r2,0(sp)
     ff8:	01c012c4 	movi	r7,75
     ffc:	01801604 	movi	r6,88
    1000:	01401444 	movi	r5,81
    1004:	e13fff17 	ldw	r4,-4(fp)
    1008:	0015ba40 	call	15ba4 <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 75, 77, 41, 77, 0xffff, 0);
    100c:	d8000215 	stw	zero,8(sp)
    1010:	00bfffd4 	movui	r2,65535
    1014:	d8800115 	stw	r2,4(sp)
    1018:	00801344 	movi	r2,77
    101c:	d8800015 	stw	r2,0(sp)
    1020:	01c00a44 	movi	r7,41
    1024:	01801344 	movi	r6,77
    1028:	014012c4 	movi	r5,75
    102c:	e13fff17 	ldw	r4,-4(fp)
    1030:	0015ba40 	call	15ba4 <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 41, 77, 35, 88, 0xffff, 0);
    1034:	d8000215 	stw	zero,8(sp)
    1038:	00bfffd4 	movui	r2,65535
    103c:	d8800115 	stw	r2,4(sp)
    1040:	00801604 	movi	r2,88
    1044:	d8800015 	stw	r2,0(sp)
    1048:	01c008c4 	movi	r7,35
    104c:	01801344 	movi	r6,77
    1050:	01400a44 	movi	r5,41
    1054:	e13fff17 	ldw	r4,-4(fp)
    1058:	0015ba40 	call	15ba4 <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 35, 88, 10, 88, 0xffff, 0);
    105c:	d8000215 	stw	zero,8(sp)
    1060:	00bfffd4 	movui	r2,65535
    1064:	d8800115 	stw	r2,4(sp)
    1068:	00801604 	movi	r2,88
    106c:	d8800015 	stw	r2,0(sp)
    1070:	01c00284 	movi	r7,10
    1074:	01801604 	movi	r6,88
    1078:	014008c4 	movi	r5,35
    107c:	e13fff17 	ldw	r4,-4(fp)
    1080:	0015ba40 	call	15ba4 <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 47, 60, 58, 32, 0xffff, 0);
    1084:	d8000215 	stw	zero,8(sp)
    1088:	00bfffd4 	movui	r2,65535
    108c:	d8800115 	stw	r2,4(sp)
    1090:	00800804 	movi	r2,32
    1094:	d8800015 	stw	r2,0(sp)
    1098:	01c00e84 	movi	r7,58
    109c:	01800f04 	movi	r6,60
    10a0:	01400bc4 	movi	r5,47
    10a4:	e13fff17 	ldw	r4,-4(fp)
    10a8:	0015ba40 	call	15ba4 <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 58, 32, 69, 60, 0xffff, 0);
    10ac:	d8000215 	stw	zero,8(sp)
    10b0:	00bfffd4 	movui	r2,65535
    10b4:	d8800115 	stw	r2,4(sp)
    10b8:	00800f04 	movi	r2,60
    10bc:	d8800015 	stw	r2,0(sp)
    10c0:	01c01144 	movi	r7,69
    10c4:	01800804 	movi	r6,32
    10c8:	01400e84 	movi	r5,58
    10cc:	e13fff17 	ldw	r4,-4(fp)
    10d0:	0015ba40 	call	15ba4 <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 69, 60, 47, 60, 0xffff, 0);
    10d4:	d8000215 	stw	zero,8(sp)
    10d8:	00bfffd4 	movui	r2,65535
    10dc:	d8800115 	stw	r2,4(sp)
    10e0:	00800f04 	movi	r2,60
    10e4:	d8800015 	stw	r2,0(sp)
    10e8:	01c00bc4 	movi	r7,47
    10ec:	01800f04 	movi	r6,60
    10f0:	01401144 	movi	r5,69
    10f4:	e13fff17 	ldw	r4,-4(fp)
    10f8:	0015ba40 	call	15ba4 <alt_up_pixel_buffer_dma_draw_line>
}
    10fc:	0001883a 	nop
    1100:	e037883a 	mov	sp,fp
    1104:	dfc00117 	ldw	ra,4(sp)
    1108:	df000017 	ldw	fp,0(sp)
    110c:	dec00204 	addi	sp,sp,8
    1110:	f800283a 	ret

00001114 <_printf_r>:
    1114:	defffd04 	addi	sp,sp,-12
    1118:	2805883a 	mov	r2,r5
    111c:	dfc00015 	stw	ra,0(sp)
    1120:	d9800115 	stw	r6,4(sp)
    1124:	d9c00215 	stw	r7,8(sp)
    1128:	21400217 	ldw	r5,8(r4)
    112c:	d9c00104 	addi	r7,sp,4
    1130:	100d883a 	mov	r6,r2
    1134:	00012ec0 	call	12ec <___vfprintf_internal_r>
    1138:	dfc00017 	ldw	ra,0(sp)
    113c:	dec00304 	addi	sp,sp,12
    1140:	f800283a 	ret

00001144 <printf>:
    1144:	defffc04 	addi	sp,sp,-16
    1148:	dfc00015 	stw	ra,0(sp)
    114c:	d9400115 	stw	r5,4(sp)
    1150:	d9800215 	stw	r6,8(sp)
    1154:	d9c00315 	stw	r7,12(sp)
    1158:	008000b4 	movhi	r2,2
    115c:	10a54904 	addi	r2,r2,-27356
    1160:	10800017 	ldw	r2,0(r2)
    1164:	200b883a 	mov	r5,r4
    1168:	d9800104 	addi	r6,sp,4
    116c:	11000217 	ldw	r4,8(r2)
    1170:	00034e40 	call	34e4 <__vfprintf_internal>
    1174:	dfc00017 	ldw	ra,0(sp)
    1178:	dec00404 	addi	sp,sp,16
    117c:	f800283a 	ret

00001180 <_puts_r>:
    1180:	defff604 	addi	sp,sp,-40
    1184:	dc000715 	stw	r16,28(sp)
    1188:	2021883a 	mov	r16,r4
    118c:	2809883a 	mov	r4,r5
    1190:	dc400815 	stw	r17,32(sp)
    1194:	dfc00915 	stw	ra,36(sp)
    1198:	2823883a 	mov	r17,r5
    119c:	00012540 	call	1254 <strlen>
    11a0:	10c00044 	addi	r3,r2,1
    11a4:	d8800115 	stw	r2,4(sp)
    11a8:	00800074 	movhi	r2,1
    11ac:	109c7a04 	addi	r2,r2,29160
    11b0:	d8800215 	stw	r2,8(sp)
    11b4:	00800044 	movi	r2,1
    11b8:	d8800315 	stw	r2,12(sp)
    11bc:	00800084 	movi	r2,2
    11c0:	dc400015 	stw	r17,0(sp)
    11c4:	d8c00615 	stw	r3,24(sp)
    11c8:	dec00415 	stw	sp,16(sp)
    11cc:	d8800515 	stw	r2,20(sp)
    11d0:	80000226 	beq	r16,zero,11dc <_puts_r+0x5c>
    11d4:	80800e17 	ldw	r2,56(r16)
    11d8:	10001426 	beq	r2,zero,122c <_puts_r+0xac>
    11dc:	81400217 	ldw	r5,8(r16)
    11e0:	2880030b 	ldhu	r2,12(r5)
    11e4:	10c8000c 	andi	r3,r2,8192
    11e8:	1800061e 	bne	r3,zero,1204 <_puts_r+0x84>
    11ec:	29001917 	ldw	r4,100(r5)
    11f0:	00f7ffc4 	movi	r3,-8193
    11f4:	10880014 	ori	r2,r2,8192
    11f8:	20c6703a 	and	r3,r4,r3
    11fc:	2880030d 	sth	r2,12(r5)
    1200:	28c01915 	stw	r3,100(r5)
    1204:	d9800404 	addi	r6,sp,16
    1208:	8009883a 	mov	r4,r16
    120c:	0005a140 	call	5a14 <__sfvwrite_r>
    1210:	1000091e 	bne	r2,zero,1238 <_puts_r+0xb8>
    1214:	00800284 	movi	r2,10
    1218:	dfc00917 	ldw	ra,36(sp)
    121c:	dc400817 	ldw	r17,32(sp)
    1220:	dc000717 	ldw	r16,28(sp)
    1224:	dec00a04 	addi	sp,sp,40
    1228:	f800283a 	ret
    122c:	8009883a 	mov	r4,r16
    1230:	00055900 	call	5590 <__sinit>
    1234:	003fe906 	br	11dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70011dc>
    1238:	00bfffc4 	movi	r2,-1
    123c:	003ff606 	br	1218 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001218>

00001240 <puts>:
    1240:	008000b4 	movhi	r2,2
    1244:	10a54904 	addi	r2,r2,-27356
    1248:	200b883a 	mov	r5,r4
    124c:	11000017 	ldw	r4,0(r2)
    1250:	00011801 	jmpi	1180 <_puts_r>

00001254 <strlen>:
    1254:	208000cc 	andi	r2,r4,3
    1258:	10002026 	beq	r2,zero,12dc <strlen+0x88>
    125c:	20800007 	ldb	r2,0(r4)
    1260:	10002026 	beq	r2,zero,12e4 <strlen+0x90>
    1264:	2005883a 	mov	r2,r4
    1268:	00000206 	br	1274 <strlen+0x20>
    126c:	10c00007 	ldb	r3,0(r2)
    1270:	18001826 	beq	r3,zero,12d4 <strlen+0x80>
    1274:	10800044 	addi	r2,r2,1
    1278:	10c000cc 	andi	r3,r2,3
    127c:	183ffb1e 	bne	r3,zero,126c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700126c>
    1280:	10c00017 	ldw	r3,0(r2)
    1284:	01ffbff4 	movhi	r7,65279
    1288:	39ffbfc4 	addi	r7,r7,-257
    128c:	00ca303a 	nor	r5,zero,r3
    1290:	01a02074 	movhi	r6,32897
    1294:	19c7883a 	add	r3,r3,r7
    1298:	31a02004 	addi	r6,r6,-32640
    129c:	1946703a 	and	r3,r3,r5
    12a0:	1986703a 	and	r3,r3,r6
    12a4:	1800091e 	bne	r3,zero,12cc <strlen+0x78>
    12a8:	10800104 	addi	r2,r2,4
    12ac:	10c00017 	ldw	r3,0(r2)
    12b0:	19cb883a 	add	r5,r3,r7
    12b4:	00c6303a 	nor	r3,zero,r3
    12b8:	28c6703a 	and	r3,r5,r3
    12bc:	1986703a 	and	r3,r3,r6
    12c0:	183ff926 	beq	r3,zero,12a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70012a8>
    12c4:	00000106 	br	12cc <strlen+0x78>
    12c8:	10800044 	addi	r2,r2,1
    12cc:	10c00007 	ldb	r3,0(r2)
    12d0:	183ffd1e 	bne	r3,zero,12c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70012c8>
    12d4:	1105c83a 	sub	r2,r2,r4
    12d8:	f800283a 	ret
    12dc:	2005883a 	mov	r2,r4
    12e0:	003fe706 	br	1280 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001280>
    12e4:	0005883a 	mov	r2,zero
    12e8:	f800283a 	ret

000012ec <___vfprintf_internal_r>:
    12ec:	deffb804 	addi	sp,sp,-288
    12f0:	dfc04715 	stw	ra,284(sp)
    12f4:	ddc04515 	stw	r23,276(sp)
    12f8:	dd404315 	stw	r21,268(sp)
    12fc:	d9002c15 	stw	r4,176(sp)
    1300:	282f883a 	mov	r23,r5
    1304:	302b883a 	mov	r21,r6
    1308:	d9c02d15 	stw	r7,180(sp)
    130c:	df004615 	stw	fp,280(sp)
    1310:	dd804415 	stw	r22,272(sp)
    1314:	dd004215 	stw	r20,264(sp)
    1318:	dcc04115 	stw	r19,260(sp)
    131c:	dc804015 	stw	r18,256(sp)
    1320:	dc403f15 	stw	r17,252(sp)
    1324:	dc003e15 	stw	r16,248(sp)
    1328:	00061040 	call	6104 <_localeconv_r>
    132c:	10800017 	ldw	r2,0(r2)
    1330:	1009883a 	mov	r4,r2
    1334:	d8803415 	stw	r2,208(sp)
    1338:	00012540 	call	1254 <strlen>
    133c:	d8803715 	stw	r2,220(sp)
    1340:	d8802c17 	ldw	r2,176(sp)
    1344:	10000226 	beq	r2,zero,1350 <___vfprintf_internal_r+0x64>
    1348:	10800e17 	ldw	r2,56(r2)
    134c:	1000f926 	beq	r2,zero,1734 <___vfprintf_internal_r+0x448>
    1350:	b880030b 	ldhu	r2,12(r23)
    1354:	10c8000c 	andi	r3,r2,8192
    1358:	1800061e 	bne	r3,zero,1374 <___vfprintf_internal_r+0x88>
    135c:	b9001917 	ldw	r4,100(r23)
    1360:	00f7ffc4 	movi	r3,-8193
    1364:	10880014 	ori	r2,r2,8192
    1368:	20c6703a 	and	r3,r4,r3
    136c:	b880030d 	sth	r2,12(r23)
    1370:	b8c01915 	stw	r3,100(r23)
    1374:	10c0020c 	andi	r3,r2,8
    1378:	1800c126 	beq	r3,zero,1680 <___vfprintf_internal_r+0x394>
    137c:	b8c00417 	ldw	r3,16(r23)
    1380:	1800bf26 	beq	r3,zero,1680 <___vfprintf_internal_r+0x394>
    1384:	1080068c 	andi	r2,r2,26
    1388:	00c00284 	movi	r3,10
    138c:	10c0c426 	beq	r2,r3,16a0 <___vfprintf_internal_r+0x3b4>
    1390:	d8c00404 	addi	r3,sp,16
    1394:	05000074 	movhi	r20,1
    1398:	d9001e04 	addi	r4,sp,120
    139c:	a51c8b84 	addi	r20,r20,29230
    13a0:	d8c01e15 	stw	r3,120(sp)
    13a4:	d8002015 	stw	zero,128(sp)
    13a8:	d8001f15 	stw	zero,124(sp)
    13ac:	d8003315 	stw	zero,204(sp)
    13b0:	d8003615 	stw	zero,216(sp)
    13b4:	d8003815 	stw	zero,224(sp)
    13b8:	1811883a 	mov	r8,r3
    13bc:	d8003915 	stw	zero,228(sp)
    13c0:	d8003a15 	stw	zero,232(sp)
    13c4:	d8002f15 	stw	zero,188(sp)
    13c8:	d9002815 	stw	r4,160(sp)
    13cc:	a8800007 	ldb	r2,0(r21)
    13d0:	10027b26 	beq	r2,zero,1dc0 <___vfprintf_internal_r+0xad4>
    13d4:	00c00944 	movi	r3,37
    13d8:	a821883a 	mov	r16,r21
    13dc:	10c0021e 	bne	r2,r3,13e8 <___vfprintf_internal_r+0xfc>
    13e0:	00001406 	br	1434 <___vfprintf_internal_r+0x148>
    13e4:	10c00326 	beq	r2,r3,13f4 <___vfprintf_internal_r+0x108>
    13e8:	84000044 	addi	r16,r16,1
    13ec:	80800007 	ldb	r2,0(r16)
    13f0:	103ffc1e 	bne	r2,zero,13e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70013e4>
    13f4:	8563c83a 	sub	r17,r16,r21
    13f8:	88000e26 	beq	r17,zero,1434 <___vfprintf_internal_r+0x148>
    13fc:	d8c02017 	ldw	r3,128(sp)
    1400:	d8801f17 	ldw	r2,124(sp)
    1404:	45400015 	stw	r21,0(r8)
    1408:	1c47883a 	add	r3,r3,r17
    140c:	10800044 	addi	r2,r2,1
    1410:	d8c02015 	stw	r3,128(sp)
    1414:	44400115 	stw	r17,4(r8)
    1418:	d8801f15 	stw	r2,124(sp)
    141c:	00c001c4 	movi	r3,7
    1420:	1880a716 	blt	r3,r2,16c0 <___vfprintf_internal_r+0x3d4>
    1424:	42000204 	addi	r8,r8,8
    1428:	d9402f17 	ldw	r5,188(sp)
    142c:	2c4b883a 	add	r5,r5,r17
    1430:	d9402f15 	stw	r5,188(sp)
    1434:	80800007 	ldb	r2,0(r16)
    1438:	1000a826 	beq	r2,zero,16dc <___vfprintf_internal_r+0x3f0>
    143c:	84400047 	ldb	r17,1(r16)
    1440:	00bfffc4 	movi	r2,-1
    1444:	85400044 	addi	r21,r16,1
    1448:	d8002785 	stb	zero,158(sp)
    144c:	0007883a 	mov	r3,zero
    1450:	000f883a 	mov	r7,zero
    1454:	d8802915 	stw	r2,164(sp)
    1458:	d8003115 	stw	zero,196(sp)
    145c:	0025883a 	mov	r18,zero
    1460:	01401604 	movi	r5,88
    1464:	01800244 	movi	r6,9
    1468:	02800a84 	movi	r10,42
    146c:	02401b04 	movi	r9,108
    1470:	ad400044 	addi	r21,r21,1
    1474:	88bff804 	addi	r2,r17,-32
    1478:	28830436 	bltu	r5,r2,208c <___vfprintf_internal_r+0xda0>
    147c:	100490ba 	slli	r2,r2,2
    1480:	01000034 	movhi	r4,0
    1484:	21052504 	addi	r4,r4,5268
    1488:	1105883a 	add	r2,r2,r4
    148c:	10800017 	ldw	r2,0(r2)
    1490:	1000683a 	jmp	r2
    1494:	00001fac 	andhi	zero,zero,126
    1498:	0000208c 	andi	zero,zero,130
    149c:	0000208c 	andi	zero,zero,130
    14a0:	00001fcc 	andi	zero,zero,127
    14a4:	0000208c 	andi	zero,zero,130
    14a8:	0000208c 	andi	zero,zero,130
    14ac:	0000208c 	andi	zero,zero,130
    14b0:	0000208c 	andi	zero,zero,130
    14b4:	0000208c 	andi	zero,zero,130
    14b8:	0000208c 	andi	zero,zero,130
    14bc:	00001740 	call	174 <alt_irq_handler+0x78>
    14c0:	00001ee8 	cmpgeui	zero,zero,123
    14c4:	0000208c 	andi	zero,zero,130
    14c8:	00001608 	cmpgei	zero,zero,88
    14cc:	00001768 	cmpgeui	zero,zero,93
    14d0:	0000208c 	andi	zero,zero,130
    14d4:	000017a8 	cmpgeui	zero,zero,94
    14d8:	000017b4 	movhi	zero,94
    14dc:	000017b4 	movhi	zero,94
    14e0:	000017b4 	movhi	zero,94
    14e4:	000017b4 	movhi	zero,94
    14e8:	000017b4 	movhi	zero,94
    14ec:	000017b4 	movhi	zero,94
    14f0:	000017b4 	movhi	zero,94
    14f4:	000017b4 	movhi	zero,94
    14f8:	000017b4 	movhi	zero,94
    14fc:	0000208c 	andi	zero,zero,130
    1500:	0000208c 	andi	zero,zero,130
    1504:	0000208c 	andi	zero,zero,130
    1508:	0000208c 	andi	zero,zero,130
    150c:	0000208c 	andi	zero,zero,130
    1510:	0000208c 	andi	zero,zero,130
    1514:	0000208c 	andi	zero,zero,130
    1518:	0000208c 	andi	zero,zero,130
    151c:	0000208c 	andi	zero,zero,130
    1520:	0000208c 	andi	zero,zero,130
    1524:	000017e8 	cmpgeui	zero,zero,95
    1528:	000018a4 	muli	zero,zero,98
    152c:	0000208c 	andi	zero,zero,130
    1530:	000018a4 	muli	zero,zero,98
    1534:	0000208c 	andi	zero,zero,130
    1538:	0000208c 	andi	zero,zero,130
    153c:	0000208c 	andi	zero,zero,130
    1540:	0000208c 	andi	zero,zero,130
    1544:	00001944 	movi	zero,101
    1548:	0000208c 	andi	zero,zero,130
    154c:	0000208c 	andi	zero,zero,130
    1550:	00001950 	cmplti	zero,zero,101
    1554:	0000208c 	andi	zero,zero,130
    1558:	0000208c 	andi	zero,zero,130
    155c:	0000208c 	andi	zero,zero,130
    1560:	0000208c 	andi	zero,zero,130
    1564:	0000208c 	andi	zero,zero,130
    1568:	00001dc8 	cmpgei	zero,zero,119
    156c:	0000208c 	andi	zero,zero,130
    1570:	0000208c 	andi	zero,zero,130
    1574:	00001e28 	cmpgeui	zero,zero,120
    1578:	0000208c 	andi	zero,zero,130
    157c:	0000208c 	andi	zero,zero,130
    1580:	0000208c 	andi	zero,zero,130
    1584:	0000208c 	andi	zero,zero,130
    1588:	0000208c 	andi	zero,zero,130
    158c:	0000208c 	andi	zero,zero,130
    1590:	0000208c 	andi	zero,zero,130
    1594:	0000208c 	andi	zero,zero,130
    1598:	0000208c 	andi	zero,zero,130
    159c:	0000208c 	andi	zero,zero,130
    15a0:	00002038 	rdprs	zero,zero,128
    15a4:	00001fd8 	cmpnei	zero,zero,127
    15a8:	000018a4 	muli	zero,zero,98
    15ac:	000018a4 	muli	zero,zero,98
    15b0:	000018a4 	muli	zero,zero,98
    15b4:	00001fe8 	cmpgeui	zero,zero,127
    15b8:	00001fd8 	cmpnei	zero,zero,127
    15bc:	0000208c 	andi	zero,zero,130
    15c0:	0000208c 	andi	zero,zero,130
    15c4:	00001ff4 	movhi	zero,127
    15c8:	0000208c 	andi	zero,zero,130
    15cc:	00002004 	movi	zero,128
    15d0:	00001ed8 	cmpnei	zero,zero,123
    15d4:	00001614 	movui	zero,88
    15d8:	00001ef8 	rdprs	zero,zero,123
    15dc:	0000208c 	andi	zero,zero,130
    15e0:	00001f04 	movi	zero,124
    15e4:	0000208c 	andi	zero,zero,130
    15e8:	00001f60 	cmpeqi	zero,zero,125
    15ec:	0000208c 	andi	zero,zero,130
    15f0:	0000208c 	andi	zero,zero,130
    15f4:	00001f70 	cmpltui	zero,zero,125
    15f8:	d9003117 	ldw	r4,196(sp)
    15fc:	d8802d15 	stw	r2,180(sp)
    1600:	0109c83a 	sub	r4,zero,r4
    1604:	d9003115 	stw	r4,196(sp)
    1608:	94800114 	ori	r18,r18,4
    160c:	ac400007 	ldb	r17,0(r21)
    1610:	003f9706 	br	1470 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001470>
    1614:	00800c04 	movi	r2,48
    1618:	d9002d17 	ldw	r4,180(sp)
    161c:	d9402917 	ldw	r5,164(sp)
    1620:	d8802705 	stb	r2,156(sp)
    1624:	00801e04 	movi	r2,120
    1628:	d8802745 	stb	r2,157(sp)
    162c:	d8002785 	stb	zero,158(sp)
    1630:	20c00104 	addi	r3,r4,4
    1634:	24c00017 	ldw	r19,0(r4)
    1638:	002d883a 	mov	r22,zero
    163c:	90800094 	ori	r2,r18,2
    1640:	28029a16 	blt	r5,zero,20ac <___vfprintf_internal_r+0xdc0>
    1644:	00bfdfc4 	movi	r2,-129
    1648:	90a4703a 	and	r18,r18,r2
    164c:	d8c02d15 	stw	r3,180(sp)
    1650:	94800094 	ori	r18,r18,2
    1654:	9802871e 	bne	r19,zero,2074 <___vfprintf_internal_r+0xd88>
    1658:	00800074 	movhi	r2,1
    165c:	109c8404 	addi	r2,r2,29200
    1660:	d8803915 	stw	r2,228(sp)
    1664:	04401e04 	movi	r17,120
    1668:	d8802917 	ldw	r2,164(sp)
    166c:	0039883a 	mov	fp,zero
    1670:	1001e926 	beq	r2,zero,1e18 <___vfprintf_internal_r+0xb2c>
    1674:	0027883a 	mov	r19,zero
    1678:	002d883a 	mov	r22,zero
    167c:	00020506 	br	1e94 <___vfprintf_internal_r+0xba8>
    1680:	d9002c17 	ldw	r4,176(sp)
    1684:	b80b883a 	mov	r5,r23
    1688:	00035bc0 	call	35bc <__swsetup_r>
    168c:	1005ac1e 	bne	r2,zero,2d40 <___vfprintf_internal_r+0x1a54>
    1690:	b880030b 	ldhu	r2,12(r23)
    1694:	00c00284 	movi	r3,10
    1698:	1080068c 	andi	r2,r2,26
    169c:	10ff3c1e 	bne	r2,r3,1390 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001390>
    16a0:	b880038f 	ldh	r2,14(r23)
    16a4:	103f3a16 	blt	r2,zero,1390 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001390>
    16a8:	d9c02d17 	ldw	r7,180(sp)
    16ac:	d9002c17 	ldw	r4,176(sp)
    16b0:	a80d883a 	mov	r6,r21
    16b4:	b80b883a 	mov	r5,r23
    16b8:	00035000 	call	3500 <__sbprintf>
    16bc:	00001106 	br	1704 <___vfprintf_internal_r+0x418>
    16c0:	d9002c17 	ldw	r4,176(sp)
    16c4:	d9801e04 	addi	r6,sp,120
    16c8:	b80b883a 	mov	r5,r23
    16cc:	00088e80 	call	88e8 <__sprint_r>
    16d0:	1000081e 	bne	r2,zero,16f4 <___vfprintf_internal_r+0x408>
    16d4:	da000404 	addi	r8,sp,16
    16d8:	003f5306 	br	1428 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001428>
    16dc:	d8802017 	ldw	r2,128(sp)
    16e0:	10000426 	beq	r2,zero,16f4 <___vfprintf_internal_r+0x408>
    16e4:	d9002c17 	ldw	r4,176(sp)
    16e8:	d9801e04 	addi	r6,sp,120
    16ec:	b80b883a 	mov	r5,r23
    16f0:	00088e80 	call	88e8 <__sprint_r>
    16f4:	b880030b 	ldhu	r2,12(r23)
    16f8:	1080100c 	andi	r2,r2,64
    16fc:	1005901e 	bne	r2,zero,2d40 <___vfprintf_internal_r+0x1a54>
    1700:	d8802f17 	ldw	r2,188(sp)
    1704:	dfc04717 	ldw	ra,284(sp)
    1708:	df004617 	ldw	fp,280(sp)
    170c:	ddc04517 	ldw	r23,276(sp)
    1710:	dd804417 	ldw	r22,272(sp)
    1714:	dd404317 	ldw	r21,268(sp)
    1718:	dd004217 	ldw	r20,264(sp)
    171c:	dcc04117 	ldw	r19,260(sp)
    1720:	dc804017 	ldw	r18,256(sp)
    1724:	dc403f17 	ldw	r17,252(sp)
    1728:	dc003e17 	ldw	r16,248(sp)
    172c:	dec04804 	addi	sp,sp,288
    1730:	f800283a 	ret
    1734:	d9002c17 	ldw	r4,176(sp)
    1738:	00055900 	call	5590 <__sinit>
    173c:	003f0406 	br	1350 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001350>
    1740:	d8802d17 	ldw	r2,180(sp)
    1744:	d9002d17 	ldw	r4,180(sp)
    1748:	10800017 	ldw	r2,0(r2)
    174c:	d8803115 	stw	r2,196(sp)
    1750:	20800104 	addi	r2,r4,4
    1754:	d9003117 	ldw	r4,196(sp)
    1758:	203fa716 	blt	r4,zero,15f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70015f8>
    175c:	d8802d15 	stw	r2,180(sp)
    1760:	ac400007 	ldb	r17,0(r21)
    1764:	003f4206 	br	1470 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001470>
    1768:	ac400007 	ldb	r17,0(r21)
    176c:	aac00044 	addi	r11,r21,1
    1770:	8a872826 	beq	r17,r10,3414 <___vfprintf_internal_r+0x2128>
    1774:	88bff404 	addi	r2,r17,-48
    1778:	0009883a 	mov	r4,zero
    177c:	30867d36 	bltu	r6,r2,3174 <___vfprintf_internal_r+0x1e88>
    1780:	5c400007 	ldb	r17,0(r11)
    1784:	210002a4 	muli	r4,r4,10
    1788:	5d400044 	addi	r21,r11,1
    178c:	a817883a 	mov	r11,r21
    1790:	2089883a 	add	r4,r4,r2
    1794:	88bff404 	addi	r2,r17,-48
    1798:	30bff92e 	bgeu	r6,r2,1780 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001780>
    179c:	2005c916 	blt	r4,zero,2ec4 <___vfprintf_internal_r+0x1bd8>
    17a0:	d9002915 	stw	r4,164(sp)
    17a4:	003f3306 	br	1474 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001474>
    17a8:	94802014 	ori	r18,r18,128
    17ac:	ac400007 	ldb	r17,0(r21)
    17b0:	003f2f06 	br	1470 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001470>
    17b4:	a809883a 	mov	r4,r21
    17b8:	d8003115 	stw	zero,196(sp)
    17bc:	88bff404 	addi	r2,r17,-48
    17c0:	0017883a 	mov	r11,zero
    17c4:	24400007 	ldb	r17,0(r4)
    17c8:	5ac002a4 	muli	r11,r11,10
    17cc:	ad400044 	addi	r21,r21,1
    17d0:	a809883a 	mov	r4,r21
    17d4:	12d7883a 	add	r11,r2,r11
    17d8:	88bff404 	addi	r2,r17,-48
    17dc:	30bff92e 	bgeu	r6,r2,17c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70017c4>
    17e0:	dac03115 	stw	r11,196(sp)
    17e4:	003f2306 	br	1474 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001474>
    17e8:	18c03fcc 	andi	r3,r3,255
    17ec:	18072b1e 	bne	r3,zero,349c <___vfprintf_internal_r+0x21b0>
    17f0:	94800414 	ori	r18,r18,16
    17f4:	9080080c 	andi	r2,r18,32
    17f8:	10037b26 	beq	r2,zero,25e8 <___vfprintf_internal_r+0x12fc>
    17fc:	d9402d17 	ldw	r5,180(sp)
    1800:	28800117 	ldw	r2,4(r5)
    1804:	2cc00017 	ldw	r19,0(r5)
    1808:	29400204 	addi	r5,r5,8
    180c:	d9402d15 	stw	r5,180(sp)
    1810:	102d883a 	mov	r22,r2
    1814:	10044b16 	blt	r2,zero,2944 <___vfprintf_internal_r+0x1658>
    1818:	d9402917 	ldw	r5,164(sp)
    181c:	df002783 	ldbu	fp,158(sp)
    1820:	2803bc16 	blt	r5,zero,2714 <___vfprintf_internal_r+0x1428>
    1824:	00ffdfc4 	movi	r3,-129
    1828:	9d84b03a 	or	r2,r19,r22
    182c:	90e4703a 	and	r18,r18,r3
    1830:	10017726 	beq	r2,zero,1e10 <___vfprintf_internal_r+0xb24>
    1834:	b0038326 	beq	r22,zero,2644 <___vfprintf_internal_r+0x1358>
    1838:	dc402a15 	stw	r17,168(sp)
    183c:	dc001e04 	addi	r16,sp,120
    1840:	b023883a 	mov	r17,r22
    1844:	402d883a 	mov	r22,r8
    1848:	9809883a 	mov	r4,r19
    184c:	880b883a 	mov	r5,r17
    1850:	01800284 	movi	r6,10
    1854:	000f883a 	mov	r7,zero
    1858:	000ace00 	call	ace0 <__umoddi3>
    185c:	10800c04 	addi	r2,r2,48
    1860:	843fffc4 	addi	r16,r16,-1
    1864:	9809883a 	mov	r4,r19
    1868:	880b883a 	mov	r5,r17
    186c:	80800005 	stb	r2,0(r16)
    1870:	01800284 	movi	r6,10
    1874:	000f883a 	mov	r7,zero
    1878:	000a7680 	call	a768 <__udivdi3>
    187c:	1027883a 	mov	r19,r2
    1880:	10c4b03a 	or	r2,r2,r3
    1884:	1823883a 	mov	r17,r3
    1888:	103fef1e 	bne	r2,zero,1848 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001848>
    188c:	d8c02817 	ldw	r3,160(sp)
    1890:	dc402a17 	ldw	r17,168(sp)
    1894:	b011883a 	mov	r8,r22
    1898:	1c07c83a 	sub	r3,r3,r16
    189c:	d8c02e15 	stw	r3,184(sp)
    18a0:	00005906 	br	1a08 <___vfprintf_internal_r+0x71c>
    18a4:	18c03fcc 	andi	r3,r3,255
    18a8:	1806fa1e 	bne	r3,zero,3494 <___vfprintf_internal_r+0x21a8>
    18ac:	9080020c 	andi	r2,r18,8
    18b0:	10048a26 	beq	r2,zero,2adc <___vfprintf_internal_r+0x17f0>
    18b4:	d8c02d17 	ldw	r3,180(sp)
    18b8:	d9002d17 	ldw	r4,180(sp)
    18bc:	d9402d17 	ldw	r5,180(sp)
    18c0:	18c00017 	ldw	r3,0(r3)
    18c4:	21000117 	ldw	r4,4(r4)
    18c8:	29400204 	addi	r5,r5,8
    18cc:	d8c03615 	stw	r3,216(sp)
    18d0:	d9003815 	stw	r4,224(sp)
    18d4:	d9402d15 	stw	r5,180(sp)
    18d8:	d9003617 	ldw	r4,216(sp)
    18dc:	d9403817 	ldw	r5,224(sp)
    18e0:	da003d15 	stw	r8,244(sp)
    18e4:	04000044 	movi	r16,1
    18e8:	000850c0 	call	850c <__fpclassifyd>
    18ec:	da003d17 	ldw	r8,244(sp)
    18f0:	14041f1e 	bne	r2,r16,2970 <___vfprintf_internal_r+0x1684>
    18f4:	d9003617 	ldw	r4,216(sp)
    18f8:	d9403817 	ldw	r5,224(sp)
    18fc:	000d883a 	mov	r6,zero
    1900:	000f883a 	mov	r7,zero
    1904:	000c6c40 	call	c6c4 <__ledf2>
    1908:	da003d17 	ldw	r8,244(sp)
    190c:	1005be16 	blt	r2,zero,3008 <___vfprintf_internal_r+0x1d1c>
    1910:	df002783 	ldbu	fp,158(sp)
    1914:	008011c4 	movi	r2,71
    1918:	1445330e 	bge	r2,r17,2de8 <___vfprintf_internal_r+0x1afc>
    191c:	04000074 	movhi	r16,1
    1920:	841c7c04 	addi	r16,r16,29168
    1924:	00c000c4 	movi	r3,3
    1928:	00bfdfc4 	movi	r2,-129
    192c:	d8c02a15 	stw	r3,168(sp)
    1930:	90a4703a 	and	r18,r18,r2
    1934:	d8c02e15 	stw	r3,184(sp)
    1938:	d8002915 	stw	zero,164(sp)
    193c:	d8003215 	stw	zero,200(sp)
    1940:	00003706 	br	1a20 <___vfprintf_internal_r+0x734>
    1944:	94800214 	ori	r18,r18,8
    1948:	ac400007 	ldb	r17,0(r21)
    194c:	003ec806 	br	1470 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001470>
    1950:	18c03fcc 	andi	r3,r3,255
    1954:	1806db1e 	bne	r3,zero,34c4 <___vfprintf_internal_r+0x21d8>
    1958:	94800414 	ori	r18,r18,16
    195c:	9080080c 	andi	r2,r18,32
    1960:	1002d826 	beq	r2,zero,24c4 <___vfprintf_internal_r+0x11d8>
    1964:	d9402d17 	ldw	r5,180(sp)
    1968:	d8c02917 	ldw	r3,164(sp)
    196c:	d8002785 	stb	zero,158(sp)
    1970:	28800204 	addi	r2,r5,8
    1974:	2cc00017 	ldw	r19,0(r5)
    1978:	2d800117 	ldw	r22,4(r5)
    197c:	18048f16 	blt	r3,zero,2bbc <___vfprintf_internal_r+0x18d0>
    1980:	013fdfc4 	movi	r4,-129
    1984:	9d86b03a 	or	r3,r19,r22
    1988:	d8802d15 	stw	r2,180(sp)
    198c:	9124703a 	and	r18,r18,r4
    1990:	1802d91e 	bne	r3,zero,24f8 <___vfprintf_internal_r+0x120c>
    1994:	d8c02917 	ldw	r3,164(sp)
    1998:	0039883a 	mov	fp,zero
    199c:	1805c326 	beq	r3,zero,30ac <___vfprintf_internal_r+0x1dc0>
    19a0:	0027883a 	mov	r19,zero
    19a4:	002d883a 	mov	r22,zero
    19a8:	dc001e04 	addi	r16,sp,120
    19ac:	9806d0fa 	srli	r3,r19,3
    19b0:	b008977a 	slli	r4,r22,29
    19b4:	b02cd0fa 	srli	r22,r22,3
    19b8:	9cc001cc 	andi	r19,r19,7
    19bc:	98800c04 	addi	r2,r19,48
    19c0:	843fffc4 	addi	r16,r16,-1
    19c4:	20e6b03a 	or	r19,r4,r3
    19c8:	80800005 	stb	r2,0(r16)
    19cc:	9d86b03a 	or	r3,r19,r22
    19d0:	183ff61e 	bne	r3,zero,19ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70019ac>
    19d4:	90c0004c 	andi	r3,r18,1
    19d8:	18013b26 	beq	r3,zero,1ec8 <___vfprintf_internal_r+0xbdc>
    19dc:	10803fcc 	andi	r2,r2,255
    19e0:	1080201c 	xori	r2,r2,128
    19e4:	10bfe004 	addi	r2,r2,-128
    19e8:	00c00c04 	movi	r3,48
    19ec:	10c13626 	beq	r2,r3,1ec8 <___vfprintf_internal_r+0xbdc>
    19f0:	80ffffc5 	stb	r3,-1(r16)
    19f4:	d8c02817 	ldw	r3,160(sp)
    19f8:	80bfffc4 	addi	r2,r16,-1
    19fc:	1021883a 	mov	r16,r2
    1a00:	1887c83a 	sub	r3,r3,r2
    1a04:	d8c02e15 	stw	r3,184(sp)
    1a08:	d8802e17 	ldw	r2,184(sp)
    1a0c:	d9002917 	ldw	r4,164(sp)
    1a10:	1100010e 	bge	r2,r4,1a18 <___vfprintf_internal_r+0x72c>
    1a14:	2005883a 	mov	r2,r4
    1a18:	d8802a15 	stw	r2,168(sp)
    1a1c:	d8003215 	stw	zero,200(sp)
    1a20:	e7003fcc 	andi	fp,fp,255
    1a24:	e700201c 	xori	fp,fp,128
    1a28:	e73fe004 	addi	fp,fp,-128
    1a2c:	e0000326 	beq	fp,zero,1a3c <___vfprintf_internal_r+0x750>
    1a30:	d8c02a17 	ldw	r3,168(sp)
    1a34:	18c00044 	addi	r3,r3,1
    1a38:	d8c02a15 	stw	r3,168(sp)
    1a3c:	90c0008c 	andi	r3,r18,2
    1a40:	d8c02b15 	stw	r3,172(sp)
    1a44:	18000326 	beq	r3,zero,1a54 <___vfprintf_internal_r+0x768>
    1a48:	d8c02a17 	ldw	r3,168(sp)
    1a4c:	18c00084 	addi	r3,r3,2
    1a50:	d8c02a15 	stw	r3,168(sp)
    1a54:	90c0210c 	andi	r3,r18,132
    1a58:	d8c03015 	stw	r3,192(sp)
    1a5c:	1801a31e 	bne	r3,zero,20ec <___vfprintf_internal_r+0xe00>
    1a60:	d9003117 	ldw	r4,196(sp)
    1a64:	d8c02a17 	ldw	r3,168(sp)
    1a68:	20e7c83a 	sub	r19,r4,r3
    1a6c:	04c19f0e 	bge	zero,r19,20ec <___vfprintf_internal_r+0xe00>
    1a70:	02400404 	movi	r9,16
    1a74:	d8c02017 	ldw	r3,128(sp)
    1a78:	d8801f17 	ldw	r2,124(sp)
    1a7c:	4cc50d0e 	bge	r9,r19,2eb4 <___vfprintf_internal_r+0x1bc8>
    1a80:	01400074 	movhi	r5,1
    1a84:	295c8f84 	addi	r5,r5,29246
    1a88:	dc403b15 	stw	r17,236(sp)
    1a8c:	d9403515 	stw	r5,212(sp)
    1a90:	9823883a 	mov	r17,r19
    1a94:	482d883a 	mov	r22,r9
    1a98:	9027883a 	mov	r19,r18
    1a9c:	070001c4 	movi	fp,7
    1aa0:	8025883a 	mov	r18,r16
    1aa4:	dc002c17 	ldw	r16,176(sp)
    1aa8:	00000306 	br	1ab8 <___vfprintf_internal_r+0x7cc>
    1aac:	8c7ffc04 	addi	r17,r17,-16
    1ab0:	42000204 	addi	r8,r8,8
    1ab4:	b440130e 	bge	r22,r17,1b04 <___vfprintf_internal_r+0x818>
    1ab8:	01000074 	movhi	r4,1
    1abc:	18c00404 	addi	r3,r3,16
    1ac0:	10800044 	addi	r2,r2,1
    1ac4:	211c8f84 	addi	r4,r4,29246
    1ac8:	41000015 	stw	r4,0(r8)
    1acc:	45800115 	stw	r22,4(r8)
    1ad0:	d8c02015 	stw	r3,128(sp)
    1ad4:	d8801f15 	stw	r2,124(sp)
    1ad8:	e0bff40e 	bge	fp,r2,1aac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001aac>
    1adc:	d9801e04 	addi	r6,sp,120
    1ae0:	b80b883a 	mov	r5,r23
    1ae4:	8009883a 	mov	r4,r16
    1ae8:	00088e80 	call	88e8 <__sprint_r>
    1aec:	103f011e 	bne	r2,zero,16f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70016f4>
    1af0:	8c7ffc04 	addi	r17,r17,-16
    1af4:	d8c02017 	ldw	r3,128(sp)
    1af8:	d8801f17 	ldw	r2,124(sp)
    1afc:	da000404 	addi	r8,sp,16
    1b00:	b47fed16 	blt	r22,r17,1ab8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001ab8>
    1b04:	9021883a 	mov	r16,r18
    1b08:	9825883a 	mov	r18,r19
    1b0c:	8827883a 	mov	r19,r17
    1b10:	dc403b17 	ldw	r17,236(sp)
    1b14:	d9403517 	ldw	r5,212(sp)
    1b18:	98c7883a 	add	r3,r19,r3
    1b1c:	10800044 	addi	r2,r2,1
    1b20:	41400015 	stw	r5,0(r8)
    1b24:	44c00115 	stw	r19,4(r8)
    1b28:	d8c02015 	stw	r3,128(sp)
    1b2c:	d8801f15 	stw	r2,124(sp)
    1b30:	010001c4 	movi	r4,7
    1b34:	2082a316 	blt	r4,r2,25c4 <___vfprintf_internal_r+0x12d8>
    1b38:	df002787 	ldb	fp,158(sp)
    1b3c:	42000204 	addi	r8,r8,8
    1b40:	e0000c26 	beq	fp,zero,1b74 <___vfprintf_internal_r+0x888>
    1b44:	d8801f17 	ldw	r2,124(sp)
    1b48:	d9002784 	addi	r4,sp,158
    1b4c:	18c00044 	addi	r3,r3,1
    1b50:	10800044 	addi	r2,r2,1
    1b54:	41000015 	stw	r4,0(r8)
    1b58:	01000044 	movi	r4,1
    1b5c:	41000115 	stw	r4,4(r8)
    1b60:	d8c02015 	stw	r3,128(sp)
    1b64:	d8801f15 	stw	r2,124(sp)
    1b68:	010001c4 	movi	r4,7
    1b6c:	20823c16 	blt	r4,r2,2460 <___vfprintf_internal_r+0x1174>
    1b70:	42000204 	addi	r8,r8,8
    1b74:	d8802b17 	ldw	r2,172(sp)
    1b78:	10000c26 	beq	r2,zero,1bac <___vfprintf_internal_r+0x8c0>
    1b7c:	d8801f17 	ldw	r2,124(sp)
    1b80:	d9002704 	addi	r4,sp,156
    1b84:	18c00084 	addi	r3,r3,2
    1b88:	10800044 	addi	r2,r2,1
    1b8c:	41000015 	stw	r4,0(r8)
    1b90:	01000084 	movi	r4,2
    1b94:	41000115 	stw	r4,4(r8)
    1b98:	d8c02015 	stw	r3,128(sp)
    1b9c:	d8801f15 	stw	r2,124(sp)
    1ba0:	010001c4 	movi	r4,7
    1ba4:	20823616 	blt	r4,r2,2480 <___vfprintf_internal_r+0x1194>
    1ba8:	42000204 	addi	r8,r8,8
    1bac:	d9003017 	ldw	r4,192(sp)
    1bb0:	00802004 	movi	r2,128
    1bb4:	20819926 	beq	r4,r2,221c <___vfprintf_internal_r+0xf30>
    1bb8:	d9402917 	ldw	r5,164(sp)
    1bbc:	d8802e17 	ldw	r2,184(sp)
    1bc0:	28adc83a 	sub	r22,r5,r2
    1bc4:	0580310e 	bge	zero,r22,1c8c <___vfprintf_internal_r+0x9a0>
    1bc8:	07000404 	movi	fp,16
    1bcc:	d8801f17 	ldw	r2,124(sp)
    1bd0:	e584140e 	bge	fp,r22,2c24 <___vfprintf_internal_r+0x1938>
    1bd4:	01400074 	movhi	r5,1
    1bd8:	295c8b84 	addi	r5,r5,29230
    1bdc:	dc402915 	stw	r17,164(sp)
    1be0:	d9402b15 	stw	r5,172(sp)
    1be4:	b023883a 	mov	r17,r22
    1be8:	04c001c4 	movi	r19,7
    1bec:	a82d883a 	mov	r22,r21
    1bf0:	902b883a 	mov	r21,r18
    1bf4:	8025883a 	mov	r18,r16
    1bf8:	dc002c17 	ldw	r16,176(sp)
    1bfc:	00000306 	br	1c0c <___vfprintf_internal_r+0x920>
    1c00:	8c7ffc04 	addi	r17,r17,-16
    1c04:	42000204 	addi	r8,r8,8
    1c08:	e440110e 	bge	fp,r17,1c50 <___vfprintf_internal_r+0x964>
    1c0c:	18c00404 	addi	r3,r3,16
    1c10:	10800044 	addi	r2,r2,1
    1c14:	45000015 	stw	r20,0(r8)
    1c18:	47000115 	stw	fp,4(r8)
    1c1c:	d8c02015 	stw	r3,128(sp)
    1c20:	d8801f15 	stw	r2,124(sp)
    1c24:	98bff60e 	bge	r19,r2,1c00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001c00>
    1c28:	d9801e04 	addi	r6,sp,120
    1c2c:	b80b883a 	mov	r5,r23
    1c30:	8009883a 	mov	r4,r16
    1c34:	00088e80 	call	88e8 <__sprint_r>
    1c38:	103eae1e 	bne	r2,zero,16f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70016f4>
    1c3c:	8c7ffc04 	addi	r17,r17,-16
    1c40:	d8c02017 	ldw	r3,128(sp)
    1c44:	d8801f17 	ldw	r2,124(sp)
    1c48:	da000404 	addi	r8,sp,16
    1c4c:	e47fef16 	blt	fp,r17,1c0c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001c0c>
    1c50:	9021883a 	mov	r16,r18
    1c54:	a825883a 	mov	r18,r21
    1c58:	b02b883a 	mov	r21,r22
    1c5c:	882d883a 	mov	r22,r17
    1c60:	dc402917 	ldw	r17,164(sp)
    1c64:	d9002b17 	ldw	r4,172(sp)
    1c68:	1d87883a 	add	r3,r3,r22
    1c6c:	10800044 	addi	r2,r2,1
    1c70:	41000015 	stw	r4,0(r8)
    1c74:	45800115 	stw	r22,4(r8)
    1c78:	d8c02015 	stw	r3,128(sp)
    1c7c:	d8801f15 	stw	r2,124(sp)
    1c80:	010001c4 	movi	r4,7
    1c84:	2081ee16 	blt	r4,r2,2440 <___vfprintf_internal_r+0x1154>
    1c88:	42000204 	addi	r8,r8,8
    1c8c:	9080400c 	andi	r2,r18,256
    1c90:	1001181e 	bne	r2,zero,20f4 <___vfprintf_internal_r+0xe08>
    1c94:	d9402e17 	ldw	r5,184(sp)
    1c98:	d8801f17 	ldw	r2,124(sp)
    1c9c:	44000015 	stw	r16,0(r8)
    1ca0:	1947883a 	add	r3,r3,r5
    1ca4:	10800044 	addi	r2,r2,1
    1ca8:	41400115 	stw	r5,4(r8)
    1cac:	d8c02015 	stw	r3,128(sp)
    1cb0:	d8801f15 	stw	r2,124(sp)
    1cb4:	010001c4 	movi	r4,7
    1cb8:	2081d316 	blt	r4,r2,2408 <___vfprintf_internal_r+0x111c>
    1cbc:	42000204 	addi	r8,r8,8
    1cc0:	9480010c 	andi	r18,r18,4
    1cc4:	90003226 	beq	r18,zero,1d90 <___vfprintf_internal_r+0xaa4>
    1cc8:	d9403117 	ldw	r5,196(sp)
    1ccc:	d8802a17 	ldw	r2,168(sp)
    1cd0:	28a1c83a 	sub	r16,r5,r2
    1cd4:	04002e0e 	bge	zero,r16,1d90 <___vfprintf_internal_r+0xaa4>
    1cd8:	04400404 	movi	r17,16
    1cdc:	d8801f17 	ldw	r2,124(sp)
    1ce0:	8c04a20e 	bge	r17,r16,2f6c <___vfprintf_internal_r+0x1c80>
    1ce4:	01400074 	movhi	r5,1
    1ce8:	295c8f84 	addi	r5,r5,29246
    1cec:	d9403515 	stw	r5,212(sp)
    1cf0:	048001c4 	movi	r18,7
    1cf4:	dcc02c17 	ldw	r19,176(sp)
    1cf8:	00000306 	br	1d08 <___vfprintf_internal_r+0xa1c>
    1cfc:	843ffc04 	addi	r16,r16,-16
    1d00:	42000204 	addi	r8,r8,8
    1d04:	8c00130e 	bge	r17,r16,1d54 <___vfprintf_internal_r+0xa68>
    1d08:	01000074 	movhi	r4,1
    1d0c:	18c00404 	addi	r3,r3,16
    1d10:	10800044 	addi	r2,r2,1
    1d14:	211c8f84 	addi	r4,r4,29246
    1d18:	41000015 	stw	r4,0(r8)
    1d1c:	44400115 	stw	r17,4(r8)
    1d20:	d8c02015 	stw	r3,128(sp)
    1d24:	d8801f15 	stw	r2,124(sp)
    1d28:	90bff40e 	bge	r18,r2,1cfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001cfc>
    1d2c:	d9801e04 	addi	r6,sp,120
    1d30:	b80b883a 	mov	r5,r23
    1d34:	9809883a 	mov	r4,r19
    1d38:	00088e80 	call	88e8 <__sprint_r>
    1d3c:	103e6d1e 	bne	r2,zero,16f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70016f4>
    1d40:	843ffc04 	addi	r16,r16,-16
    1d44:	d8c02017 	ldw	r3,128(sp)
    1d48:	d8801f17 	ldw	r2,124(sp)
    1d4c:	da000404 	addi	r8,sp,16
    1d50:	8c3fed16 	blt	r17,r16,1d08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001d08>
    1d54:	d9403517 	ldw	r5,212(sp)
    1d58:	1c07883a 	add	r3,r3,r16
    1d5c:	10800044 	addi	r2,r2,1
    1d60:	41400015 	stw	r5,0(r8)
    1d64:	44000115 	stw	r16,4(r8)
    1d68:	d8c02015 	stw	r3,128(sp)
    1d6c:	d8801f15 	stw	r2,124(sp)
    1d70:	010001c4 	movi	r4,7
    1d74:	2080060e 	bge	r4,r2,1d90 <___vfprintf_internal_r+0xaa4>
    1d78:	d9002c17 	ldw	r4,176(sp)
    1d7c:	d9801e04 	addi	r6,sp,120
    1d80:	b80b883a 	mov	r5,r23
    1d84:	00088e80 	call	88e8 <__sprint_r>
    1d88:	103e5a1e 	bne	r2,zero,16f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70016f4>
    1d8c:	d8c02017 	ldw	r3,128(sp)
    1d90:	d8803117 	ldw	r2,196(sp)
    1d94:	d9002a17 	ldw	r4,168(sp)
    1d98:	1100010e 	bge	r2,r4,1da0 <___vfprintf_internal_r+0xab4>
    1d9c:	2005883a 	mov	r2,r4
    1da0:	d9402f17 	ldw	r5,188(sp)
    1da4:	288b883a 	add	r5,r5,r2
    1da8:	d9402f15 	stw	r5,188(sp)
    1dac:	18019e1e 	bne	r3,zero,2428 <___vfprintf_internal_r+0x113c>
    1db0:	a8800007 	ldb	r2,0(r21)
    1db4:	d8001f15 	stw	zero,124(sp)
    1db8:	da000404 	addi	r8,sp,16
    1dbc:	103d851e 	bne	r2,zero,13d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70013d4>
    1dc0:	a821883a 	mov	r16,r21
    1dc4:	003d9b06 	br	1434 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001434>
    1dc8:	18c03fcc 	andi	r3,r3,255
    1dcc:	1805c11e 	bne	r3,zero,34d4 <___vfprintf_internal_r+0x21e8>
    1dd0:	94800414 	ori	r18,r18,16
    1dd4:	9080080c 	andi	r2,r18,32
    1dd8:	10020c26 	beq	r2,zero,260c <___vfprintf_internal_r+0x1320>
    1ddc:	d8802d17 	ldw	r2,180(sp)
    1de0:	d9002917 	ldw	r4,164(sp)
    1de4:	d8002785 	stb	zero,158(sp)
    1de8:	10c00204 	addi	r3,r2,8
    1dec:	14c00017 	ldw	r19,0(r2)
    1df0:	15800117 	ldw	r22,4(r2)
    1df4:	20040f16 	blt	r4,zero,2e34 <___vfprintf_internal_r+0x1b48>
    1df8:	013fdfc4 	movi	r4,-129
    1dfc:	9d84b03a 	or	r2,r19,r22
    1e00:	d8c02d15 	stw	r3,180(sp)
    1e04:	9124703a 	and	r18,r18,r4
    1e08:	0039883a 	mov	fp,zero
    1e0c:	103e891e 	bne	r2,zero,1834 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001834>
    1e10:	d9002917 	ldw	r4,164(sp)
    1e14:	2002c11e 	bne	r4,zero,291c <___vfprintf_internal_r+0x1630>
    1e18:	d8002915 	stw	zero,164(sp)
    1e1c:	d8002e15 	stw	zero,184(sp)
    1e20:	dc001e04 	addi	r16,sp,120
    1e24:	003ef806 	br	1a08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001a08>
    1e28:	18c03fcc 	andi	r3,r3,255
    1e2c:	18059d1e 	bne	r3,zero,34a4 <___vfprintf_internal_r+0x21b8>
    1e30:	01400074 	movhi	r5,1
    1e34:	295c7f04 	addi	r5,r5,29180
    1e38:	d9403915 	stw	r5,228(sp)
    1e3c:	9080080c 	andi	r2,r18,32
    1e40:	10005226 	beq	r2,zero,1f8c <___vfprintf_internal_r+0xca0>
    1e44:	d8802d17 	ldw	r2,180(sp)
    1e48:	14c00017 	ldw	r19,0(r2)
    1e4c:	15800117 	ldw	r22,4(r2)
    1e50:	10800204 	addi	r2,r2,8
    1e54:	d8802d15 	stw	r2,180(sp)
    1e58:	9080004c 	andi	r2,r18,1
    1e5c:	10019026 	beq	r2,zero,24a0 <___vfprintf_internal_r+0x11b4>
    1e60:	9d84b03a 	or	r2,r19,r22
    1e64:	10036926 	beq	r2,zero,2c0c <___vfprintf_internal_r+0x1920>
    1e68:	d8c02917 	ldw	r3,164(sp)
    1e6c:	00800c04 	movi	r2,48
    1e70:	d8802705 	stb	r2,156(sp)
    1e74:	dc402745 	stb	r17,157(sp)
    1e78:	d8002785 	stb	zero,158(sp)
    1e7c:	90800094 	ori	r2,r18,2
    1e80:	18045d16 	blt	r3,zero,2ff8 <___vfprintf_internal_r+0x1d0c>
    1e84:	00bfdfc4 	movi	r2,-129
    1e88:	90a4703a 	and	r18,r18,r2
    1e8c:	94800094 	ori	r18,r18,2
    1e90:	0039883a 	mov	fp,zero
    1e94:	d9003917 	ldw	r4,228(sp)
    1e98:	dc001e04 	addi	r16,sp,120
    1e9c:	988003cc 	andi	r2,r19,15
    1ea0:	b006973a 	slli	r3,r22,28
    1ea4:	2085883a 	add	r2,r4,r2
    1ea8:	9826d13a 	srli	r19,r19,4
    1eac:	10800003 	ldbu	r2,0(r2)
    1eb0:	b02cd13a 	srli	r22,r22,4
    1eb4:	843fffc4 	addi	r16,r16,-1
    1eb8:	1ce6b03a 	or	r19,r3,r19
    1ebc:	80800005 	stb	r2,0(r16)
    1ec0:	9d84b03a 	or	r2,r19,r22
    1ec4:	103ff51e 	bne	r2,zero,1e9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001e9c>
    1ec8:	d8c02817 	ldw	r3,160(sp)
    1ecc:	1c07c83a 	sub	r3,r3,r16
    1ed0:	d8c02e15 	stw	r3,184(sp)
    1ed4:	003ecc06 	br	1a08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001a08>
    1ed8:	18c03fcc 	andi	r3,r3,255
    1edc:	183e9f26 	beq	r3,zero,195c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700195c>
    1ee0:	d9c02785 	stb	r7,158(sp)
    1ee4:	003e9d06 	br	195c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700195c>
    1ee8:	00c00044 	movi	r3,1
    1eec:	01c00ac4 	movi	r7,43
    1ef0:	ac400007 	ldb	r17,0(r21)
    1ef4:	003d5e06 	br	1470 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001470>
    1ef8:	94800814 	ori	r18,r18,32
    1efc:	ac400007 	ldb	r17,0(r21)
    1f00:	003d5b06 	br	1470 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001470>
    1f04:	d8c02d17 	ldw	r3,180(sp)
    1f08:	d8002785 	stb	zero,158(sp)
    1f0c:	1c000017 	ldw	r16,0(r3)
    1f10:	1cc00104 	addi	r19,r3,4
    1f14:	80041926 	beq	r16,zero,2f7c <___vfprintf_internal_r+0x1c90>
    1f18:	d9002917 	ldw	r4,164(sp)
    1f1c:	2003d016 	blt	r4,zero,2e60 <___vfprintf_internal_r+0x1b74>
    1f20:	200d883a 	mov	r6,r4
    1f24:	000b883a 	mov	r5,zero
    1f28:	8009883a 	mov	r4,r16
    1f2c:	da003d15 	stw	r8,244(sp)
    1f30:	0006afc0 	call	6afc <memchr>
    1f34:	da003d17 	ldw	r8,244(sp)
    1f38:	10045426 	beq	r2,zero,308c <___vfprintf_internal_r+0x1da0>
    1f3c:	1405c83a 	sub	r2,r2,r16
    1f40:	d8802e15 	stw	r2,184(sp)
    1f44:	1003cc16 	blt	r2,zero,2e78 <___vfprintf_internal_r+0x1b8c>
    1f48:	df002783 	ldbu	fp,158(sp)
    1f4c:	d8802a15 	stw	r2,168(sp)
    1f50:	dcc02d15 	stw	r19,180(sp)
    1f54:	d8002915 	stw	zero,164(sp)
    1f58:	d8003215 	stw	zero,200(sp)
    1f5c:	003eb006 	br	1a20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001a20>
    1f60:	18c03fcc 	andi	r3,r3,255
    1f64:	183f9b26 	beq	r3,zero,1dd4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001dd4>
    1f68:	d9c02785 	stb	r7,158(sp)
    1f6c:	003f9906 	br	1dd4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001dd4>
    1f70:	18c03fcc 	andi	r3,r3,255
    1f74:	1805551e 	bne	r3,zero,34cc <___vfprintf_internal_r+0x21e0>
    1f78:	01400074 	movhi	r5,1
    1f7c:	295c8404 	addi	r5,r5,29200
    1f80:	d9403915 	stw	r5,228(sp)
    1f84:	9080080c 	andi	r2,r18,32
    1f88:	103fae1e 	bne	r2,zero,1e44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001e44>
    1f8c:	9080040c 	andi	r2,r18,16
    1f90:	1002de26 	beq	r2,zero,2b0c <___vfprintf_internal_r+0x1820>
    1f94:	d8c02d17 	ldw	r3,180(sp)
    1f98:	002d883a 	mov	r22,zero
    1f9c:	1cc00017 	ldw	r19,0(r3)
    1fa0:	18c00104 	addi	r3,r3,4
    1fa4:	d8c02d15 	stw	r3,180(sp)
    1fa8:	003fab06 	br	1e58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001e58>
    1fac:	38803fcc 	andi	r2,r7,255
    1fb0:	1080201c 	xori	r2,r2,128
    1fb4:	10bfe004 	addi	r2,r2,-128
    1fb8:	1002d21e 	bne	r2,zero,2b04 <___vfprintf_internal_r+0x1818>
    1fbc:	00c00044 	movi	r3,1
    1fc0:	01c00804 	movi	r7,32
    1fc4:	ac400007 	ldb	r17,0(r21)
    1fc8:	003d2906 	br	1470 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001470>
    1fcc:	94800054 	ori	r18,r18,1
    1fd0:	ac400007 	ldb	r17,0(r21)
    1fd4:	003d2606 	br	1470 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001470>
    1fd8:	18c03fcc 	andi	r3,r3,255
    1fdc:	183e0526 	beq	r3,zero,17f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70017f4>
    1fe0:	d9c02785 	stb	r7,158(sp)
    1fe4:	003e0306 	br	17f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70017f4>
    1fe8:	94801014 	ori	r18,r18,64
    1fec:	ac400007 	ldb	r17,0(r21)
    1ff0:	003d1f06 	br	1470 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001470>
    1ff4:	ac400007 	ldb	r17,0(r21)
    1ff8:	8a438726 	beq	r17,r9,2e18 <___vfprintf_internal_r+0x1b2c>
    1ffc:	94800414 	ori	r18,r18,16
    2000:	003d1b06 	br	1470 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001470>
    2004:	18c03fcc 	andi	r3,r3,255
    2008:	1805341e 	bne	r3,zero,34dc <___vfprintf_internal_r+0x21f0>
    200c:	9080080c 	andi	r2,r18,32
    2010:	1002cd26 	beq	r2,zero,2b48 <___vfprintf_internal_r+0x185c>
    2014:	d9402d17 	ldw	r5,180(sp)
    2018:	d9002f17 	ldw	r4,188(sp)
    201c:	28800017 	ldw	r2,0(r5)
    2020:	2007d7fa 	srai	r3,r4,31
    2024:	29400104 	addi	r5,r5,4
    2028:	d9402d15 	stw	r5,180(sp)
    202c:	11000015 	stw	r4,0(r2)
    2030:	10c00115 	stw	r3,4(r2)
    2034:	003ce506 	br	13cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70013cc>
    2038:	d8c02d17 	ldw	r3,180(sp)
    203c:	d9002d17 	ldw	r4,180(sp)
    2040:	d8002785 	stb	zero,158(sp)
    2044:	18800017 	ldw	r2,0(r3)
    2048:	21000104 	addi	r4,r4,4
    204c:	00c00044 	movi	r3,1
    2050:	d8c02a15 	stw	r3,168(sp)
    2054:	d8801405 	stb	r2,80(sp)
    2058:	d9002d15 	stw	r4,180(sp)
    205c:	d8c02e15 	stw	r3,184(sp)
    2060:	d8002915 	stw	zero,164(sp)
    2064:	d8003215 	stw	zero,200(sp)
    2068:	dc001404 	addi	r16,sp,80
    206c:	0039883a 	mov	fp,zero
    2070:	003e7206 	br	1a3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001a3c>
    2074:	01000074 	movhi	r4,1
    2078:	211c8404 	addi	r4,r4,29200
    207c:	0039883a 	mov	fp,zero
    2080:	d9003915 	stw	r4,228(sp)
    2084:	04401e04 	movi	r17,120
    2088:	003f8206 	br	1e94 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001e94>
    208c:	18c03fcc 	andi	r3,r3,255
    2090:	1805061e 	bne	r3,zero,34ac <___vfprintf_internal_r+0x21c0>
    2094:	883d9126 	beq	r17,zero,16dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70016dc>
    2098:	00c00044 	movi	r3,1
    209c:	d8c02a15 	stw	r3,168(sp)
    20a0:	dc401405 	stb	r17,80(sp)
    20a4:	d8002785 	stb	zero,158(sp)
    20a8:	003fec06 	br	205c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700205c>
    20ac:	01400074 	movhi	r5,1
    20b0:	295c8404 	addi	r5,r5,29200
    20b4:	d9403915 	stw	r5,228(sp)
    20b8:	d8c02d15 	stw	r3,180(sp)
    20bc:	1025883a 	mov	r18,r2
    20c0:	04401e04 	movi	r17,120
    20c4:	9d84b03a 	or	r2,r19,r22
    20c8:	1000fc1e 	bne	r2,zero,24bc <___vfprintf_internal_r+0x11d0>
    20cc:	0039883a 	mov	fp,zero
    20d0:	00800084 	movi	r2,2
    20d4:	10803fcc 	andi	r2,r2,255
    20d8:	00c00044 	movi	r3,1
    20dc:	10c20f26 	beq	r2,r3,291c <___vfprintf_internal_r+0x1630>
    20e0:	00c00084 	movi	r3,2
    20e4:	10fd6326 	beq	r2,r3,1674 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001674>
    20e8:	003e2d06 	br	19a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70019a0>
    20ec:	d8c02017 	ldw	r3,128(sp)
    20f0:	003e9306 	br	1b40 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001b40>
    20f4:	00801944 	movi	r2,101
    20f8:	14407e0e 	bge	r2,r17,22f4 <___vfprintf_internal_r+0x1008>
    20fc:	d9003617 	ldw	r4,216(sp)
    2100:	d9403817 	ldw	r5,224(sp)
    2104:	000d883a 	mov	r6,zero
    2108:	000f883a 	mov	r7,zero
    210c:	d8c03c15 	stw	r3,240(sp)
    2110:	da003d15 	stw	r8,244(sp)
    2114:	000c5600 	call	c560 <__eqdf2>
    2118:	d8c03c17 	ldw	r3,240(sp)
    211c:	da003d17 	ldw	r8,244(sp)
    2120:	1000f71e 	bne	r2,zero,2500 <___vfprintf_internal_r+0x1214>
    2124:	d8801f17 	ldw	r2,124(sp)
    2128:	01000074 	movhi	r4,1
    212c:	211c8b04 	addi	r4,r4,29228
    2130:	18c00044 	addi	r3,r3,1
    2134:	10800044 	addi	r2,r2,1
    2138:	41000015 	stw	r4,0(r8)
    213c:	01000044 	movi	r4,1
    2140:	41000115 	stw	r4,4(r8)
    2144:	d8c02015 	stw	r3,128(sp)
    2148:	d8801f15 	stw	r2,124(sp)
    214c:	010001c4 	movi	r4,7
    2150:	2082b816 	blt	r4,r2,2c34 <___vfprintf_internal_r+0x1948>
    2154:	42000204 	addi	r8,r8,8
    2158:	d8802617 	ldw	r2,152(sp)
    215c:	d9403317 	ldw	r5,204(sp)
    2160:	11400216 	blt	r2,r5,216c <___vfprintf_internal_r+0xe80>
    2164:	9080004c 	andi	r2,r18,1
    2168:	103ed526 	beq	r2,zero,1cc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001cc0>
    216c:	d8803717 	ldw	r2,220(sp)
    2170:	d9003417 	ldw	r4,208(sp)
    2174:	d9403717 	ldw	r5,220(sp)
    2178:	1887883a 	add	r3,r3,r2
    217c:	d8801f17 	ldw	r2,124(sp)
    2180:	41000015 	stw	r4,0(r8)
    2184:	41400115 	stw	r5,4(r8)
    2188:	10800044 	addi	r2,r2,1
    218c:	d8c02015 	stw	r3,128(sp)
    2190:	d8801f15 	stw	r2,124(sp)
    2194:	010001c4 	movi	r4,7
    2198:	20832916 	blt	r4,r2,2e40 <___vfprintf_internal_r+0x1b54>
    219c:	42000204 	addi	r8,r8,8
    21a0:	d8803317 	ldw	r2,204(sp)
    21a4:	143fffc4 	addi	r16,r2,-1
    21a8:	043ec50e 	bge	zero,r16,1cc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001cc0>
    21ac:	04400404 	movi	r17,16
    21b0:	d8801f17 	ldw	r2,124(sp)
    21b4:	8c00880e 	bge	r17,r16,23d8 <___vfprintf_internal_r+0x10ec>
    21b8:	01400074 	movhi	r5,1
    21bc:	295c8b84 	addi	r5,r5,29230
    21c0:	d9402b15 	stw	r5,172(sp)
    21c4:	058001c4 	movi	r22,7
    21c8:	dcc02c17 	ldw	r19,176(sp)
    21cc:	00000306 	br	21dc <___vfprintf_internal_r+0xef0>
    21d0:	42000204 	addi	r8,r8,8
    21d4:	843ffc04 	addi	r16,r16,-16
    21d8:	8c00820e 	bge	r17,r16,23e4 <___vfprintf_internal_r+0x10f8>
    21dc:	18c00404 	addi	r3,r3,16
    21e0:	10800044 	addi	r2,r2,1
    21e4:	45000015 	stw	r20,0(r8)
    21e8:	44400115 	stw	r17,4(r8)
    21ec:	d8c02015 	stw	r3,128(sp)
    21f0:	d8801f15 	stw	r2,124(sp)
    21f4:	b0bff60e 	bge	r22,r2,21d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70021d0>
    21f8:	d9801e04 	addi	r6,sp,120
    21fc:	b80b883a 	mov	r5,r23
    2200:	9809883a 	mov	r4,r19
    2204:	00088e80 	call	88e8 <__sprint_r>
    2208:	103d3a1e 	bne	r2,zero,16f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70016f4>
    220c:	d8c02017 	ldw	r3,128(sp)
    2210:	d8801f17 	ldw	r2,124(sp)
    2214:	da000404 	addi	r8,sp,16
    2218:	003fee06 	br	21d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70021d4>
    221c:	d9403117 	ldw	r5,196(sp)
    2220:	d8802a17 	ldw	r2,168(sp)
    2224:	28adc83a 	sub	r22,r5,r2
    2228:	05be630e 	bge	zero,r22,1bb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001bb8>
    222c:	07000404 	movi	fp,16
    2230:	d8801f17 	ldw	r2,124(sp)
    2234:	e5838f0e 	bge	fp,r22,3074 <___vfprintf_internal_r+0x1d88>
    2238:	01400074 	movhi	r5,1
    223c:	295c8b84 	addi	r5,r5,29230
    2240:	dc403015 	stw	r17,192(sp)
    2244:	d9402b15 	stw	r5,172(sp)
    2248:	b023883a 	mov	r17,r22
    224c:	04c001c4 	movi	r19,7
    2250:	a82d883a 	mov	r22,r21
    2254:	902b883a 	mov	r21,r18
    2258:	8025883a 	mov	r18,r16
    225c:	dc002c17 	ldw	r16,176(sp)
    2260:	00000306 	br	2270 <___vfprintf_internal_r+0xf84>
    2264:	8c7ffc04 	addi	r17,r17,-16
    2268:	42000204 	addi	r8,r8,8
    226c:	e440110e 	bge	fp,r17,22b4 <___vfprintf_internal_r+0xfc8>
    2270:	18c00404 	addi	r3,r3,16
    2274:	10800044 	addi	r2,r2,1
    2278:	45000015 	stw	r20,0(r8)
    227c:	47000115 	stw	fp,4(r8)
    2280:	d8c02015 	stw	r3,128(sp)
    2284:	d8801f15 	stw	r2,124(sp)
    2288:	98bff60e 	bge	r19,r2,2264 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002264>
    228c:	d9801e04 	addi	r6,sp,120
    2290:	b80b883a 	mov	r5,r23
    2294:	8009883a 	mov	r4,r16
    2298:	00088e80 	call	88e8 <__sprint_r>
    229c:	103d151e 	bne	r2,zero,16f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70016f4>
    22a0:	8c7ffc04 	addi	r17,r17,-16
    22a4:	d8c02017 	ldw	r3,128(sp)
    22a8:	d8801f17 	ldw	r2,124(sp)
    22ac:	da000404 	addi	r8,sp,16
    22b0:	e47fef16 	blt	fp,r17,2270 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002270>
    22b4:	9021883a 	mov	r16,r18
    22b8:	a825883a 	mov	r18,r21
    22bc:	b02b883a 	mov	r21,r22
    22c0:	882d883a 	mov	r22,r17
    22c4:	dc403017 	ldw	r17,192(sp)
    22c8:	d9002b17 	ldw	r4,172(sp)
    22cc:	1d87883a 	add	r3,r3,r22
    22d0:	10800044 	addi	r2,r2,1
    22d4:	41000015 	stw	r4,0(r8)
    22d8:	45800115 	stw	r22,4(r8)
    22dc:	d8c02015 	stw	r3,128(sp)
    22e0:	d8801f15 	stw	r2,124(sp)
    22e4:	010001c4 	movi	r4,7
    22e8:	20818e16 	blt	r4,r2,2924 <___vfprintf_internal_r+0x1638>
    22ec:	42000204 	addi	r8,r8,8
    22f0:	003e3106 	br	1bb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001bb8>
    22f4:	d9403317 	ldw	r5,204(sp)
    22f8:	00800044 	movi	r2,1
    22fc:	18c00044 	addi	r3,r3,1
    2300:	1141530e 	bge	r2,r5,2850 <___vfprintf_internal_r+0x1564>
    2304:	dc401f17 	ldw	r17,124(sp)
    2308:	00800044 	movi	r2,1
    230c:	40800115 	stw	r2,4(r8)
    2310:	8c400044 	addi	r17,r17,1
    2314:	44000015 	stw	r16,0(r8)
    2318:	d8c02015 	stw	r3,128(sp)
    231c:	dc401f15 	stw	r17,124(sp)
    2320:	008001c4 	movi	r2,7
    2324:	14416b16 	blt	r2,r17,28d4 <___vfprintf_internal_r+0x15e8>
    2328:	42000204 	addi	r8,r8,8
    232c:	d8803717 	ldw	r2,220(sp)
    2330:	d9003417 	ldw	r4,208(sp)
    2334:	8c400044 	addi	r17,r17,1
    2338:	10c7883a 	add	r3,r2,r3
    233c:	40800115 	stw	r2,4(r8)
    2340:	41000015 	stw	r4,0(r8)
    2344:	d8c02015 	stw	r3,128(sp)
    2348:	dc401f15 	stw	r17,124(sp)
    234c:	008001c4 	movi	r2,7
    2350:	14416916 	blt	r2,r17,28f8 <___vfprintf_internal_r+0x160c>
    2354:	45800204 	addi	r22,r8,8
    2358:	d9003617 	ldw	r4,216(sp)
    235c:	d9403817 	ldw	r5,224(sp)
    2360:	000d883a 	mov	r6,zero
    2364:	000f883a 	mov	r7,zero
    2368:	d8c03c15 	stw	r3,240(sp)
    236c:	000c5600 	call	c560 <__eqdf2>
    2370:	d8c03c17 	ldw	r3,240(sp)
    2374:	1000bc26 	beq	r2,zero,2668 <___vfprintf_internal_r+0x137c>
    2378:	d9403317 	ldw	r5,204(sp)
    237c:	84000044 	addi	r16,r16,1
    2380:	8c400044 	addi	r17,r17,1
    2384:	28bfffc4 	addi	r2,r5,-1
    2388:	1887883a 	add	r3,r3,r2
    238c:	b0800115 	stw	r2,4(r22)
    2390:	b4000015 	stw	r16,0(r22)
    2394:	d8c02015 	stw	r3,128(sp)
    2398:	dc401f15 	stw	r17,124(sp)
    239c:	008001c4 	movi	r2,7
    23a0:	14414316 	blt	r2,r17,28b0 <___vfprintf_internal_r+0x15c4>
    23a4:	b5800204 	addi	r22,r22,8
    23a8:	d9003a17 	ldw	r4,232(sp)
    23ac:	df0022c4 	addi	fp,sp,139
    23b0:	8c400044 	addi	r17,r17,1
    23b4:	20c7883a 	add	r3,r4,r3
    23b8:	b7000015 	stw	fp,0(r22)
    23bc:	b1000115 	stw	r4,4(r22)
    23c0:	d8c02015 	stw	r3,128(sp)
    23c4:	dc401f15 	stw	r17,124(sp)
    23c8:	008001c4 	movi	r2,7
    23cc:	14400e16 	blt	r2,r17,2408 <___vfprintf_internal_r+0x111c>
    23d0:	b2000204 	addi	r8,r22,8
    23d4:	003e3a06 	br	1cc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001cc0>
    23d8:	01000074 	movhi	r4,1
    23dc:	211c8b84 	addi	r4,r4,29230
    23e0:	d9002b15 	stw	r4,172(sp)
    23e4:	d9002b17 	ldw	r4,172(sp)
    23e8:	1c07883a 	add	r3,r3,r16
    23ec:	44000115 	stw	r16,4(r8)
    23f0:	41000015 	stw	r4,0(r8)
    23f4:	10800044 	addi	r2,r2,1
    23f8:	d8c02015 	stw	r3,128(sp)
    23fc:	d8801f15 	stw	r2,124(sp)
    2400:	010001c4 	movi	r4,7
    2404:	20be2d0e 	bge	r4,r2,1cbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001cbc>
    2408:	d9002c17 	ldw	r4,176(sp)
    240c:	d9801e04 	addi	r6,sp,120
    2410:	b80b883a 	mov	r5,r23
    2414:	00088e80 	call	88e8 <__sprint_r>
    2418:	103cb61e 	bne	r2,zero,16f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70016f4>
    241c:	d8c02017 	ldw	r3,128(sp)
    2420:	da000404 	addi	r8,sp,16
    2424:	003e2606 	br	1cc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001cc0>
    2428:	d9002c17 	ldw	r4,176(sp)
    242c:	d9801e04 	addi	r6,sp,120
    2430:	b80b883a 	mov	r5,r23
    2434:	00088e80 	call	88e8 <__sprint_r>
    2438:	103e5d26 	beq	r2,zero,1db0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001db0>
    243c:	003cad06 	br	16f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70016f4>
    2440:	d9002c17 	ldw	r4,176(sp)
    2444:	d9801e04 	addi	r6,sp,120
    2448:	b80b883a 	mov	r5,r23
    244c:	00088e80 	call	88e8 <__sprint_r>
    2450:	103ca81e 	bne	r2,zero,16f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70016f4>
    2454:	d8c02017 	ldw	r3,128(sp)
    2458:	da000404 	addi	r8,sp,16
    245c:	003e0b06 	br	1c8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001c8c>
    2460:	d9002c17 	ldw	r4,176(sp)
    2464:	d9801e04 	addi	r6,sp,120
    2468:	b80b883a 	mov	r5,r23
    246c:	00088e80 	call	88e8 <__sprint_r>
    2470:	103ca01e 	bne	r2,zero,16f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70016f4>
    2474:	d8c02017 	ldw	r3,128(sp)
    2478:	da000404 	addi	r8,sp,16
    247c:	003dbd06 	br	1b74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001b74>
    2480:	d9002c17 	ldw	r4,176(sp)
    2484:	d9801e04 	addi	r6,sp,120
    2488:	b80b883a 	mov	r5,r23
    248c:	00088e80 	call	88e8 <__sprint_r>
    2490:	103c981e 	bne	r2,zero,16f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70016f4>
    2494:	d8c02017 	ldw	r3,128(sp)
    2498:	da000404 	addi	r8,sp,16
    249c:	003dc306 	br	1bac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001bac>
    24a0:	d8802917 	ldw	r2,164(sp)
    24a4:	d8002785 	stb	zero,158(sp)
    24a8:	103f0616 	blt	r2,zero,20c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70020c4>
    24ac:	00ffdfc4 	movi	r3,-129
    24b0:	9d84b03a 	or	r2,r19,r22
    24b4:	90e4703a 	and	r18,r18,r3
    24b8:	103c6b26 	beq	r2,zero,1668 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001668>
    24bc:	0039883a 	mov	fp,zero
    24c0:	003e7406 	br	1e94 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001e94>
    24c4:	9080040c 	andi	r2,r18,16
    24c8:	1001b326 	beq	r2,zero,2b98 <___vfprintf_internal_r+0x18ac>
    24cc:	d9002d17 	ldw	r4,180(sp)
    24d0:	d9402917 	ldw	r5,164(sp)
    24d4:	d8002785 	stb	zero,158(sp)
    24d8:	20800104 	addi	r2,r4,4
    24dc:	24c00017 	ldw	r19,0(r4)
    24e0:	002d883a 	mov	r22,zero
    24e4:	2801b516 	blt	r5,zero,2bbc <___vfprintf_internal_r+0x18d0>
    24e8:	00ffdfc4 	movi	r3,-129
    24ec:	d8802d15 	stw	r2,180(sp)
    24f0:	90e4703a 	and	r18,r18,r3
    24f4:	983d2726 	beq	r19,zero,1994 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001994>
    24f8:	0039883a 	mov	fp,zero
    24fc:	003d2a06 	br	19a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70019a8>
    2500:	dc402617 	ldw	r17,152(sp)
    2504:	0441d30e 	bge	zero,r17,2c54 <___vfprintf_internal_r+0x1968>
    2508:	dc403217 	ldw	r17,200(sp)
    250c:	d8803317 	ldw	r2,204(sp)
    2510:	1440010e 	bge	r2,r17,2518 <___vfprintf_internal_r+0x122c>
    2514:	1023883a 	mov	r17,r2
    2518:	04400a0e 	bge	zero,r17,2544 <___vfprintf_internal_r+0x1258>
    251c:	d8801f17 	ldw	r2,124(sp)
    2520:	1c47883a 	add	r3,r3,r17
    2524:	44000015 	stw	r16,0(r8)
    2528:	10800044 	addi	r2,r2,1
    252c:	44400115 	stw	r17,4(r8)
    2530:	d8c02015 	stw	r3,128(sp)
    2534:	d8801f15 	stw	r2,124(sp)
    2538:	010001c4 	movi	r4,7
    253c:	20826516 	blt	r4,r2,2ed4 <___vfprintf_internal_r+0x1be8>
    2540:	42000204 	addi	r8,r8,8
    2544:	88026116 	blt	r17,zero,2ecc <___vfprintf_internal_r+0x1be0>
    2548:	d9003217 	ldw	r4,200(sp)
    254c:	2463c83a 	sub	r17,r4,r17
    2550:	04407b0e 	bge	zero,r17,2740 <___vfprintf_internal_r+0x1454>
    2554:	05800404 	movi	r22,16
    2558:	d8801f17 	ldw	r2,124(sp)
    255c:	b4419d0e 	bge	r22,r17,2bd4 <___vfprintf_internal_r+0x18e8>
    2560:	01000074 	movhi	r4,1
    2564:	211c8b84 	addi	r4,r4,29230
    2568:	d9002b15 	stw	r4,172(sp)
    256c:	070001c4 	movi	fp,7
    2570:	dcc02c17 	ldw	r19,176(sp)
    2574:	00000306 	br	2584 <___vfprintf_internal_r+0x1298>
    2578:	42000204 	addi	r8,r8,8
    257c:	8c7ffc04 	addi	r17,r17,-16
    2580:	b441970e 	bge	r22,r17,2be0 <___vfprintf_internal_r+0x18f4>
    2584:	18c00404 	addi	r3,r3,16
    2588:	10800044 	addi	r2,r2,1
    258c:	45000015 	stw	r20,0(r8)
    2590:	45800115 	stw	r22,4(r8)
    2594:	d8c02015 	stw	r3,128(sp)
    2598:	d8801f15 	stw	r2,124(sp)
    259c:	e0bff60e 	bge	fp,r2,2578 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002578>
    25a0:	d9801e04 	addi	r6,sp,120
    25a4:	b80b883a 	mov	r5,r23
    25a8:	9809883a 	mov	r4,r19
    25ac:	00088e80 	call	88e8 <__sprint_r>
    25b0:	103c501e 	bne	r2,zero,16f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70016f4>
    25b4:	d8c02017 	ldw	r3,128(sp)
    25b8:	d8801f17 	ldw	r2,124(sp)
    25bc:	da000404 	addi	r8,sp,16
    25c0:	003fee06 	br	257c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700257c>
    25c4:	d9002c17 	ldw	r4,176(sp)
    25c8:	d9801e04 	addi	r6,sp,120
    25cc:	b80b883a 	mov	r5,r23
    25d0:	00088e80 	call	88e8 <__sprint_r>
    25d4:	103c471e 	bne	r2,zero,16f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70016f4>
    25d8:	d8c02017 	ldw	r3,128(sp)
    25dc:	df002787 	ldb	fp,158(sp)
    25e0:	da000404 	addi	r8,sp,16
    25e4:	003d5606 	br	1b40 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001b40>
    25e8:	9080040c 	andi	r2,r18,16
    25ec:	10016126 	beq	r2,zero,2b74 <___vfprintf_internal_r+0x1888>
    25f0:	d8802d17 	ldw	r2,180(sp)
    25f4:	14c00017 	ldw	r19,0(r2)
    25f8:	10800104 	addi	r2,r2,4
    25fc:	d8802d15 	stw	r2,180(sp)
    2600:	982dd7fa 	srai	r22,r19,31
    2604:	b005883a 	mov	r2,r22
    2608:	003c8206 	br	1814 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001814>
    260c:	9080040c 	andi	r2,r18,16
    2610:	10003526 	beq	r2,zero,26e8 <___vfprintf_internal_r+0x13fc>
    2614:	d9402d17 	ldw	r5,180(sp)
    2618:	d8c02917 	ldw	r3,164(sp)
    261c:	d8002785 	stb	zero,158(sp)
    2620:	28800104 	addi	r2,r5,4
    2624:	2cc00017 	ldw	r19,0(r5)
    2628:	002d883a 	mov	r22,zero
    262c:	18003716 	blt	r3,zero,270c <___vfprintf_internal_r+0x1420>
    2630:	00ffdfc4 	movi	r3,-129
    2634:	d8802d15 	stw	r2,180(sp)
    2638:	90e4703a 	and	r18,r18,r3
    263c:	0039883a 	mov	fp,zero
    2640:	983df326 	beq	r19,zero,1e10 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001e10>
    2644:	00800244 	movi	r2,9
    2648:	14fc7b36 	bltu	r2,r19,1838 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001838>
    264c:	d8c02817 	ldw	r3,160(sp)
    2650:	dc001dc4 	addi	r16,sp,119
    2654:	9cc00c04 	addi	r19,r19,48
    2658:	1c07c83a 	sub	r3,r3,r16
    265c:	dcc01dc5 	stb	r19,119(sp)
    2660:	d8c02e15 	stw	r3,184(sp)
    2664:	003ce806 	br	1a08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001a08>
    2668:	d8803317 	ldw	r2,204(sp)
    266c:	143fffc4 	addi	r16,r2,-1
    2670:	043f4d0e 	bge	zero,r16,23a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70023a8>
    2674:	07000404 	movi	fp,16
    2678:	e400810e 	bge	fp,r16,2880 <___vfprintf_internal_r+0x1594>
    267c:	01400074 	movhi	r5,1
    2680:	295c8b84 	addi	r5,r5,29230
    2684:	d9402b15 	stw	r5,172(sp)
    2688:	01c001c4 	movi	r7,7
    268c:	dcc02c17 	ldw	r19,176(sp)
    2690:	00000306 	br	26a0 <___vfprintf_internal_r+0x13b4>
    2694:	b5800204 	addi	r22,r22,8
    2698:	843ffc04 	addi	r16,r16,-16
    269c:	e4007b0e 	bge	fp,r16,288c <___vfprintf_internal_r+0x15a0>
    26a0:	18c00404 	addi	r3,r3,16
    26a4:	8c400044 	addi	r17,r17,1
    26a8:	b5000015 	stw	r20,0(r22)
    26ac:	b7000115 	stw	fp,4(r22)
    26b0:	d8c02015 	stw	r3,128(sp)
    26b4:	dc401f15 	stw	r17,124(sp)
    26b8:	3c7ff60e 	bge	r7,r17,2694 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002694>
    26bc:	d9801e04 	addi	r6,sp,120
    26c0:	b80b883a 	mov	r5,r23
    26c4:	9809883a 	mov	r4,r19
    26c8:	d9c03c15 	stw	r7,240(sp)
    26cc:	00088e80 	call	88e8 <__sprint_r>
    26d0:	d9c03c17 	ldw	r7,240(sp)
    26d4:	103c071e 	bne	r2,zero,16f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70016f4>
    26d8:	d8c02017 	ldw	r3,128(sp)
    26dc:	dc401f17 	ldw	r17,124(sp)
    26e0:	dd800404 	addi	r22,sp,16
    26e4:	003fec06 	br	2698 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002698>
    26e8:	9080100c 	andi	r2,r18,64
    26ec:	d8002785 	stb	zero,158(sp)
    26f0:	10010e26 	beq	r2,zero,2b2c <___vfprintf_internal_r+0x1840>
    26f4:	d9002d17 	ldw	r4,180(sp)
    26f8:	d9402917 	ldw	r5,164(sp)
    26fc:	002d883a 	mov	r22,zero
    2700:	20800104 	addi	r2,r4,4
    2704:	24c0000b 	ldhu	r19,0(r4)
    2708:	283fc90e 	bge	r5,zero,2630 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002630>
    270c:	d8802d15 	stw	r2,180(sp)
    2710:	0039883a 	mov	fp,zero
    2714:	9d84b03a 	or	r2,r19,r22
    2718:	103c461e 	bne	r2,zero,1834 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001834>
    271c:	00800044 	movi	r2,1
    2720:	003e6c06 	br	20d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70020d4>
    2724:	d9002c17 	ldw	r4,176(sp)
    2728:	d9801e04 	addi	r6,sp,120
    272c:	b80b883a 	mov	r5,r23
    2730:	00088e80 	call	88e8 <__sprint_r>
    2734:	103bef1e 	bne	r2,zero,16f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70016f4>
    2738:	d8c02017 	ldw	r3,128(sp)
    273c:	da000404 	addi	r8,sp,16
    2740:	d9003217 	ldw	r4,200(sp)
    2744:	d8802617 	ldw	r2,152(sp)
    2748:	d9403317 	ldw	r5,204(sp)
    274c:	8123883a 	add	r17,r16,r4
    2750:	11400216 	blt	r2,r5,275c <___vfprintf_internal_r+0x1470>
    2754:	9100004c 	andi	r4,r18,1
    2758:	20000d26 	beq	r4,zero,2790 <___vfprintf_internal_r+0x14a4>
    275c:	d9003717 	ldw	r4,220(sp)
    2760:	d9403417 	ldw	r5,208(sp)
    2764:	1907883a 	add	r3,r3,r4
    2768:	d9001f17 	ldw	r4,124(sp)
    276c:	41400015 	stw	r5,0(r8)
    2770:	d9403717 	ldw	r5,220(sp)
    2774:	21000044 	addi	r4,r4,1
    2778:	d8c02015 	stw	r3,128(sp)
    277c:	41400115 	stw	r5,4(r8)
    2780:	d9001f15 	stw	r4,124(sp)
    2784:	014001c4 	movi	r5,7
    2788:	2901e816 	blt	r5,r4,2f2c <___vfprintf_internal_r+0x1c40>
    278c:	42000204 	addi	r8,r8,8
    2790:	d9003317 	ldw	r4,204(sp)
    2794:	8121883a 	add	r16,r16,r4
    2798:	2085c83a 	sub	r2,r4,r2
    279c:	8461c83a 	sub	r16,r16,r17
    27a0:	1400010e 	bge	r2,r16,27a8 <___vfprintf_internal_r+0x14bc>
    27a4:	1021883a 	mov	r16,r2
    27a8:	04000a0e 	bge	zero,r16,27d4 <___vfprintf_internal_r+0x14e8>
    27ac:	d9001f17 	ldw	r4,124(sp)
    27b0:	1c07883a 	add	r3,r3,r16
    27b4:	44400015 	stw	r17,0(r8)
    27b8:	21000044 	addi	r4,r4,1
    27bc:	44000115 	stw	r16,4(r8)
    27c0:	d8c02015 	stw	r3,128(sp)
    27c4:	d9001f15 	stw	r4,124(sp)
    27c8:	014001c4 	movi	r5,7
    27cc:	2901fb16 	blt	r5,r4,2fbc <___vfprintf_internal_r+0x1cd0>
    27d0:	42000204 	addi	r8,r8,8
    27d4:	8001f716 	blt	r16,zero,2fb4 <___vfprintf_internal_r+0x1cc8>
    27d8:	1421c83a 	sub	r16,r2,r16
    27dc:	043d380e 	bge	zero,r16,1cc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001cc0>
    27e0:	04400404 	movi	r17,16
    27e4:	d8801f17 	ldw	r2,124(sp)
    27e8:	8c3efb0e 	bge	r17,r16,23d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70023d8>
    27ec:	01400074 	movhi	r5,1
    27f0:	295c8b84 	addi	r5,r5,29230
    27f4:	d9402b15 	stw	r5,172(sp)
    27f8:	058001c4 	movi	r22,7
    27fc:	dcc02c17 	ldw	r19,176(sp)
    2800:	00000306 	br	2810 <___vfprintf_internal_r+0x1524>
    2804:	42000204 	addi	r8,r8,8
    2808:	843ffc04 	addi	r16,r16,-16
    280c:	8c3ef50e 	bge	r17,r16,23e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70023e4>
    2810:	18c00404 	addi	r3,r3,16
    2814:	10800044 	addi	r2,r2,1
    2818:	45000015 	stw	r20,0(r8)
    281c:	44400115 	stw	r17,4(r8)
    2820:	d8c02015 	stw	r3,128(sp)
    2824:	d8801f15 	stw	r2,124(sp)
    2828:	b0bff60e 	bge	r22,r2,2804 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002804>
    282c:	d9801e04 	addi	r6,sp,120
    2830:	b80b883a 	mov	r5,r23
    2834:	9809883a 	mov	r4,r19
    2838:	00088e80 	call	88e8 <__sprint_r>
    283c:	103bad1e 	bne	r2,zero,16f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70016f4>
    2840:	d8c02017 	ldw	r3,128(sp)
    2844:	d8801f17 	ldw	r2,124(sp)
    2848:	da000404 	addi	r8,sp,16
    284c:	003fee06 	br	2808 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002808>
    2850:	9088703a 	and	r4,r18,r2
    2854:	203eab1e 	bne	r4,zero,2304 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002304>
    2858:	dc401f17 	ldw	r17,124(sp)
    285c:	40800115 	stw	r2,4(r8)
    2860:	44000015 	stw	r16,0(r8)
    2864:	8c400044 	addi	r17,r17,1
    2868:	d8c02015 	stw	r3,128(sp)
    286c:	dc401f15 	stw	r17,124(sp)
    2870:	008001c4 	movi	r2,7
    2874:	14400e16 	blt	r2,r17,28b0 <___vfprintf_internal_r+0x15c4>
    2878:	45800204 	addi	r22,r8,8
    287c:	003eca06 	br	23a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70023a8>
    2880:	01000074 	movhi	r4,1
    2884:	211c8b84 	addi	r4,r4,29230
    2888:	d9002b15 	stw	r4,172(sp)
    288c:	d8802b17 	ldw	r2,172(sp)
    2890:	1c07883a 	add	r3,r3,r16
    2894:	8c400044 	addi	r17,r17,1
    2898:	b0800015 	stw	r2,0(r22)
    289c:	b4000115 	stw	r16,4(r22)
    28a0:	d8c02015 	stw	r3,128(sp)
    28a4:	dc401f15 	stw	r17,124(sp)
    28a8:	008001c4 	movi	r2,7
    28ac:	147ebd0e 	bge	r2,r17,23a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70023a4>
    28b0:	d9002c17 	ldw	r4,176(sp)
    28b4:	d9801e04 	addi	r6,sp,120
    28b8:	b80b883a 	mov	r5,r23
    28bc:	00088e80 	call	88e8 <__sprint_r>
    28c0:	103b8c1e 	bne	r2,zero,16f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70016f4>
    28c4:	d8c02017 	ldw	r3,128(sp)
    28c8:	dc401f17 	ldw	r17,124(sp)
    28cc:	dd800404 	addi	r22,sp,16
    28d0:	003eb506 	br	23a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70023a8>
    28d4:	d9002c17 	ldw	r4,176(sp)
    28d8:	d9801e04 	addi	r6,sp,120
    28dc:	b80b883a 	mov	r5,r23
    28e0:	00088e80 	call	88e8 <__sprint_r>
    28e4:	103b831e 	bne	r2,zero,16f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70016f4>
    28e8:	d8c02017 	ldw	r3,128(sp)
    28ec:	dc401f17 	ldw	r17,124(sp)
    28f0:	da000404 	addi	r8,sp,16
    28f4:	003e8d06 	br	232c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700232c>
    28f8:	d9002c17 	ldw	r4,176(sp)
    28fc:	d9801e04 	addi	r6,sp,120
    2900:	b80b883a 	mov	r5,r23
    2904:	00088e80 	call	88e8 <__sprint_r>
    2908:	103b7a1e 	bne	r2,zero,16f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70016f4>
    290c:	d8c02017 	ldw	r3,128(sp)
    2910:	dc401f17 	ldw	r17,124(sp)
    2914:	dd800404 	addi	r22,sp,16
    2918:	003e8f06 	br	2358 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002358>
    291c:	0027883a 	mov	r19,zero
    2920:	003f4a06 	br	264c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700264c>
    2924:	d9002c17 	ldw	r4,176(sp)
    2928:	d9801e04 	addi	r6,sp,120
    292c:	b80b883a 	mov	r5,r23
    2930:	00088e80 	call	88e8 <__sprint_r>
    2934:	103b6f1e 	bne	r2,zero,16f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70016f4>
    2938:	d8c02017 	ldw	r3,128(sp)
    293c:	da000404 	addi	r8,sp,16
    2940:	003c9d06 	br	1bb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001bb8>
    2944:	04e7c83a 	sub	r19,zero,r19
    2948:	9804c03a 	cmpne	r2,r19,zero
    294c:	05adc83a 	sub	r22,zero,r22
    2950:	b0adc83a 	sub	r22,r22,r2
    2954:	d8802917 	ldw	r2,164(sp)
    2958:	07000b44 	movi	fp,45
    295c:	df002785 	stb	fp,158(sp)
    2960:	10017b16 	blt	r2,zero,2f50 <___vfprintf_internal_r+0x1c64>
    2964:	00bfdfc4 	movi	r2,-129
    2968:	90a4703a 	and	r18,r18,r2
    296c:	003bb106 	br	1834 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001834>
    2970:	d9003617 	ldw	r4,216(sp)
    2974:	d9403817 	ldw	r5,224(sp)
    2978:	da003d15 	stw	r8,244(sp)
    297c:	000850c0 	call	850c <__fpclassifyd>
    2980:	da003d17 	ldw	r8,244(sp)
    2984:	1000f026 	beq	r2,zero,2d48 <___vfprintf_internal_r+0x1a5c>
    2988:	d9002917 	ldw	r4,164(sp)
    298c:	05bff7c4 	movi	r22,-33
    2990:	00bfffc4 	movi	r2,-1
    2994:	8dac703a 	and	r22,r17,r22
    2998:	20820026 	beq	r4,r2,319c <___vfprintf_internal_r+0x1eb0>
    299c:	008011c4 	movi	r2,71
    29a0:	b081f726 	beq	r22,r2,3180 <___vfprintf_internal_r+0x1e94>
    29a4:	d9003817 	ldw	r4,224(sp)
    29a8:	90c04014 	ori	r3,r18,256
    29ac:	d8c02b15 	stw	r3,172(sp)
    29b0:	20021516 	blt	r4,zero,3208 <___vfprintf_internal_r+0x1f1c>
    29b4:	dcc03817 	ldw	r19,224(sp)
    29b8:	d8002a05 	stb	zero,168(sp)
    29bc:	00801984 	movi	r2,102
    29c0:	8881f926 	beq	r17,r2,31a8 <___vfprintf_internal_r+0x1ebc>
    29c4:	00801184 	movi	r2,70
    29c8:	88821c26 	beq	r17,r2,323c <___vfprintf_internal_r+0x1f50>
    29cc:	00801144 	movi	r2,69
    29d0:	b081ef26 	beq	r22,r2,3190 <___vfprintf_internal_r+0x1ea4>
    29d4:	d8c02917 	ldw	r3,164(sp)
    29d8:	d8802104 	addi	r2,sp,132
    29dc:	d8800315 	stw	r2,12(sp)
    29e0:	d9403617 	ldw	r5,216(sp)
    29e4:	d8802504 	addi	r2,sp,148
    29e8:	d9002c17 	ldw	r4,176(sp)
    29ec:	d8800215 	stw	r2,8(sp)
    29f0:	d8802604 	addi	r2,sp,152
    29f4:	d8c00015 	stw	r3,0(sp)
    29f8:	d8800115 	stw	r2,4(sp)
    29fc:	01c00084 	movi	r7,2
    2a00:	980d883a 	mov	r6,r19
    2a04:	d8c03c15 	stw	r3,240(sp)
    2a08:	da003d15 	stw	r8,244(sp)
    2a0c:	00039100 	call	3910 <_dtoa_r>
    2a10:	1021883a 	mov	r16,r2
    2a14:	008019c4 	movi	r2,103
    2a18:	d8c03c17 	ldw	r3,240(sp)
    2a1c:	da003d17 	ldw	r8,244(sp)
    2a20:	88817126 	beq	r17,r2,2fe8 <___vfprintf_internal_r+0x1cfc>
    2a24:	008011c4 	movi	r2,71
    2a28:	88829226 	beq	r17,r2,3474 <___vfprintf_internal_r+0x2188>
    2a2c:	80f9883a 	add	fp,r16,r3
    2a30:	d9003617 	ldw	r4,216(sp)
    2a34:	000d883a 	mov	r6,zero
    2a38:	000f883a 	mov	r7,zero
    2a3c:	980b883a 	mov	r5,r19
    2a40:	da003d15 	stw	r8,244(sp)
    2a44:	000c5600 	call	c560 <__eqdf2>
    2a48:	da003d17 	ldw	r8,244(sp)
    2a4c:	10018d26 	beq	r2,zero,3084 <___vfprintf_internal_r+0x1d98>
    2a50:	d8802117 	ldw	r2,132(sp)
    2a54:	1700062e 	bgeu	r2,fp,2a70 <___vfprintf_internal_r+0x1784>
    2a58:	01000c04 	movi	r4,48
    2a5c:	10c00044 	addi	r3,r2,1
    2a60:	d8c02115 	stw	r3,132(sp)
    2a64:	11000005 	stb	r4,0(r2)
    2a68:	d8802117 	ldw	r2,132(sp)
    2a6c:	173ffb36 	bltu	r2,fp,2a5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002a5c>
    2a70:	1405c83a 	sub	r2,r2,r16
    2a74:	d8803315 	stw	r2,204(sp)
    2a78:	008011c4 	movi	r2,71
    2a7c:	b0817626 	beq	r22,r2,3058 <___vfprintf_internal_r+0x1d6c>
    2a80:	00801944 	movi	r2,101
    2a84:	1442810e 	bge	r2,r17,348c <___vfprintf_internal_r+0x21a0>
    2a88:	d8c02617 	ldw	r3,152(sp)
    2a8c:	00801984 	movi	r2,102
    2a90:	d8c03215 	stw	r3,200(sp)
    2a94:	8881fe26 	beq	r17,r2,3290 <___vfprintf_internal_r+0x1fa4>
    2a98:	d8c03217 	ldw	r3,200(sp)
    2a9c:	d9003317 	ldw	r4,204(sp)
    2aa0:	1901dd16 	blt	r3,r4,3218 <___vfprintf_internal_r+0x1f2c>
    2aa4:	9480004c 	andi	r18,r18,1
    2aa8:	90022b1e 	bne	r18,zero,3358 <___vfprintf_internal_r+0x206c>
    2aac:	1805883a 	mov	r2,r3
    2ab0:	18028016 	blt	r3,zero,34b4 <___vfprintf_internal_r+0x21c8>
    2ab4:	d8c03217 	ldw	r3,200(sp)
    2ab8:	044019c4 	movi	r17,103
    2abc:	d8c02e15 	stw	r3,184(sp)
    2ac0:	df002a07 	ldb	fp,168(sp)
    2ac4:	e001531e 	bne	fp,zero,3014 <___vfprintf_internal_r+0x1d28>
    2ac8:	df002783 	ldbu	fp,158(sp)
    2acc:	d8802a15 	stw	r2,168(sp)
    2ad0:	dc802b17 	ldw	r18,172(sp)
    2ad4:	d8002915 	stw	zero,164(sp)
    2ad8:	003bd106 	br	1a20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001a20>
    2adc:	d8802d17 	ldw	r2,180(sp)
    2ae0:	d8c02d17 	ldw	r3,180(sp)
    2ae4:	d9002d17 	ldw	r4,180(sp)
    2ae8:	10800017 	ldw	r2,0(r2)
    2aec:	18c00117 	ldw	r3,4(r3)
    2af0:	21000204 	addi	r4,r4,8
    2af4:	d8803615 	stw	r2,216(sp)
    2af8:	d8c03815 	stw	r3,224(sp)
    2afc:	d9002d15 	stw	r4,180(sp)
    2b00:	003b7506 	br	18d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70018d8>
    2b04:	ac400007 	ldb	r17,0(r21)
    2b08:	003a5906 	br	1470 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001470>
    2b0c:	9080100c 	andi	r2,r18,64
    2b10:	1000a826 	beq	r2,zero,2db4 <___vfprintf_internal_r+0x1ac8>
    2b14:	d9002d17 	ldw	r4,180(sp)
    2b18:	002d883a 	mov	r22,zero
    2b1c:	24c0000b 	ldhu	r19,0(r4)
    2b20:	21000104 	addi	r4,r4,4
    2b24:	d9002d15 	stw	r4,180(sp)
    2b28:	003ccb06 	br	1e58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001e58>
    2b2c:	d8c02d17 	ldw	r3,180(sp)
    2b30:	d9002917 	ldw	r4,164(sp)
    2b34:	002d883a 	mov	r22,zero
    2b38:	18800104 	addi	r2,r3,4
    2b3c:	1cc00017 	ldw	r19,0(r3)
    2b40:	203ebb0e 	bge	r4,zero,2630 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002630>
    2b44:	003ef106 	br	270c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700270c>
    2b48:	9080040c 	andi	r2,r18,16
    2b4c:	1000921e 	bne	r2,zero,2d98 <___vfprintf_internal_r+0x1aac>
    2b50:	9480100c 	andi	r18,r18,64
    2b54:	90013926 	beq	r18,zero,303c <___vfprintf_internal_r+0x1d50>
    2b58:	d9002d17 	ldw	r4,180(sp)
    2b5c:	d9402f17 	ldw	r5,188(sp)
    2b60:	20800017 	ldw	r2,0(r4)
    2b64:	21000104 	addi	r4,r4,4
    2b68:	d9002d15 	stw	r4,180(sp)
    2b6c:	1140000d 	sth	r5,0(r2)
    2b70:	003a1606 	br	13cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70013cc>
    2b74:	9080100c 	andi	r2,r18,64
    2b78:	10008026 	beq	r2,zero,2d7c <___vfprintf_internal_r+0x1a90>
    2b7c:	d8c02d17 	ldw	r3,180(sp)
    2b80:	1cc0000f 	ldh	r19,0(r3)
    2b84:	18c00104 	addi	r3,r3,4
    2b88:	d8c02d15 	stw	r3,180(sp)
    2b8c:	982dd7fa 	srai	r22,r19,31
    2b90:	b005883a 	mov	r2,r22
    2b94:	003b1f06 	br	1814 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001814>
    2b98:	9080100c 	andi	r2,r18,64
    2b9c:	d8002785 	stb	zero,158(sp)
    2ba0:	10008a1e 	bne	r2,zero,2dcc <___vfprintf_internal_r+0x1ae0>
    2ba4:	d9402d17 	ldw	r5,180(sp)
    2ba8:	d8c02917 	ldw	r3,164(sp)
    2bac:	002d883a 	mov	r22,zero
    2bb0:	28800104 	addi	r2,r5,4
    2bb4:	2cc00017 	ldw	r19,0(r5)
    2bb8:	183e4b0e 	bge	r3,zero,24e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70024e8>
    2bbc:	9d86b03a 	or	r3,r19,r22
    2bc0:	d8802d15 	stw	r2,180(sp)
    2bc4:	183e4c1e 	bne	r3,zero,24f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70024f8>
    2bc8:	0039883a 	mov	fp,zero
    2bcc:	0005883a 	mov	r2,zero
    2bd0:	003d4006 	br	20d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70020d4>
    2bd4:	01400074 	movhi	r5,1
    2bd8:	295c8b84 	addi	r5,r5,29230
    2bdc:	d9402b15 	stw	r5,172(sp)
    2be0:	d9402b17 	ldw	r5,172(sp)
    2be4:	1c47883a 	add	r3,r3,r17
    2be8:	10800044 	addi	r2,r2,1
    2bec:	41400015 	stw	r5,0(r8)
    2bf0:	44400115 	stw	r17,4(r8)
    2bf4:	d8c02015 	stw	r3,128(sp)
    2bf8:	d8801f15 	stw	r2,124(sp)
    2bfc:	010001c4 	movi	r4,7
    2c00:	20bec816 	blt	r4,r2,2724 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002724>
    2c04:	42000204 	addi	r8,r8,8
    2c08:	003ecd06 	br	2740 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002740>
    2c0c:	d9002917 	ldw	r4,164(sp)
    2c10:	d8002785 	stb	zero,158(sp)
    2c14:	203d2d16 	blt	r4,zero,20cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70020cc>
    2c18:	00bfdfc4 	movi	r2,-129
    2c1c:	90a4703a 	and	r18,r18,r2
    2c20:	003a9106 	br	1668 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001668>
    2c24:	01000074 	movhi	r4,1
    2c28:	211c8b84 	addi	r4,r4,29230
    2c2c:	d9002b15 	stw	r4,172(sp)
    2c30:	003c0c06 	br	1c64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001c64>
    2c34:	d9002c17 	ldw	r4,176(sp)
    2c38:	d9801e04 	addi	r6,sp,120
    2c3c:	b80b883a 	mov	r5,r23
    2c40:	00088e80 	call	88e8 <__sprint_r>
    2c44:	103aab1e 	bne	r2,zero,16f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70016f4>
    2c48:	d8c02017 	ldw	r3,128(sp)
    2c4c:	da000404 	addi	r8,sp,16
    2c50:	003d4106 	br	2158 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002158>
    2c54:	d8801f17 	ldw	r2,124(sp)
    2c58:	01400074 	movhi	r5,1
    2c5c:	01000044 	movi	r4,1
    2c60:	18c00044 	addi	r3,r3,1
    2c64:	10800044 	addi	r2,r2,1
    2c68:	295c8b04 	addi	r5,r5,29228
    2c6c:	41000115 	stw	r4,4(r8)
    2c70:	41400015 	stw	r5,0(r8)
    2c74:	d8c02015 	stw	r3,128(sp)
    2c78:	d8801f15 	stw	r2,124(sp)
    2c7c:	010001c4 	movi	r4,7
    2c80:	20805c16 	blt	r4,r2,2df4 <___vfprintf_internal_r+0x1b08>
    2c84:	42000204 	addi	r8,r8,8
    2c88:	8800041e 	bne	r17,zero,2c9c <___vfprintf_internal_r+0x19b0>
    2c8c:	d8803317 	ldw	r2,204(sp)
    2c90:	1000021e 	bne	r2,zero,2c9c <___vfprintf_internal_r+0x19b0>
    2c94:	9080004c 	andi	r2,r18,1
    2c98:	103c0926 	beq	r2,zero,1cc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001cc0>
    2c9c:	d9003717 	ldw	r4,220(sp)
    2ca0:	d8801f17 	ldw	r2,124(sp)
    2ca4:	d9403417 	ldw	r5,208(sp)
    2ca8:	20c7883a 	add	r3,r4,r3
    2cac:	10800044 	addi	r2,r2,1
    2cb0:	41000115 	stw	r4,4(r8)
    2cb4:	41400015 	stw	r5,0(r8)
    2cb8:	d8c02015 	stw	r3,128(sp)
    2cbc:	d8801f15 	stw	r2,124(sp)
    2cc0:	010001c4 	movi	r4,7
    2cc4:	20812116 	blt	r4,r2,314c <___vfprintf_internal_r+0x1e60>
    2cc8:	42000204 	addi	r8,r8,8
    2ccc:	0463c83a 	sub	r17,zero,r17
    2cd0:	0440730e 	bge	zero,r17,2ea0 <___vfprintf_internal_r+0x1bb4>
    2cd4:	05800404 	movi	r22,16
    2cd8:	b440860e 	bge	r22,r17,2ef4 <___vfprintf_internal_r+0x1c08>
    2cdc:	01400074 	movhi	r5,1
    2ce0:	295c8b84 	addi	r5,r5,29230
    2ce4:	d9402b15 	stw	r5,172(sp)
    2ce8:	070001c4 	movi	fp,7
    2cec:	dcc02c17 	ldw	r19,176(sp)
    2cf0:	00000306 	br	2d00 <___vfprintf_internal_r+0x1a14>
    2cf4:	42000204 	addi	r8,r8,8
    2cf8:	8c7ffc04 	addi	r17,r17,-16
    2cfc:	b440800e 	bge	r22,r17,2f00 <___vfprintf_internal_r+0x1c14>
    2d00:	18c00404 	addi	r3,r3,16
    2d04:	10800044 	addi	r2,r2,1
    2d08:	45000015 	stw	r20,0(r8)
    2d0c:	45800115 	stw	r22,4(r8)
    2d10:	d8c02015 	stw	r3,128(sp)
    2d14:	d8801f15 	stw	r2,124(sp)
    2d18:	e0bff60e 	bge	fp,r2,2cf4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cf4>
    2d1c:	d9801e04 	addi	r6,sp,120
    2d20:	b80b883a 	mov	r5,r23
    2d24:	9809883a 	mov	r4,r19
    2d28:	00088e80 	call	88e8 <__sprint_r>
    2d2c:	103a711e 	bne	r2,zero,16f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70016f4>
    2d30:	d8c02017 	ldw	r3,128(sp)
    2d34:	d8801f17 	ldw	r2,124(sp)
    2d38:	da000404 	addi	r8,sp,16
    2d3c:	003fee06 	br	2cf8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cf8>
    2d40:	00bfffc4 	movi	r2,-1
    2d44:	003a6f06 	br	1704 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001704>
    2d48:	008011c4 	movi	r2,71
    2d4c:	1440b816 	blt	r2,r17,3030 <___vfprintf_internal_r+0x1d44>
    2d50:	04000074 	movhi	r16,1
    2d54:	841c7d04 	addi	r16,r16,29172
    2d58:	00c000c4 	movi	r3,3
    2d5c:	00bfdfc4 	movi	r2,-129
    2d60:	d8c02a15 	stw	r3,168(sp)
    2d64:	90a4703a 	and	r18,r18,r2
    2d68:	df002783 	ldbu	fp,158(sp)
    2d6c:	d8c02e15 	stw	r3,184(sp)
    2d70:	d8002915 	stw	zero,164(sp)
    2d74:	d8003215 	stw	zero,200(sp)
    2d78:	003b2906 	br	1a20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001a20>
    2d7c:	d9002d17 	ldw	r4,180(sp)
    2d80:	24c00017 	ldw	r19,0(r4)
    2d84:	21000104 	addi	r4,r4,4
    2d88:	d9002d15 	stw	r4,180(sp)
    2d8c:	982dd7fa 	srai	r22,r19,31
    2d90:	b005883a 	mov	r2,r22
    2d94:	003a9f06 	br	1814 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001814>
    2d98:	d9402d17 	ldw	r5,180(sp)
    2d9c:	d8c02f17 	ldw	r3,188(sp)
    2da0:	28800017 	ldw	r2,0(r5)
    2da4:	29400104 	addi	r5,r5,4
    2da8:	d9402d15 	stw	r5,180(sp)
    2dac:	10c00015 	stw	r3,0(r2)
    2db0:	00398606 	br	13cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70013cc>
    2db4:	d9402d17 	ldw	r5,180(sp)
    2db8:	002d883a 	mov	r22,zero
    2dbc:	2cc00017 	ldw	r19,0(r5)
    2dc0:	29400104 	addi	r5,r5,4
    2dc4:	d9402d15 	stw	r5,180(sp)
    2dc8:	003c2306 	br	1e58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001e58>
    2dcc:	d8c02d17 	ldw	r3,180(sp)
    2dd0:	d9002917 	ldw	r4,164(sp)
    2dd4:	002d883a 	mov	r22,zero
    2dd8:	18800104 	addi	r2,r3,4
    2ddc:	1cc0000b 	ldhu	r19,0(r3)
    2de0:	203dc10e 	bge	r4,zero,24e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70024e8>
    2de4:	003f7506 	br	2bbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002bbc>
    2de8:	04000074 	movhi	r16,1
    2dec:	841c7b04 	addi	r16,r16,29164
    2df0:	003acc06 	br	1924 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001924>
    2df4:	d9002c17 	ldw	r4,176(sp)
    2df8:	d9801e04 	addi	r6,sp,120
    2dfc:	b80b883a 	mov	r5,r23
    2e00:	00088e80 	call	88e8 <__sprint_r>
    2e04:	103a3b1e 	bne	r2,zero,16f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70016f4>
    2e08:	dc402617 	ldw	r17,152(sp)
    2e0c:	d8c02017 	ldw	r3,128(sp)
    2e10:	da000404 	addi	r8,sp,16
    2e14:	003f9c06 	br	2c88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002c88>
    2e18:	ac400043 	ldbu	r17,1(r21)
    2e1c:	94800814 	ori	r18,r18,32
    2e20:	ad400044 	addi	r21,r21,1
    2e24:	8c403fcc 	andi	r17,r17,255
    2e28:	8c40201c 	xori	r17,r17,128
    2e2c:	8c7fe004 	addi	r17,r17,-128
    2e30:	00398f06 	br	1470 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001470>
    2e34:	d8c02d15 	stw	r3,180(sp)
    2e38:	0039883a 	mov	fp,zero
    2e3c:	003e3506 	br	2714 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002714>
    2e40:	d9002c17 	ldw	r4,176(sp)
    2e44:	d9801e04 	addi	r6,sp,120
    2e48:	b80b883a 	mov	r5,r23
    2e4c:	00088e80 	call	88e8 <__sprint_r>
    2e50:	103a281e 	bne	r2,zero,16f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70016f4>
    2e54:	d8c02017 	ldw	r3,128(sp)
    2e58:	da000404 	addi	r8,sp,16
    2e5c:	003cd006 	br	21a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70021a0>
    2e60:	8009883a 	mov	r4,r16
    2e64:	da003d15 	stw	r8,244(sp)
    2e68:	00012540 	call	1254 <strlen>
    2e6c:	d8802e15 	stw	r2,184(sp)
    2e70:	da003d17 	ldw	r8,244(sp)
    2e74:	103c340e 	bge	r2,zero,1f48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001f48>
    2e78:	0005883a 	mov	r2,zero
    2e7c:	003c3206 	br	1f48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001f48>
    2e80:	d9002c17 	ldw	r4,176(sp)
    2e84:	d9801e04 	addi	r6,sp,120
    2e88:	b80b883a 	mov	r5,r23
    2e8c:	00088e80 	call	88e8 <__sprint_r>
    2e90:	103a181e 	bne	r2,zero,16f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70016f4>
    2e94:	d8c02017 	ldw	r3,128(sp)
    2e98:	d8801f17 	ldw	r2,124(sp)
    2e9c:	da000404 	addi	r8,sp,16
    2ea0:	d9403317 	ldw	r5,204(sp)
    2ea4:	10800044 	addi	r2,r2,1
    2ea8:	44000015 	stw	r16,0(r8)
    2eac:	28c7883a 	add	r3,r5,r3
    2eb0:	003b7d06 	br	1ca8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001ca8>
    2eb4:	01000074 	movhi	r4,1
    2eb8:	211c8f84 	addi	r4,r4,29246
    2ebc:	d9003515 	stw	r4,212(sp)
    2ec0:	003b1406 	br	1b14 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001b14>
    2ec4:	013fffc4 	movi	r4,-1
    2ec8:	003a3506 	br	17a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70017a0>
    2ecc:	0023883a 	mov	r17,zero
    2ed0:	003d9d06 	br	2548 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002548>
    2ed4:	d9002c17 	ldw	r4,176(sp)
    2ed8:	d9801e04 	addi	r6,sp,120
    2edc:	b80b883a 	mov	r5,r23
    2ee0:	00088e80 	call	88e8 <__sprint_r>
    2ee4:	103a031e 	bne	r2,zero,16f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70016f4>
    2ee8:	d8c02017 	ldw	r3,128(sp)
    2eec:	da000404 	addi	r8,sp,16
    2ef0:	003d9406 	br	2544 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002544>
    2ef4:	01000074 	movhi	r4,1
    2ef8:	211c8b84 	addi	r4,r4,29230
    2efc:	d9002b15 	stw	r4,172(sp)
    2f00:	d9002b17 	ldw	r4,172(sp)
    2f04:	1c47883a 	add	r3,r3,r17
    2f08:	10800044 	addi	r2,r2,1
    2f0c:	41000015 	stw	r4,0(r8)
    2f10:	44400115 	stw	r17,4(r8)
    2f14:	d8c02015 	stw	r3,128(sp)
    2f18:	d8801f15 	stw	r2,124(sp)
    2f1c:	010001c4 	movi	r4,7
    2f20:	20bfd716 	blt	r4,r2,2e80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002e80>
    2f24:	42000204 	addi	r8,r8,8
    2f28:	003fdd06 	br	2ea0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002ea0>
    2f2c:	d9002c17 	ldw	r4,176(sp)
    2f30:	d9801e04 	addi	r6,sp,120
    2f34:	b80b883a 	mov	r5,r23
    2f38:	00088e80 	call	88e8 <__sprint_r>
    2f3c:	1039ed1e 	bne	r2,zero,16f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70016f4>
    2f40:	d8802617 	ldw	r2,152(sp)
    2f44:	d8c02017 	ldw	r3,128(sp)
    2f48:	da000404 	addi	r8,sp,16
    2f4c:	003e1006 	br	2790 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002790>
    2f50:	00800044 	movi	r2,1
    2f54:	10803fcc 	andi	r2,r2,255
    2f58:	00c00044 	movi	r3,1
    2f5c:	10fa3526 	beq	r2,r3,1834 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001834>
    2f60:	00c00084 	movi	r3,2
    2f64:	10fbcb26 	beq	r2,r3,1e94 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001e94>
    2f68:	003a8f06 	br	19a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70019a8>
    2f6c:	01000074 	movhi	r4,1
    2f70:	211c8f84 	addi	r4,r4,29246
    2f74:	d9003515 	stw	r4,212(sp)
    2f78:	003b7606 	br	1d54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001d54>
    2f7c:	d8802917 	ldw	r2,164(sp)
    2f80:	00c00184 	movi	r3,6
    2f84:	1880012e 	bgeu	r3,r2,2f8c <___vfprintf_internal_r+0x1ca0>
    2f88:	1805883a 	mov	r2,r3
    2f8c:	d8802e15 	stw	r2,184(sp)
    2f90:	1000ef16 	blt	r2,zero,3350 <___vfprintf_internal_r+0x2064>
    2f94:	04000074 	movhi	r16,1
    2f98:	d8802a15 	stw	r2,168(sp)
    2f9c:	dcc02d15 	stw	r19,180(sp)
    2fa0:	d8002915 	stw	zero,164(sp)
    2fa4:	d8003215 	stw	zero,200(sp)
    2fa8:	841c8904 	addi	r16,r16,29220
    2fac:	0039883a 	mov	fp,zero
    2fb0:	003aa206 	br	1a3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001a3c>
    2fb4:	0021883a 	mov	r16,zero
    2fb8:	003e0706 	br	27d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70027d8>
    2fbc:	d9002c17 	ldw	r4,176(sp)
    2fc0:	d9801e04 	addi	r6,sp,120
    2fc4:	b80b883a 	mov	r5,r23
    2fc8:	00088e80 	call	88e8 <__sprint_r>
    2fcc:	1039c91e 	bne	r2,zero,16f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70016f4>
    2fd0:	d8802617 	ldw	r2,152(sp)
    2fd4:	d9403317 	ldw	r5,204(sp)
    2fd8:	d8c02017 	ldw	r3,128(sp)
    2fdc:	da000404 	addi	r8,sp,16
    2fe0:	2885c83a 	sub	r2,r5,r2
    2fe4:	003dfb06 	br	27d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70027d4>
    2fe8:	9080004c 	andi	r2,r18,1
    2fec:	103e8f1e 	bne	r2,zero,2a2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002a2c>
    2ff0:	d8802117 	ldw	r2,132(sp)
    2ff4:	003e9e06 	br	2a70 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002a70>
    2ff8:	1025883a 	mov	r18,r2
    2ffc:	0039883a 	mov	fp,zero
    3000:	00800084 	movi	r2,2
    3004:	003fd306 	br	2f54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002f54>
    3008:	07000b44 	movi	fp,45
    300c:	df002785 	stb	fp,158(sp)
    3010:	003a4006 	br	1914 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001914>
    3014:	00c00b44 	movi	r3,45
    3018:	d8c02785 	stb	r3,158(sp)
    301c:	d8802a15 	stw	r2,168(sp)
    3020:	dc802b17 	ldw	r18,172(sp)
    3024:	d8002915 	stw	zero,164(sp)
    3028:	07000b44 	movi	fp,45
    302c:	003a8006 	br	1a30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001a30>
    3030:	04000074 	movhi	r16,1
    3034:	841c7e04 	addi	r16,r16,29176
    3038:	003f4706 	br	2d58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002d58>
    303c:	d8c02d17 	ldw	r3,180(sp)
    3040:	d9002f17 	ldw	r4,188(sp)
    3044:	18800017 	ldw	r2,0(r3)
    3048:	18c00104 	addi	r3,r3,4
    304c:	d8c02d15 	stw	r3,180(sp)
    3050:	11000015 	stw	r4,0(r2)
    3054:	0038dd06 	br	13cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70013cc>
    3058:	dd802617 	ldw	r22,152(sp)
    305c:	00bfff44 	movi	r2,-3
    3060:	b0801c16 	blt	r22,r2,30d4 <___vfprintf_internal_r+0x1de8>
    3064:	d9402917 	ldw	r5,164(sp)
    3068:	2d801a16 	blt	r5,r22,30d4 <___vfprintf_internal_r+0x1de8>
    306c:	dd803215 	stw	r22,200(sp)
    3070:	003e8906 	br	2a98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002a98>
    3074:	01000074 	movhi	r4,1
    3078:	211c8b84 	addi	r4,r4,29230
    307c:	d9002b15 	stw	r4,172(sp)
    3080:	003c9106 	br	22c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70022c8>
    3084:	e005883a 	mov	r2,fp
    3088:	003e7906 	br	2a70 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002a70>
    308c:	d9402917 	ldw	r5,164(sp)
    3090:	df002783 	ldbu	fp,158(sp)
    3094:	dcc02d15 	stw	r19,180(sp)
    3098:	d9402a15 	stw	r5,168(sp)
    309c:	d9402e15 	stw	r5,184(sp)
    30a0:	d8002915 	stw	zero,164(sp)
    30a4:	d8003215 	stw	zero,200(sp)
    30a8:	003a5d06 	br	1a20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001a20>
    30ac:	9080004c 	andi	r2,r18,1
    30b0:	0039883a 	mov	fp,zero
    30b4:	10000426 	beq	r2,zero,30c8 <___vfprintf_internal_r+0x1ddc>
    30b8:	00800c04 	movi	r2,48
    30bc:	dc001dc4 	addi	r16,sp,119
    30c0:	d8801dc5 	stb	r2,119(sp)
    30c4:	003b8006 	br	1ec8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001ec8>
    30c8:	d8002e15 	stw	zero,184(sp)
    30cc:	dc001e04 	addi	r16,sp,120
    30d0:	003a4d06 	br	1a08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001a08>
    30d4:	8c7fff84 	addi	r17,r17,-2
    30d8:	b5bfffc4 	addi	r22,r22,-1
    30dc:	dd802615 	stw	r22,152(sp)
    30e0:	dc4022c5 	stb	r17,139(sp)
    30e4:	b000bf16 	blt	r22,zero,33e4 <___vfprintf_internal_r+0x20f8>
    30e8:	00800ac4 	movi	r2,43
    30ec:	d8802305 	stb	r2,140(sp)
    30f0:	00800244 	movi	r2,9
    30f4:	15807016 	blt	r2,r22,32b8 <___vfprintf_internal_r+0x1fcc>
    30f8:	00800c04 	movi	r2,48
    30fc:	b5800c04 	addi	r22,r22,48
    3100:	d8802345 	stb	r2,141(sp)
    3104:	dd802385 	stb	r22,142(sp)
    3108:	d88023c4 	addi	r2,sp,143
    310c:	df0022c4 	addi	fp,sp,139
    3110:	d8c03317 	ldw	r3,204(sp)
    3114:	1739c83a 	sub	fp,r2,fp
    3118:	d9003317 	ldw	r4,204(sp)
    311c:	e0c7883a 	add	r3,fp,r3
    3120:	df003a15 	stw	fp,232(sp)
    3124:	d8c02e15 	stw	r3,184(sp)
    3128:	00800044 	movi	r2,1
    312c:	1100b30e 	bge	r2,r4,33fc <___vfprintf_internal_r+0x2110>
    3130:	d8c02e17 	ldw	r3,184(sp)
    3134:	18c00044 	addi	r3,r3,1
    3138:	d8c02e15 	stw	r3,184(sp)
    313c:	1805883a 	mov	r2,r3
    3140:	1800ac16 	blt	r3,zero,33f4 <___vfprintf_internal_r+0x2108>
    3144:	d8003215 	stw	zero,200(sp)
    3148:	003e5d06 	br	2ac0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002ac0>
    314c:	d9002c17 	ldw	r4,176(sp)
    3150:	d9801e04 	addi	r6,sp,120
    3154:	b80b883a 	mov	r5,r23
    3158:	00088e80 	call	88e8 <__sprint_r>
    315c:	1039651e 	bne	r2,zero,16f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70016f4>
    3160:	dc402617 	ldw	r17,152(sp)
    3164:	d8c02017 	ldw	r3,128(sp)
    3168:	d8801f17 	ldw	r2,124(sp)
    316c:	da000404 	addi	r8,sp,16
    3170:	003ed606 	br	2ccc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002ccc>
    3174:	582b883a 	mov	r21,r11
    3178:	d8002915 	stw	zero,164(sp)
    317c:	0038bd06 	br	1474 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001474>
    3180:	d8802917 	ldw	r2,164(sp)
    3184:	103e071e 	bne	r2,zero,29a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70029a4>
    3188:	dc002915 	stw	r16,164(sp)
    318c:	003e0506 	br	29a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70029a4>
    3190:	d9002917 	ldw	r4,164(sp)
    3194:	20c00044 	addi	r3,r4,1
    3198:	003e0f06 	br	29d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70029d8>
    319c:	01400184 	movi	r5,6
    31a0:	d9402915 	stw	r5,164(sp)
    31a4:	003dff06 	br	29a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70029a4>
    31a8:	d8802104 	addi	r2,sp,132
    31ac:	d8800315 	stw	r2,12(sp)
    31b0:	d8802504 	addi	r2,sp,148
    31b4:	d8800215 	stw	r2,8(sp)
    31b8:	d8802604 	addi	r2,sp,152
    31bc:	d8800115 	stw	r2,4(sp)
    31c0:	d8802917 	ldw	r2,164(sp)
    31c4:	d9403617 	ldw	r5,216(sp)
    31c8:	d9002c17 	ldw	r4,176(sp)
    31cc:	d8800015 	stw	r2,0(sp)
    31d0:	01c000c4 	movi	r7,3
    31d4:	980d883a 	mov	r6,r19
    31d8:	da003d15 	stw	r8,244(sp)
    31dc:	00039100 	call	3910 <_dtoa_r>
    31e0:	d8c02917 	ldw	r3,164(sp)
    31e4:	da003d17 	ldw	r8,244(sp)
    31e8:	1021883a 	mov	r16,r2
    31ec:	10f9883a 	add	fp,r2,r3
    31f0:	81000007 	ldb	r4,0(r16)
    31f4:	00800c04 	movi	r2,48
    31f8:	20805e26 	beq	r4,r2,3374 <___vfprintf_internal_r+0x2088>
    31fc:	d8c02617 	ldw	r3,152(sp)
    3200:	e0f9883a 	add	fp,fp,r3
    3204:	003e0a06 	br	2a30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002a30>
    3208:	00c00b44 	movi	r3,45
    320c:	24e0003c 	xorhi	r19,r4,32768
    3210:	d8c02a05 	stb	r3,168(sp)
    3214:	003de906 	br	29bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70029bc>
    3218:	d8c03217 	ldw	r3,200(sp)
    321c:	00c07a0e 	bge	zero,r3,3408 <___vfprintf_internal_r+0x211c>
    3220:	00800044 	movi	r2,1
    3224:	d9003317 	ldw	r4,204(sp)
    3228:	1105883a 	add	r2,r2,r4
    322c:	d8802e15 	stw	r2,184(sp)
    3230:	10004e16 	blt	r2,zero,336c <___vfprintf_internal_r+0x2080>
    3234:	044019c4 	movi	r17,103
    3238:	003e2106 	br	2ac0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002ac0>
    323c:	d9002917 	ldw	r4,164(sp)
    3240:	d8802104 	addi	r2,sp,132
    3244:	d8800315 	stw	r2,12(sp)
    3248:	d9000015 	stw	r4,0(sp)
    324c:	d8802504 	addi	r2,sp,148
    3250:	d9403617 	ldw	r5,216(sp)
    3254:	d9002c17 	ldw	r4,176(sp)
    3258:	d8800215 	stw	r2,8(sp)
    325c:	d8802604 	addi	r2,sp,152
    3260:	d8800115 	stw	r2,4(sp)
    3264:	01c000c4 	movi	r7,3
    3268:	980d883a 	mov	r6,r19
    326c:	da003d15 	stw	r8,244(sp)
    3270:	00039100 	call	3910 <_dtoa_r>
    3274:	d8c02917 	ldw	r3,164(sp)
    3278:	da003d17 	ldw	r8,244(sp)
    327c:	1021883a 	mov	r16,r2
    3280:	00801184 	movi	r2,70
    3284:	80f9883a 	add	fp,r16,r3
    3288:	88bfd926 	beq	r17,r2,31f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70031f0>
    328c:	003de806 	br	2a30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002a30>
    3290:	d9002917 	ldw	r4,164(sp)
    3294:	00c04d0e 	bge	zero,r3,33cc <___vfprintf_internal_r+0x20e0>
    3298:	2000441e 	bne	r4,zero,33ac <___vfprintf_internal_r+0x20c0>
    329c:	9480004c 	andi	r18,r18,1
    32a0:	9000421e 	bne	r18,zero,33ac <___vfprintf_internal_r+0x20c0>
    32a4:	1805883a 	mov	r2,r3
    32a8:	18007016 	blt	r3,zero,346c <___vfprintf_internal_r+0x2180>
    32ac:	d8c03217 	ldw	r3,200(sp)
    32b0:	d8c02e15 	stw	r3,184(sp)
    32b4:	003e0206 	br	2ac0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002ac0>
    32b8:	df0022c4 	addi	fp,sp,139
    32bc:	dc002915 	stw	r16,164(sp)
    32c0:	4027883a 	mov	r19,r8
    32c4:	e021883a 	mov	r16,fp
    32c8:	b009883a 	mov	r4,r22
    32cc:	01400284 	movi	r5,10
    32d0:	000b29c0 	call	b29c <__modsi3>
    32d4:	10800c04 	addi	r2,r2,48
    32d8:	843fffc4 	addi	r16,r16,-1
    32dc:	b009883a 	mov	r4,r22
    32e0:	01400284 	movi	r5,10
    32e4:	80800005 	stb	r2,0(r16)
    32e8:	000b2180 	call	b218 <__divsi3>
    32ec:	102d883a 	mov	r22,r2
    32f0:	00800244 	movi	r2,9
    32f4:	15bff416 	blt	r2,r22,32c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70032c8>
    32f8:	9811883a 	mov	r8,r19
    32fc:	b0800c04 	addi	r2,r22,48
    3300:	8027883a 	mov	r19,r16
    3304:	997fffc4 	addi	r5,r19,-1
    3308:	98bfffc5 	stb	r2,-1(r19)
    330c:	dc002917 	ldw	r16,164(sp)
    3310:	2f006a2e 	bgeu	r5,fp,34bc <___vfprintf_internal_r+0x21d0>
    3314:	d9c02384 	addi	r7,sp,142
    3318:	3ccfc83a 	sub	r7,r7,r19
    331c:	d9002344 	addi	r4,sp,141
    3320:	e1cf883a 	add	r7,fp,r7
    3324:	00000106 	br	332c <___vfprintf_internal_r+0x2040>
    3328:	28800003 	ldbu	r2,0(r5)
    332c:	20800005 	stb	r2,0(r4)
    3330:	21000044 	addi	r4,r4,1
    3334:	29400044 	addi	r5,r5,1
    3338:	393ffb1e 	bne	r7,r4,3328 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003328>
    333c:	d8802304 	addi	r2,sp,140
    3340:	14c5c83a 	sub	r2,r2,r19
    3344:	d8c02344 	addi	r3,sp,141
    3348:	1885883a 	add	r2,r3,r2
    334c:	003f7006 	br	3110 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003110>
    3350:	0005883a 	mov	r2,zero
    3354:	003f0f06 	br	2f94 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002f94>
    3358:	d8c03217 	ldw	r3,200(sp)
    335c:	18c00044 	addi	r3,r3,1
    3360:	d8c02e15 	stw	r3,184(sp)
    3364:	1805883a 	mov	r2,r3
    3368:	183fb20e 	bge	r3,zero,3234 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003234>
    336c:	0005883a 	mov	r2,zero
    3370:	003fb006 	br	3234 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003234>
    3374:	d9003617 	ldw	r4,216(sp)
    3378:	000d883a 	mov	r6,zero
    337c:	000f883a 	mov	r7,zero
    3380:	980b883a 	mov	r5,r19
    3384:	d8c03c15 	stw	r3,240(sp)
    3388:	da003d15 	stw	r8,244(sp)
    338c:	000c5600 	call	c560 <__eqdf2>
    3390:	d8c03c17 	ldw	r3,240(sp)
    3394:	da003d17 	ldw	r8,244(sp)
    3398:	103f9826 	beq	r2,zero,31fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70031fc>
    339c:	00800044 	movi	r2,1
    33a0:	10c7c83a 	sub	r3,r2,r3
    33a4:	d8c02615 	stw	r3,152(sp)
    33a8:	003f9506 	br	3200 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003200>
    33ac:	d9002917 	ldw	r4,164(sp)
    33b0:	d8c03217 	ldw	r3,200(sp)
    33b4:	20800044 	addi	r2,r4,1
    33b8:	1885883a 	add	r2,r3,r2
    33bc:	d8802e15 	stw	r2,184(sp)
    33c0:	103dbf0e 	bge	r2,zero,2ac0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002ac0>
    33c4:	0005883a 	mov	r2,zero
    33c8:	003dbd06 	br	2ac0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002ac0>
    33cc:	2000211e 	bne	r4,zero,3454 <___vfprintf_internal_r+0x2168>
    33d0:	9480004c 	andi	r18,r18,1
    33d4:	90001f1e 	bne	r18,zero,3454 <___vfprintf_internal_r+0x2168>
    33d8:	00800044 	movi	r2,1
    33dc:	d8802e15 	stw	r2,184(sp)
    33e0:	003db706 	br	2ac0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002ac0>
    33e4:	00800b44 	movi	r2,45
    33e8:	05adc83a 	sub	r22,zero,r22
    33ec:	d8802305 	stb	r2,140(sp)
    33f0:	003f3f06 	br	30f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70030f0>
    33f4:	0005883a 	mov	r2,zero
    33f8:	003f5206 	br	3144 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003144>
    33fc:	90a4703a 	and	r18,r18,r2
    3400:	903f4e26 	beq	r18,zero,313c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700313c>
    3404:	003f4a06 	br	3130 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003130>
    3408:	00800084 	movi	r2,2
    340c:	10c5c83a 	sub	r2,r2,r3
    3410:	003f8406 	br	3224 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003224>
    3414:	d8802d17 	ldw	r2,180(sp)
    3418:	d9002d17 	ldw	r4,180(sp)
    341c:	ac400043 	ldbu	r17,1(r21)
    3420:	10800017 	ldw	r2,0(r2)
    3424:	582b883a 	mov	r21,r11
    3428:	d8802915 	stw	r2,164(sp)
    342c:	20800104 	addi	r2,r4,4
    3430:	d9002917 	ldw	r4,164(sp)
    3434:	d8802d15 	stw	r2,180(sp)
    3438:	203e7a0e 	bge	r4,zero,2e24 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002e24>
    343c:	8c403fcc 	andi	r17,r17,255
    3440:	00bfffc4 	movi	r2,-1
    3444:	8c40201c 	xori	r17,r17,128
    3448:	d8802915 	stw	r2,164(sp)
    344c:	8c7fe004 	addi	r17,r17,-128
    3450:	00380706 	br	1470 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001470>
    3454:	d8c02917 	ldw	r3,164(sp)
    3458:	18c00084 	addi	r3,r3,2
    345c:	d8c02e15 	stw	r3,184(sp)
    3460:	1805883a 	mov	r2,r3
    3464:	183d960e 	bge	r3,zero,2ac0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002ac0>
    3468:	003fd606 	br	33c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70033c4>
    346c:	0005883a 	mov	r2,zero
    3470:	003f8e06 	br	32ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70032ac>
    3474:	9080004c 	andi	r2,r18,1
    3478:	103f811e 	bne	r2,zero,3280 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003280>
    347c:	d8802117 	ldw	r2,132(sp)
    3480:	1405c83a 	sub	r2,r2,r16
    3484:	d8803315 	stw	r2,204(sp)
    3488:	b47ef326 	beq	r22,r17,3058 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003058>
    348c:	dd802617 	ldw	r22,152(sp)
    3490:	003f1106 	br	30d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70030d8>
    3494:	d9c02785 	stb	r7,158(sp)
    3498:	00390406 	br	18ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70018ac>
    349c:	d9c02785 	stb	r7,158(sp)
    34a0:	0038d306 	br	17f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70017f0>
    34a4:	d9c02785 	stb	r7,158(sp)
    34a8:	003a6106 	br	1e30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001e30>
    34ac:	d9c02785 	stb	r7,158(sp)
    34b0:	003af806 	br	2094 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002094>
    34b4:	0005883a 	mov	r2,zero
    34b8:	003d7e06 	br	2ab4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002ab4>
    34bc:	d8802344 	addi	r2,sp,141
    34c0:	003f1306 	br	3110 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003110>
    34c4:	d9c02785 	stb	r7,158(sp)
    34c8:	00392306 	br	1958 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001958>
    34cc:	d9c02785 	stb	r7,158(sp)
    34d0:	003aa906 	br	1f78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001f78>
    34d4:	d9c02785 	stb	r7,158(sp)
    34d8:	003a3d06 	br	1dd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001dd0>
    34dc:	d9c02785 	stb	r7,158(sp)
    34e0:	003aca06 	br	200c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700200c>

000034e4 <__vfprintf_internal>:
    34e4:	008000b4 	movhi	r2,2
    34e8:	10a54904 	addi	r2,r2,-27356
    34ec:	300f883a 	mov	r7,r6
    34f0:	280d883a 	mov	r6,r5
    34f4:	200b883a 	mov	r5,r4
    34f8:	11000017 	ldw	r4,0(r2)
    34fc:	00012ec1 	jmpi	12ec <___vfprintf_internal_r>

00003500 <__sbprintf>:
    3500:	2880030b 	ldhu	r2,12(r5)
    3504:	2ac01917 	ldw	r11,100(r5)
    3508:	2a80038b 	ldhu	r10,14(r5)
    350c:	2a400717 	ldw	r9,28(r5)
    3510:	2a000917 	ldw	r8,36(r5)
    3514:	defee204 	addi	sp,sp,-1144
    3518:	00c10004 	movi	r3,1024
    351c:	dc011a15 	stw	r16,1128(sp)
    3520:	10bfff4c 	andi	r2,r2,65533
    3524:	2821883a 	mov	r16,r5
    3528:	d8cb883a 	add	r5,sp,r3
    352c:	dc811c15 	stw	r18,1136(sp)
    3530:	dc411b15 	stw	r17,1132(sp)
    3534:	dfc11d15 	stw	ra,1140(sp)
    3538:	2025883a 	mov	r18,r4
    353c:	d881030d 	sth	r2,1036(sp)
    3540:	dac11915 	stw	r11,1124(sp)
    3544:	da81038d 	sth	r10,1038(sp)
    3548:	da410715 	stw	r9,1052(sp)
    354c:	da010915 	stw	r8,1060(sp)
    3550:	dec10015 	stw	sp,1024(sp)
    3554:	dec10415 	stw	sp,1040(sp)
    3558:	d8c10215 	stw	r3,1032(sp)
    355c:	d8c10515 	stw	r3,1044(sp)
    3560:	d8010615 	stw	zero,1048(sp)
    3564:	00012ec0 	call	12ec <___vfprintf_internal_r>
    3568:	1023883a 	mov	r17,r2
    356c:	10000416 	blt	r2,zero,3580 <__sbprintf+0x80>
    3570:	d9410004 	addi	r5,sp,1024
    3574:	9009883a 	mov	r4,r18
    3578:	00051b40 	call	51b4 <_fflush_r>
    357c:	10000d1e 	bne	r2,zero,35b4 <__sbprintf+0xb4>
    3580:	d881030b 	ldhu	r2,1036(sp)
    3584:	1080100c 	andi	r2,r2,64
    3588:	10000326 	beq	r2,zero,3598 <__sbprintf+0x98>
    358c:	8080030b 	ldhu	r2,12(r16)
    3590:	10801014 	ori	r2,r2,64
    3594:	8080030d 	sth	r2,12(r16)
    3598:	8805883a 	mov	r2,r17
    359c:	dfc11d17 	ldw	ra,1140(sp)
    35a0:	dc811c17 	ldw	r18,1136(sp)
    35a4:	dc411b17 	ldw	r17,1132(sp)
    35a8:	dc011a17 	ldw	r16,1128(sp)
    35ac:	dec11e04 	addi	sp,sp,1144
    35b0:	f800283a 	ret
    35b4:	047fffc4 	movi	r17,-1
    35b8:	003ff106 	br	3580 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003580>

000035bc <__swsetup_r>:
    35bc:	008000b4 	movhi	r2,2
    35c0:	defffd04 	addi	sp,sp,-12
    35c4:	10a54904 	addi	r2,r2,-27356
    35c8:	dc400115 	stw	r17,4(sp)
    35cc:	2023883a 	mov	r17,r4
    35d0:	11000017 	ldw	r4,0(r2)
    35d4:	dc000015 	stw	r16,0(sp)
    35d8:	dfc00215 	stw	ra,8(sp)
    35dc:	2821883a 	mov	r16,r5
    35e0:	20000226 	beq	r4,zero,35ec <__swsetup_r+0x30>
    35e4:	20800e17 	ldw	r2,56(r4)
    35e8:	10003126 	beq	r2,zero,36b0 <__swsetup_r+0xf4>
    35ec:	8080030b 	ldhu	r2,12(r16)
    35f0:	10c0020c 	andi	r3,r2,8
    35f4:	1009883a 	mov	r4,r2
    35f8:	18000f26 	beq	r3,zero,3638 <__swsetup_r+0x7c>
    35fc:	80c00417 	ldw	r3,16(r16)
    3600:	18001526 	beq	r3,zero,3658 <__swsetup_r+0x9c>
    3604:	1100004c 	andi	r4,r2,1
    3608:	20001c1e 	bne	r4,zero,367c <__swsetup_r+0xc0>
    360c:	1080008c 	andi	r2,r2,2
    3610:	1000291e 	bne	r2,zero,36b8 <__swsetup_r+0xfc>
    3614:	80800517 	ldw	r2,20(r16)
    3618:	80800215 	stw	r2,8(r16)
    361c:	18001c26 	beq	r3,zero,3690 <__swsetup_r+0xd4>
    3620:	0005883a 	mov	r2,zero
    3624:	dfc00217 	ldw	ra,8(sp)
    3628:	dc400117 	ldw	r17,4(sp)
    362c:	dc000017 	ldw	r16,0(sp)
    3630:	dec00304 	addi	sp,sp,12
    3634:	f800283a 	ret
    3638:	2080040c 	andi	r2,r4,16
    363c:	10002e26 	beq	r2,zero,36f8 <__swsetup_r+0x13c>
    3640:	2080010c 	andi	r2,r4,4
    3644:	10001e1e 	bne	r2,zero,36c0 <__swsetup_r+0x104>
    3648:	80c00417 	ldw	r3,16(r16)
    364c:	20800214 	ori	r2,r4,8
    3650:	8080030d 	sth	r2,12(r16)
    3654:	183feb1e 	bne	r3,zero,3604 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003604>
    3658:	1100a00c 	andi	r4,r2,640
    365c:	01408004 	movi	r5,512
    3660:	217fe826 	beq	r4,r5,3604 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003604>
    3664:	800b883a 	mov	r5,r16
    3668:	8809883a 	mov	r4,r17
    366c:	00061340 	call	6134 <__smakebuf_r>
    3670:	8080030b 	ldhu	r2,12(r16)
    3674:	80c00417 	ldw	r3,16(r16)
    3678:	003fe206 	br	3604 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003604>
    367c:	80800517 	ldw	r2,20(r16)
    3680:	80000215 	stw	zero,8(r16)
    3684:	0085c83a 	sub	r2,zero,r2
    3688:	80800615 	stw	r2,24(r16)
    368c:	183fe41e 	bne	r3,zero,3620 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003620>
    3690:	80c0030b 	ldhu	r3,12(r16)
    3694:	0005883a 	mov	r2,zero
    3698:	1900200c 	andi	r4,r3,128
    369c:	203fe126 	beq	r4,zero,3624 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003624>
    36a0:	18c01014 	ori	r3,r3,64
    36a4:	80c0030d 	sth	r3,12(r16)
    36a8:	00bfffc4 	movi	r2,-1
    36ac:	003fdd06 	br	3624 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003624>
    36b0:	00055900 	call	5590 <__sinit>
    36b4:	003fcd06 	br	35ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70035ec>
    36b8:	0005883a 	mov	r2,zero
    36bc:	003fd606 	br	3618 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003618>
    36c0:	81400c17 	ldw	r5,48(r16)
    36c4:	28000626 	beq	r5,zero,36e0 <__swsetup_r+0x124>
    36c8:	80801004 	addi	r2,r16,64
    36cc:	28800326 	beq	r5,r2,36dc <__swsetup_r+0x120>
    36d0:	8809883a 	mov	r4,r17
    36d4:	00057040 	call	5704 <_free_r>
    36d8:	8100030b 	ldhu	r4,12(r16)
    36dc:	80000c15 	stw	zero,48(r16)
    36e0:	80c00417 	ldw	r3,16(r16)
    36e4:	00bff6c4 	movi	r2,-37
    36e8:	1108703a 	and	r4,r2,r4
    36ec:	80000115 	stw	zero,4(r16)
    36f0:	80c00015 	stw	r3,0(r16)
    36f4:	003fd506 	br	364c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700364c>
    36f8:	00800244 	movi	r2,9
    36fc:	88800015 	stw	r2,0(r17)
    3700:	20801014 	ori	r2,r4,64
    3704:	8080030d 	sth	r2,12(r16)
    3708:	00bfffc4 	movi	r2,-1
    370c:	003fc506 	br	3624 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003624>

00003710 <quorem>:
    3710:	defff704 	addi	sp,sp,-36
    3714:	dc800215 	stw	r18,8(sp)
    3718:	20800417 	ldw	r2,16(r4)
    371c:	2c800417 	ldw	r18,16(r5)
    3720:	dfc00815 	stw	ra,32(sp)
    3724:	ddc00715 	stw	r23,28(sp)
    3728:	dd800615 	stw	r22,24(sp)
    372c:	dd400515 	stw	r21,20(sp)
    3730:	dd000415 	stw	r20,16(sp)
    3734:	dcc00315 	stw	r19,12(sp)
    3738:	dc400115 	stw	r17,4(sp)
    373c:	dc000015 	stw	r16,0(sp)
    3740:	14807116 	blt	r2,r18,3908 <quorem+0x1f8>
    3744:	94bfffc4 	addi	r18,r18,-1
    3748:	94ad883a 	add	r22,r18,r18
    374c:	b5ad883a 	add	r22,r22,r22
    3750:	2c400504 	addi	r17,r5,20
    3754:	8da9883a 	add	r20,r17,r22
    3758:	25400504 	addi	r21,r4,20
    375c:	282f883a 	mov	r23,r5
    3760:	adad883a 	add	r22,r21,r22
    3764:	a1400017 	ldw	r5,0(r20)
    3768:	2021883a 	mov	r16,r4
    376c:	b1000017 	ldw	r4,0(r22)
    3770:	29400044 	addi	r5,r5,1
    3774:	000b3100 	call	b310 <__udivsi3>
    3778:	1027883a 	mov	r19,r2
    377c:	10002c26 	beq	r2,zero,3830 <quorem+0x120>
    3780:	a813883a 	mov	r9,r21
    3784:	880b883a 	mov	r5,r17
    3788:	0009883a 	mov	r4,zero
    378c:	000d883a 	mov	r6,zero
    3790:	2a000017 	ldw	r8,0(r5)
    3794:	49c00017 	ldw	r7,0(r9)
    3798:	29400104 	addi	r5,r5,4
    379c:	40bfffcc 	andi	r2,r8,65535
    37a0:	14c5383a 	mul	r2,r2,r19
    37a4:	4010d43a 	srli	r8,r8,16
    37a8:	38ffffcc 	andi	r3,r7,65535
    37ac:	1105883a 	add	r2,r2,r4
    37b0:	1008d43a 	srli	r4,r2,16
    37b4:	44d1383a 	mul	r8,r8,r19
    37b8:	198d883a 	add	r6,r3,r6
    37bc:	10ffffcc 	andi	r3,r2,65535
    37c0:	30c7c83a 	sub	r3,r6,r3
    37c4:	380ed43a 	srli	r7,r7,16
    37c8:	4105883a 	add	r2,r8,r4
    37cc:	180dd43a 	srai	r6,r3,16
    37d0:	113fffcc 	andi	r4,r2,65535
    37d4:	390fc83a 	sub	r7,r7,r4
    37d8:	398d883a 	add	r6,r7,r6
    37dc:	300e943a 	slli	r7,r6,16
    37e0:	18ffffcc 	andi	r3,r3,65535
    37e4:	1008d43a 	srli	r4,r2,16
    37e8:	38ceb03a 	or	r7,r7,r3
    37ec:	49c00015 	stw	r7,0(r9)
    37f0:	300dd43a 	srai	r6,r6,16
    37f4:	4a400104 	addi	r9,r9,4
    37f8:	a17fe52e 	bgeu	r20,r5,3790 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003790>
    37fc:	b0800017 	ldw	r2,0(r22)
    3800:	10000b1e 	bne	r2,zero,3830 <quorem+0x120>
    3804:	b0bfff04 	addi	r2,r22,-4
    3808:	a880082e 	bgeu	r21,r2,382c <quorem+0x11c>
    380c:	b0ffff17 	ldw	r3,-4(r22)
    3810:	18000326 	beq	r3,zero,3820 <quorem+0x110>
    3814:	00000506 	br	382c <quorem+0x11c>
    3818:	10c00017 	ldw	r3,0(r2)
    381c:	1800031e 	bne	r3,zero,382c <quorem+0x11c>
    3820:	10bfff04 	addi	r2,r2,-4
    3824:	94bfffc4 	addi	r18,r18,-1
    3828:	a8bffb36 	bltu	r21,r2,3818 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003818>
    382c:	84800415 	stw	r18,16(r16)
    3830:	b80b883a 	mov	r5,r23
    3834:	8009883a 	mov	r4,r16
    3838:	00078740 	call	7874 <__mcmp>
    383c:	10002616 	blt	r2,zero,38d8 <quorem+0x1c8>
    3840:	9cc00044 	addi	r19,r19,1
    3844:	a805883a 	mov	r2,r21
    3848:	000b883a 	mov	r5,zero
    384c:	11000017 	ldw	r4,0(r2)
    3850:	89800017 	ldw	r6,0(r17)
    3854:	10800104 	addi	r2,r2,4
    3858:	20ffffcc 	andi	r3,r4,65535
    385c:	194b883a 	add	r5,r3,r5
    3860:	30ffffcc 	andi	r3,r6,65535
    3864:	28c7c83a 	sub	r3,r5,r3
    3868:	300cd43a 	srli	r6,r6,16
    386c:	2008d43a 	srli	r4,r4,16
    3870:	180bd43a 	srai	r5,r3,16
    3874:	18ffffcc 	andi	r3,r3,65535
    3878:	2189c83a 	sub	r4,r4,r6
    387c:	2149883a 	add	r4,r4,r5
    3880:	200c943a 	slli	r6,r4,16
    3884:	8c400104 	addi	r17,r17,4
    3888:	200bd43a 	srai	r5,r4,16
    388c:	30c6b03a 	or	r3,r6,r3
    3890:	10ffff15 	stw	r3,-4(r2)
    3894:	a47fed2e 	bgeu	r20,r17,384c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700384c>
    3898:	9485883a 	add	r2,r18,r18
    389c:	1085883a 	add	r2,r2,r2
    38a0:	a887883a 	add	r3,r21,r2
    38a4:	18800017 	ldw	r2,0(r3)
    38a8:	10000b1e 	bne	r2,zero,38d8 <quorem+0x1c8>
    38ac:	18bfff04 	addi	r2,r3,-4
    38b0:	a880082e 	bgeu	r21,r2,38d4 <quorem+0x1c4>
    38b4:	18ffff17 	ldw	r3,-4(r3)
    38b8:	18000326 	beq	r3,zero,38c8 <quorem+0x1b8>
    38bc:	00000506 	br	38d4 <quorem+0x1c4>
    38c0:	10c00017 	ldw	r3,0(r2)
    38c4:	1800031e 	bne	r3,zero,38d4 <quorem+0x1c4>
    38c8:	10bfff04 	addi	r2,r2,-4
    38cc:	94bfffc4 	addi	r18,r18,-1
    38d0:	a8bffb36 	bltu	r21,r2,38c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70038c0>
    38d4:	84800415 	stw	r18,16(r16)
    38d8:	9805883a 	mov	r2,r19
    38dc:	dfc00817 	ldw	ra,32(sp)
    38e0:	ddc00717 	ldw	r23,28(sp)
    38e4:	dd800617 	ldw	r22,24(sp)
    38e8:	dd400517 	ldw	r21,20(sp)
    38ec:	dd000417 	ldw	r20,16(sp)
    38f0:	dcc00317 	ldw	r19,12(sp)
    38f4:	dc800217 	ldw	r18,8(sp)
    38f8:	dc400117 	ldw	r17,4(sp)
    38fc:	dc000017 	ldw	r16,0(sp)
    3900:	dec00904 	addi	sp,sp,36
    3904:	f800283a 	ret
    3908:	0005883a 	mov	r2,zero
    390c:	003ff306 	br	38dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70038dc>

00003910 <_dtoa_r>:
    3910:	20801017 	ldw	r2,64(r4)
    3914:	deffde04 	addi	sp,sp,-136
    3918:	df002015 	stw	fp,128(sp)
    391c:	dcc01b15 	stw	r19,108(sp)
    3920:	dc801a15 	stw	r18,104(sp)
    3924:	dc401915 	stw	r17,100(sp)
    3928:	dc001815 	stw	r16,96(sp)
    392c:	dfc02115 	stw	ra,132(sp)
    3930:	ddc01f15 	stw	r23,124(sp)
    3934:	dd801e15 	stw	r22,120(sp)
    3938:	dd401d15 	stw	r21,116(sp)
    393c:	dd001c15 	stw	r20,112(sp)
    3940:	d9c00315 	stw	r7,12(sp)
    3944:	2039883a 	mov	fp,r4
    3948:	3023883a 	mov	r17,r6
    394c:	2825883a 	mov	r18,r5
    3950:	dc002417 	ldw	r16,144(sp)
    3954:	3027883a 	mov	r19,r6
    3958:	10000826 	beq	r2,zero,397c <_dtoa_r+0x6c>
    395c:	21801117 	ldw	r6,68(r4)
    3960:	00c00044 	movi	r3,1
    3964:	100b883a 	mov	r5,r2
    3968:	1986983a 	sll	r3,r3,r6
    396c:	11800115 	stw	r6,4(r2)
    3970:	10c00215 	stw	r3,8(r2)
    3974:	00070540 	call	7054 <_Bfree>
    3978:	e0001015 	stw	zero,64(fp)
    397c:	88002e16 	blt	r17,zero,3a38 <_dtoa_r+0x128>
    3980:	80000015 	stw	zero,0(r16)
    3984:	889ffc2c 	andhi	r2,r17,32752
    3988:	00dffc34 	movhi	r3,32752
    398c:	10c01c26 	beq	r2,r3,3a00 <_dtoa_r+0xf0>
    3990:	000d883a 	mov	r6,zero
    3994:	000f883a 	mov	r7,zero
    3998:	9009883a 	mov	r4,r18
    399c:	980b883a 	mov	r5,r19
    39a0:	000c5600 	call	c560 <__eqdf2>
    39a4:	10002b1e 	bne	r2,zero,3a54 <_dtoa_r+0x144>
    39a8:	d9c02317 	ldw	r7,140(sp)
    39ac:	00800044 	movi	r2,1
    39b0:	38800015 	stw	r2,0(r7)
    39b4:	d8802517 	ldw	r2,148(sp)
    39b8:	10019e26 	beq	r2,zero,4034 <_dtoa_r+0x724>
    39bc:	d8c02517 	ldw	r3,148(sp)
    39c0:	00800074 	movhi	r2,1
    39c4:	109c8b44 	addi	r2,r2,29229
    39c8:	18800015 	stw	r2,0(r3)
    39cc:	10bfffc4 	addi	r2,r2,-1
    39d0:	dfc02117 	ldw	ra,132(sp)
    39d4:	df002017 	ldw	fp,128(sp)
    39d8:	ddc01f17 	ldw	r23,124(sp)
    39dc:	dd801e17 	ldw	r22,120(sp)
    39e0:	dd401d17 	ldw	r21,116(sp)
    39e4:	dd001c17 	ldw	r20,112(sp)
    39e8:	dcc01b17 	ldw	r19,108(sp)
    39ec:	dc801a17 	ldw	r18,104(sp)
    39f0:	dc401917 	ldw	r17,100(sp)
    39f4:	dc001817 	ldw	r16,96(sp)
    39f8:	dec02204 	addi	sp,sp,136
    39fc:	f800283a 	ret
    3a00:	d8c02317 	ldw	r3,140(sp)
    3a04:	0089c3c4 	movi	r2,9999
    3a08:	18800015 	stw	r2,0(r3)
    3a0c:	90017726 	beq	r18,zero,3fec <_dtoa_r+0x6dc>
    3a10:	00800074 	movhi	r2,1
    3a14:	109c9704 	addi	r2,r2,29276
    3a18:	d9002517 	ldw	r4,148(sp)
    3a1c:	203fec26 	beq	r4,zero,39d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70039d0>
    3a20:	10c000c7 	ldb	r3,3(r2)
    3a24:	1801781e 	bne	r3,zero,4008 <_dtoa_r+0x6f8>
    3a28:	10c000c4 	addi	r3,r2,3
    3a2c:	d9802517 	ldw	r6,148(sp)
    3a30:	30c00015 	stw	r3,0(r6)
    3a34:	003fe606 	br	39d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70039d0>
    3a38:	04e00034 	movhi	r19,32768
    3a3c:	9cffffc4 	addi	r19,r19,-1
    3a40:	00800044 	movi	r2,1
    3a44:	8ce6703a 	and	r19,r17,r19
    3a48:	80800015 	stw	r2,0(r16)
    3a4c:	9823883a 	mov	r17,r19
    3a50:	003fcc06 	br	3984 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003984>
    3a54:	d8800204 	addi	r2,sp,8
    3a58:	d8800015 	stw	r2,0(sp)
    3a5c:	d9c00104 	addi	r7,sp,4
    3a60:	900b883a 	mov	r5,r18
    3a64:	980d883a 	mov	r6,r19
    3a68:	e009883a 	mov	r4,fp
    3a6c:	8820d53a 	srli	r16,r17,20
    3a70:	0007c400 	call	7c40 <__d2b>
    3a74:	d8800915 	stw	r2,36(sp)
    3a78:	8001651e 	bne	r16,zero,4010 <_dtoa_r+0x700>
    3a7c:	dd800217 	ldw	r22,8(sp)
    3a80:	dc000117 	ldw	r16,4(sp)
    3a84:	00800804 	movi	r2,32
    3a88:	b421883a 	add	r16,r22,r16
    3a8c:	80c10c84 	addi	r3,r16,1074
    3a90:	10c2d10e 	bge	r2,r3,45d8 <_dtoa_r+0xcc8>
    3a94:	00801004 	movi	r2,64
    3a98:	81010484 	addi	r4,r16,1042
    3a9c:	10c7c83a 	sub	r3,r2,r3
    3aa0:	9108d83a 	srl	r4,r18,r4
    3aa4:	88e2983a 	sll	r17,r17,r3
    3aa8:	2448b03a 	or	r4,r4,r17
    3aac:	000d9280 	call	d928 <__floatunsidf>
    3ab0:	017f8434 	movhi	r5,65040
    3ab4:	01800044 	movi	r6,1
    3ab8:	1009883a 	mov	r4,r2
    3abc:	194b883a 	add	r5,r3,r5
    3ac0:	843fffc4 	addi	r16,r16,-1
    3ac4:	d9801115 	stw	r6,68(sp)
    3ac8:	000d883a 	mov	r6,zero
    3acc:	01cffe34 	movhi	r7,16376
    3ad0:	000ced00 	call	ced0 <__subdf3>
    3ad4:	0198dbf4 	movhi	r6,25455
    3ad8:	01cff4f4 	movhi	r7,16339
    3adc:	3190d844 	addi	r6,r6,17249
    3ae0:	39e1e9c4 	addi	r7,r7,-30809
    3ae4:	1009883a 	mov	r4,r2
    3ae8:	180b883a 	mov	r5,r3
    3aec:	000c7b80 	call	c7b8 <__muldf3>
    3af0:	01a2d874 	movhi	r6,35681
    3af4:	01cff1f4 	movhi	r7,16327
    3af8:	31b22cc4 	addi	r6,r6,-14157
    3afc:	39e28a04 	addi	r7,r7,-30168
    3b00:	180b883a 	mov	r5,r3
    3b04:	1009883a 	mov	r4,r2
    3b08:	000b3cc0 	call	b3cc <__adddf3>
    3b0c:	8009883a 	mov	r4,r16
    3b10:	1029883a 	mov	r20,r2
    3b14:	1823883a 	mov	r17,r3
    3b18:	000d84c0 	call	d84c <__floatsidf>
    3b1c:	019427f4 	movhi	r6,20639
    3b20:	01cff4f4 	movhi	r7,16339
    3b24:	319e7ec4 	addi	r6,r6,31227
    3b28:	39d104c4 	addi	r7,r7,17427
    3b2c:	1009883a 	mov	r4,r2
    3b30:	180b883a 	mov	r5,r3
    3b34:	000c7b80 	call	c7b8 <__muldf3>
    3b38:	100d883a 	mov	r6,r2
    3b3c:	180f883a 	mov	r7,r3
    3b40:	a009883a 	mov	r4,r20
    3b44:	880b883a 	mov	r5,r17
    3b48:	000b3cc0 	call	b3cc <__adddf3>
    3b4c:	1009883a 	mov	r4,r2
    3b50:	180b883a 	mov	r5,r3
    3b54:	1029883a 	mov	r20,r2
    3b58:	1823883a 	mov	r17,r3
    3b5c:	000d7cc0 	call	d7cc <__fixdfsi>
    3b60:	000d883a 	mov	r6,zero
    3b64:	000f883a 	mov	r7,zero
    3b68:	a009883a 	mov	r4,r20
    3b6c:	880b883a 	mov	r5,r17
    3b70:	d8800515 	stw	r2,20(sp)
    3b74:	000c6c40 	call	c6c4 <__ledf2>
    3b78:	10028716 	blt	r2,zero,4598 <_dtoa_r+0xc88>
    3b7c:	d8c00517 	ldw	r3,20(sp)
    3b80:	00800584 	movi	r2,22
    3b84:	10c27536 	bltu	r2,r3,455c <_dtoa_r+0xc4c>
    3b88:	180490fa 	slli	r2,r3,3
    3b8c:	00c00074 	movhi	r3,1
    3b90:	18dcb304 	addi	r3,r3,29388
    3b94:	1885883a 	add	r2,r3,r2
    3b98:	11000017 	ldw	r4,0(r2)
    3b9c:	11400117 	ldw	r5,4(r2)
    3ba0:	900d883a 	mov	r6,r18
    3ba4:	980f883a 	mov	r7,r19
    3ba8:	000c5e80 	call	c5e8 <__gedf2>
    3bac:	00828d0e 	bge	zero,r2,45e4 <_dtoa_r+0xcd4>
    3bb0:	d9000517 	ldw	r4,20(sp)
    3bb4:	d8000e15 	stw	zero,56(sp)
    3bb8:	213fffc4 	addi	r4,r4,-1
    3bbc:	d9000515 	stw	r4,20(sp)
    3bc0:	b42dc83a 	sub	r22,r22,r16
    3bc4:	b5bfffc4 	addi	r22,r22,-1
    3bc8:	b0026f16 	blt	r22,zero,4588 <_dtoa_r+0xc78>
    3bcc:	d8000815 	stw	zero,32(sp)
    3bd0:	d9c00517 	ldw	r7,20(sp)
    3bd4:	38026416 	blt	r7,zero,4568 <_dtoa_r+0xc58>
    3bd8:	b1ed883a 	add	r22,r22,r7
    3bdc:	d9c00d15 	stw	r7,52(sp)
    3be0:	d8000a15 	stw	zero,40(sp)
    3be4:	d9800317 	ldw	r6,12(sp)
    3be8:	00800244 	movi	r2,9
    3bec:	11811436 	bltu	r2,r6,4040 <_dtoa_r+0x730>
    3bf0:	00800144 	movi	r2,5
    3bf4:	1184e10e 	bge	r2,r6,4f7c <_dtoa_r+0x166c>
    3bf8:	31bfff04 	addi	r6,r6,-4
    3bfc:	d9800315 	stw	r6,12(sp)
    3c00:	0023883a 	mov	r17,zero
    3c04:	d9800317 	ldw	r6,12(sp)
    3c08:	008000c4 	movi	r2,3
    3c0c:	30836726 	beq	r6,r2,49ac <_dtoa_r+0x109c>
    3c10:	1183410e 	bge	r2,r6,4918 <_dtoa_r+0x1008>
    3c14:	d9c00317 	ldw	r7,12(sp)
    3c18:	00800104 	movi	r2,4
    3c1c:	38827c26 	beq	r7,r2,4610 <_dtoa_r+0xd00>
    3c20:	00800144 	movi	r2,5
    3c24:	3884c41e 	bne	r7,r2,4f38 <_dtoa_r+0x1628>
    3c28:	00800044 	movi	r2,1
    3c2c:	d8800b15 	stw	r2,44(sp)
    3c30:	d8c00517 	ldw	r3,20(sp)
    3c34:	d9002217 	ldw	r4,136(sp)
    3c38:	1907883a 	add	r3,r3,r4
    3c3c:	19800044 	addi	r6,r3,1
    3c40:	d8c00c15 	stw	r3,48(sp)
    3c44:	d9800615 	stw	r6,24(sp)
    3c48:	0183a40e 	bge	zero,r6,4adc <_dtoa_r+0x11cc>
    3c4c:	d9800617 	ldw	r6,24(sp)
    3c50:	3021883a 	mov	r16,r6
    3c54:	e0001115 	stw	zero,68(fp)
    3c58:	008005c4 	movi	r2,23
    3c5c:	1184c92e 	bgeu	r2,r6,4f84 <_dtoa_r+0x1674>
    3c60:	00c00044 	movi	r3,1
    3c64:	00800104 	movi	r2,4
    3c68:	1085883a 	add	r2,r2,r2
    3c6c:	11000504 	addi	r4,r2,20
    3c70:	180b883a 	mov	r5,r3
    3c74:	18c00044 	addi	r3,r3,1
    3c78:	313ffb2e 	bgeu	r6,r4,3c68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003c68>
    3c7c:	e1401115 	stw	r5,68(fp)
    3c80:	e009883a 	mov	r4,fp
    3c84:	0006fac0 	call	6fac <_Balloc>
    3c88:	d8800715 	stw	r2,28(sp)
    3c8c:	e0801015 	stw	r2,64(fp)
    3c90:	00800384 	movi	r2,14
    3c94:	1400f736 	bltu	r2,r16,4074 <_dtoa_r+0x764>
    3c98:	8800f626 	beq	r17,zero,4074 <_dtoa_r+0x764>
    3c9c:	d9c00517 	ldw	r7,20(sp)
    3ca0:	01c39a0e 	bge	zero,r7,4b0c <_dtoa_r+0x11fc>
    3ca4:	388003cc 	andi	r2,r7,15
    3ca8:	100490fa 	slli	r2,r2,3
    3cac:	382bd13a 	srai	r21,r7,4
    3cb0:	00c00074 	movhi	r3,1
    3cb4:	18dcb304 	addi	r3,r3,29388
    3cb8:	1885883a 	add	r2,r3,r2
    3cbc:	a8c0040c 	andi	r3,r21,16
    3cc0:	12400017 	ldw	r9,0(r2)
    3cc4:	12000117 	ldw	r8,4(r2)
    3cc8:	18037926 	beq	r3,zero,4ab0 <_dtoa_r+0x11a0>
    3ccc:	00800074 	movhi	r2,1
    3cd0:	109ca904 	addi	r2,r2,29348
    3cd4:	11800817 	ldw	r6,32(r2)
    3cd8:	11c00917 	ldw	r7,36(r2)
    3cdc:	9009883a 	mov	r4,r18
    3ce0:	980b883a 	mov	r5,r19
    3ce4:	da001715 	stw	r8,92(sp)
    3ce8:	da401615 	stw	r9,88(sp)
    3cec:	000bc780 	call	bc78 <__divdf3>
    3cf0:	da001717 	ldw	r8,92(sp)
    3cf4:	da401617 	ldw	r9,88(sp)
    3cf8:	ad4003cc 	andi	r21,r21,15
    3cfc:	040000c4 	movi	r16,3
    3d00:	1023883a 	mov	r17,r2
    3d04:	1829883a 	mov	r20,r3
    3d08:	a8001126 	beq	r21,zero,3d50 <_dtoa_r+0x440>
    3d0c:	05c00074 	movhi	r23,1
    3d10:	bddca904 	addi	r23,r23,29348
    3d14:	4805883a 	mov	r2,r9
    3d18:	4007883a 	mov	r3,r8
    3d1c:	a980004c 	andi	r6,r21,1
    3d20:	1009883a 	mov	r4,r2
    3d24:	a82bd07a 	srai	r21,r21,1
    3d28:	180b883a 	mov	r5,r3
    3d2c:	30000426 	beq	r6,zero,3d40 <_dtoa_r+0x430>
    3d30:	b9800017 	ldw	r6,0(r23)
    3d34:	b9c00117 	ldw	r7,4(r23)
    3d38:	84000044 	addi	r16,r16,1
    3d3c:	000c7b80 	call	c7b8 <__muldf3>
    3d40:	bdc00204 	addi	r23,r23,8
    3d44:	a83ff51e 	bne	r21,zero,3d1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003d1c>
    3d48:	1013883a 	mov	r9,r2
    3d4c:	1811883a 	mov	r8,r3
    3d50:	480d883a 	mov	r6,r9
    3d54:	400f883a 	mov	r7,r8
    3d58:	8809883a 	mov	r4,r17
    3d5c:	a00b883a 	mov	r5,r20
    3d60:	000bc780 	call	bc78 <__divdf3>
    3d64:	d8800f15 	stw	r2,60(sp)
    3d68:	d8c01015 	stw	r3,64(sp)
    3d6c:	d8c00e17 	ldw	r3,56(sp)
    3d70:	18000626 	beq	r3,zero,3d8c <_dtoa_r+0x47c>
    3d74:	d9000f17 	ldw	r4,60(sp)
    3d78:	d9401017 	ldw	r5,64(sp)
    3d7c:	000d883a 	mov	r6,zero
    3d80:	01cffc34 	movhi	r7,16368
    3d84:	000c6c40 	call	c6c4 <__ledf2>
    3d88:	10040b16 	blt	r2,zero,4db8 <_dtoa_r+0x14a8>
    3d8c:	8009883a 	mov	r4,r16
    3d90:	000d84c0 	call	d84c <__floatsidf>
    3d94:	d9800f17 	ldw	r6,60(sp)
    3d98:	d9c01017 	ldw	r7,64(sp)
    3d9c:	1009883a 	mov	r4,r2
    3da0:	180b883a 	mov	r5,r3
    3da4:	000c7b80 	call	c7b8 <__muldf3>
    3da8:	000d883a 	mov	r6,zero
    3dac:	01d00734 	movhi	r7,16412
    3db0:	1009883a 	mov	r4,r2
    3db4:	180b883a 	mov	r5,r3
    3db8:	000b3cc0 	call	b3cc <__adddf3>
    3dbc:	1021883a 	mov	r16,r2
    3dc0:	d8800617 	ldw	r2,24(sp)
    3dc4:	047f3034 	movhi	r17,64704
    3dc8:	1c63883a 	add	r17,r3,r17
    3dcc:	10031826 	beq	r2,zero,4a30 <_dtoa_r+0x1120>
    3dd0:	d8c00517 	ldw	r3,20(sp)
    3dd4:	db000617 	ldw	r12,24(sp)
    3dd8:	d8c01315 	stw	r3,76(sp)
    3ddc:	d9000b17 	ldw	r4,44(sp)
    3de0:	20038f26 	beq	r4,zero,4c20 <_dtoa_r+0x1310>
    3de4:	60bfffc4 	addi	r2,r12,-1
    3de8:	100490fa 	slli	r2,r2,3
    3dec:	00c00074 	movhi	r3,1
    3df0:	18dcb304 	addi	r3,r3,29388
    3df4:	1885883a 	add	r2,r3,r2
    3df8:	11800017 	ldw	r6,0(r2)
    3dfc:	11c00117 	ldw	r7,4(r2)
    3e00:	d8800717 	ldw	r2,28(sp)
    3e04:	0009883a 	mov	r4,zero
    3e08:	014ff834 	movhi	r5,16352
    3e0c:	db001615 	stw	r12,88(sp)
    3e10:	15c00044 	addi	r23,r2,1
    3e14:	000bc780 	call	bc78 <__divdf3>
    3e18:	800d883a 	mov	r6,r16
    3e1c:	880f883a 	mov	r7,r17
    3e20:	1009883a 	mov	r4,r2
    3e24:	180b883a 	mov	r5,r3
    3e28:	000ced00 	call	ced0 <__subdf3>
    3e2c:	d9401017 	ldw	r5,64(sp)
    3e30:	d9000f17 	ldw	r4,60(sp)
    3e34:	102b883a 	mov	r21,r2
    3e38:	d8c01215 	stw	r3,72(sp)
    3e3c:	000d7cc0 	call	d7cc <__fixdfsi>
    3e40:	1009883a 	mov	r4,r2
    3e44:	1029883a 	mov	r20,r2
    3e48:	000d84c0 	call	d84c <__floatsidf>
    3e4c:	d9000f17 	ldw	r4,60(sp)
    3e50:	d9401017 	ldw	r5,64(sp)
    3e54:	100d883a 	mov	r6,r2
    3e58:	180f883a 	mov	r7,r3
    3e5c:	000ced00 	call	ced0 <__subdf3>
    3e60:	1823883a 	mov	r17,r3
    3e64:	d8c00717 	ldw	r3,28(sp)
    3e68:	d9401217 	ldw	r5,72(sp)
    3e6c:	a2000c04 	addi	r8,r20,48
    3e70:	1021883a 	mov	r16,r2
    3e74:	1a000005 	stb	r8,0(r3)
    3e78:	800d883a 	mov	r6,r16
    3e7c:	880f883a 	mov	r7,r17
    3e80:	a809883a 	mov	r4,r21
    3e84:	4029883a 	mov	r20,r8
    3e88:	000c5e80 	call	c5e8 <__gedf2>
    3e8c:	00841d16 	blt	zero,r2,4f04 <_dtoa_r+0x15f4>
    3e90:	800d883a 	mov	r6,r16
    3e94:	880f883a 	mov	r7,r17
    3e98:	0009883a 	mov	r4,zero
    3e9c:	014ffc34 	movhi	r5,16368
    3ea0:	000ced00 	call	ced0 <__subdf3>
    3ea4:	d9401217 	ldw	r5,72(sp)
    3ea8:	100d883a 	mov	r6,r2
    3eac:	180f883a 	mov	r7,r3
    3eb0:	a809883a 	mov	r4,r21
    3eb4:	000c5e80 	call	c5e8 <__gedf2>
    3eb8:	db001617 	ldw	r12,88(sp)
    3ebc:	00840e16 	blt	zero,r2,4ef8 <_dtoa_r+0x15e8>
    3ec0:	00800044 	movi	r2,1
    3ec4:	13006b0e 	bge	r2,r12,4074 <_dtoa_r+0x764>
    3ec8:	d9000717 	ldw	r4,28(sp)
    3ecc:	dd800f15 	stw	r22,60(sp)
    3ed0:	dcc01015 	stw	r19,64(sp)
    3ed4:	2319883a 	add	r12,r4,r12
    3ed8:	dcc01217 	ldw	r19,72(sp)
    3edc:	602d883a 	mov	r22,r12
    3ee0:	dc801215 	stw	r18,72(sp)
    3ee4:	b825883a 	mov	r18,r23
    3ee8:	00000906 	br	3f10 <_dtoa_r+0x600>
    3eec:	000ced00 	call	ced0 <__subdf3>
    3ef0:	a80d883a 	mov	r6,r21
    3ef4:	980f883a 	mov	r7,r19
    3ef8:	1009883a 	mov	r4,r2
    3efc:	180b883a 	mov	r5,r3
    3f00:	000c6c40 	call	c6c4 <__ledf2>
    3f04:	1003e816 	blt	r2,zero,4ea8 <_dtoa_r+0x1598>
    3f08:	b825883a 	mov	r18,r23
    3f0c:	bd83e926 	beq	r23,r22,4eb4 <_dtoa_r+0x15a4>
    3f10:	a809883a 	mov	r4,r21
    3f14:	980b883a 	mov	r5,r19
    3f18:	000d883a 	mov	r6,zero
    3f1c:	01d00934 	movhi	r7,16420
    3f20:	000c7b80 	call	c7b8 <__muldf3>
    3f24:	000d883a 	mov	r6,zero
    3f28:	01d00934 	movhi	r7,16420
    3f2c:	8009883a 	mov	r4,r16
    3f30:	880b883a 	mov	r5,r17
    3f34:	102b883a 	mov	r21,r2
    3f38:	1827883a 	mov	r19,r3
    3f3c:	000c7b80 	call	c7b8 <__muldf3>
    3f40:	180b883a 	mov	r5,r3
    3f44:	1009883a 	mov	r4,r2
    3f48:	1821883a 	mov	r16,r3
    3f4c:	1023883a 	mov	r17,r2
    3f50:	000d7cc0 	call	d7cc <__fixdfsi>
    3f54:	1009883a 	mov	r4,r2
    3f58:	1029883a 	mov	r20,r2
    3f5c:	000d84c0 	call	d84c <__floatsidf>
    3f60:	8809883a 	mov	r4,r17
    3f64:	800b883a 	mov	r5,r16
    3f68:	100d883a 	mov	r6,r2
    3f6c:	180f883a 	mov	r7,r3
    3f70:	000ced00 	call	ced0 <__subdf3>
    3f74:	a5000c04 	addi	r20,r20,48
    3f78:	a80d883a 	mov	r6,r21
    3f7c:	980f883a 	mov	r7,r19
    3f80:	1009883a 	mov	r4,r2
    3f84:	180b883a 	mov	r5,r3
    3f88:	95000005 	stb	r20,0(r18)
    3f8c:	1021883a 	mov	r16,r2
    3f90:	1823883a 	mov	r17,r3
    3f94:	000c6c40 	call	c6c4 <__ledf2>
    3f98:	bdc00044 	addi	r23,r23,1
    3f9c:	800d883a 	mov	r6,r16
    3fa0:	880f883a 	mov	r7,r17
    3fa4:	0009883a 	mov	r4,zero
    3fa8:	014ffc34 	movhi	r5,16368
    3fac:	103fcf0e 	bge	r2,zero,3eec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003eec>
    3fb0:	d8c01317 	ldw	r3,76(sp)
    3fb4:	d8c00515 	stw	r3,20(sp)
    3fb8:	d9400917 	ldw	r5,36(sp)
    3fbc:	e009883a 	mov	r4,fp
    3fc0:	00070540 	call	7054 <_Bfree>
    3fc4:	d9000517 	ldw	r4,20(sp)
    3fc8:	d9802317 	ldw	r6,140(sp)
    3fcc:	d9c02517 	ldw	r7,148(sp)
    3fd0:	b8000005 	stb	zero,0(r23)
    3fd4:	20800044 	addi	r2,r4,1
    3fd8:	30800015 	stw	r2,0(r6)
    3fdc:	3802aa26 	beq	r7,zero,4a88 <_dtoa_r+0x1178>
    3fe0:	3dc00015 	stw	r23,0(r7)
    3fe4:	d8800717 	ldw	r2,28(sp)
    3fe8:	003e7906 	br	39d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70039d0>
    3fec:	00800434 	movhi	r2,16
    3ff0:	10bfffc4 	addi	r2,r2,-1
    3ff4:	88a2703a 	and	r17,r17,r2
    3ff8:	883e851e 	bne	r17,zero,3a10 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003a10>
    3ffc:	00800074 	movhi	r2,1
    4000:	109c9404 	addi	r2,r2,29264
    4004:	003e8406 	br	3a18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003a18>
    4008:	10c00204 	addi	r3,r2,8
    400c:	003e8706 	br	3a2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003a2c>
    4010:	01400434 	movhi	r5,16
    4014:	297fffc4 	addi	r5,r5,-1
    4018:	994a703a 	and	r5,r19,r5
    401c:	9009883a 	mov	r4,r18
    4020:	843f0044 	addi	r16,r16,-1023
    4024:	294ffc34 	orhi	r5,r5,16368
    4028:	dd800217 	ldw	r22,8(sp)
    402c:	d8001115 	stw	zero,68(sp)
    4030:	003ea506 	br	3ac8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003ac8>
    4034:	00800074 	movhi	r2,1
    4038:	109c8b04 	addi	r2,r2,29228
    403c:	003e6406 	br	39d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70039d0>
    4040:	e0001115 	stw	zero,68(fp)
    4044:	000b883a 	mov	r5,zero
    4048:	e009883a 	mov	r4,fp
    404c:	0006fac0 	call	6fac <_Balloc>
    4050:	01bfffc4 	movi	r6,-1
    4054:	01c00044 	movi	r7,1
    4058:	d8800715 	stw	r2,28(sp)
    405c:	d9800c15 	stw	r6,48(sp)
    4060:	e0801015 	stw	r2,64(fp)
    4064:	d8000315 	stw	zero,12(sp)
    4068:	d9c00b15 	stw	r7,44(sp)
    406c:	d9800615 	stw	r6,24(sp)
    4070:	d8002215 	stw	zero,136(sp)
    4074:	d8800117 	ldw	r2,4(sp)
    4078:	10008916 	blt	r2,zero,42a0 <_dtoa_r+0x990>
    407c:	d9000517 	ldw	r4,20(sp)
    4080:	00c00384 	movi	r3,14
    4084:	19008616 	blt	r3,r4,42a0 <_dtoa_r+0x990>
    4088:	200490fa 	slli	r2,r4,3
    408c:	00c00074 	movhi	r3,1
    4090:	d9802217 	ldw	r6,136(sp)
    4094:	18dcb304 	addi	r3,r3,29388
    4098:	1885883a 	add	r2,r3,r2
    409c:	14000017 	ldw	r16,0(r2)
    40a0:	14400117 	ldw	r17,4(r2)
    40a4:	30016316 	blt	r6,zero,4634 <_dtoa_r+0xd24>
    40a8:	800d883a 	mov	r6,r16
    40ac:	880f883a 	mov	r7,r17
    40b0:	9009883a 	mov	r4,r18
    40b4:	980b883a 	mov	r5,r19
    40b8:	000bc780 	call	bc78 <__divdf3>
    40bc:	180b883a 	mov	r5,r3
    40c0:	1009883a 	mov	r4,r2
    40c4:	000d7cc0 	call	d7cc <__fixdfsi>
    40c8:	1009883a 	mov	r4,r2
    40cc:	102b883a 	mov	r21,r2
    40d0:	000d84c0 	call	d84c <__floatsidf>
    40d4:	800d883a 	mov	r6,r16
    40d8:	880f883a 	mov	r7,r17
    40dc:	1009883a 	mov	r4,r2
    40e0:	180b883a 	mov	r5,r3
    40e4:	000c7b80 	call	c7b8 <__muldf3>
    40e8:	100d883a 	mov	r6,r2
    40ec:	180f883a 	mov	r7,r3
    40f0:	9009883a 	mov	r4,r18
    40f4:	980b883a 	mov	r5,r19
    40f8:	000ced00 	call	ced0 <__subdf3>
    40fc:	d9c00717 	ldw	r7,28(sp)
    4100:	1009883a 	mov	r4,r2
    4104:	a8800c04 	addi	r2,r21,48
    4108:	38800005 	stb	r2,0(r7)
    410c:	3dc00044 	addi	r23,r7,1
    4110:	d9c00617 	ldw	r7,24(sp)
    4114:	01800044 	movi	r6,1
    4118:	180b883a 	mov	r5,r3
    411c:	2005883a 	mov	r2,r4
    4120:	39803826 	beq	r7,r6,4204 <_dtoa_r+0x8f4>
    4124:	000d883a 	mov	r6,zero
    4128:	01d00934 	movhi	r7,16420
    412c:	000c7b80 	call	c7b8 <__muldf3>
    4130:	000d883a 	mov	r6,zero
    4134:	000f883a 	mov	r7,zero
    4138:	1009883a 	mov	r4,r2
    413c:	180b883a 	mov	r5,r3
    4140:	1025883a 	mov	r18,r2
    4144:	1827883a 	mov	r19,r3
    4148:	000c5600 	call	c560 <__eqdf2>
    414c:	103f9a26 	beq	r2,zero,3fb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003fb8>
    4150:	d9c00617 	ldw	r7,24(sp)
    4154:	d8c00717 	ldw	r3,28(sp)
    4158:	b829883a 	mov	r20,r23
    415c:	38bfffc4 	addi	r2,r7,-1
    4160:	18ad883a 	add	r22,r3,r2
    4164:	00000a06 	br	4190 <_dtoa_r+0x880>
    4168:	000c7b80 	call	c7b8 <__muldf3>
    416c:	000d883a 	mov	r6,zero
    4170:	000f883a 	mov	r7,zero
    4174:	1009883a 	mov	r4,r2
    4178:	180b883a 	mov	r5,r3
    417c:	1025883a 	mov	r18,r2
    4180:	1827883a 	mov	r19,r3
    4184:	b829883a 	mov	r20,r23
    4188:	000c5600 	call	c560 <__eqdf2>
    418c:	103f8a26 	beq	r2,zero,3fb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003fb8>
    4190:	800d883a 	mov	r6,r16
    4194:	880f883a 	mov	r7,r17
    4198:	9009883a 	mov	r4,r18
    419c:	980b883a 	mov	r5,r19
    41a0:	000bc780 	call	bc78 <__divdf3>
    41a4:	180b883a 	mov	r5,r3
    41a8:	1009883a 	mov	r4,r2
    41ac:	000d7cc0 	call	d7cc <__fixdfsi>
    41b0:	1009883a 	mov	r4,r2
    41b4:	102b883a 	mov	r21,r2
    41b8:	000d84c0 	call	d84c <__floatsidf>
    41bc:	800d883a 	mov	r6,r16
    41c0:	880f883a 	mov	r7,r17
    41c4:	1009883a 	mov	r4,r2
    41c8:	180b883a 	mov	r5,r3
    41cc:	000c7b80 	call	c7b8 <__muldf3>
    41d0:	100d883a 	mov	r6,r2
    41d4:	180f883a 	mov	r7,r3
    41d8:	9009883a 	mov	r4,r18
    41dc:	980b883a 	mov	r5,r19
    41e0:	000ced00 	call	ced0 <__subdf3>
    41e4:	aa000c04 	addi	r8,r21,48
    41e8:	a2000005 	stb	r8,0(r20)
    41ec:	000d883a 	mov	r6,zero
    41f0:	01d00934 	movhi	r7,16420
    41f4:	1009883a 	mov	r4,r2
    41f8:	180b883a 	mov	r5,r3
    41fc:	a5c00044 	addi	r23,r20,1
    4200:	b53fd91e 	bne	r22,r20,4168 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004168>
    4204:	100d883a 	mov	r6,r2
    4208:	180f883a 	mov	r7,r3
    420c:	1009883a 	mov	r4,r2
    4210:	180b883a 	mov	r5,r3
    4214:	000b3cc0 	call	b3cc <__adddf3>
    4218:	100d883a 	mov	r6,r2
    421c:	180f883a 	mov	r7,r3
    4220:	8009883a 	mov	r4,r16
    4224:	880b883a 	mov	r5,r17
    4228:	1027883a 	mov	r19,r2
    422c:	1825883a 	mov	r18,r3
    4230:	000c6c40 	call	c6c4 <__ledf2>
    4234:	10000816 	blt	r2,zero,4258 <_dtoa_r+0x948>
    4238:	980d883a 	mov	r6,r19
    423c:	900f883a 	mov	r7,r18
    4240:	8009883a 	mov	r4,r16
    4244:	880b883a 	mov	r5,r17
    4248:	000c5600 	call	c560 <__eqdf2>
    424c:	103f5a1e 	bne	r2,zero,3fb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003fb8>
    4250:	ad40004c 	andi	r21,r21,1
    4254:	a83f5826 	beq	r21,zero,3fb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003fb8>
    4258:	bd3fffc3 	ldbu	r20,-1(r23)
    425c:	b8bfffc4 	addi	r2,r23,-1
    4260:	1007883a 	mov	r3,r2
    4264:	01400e44 	movi	r5,57
    4268:	d9800717 	ldw	r6,28(sp)
    426c:	00000506 	br	4284 <_dtoa_r+0x974>
    4270:	18ffffc4 	addi	r3,r3,-1
    4274:	11824726 	beq	r2,r6,4b94 <_dtoa_r+0x1284>
    4278:	1d000003 	ldbu	r20,0(r3)
    427c:	102f883a 	mov	r23,r2
    4280:	10bfffc4 	addi	r2,r2,-1
    4284:	a1003fcc 	andi	r4,r20,255
    4288:	2100201c 	xori	r4,r4,128
    428c:	213fe004 	addi	r4,r4,-128
    4290:	217ff726 	beq	r4,r5,4270 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004270>
    4294:	a2000044 	addi	r8,r20,1
    4298:	12000005 	stb	r8,0(r2)
    429c:	003f4606 	br	3fb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003fb8>
    42a0:	d9000b17 	ldw	r4,44(sp)
    42a4:	2000c826 	beq	r4,zero,45c8 <_dtoa_r+0xcb8>
    42a8:	d9800317 	ldw	r6,12(sp)
    42ac:	00c00044 	movi	r3,1
    42b0:	1980f90e 	bge	r3,r6,4698 <_dtoa_r+0xd88>
    42b4:	d8800617 	ldw	r2,24(sp)
    42b8:	d8c00a17 	ldw	r3,40(sp)
    42bc:	157fffc4 	addi	r21,r2,-1
    42c0:	1d41f316 	blt	r3,r21,4a90 <_dtoa_r+0x1180>
    42c4:	1d6bc83a 	sub	r21,r3,r21
    42c8:	d9c00617 	ldw	r7,24(sp)
    42cc:	3802aa16 	blt	r7,zero,4d78 <_dtoa_r+0x1468>
    42d0:	dd000817 	ldw	r20,32(sp)
    42d4:	d8800617 	ldw	r2,24(sp)
    42d8:	d8c00817 	ldw	r3,32(sp)
    42dc:	01400044 	movi	r5,1
    42e0:	e009883a 	mov	r4,fp
    42e4:	1887883a 	add	r3,r3,r2
    42e8:	d8c00815 	stw	r3,32(sp)
    42ec:	b0ad883a 	add	r22,r22,r2
    42f0:	00073b80 	call	73b8 <__i2b>
    42f4:	1023883a 	mov	r17,r2
    42f8:	a0000826 	beq	r20,zero,431c <_dtoa_r+0xa0c>
    42fc:	0580070e 	bge	zero,r22,431c <_dtoa_r+0xa0c>
    4300:	a005883a 	mov	r2,r20
    4304:	b500b916 	blt	r22,r20,45ec <_dtoa_r+0xcdc>
    4308:	d9000817 	ldw	r4,32(sp)
    430c:	a0a9c83a 	sub	r20,r20,r2
    4310:	b0adc83a 	sub	r22,r22,r2
    4314:	2089c83a 	sub	r4,r4,r2
    4318:	d9000815 	stw	r4,32(sp)
    431c:	d9800a17 	ldw	r6,40(sp)
    4320:	0181810e 	bge	zero,r6,4928 <_dtoa_r+0x1018>
    4324:	d9c00b17 	ldw	r7,44(sp)
    4328:	3800b326 	beq	r7,zero,45f8 <_dtoa_r+0xce8>
    432c:	a800b226 	beq	r21,zero,45f8 <_dtoa_r+0xce8>
    4330:	880b883a 	mov	r5,r17
    4334:	a80d883a 	mov	r6,r21
    4338:	e009883a 	mov	r4,fp
    433c:	00075ec0 	call	75ec <__pow5mult>
    4340:	d9800917 	ldw	r6,36(sp)
    4344:	100b883a 	mov	r5,r2
    4348:	e009883a 	mov	r4,fp
    434c:	1023883a 	mov	r17,r2
    4350:	00073f40 	call	73f4 <__multiply>
    4354:	1021883a 	mov	r16,r2
    4358:	d8800a17 	ldw	r2,40(sp)
    435c:	d9400917 	ldw	r5,36(sp)
    4360:	e009883a 	mov	r4,fp
    4364:	1545c83a 	sub	r2,r2,r21
    4368:	d8800a15 	stw	r2,40(sp)
    436c:	00070540 	call	7054 <_Bfree>
    4370:	d8c00a17 	ldw	r3,40(sp)
    4374:	18009f1e 	bne	r3,zero,45f4 <_dtoa_r+0xce4>
    4378:	05c00044 	movi	r23,1
    437c:	e009883a 	mov	r4,fp
    4380:	b80b883a 	mov	r5,r23
    4384:	00073b80 	call	73b8 <__i2b>
    4388:	d9000d17 	ldw	r4,52(sp)
    438c:	102b883a 	mov	r21,r2
    4390:	2000ce26 	beq	r4,zero,46cc <_dtoa_r+0xdbc>
    4394:	200d883a 	mov	r6,r4
    4398:	100b883a 	mov	r5,r2
    439c:	e009883a 	mov	r4,fp
    43a0:	00075ec0 	call	75ec <__pow5mult>
    43a4:	d9800317 	ldw	r6,12(sp)
    43a8:	102b883a 	mov	r21,r2
    43ac:	b981810e 	bge	r23,r6,49b4 <_dtoa_r+0x10a4>
    43b0:	0027883a 	mov	r19,zero
    43b4:	a8800417 	ldw	r2,16(r21)
    43b8:	05c00804 	movi	r23,32
    43bc:	10800104 	addi	r2,r2,4
    43c0:	1085883a 	add	r2,r2,r2
    43c4:	1085883a 	add	r2,r2,r2
    43c8:	a885883a 	add	r2,r21,r2
    43cc:	11000017 	ldw	r4,0(r2)
    43d0:	00072a00 	call	72a0 <__hi0bits>
    43d4:	b885c83a 	sub	r2,r23,r2
    43d8:	1585883a 	add	r2,r2,r22
    43dc:	108007cc 	andi	r2,r2,31
    43e0:	1000b326 	beq	r2,zero,46b0 <_dtoa_r+0xda0>
    43e4:	00c00804 	movi	r3,32
    43e8:	1887c83a 	sub	r3,r3,r2
    43ec:	01000104 	movi	r4,4
    43f0:	20c2cd0e 	bge	r4,r3,4f28 <_dtoa_r+0x1618>
    43f4:	00c00704 	movi	r3,28
    43f8:	1885c83a 	sub	r2,r3,r2
    43fc:	d8c00817 	ldw	r3,32(sp)
    4400:	a0a9883a 	add	r20,r20,r2
    4404:	b0ad883a 	add	r22,r22,r2
    4408:	1887883a 	add	r3,r3,r2
    440c:	d8c00815 	stw	r3,32(sp)
    4410:	d9800817 	ldw	r6,32(sp)
    4414:	0180040e 	bge	zero,r6,4428 <_dtoa_r+0xb18>
    4418:	800b883a 	mov	r5,r16
    441c:	e009883a 	mov	r4,fp
    4420:	000772c0 	call	772c <__lshift>
    4424:	1021883a 	mov	r16,r2
    4428:	0580050e 	bge	zero,r22,4440 <_dtoa_r+0xb30>
    442c:	a80b883a 	mov	r5,r21
    4430:	b00d883a 	mov	r6,r22
    4434:	e009883a 	mov	r4,fp
    4438:	000772c0 	call	772c <__lshift>
    443c:	102b883a 	mov	r21,r2
    4440:	d9c00e17 	ldw	r7,56(sp)
    4444:	3801211e 	bne	r7,zero,48cc <_dtoa_r+0xfbc>
    4448:	d9800617 	ldw	r6,24(sp)
    444c:	0181380e 	bge	zero,r6,4930 <_dtoa_r+0x1020>
    4450:	d8c00b17 	ldw	r3,44(sp)
    4454:	1800ab1e 	bne	r3,zero,4704 <_dtoa_r+0xdf4>
    4458:	dc800717 	ldw	r18,28(sp)
    445c:	dcc00617 	ldw	r19,24(sp)
    4460:	9029883a 	mov	r20,r18
    4464:	00000206 	br	4470 <_dtoa_r+0xb60>
    4468:	000707c0 	call	707c <__multadd>
    446c:	1021883a 	mov	r16,r2
    4470:	a80b883a 	mov	r5,r21
    4474:	8009883a 	mov	r4,r16
    4478:	00037100 	call	3710 <quorem>
    447c:	10800c04 	addi	r2,r2,48
    4480:	90800005 	stb	r2,0(r18)
    4484:	94800044 	addi	r18,r18,1
    4488:	9507c83a 	sub	r3,r18,r20
    448c:	000f883a 	mov	r7,zero
    4490:	01800284 	movi	r6,10
    4494:	800b883a 	mov	r5,r16
    4498:	e009883a 	mov	r4,fp
    449c:	1cfff216 	blt	r3,r19,4468 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004468>
    44a0:	1011883a 	mov	r8,r2
    44a4:	d8800617 	ldw	r2,24(sp)
    44a8:	0082370e 	bge	zero,r2,4d88 <_dtoa_r+0x1478>
    44ac:	d9000717 	ldw	r4,28(sp)
    44b0:	0025883a 	mov	r18,zero
    44b4:	20af883a 	add	r23,r4,r2
    44b8:	01800044 	movi	r6,1
    44bc:	800b883a 	mov	r5,r16
    44c0:	e009883a 	mov	r4,fp
    44c4:	da001715 	stw	r8,92(sp)
    44c8:	000772c0 	call	772c <__lshift>
    44cc:	a80b883a 	mov	r5,r21
    44d0:	1009883a 	mov	r4,r2
    44d4:	d8800915 	stw	r2,36(sp)
    44d8:	00078740 	call	7874 <__mcmp>
    44dc:	da001717 	ldw	r8,92(sp)
    44e0:	0081800e 	bge	zero,r2,4ae4 <_dtoa_r+0x11d4>
    44e4:	b93fffc3 	ldbu	r4,-1(r23)
    44e8:	b8bfffc4 	addi	r2,r23,-1
    44ec:	1007883a 	mov	r3,r2
    44f0:	01800e44 	movi	r6,57
    44f4:	d9c00717 	ldw	r7,28(sp)
    44f8:	00000506 	br	4510 <_dtoa_r+0xc00>
    44fc:	18ffffc4 	addi	r3,r3,-1
    4500:	11c12326 	beq	r2,r7,4990 <_dtoa_r+0x1080>
    4504:	19000003 	ldbu	r4,0(r3)
    4508:	102f883a 	mov	r23,r2
    450c:	10bfffc4 	addi	r2,r2,-1
    4510:	21403fcc 	andi	r5,r4,255
    4514:	2940201c 	xori	r5,r5,128
    4518:	297fe004 	addi	r5,r5,-128
    451c:	29bff726 	beq	r5,r6,44fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70044fc>
    4520:	21000044 	addi	r4,r4,1
    4524:	11000005 	stb	r4,0(r2)
    4528:	a80b883a 	mov	r5,r21
    452c:	e009883a 	mov	r4,fp
    4530:	00070540 	call	7054 <_Bfree>
    4534:	883ea026 	beq	r17,zero,3fb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003fb8>
    4538:	90000426 	beq	r18,zero,454c <_dtoa_r+0xc3c>
    453c:	94400326 	beq	r18,r17,454c <_dtoa_r+0xc3c>
    4540:	900b883a 	mov	r5,r18
    4544:	e009883a 	mov	r4,fp
    4548:	00070540 	call	7054 <_Bfree>
    454c:	880b883a 	mov	r5,r17
    4550:	e009883a 	mov	r4,fp
    4554:	00070540 	call	7054 <_Bfree>
    4558:	003e9706 	br	3fb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003fb8>
    455c:	01800044 	movi	r6,1
    4560:	d9800e15 	stw	r6,56(sp)
    4564:	003d9606 	br	3bc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003bc0>
    4568:	d8800817 	ldw	r2,32(sp)
    456c:	d8c00517 	ldw	r3,20(sp)
    4570:	d8000d15 	stw	zero,52(sp)
    4574:	10c5c83a 	sub	r2,r2,r3
    4578:	00c9c83a 	sub	r4,zero,r3
    457c:	d8800815 	stw	r2,32(sp)
    4580:	d9000a15 	stw	r4,40(sp)
    4584:	003d9706 	br	3be4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003be4>
    4588:	05adc83a 	sub	r22,zero,r22
    458c:	dd800815 	stw	r22,32(sp)
    4590:	002d883a 	mov	r22,zero
    4594:	003d8e06 	br	3bd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003bd0>
    4598:	d9000517 	ldw	r4,20(sp)
    459c:	000d84c0 	call	d84c <__floatsidf>
    45a0:	100d883a 	mov	r6,r2
    45a4:	180f883a 	mov	r7,r3
    45a8:	a009883a 	mov	r4,r20
    45ac:	880b883a 	mov	r5,r17
    45b0:	000c5600 	call	c560 <__eqdf2>
    45b4:	103d7126 	beq	r2,zero,3b7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003b7c>
    45b8:	d9c00517 	ldw	r7,20(sp)
    45bc:	39ffffc4 	addi	r7,r7,-1
    45c0:	d9c00515 	stw	r7,20(sp)
    45c4:	003d6d06 	br	3b7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003b7c>
    45c8:	dd400a17 	ldw	r21,40(sp)
    45cc:	dd000817 	ldw	r20,32(sp)
    45d0:	0023883a 	mov	r17,zero
    45d4:	003f4806 	br	42f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70042f8>
    45d8:	10e3c83a 	sub	r17,r2,r3
    45dc:	9448983a 	sll	r4,r18,r17
    45e0:	003d3206 	br	3aac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003aac>
    45e4:	d8000e15 	stw	zero,56(sp)
    45e8:	003d7506 	br	3bc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003bc0>
    45ec:	b005883a 	mov	r2,r22
    45f0:	003f4506 	br	4308 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004308>
    45f4:	dc000915 	stw	r16,36(sp)
    45f8:	d9800a17 	ldw	r6,40(sp)
    45fc:	d9400917 	ldw	r5,36(sp)
    4600:	e009883a 	mov	r4,fp
    4604:	00075ec0 	call	75ec <__pow5mult>
    4608:	1021883a 	mov	r16,r2
    460c:	003f5a06 	br	4378 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004378>
    4610:	01c00044 	movi	r7,1
    4614:	d9c00b15 	stw	r7,44(sp)
    4618:	d8802217 	ldw	r2,136(sp)
    461c:	0081280e 	bge	zero,r2,4ac0 <_dtoa_r+0x11b0>
    4620:	100d883a 	mov	r6,r2
    4624:	1021883a 	mov	r16,r2
    4628:	d8800c15 	stw	r2,48(sp)
    462c:	d8800615 	stw	r2,24(sp)
    4630:	003d8806 	br	3c54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003c54>
    4634:	d8800617 	ldw	r2,24(sp)
    4638:	00be9b16 	blt	zero,r2,40a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70040a8>
    463c:	10010f1e 	bne	r2,zero,4a7c <_dtoa_r+0x116c>
    4640:	880b883a 	mov	r5,r17
    4644:	000d883a 	mov	r6,zero
    4648:	01d00534 	movhi	r7,16404
    464c:	8009883a 	mov	r4,r16
    4650:	000c7b80 	call	c7b8 <__muldf3>
    4654:	900d883a 	mov	r6,r18
    4658:	980f883a 	mov	r7,r19
    465c:	1009883a 	mov	r4,r2
    4660:	180b883a 	mov	r5,r3
    4664:	000c5e80 	call	c5e8 <__gedf2>
    4668:	002b883a 	mov	r21,zero
    466c:	0023883a 	mov	r17,zero
    4670:	1000bf16 	blt	r2,zero,4970 <_dtoa_r+0x1060>
    4674:	d9802217 	ldw	r6,136(sp)
    4678:	ddc00717 	ldw	r23,28(sp)
    467c:	018c303a 	nor	r6,zero,r6
    4680:	d9800515 	stw	r6,20(sp)
    4684:	a80b883a 	mov	r5,r21
    4688:	e009883a 	mov	r4,fp
    468c:	00070540 	call	7054 <_Bfree>
    4690:	883e4926 	beq	r17,zero,3fb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003fb8>
    4694:	003fad06 	br	454c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700454c>
    4698:	d9c01117 	ldw	r7,68(sp)
    469c:	3801bc26 	beq	r7,zero,4d90 <_dtoa_r+0x1480>
    46a0:	10810cc4 	addi	r2,r2,1075
    46a4:	dd400a17 	ldw	r21,40(sp)
    46a8:	dd000817 	ldw	r20,32(sp)
    46ac:	003f0a06 	br	42d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70042d8>
    46b0:	00800704 	movi	r2,28
    46b4:	d9000817 	ldw	r4,32(sp)
    46b8:	a0a9883a 	add	r20,r20,r2
    46bc:	b0ad883a 	add	r22,r22,r2
    46c0:	2089883a 	add	r4,r4,r2
    46c4:	d9000815 	stw	r4,32(sp)
    46c8:	003f5106 	br	4410 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004410>
    46cc:	d8c00317 	ldw	r3,12(sp)
    46d0:	b8c1fc0e 	bge	r23,r3,4ec4 <_dtoa_r+0x15b4>
    46d4:	0027883a 	mov	r19,zero
    46d8:	b805883a 	mov	r2,r23
    46dc:	003f3e06 	br	43d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70043d8>
    46e0:	880b883a 	mov	r5,r17
    46e4:	e009883a 	mov	r4,fp
    46e8:	000f883a 	mov	r7,zero
    46ec:	01800284 	movi	r6,10
    46f0:	000707c0 	call	707c <__multadd>
    46f4:	d9000c17 	ldw	r4,48(sp)
    46f8:	1023883a 	mov	r17,r2
    46fc:	0102040e 	bge	zero,r4,4f10 <_dtoa_r+0x1600>
    4700:	d9000615 	stw	r4,24(sp)
    4704:	0500050e 	bge	zero,r20,471c <_dtoa_r+0xe0c>
    4708:	880b883a 	mov	r5,r17
    470c:	a00d883a 	mov	r6,r20
    4710:	e009883a 	mov	r4,fp
    4714:	000772c0 	call	772c <__lshift>
    4718:	1023883a 	mov	r17,r2
    471c:	9801241e 	bne	r19,zero,4bb0 <_dtoa_r+0x12a0>
    4720:	8829883a 	mov	r20,r17
    4724:	d9000617 	ldw	r4,24(sp)
    4728:	dcc00717 	ldw	r19,28(sp)
    472c:	9480004c 	andi	r18,r18,1
    4730:	20bfffc4 	addi	r2,r4,-1
    4734:	9885883a 	add	r2,r19,r2
    4738:	d8800415 	stw	r2,16(sp)
    473c:	dc800615 	stw	r18,24(sp)
    4740:	a80b883a 	mov	r5,r21
    4744:	8009883a 	mov	r4,r16
    4748:	00037100 	call	3710 <quorem>
    474c:	880b883a 	mov	r5,r17
    4750:	8009883a 	mov	r4,r16
    4754:	102f883a 	mov	r23,r2
    4758:	00078740 	call	7874 <__mcmp>
    475c:	a80b883a 	mov	r5,r21
    4760:	a00d883a 	mov	r6,r20
    4764:	e009883a 	mov	r4,fp
    4768:	102d883a 	mov	r22,r2
    476c:	00078d40 	call	78d4 <__mdiff>
    4770:	1007883a 	mov	r3,r2
    4774:	10800317 	ldw	r2,12(r2)
    4778:	bc800c04 	addi	r18,r23,48
    477c:	180b883a 	mov	r5,r3
    4780:	10004e1e 	bne	r2,zero,48bc <_dtoa_r+0xfac>
    4784:	8009883a 	mov	r4,r16
    4788:	d8c01615 	stw	r3,88(sp)
    478c:	00078740 	call	7874 <__mcmp>
    4790:	d8c01617 	ldw	r3,88(sp)
    4794:	e009883a 	mov	r4,fp
    4798:	d8801615 	stw	r2,88(sp)
    479c:	180b883a 	mov	r5,r3
    47a0:	00070540 	call	7054 <_Bfree>
    47a4:	d8801617 	ldw	r2,88(sp)
    47a8:	1000041e 	bne	r2,zero,47bc <_dtoa_r+0xeac>
    47ac:	d9800317 	ldw	r6,12(sp)
    47b0:	3000021e 	bne	r6,zero,47bc <_dtoa_r+0xeac>
    47b4:	d8c00617 	ldw	r3,24(sp)
    47b8:	18003726 	beq	r3,zero,4898 <_dtoa_r+0xf88>
    47bc:	b0002016 	blt	r22,zero,4840 <_dtoa_r+0xf30>
    47c0:	b000041e 	bne	r22,zero,47d4 <_dtoa_r+0xec4>
    47c4:	d9000317 	ldw	r4,12(sp)
    47c8:	2000021e 	bne	r4,zero,47d4 <_dtoa_r+0xec4>
    47cc:	d8c00617 	ldw	r3,24(sp)
    47d0:	18001b26 	beq	r3,zero,4840 <_dtoa_r+0xf30>
    47d4:	00810716 	blt	zero,r2,4bf4 <_dtoa_r+0x12e4>
    47d8:	d8c00417 	ldw	r3,16(sp)
    47dc:	9d800044 	addi	r22,r19,1
    47e0:	9c800005 	stb	r18,0(r19)
    47e4:	b02f883a 	mov	r23,r22
    47e8:	98c10626 	beq	r19,r3,4c04 <_dtoa_r+0x12f4>
    47ec:	800b883a 	mov	r5,r16
    47f0:	000f883a 	mov	r7,zero
    47f4:	01800284 	movi	r6,10
    47f8:	e009883a 	mov	r4,fp
    47fc:	000707c0 	call	707c <__multadd>
    4800:	1021883a 	mov	r16,r2
    4804:	000f883a 	mov	r7,zero
    4808:	01800284 	movi	r6,10
    480c:	880b883a 	mov	r5,r17
    4810:	e009883a 	mov	r4,fp
    4814:	8d002526 	beq	r17,r20,48ac <_dtoa_r+0xf9c>
    4818:	000707c0 	call	707c <__multadd>
    481c:	a00b883a 	mov	r5,r20
    4820:	000f883a 	mov	r7,zero
    4824:	01800284 	movi	r6,10
    4828:	e009883a 	mov	r4,fp
    482c:	1023883a 	mov	r17,r2
    4830:	000707c0 	call	707c <__multadd>
    4834:	1029883a 	mov	r20,r2
    4838:	b027883a 	mov	r19,r22
    483c:	003fc006 	br	4740 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004740>
    4840:	9011883a 	mov	r8,r18
    4844:	00800e0e 	bge	zero,r2,4880 <_dtoa_r+0xf70>
    4848:	800b883a 	mov	r5,r16
    484c:	01800044 	movi	r6,1
    4850:	e009883a 	mov	r4,fp
    4854:	da001715 	stw	r8,92(sp)
    4858:	000772c0 	call	772c <__lshift>
    485c:	a80b883a 	mov	r5,r21
    4860:	1009883a 	mov	r4,r2
    4864:	1021883a 	mov	r16,r2
    4868:	00078740 	call	7874 <__mcmp>
    486c:	da001717 	ldw	r8,92(sp)
    4870:	0081960e 	bge	zero,r2,4ecc <_dtoa_r+0x15bc>
    4874:	00800e44 	movi	r2,57
    4878:	40817026 	beq	r8,r2,4e3c <_dtoa_r+0x152c>
    487c:	ba000c44 	addi	r8,r23,49
    4880:	8825883a 	mov	r18,r17
    4884:	9dc00044 	addi	r23,r19,1
    4888:	9a000005 	stb	r8,0(r19)
    488c:	a023883a 	mov	r17,r20
    4890:	dc000915 	stw	r16,36(sp)
    4894:	003f2406 	br	4528 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004528>
    4898:	00800e44 	movi	r2,57
    489c:	9011883a 	mov	r8,r18
    48a0:	90816626 	beq	r18,r2,4e3c <_dtoa_r+0x152c>
    48a4:	05bff516 	blt	zero,r22,487c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700487c>
    48a8:	003ff506 	br	4880 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004880>
    48ac:	000707c0 	call	707c <__multadd>
    48b0:	1023883a 	mov	r17,r2
    48b4:	1029883a 	mov	r20,r2
    48b8:	003fdf06 	br	4838 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004838>
    48bc:	e009883a 	mov	r4,fp
    48c0:	00070540 	call	7054 <_Bfree>
    48c4:	00800044 	movi	r2,1
    48c8:	003fbc06 	br	47bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70047bc>
    48cc:	a80b883a 	mov	r5,r21
    48d0:	8009883a 	mov	r4,r16
    48d4:	00078740 	call	7874 <__mcmp>
    48d8:	103edb0e 	bge	r2,zero,4448 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004448>
    48dc:	800b883a 	mov	r5,r16
    48e0:	000f883a 	mov	r7,zero
    48e4:	01800284 	movi	r6,10
    48e8:	e009883a 	mov	r4,fp
    48ec:	000707c0 	call	707c <__multadd>
    48f0:	1021883a 	mov	r16,r2
    48f4:	d8800517 	ldw	r2,20(sp)
    48f8:	d8c00b17 	ldw	r3,44(sp)
    48fc:	10bfffc4 	addi	r2,r2,-1
    4900:	d8800515 	stw	r2,20(sp)
    4904:	183f761e 	bne	r3,zero,46e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70046e0>
    4908:	d9000c17 	ldw	r4,48(sp)
    490c:	0101730e 	bge	zero,r4,4edc <_dtoa_r+0x15cc>
    4910:	d9000615 	stw	r4,24(sp)
    4914:	003ed006 	br	4458 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004458>
    4918:	00800084 	movi	r2,2
    491c:	3081861e 	bne	r6,r2,4f38 <_dtoa_r+0x1628>
    4920:	d8000b15 	stw	zero,44(sp)
    4924:	003f3c06 	br	4618 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004618>
    4928:	dc000917 	ldw	r16,36(sp)
    492c:	003e9206 	br	4378 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004378>
    4930:	d9c00317 	ldw	r7,12(sp)
    4934:	00800084 	movi	r2,2
    4938:	11fec50e 	bge	r2,r7,4450 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004450>
    493c:	d9000617 	ldw	r4,24(sp)
    4940:	20013c1e 	bne	r4,zero,4e34 <_dtoa_r+0x1524>
    4944:	a80b883a 	mov	r5,r21
    4948:	000f883a 	mov	r7,zero
    494c:	01800144 	movi	r6,5
    4950:	e009883a 	mov	r4,fp
    4954:	000707c0 	call	707c <__multadd>
    4958:	100b883a 	mov	r5,r2
    495c:	8009883a 	mov	r4,r16
    4960:	102b883a 	mov	r21,r2
    4964:	00078740 	call	7874 <__mcmp>
    4968:	dc000915 	stw	r16,36(sp)
    496c:	00bf410e 	bge	zero,r2,4674 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004674>
    4970:	d9c00717 	ldw	r7,28(sp)
    4974:	00800c44 	movi	r2,49
    4978:	38800005 	stb	r2,0(r7)
    497c:	d8800517 	ldw	r2,20(sp)
    4980:	3dc00044 	addi	r23,r7,1
    4984:	10800044 	addi	r2,r2,1
    4988:	d8800515 	stw	r2,20(sp)
    498c:	003f3d06 	br	4684 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004684>
    4990:	d9800517 	ldw	r6,20(sp)
    4994:	d9c00717 	ldw	r7,28(sp)
    4998:	00800c44 	movi	r2,49
    499c:	31800044 	addi	r6,r6,1
    49a0:	d9800515 	stw	r6,20(sp)
    49a4:	38800005 	stb	r2,0(r7)
    49a8:	003edf06 	br	4528 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004528>
    49ac:	d8000b15 	stw	zero,44(sp)
    49b0:	003c9f06 	br	3c30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003c30>
    49b4:	903e7e1e 	bne	r18,zero,43b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70043b0>
    49b8:	00800434 	movhi	r2,16
    49bc:	10bfffc4 	addi	r2,r2,-1
    49c0:	9884703a 	and	r2,r19,r2
    49c4:	1000ea1e 	bne	r2,zero,4d70 <_dtoa_r+0x1460>
    49c8:	9cdffc2c 	andhi	r19,r19,32752
    49cc:	9800e826 	beq	r19,zero,4d70 <_dtoa_r+0x1460>
    49d0:	d9c00817 	ldw	r7,32(sp)
    49d4:	b5800044 	addi	r22,r22,1
    49d8:	04c00044 	movi	r19,1
    49dc:	39c00044 	addi	r7,r7,1
    49e0:	d9c00815 	stw	r7,32(sp)
    49e4:	d8800d17 	ldw	r2,52(sp)
    49e8:	103e721e 	bne	r2,zero,43b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70043b4>
    49ec:	00800044 	movi	r2,1
    49f0:	003e7906 	br	43d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70043d8>
    49f4:	8009883a 	mov	r4,r16
    49f8:	000d84c0 	call	d84c <__floatsidf>
    49fc:	d9800f17 	ldw	r6,60(sp)
    4a00:	d9c01017 	ldw	r7,64(sp)
    4a04:	1009883a 	mov	r4,r2
    4a08:	180b883a 	mov	r5,r3
    4a0c:	000c7b80 	call	c7b8 <__muldf3>
    4a10:	000d883a 	mov	r6,zero
    4a14:	01d00734 	movhi	r7,16412
    4a18:	1009883a 	mov	r4,r2
    4a1c:	180b883a 	mov	r5,r3
    4a20:	000b3cc0 	call	b3cc <__adddf3>
    4a24:	047f3034 	movhi	r17,64704
    4a28:	1021883a 	mov	r16,r2
    4a2c:	1c63883a 	add	r17,r3,r17
    4a30:	d9000f17 	ldw	r4,60(sp)
    4a34:	d9401017 	ldw	r5,64(sp)
    4a38:	000d883a 	mov	r6,zero
    4a3c:	01d00534 	movhi	r7,16404
    4a40:	000ced00 	call	ced0 <__subdf3>
    4a44:	800d883a 	mov	r6,r16
    4a48:	880f883a 	mov	r7,r17
    4a4c:	1009883a 	mov	r4,r2
    4a50:	180b883a 	mov	r5,r3
    4a54:	102b883a 	mov	r21,r2
    4a58:	1829883a 	mov	r20,r3
    4a5c:	000c5e80 	call	c5e8 <__gedf2>
    4a60:	00806c16 	blt	zero,r2,4c14 <_dtoa_r+0x1304>
    4a64:	89e0003c 	xorhi	r7,r17,32768
    4a68:	800d883a 	mov	r6,r16
    4a6c:	a809883a 	mov	r4,r21
    4a70:	a00b883a 	mov	r5,r20
    4a74:	000c6c40 	call	c6c4 <__ledf2>
    4a78:	103d7e0e 	bge	r2,zero,4074 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004074>
    4a7c:	002b883a 	mov	r21,zero
    4a80:	0023883a 	mov	r17,zero
    4a84:	003efb06 	br	4674 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004674>
    4a88:	d8800717 	ldw	r2,28(sp)
    4a8c:	003bd006 	br	39d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70039d0>
    4a90:	d9000a17 	ldw	r4,40(sp)
    4a94:	d9800d17 	ldw	r6,52(sp)
    4a98:	dd400a15 	stw	r21,40(sp)
    4a9c:	a905c83a 	sub	r2,r21,r4
    4aa0:	308d883a 	add	r6,r6,r2
    4aa4:	d9800d15 	stw	r6,52(sp)
    4aa8:	002b883a 	mov	r21,zero
    4aac:	003e0606 	br	42c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70042c8>
    4ab0:	9023883a 	mov	r17,r18
    4ab4:	9829883a 	mov	r20,r19
    4ab8:	04000084 	movi	r16,2
    4abc:	003c9206 	br	3d08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003d08>
    4ac0:	04000044 	movi	r16,1
    4ac4:	dc000c15 	stw	r16,48(sp)
    4ac8:	dc000615 	stw	r16,24(sp)
    4acc:	dc002215 	stw	r16,136(sp)
    4ad0:	e0001115 	stw	zero,68(fp)
    4ad4:	000b883a 	mov	r5,zero
    4ad8:	003c6906 	br	3c80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003c80>
    4adc:	3021883a 	mov	r16,r6
    4ae0:	003ffb06 	br	4ad0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004ad0>
    4ae4:	1000021e 	bne	r2,zero,4af0 <_dtoa_r+0x11e0>
    4ae8:	4200004c 	andi	r8,r8,1
    4aec:	403e7d1e 	bne	r8,zero,44e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70044e4>
    4af0:	01000c04 	movi	r4,48
    4af4:	00000106 	br	4afc <_dtoa_r+0x11ec>
    4af8:	102f883a 	mov	r23,r2
    4afc:	b8bfffc4 	addi	r2,r23,-1
    4b00:	10c00007 	ldb	r3,0(r2)
    4b04:	193ffc26 	beq	r3,r4,4af8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004af8>
    4b08:	003e8706 	br	4528 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004528>
    4b0c:	d8800517 	ldw	r2,20(sp)
    4b10:	00a3c83a 	sub	r17,zero,r2
    4b14:	8800a426 	beq	r17,zero,4da8 <_dtoa_r+0x1498>
    4b18:	888003cc 	andi	r2,r17,15
    4b1c:	100490fa 	slli	r2,r2,3
    4b20:	00c00074 	movhi	r3,1
    4b24:	18dcb304 	addi	r3,r3,29388
    4b28:	1885883a 	add	r2,r3,r2
    4b2c:	11800017 	ldw	r6,0(r2)
    4b30:	11c00117 	ldw	r7,4(r2)
    4b34:	9009883a 	mov	r4,r18
    4b38:	980b883a 	mov	r5,r19
    4b3c:	8823d13a 	srai	r17,r17,4
    4b40:	000c7b80 	call	c7b8 <__muldf3>
    4b44:	d8800f15 	stw	r2,60(sp)
    4b48:	d8c01015 	stw	r3,64(sp)
    4b4c:	8800e826 	beq	r17,zero,4ef0 <_dtoa_r+0x15e0>
    4b50:	05000074 	movhi	r20,1
    4b54:	a51ca904 	addi	r20,r20,29348
    4b58:	04000084 	movi	r16,2
    4b5c:	8980004c 	andi	r6,r17,1
    4b60:	1009883a 	mov	r4,r2
    4b64:	8823d07a 	srai	r17,r17,1
    4b68:	180b883a 	mov	r5,r3
    4b6c:	30000426 	beq	r6,zero,4b80 <_dtoa_r+0x1270>
    4b70:	a1800017 	ldw	r6,0(r20)
    4b74:	a1c00117 	ldw	r7,4(r20)
    4b78:	84000044 	addi	r16,r16,1
    4b7c:	000c7b80 	call	c7b8 <__muldf3>
    4b80:	a5000204 	addi	r20,r20,8
    4b84:	883ff51e 	bne	r17,zero,4b5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004b5c>
    4b88:	d8800f15 	stw	r2,60(sp)
    4b8c:	d8c01015 	stw	r3,64(sp)
    4b90:	003c7606 	br	3d6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003d6c>
    4b94:	00c00c04 	movi	r3,48
    4b98:	10c00005 	stb	r3,0(r2)
    4b9c:	d8c00517 	ldw	r3,20(sp)
    4ba0:	bd3fffc3 	ldbu	r20,-1(r23)
    4ba4:	18c00044 	addi	r3,r3,1
    4ba8:	d8c00515 	stw	r3,20(sp)
    4bac:	003db906 	br	4294 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004294>
    4bb0:	89400117 	ldw	r5,4(r17)
    4bb4:	e009883a 	mov	r4,fp
    4bb8:	0006fac0 	call	6fac <_Balloc>
    4bbc:	89800417 	ldw	r6,16(r17)
    4bc0:	89400304 	addi	r5,r17,12
    4bc4:	11000304 	addi	r4,r2,12
    4bc8:	31800084 	addi	r6,r6,2
    4bcc:	318d883a 	add	r6,r6,r6
    4bd0:	318d883a 	add	r6,r6,r6
    4bd4:	1027883a 	mov	r19,r2
    4bd8:	0006be00 	call	6be0 <memcpy>
    4bdc:	01800044 	movi	r6,1
    4be0:	980b883a 	mov	r5,r19
    4be4:	e009883a 	mov	r4,fp
    4be8:	000772c0 	call	772c <__lshift>
    4bec:	1029883a 	mov	r20,r2
    4bf0:	003ecc06 	br	4724 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004724>
    4bf4:	00800e44 	movi	r2,57
    4bf8:	90809026 	beq	r18,r2,4e3c <_dtoa_r+0x152c>
    4bfc:	92000044 	addi	r8,r18,1
    4c00:	003f1f06 	br	4880 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004880>
    4c04:	9011883a 	mov	r8,r18
    4c08:	8825883a 	mov	r18,r17
    4c0c:	a023883a 	mov	r17,r20
    4c10:	003e2906 	br	44b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70044b8>
    4c14:	002b883a 	mov	r21,zero
    4c18:	0023883a 	mov	r17,zero
    4c1c:	003f5406 	br	4970 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004970>
    4c20:	61bfffc4 	addi	r6,r12,-1
    4c24:	300490fa 	slli	r2,r6,3
    4c28:	00c00074 	movhi	r3,1
    4c2c:	18dcb304 	addi	r3,r3,29388
    4c30:	1885883a 	add	r2,r3,r2
    4c34:	11000017 	ldw	r4,0(r2)
    4c38:	11400117 	ldw	r5,4(r2)
    4c3c:	d8800717 	ldw	r2,28(sp)
    4c40:	880f883a 	mov	r7,r17
    4c44:	d9801215 	stw	r6,72(sp)
    4c48:	800d883a 	mov	r6,r16
    4c4c:	db001615 	stw	r12,88(sp)
    4c50:	15c00044 	addi	r23,r2,1
    4c54:	000c7b80 	call	c7b8 <__muldf3>
    4c58:	d9401017 	ldw	r5,64(sp)
    4c5c:	d9000f17 	ldw	r4,60(sp)
    4c60:	d8c01515 	stw	r3,84(sp)
    4c64:	d8801415 	stw	r2,80(sp)
    4c68:	000d7cc0 	call	d7cc <__fixdfsi>
    4c6c:	1009883a 	mov	r4,r2
    4c70:	1021883a 	mov	r16,r2
    4c74:	000d84c0 	call	d84c <__floatsidf>
    4c78:	d9000f17 	ldw	r4,60(sp)
    4c7c:	d9401017 	ldw	r5,64(sp)
    4c80:	100d883a 	mov	r6,r2
    4c84:	180f883a 	mov	r7,r3
    4c88:	000ced00 	call	ced0 <__subdf3>
    4c8c:	1829883a 	mov	r20,r3
    4c90:	d8c00717 	ldw	r3,28(sp)
    4c94:	84000c04 	addi	r16,r16,48
    4c98:	1023883a 	mov	r17,r2
    4c9c:	1c000005 	stb	r16,0(r3)
    4ca0:	db001617 	ldw	r12,88(sp)
    4ca4:	00800044 	movi	r2,1
    4ca8:	60802226 	beq	r12,r2,4d34 <_dtoa_r+0x1424>
    4cac:	d9c00717 	ldw	r7,28(sp)
    4cb0:	8805883a 	mov	r2,r17
    4cb4:	b82b883a 	mov	r21,r23
    4cb8:	3b19883a 	add	r12,r7,r12
    4cbc:	6023883a 	mov	r17,r12
    4cc0:	a007883a 	mov	r3,r20
    4cc4:	dc800f15 	stw	r18,60(sp)
    4cc8:	000d883a 	mov	r6,zero
    4ccc:	01d00934 	movhi	r7,16420
    4cd0:	1009883a 	mov	r4,r2
    4cd4:	180b883a 	mov	r5,r3
    4cd8:	000c7b80 	call	c7b8 <__muldf3>
    4cdc:	180b883a 	mov	r5,r3
    4ce0:	1009883a 	mov	r4,r2
    4ce4:	1829883a 	mov	r20,r3
    4ce8:	1025883a 	mov	r18,r2
    4cec:	000d7cc0 	call	d7cc <__fixdfsi>
    4cf0:	1009883a 	mov	r4,r2
    4cf4:	1021883a 	mov	r16,r2
    4cf8:	000d84c0 	call	d84c <__floatsidf>
    4cfc:	100d883a 	mov	r6,r2
    4d00:	180f883a 	mov	r7,r3
    4d04:	9009883a 	mov	r4,r18
    4d08:	a00b883a 	mov	r5,r20
    4d0c:	84000c04 	addi	r16,r16,48
    4d10:	000ced00 	call	ced0 <__subdf3>
    4d14:	ad400044 	addi	r21,r21,1
    4d18:	ac3fffc5 	stb	r16,-1(r21)
    4d1c:	ac7fea1e 	bne	r21,r17,4cc8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004cc8>
    4d20:	1023883a 	mov	r17,r2
    4d24:	d8801217 	ldw	r2,72(sp)
    4d28:	dc800f17 	ldw	r18,60(sp)
    4d2c:	1829883a 	mov	r20,r3
    4d30:	b8af883a 	add	r23,r23,r2
    4d34:	d9001417 	ldw	r4,80(sp)
    4d38:	d9401517 	ldw	r5,84(sp)
    4d3c:	000d883a 	mov	r6,zero
    4d40:	01cff834 	movhi	r7,16352
    4d44:	000b3cc0 	call	b3cc <__adddf3>
    4d48:	880d883a 	mov	r6,r17
    4d4c:	a00f883a 	mov	r7,r20
    4d50:	1009883a 	mov	r4,r2
    4d54:	180b883a 	mov	r5,r3
    4d58:	000c6c40 	call	c6c4 <__ledf2>
    4d5c:	10003e0e 	bge	r2,zero,4e58 <_dtoa_r+0x1548>
    4d60:	d9001317 	ldw	r4,76(sp)
    4d64:	bd3fffc3 	ldbu	r20,-1(r23)
    4d68:	d9000515 	stw	r4,20(sp)
    4d6c:	003d3b06 	br	425c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700425c>
    4d70:	0027883a 	mov	r19,zero
    4d74:	003f1b06 	br	49e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70049e4>
    4d78:	d8800817 	ldw	r2,32(sp)
    4d7c:	11e9c83a 	sub	r20,r2,r7
    4d80:	0005883a 	mov	r2,zero
    4d84:	003d5406 	br	42d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70042d8>
    4d88:	00800044 	movi	r2,1
    4d8c:	003dc706 	br	44ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70044ac>
    4d90:	d8c00217 	ldw	r3,8(sp)
    4d94:	00800d84 	movi	r2,54
    4d98:	dd400a17 	ldw	r21,40(sp)
    4d9c:	10c5c83a 	sub	r2,r2,r3
    4da0:	dd000817 	ldw	r20,32(sp)
    4da4:	003d4c06 	br	42d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70042d8>
    4da8:	dc800f15 	stw	r18,60(sp)
    4dac:	dcc01015 	stw	r19,64(sp)
    4db0:	04000084 	movi	r16,2
    4db4:	003bed06 	br	3d6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003d6c>
    4db8:	d9000617 	ldw	r4,24(sp)
    4dbc:	203f0d26 	beq	r4,zero,49f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70049f4>
    4dc0:	d9800c17 	ldw	r6,48(sp)
    4dc4:	01bcab0e 	bge	zero,r6,4074 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004074>
    4dc8:	d9401017 	ldw	r5,64(sp)
    4dcc:	d9000f17 	ldw	r4,60(sp)
    4dd0:	000d883a 	mov	r6,zero
    4dd4:	01d00934 	movhi	r7,16420
    4dd8:	000c7b80 	call	c7b8 <__muldf3>
    4ddc:	81000044 	addi	r4,r16,1
    4de0:	d8800f15 	stw	r2,60(sp)
    4de4:	d8c01015 	stw	r3,64(sp)
    4de8:	000d84c0 	call	d84c <__floatsidf>
    4dec:	d9800f17 	ldw	r6,60(sp)
    4df0:	d9c01017 	ldw	r7,64(sp)
    4df4:	1009883a 	mov	r4,r2
    4df8:	180b883a 	mov	r5,r3
    4dfc:	000c7b80 	call	c7b8 <__muldf3>
    4e00:	01d00734 	movhi	r7,16412
    4e04:	000d883a 	mov	r6,zero
    4e08:	1009883a 	mov	r4,r2
    4e0c:	180b883a 	mov	r5,r3
    4e10:	000b3cc0 	call	b3cc <__adddf3>
    4e14:	d9c00517 	ldw	r7,20(sp)
    4e18:	047f3034 	movhi	r17,64704
    4e1c:	1021883a 	mov	r16,r2
    4e20:	39ffffc4 	addi	r7,r7,-1
    4e24:	d9c01315 	stw	r7,76(sp)
    4e28:	1c63883a 	add	r17,r3,r17
    4e2c:	db000c17 	ldw	r12,48(sp)
    4e30:	003bea06 	br	3ddc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003ddc>
    4e34:	dc000915 	stw	r16,36(sp)
    4e38:	003e0e06 	br	4674 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004674>
    4e3c:	01000e44 	movi	r4,57
    4e40:	8825883a 	mov	r18,r17
    4e44:	9dc00044 	addi	r23,r19,1
    4e48:	99000005 	stb	r4,0(r19)
    4e4c:	a023883a 	mov	r17,r20
    4e50:	dc000915 	stw	r16,36(sp)
    4e54:	003da406 	br	44e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70044e8>
    4e58:	d9801417 	ldw	r6,80(sp)
    4e5c:	d9c01517 	ldw	r7,84(sp)
    4e60:	0009883a 	mov	r4,zero
    4e64:	014ff834 	movhi	r5,16352
    4e68:	000ced00 	call	ced0 <__subdf3>
    4e6c:	880d883a 	mov	r6,r17
    4e70:	a00f883a 	mov	r7,r20
    4e74:	1009883a 	mov	r4,r2
    4e78:	180b883a 	mov	r5,r3
    4e7c:	000c5e80 	call	c5e8 <__gedf2>
    4e80:	00bc7c0e 	bge	zero,r2,4074 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004074>
    4e84:	01000c04 	movi	r4,48
    4e88:	00000106 	br	4e90 <_dtoa_r+0x1580>
    4e8c:	102f883a 	mov	r23,r2
    4e90:	b8bfffc4 	addi	r2,r23,-1
    4e94:	10c00007 	ldb	r3,0(r2)
    4e98:	193ffc26 	beq	r3,r4,4e8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004e8c>
    4e9c:	d9801317 	ldw	r6,76(sp)
    4ea0:	d9800515 	stw	r6,20(sp)
    4ea4:	003c4406 	br	3fb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003fb8>
    4ea8:	d9801317 	ldw	r6,76(sp)
    4eac:	d9800515 	stw	r6,20(sp)
    4eb0:	003cea06 	br	425c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700425c>
    4eb4:	dd800f17 	ldw	r22,60(sp)
    4eb8:	dcc01017 	ldw	r19,64(sp)
    4ebc:	dc801217 	ldw	r18,72(sp)
    4ec0:	003c6c06 	br	4074 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004074>
    4ec4:	903e031e 	bne	r18,zero,46d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70046d4>
    4ec8:	003ebb06 	br	49b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70049b8>
    4ecc:	103e6c1e 	bne	r2,zero,4880 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004880>
    4ed0:	4080004c 	andi	r2,r8,1
    4ed4:	103e6a26 	beq	r2,zero,4880 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004880>
    4ed8:	003e6606 	br	4874 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004874>
    4edc:	d8c00317 	ldw	r3,12(sp)
    4ee0:	00800084 	movi	r2,2
    4ee4:	10c02916 	blt	r2,r3,4f8c <_dtoa_r+0x167c>
    4ee8:	d9000c17 	ldw	r4,48(sp)
    4eec:	003e8806 	br	4910 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004910>
    4ef0:	04000084 	movi	r16,2
    4ef4:	003b9d06 	br	3d6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003d6c>
    4ef8:	d9001317 	ldw	r4,76(sp)
    4efc:	d9000515 	stw	r4,20(sp)
    4f00:	003cd606 	br	425c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700425c>
    4f04:	d8801317 	ldw	r2,76(sp)
    4f08:	d8800515 	stw	r2,20(sp)
    4f0c:	003c2a06 	br	3fb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003fb8>
    4f10:	d9800317 	ldw	r6,12(sp)
    4f14:	00800084 	movi	r2,2
    4f18:	11801516 	blt	r2,r6,4f70 <_dtoa_r+0x1660>
    4f1c:	d9c00c17 	ldw	r7,48(sp)
    4f20:	d9c00615 	stw	r7,24(sp)
    4f24:	003df706 	br	4704 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004704>
    4f28:	193d3926 	beq	r3,r4,4410 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004410>
    4f2c:	00c00f04 	movi	r3,60
    4f30:	1885c83a 	sub	r2,r3,r2
    4f34:	003ddf06 	br	46b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70046b4>
    4f38:	e009883a 	mov	r4,fp
    4f3c:	e0001115 	stw	zero,68(fp)
    4f40:	000b883a 	mov	r5,zero
    4f44:	0006fac0 	call	6fac <_Balloc>
    4f48:	d8800715 	stw	r2,28(sp)
    4f4c:	d8c00717 	ldw	r3,28(sp)
    4f50:	00bfffc4 	movi	r2,-1
    4f54:	01000044 	movi	r4,1
    4f58:	d8800c15 	stw	r2,48(sp)
    4f5c:	e0c01015 	stw	r3,64(fp)
    4f60:	d9000b15 	stw	r4,44(sp)
    4f64:	d8800615 	stw	r2,24(sp)
    4f68:	d8002215 	stw	zero,136(sp)
    4f6c:	003c4106 	br	4074 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004074>
    4f70:	d8c00c17 	ldw	r3,48(sp)
    4f74:	d8c00615 	stw	r3,24(sp)
    4f78:	003e7006 	br	493c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700493c>
    4f7c:	04400044 	movi	r17,1
    4f80:	003b2006 	br	3c04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003c04>
    4f84:	000b883a 	mov	r5,zero
    4f88:	003b3d06 	br	3c80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003c80>
    4f8c:	d8800c17 	ldw	r2,48(sp)
    4f90:	d8800615 	stw	r2,24(sp)
    4f94:	003e6906 	br	493c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700493c>

00004f98 <__sflush_r>:
    4f98:	2880030b 	ldhu	r2,12(r5)
    4f9c:	defffb04 	addi	sp,sp,-20
    4fa0:	dcc00315 	stw	r19,12(sp)
    4fa4:	dc400115 	stw	r17,4(sp)
    4fa8:	dfc00415 	stw	ra,16(sp)
    4fac:	dc800215 	stw	r18,8(sp)
    4fb0:	dc000015 	stw	r16,0(sp)
    4fb4:	10c0020c 	andi	r3,r2,8
    4fb8:	2823883a 	mov	r17,r5
    4fbc:	2027883a 	mov	r19,r4
    4fc0:	1800311e 	bne	r3,zero,5088 <__sflush_r+0xf0>
    4fc4:	28c00117 	ldw	r3,4(r5)
    4fc8:	10820014 	ori	r2,r2,2048
    4fcc:	2880030d 	sth	r2,12(r5)
    4fd0:	00c04b0e 	bge	zero,r3,5100 <__sflush_r+0x168>
    4fd4:	8a000a17 	ldw	r8,40(r17)
    4fd8:	40002326 	beq	r8,zero,5068 <__sflush_r+0xd0>
    4fdc:	9c000017 	ldw	r16,0(r19)
    4fe0:	10c4000c 	andi	r3,r2,4096
    4fe4:	98000015 	stw	zero,0(r19)
    4fe8:	18004826 	beq	r3,zero,510c <__sflush_r+0x174>
    4fec:	89801417 	ldw	r6,80(r17)
    4ff0:	10c0010c 	andi	r3,r2,4
    4ff4:	18000626 	beq	r3,zero,5010 <__sflush_r+0x78>
    4ff8:	88c00117 	ldw	r3,4(r17)
    4ffc:	88800c17 	ldw	r2,48(r17)
    5000:	30cdc83a 	sub	r6,r6,r3
    5004:	10000226 	beq	r2,zero,5010 <__sflush_r+0x78>
    5008:	88800f17 	ldw	r2,60(r17)
    500c:	308dc83a 	sub	r6,r6,r2
    5010:	89400717 	ldw	r5,28(r17)
    5014:	000f883a 	mov	r7,zero
    5018:	9809883a 	mov	r4,r19
    501c:	403ee83a 	callr	r8
    5020:	00ffffc4 	movi	r3,-1
    5024:	10c04426 	beq	r2,r3,5138 <__sflush_r+0x1a0>
    5028:	88c0030b 	ldhu	r3,12(r17)
    502c:	89000417 	ldw	r4,16(r17)
    5030:	88000115 	stw	zero,4(r17)
    5034:	197dffcc 	andi	r5,r3,63487
    5038:	8940030d 	sth	r5,12(r17)
    503c:	89000015 	stw	r4,0(r17)
    5040:	18c4000c 	andi	r3,r3,4096
    5044:	18002c1e 	bne	r3,zero,50f8 <__sflush_r+0x160>
    5048:	89400c17 	ldw	r5,48(r17)
    504c:	9c000015 	stw	r16,0(r19)
    5050:	28000526 	beq	r5,zero,5068 <__sflush_r+0xd0>
    5054:	88801004 	addi	r2,r17,64
    5058:	28800226 	beq	r5,r2,5064 <__sflush_r+0xcc>
    505c:	9809883a 	mov	r4,r19
    5060:	00057040 	call	5704 <_free_r>
    5064:	88000c15 	stw	zero,48(r17)
    5068:	0005883a 	mov	r2,zero
    506c:	dfc00417 	ldw	ra,16(sp)
    5070:	dcc00317 	ldw	r19,12(sp)
    5074:	dc800217 	ldw	r18,8(sp)
    5078:	dc400117 	ldw	r17,4(sp)
    507c:	dc000017 	ldw	r16,0(sp)
    5080:	dec00504 	addi	sp,sp,20
    5084:	f800283a 	ret
    5088:	2c800417 	ldw	r18,16(r5)
    508c:	903ff626 	beq	r18,zero,5068 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005068>
    5090:	2c000017 	ldw	r16,0(r5)
    5094:	108000cc 	andi	r2,r2,3
    5098:	2c800015 	stw	r18,0(r5)
    509c:	84a1c83a 	sub	r16,r16,r18
    50a0:	1000131e 	bne	r2,zero,50f0 <__sflush_r+0x158>
    50a4:	28800517 	ldw	r2,20(r5)
    50a8:	88800215 	stw	r2,8(r17)
    50ac:	04000316 	blt	zero,r16,50bc <__sflush_r+0x124>
    50b0:	003fed06 	br	5068 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005068>
    50b4:	90a5883a 	add	r18,r18,r2
    50b8:	043feb0e 	bge	zero,r16,5068 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005068>
    50bc:	88800917 	ldw	r2,36(r17)
    50c0:	89400717 	ldw	r5,28(r17)
    50c4:	800f883a 	mov	r7,r16
    50c8:	900d883a 	mov	r6,r18
    50cc:	9809883a 	mov	r4,r19
    50d0:	103ee83a 	callr	r2
    50d4:	80a1c83a 	sub	r16,r16,r2
    50d8:	00bff616 	blt	zero,r2,50b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70050b4>
    50dc:	88c0030b 	ldhu	r3,12(r17)
    50e0:	00bfffc4 	movi	r2,-1
    50e4:	18c01014 	ori	r3,r3,64
    50e8:	88c0030d 	sth	r3,12(r17)
    50ec:	003fdf06 	br	506c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700506c>
    50f0:	0005883a 	mov	r2,zero
    50f4:	003fec06 	br	50a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70050a8>
    50f8:	88801415 	stw	r2,80(r17)
    50fc:	003fd206 	br	5048 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005048>
    5100:	28c00f17 	ldw	r3,60(r5)
    5104:	00ffb316 	blt	zero,r3,4fd4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004fd4>
    5108:	003fd706 	br	5068 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005068>
    510c:	89400717 	ldw	r5,28(r17)
    5110:	000d883a 	mov	r6,zero
    5114:	01c00044 	movi	r7,1
    5118:	9809883a 	mov	r4,r19
    511c:	403ee83a 	callr	r8
    5120:	100d883a 	mov	r6,r2
    5124:	00bfffc4 	movi	r2,-1
    5128:	30801426 	beq	r6,r2,517c <__sflush_r+0x1e4>
    512c:	8880030b 	ldhu	r2,12(r17)
    5130:	8a000a17 	ldw	r8,40(r17)
    5134:	003fae06 	br	4ff0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004ff0>
    5138:	98c00017 	ldw	r3,0(r19)
    513c:	183fba26 	beq	r3,zero,5028 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005028>
    5140:	01000744 	movi	r4,29
    5144:	19000626 	beq	r3,r4,5160 <__sflush_r+0x1c8>
    5148:	01000584 	movi	r4,22
    514c:	19000426 	beq	r3,r4,5160 <__sflush_r+0x1c8>
    5150:	88c0030b 	ldhu	r3,12(r17)
    5154:	18c01014 	ori	r3,r3,64
    5158:	88c0030d 	sth	r3,12(r17)
    515c:	003fc306 	br	506c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700506c>
    5160:	8880030b 	ldhu	r2,12(r17)
    5164:	88c00417 	ldw	r3,16(r17)
    5168:	88000115 	stw	zero,4(r17)
    516c:	10bdffcc 	andi	r2,r2,63487
    5170:	8880030d 	sth	r2,12(r17)
    5174:	88c00015 	stw	r3,0(r17)
    5178:	003fb306 	br	5048 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005048>
    517c:	98800017 	ldw	r2,0(r19)
    5180:	103fea26 	beq	r2,zero,512c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700512c>
    5184:	00c00744 	movi	r3,29
    5188:	10c00226 	beq	r2,r3,5194 <__sflush_r+0x1fc>
    518c:	00c00584 	movi	r3,22
    5190:	10c0031e 	bne	r2,r3,51a0 <__sflush_r+0x208>
    5194:	9c000015 	stw	r16,0(r19)
    5198:	0005883a 	mov	r2,zero
    519c:	003fb306 	br	506c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700506c>
    51a0:	88c0030b 	ldhu	r3,12(r17)
    51a4:	3005883a 	mov	r2,r6
    51a8:	18c01014 	ori	r3,r3,64
    51ac:	88c0030d 	sth	r3,12(r17)
    51b0:	003fae06 	br	506c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700506c>

000051b4 <_fflush_r>:
    51b4:	defffd04 	addi	sp,sp,-12
    51b8:	dc000115 	stw	r16,4(sp)
    51bc:	dfc00215 	stw	ra,8(sp)
    51c0:	2021883a 	mov	r16,r4
    51c4:	20000226 	beq	r4,zero,51d0 <_fflush_r+0x1c>
    51c8:	20800e17 	ldw	r2,56(r4)
    51cc:	10000c26 	beq	r2,zero,5200 <_fflush_r+0x4c>
    51d0:	2880030f 	ldh	r2,12(r5)
    51d4:	1000051e 	bne	r2,zero,51ec <_fflush_r+0x38>
    51d8:	0005883a 	mov	r2,zero
    51dc:	dfc00217 	ldw	ra,8(sp)
    51e0:	dc000117 	ldw	r16,4(sp)
    51e4:	dec00304 	addi	sp,sp,12
    51e8:	f800283a 	ret
    51ec:	8009883a 	mov	r4,r16
    51f0:	dfc00217 	ldw	ra,8(sp)
    51f4:	dc000117 	ldw	r16,4(sp)
    51f8:	dec00304 	addi	sp,sp,12
    51fc:	0004f981 	jmpi	4f98 <__sflush_r>
    5200:	d9400015 	stw	r5,0(sp)
    5204:	00055900 	call	5590 <__sinit>
    5208:	d9400017 	ldw	r5,0(sp)
    520c:	003ff006 	br	51d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70051d0>

00005210 <fflush>:
    5210:	20000526 	beq	r4,zero,5228 <fflush+0x18>
    5214:	008000b4 	movhi	r2,2
    5218:	10a54904 	addi	r2,r2,-27356
    521c:	200b883a 	mov	r5,r4
    5220:	11000017 	ldw	r4,0(r2)
    5224:	00051b41 	jmpi	51b4 <_fflush_r>
    5228:	008000b4 	movhi	r2,2
    522c:	10a54804 	addi	r2,r2,-27360
    5230:	11000017 	ldw	r4,0(r2)
    5234:	01400034 	movhi	r5,0
    5238:	29546d04 	addi	r5,r5,20916
    523c:	0005f941 	jmpi	5f94 <_fwalk_reent>

00005240 <__fp_unlock>:
    5240:	0005883a 	mov	r2,zero
    5244:	f800283a 	ret

00005248 <_cleanup_r>:
    5248:	01400074 	movhi	r5,1
    524c:	2967eb04 	addi	r5,r5,-24660
    5250:	0005f941 	jmpi	5f94 <_fwalk_reent>

00005254 <__sinit.part.1>:
    5254:	defff704 	addi	sp,sp,-36
    5258:	00c00034 	movhi	r3,0
    525c:	dfc00815 	stw	ra,32(sp)
    5260:	ddc00715 	stw	r23,28(sp)
    5264:	dd800615 	stw	r22,24(sp)
    5268:	dd400515 	stw	r21,20(sp)
    526c:	dd000415 	stw	r20,16(sp)
    5270:	dcc00315 	stw	r19,12(sp)
    5274:	dc800215 	stw	r18,8(sp)
    5278:	dc400115 	stw	r17,4(sp)
    527c:	dc000015 	stw	r16,0(sp)
    5280:	18d49204 	addi	r3,r3,21064
    5284:	24000117 	ldw	r16,4(r4)
    5288:	20c00f15 	stw	r3,60(r4)
    528c:	2080bb04 	addi	r2,r4,748
    5290:	00c000c4 	movi	r3,3
    5294:	20c0b915 	stw	r3,740(r4)
    5298:	2080ba15 	stw	r2,744(r4)
    529c:	2000b815 	stw	zero,736(r4)
    52a0:	05c00204 	movi	r23,8
    52a4:	00800104 	movi	r2,4
    52a8:	2025883a 	mov	r18,r4
    52ac:	b80d883a 	mov	r6,r23
    52b0:	81001704 	addi	r4,r16,92
    52b4:	000b883a 	mov	r5,zero
    52b8:	80000015 	stw	zero,0(r16)
    52bc:	80000115 	stw	zero,4(r16)
    52c0:	80000215 	stw	zero,8(r16)
    52c4:	8080030d 	sth	r2,12(r16)
    52c8:	80001915 	stw	zero,100(r16)
    52cc:	8000038d 	sth	zero,14(r16)
    52d0:	80000415 	stw	zero,16(r16)
    52d4:	80000515 	stw	zero,20(r16)
    52d8:	80000615 	stw	zero,24(r16)
    52dc:	0006e840 	call	6e84 <memset>
    52e0:	05800074 	movhi	r22,1
    52e4:	94400217 	ldw	r17,8(r18)
    52e8:	05400074 	movhi	r21,1
    52ec:	05000074 	movhi	r20,1
    52f0:	04c00074 	movhi	r19,1
    52f4:	b5a17504 	addi	r22,r22,-31276
    52f8:	ad618c04 	addi	r21,r21,-31184
    52fc:	a521ab04 	addi	r20,r20,-31060
    5300:	9ce1c204 	addi	r19,r19,-30968
    5304:	85800815 	stw	r22,32(r16)
    5308:	85400915 	stw	r21,36(r16)
    530c:	85000a15 	stw	r20,40(r16)
    5310:	84c00b15 	stw	r19,44(r16)
    5314:	84000715 	stw	r16,28(r16)
    5318:	00800284 	movi	r2,10
    531c:	8880030d 	sth	r2,12(r17)
    5320:	00800044 	movi	r2,1
    5324:	b80d883a 	mov	r6,r23
    5328:	89001704 	addi	r4,r17,92
    532c:	000b883a 	mov	r5,zero
    5330:	88000015 	stw	zero,0(r17)
    5334:	88000115 	stw	zero,4(r17)
    5338:	88000215 	stw	zero,8(r17)
    533c:	88001915 	stw	zero,100(r17)
    5340:	8880038d 	sth	r2,14(r17)
    5344:	88000415 	stw	zero,16(r17)
    5348:	88000515 	stw	zero,20(r17)
    534c:	88000615 	stw	zero,24(r17)
    5350:	0006e840 	call	6e84 <memset>
    5354:	94000317 	ldw	r16,12(r18)
    5358:	00800484 	movi	r2,18
    535c:	8c400715 	stw	r17,28(r17)
    5360:	8d800815 	stw	r22,32(r17)
    5364:	8d400915 	stw	r21,36(r17)
    5368:	8d000a15 	stw	r20,40(r17)
    536c:	8cc00b15 	stw	r19,44(r17)
    5370:	8080030d 	sth	r2,12(r16)
    5374:	00800084 	movi	r2,2
    5378:	80000015 	stw	zero,0(r16)
    537c:	80000115 	stw	zero,4(r16)
    5380:	80000215 	stw	zero,8(r16)
    5384:	80001915 	stw	zero,100(r16)
    5388:	8080038d 	sth	r2,14(r16)
    538c:	80000415 	stw	zero,16(r16)
    5390:	80000515 	stw	zero,20(r16)
    5394:	80000615 	stw	zero,24(r16)
    5398:	b80d883a 	mov	r6,r23
    539c:	000b883a 	mov	r5,zero
    53a0:	81001704 	addi	r4,r16,92
    53a4:	0006e840 	call	6e84 <memset>
    53a8:	00800044 	movi	r2,1
    53ac:	84000715 	stw	r16,28(r16)
    53b0:	85800815 	stw	r22,32(r16)
    53b4:	85400915 	stw	r21,36(r16)
    53b8:	85000a15 	stw	r20,40(r16)
    53bc:	84c00b15 	stw	r19,44(r16)
    53c0:	90800e15 	stw	r2,56(r18)
    53c4:	dfc00817 	ldw	ra,32(sp)
    53c8:	ddc00717 	ldw	r23,28(sp)
    53cc:	dd800617 	ldw	r22,24(sp)
    53d0:	dd400517 	ldw	r21,20(sp)
    53d4:	dd000417 	ldw	r20,16(sp)
    53d8:	dcc00317 	ldw	r19,12(sp)
    53dc:	dc800217 	ldw	r18,8(sp)
    53e0:	dc400117 	ldw	r17,4(sp)
    53e4:	dc000017 	ldw	r16,0(sp)
    53e8:	dec00904 	addi	sp,sp,36
    53ec:	f800283a 	ret

000053f0 <__fp_lock>:
    53f0:	0005883a 	mov	r2,zero
    53f4:	f800283a 	ret

000053f8 <__sfmoreglue>:
    53f8:	defffc04 	addi	sp,sp,-16
    53fc:	dc400115 	stw	r17,4(sp)
    5400:	2c7fffc4 	addi	r17,r5,-1
    5404:	8c401a24 	muli	r17,r17,104
    5408:	dc800215 	stw	r18,8(sp)
    540c:	2825883a 	mov	r18,r5
    5410:	89401d04 	addi	r5,r17,116
    5414:	dc000015 	stw	r16,0(sp)
    5418:	dfc00315 	stw	ra,12(sp)
    541c:	00062f00 	call	62f0 <_malloc_r>
    5420:	1021883a 	mov	r16,r2
    5424:	10000726 	beq	r2,zero,5444 <__sfmoreglue+0x4c>
    5428:	11000304 	addi	r4,r2,12
    542c:	10000015 	stw	zero,0(r2)
    5430:	14800115 	stw	r18,4(r2)
    5434:	11000215 	stw	r4,8(r2)
    5438:	89801a04 	addi	r6,r17,104
    543c:	000b883a 	mov	r5,zero
    5440:	0006e840 	call	6e84 <memset>
    5444:	8005883a 	mov	r2,r16
    5448:	dfc00317 	ldw	ra,12(sp)
    544c:	dc800217 	ldw	r18,8(sp)
    5450:	dc400117 	ldw	r17,4(sp)
    5454:	dc000017 	ldw	r16,0(sp)
    5458:	dec00404 	addi	sp,sp,16
    545c:	f800283a 	ret

00005460 <__sfp>:
    5460:	defffb04 	addi	sp,sp,-20
    5464:	dc000015 	stw	r16,0(sp)
    5468:	040000b4 	movhi	r16,2
    546c:	84254804 	addi	r16,r16,-27360
    5470:	dcc00315 	stw	r19,12(sp)
    5474:	2027883a 	mov	r19,r4
    5478:	81000017 	ldw	r4,0(r16)
    547c:	dfc00415 	stw	ra,16(sp)
    5480:	dc800215 	stw	r18,8(sp)
    5484:	20800e17 	ldw	r2,56(r4)
    5488:	dc400115 	stw	r17,4(sp)
    548c:	1000021e 	bne	r2,zero,5498 <__sfp+0x38>
    5490:	00052540 	call	5254 <__sinit.part.1>
    5494:	81000017 	ldw	r4,0(r16)
    5498:	2480b804 	addi	r18,r4,736
    549c:	047fffc4 	movi	r17,-1
    54a0:	91000117 	ldw	r4,4(r18)
    54a4:	94000217 	ldw	r16,8(r18)
    54a8:	213fffc4 	addi	r4,r4,-1
    54ac:	20000a16 	blt	r4,zero,54d8 <__sfp+0x78>
    54b0:	8080030f 	ldh	r2,12(r16)
    54b4:	10000c26 	beq	r2,zero,54e8 <__sfp+0x88>
    54b8:	80c01d04 	addi	r3,r16,116
    54bc:	00000206 	br	54c8 <__sfp+0x68>
    54c0:	18bfe60f 	ldh	r2,-104(r3)
    54c4:	10000826 	beq	r2,zero,54e8 <__sfp+0x88>
    54c8:	213fffc4 	addi	r4,r4,-1
    54cc:	1c3ffd04 	addi	r16,r3,-12
    54d0:	18c01a04 	addi	r3,r3,104
    54d4:	247ffa1e 	bne	r4,r17,54c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70054c0>
    54d8:	90800017 	ldw	r2,0(r18)
    54dc:	10001d26 	beq	r2,zero,5554 <__sfp+0xf4>
    54e0:	1025883a 	mov	r18,r2
    54e4:	003fee06 	br	54a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70054a0>
    54e8:	00bfffc4 	movi	r2,-1
    54ec:	8080038d 	sth	r2,14(r16)
    54f0:	00800044 	movi	r2,1
    54f4:	8080030d 	sth	r2,12(r16)
    54f8:	80001915 	stw	zero,100(r16)
    54fc:	80000015 	stw	zero,0(r16)
    5500:	80000215 	stw	zero,8(r16)
    5504:	80000115 	stw	zero,4(r16)
    5508:	80000415 	stw	zero,16(r16)
    550c:	80000515 	stw	zero,20(r16)
    5510:	80000615 	stw	zero,24(r16)
    5514:	01800204 	movi	r6,8
    5518:	000b883a 	mov	r5,zero
    551c:	81001704 	addi	r4,r16,92
    5520:	0006e840 	call	6e84 <memset>
    5524:	8005883a 	mov	r2,r16
    5528:	80000c15 	stw	zero,48(r16)
    552c:	80000d15 	stw	zero,52(r16)
    5530:	80001115 	stw	zero,68(r16)
    5534:	80001215 	stw	zero,72(r16)
    5538:	dfc00417 	ldw	ra,16(sp)
    553c:	dcc00317 	ldw	r19,12(sp)
    5540:	dc800217 	ldw	r18,8(sp)
    5544:	dc400117 	ldw	r17,4(sp)
    5548:	dc000017 	ldw	r16,0(sp)
    554c:	dec00504 	addi	sp,sp,20
    5550:	f800283a 	ret
    5554:	01400104 	movi	r5,4
    5558:	9809883a 	mov	r4,r19
    555c:	00053f80 	call	53f8 <__sfmoreglue>
    5560:	90800015 	stw	r2,0(r18)
    5564:	103fde1e 	bne	r2,zero,54e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70054e0>
    5568:	00800304 	movi	r2,12
    556c:	98800015 	stw	r2,0(r19)
    5570:	0005883a 	mov	r2,zero
    5574:	003ff006 	br	5538 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005538>

00005578 <_cleanup>:
    5578:	008000b4 	movhi	r2,2
    557c:	10a54804 	addi	r2,r2,-27360
    5580:	11000017 	ldw	r4,0(r2)
    5584:	01400074 	movhi	r5,1
    5588:	2967eb04 	addi	r5,r5,-24660
    558c:	0005f941 	jmpi	5f94 <_fwalk_reent>

00005590 <__sinit>:
    5590:	20800e17 	ldw	r2,56(r4)
    5594:	10000126 	beq	r2,zero,559c <__sinit+0xc>
    5598:	f800283a 	ret
    559c:	00052541 	jmpi	5254 <__sinit.part.1>

000055a0 <__sfp_lock_acquire>:
    55a0:	f800283a 	ret

000055a4 <__sfp_lock_release>:
    55a4:	f800283a 	ret

000055a8 <__sinit_lock_acquire>:
    55a8:	f800283a 	ret

000055ac <__sinit_lock_release>:
    55ac:	f800283a 	ret

000055b0 <__fp_lock_all>:
    55b0:	008000b4 	movhi	r2,2
    55b4:	10a54904 	addi	r2,r2,-27356
    55b8:	11000017 	ldw	r4,0(r2)
    55bc:	01400034 	movhi	r5,0
    55c0:	2954fc04 	addi	r5,r5,21488
    55c4:	0005ed01 	jmpi	5ed0 <_fwalk>

000055c8 <__fp_unlock_all>:
    55c8:	008000b4 	movhi	r2,2
    55cc:	10a54904 	addi	r2,r2,-27356
    55d0:	11000017 	ldw	r4,0(r2)
    55d4:	01400034 	movhi	r5,0
    55d8:	29549004 	addi	r5,r5,21056
    55dc:	0005ed01 	jmpi	5ed0 <_fwalk>

000055e0 <_malloc_trim_r>:
    55e0:	defffb04 	addi	sp,sp,-20
    55e4:	dcc00315 	stw	r19,12(sp)
    55e8:	04c00074 	movhi	r19,1
    55ec:	dc800215 	stw	r18,8(sp)
    55f0:	dc400115 	stw	r17,4(sp)
    55f4:	dc000015 	stw	r16,0(sp)
    55f8:	dfc00415 	stw	ra,16(sp)
    55fc:	2821883a 	mov	r16,r5
    5600:	9cdec704 	addi	r19,r19,31516
    5604:	2025883a 	mov	r18,r4
    5608:	000dfb00 	call	dfb0 <__malloc_lock>
    560c:	98800217 	ldw	r2,8(r19)
    5610:	14400117 	ldw	r17,4(r2)
    5614:	00bfff04 	movi	r2,-4
    5618:	88a2703a 	and	r17,r17,r2
    561c:	8c21c83a 	sub	r16,r17,r16
    5620:	8403fbc4 	addi	r16,r16,4079
    5624:	8020d33a 	srli	r16,r16,12
    5628:	0083ffc4 	movi	r2,4095
    562c:	843fffc4 	addi	r16,r16,-1
    5630:	8020933a 	slli	r16,r16,12
    5634:	1400060e 	bge	r2,r16,5650 <_malloc_trim_r+0x70>
    5638:	000b883a 	mov	r5,zero
    563c:	9009883a 	mov	r4,r18
    5640:	00085800 	call	8580 <_sbrk_r>
    5644:	98c00217 	ldw	r3,8(r19)
    5648:	1c47883a 	add	r3,r3,r17
    564c:	10c00a26 	beq	r2,r3,5678 <_malloc_trim_r+0x98>
    5650:	9009883a 	mov	r4,r18
    5654:	000dfd40 	call	dfd4 <__malloc_unlock>
    5658:	0005883a 	mov	r2,zero
    565c:	dfc00417 	ldw	ra,16(sp)
    5660:	dcc00317 	ldw	r19,12(sp)
    5664:	dc800217 	ldw	r18,8(sp)
    5668:	dc400117 	ldw	r17,4(sp)
    566c:	dc000017 	ldw	r16,0(sp)
    5670:	dec00504 	addi	sp,sp,20
    5674:	f800283a 	ret
    5678:	040bc83a 	sub	r5,zero,r16
    567c:	9009883a 	mov	r4,r18
    5680:	00085800 	call	8580 <_sbrk_r>
    5684:	00ffffc4 	movi	r3,-1
    5688:	10c00d26 	beq	r2,r3,56c0 <_malloc_trim_r+0xe0>
    568c:	00c000b4 	movhi	r3,2
    5690:	18ed2b04 	addi	r3,r3,-19284
    5694:	18800017 	ldw	r2,0(r3)
    5698:	99000217 	ldw	r4,8(r19)
    569c:	8c23c83a 	sub	r17,r17,r16
    56a0:	8c400054 	ori	r17,r17,1
    56a4:	1421c83a 	sub	r16,r2,r16
    56a8:	24400115 	stw	r17,4(r4)
    56ac:	9009883a 	mov	r4,r18
    56b0:	1c000015 	stw	r16,0(r3)
    56b4:	000dfd40 	call	dfd4 <__malloc_unlock>
    56b8:	00800044 	movi	r2,1
    56bc:	003fe706 	br	565c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700565c>
    56c0:	000b883a 	mov	r5,zero
    56c4:	9009883a 	mov	r4,r18
    56c8:	00085800 	call	8580 <_sbrk_r>
    56cc:	99000217 	ldw	r4,8(r19)
    56d0:	014003c4 	movi	r5,15
    56d4:	1107c83a 	sub	r3,r2,r4
    56d8:	28ffdd0e 	bge	r5,r3,5650 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005650>
    56dc:	014000b4 	movhi	r5,2
    56e0:	29654b04 	addi	r5,r5,-27348
    56e4:	29400017 	ldw	r5,0(r5)
    56e8:	18c00054 	ori	r3,r3,1
    56ec:	20c00115 	stw	r3,4(r4)
    56f0:	00c000b4 	movhi	r3,2
    56f4:	1145c83a 	sub	r2,r2,r5
    56f8:	18ed2b04 	addi	r3,r3,-19284
    56fc:	18800015 	stw	r2,0(r3)
    5700:	003fd306 	br	5650 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005650>

00005704 <_free_r>:
    5704:	28004126 	beq	r5,zero,580c <_free_r+0x108>
    5708:	defffd04 	addi	sp,sp,-12
    570c:	dc400115 	stw	r17,4(sp)
    5710:	dc000015 	stw	r16,0(sp)
    5714:	2023883a 	mov	r17,r4
    5718:	2821883a 	mov	r16,r5
    571c:	dfc00215 	stw	ra,8(sp)
    5720:	000dfb00 	call	dfb0 <__malloc_lock>
    5724:	81ffff17 	ldw	r7,-4(r16)
    5728:	00bfff84 	movi	r2,-2
    572c:	01000074 	movhi	r4,1
    5730:	81bffe04 	addi	r6,r16,-8
    5734:	3884703a 	and	r2,r7,r2
    5738:	211ec704 	addi	r4,r4,31516
    573c:	308b883a 	add	r5,r6,r2
    5740:	2a400117 	ldw	r9,4(r5)
    5744:	22000217 	ldw	r8,8(r4)
    5748:	00ffff04 	movi	r3,-4
    574c:	48c6703a 	and	r3,r9,r3
    5750:	2a005726 	beq	r5,r8,58b0 <_free_r+0x1ac>
    5754:	28c00115 	stw	r3,4(r5)
    5758:	39c0004c 	andi	r7,r7,1
    575c:	3800091e 	bne	r7,zero,5784 <_free_r+0x80>
    5760:	823ffe17 	ldw	r8,-8(r16)
    5764:	22400204 	addi	r9,r4,8
    5768:	320dc83a 	sub	r6,r6,r8
    576c:	31c00217 	ldw	r7,8(r6)
    5770:	1205883a 	add	r2,r2,r8
    5774:	3a406526 	beq	r7,r9,590c <_free_r+0x208>
    5778:	32000317 	ldw	r8,12(r6)
    577c:	3a000315 	stw	r8,12(r7)
    5780:	41c00215 	stw	r7,8(r8)
    5784:	28cf883a 	add	r7,r5,r3
    5788:	39c00117 	ldw	r7,4(r7)
    578c:	39c0004c 	andi	r7,r7,1
    5790:	38003a26 	beq	r7,zero,587c <_free_r+0x178>
    5794:	10c00054 	ori	r3,r2,1
    5798:	30c00115 	stw	r3,4(r6)
    579c:	3087883a 	add	r3,r6,r2
    57a0:	18800015 	stw	r2,0(r3)
    57a4:	00c07fc4 	movi	r3,511
    57a8:	18801936 	bltu	r3,r2,5810 <_free_r+0x10c>
    57ac:	1004d0fa 	srli	r2,r2,3
    57b0:	01c00044 	movi	r7,1
    57b4:	21400117 	ldw	r5,4(r4)
    57b8:	10c00044 	addi	r3,r2,1
    57bc:	18c7883a 	add	r3,r3,r3
    57c0:	1005d0ba 	srai	r2,r2,2
    57c4:	18c7883a 	add	r3,r3,r3
    57c8:	18c7883a 	add	r3,r3,r3
    57cc:	1907883a 	add	r3,r3,r4
    57d0:	3884983a 	sll	r2,r7,r2
    57d4:	19c00017 	ldw	r7,0(r3)
    57d8:	1a3ffe04 	addi	r8,r3,-8
    57dc:	1144b03a 	or	r2,r2,r5
    57e0:	32000315 	stw	r8,12(r6)
    57e4:	31c00215 	stw	r7,8(r6)
    57e8:	20800115 	stw	r2,4(r4)
    57ec:	19800015 	stw	r6,0(r3)
    57f0:	39800315 	stw	r6,12(r7)
    57f4:	8809883a 	mov	r4,r17
    57f8:	dfc00217 	ldw	ra,8(sp)
    57fc:	dc400117 	ldw	r17,4(sp)
    5800:	dc000017 	ldw	r16,0(sp)
    5804:	dec00304 	addi	sp,sp,12
    5808:	000dfd41 	jmpi	dfd4 <__malloc_unlock>
    580c:	f800283a 	ret
    5810:	100ad27a 	srli	r5,r2,9
    5814:	00c00104 	movi	r3,4
    5818:	19404a36 	bltu	r3,r5,5944 <_free_r+0x240>
    581c:	100ad1ba 	srli	r5,r2,6
    5820:	28c00e44 	addi	r3,r5,57
    5824:	18c7883a 	add	r3,r3,r3
    5828:	29400e04 	addi	r5,r5,56
    582c:	18c7883a 	add	r3,r3,r3
    5830:	18c7883a 	add	r3,r3,r3
    5834:	1909883a 	add	r4,r3,r4
    5838:	20c00017 	ldw	r3,0(r4)
    583c:	01c00074 	movhi	r7,1
    5840:	213ffe04 	addi	r4,r4,-8
    5844:	39dec704 	addi	r7,r7,31516
    5848:	20c04426 	beq	r4,r3,595c <_free_r+0x258>
    584c:	01ffff04 	movi	r7,-4
    5850:	19400117 	ldw	r5,4(r3)
    5854:	29ca703a 	and	r5,r5,r7
    5858:	1140022e 	bgeu	r2,r5,5864 <_free_r+0x160>
    585c:	18c00217 	ldw	r3,8(r3)
    5860:	20fffb1e 	bne	r4,r3,5850 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005850>
    5864:	19000317 	ldw	r4,12(r3)
    5868:	31000315 	stw	r4,12(r6)
    586c:	30c00215 	stw	r3,8(r6)
    5870:	21800215 	stw	r6,8(r4)
    5874:	19800315 	stw	r6,12(r3)
    5878:	003fde06 	br	57f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70057f4>
    587c:	29c00217 	ldw	r7,8(r5)
    5880:	10c5883a 	add	r2,r2,r3
    5884:	00c00074 	movhi	r3,1
    5888:	18dec904 	addi	r3,r3,31524
    588c:	38c03b26 	beq	r7,r3,597c <_free_r+0x278>
    5890:	2a000317 	ldw	r8,12(r5)
    5894:	11400054 	ori	r5,r2,1
    5898:	3087883a 	add	r3,r6,r2
    589c:	3a000315 	stw	r8,12(r7)
    58a0:	41c00215 	stw	r7,8(r8)
    58a4:	31400115 	stw	r5,4(r6)
    58a8:	18800015 	stw	r2,0(r3)
    58ac:	003fbd06 	br	57a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70057a4>
    58b0:	39c0004c 	andi	r7,r7,1
    58b4:	10c5883a 	add	r2,r2,r3
    58b8:	3800071e 	bne	r7,zero,58d8 <_free_r+0x1d4>
    58bc:	81fffe17 	ldw	r7,-8(r16)
    58c0:	31cdc83a 	sub	r6,r6,r7
    58c4:	30c00317 	ldw	r3,12(r6)
    58c8:	31400217 	ldw	r5,8(r6)
    58cc:	11c5883a 	add	r2,r2,r7
    58d0:	28c00315 	stw	r3,12(r5)
    58d4:	19400215 	stw	r5,8(r3)
    58d8:	10c00054 	ori	r3,r2,1
    58dc:	30c00115 	stw	r3,4(r6)
    58e0:	00c000b4 	movhi	r3,2
    58e4:	18e54c04 	addi	r3,r3,-27344
    58e8:	18c00017 	ldw	r3,0(r3)
    58ec:	21800215 	stw	r6,8(r4)
    58f0:	10ffc036 	bltu	r2,r3,57f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70057f4>
    58f4:	008000b4 	movhi	r2,2
    58f8:	10ad1504 	addi	r2,r2,-19372
    58fc:	11400017 	ldw	r5,0(r2)
    5900:	8809883a 	mov	r4,r17
    5904:	00055e00 	call	55e0 <_malloc_trim_r>
    5908:	003fba06 	br	57f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70057f4>
    590c:	28c9883a 	add	r4,r5,r3
    5910:	21000117 	ldw	r4,4(r4)
    5914:	2100004c 	andi	r4,r4,1
    5918:	2000391e 	bne	r4,zero,5a00 <_free_r+0x2fc>
    591c:	29c00217 	ldw	r7,8(r5)
    5920:	29000317 	ldw	r4,12(r5)
    5924:	1885883a 	add	r2,r3,r2
    5928:	10c00054 	ori	r3,r2,1
    592c:	39000315 	stw	r4,12(r7)
    5930:	21c00215 	stw	r7,8(r4)
    5934:	30c00115 	stw	r3,4(r6)
    5938:	308d883a 	add	r6,r6,r2
    593c:	30800015 	stw	r2,0(r6)
    5940:	003fac06 	br	57f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70057f4>
    5944:	00c00504 	movi	r3,20
    5948:	19401536 	bltu	r3,r5,59a0 <_free_r+0x29c>
    594c:	28c01704 	addi	r3,r5,92
    5950:	18c7883a 	add	r3,r3,r3
    5954:	294016c4 	addi	r5,r5,91
    5958:	003fb406 	br	582c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700582c>
    595c:	280bd0ba 	srai	r5,r5,2
    5960:	00c00044 	movi	r3,1
    5964:	38800117 	ldw	r2,4(r7)
    5968:	194a983a 	sll	r5,r3,r5
    596c:	2007883a 	mov	r3,r4
    5970:	2884b03a 	or	r2,r5,r2
    5974:	38800115 	stw	r2,4(r7)
    5978:	003fbb06 	br	5868 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005868>
    597c:	21800515 	stw	r6,20(r4)
    5980:	21800415 	stw	r6,16(r4)
    5984:	10c00054 	ori	r3,r2,1
    5988:	31c00315 	stw	r7,12(r6)
    598c:	31c00215 	stw	r7,8(r6)
    5990:	30c00115 	stw	r3,4(r6)
    5994:	308d883a 	add	r6,r6,r2
    5998:	30800015 	stw	r2,0(r6)
    599c:	003f9506 	br	57f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70057f4>
    59a0:	00c01504 	movi	r3,84
    59a4:	19400536 	bltu	r3,r5,59bc <_free_r+0x2b8>
    59a8:	100ad33a 	srli	r5,r2,12
    59ac:	28c01bc4 	addi	r3,r5,111
    59b0:	18c7883a 	add	r3,r3,r3
    59b4:	29401b84 	addi	r5,r5,110
    59b8:	003f9c06 	br	582c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700582c>
    59bc:	00c05504 	movi	r3,340
    59c0:	19400536 	bltu	r3,r5,59d8 <_free_r+0x2d4>
    59c4:	100ad3fa 	srli	r5,r2,15
    59c8:	28c01e04 	addi	r3,r5,120
    59cc:	18c7883a 	add	r3,r3,r3
    59d0:	29401dc4 	addi	r5,r5,119
    59d4:	003f9506 	br	582c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700582c>
    59d8:	00c15504 	movi	r3,1364
    59dc:	19400536 	bltu	r3,r5,59f4 <_free_r+0x2f0>
    59e0:	100ad4ba 	srli	r5,r2,18
    59e4:	28c01f44 	addi	r3,r5,125
    59e8:	18c7883a 	add	r3,r3,r3
    59ec:	29401f04 	addi	r5,r5,124
    59f0:	003f8e06 	br	582c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700582c>
    59f4:	00c03f84 	movi	r3,254
    59f8:	01401f84 	movi	r5,126
    59fc:	003f8b06 	br	582c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700582c>
    5a00:	10c00054 	ori	r3,r2,1
    5a04:	30c00115 	stw	r3,4(r6)
    5a08:	308d883a 	add	r6,r6,r2
    5a0c:	30800015 	stw	r2,0(r6)
    5a10:	003f7806 	br	57f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70057f4>

00005a14 <__sfvwrite_r>:
    5a14:	30800217 	ldw	r2,8(r6)
    5a18:	10006726 	beq	r2,zero,5bb8 <__sfvwrite_r+0x1a4>
    5a1c:	28c0030b 	ldhu	r3,12(r5)
    5a20:	defff404 	addi	sp,sp,-48
    5a24:	dd400715 	stw	r21,28(sp)
    5a28:	dd000615 	stw	r20,24(sp)
    5a2c:	dc000215 	stw	r16,8(sp)
    5a30:	dfc00b15 	stw	ra,44(sp)
    5a34:	df000a15 	stw	fp,40(sp)
    5a38:	ddc00915 	stw	r23,36(sp)
    5a3c:	dd800815 	stw	r22,32(sp)
    5a40:	dcc00515 	stw	r19,20(sp)
    5a44:	dc800415 	stw	r18,16(sp)
    5a48:	dc400315 	stw	r17,12(sp)
    5a4c:	1880020c 	andi	r2,r3,8
    5a50:	2821883a 	mov	r16,r5
    5a54:	202b883a 	mov	r21,r4
    5a58:	3029883a 	mov	r20,r6
    5a5c:	10002726 	beq	r2,zero,5afc <__sfvwrite_r+0xe8>
    5a60:	28800417 	ldw	r2,16(r5)
    5a64:	10002526 	beq	r2,zero,5afc <__sfvwrite_r+0xe8>
    5a68:	1880008c 	andi	r2,r3,2
    5a6c:	a4400017 	ldw	r17,0(r20)
    5a70:	10002a26 	beq	r2,zero,5b1c <__sfvwrite_r+0x108>
    5a74:	05a00034 	movhi	r22,32768
    5a78:	0027883a 	mov	r19,zero
    5a7c:	0025883a 	mov	r18,zero
    5a80:	b5bf0004 	addi	r22,r22,-1024
    5a84:	980d883a 	mov	r6,r19
    5a88:	a809883a 	mov	r4,r21
    5a8c:	90004626 	beq	r18,zero,5ba8 <__sfvwrite_r+0x194>
    5a90:	900f883a 	mov	r7,r18
    5a94:	b480022e 	bgeu	r22,r18,5aa0 <__sfvwrite_r+0x8c>
    5a98:	01e00034 	movhi	r7,32768
    5a9c:	39ff0004 	addi	r7,r7,-1024
    5aa0:	80800917 	ldw	r2,36(r16)
    5aa4:	81400717 	ldw	r5,28(r16)
    5aa8:	103ee83a 	callr	r2
    5aac:	0080570e 	bge	zero,r2,5c0c <__sfvwrite_r+0x1f8>
    5ab0:	a0c00217 	ldw	r3,8(r20)
    5ab4:	98a7883a 	add	r19,r19,r2
    5ab8:	90a5c83a 	sub	r18,r18,r2
    5abc:	1885c83a 	sub	r2,r3,r2
    5ac0:	a0800215 	stw	r2,8(r20)
    5ac4:	103fef1e 	bne	r2,zero,5a84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005a84>
    5ac8:	0005883a 	mov	r2,zero
    5acc:	dfc00b17 	ldw	ra,44(sp)
    5ad0:	df000a17 	ldw	fp,40(sp)
    5ad4:	ddc00917 	ldw	r23,36(sp)
    5ad8:	dd800817 	ldw	r22,32(sp)
    5adc:	dd400717 	ldw	r21,28(sp)
    5ae0:	dd000617 	ldw	r20,24(sp)
    5ae4:	dcc00517 	ldw	r19,20(sp)
    5ae8:	dc800417 	ldw	r18,16(sp)
    5aec:	dc400317 	ldw	r17,12(sp)
    5af0:	dc000217 	ldw	r16,8(sp)
    5af4:	dec00c04 	addi	sp,sp,48
    5af8:	f800283a 	ret
    5afc:	800b883a 	mov	r5,r16
    5b00:	a809883a 	mov	r4,r21
    5b04:	00035bc0 	call	35bc <__swsetup_r>
    5b08:	1000eb1e 	bne	r2,zero,5eb8 <__sfvwrite_r+0x4a4>
    5b0c:	80c0030b 	ldhu	r3,12(r16)
    5b10:	a4400017 	ldw	r17,0(r20)
    5b14:	1880008c 	andi	r2,r3,2
    5b18:	103fd61e 	bne	r2,zero,5a74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005a74>
    5b1c:	1880004c 	andi	r2,r3,1
    5b20:	10003f1e 	bne	r2,zero,5c20 <__sfvwrite_r+0x20c>
    5b24:	0039883a 	mov	fp,zero
    5b28:	0025883a 	mov	r18,zero
    5b2c:	90001a26 	beq	r18,zero,5b98 <__sfvwrite_r+0x184>
    5b30:	1880800c 	andi	r2,r3,512
    5b34:	84c00217 	ldw	r19,8(r16)
    5b38:	10002126 	beq	r2,zero,5bc0 <__sfvwrite_r+0x1ac>
    5b3c:	982f883a 	mov	r23,r19
    5b40:	94c09336 	bltu	r18,r19,5d90 <__sfvwrite_r+0x37c>
    5b44:	1881200c 	andi	r2,r3,1152
    5b48:	10009e1e 	bne	r2,zero,5dc4 <__sfvwrite_r+0x3b0>
    5b4c:	81000017 	ldw	r4,0(r16)
    5b50:	b80d883a 	mov	r6,r23
    5b54:	e00b883a 	mov	r5,fp
    5b58:	0006d280 	call	6d28 <memmove>
    5b5c:	80c00217 	ldw	r3,8(r16)
    5b60:	81000017 	ldw	r4,0(r16)
    5b64:	9005883a 	mov	r2,r18
    5b68:	1ce7c83a 	sub	r19,r3,r19
    5b6c:	25cf883a 	add	r7,r4,r23
    5b70:	84c00215 	stw	r19,8(r16)
    5b74:	81c00015 	stw	r7,0(r16)
    5b78:	a0c00217 	ldw	r3,8(r20)
    5b7c:	e0b9883a 	add	fp,fp,r2
    5b80:	90a5c83a 	sub	r18,r18,r2
    5b84:	18a7c83a 	sub	r19,r3,r2
    5b88:	a4c00215 	stw	r19,8(r20)
    5b8c:	983fce26 	beq	r19,zero,5ac8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005ac8>
    5b90:	80c0030b 	ldhu	r3,12(r16)
    5b94:	903fe61e 	bne	r18,zero,5b30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005b30>
    5b98:	8f000017 	ldw	fp,0(r17)
    5b9c:	8c800117 	ldw	r18,4(r17)
    5ba0:	8c400204 	addi	r17,r17,8
    5ba4:	003fe106 	br	5b2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005b2c>
    5ba8:	8cc00017 	ldw	r19,0(r17)
    5bac:	8c800117 	ldw	r18,4(r17)
    5bb0:	8c400204 	addi	r17,r17,8
    5bb4:	003fb306 	br	5a84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005a84>
    5bb8:	0005883a 	mov	r2,zero
    5bbc:	f800283a 	ret
    5bc0:	81000017 	ldw	r4,0(r16)
    5bc4:	80800417 	ldw	r2,16(r16)
    5bc8:	11005736 	bltu	r2,r4,5d28 <__sfvwrite_r+0x314>
    5bcc:	85c00517 	ldw	r23,20(r16)
    5bd0:	95c05536 	bltu	r18,r23,5d28 <__sfvwrite_r+0x314>
    5bd4:	00a00034 	movhi	r2,32768
    5bd8:	10bfffc4 	addi	r2,r2,-1
    5bdc:	9009883a 	mov	r4,r18
    5be0:	1480012e 	bgeu	r2,r18,5be8 <__sfvwrite_r+0x1d4>
    5be4:	1009883a 	mov	r4,r2
    5be8:	b80b883a 	mov	r5,r23
    5bec:	000b2180 	call	b218 <__divsi3>
    5bf0:	15cf383a 	mul	r7,r2,r23
    5bf4:	81400717 	ldw	r5,28(r16)
    5bf8:	80800917 	ldw	r2,36(r16)
    5bfc:	e00d883a 	mov	r6,fp
    5c00:	a809883a 	mov	r4,r21
    5c04:	103ee83a 	callr	r2
    5c08:	00bfdb16 	blt	zero,r2,5b78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005b78>
    5c0c:	8080030b 	ldhu	r2,12(r16)
    5c10:	10801014 	ori	r2,r2,64
    5c14:	8080030d 	sth	r2,12(r16)
    5c18:	00bfffc4 	movi	r2,-1
    5c1c:	003fab06 	br	5acc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005acc>
    5c20:	0027883a 	mov	r19,zero
    5c24:	0011883a 	mov	r8,zero
    5c28:	0039883a 	mov	fp,zero
    5c2c:	0025883a 	mov	r18,zero
    5c30:	90001f26 	beq	r18,zero,5cb0 <__sfvwrite_r+0x29c>
    5c34:	40005a26 	beq	r8,zero,5da0 <__sfvwrite_r+0x38c>
    5c38:	982d883a 	mov	r22,r19
    5c3c:	94c0012e 	bgeu	r18,r19,5c44 <__sfvwrite_r+0x230>
    5c40:	902d883a 	mov	r22,r18
    5c44:	81000017 	ldw	r4,0(r16)
    5c48:	80800417 	ldw	r2,16(r16)
    5c4c:	b02f883a 	mov	r23,r22
    5c50:	81c00517 	ldw	r7,20(r16)
    5c54:	1100032e 	bgeu	r2,r4,5c64 <__sfvwrite_r+0x250>
    5c58:	80c00217 	ldw	r3,8(r16)
    5c5c:	38c7883a 	add	r3,r7,r3
    5c60:	1d801816 	blt	r3,r22,5cc4 <__sfvwrite_r+0x2b0>
    5c64:	b1c03e16 	blt	r22,r7,5d60 <__sfvwrite_r+0x34c>
    5c68:	80800917 	ldw	r2,36(r16)
    5c6c:	81400717 	ldw	r5,28(r16)
    5c70:	e00d883a 	mov	r6,fp
    5c74:	da000115 	stw	r8,4(sp)
    5c78:	a809883a 	mov	r4,r21
    5c7c:	103ee83a 	callr	r2
    5c80:	102f883a 	mov	r23,r2
    5c84:	da000117 	ldw	r8,4(sp)
    5c88:	00bfe00e 	bge	zero,r2,5c0c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005c0c>
    5c8c:	9de7c83a 	sub	r19,r19,r23
    5c90:	98001f26 	beq	r19,zero,5d10 <__sfvwrite_r+0x2fc>
    5c94:	a0800217 	ldw	r2,8(r20)
    5c98:	e5f9883a 	add	fp,fp,r23
    5c9c:	95e5c83a 	sub	r18,r18,r23
    5ca0:	15efc83a 	sub	r23,r2,r23
    5ca4:	a5c00215 	stw	r23,8(r20)
    5ca8:	b83f8726 	beq	r23,zero,5ac8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005ac8>
    5cac:	903fe11e 	bne	r18,zero,5c34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005c34>
    5cb0:	8f000017 	ldw	fp,0(r17)
    5cb4:	8c800117 	ldw	r18,4(r17)
    5cb8:	0011883a 	mov	r8,zero
    5cbc:	8c400204 	addi	r17,r17,8
    5cc0:	003fdb06 	br	5c30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005c30>
    5cc4:	180d883a 	mov	r6,r3
    5cc8:	e00b883a 	mov	r5,fp
    5ccc:	da000115 	stw	r8,4(sp)
    5cd0:	d8c00015 	stw	r3,0(sp)
    5cd4:	0006d280 	call	6d28 <memmove>
    5cd8:	d8c00017 	ldw	r3,0(sp)
    5cdc:	80800017 	ldw	r2,0(r16)
    5ce0:	800b883a 	mov	r5,r16
    5ce4:	a809883a 	mov	r4,r21
    5ce8:	10c5883a 	add	r2,r2,r3
    5cec:	80800015 	stw	r2,0(r16)
    5cf0:	d8c00015 	stw	r3,0(sp)
    5cf4:	00051b40 	call	51b4 <_fflush_r>
    5cf8:	d8c00017 	ldw	r3,0(sp)
    5cfc:	da000117 	ldw	r8,4(sp)
    5d00:	103fc21e 	bne	r2,zero,5c0c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005c0c>
    5d04:	182f883a 	mov	r23,r3
    5d08:	9de7c83a 	sub	r19,r19,r23
    5d0c:	983fe11e 	bne	r19,zero,5c94 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005c94>
    5d10:	800b883a 	mov	r5,r16
    5d14:	a809883a 	mov	r4,r21
    5d18:	00051b40 	call	51b4 <_fflush_r>
    5d1c:	103fbb1e 	bne	r2,zero,5c0c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005c0c>
    5d20:	0011883a 	mov	r8,zero
    5d24:	003fdb06 	br	5c94 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005c94>
    5d28:	94c0012e 	bgeu	r18,r19,5d30 <__sfvwrite_r+0x31c>
    5d2c:	9027883a 	mov	r19,r18
    5d30:	980d883a 	mov	r6,r19
    5d34:	e00b883a 	mov	r5,fp
    5d38:	0006d280 	call	6d28 <memmove>
    5d3c:	80800217 	ldw	r2,8(r16)
    5d40:	80c00017 	ldw	r3,0(r16)
    5d44:	14c5c83a 	sub	r2,r2,r19
    5d48:	1cc7883a 	add	r3,r3,r19
    5d4c:	80800215 	stw	r2,8(r16)
    5d50:	80c00015 	stw	r3,0(r16)
    5d54:	10004326 	beq	r2,zero,5e64 <__sfvwrite_r+0x450>
    5d58:	9805883a 	mov	r2,r19
    5d5c:	003f8606 	br	5b78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005b78>
    5d60:	b00d883a 	mov	r6,r22
    5d64:	e00b883a 	mov	r5,fp
    5d68:	da000115 	stw	r8,4(sp)
    5d6c:	0006d280 	call	6d28 <memmove>
    5d70:	80800217 	ldw	r2,8(r16)
    5d74:	80c00017 	ldw	r3,0(r16)
    5d78:	da000117 	ldw	r8,4(sp)
    5d7c:	1585c83a 	sub	r2,r2,r22
    5d80:	1dad883a 	add	r22,r3,r22
    5d84:	80800215 	stw	r2,8(r16)
    5d88:	85800015 	stw	r22,0(r16)
    5d8c:	003fbf06 	br	5c8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005c8c>
    5d90:	81000017 	ldw	r4,0(r16)
    5d94:	9027883a 	mov	r19,r18
    5d98:	902f883a 	mov	r23,r18
    5d9c:	003f6c06 	br	5b50 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005b50>
    5da0:	900d883a 	mov	r6,r18
    5da4:	01400284 	movi	r5,10
    5da8:	e009883a 	mov	r4,fp
    5dac:	0006afc0 	call	6afc <memchr>
    5db0:	10003e26 	beq	r2,zero,5eac <__sfvwrite_r+0x498>
    5db4:	10800044 	addi	r2,r2,1
    5db8:	1727c83a 	sub	r19,r2,fp
    5dbc:	02000044 	movi	r8,1
    5dc0:	003f9d06 	br	5c38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005c38>
    5dc4:	80800517 	ldw	r2,20(r16)
    5dc8:	81400417 	ldw	r5,16(r16)
    5dcc:	81c00017 	ldw	r7,0(r16)
    5dd0:	10a7883a 	add	r19,r2,r2
    5dd4:	9885883a 	add	r2,r19,r2
    5dd8:	1026d7fa 	srli	r19,r2,31
    5ddc:	396dc83a 	sub	r22,r7,r5
    5de0:	b1000044 	addi	r4,r22,1
    5de4:	9885883a 	add	r2,r19,r2
    5de8:	1027d07a 	srai	r19,r2,1
    5dec:	2485883a 	add	r2,r4,r18
    5df0:	980d883a 	mov	r6,r19
    5df4:	9880022e 	bgeu	r19,r2,5e00 <__sfvwrite_r+0x3ec>
    5df8:	1027883a 	mov	r19,r2
    5dfc:	100d883a 	mov	r6,r2
    5e00:	18c1000c 	andi	r3,r3,1024
    5e04:	18001c26 	beq	r3,zero,5e78 <__sfvwrite_r+0x464>
    5e08:	300b883a 	mov	r5,r6
    5e0c:	a809883a 	mov	r4,r21
    5e10:	00062f00 	call	62f0 <_malloc_r>
    5e14:	102f883a 	mov	r23,r2
    5e18:	10002926 	beq	r2,zero,5ec0 <__sfvwrite_r+0x4ac>
    5e1c:	81400417 	ldw	r5,16(r16)
    5e20:	b00d883a 	mov	r6,r22
    5e24:	1009883a 	mov	r4,r2
    5e28:	0006be00 	call	6be0 <memcpy>
    5e2c:	8080030b 	ldhu	r2,12(r16)
    5e30:	00fedfc4 	movi	r3,-1153
    5e34:	10c4703a 	and	r2,r2,r3
    5e38:	10802014 	ori	r2,r2,128
    5e3c:	8080030d 	sth	r2,12(r16)
    5e40:	bd89883a 	add	r4,r23,r22
    5e44:	9d8fc83a 	sub	r7,r19,r22
    5e48:	85c00415 	stw	r23,16(r16)
    5e4c:	84c00515 	stw	r19,20(r16)
    5e50:	81000015 	stw	r4,0(r16)
    5e54:	9027883a 	mov	r19,r18
    5e58:	81c00215 	stw	r7,8(r16)
    5e5c:	902f883a 	mov	r23,r18
    5e60:	003f3b06 	br	5b50 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005b50>
    5e64:	800b883a 	mov	r5,r16
    5e68:	a809883a 	mov	r4,r21
    5e6c:	00051b40 	call	51b4 <_fflush_r>
    5e70:	103fb926 	beq	r2,zero,5d58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005d58>
    5e74:	003f6506 	br	5c0c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005c0c>
    5e78:	a809883a 	mov	r4,r21
    5e7c:	0007fa80 	call	7fa8 <_realloc_r>
    5e80:	102f883a 	mov	r23,r2
    5e84:	103fee1e 	bne	r2,zero,5e40 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005e40>
    5e88:	81400417 	ldw	r5,16(r16)
    5e8c:	a809883a 	mov	r4,r21
    5e90:	00057040 	call	5704 <_free_r>
    5e94:	8080030b 	ldhu	r2,12(r16)
    5e98:	00ffdfc4 	movi	r3,-129
    5e9c:	1884703a 	and	r2,r3,r2
    5ea0:	00c00304 	movi	r3,12
    5ea4:	a8c00015 	stw	r3,0(r21)
    5ea8:	003f5906 	br	5c10 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005c10>
    5eac:	94c00044 	addi	r19,r18,1
    5eb0:	02000044 	movi	r8,1
    5eb4:	003f6006 	br	5c38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005c38>
    5eb8:	00bfffc4 	movi	r2,-1
    5ebc:	003f0306 	br	5acc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005acc>
    5ec0:	00800304 	movi	r2,12
    5ec4:	a8800015 	stw	r2,0(r21)
    5ec8:	8080030b 	ldhu	r2,12(r16)
    5ecc:	003f5006 	br	5c10 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005c10>

00005ed0 <_fwalk>:
    5ed0:	defff704 	addi	sp,sp,-36
    5ed4:	dd000415 	stw	r20,16(sp)
    5ed8:	dfc00815 	stw	ra,32(sp)
    5edc:	ddc00715 	stw	r23,28(sp)
    5ee0:	dd800615 	stw	r22,24(sp)
    5ee4:	dd400515 	stw	r21,20(sp)
    5ee8:	dcc00315 	stw	r19,12(sp)
    5eec:	dc800215 	stw	r18,8(sp)
    5ef0:	dc400115 	stw	r17,4(sp)
    5ef4:	dc000015 	stw	r16,0(sp)
    5ef8:	2500b804 	addi	r20,r4,736
    5efc:	a0002326 	beq	r20,zero,5f8c <_fwalk+0xbc>
    5f00:	282b883a 	mov	r21,r5
    5f04:	002f883a 	mov	r23,zero
    5f08:	05800044 	movi	r22,1
    5f0c:	04ffffc4 	movi	r19,-1
    5f10:	a4400117 	ldw	r17,4(r20)
    5f14:	a4800217 	ldw	r18,8(r20)
    5f18:	8c7fffc4 	addi	r17,r17,-1
    5f1c:	88000d16 	blt	r17,zero,5f54 <_fwalk+0x84>
    5f20:	94000304 	addi	r16,r18,12
    5f24:	94800384 	addi	r18,r18,14
    5f28:	8080000b 	ldhu	r2,0(r16)
    5f2c:	8c7fffc4 	addi	r17,r17,-1
    5f30:	813ffd04 	addi	r4,r16,-12
    5f34:	b080042e 	bgeu	r22,r2,5f48 <_fwalk+0x78>
    5f38:	9080000f 	ldh	r2,0(r18)
    5f3c:	14c00226 	beq	r2,r19,5f48 <_fwalk+0x78>
    5f40:	a83ee83a 	callr	r21
    5f44:	b8aeb03a 	or	r23,r23,r2
    5f48:	84001a04 	addi	r16,r16,104
    5f4c:	94801a04 	addi	r18,r18,104
    5f50:	8cfff51e 	bne	r17,r19,5f28 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005f28>
    5f54:	a5000017 	ldw	r20,0(r20)
    5f58:	a03fed1e 	bne	r20,zero,5f10 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005f10>
    5f5c:	b805883a 	mov	r2,r23
    5f60:	dfc00817 	ldw	ra,32(sp)
    5f64:	ddc00717 	ldw	r23,28(sp)
    5f68:	dd800617 	ldw	r22,24(sp)
    5f6c:	dd400517 	ldw	r21,20(sp)
    5f70:	dd000417 	ldw	r20,16(sp)
    5f74:	dcc00317 	ldw	r19,12(sp)
    5f78:	dc800217 	ldw	r18,8(sp)
    5f7c:	dc400117 	ldw	r17,4(sp)
    5f80:	dc000017 	ldw	r16,0(sp)
    5f84:	dec00904 	addi	sp,sp,36
    5f88:	f800283a 	ret
    5f8c:	002f883a 	mov	r23,zero
    5f90:	003ff206 	br	5f5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005f5c>

00005f94 <_fwalk_reent>:
    5f94:	defff704 	addi	sp,sp,-36
    5f98:	dd000415 	stw	r20,16(sp)
    5f9c:	dfc00815 	stw	ra,32(sp)
    5fa0:	ddc00715 	stw	r23,28(sp)
    5fa4:	dd800615 	stw	r22,24(sp)
    5fa8:	dd400515 	stw	r21,20(sp)
    5fac:	dcc00315 	stw	r19,12(sp)
    5fb0:	dc800215 	stw	r18,8(sp)
    5fb4:	dc400115 	stw	r17,4(sp)
    5fb8:	dc000015 	stw	r16,0(sp)
    5fbc:	2500b804 	addi	r20,r4,736
    5fc0:	a0002326 	beq	r20,zero,6050 <_fwalk_reent+0xbc>
    5fc4:	282b883a 	mov	r21,r5
    5fc8:	2027883a 	mov	r19,r4
    5fcc:	002f883a 	mov	r23,zero
    5fd0:	05800044 	movi	r22,1
    5fd4:	04bfffc4 	movi	r18,-1
    5fd8:	a4400117 	ldw	r17,4(r20)
    5fdc:	a4000217 	ldw	r16,8(r20)
    5fe0:	8c7fffc4 	addi	r17,r17,-1
    5fe4:	88000c16 	blt	r17,zero,6018 <_fwalk_reent+0x84>
    5fe8:	84000304 	addi	r16,r16,12
    5fec:	8080000b 	ldhu	r2,0(r16)
    5ff0:	8c7fffc4 	addi	r17,r17,-1
    5ff4:	817ffd04 	addi	r5,r16,-12
    5ff8:	b080052e 	bgeu	r22,r2,6010 <_fwalk_reent+0x7c>
    5ffc:	8080008f 	ldh	r2,2(r16)
    6000:	9809883a 	mov	r4,r19
    6004:	14800226 	beq	r2,r18,6010 <_fwalk_reent+0x7c>
    6008:	a83ee83a 	callr	r21
    600c:	b8aeb03a 	or	r23,r23,r2
    6010:	84001a04 	addi	r16,r16,104
    6014:	8cbff51e 	bne	r17,r18,5fec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005fec>
    6018:	a5000017 	ldw	r20,0(r20)
    601c:	a03fee1e 	bne	r20,zero,5fd8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005fd8>
    6020:	b805883a 	mov	r2,r23
    6024:	dfc00817 	ldw	ra,32(sp)
    6028:	ddc00717 	ldw	r23,28(sp)
    602c:	dd800617 	ldw	r22,24(sp)
    6030:	dd400517 	ldw	r21,20(sp)
    6034:	dd000417 	ldw	r20,16(sp)
    6038:	dcc00317 	ldw	r19,12(sp)
    603c:	dc800217 	ldw	r18,8(sp)
    6040:	dc400117 	ldw	r17,4(sp)
    6044:	dc000017 	ldw	r16,0(sp)
    6048:	dec00904 	addi	sp,sp,36
    604c:	f800283a 	ret
    6050:	002f883a 	mov	r23,zero
    6054:	003ff206 	br	6020 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006020>

00006058 <_setlocale_r>:
    6058:	30001b26 	beq	r6,zero,60c8 <_setlocale_r+0x70>
    605c:	01400074 	movhi	r5,1
    6060:	defffe04 	addi	sp,sp,-8
    6064:	295c9904 	addi	r5,r5,29284
    6068:	3009883a 	mov	r4,r6
    606c:	dc000015 	stw	r16,0(sp)
    6070:	dfc00115 	stw	ra,4(sp)
    6074:	3021883a 	mov	r16,r6
    6078:	00087100 	call	8710 <strcmp>
    607c:	1000061e 	bne	r2,zero,6098 <_setlocale_r+0x40>
    6080:	00800074 	movhi	r2,1
    6084:	109c9804 	addi	r2,r2,29280
    6088:	dfc00117 	ldw	ra,4(sp)
    608c:	dc000017 	ldw	r16,0(sp)
    6090:	dec00204 	addi	sp,sp,8
    6094:	f800283a 	ret
    6098:	01400074 	movhi	r5,1
    609c:	295c9804 	addi	r5,r5,29280
    60a0:	8009883a 	mov	r4,r16
    60a4:	00087100 	call	8710 <strcmp>
    60a8:	103ff526 	beq	r2,zero,6080 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006080>
    60ac:	01400074 	movhi	r5,1
    60b0:	295c8304 	addi	r5,r5,29196
    60b4:	8009883a 	mov	r4,r16
    60b8:	00087100 	call	8710 <strcmp>
    60bc:	103ff026 	beq	r2,zero,6080 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006080>
    60c0:	0005883a 	mov	r2,zero
    60c4:	003ff006 	br	6088 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006088>
    60c8:	00800074 	movhi	r2,1
    60cc:	109c9804 	addi	r2,r2,29280
    60d0:	f800283a 	ret

000060d4 <__locale_charset>:
    60d4:	00800074 	movhi	r2,1
    60d8:	109eb104 	addi	r2,r2,31428
    60dc:	f800283a 	ret

000060e0 <__locale_mb_cur_max>:
    60e0:	008000b4 	movhi	r2,2
    60e4:	10a54a04 	addi	r2,r2,-27352
    60e8:	10800017 	ldw	r2,0(r2)
    60ec:	f800283a 	ret

000060f0 <__locale_msgcharset>:
    60f0:	00800074 	movhi	r2,1
    60f4:	109ea904 	addi	r2,r2,31396
    60f8:	f800283a 	ret

000060fc <__locale_cjk_lang>:
    60fc:	0005883a 	mov	r2,zero
    6100:	f800283a 	ret

00006104 <_localeconv_r>:
    6104:	00800074 	movhi	r2,1
    6108:	109eb904 	addi	r2,r2,31460
    610c:	f800283a 	ret

00006110 <setlocale>:
    6110:	008000b4 	movhi	r2,2
    6114:	10a54904 	addi	r2,r2,-27356
    6118:	280d883a 	mov	r6,r5
    611c:	200b883a 	mov	r5,r4
    6120:	11000017 	ldw	r4,0(r2)
    6124:	00060581 	jmpi	6058 <_setlocale_r>

00006128 <localeconv>:
    6128:	00800074 	movhi	r2,1
    612c:	109eb904 	addi	r2,r2,31460
    6130:	f800283a 	ret

00006134 <__smakebuf_r>:
    6134:	2880030b 	ldhu	r2,12(r5)
    6138:	10c0008c 	andi	r3,r2,2
    613c:	1800411e 	bne	r3,zero,6244 <__smakebuf_r+0x110>
    6140:	deffec04 	addi	sp,sp,-80
    6144:	dc000f15 	stw	r16,60(sp)
    6148:	2821883a 	mov	r16,r5
    614c:	2940038f 	ldh	r5,14(r5)
    6150:	dc401015 	stw	r17,64(sp)
    6154:	dfc01315 	stw	ra,76(sp)
    6158:	dcc01215 	stw	r19,72(sp)
    615c:	dc801115 	stw	r18,68(sp)
    6160:	2023883a 	mov	r17,r4
    6164:	28001c16 	blt	r5,zero,61d8 <__smakebuf_r+0xa4>
    6168:	d80d883a 	mov	r6,sp
    616c:	000a2b80 	call	a2b8 <_fstat_r>
    6170:	10001816 	blt	r2,zero,61d4 <__smakebuf_r+0xa0>
    6174:	d8800117 	ldw	r2,4(sp)
    6178:	00e00014 	movui	r3,32768
    617c:	10bc000c 	andi	r2,r2,61440
    6180:	14c80020 	cmpeqi	r19,r2,8192
    6184:	10c03726 	beq	r2,r3,6264 <__smakebuf_r+0x130>
    6188:	80c0030b 	ldhu	r3,12(r16)
    618c:	18c20014 	ori	r3,r3,2048
    6190:	80c0030d 	sth	r3,12(r16)
    6194:	00c80004 	movi	r3,8192
    6198:	10c0521e 	bne	r2,r3,62e4 <__smakebuf_r+0x1b0>
    619c:	8140038f 	ldh	r5,14(r16)
    61a0:	8809883a 	mov	r4,r17
    61a4:	000a3140 	call	a314 <_isatty_r>
    61a8:	10004c26 	beq	r2,zero,62dc <__smakebuf_r+0x1a8>
    61ac:	8080030b 	ldhu	r2,12(r16)
    61b0:	80c010c4 	addi	r3,r16,67
    61b4:	80c00015 	stw	r3,0(r16)
    61b8:	10800054 	ori	r2,r2,1
    61bc:	8080030d 	sth	r2,12(r16)
    61c0:	00800044 	movi	r2,1
    61c4:	80c00415 	stw	r3,16(r16)
    61c8:	80800515 	stw	r2,20(r16)
    61cc:	04810004 	movi	r18,1024
    61d0:	00000706 	br	61f0 <__smakebuf_r+0xbc>
    61d4:	8080030b 	ldhu	r2,12(r16)
    61d8:	10c0200c 	andi	r3,r2,128
    61dc:	18001f1e 	bne	r3,zero,625c <__smakebuf_r+0x128>
    61e0:	04810004 	movi	r18,1024
    61e4:	10820014 	ori	r2,r2,2048
    61e8:	8080030d 	sth	r2,12(r16)
    61ec:	0027883a 	mov	r19,zero
    61f0:	900b883a 	mov	r5,r18
    61f4:	8809883a 	mov	r4,r17
    61f8:	00062f00 	call	62f0 <_malloc_r>
    61fc:	10002c26 	beq	r2,zero,62b0 <__smakebuf_r+0x17c>
    6200:	80c0030b 	ldhu	r3,12(r16)
    6204:	01000034 	movhi	r4,0
    6208:	21149204 	addi	r4,r4,21064
    620c:	89000f15 	stw	r4,60(r17)
    6210:	18c02014 	ori	r3,r3,128
    6214:	80c0030d 	sth	r3,12(r16)
    6218:	80800015 	stw	r2,0(r16)
    621c:	80800415 	stw	r2,16(r16)
    6220:	84800515 	stw	r18,20(r16)
    6224:	98001a1e 	bne	r19,zero,6290 <__smakebuf_r+0x15c>
    6228:	dfc01317 	ldw	ra,76(sp)
    622c:	dcc01217 	ldw	r19,72(sp)
    6230:	dc801117 	ldw	r18,68(sp)
    6234:	dc401017 	ldw	r17,64(sp)
    6238:	dc000f17 	ldw	r16,60(sp)
    623c:	dec01404 	addi	sp,sp,80
    6240:	f800283a 	ret
    6244:	288010c4 	addi	r2,r5,67
    6248:	28800015 	stw	r2,0(r5)
    624c:	28800415 	stw	r2,16(r5)
    6250:	00800044 	movi	r2,1
    6254:	28800515 	stw	r2,20(r5)
    6258:	f800283a 	ret
    625c:	04801004 	movi	r18,64
    6260:	003fe006 	br	61e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70061e4>
    6264:	81000a17 	ldw	r4,40(r16)
    6268:	00c00074 	movhi	r3,1
    626c:	18e1ab04 	addi	r3,r3,-31060
    6270:	20ffc51e 	bne	r4,r3,6188 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006188>
    6274:	8080030b 	ldhu	r2,12(r16)
    6278:	04810004 	movi	r18,1024
    627c:	84801315 	stw	r18,76(r16)
    6280:	1484b03a 	or	r2,r2,r18
    6284:	8080030d 	sth	r2,12(r16)
    6288:	0027883a 	mov	r19,zero
    628c:	003fd806 	br	61f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70061f0>
    6290:	8140038f 	ldh	r5,14(r16)
    6294:	8809883a 	mov	r4,r17
    6298:	000a3140 	call	a314 <_isatty_r>
    629c:	103fe226 	beq	r2,zero,6228 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006228>
    62a0:	8080030b 	ldhu	r2,12(r16)
    62a4:	10800054 	ori	r2,r2,1
    62a8:	8080030d 	sth	r2,12(r16)
    62ac:	003fde06 	br	6228 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006228>
    62b0:	8080030b 	ldhu	r2,12(r16)
    62b4:	10c0800c 	andi	r3,r2,512
    62b8:	183fdb1e 	bne	r3,zero,6228 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006228>
    62bc:	10800094 	ori	r2,r2,2
    62c0:	80c010c4 	addi	r3,r16,67
    62c4:	8080030d 	sth	r2,12(r16)
    62c8:	00800044 	movi	r2,1
    62cc:	80c00015 	stw	r3,0(r16)
    62d0:	80c00415 	stw	r3,16(r16)
    62d4:	80800515 	stw	r2,20(r16)
    62d8:	003fd306 	br	6228 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006228>
    62dc:	04810004 	movi	r18,1024
    62e0:	003fc306 	br	61f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70061f0>
    62e4:	0027883a 	mov	r19,zero
    62e8:	04810004 	movi	r18,1024
    62ec:	003fc006 	br	61f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70061f0>

000062f0 <_malloc_r>:
    62f0:	defff504 	addi	sp,sp,-44
    62f4:	dc800315 	stw	r18,12(sp)
    62f8:	dfc00a15 	stw	ra,40(sp)
    62fc:	df000915 	stw	fp,36(sp)
    6300:	ddc00815 	stw	r23,32(sp)
    6304:	dd800715 	stw	r22,28(sp)
    6308:	dd400615 	stw	r21,24(sp)
    630c:	dd000515 	stw	r20,20(sp)
    6310:	dcc00415 	stw	r19,16(sp)
    6314:	dc400215 	stw	r17,8(sp)
    6318:	dc000115 	stw	r16,4(sp)
    631c:	288002c4 	addi	r2,r5,11
    6320:	00c00584 	movi	r3,22
    6324:	2025883a 	mov	r18,r4
    6328:	18807f2e 	bgeu	r3,r2,6528 <_malloc_r+0x238>
    632c:	047ffe04 	movi	r17,-8
    6330:	1462703a 	and	r17,r2,r17
    6334:	8800a316 	blt	r17,zero,65c4 <_malloc_r+0x2d4>
    6338:	8940a236 	bltu	r17,r5,65c4 <_malloc_r+0x2d4>
    633c:	000dfb00 	call	dfb0 <__malloc_lock>
    6340:	00807dc4 	movi	r2,503
    6344:	1441e92e 	bgeu	r2,r17,6aec <_malloc_r+0x7fc>
    6348:	8804d27a 	srli	r2,r17,9
    634c:	1000a126 	beq	r2,zero,65d4 <_malloc_r+0x2e4>
    6350:	00c00104 	movi	r3,4
    6354:	18811e36 	bltu	r3,r2,67d0 <_malloc_r+0x4e0>
    6358:	8804d1ba 	srli	r2,r17,6
    635c:	12000e44 	addi	r8,r2,57
    6360:	11c00e04 	addi	r7,r2,56
    6364:	4209883a 	add	r4,r8,r8
    6368:	04c00074 	movhi	r19,1
    636c:	2109883a 	add	r4,r4,r4
    6370:	9cdec704 	addi	r19,r19,31516
    6374:	2109883a 	add	r4,r4,r4
    6378:	9909883a 	add	r4,r19,r4
    637c:	24000117 	ldw	r16,4(r4)
    6380:	213ffe04 	addi	r4,r4,-8
    6384:	24009726 	beq	r4,r16,65e4 <_malloc_r+0x2f4>
    6388:	80800117 	ldw	r2,4(r16)
    638c:	01bfff04 	movi	r6,-4
    6390:	014003c4 	movi	r5,15
    6394:	1184703a 	and	r2,r2,r6
    6398:	1447c83a 	sub	r3,r2,r17
    639c:	28c00716 	blt	r5,r3,63bc <_malloc_r+0xcc>
    63a0:	1800920e 	bge	r3,zero,65ec <_malloc_r+0x2fc>
    63a4:	84000317 	ldw	r16,12(r16)
    63a8:	24008e26 	beq	r4,r16,65e4 <_malloc_r+0x2f4>
    63ac:	80800117 	ldw	r2,4(r16)
    63b0:	1184703a 	and	r2,r2,r6
    63b4:	1447c83a 	sub	r3,r2,r17
    63b8:	28fff90e 	bge	r5,r3,63a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70063a0>
    63bc:	3809883a 	mov	r4,r7
    63c0:	01800074 	movhi	r6,1
    63c4:	9c000417 	ldw	r16,16(r19)
    63c8:	319ec704 	addi	r6,r6,31516
    63cc:	32000204 	addi	r8,r6,8
    63d0:	82013426 	beq	r16,r8,68a4 <_malloc_r+0x5b4>
    63d4:	80c00117 	ldw	r3,4(r16)
    63d8:	00bfff04 	movi	r2,-4
    63dc:	188e703a 	and	r7,r3,r2
    63e0:	3c45c83a 	sub	r2,r7,r17
    63e4:	00c003c4 	movi	r3,15
    63e8:	18811f16 	blt	r3,r2,6868 <_malloc_r+0x578>
    63ec:	32000515 	stw	r8,20(r6)
    63f0:	32000415 	stw	r8,16(r6)
    63f4:	10007f0e 	bge	r2,zero,65f4 <_malloc_r+0x304>
    63f8:	00807fc4 	movi	r2,511
    63fc:	11c0fd36 	bltu	r2,r7,67f4 <_malloc_r+0x504>
    6400:	3806d0fa 	srli	r3,r7,3
    6404:	01c00044 	movi	r7,1
    6408:	30800117 	ldw	r2,4(r6)
    640c:	19400044 	addi	r5,r3,1
    6410:	294b883a 	add	r5,r5,r5
    6414:	1807d0ba 	srai	r3,r3,2
    6418:	294b883a 	add	r5,r5,r5
    641c:	294b883a 	add	r5,r5,r5
    6420:	298b883a 	add	r5,r5,r6
    6424:	38c6983a 	sll	r3,r7,r3
    6428:	29c00017 	ldw	r7,0(r5)
    642c:	2a7ffe04 	addi	r9,r5,-8
    6430:	1886b03a 	or	r3,r3,r2
    6434:	82400315 	stw	r9,12(r16)
    6438:	81c00215 	stw	r7,8(r16)
    643c:	30c00115 	stw	r3,4(r6)
    6440:	2c000015 	stw	r16,0(r5)
    6444:	3c000315 	stw	r16,12(r7)
    6448:	2005d0ba 	srai	r2,r4,2
    644c:	01400044 	movi	r5,1
    6450:	288a983a 	sll	r5,r5,r2
    6454:	19406f36 	bltu	r3,r5,6614 <_malloc_r+0x324>
    6458:	28c4703a 	and	r2,r5,r3
    645c:	10000a1e 	bne	r2,zero,6488 <_malloc_r+0x198>
    6460:	00bfff04 	movi	r2,-4
    6464:	294b883a 	add	r5,r5,r5
    6468:	2088703a 	and	r4,r4,r2
    646c:	28c4703a 	and	r2,r5,r3
    6470:	21000104 	addi	r4,r4,4
    6474:	1000041e 	bne	r2,zero,6488 <_malloc_r+0x198>
    6478:	294b883a 	add	r5,r5,r5
    647c:	28c4703a 	and	r2,r5,r3
    6480:	21000104 	addi	r4,r4,4
    6484:	103ffc26 	beq	r2,zero,6478 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006478>
    6488:	02bfff04 	movi	r10,-4
    648c:	024003c4 	movi	r9,15
    6490:	21800044 	addi	r6,r4,1
    6494:	318d883a 	add	r6,r6,r6
    6498:	318d883a 	add	r6,r6,r6
    649c:	318d883a 	add	r6,r6,r6
    64a0:	998d883a 	add	r6,r19,r6
    64a4:	333ffe04 	addi	r12,r6,-8
    64a8:	2017883a 	mov	r11,r4
    64ac:	31800104 	addi	r6,r6,4
    64b0:	34000017 	ldw	r16,0(r6)
    64b4:	31fffd04 	addi	r7,r6,-12
    64b8:	81c0041e 	bne	r16,r7,64cc <_malloc_r+0x1dc>
    64bc:	0000fb06 	br	68ac <_malloc_r+0x5bc>
    64c0:	1801030e 	bge	r3,zero,68d0 <_malloc_r+0x5e0>
    64c4:	84000317 	ldw	r16,12(r16)
    64c8:	81c0f826 	beq	r16,r7,68ac <_malloc_r+0x5bc>
    64cc:	80800117 	ldw	r2,4(r16)
    64d0:	1284703a 	and	r2,r2,r10
    64d4:	1447c83a 	sub	r3,r2,r17
    64d8:	48fff90e 	bge	r9,r3,64c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70064c0>
    64dc:	80800317 	ldw	r2,12(r16)
    64e0:	81000217 	ldw	r4,8(r16)
    64e4:	89400054 	ori	r5,r17,1
    64e8:	81400115 	stw	r5,4(r16)
    64ec:	20800315 	stw	r2,12(r4)
    64f0:	11000215 	stw	r4,8(r2)
    64f4:	8463883a 	add	r17,r16,r17
    64f8:	9c400515 	stw	r17,20(r19)
    64fc:	9c400415 	stw	r17,16(r19)
    6500:	18800054 	ori	r2,r3,1
    6504:	88800115 	stw	r2,4(r17)
    6508:	8a000315 	stw	r8,12(r17)
    650c:	8a000215 	stw	r8,8(r17)
    6510:	88e3883a 	add	r17,r17,r3
    6514:	88c00015 	stw	r3,0(r17)
    6518:	9009883a 	mov	r4,r18
    651c:	000dfd40 	call	dfd4 <__malloc_unlock>
    6520:	80800204 	addi	r2,r16,8
    6524:	00001b06 	br	6594 <_malloc_r+0x2a4>
    6528:	04400404 	movi	r17,16
    652c:	89402536 	bltu	r17,r5,65c4 <_malloc_r+0x2d4>
    6530:	000dfb00 	call	dfb0 <__malloc_lock>
    6534:	00800184 	movi	r2,6
    6538:	01000084 	movi	r4,2
    653c:	04c00074 	movhi	r19,1
    6540:	1085883a 	add	r2,r2,r2
    6544:	9cdec704 	addi	r19,r19,31516
    6548:	1085883a 	add	r2,r2,r2
    654c:	9885883a 	add	r2,r19,r2
    6550:	14000117 	ldw	r16,4(r2)
    6554:	10fffe04 	addi	r3,r2,-8
    6558:	80c0d926 	beq	r16,r3,68c0 <_malloc_r+0x5d0>
    655c:	80c00117 	ldw	r3,4(r16)
    6560:	81000317 	ldw	r4,12(r16)
    6564:	00bfff04 	movi	r2,-4
    6568:	1884703a 	and	r2,r3,r2
    656c:	81400217 	ldw	r5,8(r16)
    6570:	8085883a 	add	r2,r16,r2
    6574:	10c00117 	ldw	r3,4(r2)
    6578:	29000315 	stw	r4,12(r5)
    657c:	21400215 	stw	r5,8(r4)
    6580:	18c00054 	ori	r3,r3,1
    6584:	10c00115 	stw	r3,4(r2)
    6588:	9009883a 	mov	r4,r18
    658c:	000dfd40 	call	dfd4 <__malloc_unlock>
    6590:	80800204 	addi	r2,r16,8
    6594:	dfc00a17 	ldw	ra,40(sp)
    6598:	df000917 	ldw	fp,36(sp)
    659c:	ddc00817 	ldw	r23,32(sp)
    65a0:	dd800717 	ldw	r22,28(sp)
    65a4:	dd400617 	ldw	r21,24(sp)
    65a8:	dd000517 	ldw	r20,20(sp)
    65ac:	dcc00417 	ldw	r19,16(sp)
    65b0:	dc800317 	ldw	r18,12(sp)
    65b4:	dc400217 	ldw	r17,8(sp)
    65b8:	dc000117 	ldw	r16,4(sp)
    65bc:	dec00b04 	addi	sp,sp,44
    65c0:	f800283a 	ret
    65c4:	00800304 	movi	r2,12
    65c8:	90800015 	stw	r2,0(r18)
    65cc:	0005883a 	mov	r2,zero
    65d0:	003ff006 	br	6594 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006594>
    65d4:	01002004 	movi	r4,128
    65d8:	02001004 	movi	r8,64
    65dc:	01c00fc4 	movi	r7,63
    65e0:	003f6106 	br	6368 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006368>
    65e4:	4009883a 	mov	r4,r8
    65e8:	003f7506 	br	63c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70063c0>
    65ec:	81000317 	ldw	r4,12(r16)
    65f0:	003fde06 	br	656c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700656c>
    65f4:	81c5883a 	add	r2,r16,r7
    65f8:	11400117 	ldw	r5,4(r2)
    65fc:	9009883a 	mov	r4,r18
    6600:	29400054 	ori	r5,r5,1
    6604:	11400115 	stw	r5,4(r2)
    6608:	000dfd40 	call	dfd4 <__malloc_unlock>
    660c:	80800204 	addi	r2,r16,8
    6610:	003fe006 	br	6594 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006594>
    6614:	9c000217 	ldw	r16,8(r19)
    6618:	00bfff04 	movi	r2,-4
    661c:	85800117 	ldw	r22,4(r16)
    6620:	b0ac703a 	and	r22,r22,r2
    6624:	b4400336 	bltu	r22,r17,6634 <_malloc_r+0x344>
    6628:	b445c83a 	sub	r2,r22,r17
    662c:	00c003c4 	movi	r3,15
    6630:	18805d16 	blt	r3,r2,67a8 <_malloc_r+0x4b8>
    6634:	05c000b4 	movhi	r23,2
    6638:	008000b4 	movhi	r2,2
    663c:	10ad1504 	addi	r2,r2,-19372
    6640:	bde54b04 	addi	r23,r23,-27348
    6644:	15400017 	ldw	r21,0(r2)
    6648:	b8c00017 	ldw	r3,0(r23)
    664c:	00bfffc4 	movi	r2,-1
    6650:	858d883a 	add	r6,r16,r22
    6654:	8d6b883a 	add	r21,r17,r21
    6658:	1880ea26 	beq	r3,r2,6a04 <_malloc_r+0x714>
    665c:	ad4403c4 	addi	r21,r21,4111
    6660:	00bc0004 	movi	r2,-4096
    6664:	a8aa703a 	and	r21,r21,r2
    6668:	a80b883a 	mov	r5,r21
    666c:	9009883a 	mov	r4,r18
    6670:	d9800015 	stw	r6,0(sp)
    6674:	00085800 	call	8580 <_sbrk_r>
    6678:	1029883a 	mov	r20,r2
    667c:	00bfffc4 	movi	r2,-1
    6680:	d9800017 	ldw	r6,0(sp)
    6684:	a080e826 	beq	r20,r2,6a28 <_malloc_r+0x738>
    6688:	a180a636 	bltu	r20,r6,6924 <_malloc_r+0x634>
    668c:	070000b4 	movhi	fp,2
    6690:	e72d2b04 	addi	fp,fp,-19284
    6694:	e0800017 	ldw	r2,0(fp)
    6698:	a887883a 	add	r3,r21,r2
    669c:	e0c00015 	stw	r3,0(fp)
    66a0:	3500e626 	beq	r6,r20,6a3c <_malloc_r+0x74c>
    66a4:	b9000017 	ldw	r4,0(r23)
    66a8:	00bfffc4 	movi	r2,-1
    66ac:	2080ee26 	beq	r4,r2,6a68 <_malloc_r+0x778>
    66b0:	a185c83a 	sub	r2,r20,r6
    66b4:	10c5883a 	add	r2,r2,r3
    66b8:	e0800015 	stw	r2,0(fp)
    66bc:	a0c001cc 	andi	r3,r20,7
    66c0:	1800bc26 	beq	r3,zero,69b4 <_malloc_r+0x6c4>
    66c4:	a0e9c83a 	sub	r20,r20,r3
    66c8:	00840204 	movi	r2,4104
    66cc:	a5000204 	addi	r20,r20,8
    66d0:	10c7c83a 	sub	r3,r2,r3
    66d4:	a545883a 	add	r2,r20,r21
    66d8:	1083ffcc 	andi	r2,r2,4095
    66dc:	18abc83a 	sub	r21,r3,r2
    66e0:	a80b883a 	mov	r5,r21
    66e4:	9009883a 	mov	r4,r18
    66e8:	00085800 	call	8580 <_sbrk_r>
    66ec:	00ffffc4 	movi	r3,-1
    66f0:	10c0e126 	beq	r2,r3,6a78 <_malloc_r+0x788>
    66f4:	1505c83a 	sub	r2,r2,r20
    66f8:	1545883a 	add	r2,r2,r21
    66fc:	10800054 	ori	r2,r2,1
    6700:	e0c00017 	ldw	r3,0(fp)
    6704:	9d000215 	stw	r20,8(r19)
    6708:	a0800115 	stw	r2,4(r20)
    670c:	a8c7883a 	add	r3,r21,r3
    6710:	e0c00015 	stw	r3,0(fp)
    6714:	84c00e26 	beq	r16,r19,6750 <_malloc_r+0x460>
    6718:	018003c4 	movi	r6,15
    671c:	3580a72e 	bgeu	r6,r22,69bc <_malloc_r+0x6cc>
    6720:	81400117 	ldw	r5,4(r16)
    6724:	013ffe04 	movi	r4,-8
    6728:	b0bffd04 	addi	r2,r22,-12
    672c:	1104703a 	and	r2,r2,r4
    6730:	2900004c 	andi	r4,r5,1
    6734:	2088b03a 	or	r4,r4,r2
    6738:	81000115 	stw	r4,4(r16)
    673c:	01400144 	movi	r5,5
    6740:	8089883a 	add	r4,r16,r2
    6744:	21400115 	stw	r5,4(r4)
    6748:	21400215 	stw	r5,8(r4)
    674c:	3080cd36 	bltu	r6,r2,6a84 <_malloc_r+0x794>
    6750:	008000b4 	movhi	r2,2
    6754:	10ad1404 	addi	r2,r2,-19376
    6758:	11000017 	ldw	r4,0(r2)
    675c:	20c0012e 	bgeu	r4,r3,6764 <_malloc_r+0x474>
    6760:	10c00015 	stw	r3,0(r2)
    6764:	008000b4 	movhi	r2,2
    6768:	10ad1304 	addi	r2,r2,-19380
    676c:	11000017 	ldw	r4,0(r2)
    6770:	9c000217 	ldw	r16,8(r19)
    6774:	20c0012e 	bgeu	r4,r3,677c <_malloc_r+0x48c>
    6778:	10c00015 	stw	r3,0(r2)
    677c:	80c00117 	ldw	r3,4(r16)
    6780:	00bfff04 	movi	r2,-4
    6784:	1886703a 	and	r3,r3,r2
    6788:	1c45c83a 	sub	r2,r3,r17
    678c:	1c400236 	bltu	r3,r17,6798 <_malloc_r+0x4a8>
    6790:	00c003c4 	movi	r3,15
    6794:	18800416 	blt	r3,r2,67a8 <_malloc_r+0x4b8>
    6798:	9009883a 	mov	r4,r18
    679c:	000dfd40 	call	dfd4 <__malloc_unlock>
    67a0:	0005883a 	mov	r2,zero
    67a4:	003f7b06 	br	6594 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006594>
    67a8:	88c00054 	ori	r3,r17,1
    67ac:	80c00115 	stw	r3,4(r16)
    67b0:	8463883a 	add	r17,r16,r17
    67b4:	10800054 	ori	r2,r2,1
    67b8:	9c400215 	stw	r17,8(r19)
    67bc:	88800115 	stw	r2,4(r17)
    67c0:	9009883a 	mov	r4,r18
    67c4:	000dfd40 	call	dfd4 <__malloc_unlock>
    67c8:	80800204 	addi	r2,r16,8
    67cc:	003f7106 	br	6594 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006594>
    67d0:	00c00504 	movi	r3,20
    67d4:	18804a2e 	bgeu	r3,r2,6900 <_malloc_r+0x610>
    67d8:	00c01504 	movi	r3,84
    67dc:	18806e36 	bltu	r3,r2,6998 <_malloc_r+0x6a8>
    67e0:	8804d33a 	srli	r2,r17,12
    67e4:	12001bc4 	addi	r8,r2,111
    67e8:	11c01b84 	addi	r7,r2,110
    67ec:	4209883a 	add	r4,r8,r8
    67f0:	003edd06 	br	6368 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006368>
    67f4:	3804d27a 	srli	r2,r7,9
    67f8:	00c00104 	movi	r3,4
    67fc:	1880442e 	bgeu	r3,r2,6910 <_malloc_r+0x620>
    6800:	00c00504 	movi	r3,20
    6804:	18808136 	bltu	r3,r2,6a0c <_malloc_r+0x71c>
    6808:	11401704 	addi	r5,r2,92
    680c:	10c016c4 	addi	r3,r2,91
    6810:	294b883a 	add	r5,r5,r5
    6814:	294b883a 	add	r5,r5,r5
    6818:	294b883a 	add	r5,r5,r5
    681c:	994b883a 	add	r5,r19,r5
    6820:	28800017 	ldw	r2,0(r5)
    6824:	01800074 	movhi	r6,1
    6828:	297ffe04 	addi	r5,r5,-8
    682c:	319ec704 	addi	r6,r6,31516
    6830:	28806526 	beq	r5,r2,69c8 <_malloc_r+0x6d8>
    6834:	01bfff04 	movi	r6,-4
    6838:	10c00117 	ldw	r3,4(r2)
    683c:	1986703a 	and	r3,r3,r6
    6840:	38c0022e 	bgeu	r7,r3,684c <_malloc_r+0x55c>
    6844:	10800217 	ldw	r2,8(r2)
    6848:	28bffb1e 	bne	r5,r2,6838 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006838>
    684c:	11400317 	ldw	r5,12(r2)
    6850:	98c00117 	ldw	r3,4(r19)
    6854:	81400315 	stw	r5,12(r16)
    6858:	80800215 	stw	r2,8(r16)
    685c:	2c000215 	stw	r16,8(r5)
    6860:	14000315 	stw	r16,12(r2)
    6864:	003ef806 	br	6448 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006448>
    6868:	88c00054 	ori	r3,r17,1
    686c:	80c00115 	stw	r3,4(r16)
    6870:	8463883a 	add	r17,r16,r17
    6874:	34400515 	stw	r17,20(r6)
    6878:	34400415 	stw	r17,16(r6)
    687c:	10c00054 	ori	r3,r2,1
    6880:	8a000315 	stw	r8,12(r17)
    6884:	8a000215 	stw	r8,8(r17)
    6888:	88c00115 	stw	r3,4(r17)
    688c:	88a3883a 	add	r17,r17,r2
    6890:	88800015 	stw	r2,0(r17)
    6894:	9009883a 	mov	r4,r18
    6898:	000dfd40 	call	dfd4 <__malloc_unlock>
    689c:	80800204 	addi	r2,r16,8
    68a0:	003f3c06 	br	6594 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006594>
    68a4:	30c00117 	ldw	r3,4(r6)
    68a8:	003ee706 	br	6448 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006448>
    68ac:	5ac00044 	addi	r11,r11,1
    68b0:	588000cc 	andi	r2,r11,3
    68b4:	31800204 	addi	r6,r6,8
    68b8:	103efd1e 	bne	r2,zero,64b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70064b0>
    68bc:	00002406 	br	6950 <_malloc_r+0x660>
    68c0:	14000317 	ldw	r16,12(r2)
    68c4:	143f251e 	bne	r2,r16,655c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700655c>
    68c8:	21000084 	addi	r4,r4,2
    68cc:	003ebc06 	br	63c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70063c0>
    68d0:	8085883a 	add	r2,r16,r2
    68d4:	10c00117 	ldw	r3,4(r2)
    68d8:	81000317 	ldw	r4,12(r16)
    68dc:	81400217 	ldw	r5,8(r16)
    68e0:	18c00054 	ori	r3,r3,1
    68e4:	10c00115 	stw	r3,4(r2)
    68e8:	29000315 	stw	r4,12(r5)
    68ec:	21400215 	stw	r5,8(r4)
    68f0:	9009883a 	mov	r4,r18
    68f4:	000dfd40 	call	dfd4 <__malloc_unlock>
    68f8:	80800204 	addi	r2,r16,8
    68fc:	003f2506 	br	6594 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006594>
    6900:	12001704 	addi	r8,r2,92
    6904:	11c016c4 	addi	r7,r2,91
    6908:	4209883a 	add	r4,r8,r8
    690c:	003e9606 	br	6368 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006368>
    6910:	3804d1ba 	srli	r2,r7,6
    6914:	11400e44 	addi	r5,r2,57
    6918:	10c00e04 	addi	r3,r2,56
    691c:	294b883a 	add	r5,r5,r5
    6920:	003fbc06 	br	6814 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006814>
    6924:	84ff5926 	beq	r16,r19,668c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700668c>
    6928:	00800074 	movhi	r2,1
    692c:	109ec704 	addi	r2,r2,31516
    6930:	14000217 	ldw	r16,8(r2)
    6934:	00bfff04 	movi	r2,-4
    6938:	80c00117 	ldw	r3,4(r16)
    693c:	1886703a 	and	r3,r3,r2
    6940:	003f9106 	br	6788 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006788>
    6944:	60800217 	ldw	r2,8(r12)
    6948:	213fffc4 	addi	r4,r4,-1
    694c:	1300651e 	bne	r2,r12,6ae4 <_malloc_r+0x7f4>
    6950:	208000cc 	andi	r2,r4,3
    6954:	633ffe04 	addi	r12,r12,-8
    6958:	103ffa1e 	bne	r2,zero,6944 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006944>
    695c:	98800117 	ldw	r2,4(r19)
    6960:	0146303a 	nor	r3,zero,r5
    6964:	1884703a 	and	r2,r3,r2
    6968:	98800115 	stw	r2,4(r19)
    696c:	294b883a 	add	r5,r5,r5
    6970:	117f2836 	bltu	r2,r5,6614 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006614>
    6974:	283f2726 	beq	r5,zero,6614 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006614>
    6978:	2886703a 	and	r3,r5,r2
    697c:	5809883a 	mov	r4,r11
    6980:	183ec31e 	bne	r3,zero,6490 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006490>
    6984:	294b883a 	add	r5,r5,r5
    6988:	2886703a 	and	r3,r5,r2
    698c:	21000104 	addi	r4,r4,4
    6990:	183ffc26 	beq	r3,zero,6984 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006984>
    6994:	003ebe06 	br	6490 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006490>
    6998:	00c05504 	movi	r3,340
    699c:	18801236 	bltu	r3,r2,69e8 <_malloc_r+0x6f8>
    69a0:	8804d3fa 	srli	r2,r17,15
    69a4:	12001e04 	addi	r8,r2,120
    69a8:	11c01dc4 	addi	r7,r2,119
    69ac:	4209883a 	add	r4,r8,r8
    69b0:	003e6d06 	br	6368 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006368>
    69b4:	00c40004 	movi	r3,4096
    69b8:	003f4606 	br	66d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70066d4>
    69bc:	00800044 	movi	r2,1
    69c0:	a0800115 	stw	r2,4(r20)
    69c4:	003f7406 	br	6798 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006798>
    69c8:	1805d0ba 	srai	r2,r3,2
    69cc:	01c00044 	movi	r7,1
    69d0:	30c00117 	ldw	r3,4(r6)
    69d4:	388e983a 	sll	r7,r7,r2
    69d8:	2805883a 	mov	r2,r5
    69dc:	38c6b03a 	or	r3,r7,r3
    69e0:	30c00115 	stw	r3,4(r6)
    69e4:	003f9b06 	br	6854 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006854>
    69e8:	00c15504 	movi	r3,1364
    69ec:	18801a36 	bltu	r3,r2,6a58 <_malloc_r+0x768>
    69f0:	8804d4ba 	srli	r2,r17,18
    69f4:	12001f44 	addi	r8,r2,125
    69f8:	11c01f04 	addi	r7,r2,124
    69fc:	4209883a 	add	r4,r8,r8
    6a00:	003e5906 	br	6368 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006368>
    6a04:	ad400404 	addi	r21,r21,16
    6a08:	003f1706 	br	6668 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006668>
    6a0c:	00c01504 	movi	r3,84
    6a10:	18802336 	bltu	r3,r2,6aa0 <_malloc_r+0x7b0>
    6a14:	3804d33a 	srli	r2,r7,12
    6a18:	11401bc4 	addi	r5,r2,111
    6a1c:	10c01b84 	addi	r3,r2,110
    6a20:	294b883a 	add	r5,r5,r5
    6a24:	003f7b06 	br	6814 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006814>
    6a28:	9c000217 	ldw	r16,8(r19)
    6a2c:	00bfff04 	movi	r2,-4
    6a30:	80c00117 	ldw	r3,4(r16)
    6a34:	1886703a 	and	r3,r3,r2
    6a38:	003f5306 	br	6788 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006788>
    6a3c:	3083ffcc 	andi	r2,r6,4095
    6a40:	103f181e 	bne	r2,zero,66a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70066a4>
    6a44:	99000217 	ldw	r4,8(r19)
    6a48:	b545883a 	add	r2,r22,r21
    6a4c:	10800054 	ori	r2,r2,1
    6a50:	20800115 	stw	r2,4(r4)
    6a54:	003f3e06 	br	6750 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006750>
    6a58:	01003f84 	movi	r4,254
    6a5c:	02001fc4 	movi	r8,127
    6a60:	01c01f84 	movi	r7,126
    6a64:	003e4006 	br	6368 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006368>
    6a68:	008000b4 	movhi	r2,2
    6a6c:	10a54b04 	addi	r2,r2,-27348
    6a70:	15000015 	stw	r20,0(r2)
    6a74:	003f1106 	br	66bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70066bc>
    6a78:	00800044 	movi	r2,1
    6a7c:	002b883a 	mov	r21,zero
    6a80:	003f1f06 	br	6700 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006700>
    6a84:	81400204 	addi	r5,r16,8
    6a88:	9009883a 	mov	r4,r18
    6a8c:	00057040 	call	5704 <_free_r>
    6a90:	008000b4 	movhi	r2,2
    6a94:	10ad2b04 	addi	r2,r2,-19284
    6a98:	10c00017 	ldw	r3,0(r2)
    6a9c:	003f2c06 	br	6750 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006750>
    6aa0:	00c05504 	movi	r3,340
    6aa4:	18800536 	bltu	r3,r2,6abc <_malloc_r+0x7cc>
    6aa8:	3804d3fa 	srli	r2,r7,15
    6aac:	11401e04 	addi	r5,r2,120
    6ab0:	10c01dc4 	addi	r3,r2,119
    6ab4:	294b883a 	add	r5,r5,r5
    6ab8:	003f5606 	br	6814 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006814>
    6abc:	00c15504 	movi	r3,1364
    6ac0:	18800536 	bltu	r3,r2,6ad8 <_malloc_r+0x7e8>
    6ac4:	3804d4ba 	srli	r2,r7,18
    6ac8:	11401f44 	addi	r5,r2,125
    6acc:	10c01f04 	addi	r3,r2,124
    6ad0:	294b883a 	add	r5,r5,r5
    6ad4:	003f4f06 	br	6814 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006814>
    6ad8:	01403f84 	movi	r5,254
    6adc:	00c01f84 	movi	r3,126
    6ae0:	003f4c06 	br	6814 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006814>
    6ae4:	98800117 	ldw	r2,4(r19)
    6ae8:	003fa006 	br	696c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700696c>
    6aec:	8808d0fa 	srli	r4,r17,3
    6af0:	20800044 	addi	r2,r4,1
    6af4:	1085883a 	add	r2,r2,r2
    6af8:	003e9006 	br	653c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700653c>

00006afc <memchr>:
    6afc:	208000cc 	andi	r2,r4,3
    6b00:	280f883a 	mov	r7,r5
    6b04:	10003426 	beq	r2,zero,6bd8 <memchr+0xdc>
    6b08:	30bfffc4 	addi	r2,r6,-1
    6b0c:	30001a26 	beq	r6,zero,6b78 <memchr+0x7c>
    6b10:	20c00003 	ldbu	r3,0(r4)
    6b14:	29803fcc 	andi	r6,r5,255
    6b18:	30c0051e 	bne	r6,r3,6b30 <memchr+0x34>
    6b1c:	00001806 	br	6b80 <memchr+0x84>
    6b20:	10001526 	beq	r2,zero,6b78 <memchr+0x7c>
    6b24:	20c00003 	ldbu	r3,0(r4)
    6b28:	10bfffc4 	addi	r2,r2,-1
    6b2c:	30c01426 	beq	r6,r3,6b80 <memchr+0x84>
    6b30:	21000044 	addi	r4,r4,1
    6b34:	20c000cc 	andi	r3,r4,3
    6b38:	183ff91e 	bne	r3,zero,6b20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006b20>
    6b3c:	020000c4 	movi	r8,3
    6b40:	40801136 	bltu	r8,r2,6b88 <memchr+0x8c>
    6b44:	10000c26 	beq	r2,zero,6b78 <memchr+0x7c>
    6b48:	20c00003 	ldbu	r3,0(r4)
    6b4c:	29403fcc 	andi	r5,r5,255
    6b50:	28c00b26 	beq	r5,r3,6b80 <memchr+0x84>
    6b54:	20c00044 	addi	r3,r4,1
    6b58:	39803fcc 	andi	r6,r7,255
    6b5c:	2089883a 	add	r4,r4,r2
    6b60:	00000306 	br	6b70 <memchr+0x74>
    6b64:	18c00044 	addi	r3,r3,1
    6b68:	197fffc3 	ldbu	r5,-1(r3)
    6b6c:	31400526 	beq	r6,r5,6b84 <memchr+0x88>
    6b70:	1805883a 	mov	r2,r3
    6b74:	20fffb1e 	bne	r4,r3,6b64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006b64>
    6b78:	0005883a 	mov	r2,zero
    6b7c:	f800283a 	ret
    6b80:	2005883a 	mov	r2,r4
    6b84:	f800283a 	ret
    6b88:	28c03fcc 	andi	r3,r5,255
    6b8c:	1812923a 	slli	r9,r3,8
    6b90:	02ffbff4 	movhi	r11,65279
    6b94:	02a02074 	movhi	r10,32897
    6b98:	48d2b03a 	or	r9,r9,r3
    6b9c:	4806943a 	slli	r3,r9,16
    6ba0:	5affbfc4 	addi	r11,r11,-257
    6ba4:	52a02004 	addi	r10,r10,-32640
    6ba8:	48d2b03a 	or	r9,r9,r3
    6bac:	20c00017 	ldw	r3,0(r4)
    6bb0:	48c6f03a 	xor	r3,r9,r3
    6bb4:	1acd883a 	add	r6,r3,r11
    6bb8:	00c6303a 	nor	r3,zero,r3
    6bbc:	30c6703a 	and	r3,r6,r3
    6bc0:	1a86703a 	and	r3,r3,r10
    6bc4:	183fe01e 	bne	r3,zero,6b48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006b48>
    6bc8:	10bfff04 	addi	r2,r2,-4
    6bcc:	21000104 	addi	r4,r4,4
    6bd0:	40bff636 	bltu	r8,r2,6bac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006bac>
    6bd4:	003fdb06 	br	6b44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006b44>
    6bd8:	3005883a 	mov	r2,r6
    6bdc:	003fd706 	br	6b3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006b3c>

00006be0 <memcpy>:
    6be0:	defffd04 	addi	sp,sp,-12
    6be4:	dfc00215 	stw	ra,8(sp)
    6be8:	dc400115 	stw	r17,4(sp)
    6bec:	dc000015 	stw	r16,0(sp)
    6bf0:	00c003c4 	movi	r3,15
    6bf4:	2005883a 	mov	r2,r4
    6bf8:	1980452e 	bgeu	r3,r6,6d10 <memcpy+0x130>
    6bfc:	2906b03a 	or	r3,r5,r4
    6c00:	18c000cc 	andi	r3,r3,3
    6c04:	1800441e 	bne	r3,zero,6d18 <memcpy+0x138>
    6c08:	347ffc04 	addi	r17,r6,-16
    6c0c:	8822d13a 	srli	r17,r17,4
    6c10:	28c00104 	addi	r3,r5,4
    6c14:	23400104 	addi	r13,r4,4
    6c18:	8820913a 	slli	r16,r17,4
    6c1c:	2b000204 	addi	r12,r5,8
    6c20:	22c00204 	addi	r11,r4,8
    6c24:	84000504 	addi	r16,r16,20
    6c28:	2a800304 	addi	r10,r5,12
    6c2c:	22400304 	addi	r9,r4,12
    6c30:	2c21883a 	add	r16,r5,r16
    6c34:	2811883a 	mov	r8,r5
    6c38:	200f883a 	mov	r7,r4
    6c3c:	41000017 	ldw	r4,0(r8)
    6c40:	1fc00017 	ldw	ra,0(r3)
    6c44:	63c00017 	ldw	r15,0(r12)
    6c48:	39000015 	stw	r4,0(r7)
    6c4c:	53800017 	ldw	r14,0(r10)
    6c50:	6fc00015 	stw	ra,0(r13)
    6c54:	5bc00015 	stw	r15,0(r11)
    6c58:	4b800015 	stw	r14,0(r9)
    6c5c:	18c00404 	addi	r3,r3,16
    6c60:	39c00404 	addi	r7,r7,16
    6c64:	42000404 	addi	r8,r8,16
    6c68:	6b400404 	addi	r13,r13,16
    6c6c:	63000404 	addi	r12,r12,16
    6c70:	5ac00404 	addi	r11,r11,16
    6c74:	52800404 	addi	r10,r10,16
    6c78:	4a400404 	addi	r9,r9,16
    6c7c:	1c3fef1e 	bne	r3,r16,6c3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006c3c>
    6c80:	89c00044 	addi	r7,r17,1
    6c84:	380e913a 	slli	r7,r7,4
    6c88:	310003cc 	andi	r4,r6,15
    6c8c:	02c000c4 	movi	r11,3
    6c90:	11c7883a 	add	r3,r2,r7
    6c94:	29cb883a 	add	r5,r5,r7
    6c98:	5900212e 	bgeu	r11,r4,6d20 <memcpy+0x140>
    6c9c:	1813883a 	mov	r9,r3
    6ca0:	2811883a 	mov	r8,r5
    6ca4:	200f883a 	mov	r7,r4
    6ca8:	42800017 	ldw	r10,0(r8)
    6cac:	4a400104 	addi	r9,r9,4
    6cb0:	39ffff04 	addi	r7,r7,-4
    6cb4:	4abfff15 	stw	r10,-4(r9)
    6cb8:	42000104 	addi	r8,r8,4
    6cbc:	59fffa36 	bltu	r11,r7,6ca8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006ca8>
    6cc0:	213fff04 	addi	r4,r4,-4
    6cc4:	2008d0ba 	srli	r4,r4,2
    6cc8:	318000cc 	andi	r6,r6,3
    6ccc:	21000044 	addi	r4,r4,1
    6cd0:	2109883a 	add	r4,r4,r4
    6cd4:	2109883a 	add	r4,r4,r4
    6cd8:	1907883a 	add	r3,r3,r4
    6cdc:	290b883a 	add	r5,r5,r4
    6ce0:	30000626 	beq	r6,zero,6cfc <memcpy+0x11c>
    6ce4:	198d883a 	add	r6,r3,r6
    6ce8:	29c00003 	ldbu	r7,0(r5)
    6cec:	18c00044 	addi	r3,r3,1
    6cf0:	29400044 	addi	r5,r5,1
    6cf4:	19ffffc5 	stb	r7,-1(r3)
    6cf8:	19bffb1e 	bne	r3,r6,6ce8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006ce8>
    6cfc:	dfc00217 	ldw	ra,8(sp)
    6d00:	dc400117 	ldw	r17,4(sp)
    6d04:	dc000017 	ldw	r16,0(sp)
    6d08:	dec00304 	addi	sp,sp,12
    6d0c:	f800283a 	ret
    6d10:	2007883a 	mov	r3,r4
    6d14:	003ff206 	br	6ce0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006ce0>
    6d18:	2007883a 	mov	r3,r4
    6d1c:	003ff106 	br	6ce4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006ce4>
    6d20:	200d883a 	mov	r6,r4
    6d24:	003fee06 	br	6ce0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006ce0>

00006d28 <memmove>:
    6d28:	2005883a 	mov	r2,r4
    6d2c:	29000b2e 	bgeu	r5,r4,6d5c <memmove+0x34>
    6d30:	298f883a 	add	r7,r5,r6
    6d34:	21c0092e 	bgeu	r4,r7,6d5c <memmove+0x34>
    6d38:	2187883a 	add	r3,r4,r6
    6d3c:	198bc83a 	sub	r5,r3,r6
    6d40:	30004826 	beq	r6,zero,6e64 <memmove+0x13c>
    6d44:	39ffffc4 	addi	r7,r7,-1
    6d48:	39000003 	ldbu	r4,0(r7)
    6d4c:	18ffffc4 	addi	r3,r3,-1
    6d50:	19000005 	stb	r4,0(r3)
    6d54:	28fffb1e 	bne	r5,r3,6d44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006d44>
    6d58:	f800283a 	ret
    6d5c:	00c003c4 	movi	r3,15
    6d60:	1980412e 	bgeu	r3,r6,6e68 <memmove+0x140>
    6d64:	2886b03a 	or	r3,r5,r2
    6d68:	18c000cc 	andi	r3,r3,3
    6d6c:	1800401e 	bne	r3,zero,6e70 <memmove+0x148>
    6d70:	33fffc04 	addi	r15,r6,-16
    6d74:	781ed13a 	srli	r15,r15,4
    6d78:	28c00104 	addi	r3,r5,4
    6d7c:	13400104 	addi	r13,r2,4
    6d80:	781c913a 	slli	r14,r15,4
    6d84:	2b000204 	addi	r12,r5,8
    6d88:	12c00204 	addi	r11,r2,8
    6d8c:	73800504 	addi	r14,r14,20
    6d90:	2a800304 	addi	r10,r5,12
    6d94:	12400304 	addi	r9,r2,12
    6d98:	2b9d883a 	add	r14,r5,r14
    6d9c:	2811883a 	mov	r8,r5
    6da0:	100f883a 	mov	r7,r2
    6da4:	41000017 	ldw	r4,0(r8)
    6da8:	39c00404 	addi	r7,r7,16
    6dac:	18c00404 	addi	r3,r3,16
    6db0:	393ffc15 	stw	r4,-16(r7)
    6db4:	193ffc17 	ldw	r4,-16(r3)
    6db8:	6b400404 	addi	r13,r13,16
    6dbc:	5ac00404 	addi	r11,r11,16
    6dc0:	693ffc15 	stw	r4,-16(r13)
    6dc4:	61000017 	ldw	r4,0(r12)
    6dc8:	4a400404 	addi	r9,r9,16
    6dcc:	42000404 	addi	r8,r8,16
    6dd0:	593ffc15 	stw	r4,-16(r11)
    6dd4:	51000017 	ldw	r4,0(r10)
    6dd8:	63000404 	addi	r12,r12,16
    6ddc:	52800404 	addi	r10,r10,16
    6de0:	493ffc15 	stw	r4,-16(r9)
    6de4:	1bbfef1e 	bne	r3,r14,6da4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006da4>
    6de8:	79000044 	addi	r4,r15,1
    6dec:	2008913a 	slli	r4,r4,4
    6df0:	328003cc 	andi	r10,r6,15
    6df4:	02c000c4 	movi	r11,3
    6df8:	1107883a 	add	r3,r2,r4
    6dfc:	290b883a 	add	r5,r5,r4
    6e00:	5a801e2e 	bgeu	r11,r10,6e7c <memmove+0x154>
    6e04:	1813883a 	mov	r9,r3
    6e08:	2811883a 	mov	r8,r5
    6e0c:	500f883a 	mov	r7,r10
    6e10:	41000017 	ldw	r4,0(r8)
    6e14:	4a400104 	addi	r9,r9,4
    6e18:	39ffff04 	addi	r7,r7,-4
    6e1c:	493fff15 	stw	r4,-4(r9)
    6e20:	42000104 	addi	r8,r8,4
    6e24:	59fffa36 	bltu	r11,r7,6e10 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006e10>
    6e28:	513fff04 	addi	r4,r10,-4
    6e2c:	2008d0ba 	srli	r4,r4,2
    6e30:	318000cc 	andi	r6,r6,3
    6e34:	21000044 	addi	r4,r4,1
    6e38:	2109883a 	add	r4,r4,r4
    6e3c:	2109883a 	add	r4,r4,r4
    6e40:	1907883a 	add	r3,r3,r4
    6e44:	290b883a 	add	r5,r5,r4
    6e48:	30000b26 	beq	r6,zero,6e78 <memmove+0x150>
    6e4c:	198d883a 	add	r6,r3,r6
    6e50:	29c00003 	ldbu	r7,0(r5)
    6e54:	18c00044 	addi	r3,r3,1
    6e58:	29400044 	addi	r5,r5,1
    6e5c:	19ffffc5 	stb	r7,-1(r3)
    6e60:	19bffb1e 	bne	r3,r6,6e50 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006e50>
    6e64:	f800283a 	ret
    6e68:	1007883a 	mov	r3,r2
    6e6c:	003ff606 	br	6e48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006e48>
    6e70:	1007883a 	mov	r3,r2
    6e74:	003ff506 	br	6e4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006e4c>
    6e78:	f800283a 	ret
    6e7c:	500d883a 	mov	r6,r10
    6e80:	003ff106 	br	6e48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006e48>

00006e84 <memset>:
    6e84:	20c000cc 	andi	r3,r4,3
    6e88:	2005883a 	mov	r2,r4
    6e8c:	18004426 	beq	r3,zero,6fa0 <memset+0x11c>
    6e90:	31ffffc4 	addi	r7,r6,-1
    6e94:	30004026 	beq	r6,zero,6f98 <memset+0x114>
    6e98:	2813883a 	mov	r9,r5
    6e9c:	200d883a 	mov	r6,r4
    6ea0:	2007883a 	mov	r3,r4
    6ea4:	00000406 	br	6eb8 <memset+0x34>
    6ea8:	3a3fffc4 	addi	r8,r7,-1
    6eac:	31800044 	addi	r6,r6,1
    6eb0:	38003926 	beq	r7,zero,6f98 <memset+0x114>
    6eb4:	400f883a 	mov	r7,r8
    6eb8:	18c00044 	addi	r3,r3,1
    6ebc:	32400005 	stb	r9,0(r6)
    6ec0:	1a0000cc 	andi	r8,r3,3
    6ec4:	403ff81e 	bne	r8,zero,6ea8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006ea8>
    6ec8:	010000c4 	movi	r4,3
    6ecc:	21c02d2e 	bgeu	r4,r7,6f84 <memset+0x100>
    6ed0:	29003fcc 	andi	r4,r5,255
    6ed4:	200c923a 	slli	r6,r4,8
    6ed8:	3108b03a 	or	r4,r6,r4
    6edc:	200c943a 	slli	r6,r4,16
    6ee0:	218cb03a 	or	r6,r4,r6
    6ee4:	010003c4 	movi	r4,15
    6ee8:	21c0182e 	bgeu	r4,r7,6f4c <memset+0xc8>
    6eec:	3b3ffc04 	addi	r12,r7,-16
    6ef0:	6018d13a 	srli	r12,r12,4
    6ef4:	1a000104 	addi	r8,r3,4
    6ef8:	1ac00204 	addi	r11,r3,8
    6efc:	6008913a 	slli	r4,r12,4
    6f00:	1a800304 	addi	r10,r3,12
    6f04:	1813883a 	mov	r9,r3
    6f08:	21000504 	addi	r4,r4,20
    6f0c:	1909883a 	add	r4,r3,r4
    6f10:	49800015 	stw	r6,0(r9)
    6f14:	41800015 	stw	r6,0(r8)
    6f18:	59800015 	stw	r6,0(r11)
    6f1c:	51800015 	stw	r6,0(r10)
    6f20:	42000404 	addi	r8,r8,16
    6f24:	4a400404 	addi	r9,r9,16
    6f28:	5ac00404 	addi	r11,r11,16
    6f2c:	52800404 	addi	r10,r10,16
    6f30:	413ff71e 	bne	r8,r4,6f10 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006f10>
    6f34:	63000044 	addi	r12,r12,1
    6f38:	6018913a 	slli	r12,r12,4
    6f3c:	39c003cc 	andi	r7,r7,15
    6f40:	010000c4 	movi	r4,3
    6f44:	1b07883a 	add	r3,r3,r12
    6f48:	21c00e2e 	bgeu	r4,r7,6f84 <memset+0x100>
    6f4c:	1813883a 	mov	r9,r3
    6f50:	3811883a 	mov	r8,r7
    6f54:	010000c4 	movi	r4,3
    6f58:	49800015 	stw	r6,0(r9)
    6f5c:	423fff04 	addi	r8,r8,-4
    6f60:	4a400104 	addi	r9,r9,4
    6f64:	223ffc36 	bltu	r4,r8,6f58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006f58>
    6f68:	393fff04 	addi	r4,r7,-4
    6f6c:	2008d0ba 	srli	r4,r4,2
    6f70:	39c000cc 	andi	r7,r7,3
    6f74:	21000044 	addi	r4,r4,1
    6f78:	2109883a 	add	r4,r4,r4
    6f7c:	2109883a 	add	r4,r4,r4
    6f80:	1907883a 	add	r3,r3,r4
    6f84:	38000526 	beq	r7,zero,6f9c <memset+0x118>
    6f88:	19cf883a 	add	r7,r3,r7
    6f8c:	19400005 	stb	r5,0(r3)
    6f90:	18c00044 	addi	r3,r3,1
    6f94:	38fffd1e 	bne	r7,r3,6f8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006f8c>
    6f98:	f800283a 	ret
    6f9c:	f800283a 	ret
    6fa0:	2007883a 	mov	r3,r4
    6fa4:	300f883a 	mov	r7,r6
    6fa8:	003fc706 	br	6ec8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006ec8>

00006fac <_Balloc>:
    6fac:	20801317 	ldw	r2,76(r4)
    6fb0:	defffc04 	addi	sp,sp,-16
    6fb4:	dc400115 	stw	r17,4(sp)
    6fb8:	dc000015 	stw	r16,0(sp)
    6fbc:	dfc00315 	stw	ra,12(sp)
    6fc0:	dc800215 	stw	r18,8(sp)
    6fc4:	2023883a 	mov	r17,r4
    6fc8:	2821883a 	mov	r16,r5
    6fcc:	10000f26 	beq	r2,zero,700c <_Balloc+0x60>
    6fd0:	8407883a 	add	r3,r16,r16
    6fd4:	18c7883a 	add	r3,r3,r3
    6fd8:	10c7883a 	add	r3,r2,r3
    6fdc:	18800017 	ldw	r2,0(r3)
    6fe0:	10001126 	beq	r2,zero,7028 <_Balloc+0x7c>
    6fe4:	11000017 	ldw	r4,0(r2)
    6fe8:	19000015 	stw	r4,0(r3)
    6fec:	10000415 	stw	zero,16(r2)
    6ff0:	10000315 	stw	zero,12(r2)
    6ff4:	dfc00317 	ldw	ra,12(sp)
    6ff8:	dc800217 	ldw	r18,8(sp)
    6ffc:	dc400117 	ldw	r17,4(sp)
    7000:	dc000017 	ldw	r16,0(sp)
    7004:	dec00404 	addi	sp,sp,16
    7008:	f800283a 	ret
    700c:	01800844 	movi	r6,33
    7010:	01400104 	movi	r5,4
    7014:	0009ee80 	call	9ee8 <_calloc_r>
    7018:	88801315 	stw	r2,76(r17)
    701c:	103fec1e 	bne	r2,zero,6fd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006fd0>
    7020:	0005883a 	mov	r2,zero
    7024:	003ff306 	br	6ff4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006ff4>
    7028:	01400044 	movi	r5,1
    702c:	2c24983a 	sll	r18,r5,r16
    7030:	8809883a 	mov	r4,r17
    7034:	91800144 	addi	r6,r18,5
    7038:	318d883a 	add	r6,r6,r6
    703c:	318d883a 	add	r6,r6,r6
    7040:	0009ee80 	call	9ee8 <_calloc_r>
    7044:	103ff626 	beq	r2,zero,7020 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007020>
    7048:	14000115 	stw	r16,4(r2)
    704c:	14800215 	stw	r18,8(r2)
    7050:	003fe606 	br	6fec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006fec>

00007054 <_Bfree>:
    7054:	28000826 	beq	r5,zero,7078 <_Bfree+0x24>
    7058:	28c00117 	ldw	r3,4(r5)
    705c:	20801317 	ldw	r2,76(r4)
    7060:	18c7883a 	add	r3,r3,r3
    7064:	18c7883a 	add	r3,r3,r3
    7068:	10c5883a 	add	r2,r2,r3
    706c:	10c00017 	ldw	r3,0(r2)
    7070:	28c00015 	stw	r3,0(r5)
    7074:	11400015 	stw	r5,0(r2)
    7078:	f800283a 	ret

0000707c <__multadd>:
    707c:	defffa04 	addi	sp,sp,-24
    7080:	dc800315 	stw	r18,12(sp)
    7084:	dc400215 	stw	r17,8(sp)
    7088:	dc000115 	stw	r16,4(sp)
    708c:	2823883a 	mov	r17,r5
    7090:	2c000417 	ldw	r16,16(r5)
    7094:	dfc00515 	stw	ra,20(sp)
    7098:	dcc00415 	stw	r19,16(sp)
    709c:	2025883a 	mov	r18,r4
    70a0:	29400504 	addi	r5,r5,20
    70a4:	0011883a 	mov	r8,zero
    70a8:	28c00017 	ldw	r3,0(r5)
    70ac:	29400104 	addi	r5,r5,4
    70b0:	42000044 	addi	r8,r8,1
    70b4:	18bfffcc 	andi	r2,r3,65535
    70b8:	1185383a 	mul	r2,r2,r6
    70bc:	1806d43a 	srli	r3,r3,16
    70c0:	11cf883a 	add	r7,r2,r7
    70c4:	3808d43a 	srli	r4,r7,16
    70c8:	1987383a 	mul	r3,r3,r6
    70cc:	38bfffcc 	andi	r2,r7,65535
    70d0:	1907883a 	add	r3,r3,r4
    70d4:	1808943a 	slli	r4,r3,16
    70d8:	180ed43a 	srli	r7,r3,16
    70dc:	2085883a 	add	r2,r4,r2
    70e0:	28bfff15 	stw	r2,-4(r5)
    70e4:	443ff016 	blt	r8,r16,70a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70070a8>
    70e8:	38000926 	beq	r7,zero,7110 <__multadd+0x94>
    70ec:	88800217 	ldw	r2,8(r17)
    70f0:	80800f0e 	bge	r16,r2,7130 <__multadd+0xb4>
    70f4:	80800144 	addi	r2,r16,5
    70f8:	1085883a 	add	r2,r2,r2
    70fc:	1085883a 	add	r2,r2,r2
    7100:	8885883a 	add	r2,r17,r2
    7104:	11c00015 	stw	r7,0(r2)
    7108:	84000044 	addi	r16,r16,1
    710c:	8c000415 	stw	r16,16(r17)
    7110:	8805883a 	mov	r2,r17
    7114:	dfc00517 	ldw	ra,20(sp)
    7118:	dcc00417 	ldw	r19,16(sp)
    711c:	dc800317 	ldw	r18,12(sp)
    7120:	dc400217 	ldw	r17,8(sp)
    7124:	dc000117 	ldw	r16,4(sp)
    7128:	dec00604 	addi	sp,sp,24
    712c:	f800283a 	ret
    7130:	89400117 	ldw	r5,4(r17)
    7134:	9009883a 	mov	r4,r18
    7138:	d9c00015 	stw	r7,0(sp)
    713c:	29400044 	addi	r5,r5,1
    7140:	0006fac0 	call	6fac <_Balloc>
    7144:	89800417 	ldw	r6,16(r17)
    7148:	89400304 	addi	r5,r17,12
    714c:	11000304 	addi	r4,r2,12
    7150:	31800084 	addi	r6,r6,2
    7154:	318d883a 	add	r6,r6,r6
    7158:	318d883a 	add	r6,r6,r6
    715c:	1027883a 	mov	r19,r2
    7160:	0006be00 	call	6be0 <memcpy>
    7164:	d9c00017 	ldw	r7,0(sp)
    7168:	88000a26 	beq	r17,zero,7194 <__multadd+0x118>
    716c:	88c00117 	ldw	r3,4(r17)
    7170:	90801317 	ldw	r2,76(r18)
    7174:	18c7883a 	add	r3,r3,r3
    7178:	18c7883a 	add	r3,r3,r3
    717c:	10c5883a 	add	r2,r2,r3
    7180:	10c00017 	ldw	r3,0(r2)
    7184:	88c00015 	stw	r3,0(r17)
    7188:	14400015 	stw	r17,0(r2)
    718c:	9823883a 	mov	r17,r19
    7190:	003fd806 	br	70f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70070f4>
    7194:	9823883a 	mov	r17,r19
    7198:	003fd606 	br	70f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70070f4>

0000719c <__s2b>:
    719c:	defff904 	addi	sp,sp,-28
    71a0:	dc400115 	stw	r17,4(sp)
    71a4:	dc000015 	stw	r16,0(sp)
    71a8:	2023883a 	mov	r17,r4
    71ac:	2821883a 	mov	r16,r5
    71b0:	39000204 	addi	r4,r7,8
    71b4:	01400244 	movi	r5,9
    71b8:	dcc00315 	stw	r19,12(sp)
    71bc:	dc800215 	stw	r18,8(sp)
    71c0:	dfc00615 	stw	ra,24(sp)
    71c4:	dd400515 	stw	r21,20(sp)
    71c8:	dd000415 	stw	r20,16(sp)
    71cc:	3825883a 	mov	r18,r7
    71d0:	3027883a 	mov	r19,r6
    71d4:	000b2180 	call	b218 <__divsi3>
    71d8:	00c00044 	movi	r3,1
    71dc:	000b883a 	mov	r5,zero
    71e0:	1880030e 	bge	r3,r2,71f0 <__s2b+0x54>
    71e4:	18c7883a 	add	r3,r3,r3
    71e8:	29400044 	addi	r5,r5,1
    71ec:	18bffd16 	blt	r3,r2,71e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70071e4>
    71f0:	8809883a 	mov	r4,r17
    71f4:	0006fac0 	call	6fac <_Balloc>
    71f8:	d8c00717 	ldw	r3,28(sp)
    71fc:	10c00515 	stw	r3,20(r2)
    7200:	00c00044 	movi	r3,1
    7204:	10c00415 	stw	r3,16(r2)
    7208:	00c00244 	movi	r3,9
    720c:	1cc0210e 	bge	r3,r19,7294 <__s2b+0xf8>
    7210:	80eb883a 	add	r21,r16,r3
    7214:	a829883a 	mov	r20,r21
    7218:	84e1883a 	add	r16,r16,r19
    721c:	a1c00007 	ldb	r7,0(r20)
    7220:	01800284 	movi	r6,10
    7224:	a5000044 	addi	r20,r20,1
    7228:	100b883a 	mov	r5,r2
    722c:	39fff404 	addi	r7,r7,-48
    7230:	8809883a 	mov	r4,r17
    7234:	000707c0 	call	707c <__multadd>
    7238:	a43ff81e 	bne	r20,r16,721c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700721c>
    723c:	ace1883a 	add	r16,r21,r19
    7240:	843ffe04 	addi	r16,r16,-8
    7244:	9c800a0e 	bge	r19,r18,7270 <__s2b+0xd4>
    7248:	94e5c83a 	sub	r18,r18,r19
    724c:	84a5883a 	add	r18,r16,r18
    7250:	81c00007 	ldb	r7,0(r16)
    7254:	01800284 	movi	r6,10
    7258:	84000044 	addi	r16,r16,1
    725c:	100b883a 	mov	r5,r2
    7260:	39fff404 	addi	r7,r7,-48
    7264:	8809883a 	mov	r4,r17
    7268:	000707c0 	call	707c <__multadd>
    726c:	84bff81e 	bne	r16,r18,7250 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007250>
    7270:	dfc00617 	ldw	ra,24(sp)
    7274:	dd400517 	ldw	r21,20(sp)
    7278:	dd000417 	ldw	r20,16(sp)
    727c:	dcc00317 	ldw	r19,12(sp)
    7280:	dc800217 	ldw	r18,8(sp)
    7284:	dc400117 	ldw	r17,4(sp)
    7288:	dc000017 	ldw	r16,0(sp)
    728c:	dec00704 	addi	sp,sp,28
    7290:	f800283a 	ret
    7294:	84000284 	addi	r16,r16,10
    7298:	1827883a 	mov	r19,r3
    729c:	003fe906 	br	7244 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007244>

000072a0 <__hi0bits>:
    72a0:	20bfffec 	andhi	r2,r4,65535
    72a4:	1000141e 	bne	r2,zero,72f8 <__hi0bits+0x58>
    72a8:	2008943a 	slli	r4,r4,16
    72ac:	00800404 	movi	r2,16
    72b0:	20ffc02c 	andhi	r3,r4,65280
    72b4:	1800021e 	bne	r3,zero,72c0 <__hi0bits+0x20>
    72b8:	2008923a 	slli	r4,r4,8
    72bc:	10800204 	addi	r2,r2,8
    72c0:	20fc002c 	andhi	r3,r4,61440
    72c4:	1800021e 	bne	r3,zero,72d0 <__hi0bits+0x30>
    72c8:	2008913a 	slli	r4,r4,4
    72cc:	10800104 	addi	r2,r2,4
    72d0:	20f0002c 	andhi	r3,r4,49152
    72d4:	1800031e 	bne	r3,zero,72e4 <__hi0bits+0x44>
    72d8:	2109883a 	add	r4,r4,r4
    72dc:	10800084 	addi	r2,r2,2
    72e0:	2109883a 	add	r4,r4,r4
    72e4:	20000316 	blt	r4,zero,72f4 <__hi0bits+0x54>
    72e8:	2110002c 	andhi	r4,r4,16384
    72ec:	2000041e 	bne	r4,zero,7300 <__hi0bits+0x60>
    72f0:	00800804 	movi	r2,32
    72f4:	f800283a 	ret
    72f8:	0005883a 	mov	r2,zero
    72fc:	003fec06 	br	72b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70072b0>
    7300:	10800044 	addi	r2,r2,1
    7304:	f800283a 	ret

00007308 <__lo0bits>:
    7308:	20c00017 	ldw	r3,0(r4)
    730c:	188001cc 	andi	r2,r3,7
    7310:	10000826 	beq	r2,zero,7334 <__lo0bits+0x2c>
    7314:	1880004c 	andi	r2,r3,1
    7318:	1000211e 	bne	r2,zero,73a0 <__lo0bits+0x98>
    731c:	1880008c 	andi	r2,r3,2
    7320:	1000211e 	bne	r2,zero,73a8 <__lo0bits+0xa0>
    7324:	1806d0ba 	srli	r3,r3,2
    7328:	00800084 	movi	r2,2
    732c:	20c00015 	stw	r3,0(r4)
    7330:	f800283a 	ret
    7334:	18bfffcc 	andi	r2,r3,65535
    7338:	10001326 	beq	r2,zero,7388 <__lo0bits+0x80>
    733c:	0005883a 	mov	r2,zero
    7340:	19403fcc 	andi	r5,r3,255
    7344:	2800021e 	bne	r5,zero,7350 <__lo0bits+0x48>
    7348:	1806d23a 	srli	r3,r3,8
    734c:	10800204 	addi	r2,r2,8
    7350:	194003cc 	andi	r5,r3,15
    7354:	2800021e 	bne	r5,zero,7360 <__lo0bits+0x58>
    7358:	1806d13a 	srli	r3,r3,4
    735c:	10800104 	addi	r2,r2,4
    7360:	194000cc 	andi	r5,r3,3
    7364:	2800021e 	bne	r5,zero,7370 <__lo0bits+0x68>
    7368:	1806d0ba 	srli	r3,r3,2
    736c:	10800084 	addi	r2,r2,2
    7370:	1940004c 	andi	r5,r3,1
    7374:	2800081e 	bne	r5,zero,7398 <__lo0bits+0x90>
    7378:	1806d07a 	srli	r3,r3,1
    737c:	1800051e 	bne	r3,zero,7394 <__lo0bits+0x8c>
    7380:	00800804 	movi	r2,32
    7384:	f800283a 	ret
    7388:	1806d43a 	srli	r3,r3,16
    738c:	00800404 	movi	r2,16
    7390:	003feb06 	br	7340 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007340>
    7394:	10800044 	addi	r2,r2,1
    7398:	20c00015 	stw	r3,0(r4)
    739c:	f800283a 	ret
    73a0:	0005883a 	mov	r2,zero
    73a4:	f800283a 	ret
    73a8:	1806d07a 	srli	r3,r3,1
    73ac:	00800044 	movi	r2,1
    73b0:	20c00015 	stw	r3,0(r4)
    73b4:	f800283a 	ret

000073b8 <__i2b>:
    73b8:	defffd04 	addi	sp,sp,-12
    73bc:	dc000015 	stw	r16,0(sp)
    73c0:	04000044 	movi	r16,1
    73c4:	dc400115 	stw	r17,4(sp)
    73c8:	2823883a 	mov	r17,r5
    73cc:	800b883a 	mov	r5,r16
    73d0:	dfc00215 	stw	ra,8(sp)
    73d4:	0006fac0 	call	6fac <_Balloc>
    73d8:	14400515 	stw	r17,20(r2)
    73dc:	14000415 	stw	r16,16(r2)
    73e0:	dfc00217 	ldw	ra,8(sp)
    73e4:	dc400117 	ldw	r17,4(sp)
    73e8:	dc000017 	ldw	r16,0(sp)
    73ec:	dec00304 	addi	sp,sp,12
    73f0:	f800283a 	ret

000073f4 <__multiply>:
    73f4:	defffa04 	addi	sp,sp,-24
    73f8:	dcc00315 	stw	r19,12(sp)
    73fc:	dc800215 	stw	r18,8(sp)
    7400:	34c00417 	ldw	r19,16(r6)
    7404:	2c800417 	ldw	r18,16(r5)
    7408:	dd000415 	stw	r20,16(sp)
    740c:	dc400115 	stw	r17,4(sp)
    7410:	dfc00515 	stw	ra,20(sp)
    7414:	dc000015 	stw	r16,0(sp)
    7418:	2829883a 	mov	r20,r5
    741c:	3023883a 	mov	r17,r6
    7420:	94c0050e 	bge	r18,r19,7438 <__multiply+0x44>
    7424:	9007883a 	mov	r3,r18
    7428:	3029883a 	mov	r20,r6
    742c:	9825883a 	mov	r18,r19
    7430:	2823883a 	mov	r17,r5
    7434:	1827883a 	mov	r19,r3
    7438:	a0800217 	ldw	r2,8(r20)
    743c:	94e1883a 	add	r16,r18,r19
    7440:	a1400117 	ldw	r5,4(r20)
    7444:	1400010e 	bge	r2,r16,744c <__multiply+0x58>
    7448:	29400044 	addi	r5,r5,1
    744c:	0006fac0 	call	6fac <_Balloc>
    7450:	8415883a 	add	r10,r16,r16
    7454:	12c00504 	addi	r11,r2,20
    7458:	5295883a 	add	r10,r10,r10
    745c:	5a95883a 	add	r10,r11,r10
    7460:	5807883a 	mov	r3,r11
    7464:	5a80032e 	bgeu	r11,r10,7474 <__multiply+0x80>
    7468:	18000015 	stw	zero,0(r3)
    746c:	18c00104 	addi	r3,r3,4
    7470:	1abffd36 	bltu	r3,r10,7468 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007468>
    7474:	9ce7883a 	add	r19,r19,r19
    7478:	94a5883a 	add	r18,r18,r18
    747c:	89800504 	addi	r6,r17,20
    7480:	9ce7883a 	add	r19,r19,r19
    7484:	a3400504 	addi	r13,r20,20
    7488:	94a5883a 	add	r18,r18,r18
    748c:	34d9883a 	add	r12,r6,r19
    7490:	6c93883a 	add	r9,r13,r18
    7494:	3300422e 	bgeu	r6,r12,75a0 <__multiply+0x1ac>
    7498:	37c00017 	ldw	ra,0(r6)
    749c:	fbffffcc 	andi	r15,ra,65535
    74a0:	78001b26 	beq	r15,zero,7510 <__multiply+0x11c>
    74a4:	5811883a 	mov	r8,r11
    74a8:	681d883a 	mov	r14,r13
    74ac:	000f883a 	mov	r7,zero
    74b0:	71000017 	ldw	r4,0(r14)
    74b4:	40c00017 	ldw	r3,0(r8)
    74b8:	73800104 	addi	r14,r14,4
    74bc:	217fffcc 	andi	r5,r4,65535
    74c0:	2bcb383a 	mul	r5,r5,r15
    74c4:	2008d43a 	srli	r4,r4,16
    74c8:	1c7fffcc 	andi	r17,r3,65535
    74cc:	2c4b883a 	add	r5,r5,r17
    74d0:	29cb883a 	add	r5,r5,r7
    74d4:	23c9383a 	mul	r4,r4,r15
    74d8:	1806d43a 	srli	r3,r3,16
    74dc:	280ed43a 	srli	r7,r5,16
    74e0:	297fffcc 	andi	r5,r5,65535
    74e4:	20c7883a 	add	r3,r4,r3
    74e8:	19c7883a 	add	r3,r3,r7
    74ec:	1808943a 	slli	r4,r3,16
    74f0:	4023883a 	mov	r17,r8
    74f4:	180ed43a 	srli	r7,r3,16
    74f8:	214ab03a 	or	r5,r4,r5
    74fc:	41400015 	stw	r5,0(r8)
    7500:	42000104 	addi	r8,r8,4
    7504:	727fea36 	bltu	r14,r9,74b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70074b0>
    7508:	89c00115 	stw	r7,4(r17)
    750c:	37c00017 	ldw	ra,0(r6)
    7510:	f83ed43a 	srli	ra,ra,16
    7514:	f8001f26 	beq	ra,zero,7594 <__multiply+0x1a0>
    7518:	58c00017 	ldw	r3,0(r11)
    751c:	681d883a 	mov	r14,r13
    7520:	581f883a 	mov	r15,r11
    7524:	1811883a 	mov	r8,r3
    7528:	5825883a 	mov	r18,r11
    752c:	000f883a 	mov	r7,zero
    7530:	00000106 	br	7538 <__multiply+0x144>
    7534:	8825883a 	mov	r18,r17
    7538:	7140000b 	ldhu	r5,0(r14)
    753c:	4010d43a 	srli	r8,r8,16
    7540:	193fffcc 	andi	r4,r3,65535
    7544:	2fcb383a 	mul	r5,r5,ra
    7548:	7bc00104 	addi	r15,r15,4
    754c:	73800104 	addi	r14,r14,4
    7550:	2a0b883a 	add	r5,r5,r8
    7554:	29cb883a 	add	r5,r5,r7
    7558:	2806943a 	slli	r3,r5,16
    755c:	94400104 	addi	r17,r18,4
    7560:	280ad43a 	srli	r5,r5,16
    7564:	1908b03a 	or	r4,r3,r4
    7568:	793fff15 	stw	r4,-4(r15)
    756c:	70ffff17 	ldw	r3,-4(r14)
    7570:	8a000017 	ldw	r8,0(r17)
    7574:	1806d43a 	srli	r3,r3,16
    7578:	413fffcc 	andi	r4,r8,65535
    757c:	1fc7383a 	mul	r3,r3,ra
    7580:	1907883a 	add	r3,r3,r4
    7584:	1947883a 	add	r3,r3,r5
    7588:	180ed43a 	srli	r7,r3,16
    758c:	727fe936 	bltu	r14,r9,7534 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007534>
    7590:	90c00115 	stw	r3,4(r18)
    7594:	31800104 	addi	r6,r6,4
    7598:	5ac00104 	addi	r11,r11,4
    759c:	333fbe36 	bltu	r6,r12,7498 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007498>
    75a0:	0400090e 	bge	zero,r16,75c8 <__multiply+0x1d4>
    75a4:	50ffff17 	ldw	r3,-4(r10)
    75a8:	52bfff04 	addi	r10,r10,-4
    75ac:	18000326 	beq	r3,zero,75bc <__multiply+0x1c8>
    75b0:	00000506 	br	75c8 <__multiply+0x1d4>
    75b4:	50c00017 	ldw	r3,0(r10)
    75b8:	1800031e 	bne	r3,zero,75c8 <__multiply+0x1d4>
    75bc:	843fffc4 	addi	r16,r16,-1
    75c0:	52bfff04 	addi	r10,r10,-4
    75c4:	803ffb1e 	bne	r16,zero,75b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70075b4>
    75c8:	14000415 	stw	r16,16(r2)
    75cc:	dfc00517 	ldw	ra,20(sp)
    75d0:	dd000417 	ldw	r20,16(sp)
    75d4:	dcc00317 	ldw	r19,12(sp)
    75d8:	dc800217 	ldw	r18,8(sp)
    75dc:	dc400117 	ldw	r17,4(sp)
    75e0:	dc000017 	ldw	r16,0(sp)
    75e4:	dec00604 	addi	sp,sp,24
    75e8:	f800283a 	ret

000075ec <__pow5mult>:
    75ec:	defffa04 	addi	sp,sp,-24
    75f0:	dcc00315 	stw	r19,12(sp)
    75f4:	dc000015 	stw	r16,0(sp)
    75f8:	dfc00515 	stw	ra,20(sp)
    75fc:	dd000415 	stw	r20,16(sp)
    7600:	dc800215 	stw	r18,8(sp)
    7604:	dc400115 	stw	r17,4(sp)
    7608:	308000cc 	andi	r2,r6,3
    760c:	3021883a 	mov	r16,r6
    7610:	2027883a 	mov	r19,r4
    7614:	10002f1e 	bne	r2,zero,76d4 <__pow5mult+0xe8>
    7618:	2825883a 	mov	r18,r5
    761c:	8021d0ba 	srai	r16,r16,2
    7620:	80001a26 	beq	r16,zero,768c <__pow5mult+0xa0>
    7624:	9c401217 	ldw	r17,72(r19)
    7628:	8800061e 	bne	r17,zero,7644 <__pow5mult+0x58>
    762c:	00003406 	br	7700 <__pow5mult+0x114>
    7630:	8021d07a 	srai	r16,r16,1
    7634:	80001526 	beq	r16,zero,768c <__pow5mult+0xa0>
    7638:	88800017 	ldw	r2,0(r17)
    763c:	10001c26 	beq	r2,zero,76b0 <__pow5mult+0xc4>
    7640:	1023883a 	mov	r17,r2
    7644:	8080004c 	andi	r2,r16,1
    7648:	103ff926 	beq	r2,zero,7630 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007630>
    764c:	880d883a 	mov	r6,r17
    7650:	900b883a 	mov	r5,r18
    7654:	9809883a 	mov	r4,r19
    7658:	00073f40 	call	73f4 <__multiply>
    765c:	90001b26 	beq	r18,zero,76cc <__pow5mult+0xe0>
    7660:	91000117 	ldw	r4,4(r18)
    7664:	98c01317 	ldw	r3,76(r19)
    7668:	8021d07a 	srai	r16,r16,1
    766c:	2109883a 	add	r4,r4,r4
    7670:	2109883a 	add	r4,r4,r4
    7674:	1907883a 	add	r3,r3,r4
    7678:	19000017 	ldw	r4,0(r3)
    767c:	91000015 	stw	r4,0(r18)
    7680:	1c800015 	stw	r18,0(r3)
    7684:	1025883a 	mov	r18,r2
    7688:	803feb1e 	bne	r16,zero,7638 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007638>
    768c:	9005883a 	mov	r2,r18
    7690:	dfc00517 	ldw	ra,20(sp)
    7694:	dd000417 	ldw	r20,16(sp)
    7698:	dcc00317 	ldw	r19,12(sp)
    769c:	dc800217 	ldw	r18,8(sp)
    76a0:	dc400117 	ldw	r17,4(sp)
    76a4:	dc000017 	ldw	r16,0(sp)
    76a8:	dec00604 	addi	sp,sp,24
    76ac:	f800283a 	ret
    76b0:	880d883a 	mov	r6,r17
    76b4:	880b883a 	mov	r5,r17
    76b8:	9809883a 	mov	r4,r19
    76bc:	00073f40 	call	73f4 <__multiply>
    76c0:	88800015 	stw	r2,0(r17)
    76c4:	10000015 	stw	zero,0(r2)
    76c8:	003fdd06 	br	7640 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007640>
    76cc:	1025883a 	mov	r18,r2
    76d0:	003fd706 	br	7630 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007630>
    76d4:	10bfffc4 	addi	r2,r2,-1
    76d8:	1085883a 	add	r2,r2,r2
    76dc:	00c00074 	movhi	r3,1
    76e0:	18dc9c04 	addi	r3,r3,29296
    76e4:	1085883a 	add	r2,r2,r2
    76e8:	1885883a 	add	r2,r3,r2
    76ec:	11800017 	ldw	r6,0(r2)
    76f0:	000f883a 	mov	r7,zero
    76f4:	000707c0 	call	707c <__multadd>
    76f8:	1025883a 	mov	r18,r2
    76fc:	003fc706 	br	761c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700761c>
    7700:	05000044 	movi	r20,1
    7704:	a00b883a 	mov	r5,r20
    7708:	9809883a 	mov	r4,r19
    770c:	0006fac0 	call	6fac <_Balloc>
    7710:	1023883a 	mov	r17,r2
    7714:	00809c44 	movi	r2,625
    7718:	88800515 	stw	r2,20(r17)
    771c:	8d000415 	stw	r20,16(r17)
    7720:	9c401215 	stw	r17,72(r19)
    7724:	88000015 	stw	zero,0(r17)
    7728:	003fc606 	br	7644 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007644>

0000772c <__lshift>:
    772c:	defff904 	addi	sp,sp,-28
    7730:	dd400515 	stw	r21,20(sp)
    7734:	dcc00315 	stw	r19,12(sp)
    7738:	302bd17a 	srai	r21,r6,5
    773c:	2cc00417 	ldw	r19,16(r5)
    7740:	28800217 	ldw	r2,8(r5)
    7744:	dd000415 	stw	r20,16(sp)
    7748:	ace7883a 	add	r19,r21,r19
    774c:	dc800215 	stw	r18,8(sp)
    7750:	dc400115 	stw	r17,4(sp)
    7754:	dc000015 	stw	r16,0(sp)
    7758:	dfc00615 	stw	ra,24(sp)
    775c:	9c000044 	addi	r16,r19,1
    7760:	2823883a 	mov	r17,r5
    7764:	3029883a 	mov	r20,r6
    7768:	2025883a 	mov	r18,r4
    776c:	29400117 	ldw	r5,4(r5)
    7770:	1400030e 	bge	r2,r16,7780 <__lshift+0x54>
    7774:	1085883a 	add	r2,r2,r2
    7778:	29400044 	addi	r5,r5,1
    777c:	143ffd16 	blt	r2,r16,7774 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007774>
    7780:	9009883a 	mov	r4,r18
    7784:	0006fac0 	call	6fac <_Balloc>
    7788:	10c00504 	addi	r3,r2,20
    778c:	0540070e 	bge	zero,r21,77ac <__lshift+0x80>
    7790:	ad6b883a 	add	r21,r21,r21
    7794:	ad6b883a 	add	r21,r21,r21
    7798:	1809883a 	mov	r4,r3
    779c:	1d47883a 	add	r3,r3,r21
    77a0:	20000015 	stw	zero,0(r4)
    77a4:	21000104 	addi	r4,r4,4
    77a8:	193ffd1e 	bne	r3,r4,77a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70077a0>
    77ac:	8a000417 	ldw	r8,16(r17)
    77b0:	89000504 	addi	r4,r17,20
    77b4:	a18007cc 	andi	r6,r20,31
    77b8:	4211883a 	add	r8,r8,r8
    77bc:	4211883a 	add	r8,r8,r8
    77c0:	2211883a 	add	r8,r4,r8
    77c4:	30002326 	beq	r6,zero,7854 <__lshift+0x128>
    77c8:	02400804 	movi	r9,32
    77cc:	4993c83a 	sub	r9,r9,r6
    77d0:	000b883a 	mov	r5,zero
    77d4:	21c00017 	ldw	r7,0(r4)
    77d8:	1815883a 	mov	r10,r3
    77dc:	18c00104 	addi	r3,r3,4
    77e0:	398e983a 	sll	r7,r7,r6
    77e4:	21000104 	addi	r4,r4,4
    77e8:	394ab03a 	or	r5,r7,r5
    77ec:	197fff15 	stw	r5,-4(r3)
    77f0:	217fff17 	ldw	r5,-4(r4)
    77f4:	2a4ad83a 	srl	r5,r5,r9
    77f8:	223ff636 	bltu	r4,r8,77d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70077d4>
    77fc:	51400115 	stw	r5,4(r10)
    7800:	28001a1e 	bne	r5,zero,786c <__lshift+0x140>
    7804:	843fffc4 	addi	r16,r16,-1
    7808:	14000415 	stw	r16,16(r2)
    780c:	88000826 	beq	r17,zero,7830 <__lshift+0x104>
    7810:	89000117 	ldw	r4,4(r17)
    7814:	90c01317 	ldw	r3,76(r18)
    7818:	2109883a 	add	r4,r4,r4
    781c:	2109883a 	add	r4,r4,r4
    7820:	1907883a 	add	r3,r3,r4
    7824:	19000017 	ldw	r4,0(r3)
    7828:	89000015 	stw	r4,0(r17)
    782c:	1c400015 	stw	r17,0(r3)
    7830:	dfc00617 	ldw	ra,24(sp)
    7834:	dd400517 	ldw	r21,20(sp)
    7838:	dd000417 	ldw	r20,16(sp)
    783c:	dcc00317 	ldw	r19,12(sp)
    7840:	dc800217 	ldw	r18,8(sp)
    7844:	dc400117 	ldw	r17,4(sp)
    7848:	dc000017 	ldw	r16,0(sp)
    784c:	dec00704 	addi	sp,sp,28
    7850:	f800283a 	ret
    7854:	21400017 	ldw	r5,0(r4)
    7858:	18c00104 	addi	r3,r3,4
    785c:	21000104 	addi	r4,r4,4
    7860:	197fff15 	stw	r5,-4(r3)
    7864:	223ffb36 	bltu	r4,r8,7854 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007854>
    7868:	003fe606 	br	7804 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007804>
    786c:	9c000084 	addi	r16,r19,2
    7870:	003fe406 	br	7804 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007804>

00007874 <__mcmp>:
    7874:	20800417 	ldw	r2,16(r4)
    7878:	28c00417 	ldw	r3,16(r5)
    787c:	10c5c83a 	sub	r2,r2,r3
    7880:	1000111e 	bne	r2,zero,78c8 <__mcmp+0x54>
    7884:	18c7883a 	add	r3,r3,r3
    7888:	18c7883a 	add	r3,r3,r3
    788c:	21000504 	addi	r4,r4,20
    7890:	29400504 	addi	r5,r5,20
    7894:	20c5883a 	add	r2,r4,r3
    7898:	28cb883a 	add	r5,r5,r3
    789c:	00000106 	br	78a4 <__mcmp+0x30>
    78a0:	20800a2e 	bgeu	r4,r2,78cc <__mcmp+0x58>
    78a4:	10bfff04 	addi	r2,r2,-4
    78a8:	297fff04 	addi	r5,r5,-4
    78ac:	11800017 	ldw	r6,0(r2)
    78b0:	28c00017 	ldw	r3,0(r5)
    78b4:	30fffa26 	beq	r6,r3,78a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70078a0>
    78b8:	30c00236 	bltu	r6,r3,78c4 <__mcmp+0x50>
    78bc:	00800044 	movi	r2,1
    78c0:	f800283a 	ret
    78c4:	00bfffc4 	movi	r2,-1
    78c8:	f800283a 	ret
    78cc:	0005883a 	mov	r2,zero
    78d0:	f800283a 	ret

000078d4 <__mdiff>:
    78d4:	28c00417 	ldw	r3,16(r5)
    78d8:	30800417 	ldw	r2,16(r6)
    78dc:	defffa04 	addi	sp,sp,-24
    78e0:	dcc00315 	stw	r19,12(sp)
    78e4:	dc800215 	stw	r18,8(sp)
    78e8:	dfc00515 	stw	ra,20(sp)
    78ec:	dd000415 	stw	r20,16(sp)
    78f0:	dc400115 	stw	r17,4(sp)
    78f4:	dc000015 	stw	r16,0(sp)
    78f8:	1887c83a 	sub	r3,r3,r2
    78fc:	2825883a 	mov	r18,r5
    7900:	3027883a 	mov	r19,r6
    7904:	1800141e 	bne	r3,zero,7958 <__mdiff+0x84>
    7908:	1085883a 	add	r2,r2,r2
    790c:	1085883a 	add	r2,r2,r2
    7910:	2a000504 	addi	r8,r5,20
    7914:	34000504 	addi	r16,r6,20
    7918:	4087883a 	add	r3,r8,r2
    791c:	8085883a 	add	r2,r16,r2
    7920:	00000106 	br	7928 <__mdiff+0x54>
    7924:	40c0592e 	bgeu	r8,r3,7a8c <__mdiff+0x1b8>
    7928:	18ffff04 	addi	r3,r3,-4
    792c:	10bfff04 	addi	r2,r2,-4
    7930:	19c00017 	ldw	r7,0(r3)
    7934:	11400017 	ldw	r5,0(r2)
    7938:	397ffa26 	beq	r7,r5,7924 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007924>
    793c:	3940592e 	bgeu	r7,r5,7aa4 <__mdiff+0x1d0>
    7940:	9005883a 	mov	r2,r18
    7944:	4023883a 	mov	r17,r8
    7948:	9825883a 	mov	r18,r19
    794c:	05000044 	movi	r20,1
    7950:	1027883a 	mov	r19,r2
    7954:	00000406 	br	7968 <__mdiff+0x94>
    7958:	18005616 	blt	r3,zero,7ab4 <__mdiff+0x1e0>
    795c:	34400504 	addi	r17,r6,20
    7960:	2c000504 	addi	r16,r5,20
    7964:	0029883a 	mov	r20,zero
    7968:	91400117 	ldw	r5,4(r18)
    796c:	0006fac0 	call	6fac <_Balloc>
    7970:	92400417 	ldw	r9,16(r18)
    7974:	9b000417 	ldw	r12,16(r19)
    7978:	12c00504 	addi	r11,r2,20
    797c:	4a51883a 	add	r8,r9,r9
    7980:	6319883a 	add	r12,r12,r12
    7984:	4211883a 	add	r8,r8,r8
    7988:	6319883a 	add	r12,r12,r12
    798c:	15000315 	stw	r20,12(r2)
    7990:	8211883a 	add	r8,r16,r8
    7994:	8b19883a 	add	r12,r17,r12
    7998:	0007883a 	mov	r3,zero
    799c:	81400017 	ldw	r5,0(r16)
    79a0:	89c00017 	ldw	r7,0(r17)
    79a4:	59800104 	addi	r6,r11,4
    79a8:	293fffcc 	andi	r4,r5,65535
    79ac:	20c7883a 	add	r3,r4,r3
    79b0:	393fffcc 	andi	r4,r7,65535
    79b4:	1909c83a 	sub	r4,r3,r4
    79b8:	280ad43a 	srli	r5,r5,16
    79bc:	380ed43a 	srli	r7,r7,16
    79c0:	2007d43a 	srai	r3,r4,16
    79c4:	213fffcc 	andi	r4,r4,65535
    79c8:	29cbc83a 	sub	r5,r5,r7
    79cc:	28c7883a 	add	r3,r5,r3
    79d0:	180a943a 	slli	r5,r3,16
    79d4:	8c400104 	addi	r17,r17,4
    79d8:	84000104 	addi	r16,r16,4
    79dc:	2908b03a 	or	r4,r5,r4
    79e0:	59000015 	stw	r4,0(r11)
    79e4:	1807d43a 	srai	r3,r3,16
    79e8:	3015883a 	mov	r10,r6
    79ec:	3017883a 	mov	r11,r6
    79f0:	8b3fea36 	bltu	r17,r12,799c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700799c>
    79f4:	8200162e 	bgeu	r16,r8,7a50 <__mdiff+0x17c>
    79f8:	8017883a 	mov	r11,r16
    79fc:	59400017 	ldw	r5,0(r11)
    7a00:	31800104 	addi	r6,r6,4
    7a04:	5ac00104 	addi	r11,r11,4
    7a08:	293fffcc 	andi	r4,r5,65535
    7a0c:	20c7883a 	add	r3,r4,r3
    7a10:	280ed43a 	srli	r7,r5,16
    7a14:	180bd43a 	srai	r5,r3,16
    7a18:	193fffcc 	andi	r4,r3,65535
    7a1c:	3947883a 	add	r3,r7,r5
    7a20:	180a943a 	slli	r5,r3,16
    7a24:	1807d43a 	srai	r3,r3,16
    7a28:	2908b03a 	or	r4,r5,r4
    7a2c:	313fff15 	stw	r4,-4(r6)
    7a30:	5a3ff236 	bltu	r11,r8,79fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70079fc>
    7a34:	0406303a 	nor	r3,zero,r16
    7a38:	1a07883a 	add	r3,r3,r8
    7a3c:	1806d0ba 	srli	r3,r3,2
    7a40:	18c00044 	addi	r3,r3,1
    7a44:	18c7883a 	add	r3,r3,r3
    7a48:	18c7883a 	add	r3,r3,r3
    7a4c:	50d5883a 	add	r10,r10,r3
    7a50:	50ffff04 	addi	r3,r10,-4
    7a54:	2000041e 	bne	r4,zero,7a68 <__mdiff+0x194>
    7a58:	18ffff04 	addi	r3,r3,-4
    7a5c:	19000017 	ldw	r4,0(r3)
    7a60:	4a7fffc4 	addi	r9,r9,-1
    7a64:	203ffc26 	beq	r4,zero,7a58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007a58>
    7a68:	12400415 	stw	r9,16(r2)
    7a6c:	dfc00517 	ldw	ra,20(sp)
    7a70:	dd000417 	ldw	r20,16(sp)
    7a74:	dcc00317 	ldw	r19,12(sp)
    7a78:	dc800217 	ldw	r18,8(sp)
    7a7c:	dc400117 	ldw	r17,4(sp)
    7a80:	dc000017 	ldw	r16,0(sp)
    7a84:	dec00604 	addi	sp,sp,24
    7a88:	f800283a 	ret
    7a8c:	000b883a 	mov	r5,zero
    7a90:	0006fac0 	call	6fac <_Balloc>
    7a94:	00c00044 	movi	r3,1
    7a98:	10c00415 	stw	r3,16(r2)
    7a9c:	10000515 	stw	zero,20(r2)
    7aa0:	003ff206 	br	7a6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007a6c>
    7aa4:	8023883a 	mov	r17,r16
    7aa8:	0029883a 	mov	r20,zero
    7aac:	4021883a 	mov	r16,r8
    7ab0:	003fad06 	br	7968 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007968>
    7ab4:	9005883a 	mov	r2,r18
    7ab8:	94400504 	addi	r17,r18,20
    7abc:	9c000504 	addi	r16,r19,20
    7ac0:	9825883a 	mov	r18,r19
    7ac4:	05000044 	movi	r20,1
    7ac8:	1027883a 	mov	r19,r2
    7acc:	003fa606 	br	7968 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007968>

00007ad0 <__ulp>:
    7ad0:	295ffc2c 	andhi	r5,r5,32752
    7ad4:	00bf3034 	movhi	r2,64704
    7ad8:	2887883a 	add	r3,r5,r2
    7adc:	00c0020e 	bge	zero,r3,7ae8 <__ulp+0x18>
    7ae0:	0005883a 	mov	r2,zero
    7ae4:	f800283a 	ret
    7ae8:	00c7c83a 	sub	r3,zero,r3
    7aec:	1807d53a 	srai	r3,r3,20
    7af0:	008004c4 	movi	r2,19
    7af4:	10c00b0e 	bge	r2,r3,7b24 <__ulp+0x54>
    7af8:	18bffb04 	addi	r2,r3,-20
    7afc:	01000784 	movi	r4,30
    7b00:	0007883a 	mov	r3,zero
    7b04:	20800516 	blt	r4,r2,7b1c <__ulp+0x4c>
    7b08:	010007c4 	movi	r4,31
    7b0c:	2089c83a 	sub	r4,r4,r2
    7b10:	00800044 	movi	r2,1
    7b14:	1104983a 	sll	r2,r2,r4
    7b18:	f800283a 	ret
    7b1c:	00800044 	movi	r2,1
    7b20:	f800283a 	ret
    7b24:	01400234 	movhi	r5,8
    7b28:	28c7d83a 	sra	r3,r5,r3
    7b2c:	0005883a 	mov	r2,zero
    7b30:	f800283a 	ret

00007b34 <__b2d>:
    7b34:	defffa04 	addi	sp,sp,-24
    7b38:	dc000015 	stw	r16,0(sp)
    7b3c:	24000417 	ldw	r16,16(r4)
    7b40:	dc400115 	stw	r17,4(sp)
    7b44:	24400504 	addi	r17,r4,20
    7b48:	8421883a 	add	r16,r16,r16
    7b4c:	8421883a 	add	r16,r16,r16
    7b50:	8c21883a 	add	r16,r17,r16
    7b54:	dc800215 	stw	r18,8(sp)
    7b58:	84bfff17 	ldw	r18,-4(r16)
    7b5c:	dd000415 	stw	r20,16(sp)
    7b60:	dcc00315 	stw	r19,12(sp)
    7b64:	9009883a 	mov	r4,r18
    7b68:	2829883a 	mov	r20,r5
    7b6c:	dfc00515 	stw	ra,20(sp)
    7b70:	00072a00 	call	72a0 <__hi0bits>
    7b74:	00c00804 	movi	r3,32
    7b78:	1889c83a 	sub	r4,r3,r2
    7b7c:	a1000015 	stw	r4,0(r20)
    7b80:	01000284 	movi	r4,10
    7b84:	84ffff04 	addi	r19,r16,-4
    7b88:	20801216 	blt	r4,r2,7bd4 <__b2d+0xa0>
    7b8c:	018002c4 	movi	r6,11
    7b90:	308dc83a 	sub	r6,r6,r2
    7b94:	9186d83a 	srl	r3,r18,r6
    7b98:	18cffc34 	orhi	r3,r3,16368
    7b9c:	8cc0212e 	bgeu	r17,r19,7c24 <__b2d+0xf0>
    7ba0:	813ffe17 	ldw	r4,-8(r16)
    7ba4:	218cd83a 	srl	r6,r4,r6
    7ba8:	10800544 	addi	r2,r2,21
    7bac:	9084983a 	sll	r2,r18,r2
    7bb0:	1184b03a 	or	r2,r2,r6
    7bb4:	dfc00517 	ldw	ra,20(sp)
    7bb8:	dd000417 	ldw	r20,16(sp)
    7bbc:	dcc00317 	ldw	r19,12(sp)
    7bc0:	dc800217 	ldw	r18,8(sp)
    7bc4:	dc400117 	ldw	r17,4(sp)
    7bc8:	dc000017 	ldw	r16,0(sp)
    7bcc:	dec00604 	addi	sp,sp,24
    7bd0:	f800283a 	ret
    7bd4:	8cc00f2e 	bgeu	r17,r19,7c14 <__b2d+0xe0>
    7bd8:	117ffd44 	addi	r5,r2,-11
    7bdc:	80bffe17 	ldw	r2,-8(r16)
    7be0:	28000e26 	beq	r5,zero,7c1c <__b2d+0xe8>
    7be4:	1949c83a 	sub	r4,r3,r5
    7be8:	9164983a 	sll	r18,r18,r5
    7bec:	1106d83a 	srl	r3,r2,r4
    7bf0:	81bffe04 	addi	r6,r16,-8
    7bf4:	948ffc34 	orhi	r18,r18,16368
    7bf8:	90c6b03a 	or	r3,r18,r3
    7bfc:	89800e2e 	bgeu	r17,r6,7c38 <__b2d+0x104>
    7c00:	81bffd17 	ldw	r6,-12(r16)
    7c04:	1144983a 	sll	r2,r2,r5
    7c08:	310ad83a 	srl	r5,r6,r4
    7c0c:	2884b03a 	or	r2,r5,r2
    7c10:	003fe806 	br	7bb4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007bb4>
    7c14:	10bffd44 	addi	r2,r2,-11
    7c18:	1000041e 	bne	r2,zero,7c2c <__b2d+0xf8>
    7c1c:	90cffc34 	orhi	r3,r18,16368
    7c20:	003fe406 	br	7bb4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007bb4>
    7c24:	000d883a 	mov	r6,zero
    7c28:	003fdf06 	br	7ba8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007ba8>
    7c2c:	90a4983a 	sll	r18,r18,r2
    7c30:	0005883a 	mov	r2,zero
    7c34:	003ff906 	br	7c1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007c1c>
    7c38:	1144983a 	sll	r2,r2,r5
    7c3c:	003fdd06 	br	7bb4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007bb4>

00007c40 <__d2b>:
    7c40:	defff804 	addi	sp,sp,-32
    7c44:	dc000215 	stw	r16,8(sp)
    7c48:	3021883a 	mov	r16,r6
    7c4c:	dc400315 	stw	r17,12(sp)
    7c50:	8022907a 	slli	r17,r16,1
    7c54:	dd000615 	stw	r20,24(sp)
    7c58:	2829883a 	mov	r20,r5
    7c5c:	01400044 	movi	r5,1
    7c60:	dcc00515 	stw	r19,20(sp)
    7c64:	dc800415 	stw	r18,16(sp)
    7c68:	dfc00715 	stw	ra,28(sp)
    7c6c:	3825883a 	mov	r18,r7
    7c70:	8822d57a 	srli	r17,r17,21
    7c74:	0006fac0 	call	6fac <_Balloc>
    7c78:	1027883a 	mov	r19,r2
    7c7c:	00800434 	movhi	r2,16
    7c80:	10bfffc4 	addi	r2,r2,-1
    7c84:	808c703a 	and	r6,r16,r2
    7c88:	88000126 	beq	r17,zero,7c90 <__d2b+0x50>
    7c8c:	31800434 	orhi	r6,r6,16
    7c90:	d9800015 	stw	r6,0(sp)
    7c94:	a0002426 	beq	r20,zero,7d28 <__d2b+0xe8>
    7c98:	d9000104 	addi	r4,sp,4
    7c9c:	dd000115 	stw	r20,4(sp)
    7ca0:	00073080 	call	7308 <__lo0bits>
    7ca4:	d8c00017 	ldw	r3,0(sp)
    7ca8:	10002f1e 	bne	r2,zero,7d68 <__d2b+0x128>
    7cac:	d9000117 	ldw	r4,4(sp)
    7cb0:	99000515 	stw	r4,20(r19)
    7cb4:	1821003a 	cmpeq	r16,r3,zero
    7cb8:	01000084 	movi	r4,2
    7cbc:	2421c83a 	sub	r16,r4,r16
    7cc0:	98c00615 	stw	r3,24(r19)
    7cc4:	9c000415 	stw	r16,16(r19)
    7cc8:	88001f1e 	bne	r17,zero,7d48 <__d2b+0x108>
    7ccc:	10bef384 	addi	r2,r2,-1074
    7cd0:	90800015 	stw	r2,0(r18)
    7cd4:	00900034 	movhi	r2,16384
    7cd8:	10bfffc4 	addi	r2,r2,-1
    7cdc:	8085883a 	add	r2,r16,r2
    7ce0:	1085883a 	add	r2,r2,r2
    7ce4:	1085883a 	add	r2,r2,r2
    7ce8:	9885883a 	add	r2,r19,r2
    7cec:	11000517 	ldw	r4,20(r2)
    7cf0:	8020917a 	slli	r16,r16,5
    7cf4:	00072a00 	call	72a0 <__hi0bits>
    7cf8:	d8c00817 	ldw	r3,32(sp)
    7cfc:	8085c83a 	sub	r2,r16,r2
    7d00:	18800015 	stw	r2,0(r3)
    7d04:	9805883a 	mov	r2,r19
    7d08:	dfc00717 	ldw	ra,28(sp)
    7d0c:	dd000617 	ldw	r20,24(sp)
    7d10:	dcc00517 	ldw	r19,20(sp)
    7d14:	dc800417 	ldw	r18,16(sp)
    7d18:	dc400317 	ldw	r17,12(sp)
    7d1c:	dc000217 	ldw	r16,8(sp)
    7d20:	dec00804 	addi	sp,sp,32
    7d24:	f800283a 	ret
    7d28:	d809883a 	mov	r4,sp
    7d2c:	00073080 	call	7308 <__lo0bits>
    7d30:	d8c00017 	ldw	r3,0(sp)
    7d34:	04000044 	movi	r16,1
    7d38:	9c000415 	stw	r16,16(r19)
    7d3c:	98c00515 	stw	r3,20(r19)
    7d40:	10800804 	addi	r2,r2,32
    7d44:	883fe126 	beq	r17,zero,7ccc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007ccc>
    7d48:	00c00d44 	movi	r3,53
    7d4c:	8c7ef344 	addi	r17,r17,-1075
    7d50:	88a3883a 	add	r17,r17,r2
    7d54:	1885c83a 	sub	r2,r3,r2
    7d58:	d8c00817 	ldw	r3,32(sp)
    7d5c:	94400015 	stw	r17,0(r18)
    7d60:	18800015 	stw	r2,0(r3)
    7d64:	003fe706 	br	7d04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007d04>
    7d68:	01000804 	movi	r4,32
    7d6c:	2089c83a 	sub	r4,r4,r2
    7d70:	1908983a 	sll	r4,r3,r4
    7d74:	d9400117 	ldw	r5,4(sp)
    7d78:	1886d83a 	srl	r3,r3,r2
    7d7c:	2148b03a 	or	r4,r4,r5
    7d80:	99000515 	stw	r4,20(r19)
    7d84:	d8c00015 	stw	r3,0(sp)
    7d88:	003fca06 	br	7cb4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007cb4>

00007d8c <__ratio>:
    7d8c:	defff904 	addi	sp,sp,-28
    7d90:	dc400315 	stw	r17,12(sp)
    7d94:	2823883a 	mov	r17,r5
    7d98:	d9400104 	addi	r5,sp,4
    7d9c:	dfc00615 	stw	ra,24(sp)
    7da0:	dcc00515 	stw	r19,20(sp)
    7da4:	dc800415 	stw	r18,16(sp)
    7da8:	2027883a 	mov	r19,r4
    7dac:	dc000215 	stw	r16,8(sp)
    7db0:	0007b340 	call	7b34 <__b2d>
    7db4:	d80b883a 	mov	r5,sp
    7db8:	8809883a 	mov	r4,r17
    7dbc:	1025883a 	mov	r18,r2
    7dc0:	1821883a 	mov	r16,r3
    7dc4:	0007b340 	call	7b34 <__b2d>
    7dc8:	8a000417 	ldw	r8,16(r17)
    7dcc:	99000417 	ldw	r4,16(r19)
    7dd0:	d9400117 	ldw	r5,4(sp)
    7dd4:	2209c83a 	sub	r4,r4,r8
    7dd8:	2010917a 	slli	r8,r4,5
    7ddc:	d9000017 	ldw	r4,0(sp)
    7de0:	2909c83a 	sub	r4,r5,r4
    7de4:	4109883a 	add	r4,r8,r4
    7de8:	01000e0e 	bge	zero,r4,7e24 <__ratio+0x98>
    7dec:	2008953a 	slli	r4,r4,20
    7df0:	2421883a 	add	r16,r4,r16
    7df4:	100d883a 	mov	r6,r2
    7df8:	180f883a 	mov	r7,r3
    7dfc:	9009883a 	mov	r4,r18
    7e00:	800b883a 	mov	r5,r16
    7e04:	000bc780 	call	bc78 <__divdf3>
    7e08:	dfc00617 	ldw	ra,24(sp)
    7e0c:	dcc00517 	ldw	r19,20(sp)
    7e10:	dc800417 	ldw	r18,16(sp)
    7e14:	dc400317 	ldw	r17,12(sp)
    7e18:	dc000217 	ldw	r16,8(sp)
    7e1c:	dec00704 	addi	sp,sp,28
    7e20:	f800283a 	ret
    7e24:	2008953a 	slli	r4,r4,20
    7e28:	1907c83a 	sub	r3,r3,r4
    7e2c:	003ff106 	br	7df4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007df4>

00007e30 <_mprec_log10>:
    7e30:	defffe04 	addi	sp,sp,-8
    7e34:	dc000015 	stw	r16,0(sp)
    7e38:	dfc00115 	stw	ra,4(sp)
    7e3c:	008005c4 	movi	r2,23
    7e40:	2021883a 	mov	r16,r4
    7e44:	11000d0e 	bge	r2,r4,7e7c <_mprec_log10+0x4c>
    7e48:	0005883a 	mov	r2,zero
    7e4c:	00cffc34 	movhi	r3,16368
    7e50:	843fffc4 	addi	r16,r16,-1
    7e54:	000d883a 	mov	r6,zero
    7e58:	01d00934 	movhi	r7,16420
    7e5c:	1009883a 	mov	r4,r2
    7e60:	180b883a 	mov	r5,r3
    7e64:	000c7b80 	call	c7b8 <__muldf3>
    7e68:	803ff91e 	bne	r16,zero,7e50 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007e50>
    7e6c:	dfc00117 	ldw	ra,4(sp)
    7e70:	dc000017 	ldw	r16,0(sp)
    7e74:	dec00204 	addi	sp,sp,8
    7e78:	f800283a 	ret
    7e7c:	202090fa 	slli	r16,r4,3
    7e80:	00800074 	movhi	r2,1
    7e84:	109cb304 	addi	r2,r2,29388
    7e88:	1421883a 	add	r16,r2,r16
    7e8c:	80800017 	ldw	r2,0(r16)
    7e90:	80c00117 	ldw	r3,4(r16)
    7e94:	dfc00117 	ldw	ra,4(sp)
    7e98:	dc000017 	ldw	r16,0(sp)
    7e9c:	dec00204 	addi	sp,sp,8
    7ea0:	f800283a 	ret

00007ea4 <__copybits>:
    7ea4:	297fffc4 	addi	r5,r5,-1
    7ea8:	280fd17a 	srai	r7,r5,5
    7eac:	30c00417 	ldw	r3,16(r6)
    7eb0:	30800504 	addi	r2,r6,20
    7eb4:	39c00044 	addi	r7,r7,1
    7eb8:	18c7883a 	add	r3,r3,r3
    7ebc:	39cf883a 	add	r7,r7,r7
    7ec0:	18c7883a 	add	r3,r3,r3
    7ec4:	39cf883a 	add	r7,r7,r7
    7ec8:	10c7883a 	add	r3,r2,r3
    7ecc:	21cf883a 	add	r7,r4,r7
    7ed0:	10c00d2e 	bgeu	r2,r3,7f08 <__copybits+0x64>
    7ed4:	200b883a 	mov	r5,r4
    7ed8:	12000017 	ldw	r8,0(r2)
    7edc:	29400104 	addi	r5,r5,4
    7ee0:	10800104 	addi	r2,r2,4
    7ee4:	2a3fff15 	stw	r8,-4(r5)
    7ee8:	10fffb36 	bltu	r2,r3,7ed8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007ed8>
    7eec:	1985c83a 	sub	r2,r3,r6
    7ef0:	10bffac4 	addi	r2,r2,-21
    7ef4:	1004d0ba 	srli	r2,r2,2
    7ef8:	10800044 	addi	r2,r2,1
    7efc:	1085883a 	add	r2,r2,r2
    7f00:	1085883a 	add	r2,r2,r2
    7f04:	2089883a 	add	r4,r4,r2
    7f08:	21c0032e 	bgeu	r4,r7,7f18 <__copybits+0x74>
    7f0c:	20000015 	stw	zero,0(r4)
    7f10:	21000104 	addi	r4,r4,4
    7f14:	21fffd36 	bltu	r4,r7,7f0c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007f0c>
    7f18:	f800283a 	ret

00007f1c <__any_on>:
    7f1c:	20c00417 	ldw	r3,16(r4)
    7f20:	2805d17a 	srai	r2,r5,5
    7f24:	21000504 	addi	r4,r4,20
    7f28:	18800d0e 	bge	r3,r2,7f60 <__any_on+0x44>
    7f2c:	18c7883a 	add	r3,r3,r3
    7f30:	18c7883a 	add	r3,r3,r3
    7f34:	20c7883a 	add	r3,r4,r3
    7f38:	20c0192e 	bgeu	r4,r3,7fa0 <__any_on+0x84>
    7f3c:	18bfff17 	ldw	r2,-4(r3)
    7f40:	18ffff04 	addi	r3,r3,-4
    7f44:	1000041e 	bne	r2,zero,7f58 <__any_on+0x3c>
    7f48:	20c0142e 	bgeu	r4,r3,7f9c <__any_on+0x80>
    7f4c:	18ffff04 	addi	r3,r3,-4
    7f50:	19400017 	ldw	r5,0(r3)
    7f54:	283ffc26 	beq	r5,zero,7f48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007f48>
    7f58:	00800044 	movi	r2,1
    7f5c:	f800283a 	ret
    7f60:	10c00a0e 	bge	r2,r3,7f8c <__any_on+0x70>
    7f64:	1085883a 	add	r2,r2,r2
    7f68:	1085883a 	add	r2,r2,r2
    7f6c:	294007cc 	andi	r5,r5,31
    7f70:	2087883a 	add	r3,r4,r2
    7f74:	283ff026 	beq	r5,zero,7f38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007f38>
    7f78:	19800017 	ldw	r6,0(r3)
    7f7c:	3144d83a 	srl	r2,r6,r5
    7f80:	114a983a 	sll	r5,r2,r5
    7f84:	317ff41e 	bne	r6,r5,7f58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007f58>
    7f88:	003feb06 	br	7f38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007f38>
    7f8c:	1085883a 	add	r2,r2,r2
    7f90:	1085883a 	add	r2,r2,r2
    7f94:	2087883a 	add	r3,r4,r2
    7f98:	003fe706 	br	7f38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007f38>
    7f9c:	f800283a 	ret
    7fa0:	0005883a 	mov	r2,zero
    7fa4:	f800283a 	ret

00007fa8 <_realloc_r>:
    7fa8:	defff604 	addi	sp,sp,-40
    7fac:	dc800215 	stw	r18,8(sp)
    7fb0:	dfc00915 	stw	ra,36(sp)
    7fb4:	df000815 	stw	fp,32(sp)
    7fb8:	ddc00715 	stw	r23,28(sp)
    7fbc:	dd800615 	stw	r22,24(sp)
    7fc0:	dd400515 	stw	r21,20(sp)
    7fc4:	dd000415 	stw	r20,16(sp)
    7fc8:	dcc00315 	stw	r19,12(sp)
    7fcc:	dc400115 	stw	r17,4(sp)
    7fd0:	dc000015 	stw	r16,0(sp)
    7fd4:	3025883a 	mov	r18,r6
    7fd8:	2800b726 	beq	r5,zero,82b8 <_realloc_r+0x310>
    7fdc:	282b883a 	mov	r21,r5
    7fe0:	2029883a 	mov	r20,r4
    7fe4:	000dfb00 	call	dfb0 <__malloc_lock>
    7fe8:	a8bfff17 	ldw	r2,-4(r21)
    7fec:	043fff04 	movi	r16,-4
    7ff0:	90c002c4 	addi	r3,r18,11
    7ff4:	01000584 	movi	r4,22
    7ff8:	acfffe04 	addi	r19,r21,-8
    7ffc:	1420703a 	and	r16,r2,r16
    8000:	20c0332e 	bgeu	r4,r3,80d0 <_realloc_r+0x128>
    8004:	047ffe04 	movi	r17,-8
    8008:	1c62703a 	and	r17,r3,r17
    800c:	8807883a 	mov	r3,r17
    8010:	88005816 	blt	r17,zero,8174 <_realloc_r+0x1cc>
    8014:	8c805736 	bltu	r17,r18,8174 <_realloc_r+0x1cc>
    8018:	80c0300e 	bge	r16,r3,80dc <_realloc_r+0x134>
    801c:	07000074 	movhi	fp,1
    8020:	e71ec704 	addi	fp,fp,31516
    8024:	e1c00217 	ldw	r7,8(fp)
    8028:	9c09883a 	add	r4,r19,r16
    802c:	22000117 	ldw	r8,4(r4)
    8030:	21c06326 	beq	r4,r7,81c0 <_realloc_r+0x218>
    8034:	017fff84 	movi	r5,-2
    8038:	414a703a 	and	r5,r8,r5
    803c:	214b883a 	add	r5,r4,r5
    8040:	29800117 	ldw	r6,4(r5)
    8044:	3180004c 	andi	r6,r6,1
    8048:	30003f26 	beq	r6,zero,8148 <_realloc_r+0x1a0>
    804c:	1080004c 	andi	r2,r2,1
    8050:	10008326 	beq	r2,zero,8260 <_realloc_r+0x2b8>
    8054:	900b883a 	mov	r5,r18
    8058:	a009883a 	mov	r4,r20
    805c:	00062f00 	call	62f0 <_malloc_r>
    8060:	1025883a 	mov	r18,r2
    8064:	10011e26 	beq	r2,zero,84e0 <_realloc_r+0x538>
    8068:	a93fff17 	ldw	r4,-4(r21)
    806c:	10fffe04 	addi	r3,r2,-8
    8070:	00bfff84 	movi	r2,-2
    8074:	2084703a 	and	r2,r4,r2
    8078:	9885883a 	add	r2,r19,r2
    807c:	1880ee26 	beq	r3,r2,8438 <_realloc_r+0x490>
    8080:	81bfff04 	addi	r6,r16,-4
    8084:	00800904 	movi	r2,36
    8088:	1180b836 	bltu	r2,r6,836c <_realloc_r+0x3c4>
    808c:	00c004c4 	movi	r3,19
    8090:	19809636 	bltu	r3,r6,82ec <_realloc_r+0x344>
    8094:	9005883a 	mov	r2,r18
    8098:	a807883a 	mov	r3,r21
    809c:	19000017 	ldw	r4,0(r3)
    80a0:	11000015 	stw	r4,0(r2)
    80a4:	19000117 	ldw	r4,4(r3)
    80a8:	11000115 	stw	r4,4(r2)
    80ac:	18c00217 	ldw	r3,8(r3)
    80b0:	10c00215 	stw	r3,8(r2)
    80b4:	a80b883a 	mov	r5,r21
    80b8:	a009883a 	mov	r4,r20
    80bc:	00057040 	call	5704 <_free_r>
    80c0:	a009883a 	mov	r4,r20
    80c4:	000dfd40 	call	dfd4 <__malloc_unlock>
    80c8:	9005883a 	mov	r2,r18
    80cc:	00001206 	br	8118 <_realloc_r+0x170>
    80d0:	00c00404 	movi	r3,16
    80d4:	1823883a 	mov	r17,r3
    80d8:	003fce06 	br	8014 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008014>
    80dc:	a825883a 	mov	r18,r21
    80e0:	8445c83a 	sub	r2,r16,r17
    80e4:	00c003c4 	movi	r3,15
    80e8:	18802636 	bltu	r3,r2,8184 <_realloc_r+0x1dc>
    80ec:	99800117 	ldw	r6,4(r19)
    80f0:	9c07883a 	add	r3,r19,r16
    80f4:	3180004c 	andi	r6,r6,1
    80f8:	3420b03a 	or	r16,r6,r16
    80fc:	9c000115 	stw	r16,4(r19)
    8100:	18800117 	ldw	r2,4(r3)
    8104:	10800054 	ori	r2,r2,1
    8108:	18800115 	stw	r2,4(r3)
    810c:	a009883a 	mov	r4,r20
    8110:	000dfd40 	call	dfd4 <__malloc_unlock>
    8114:	9005883a 	mov	r2,r18
    8118:	dfc00917 	ldw	ra,36(sp)
    811c:	df000817 	ldw	fp,32(sp)
    8120:	ddc00717 	ldw	r23,28(sp)
    8124:	dd800617 	ldw	r22,24(sp)
    8128:	dd400517 	ldw	r21,20(sp)
    812c:	dd000417 	ldw	r20,16(sp)
    8130:	dcc00317 	ldw	r19,12(sp)
    8134:	dc800217 	ldw	r18,8(sp)
    8138:	dc400117 	ldw	r17,4(sp)
    813c:	dc000017 	ldw	r16,0(sp)
    8140:	dec00a04 	addi	sp,sp,40
    8144:	f800283a 	ret
    8148:	017fff04 	movi	r5,-4
    814c:	414a703a 	and	r5,r8,r5
    8150:	814d883a 	add	r6,r16,r5
    8154:	30c01f16 	blt	r6,r3,81d4 <_realloc_r+0x22c>
    8158:	20800317 	ldw	r2,12(r4)
    815c:	20c00217 	ldw	r3,8(r4)
    8160:	a825883a 	mov	r18,r21
    8164:	3021883a 	mov	r16,r6
    8168:	18800315 	stw	r2,12(r3)
    816c:	10c00215 	stw	r3,8(r2)
    8170:	003fdb06 	br	80e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70080e0>
    8174:	00800304 	movi	r2,12
    8178:	a0800015 	stw	r2,0(r20)
    817c:	0005883a 	mov	r2,zero
    8180:	003fe506 	br	8118 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008118>
    8184:	98c00117 	ldw	r3,4(r19)
    8188:	9c4b883a 	add	r5,r19,r17
    818c:	11000054 	ori	r4,r2,1
    8190:	18c0004c 	andi	r3,r3,1
    8194:	1c62b03a 	or	r17,r3,r17
    8198:	9c400115 	stw	r17,4(r19)
    819c:	29000115 	stw	r4,4(r5)
    81a0:	2885883a 	add	r2,r5,r2
    81a4:	10c00117 	ldw	r3,4(r2)
    81a8:	29400204 	addi	r5,r5,8
    81ac:	a009883a 	mov	r4,r20
    81b0:	18c00054 	ori	r3,r3,1
    81b4:	10c00115 	stw	r3,4(r2)
    81b8:	00057040 	call	5704 <_free_r>
    81bc:	003fd306 	br	810c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700810c>
    81c0:	017fff04 	movi	r5,-4
    81c4:	414a703a 	and	r5,r8,r5
    81c8:	89800404 	addi	r6,r17,16
    81cc:	8151883a 	add	r8,r16,r5
    81d0:	4180590e 	bge	r8,r6,8338 <_realloc_r+0x390>
    81d4:	1080004c 	andi	r2,r2,1
    81d8:	103f9e1e 	bne	r2,zero,8054 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008054>
    81dc:	adbffe17 	ldw	r22,-8(r21)
    81e0:	00bfff04 	movi	r2,-4
    81e4:	9dadc83a 	sub	r22,r19,r22
    81e8:	b1800117 	ldw	r6,4(r22)
    81ec:	3084703a 	and	r2,r6,r2
    81f0:	20002026 	beq	r4,zero,8274 <_realloc_r+0x2cc>
    81f4:	80af883a 	add	r23,r16,r2
    81f8:	b96f883a 	add	r23,r23,r5
    81fc:	21c05f26 	beq	r4,r7,837c <_realloc_r+0x3d4>
    8200:	b8c01c16 	blt	r23,r3,8274 <_realloc_r+0x2cc>
    8204:	20800317 	ldw	r2,12(r4)
    8208:	20c00217 	ldw	r3,8(r4)
    820c:	81bfff04 	addi	r6,r16,-4
    8210:	01000904 	movi	r4,36
    8214:	18800315 	stw	r2,12(r3)
    8218:	10c00215 	stw	r3,8(r2)
    821c:	b0c00217 	ldw	r3,8(r22)
    8220:	b0800317 	ldw	r2,12(r22)
    8224:	b4800204 	addi	r18,r22,8
    8228:	18800315 	stw	r2,12(r3)
    822c:	10c00215 	stw	r3,8(r2)
    8230:	21801b36 	bltu	r4,r6,82a0 <_realloc_r+0x2f8>
    8234:	008004c4 	movi	r2,19
    8238:	1180352e 	bgeu	r2,r6,8310 <_realloc_r+0x368>
    823c:	a8800017 	ldw	r2,0(r21)
    8240:	b0800215 	stw	r2,8(r22)
    8244:	a8800117 	ldw	r2,4(r21)
    8248:	b0800315 	stw	r2,12(r22)
    824c:	008006c4 	movi	r2,27
    8250:	11807f36 	bltu	r2,r6,8450 <_realloc_r+0x4a8>
    8254:	b0800404 	addi	r2,r22,16
    8258:	ad400204 	addi	r21,r21,8
    825c:	00002d06 	br	8314 <_realloc_r+0x36c>
    8260:	adbffe17 	ldw	r22,-8(r21)
    8264:	00bfff04 	movi	r2,-4
    8268:	9dadc83a 	sub	r22,r19,r22
    826c:	b1000117 	ldw	r4,4(r22)
    8270:	2084703a 	and	r2,r4,r2
    8274:	b03f7726 	beq	r22,zero,8054 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008054>
    8278:	80af883a 	add	r23,r16,r2
    827c:	b8ff7516 	blt	r23,r3,8054 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008054>
    8280:	b0800317 	ldw	r2,12(r22)
    8284:	b0c00217 	ldw	r3,8(r22)
    8288:	81bfff04 	addi	r6,r16,-4
    828c:	01000904 	movi	r4,36
    8290:	18800315 	stw	r2,12(r3)
    8294:	10c00215 	stw	r3,8(r2)
    8298:	b4800204 	addi	r18,r22,8
    829c:	21bfe52e 	bgeu	r4,r6,8234 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008234>
    82a0:	a80b883a 	mov	r5,r21
    82a4:	9009883a 	mov	r4,r18
    82a8:	0006d280 	call	6d28 <memmove>
    82ac:	b821883a 	mov	r16,r23
    82b0:	b027883a 	mov	r19,r22
    82b4:	003f8a06 	br	80e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70080e0>
    82b8:	300b883a 	mov	r5,r6
    82bc:	dfc00917 	ldw	ra,36(sp)
    82c0:	df000817 	ldw	fp,32(sp)
    82c4:	ddc00717 	ldw	r23,28(sp)
    82c8:	dd800617 	ldw	r22,24(sp)
    82cc:	dd400517 	ldw	r21,20(sp)
    82d0:	dd000417 	ldw	r20,16(sp)
    82d4:	dcc00317 	ldw	r19,12(sp)
    82d8:	dc800217 	ldw	r18,8(sp)
    82dc:	dc400117 	ldw	r17,4(sp)
    82e0:	dc000017 	ldw	r16,0(sp)
    82e4:	dec00a04 	addi	sp,sp,40
    82e8:	00062f01 	jmpi	62f0 <_malloc_r>
    82ec:	a8c00017 	ldw	r3,0(r21)
    82f0:	90c00015 	stw	r3,0(r18)
    82f4:	a8c00117 	ldw	r3,4(r21)
    82f8:	90c00115 	stw	r3,4(r18)
    82fc:	00c006c4 	movi	r3,27
    8300:	19804536 	bltu	r3,r6,8418 <_realloc_r+0x470>
    8304:	90800204 	addi	r2,r18,8
    8308:	a8c00204 	addi	r3,r21,8
    830c:	003f6306 	br	809c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700809c>
    8310:	9005883a 	mov	r2,r18
    8314:	a8c00017 	ldw	r3,0(r21)
    8318:	b821883a 	mov	r16,r23
    831c:	b027883a 	mov	r19,r22
    8320:	10c00015 	stw	r3,0(r2)
    8324:	a8c00117 	ldw	r3,4(r21)
    8328:	10c00115 	stw	r3,4(r2)
    832c:	a8c00217 	ldw	r3,8(r21)
    8330:	10c00215 	stw	r3,8(r2)
    8334:	003f6a06 	br	80e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70080e0>
    8338:	9c67883a 	add	r19,r19,r17
    833c:	4445c83a 	sub	r2,r8,r17
    8340:	e4c00215 	stw	r19,8(fp)
    8344:	10800054 	ori	r2,r2,1
    8348:	98800115 	stw	r2,4(r19)
    834c:	a8bfff17 	ldw	r2,-4(r21)
    8350:	a009883a 	mov	r4,r20
    8354:	1080004c 	andi	r2,r2,1
    8358:	1462b03a 	or	r17,r2,r17
    835c:	ac7fff15 	stw	r17,-4(r21)
    8360:	000dfd40 	call	dfd4 <__malloc_unlock>
    8364:	a805883a 	mov	r2,r21
    8368:	003f6b06 	br	8118 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008118>
    836c:	a80b883a 	mov	r5,r21
    8370:	9009883a 	mov	r4,r18
    8374:	0006d280 	call	6d28 <memmove>
    8378:	003f4e06 	br	80b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70080b4>
    837c:	89000404 	addi	r4,r17,16
    8380:	b93fbc16 	blt	r23,r4,8274 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008274>
    8384:	b0800317 	ldw	r2,12(r22)
    8388:	b0c00217 	ldw	r3,8(r22)
    838c:	81bfff04 	addi	r6,r16,-4
    8390:	01000904 	movi	r4,36
    8394:	18800315 	stw	r2,12(r3)
    8398:	10c00215 	stw	r3,8(r2)
    839c:	b4800204 	addi	r18,r22,8
    83a0:	21804336 	bltu	r4,r6,84b0 <_realloc_r+0x508>
    83a4:	008004c4 	movi	r2,19
    83a8:	11803f2e 	bgeu	r2,r6,84a8 <_realloc_r+0x500>
    83ac:	a8800017 	ldw	r2,0(r21)
    83b0:	b0800215 	stw	r2,8(r22)
    83b4:	a8800117 	ldw	r2,4(r21)
    83b8:	b0800315 	stw	r2,12(r22)
    83bc:	008006c4 	movi	r2,27
    83c0:	11803f36 	bltu	r2,r6,84c0 <_realloc_r+0x518>
    83c4:	b0800404 	addi	r2,r22,16
    83c8:	ad400204 	addi	r21,r21,8
    83cc:	a8c00017 	ldw	r3,0(r21)
    83d0:	10c00015 	stw	r3,0(r2)
    83d4:	a8c00117 	ldw	r3,4(r21)
    83d8:	10c00115 	stw	r3,4(r2)
    83dc:	a8c00217 	ldw	r3,8(r21)
    83e0:	10c00215 	stw	r3,8(r2)
    83e4:	b447883a 	add	r3,r22,r17
    83e8:	bc45c83a 	sub	r2,r23,r17
    83ec:	e0c00215 	stw	r3,8(fp)
    83f0:	10800054 	ori	r2,r2,1
    83f4:	18800115 	stw	r2,4(r3)
    83f8:	b0800117 	ldw	r2,4(r22)
    83fc:	a009883a 	mov	r4,r20
    8400:	1080004c 	andi	r2,r2,1
    8404:	1462b03a 	or	r17,r2,r17
    8408:	b4400115 	stw	r17,4(r22)
    840c:	000dfd40 	call	dfd4 <__malloc_unlock>
    8410:	9005883a 	mov	r2,r18
    8414:	003f4006 	br	8118 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008118>
    8418:	a8c00217 	ldw	r3,8(r21)
    841c:	90c00215 	stw	r3,8(r18)
    8420:	a8c00317 	ldw	r3,12(r21)
    8424:	90c00315 	stw	r3,12(r18)
    8428:	30801126 	beq	r6,r2,8470 <_realloc_r+0x4c8>
    842c:	90800404 	addi	r2,r18,16
    8430:	a8c00404 	addi	r3,r21,16
    8434:	003f1906 	br	809c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700809c>
    8438:	90ffff17 	ldw	r3,-4(r18)
    843c:	00bfff04 	movi	r2,-4
    8440:	a825883a 	mov	r18,r21
    8444:	1884703a 	and	r2,r3,r2
    8448:	80a1883a 	add	r16,r16,r2
    844c:	003f2406 	br	80e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70080e0>
    8450:	a8800217 	ldw	r2,8(r21)
    8454:	b0800415 	stw	r2,16(r22)
    8458:	a8800317 	ldw	r2,12(r21)
    845c:	b0800515 	stw	r2,20(r22)
    8460:	31000a26 	beq	r6,r4,848c <_realloc_r+0x4e4>
    8464:	b0800604 	addi	r2,r22,24
    8468:	ad400404 	addi	r21,r21,16
    846c:	003fa906 	br	8314 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008314>
    8470:	a9000417 	ldw	r4,16(r21)
    8474:	90800604 	addi	r2,r18,24
    8478:	a8c00604 	addi	r3,r21,24
    847c:	91000415 	stw	r4,16(r18)
    8480:	a9000517 	ldw	r4,20(r21)
    8484:	91000515 	stw	r4,20(r18)
    8488:	003f0406 	br	809c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700809c>
    848c:	a8c00417 	ldw	r3,16(r21)
    8490:	ad400604 	addi	r21,r21,24
    8494:	b0800804 	addi	r2,r22,32
    8498:	b0c00615 	stw	r3,24(r22)
    849c:	a8ffff17 	ldw	r3,-4(r21)
    84a0:	b0c00715 	stw	r3,28(r22)
    84a4:	003f9b06 	br	8314 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008314>
    84a8:	9005883a 	mov	r2,r18
    84ac:	003fc706 	br	83cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70083cc>
    84b0:	a80b883a 	mov	r5,r21
    84b4:	9009883a 	mov	r4,r18
    84b8:	0006d280 	call	6d28 <memmove>
    84bc:	003fc906 	br	83e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70083e4>
    84c0:	a8800217 	ldw	r2,8(r21)
    84c4:	b0800415 	stw	r2,16(r22)
    84c8:	a8800317 	ldw	r2,12(r21)
    84cc:	b0800515 	stw	r2,20(r22)
    84d0:	31000726 	beq	r6,r4,84f0 <_realloc_r+0x548>
    84d4:	b0800604 	addi	r2,r22,24
    84d8:	ad400404 	addi	r21,r21,16
    84dc:	003fbb06 	br	83cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70083cc>
    84e0:	a009883a 	mov	r4,r20
    84e4:	000dfd40 	call	dfd4 <__malloc_unlock>
    84e8:	0005883a 	mov	r2,zero
    84ec:	003f0a06 	br	8118 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008118>
    84f0:	a8c00417 	ldw	r3,16(r21)
    84f4:	ad400604 	addi	r21,r21,24
    84f8:	b0800804 	addi	r2,r22,32
    84fc:	b0c00615 	stw	r3,24(r22)
    8500:	a8ffff17 	ldw	r3,-4(r21)
    8504:	b0c00715 	stw	r3,28(r22)
    8508:	003fb006 	br	83cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70083cc>

0000850c <__fpclassifyd>:
    850c:	00a00034 	movhi	r2,32768
    8510:	10bfffc4 	addi	r2,r2,-1
    8514:	2884703a 	and	r2,r5,r2
    8518:	10000726 	beq	r2,zero,8538 <__fpclassifyd+0x2c>
    851c:	00fffc34 	movhi	r3,65520
    8520:	019ff834 	movhi	r6,32736
    8524:	28c7883a 	add	r3,r5,r3
    8528:	31bfffc4 	addi	r6,r6,-1
    852c:	30c00536 	bltu	r6,r3,8544 <__fpclassifyd+0x38>
    8530:	00800104 	movi	r2,4
    8534:	f800283a 	ret
    8538:	2000021e 	bne	r4,zero,8544 <__fpclassifyd+0x38>
    853c:	00800084 	movi	r2,2
    8540:	f800283a 	ret
    8544:	00dffc34 	movhi	r3,32752
    8548:	019ff834 	movhi	r6,32736
    854c:	28cb883a 	add	r5,r5,r3
    8550:	31bfffc4 	addi	r6,r6,-1
    8554:	317ff62e 	bgeu	r6,r5,8530 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008530>
    8558:	01400434 	movhi	r5,16
    855c:	297fffc4 	addi	r5,r5,-1
    8560:	28800236 	bltu	r5,r2,856c <__fpclassifyd+0x60>
    8564:	008000c4 	movi	r2,3
    8568:	f800283a 	ret
    856c:	10c00226 	beq	r2,r3,8578 <__fpclassifyd+0x6c>
    8570:	0005883a 	mov	r2,zero
    8574:	f800283a 	ret
    8578:	2005003a 	cmpeq	r2,r4,zero
    857c:	f800283a 	ret

00008580 <_sbrk_r>:
    8580:	defffd04 	addi	sp,sp,-12
    8584:	dc000015 	stw	r16,0(sp)
    8588:	040000b4 	movhi	r16,2
    858c:	dc400115 	stw	r17,4(sp)
    8590:	842d1604 	addi	r16,r16,-19368
    8594:	2023883a 	mov	r17,r4
    8598:	2809883a 	mov	r4,r5
    859c:	dfc00215 	stw	ra,8(sp)
    85a0:	80000015 	stw	zero,0(r16)
    85a4:	000e3fc0 	call	e3fc <sbrk>
    85a8:	00ffffc4 	movi	r3,-1
    85ac:	10c00526 	beq	r2,r3,85c4 <_sbrk_r+0x44>
    85b0:	dfc00217 	ldw	ra,8(sp)
    85b4:	dc400117 	ldw	r17,4(sp)
    85b8:	dc000017 	ldw	r16,0(sp)
    85bc:	dec00304 	addi	sp,sp,12
    85c0:	f800283a 	ret
    85c4:	80c00017 	ldw	r3,0(r16)
    85c8:	183ff926 	beq	r3,zero,85b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70085b0>
    85cc:	88c00015 	stw	r3,0(r17)
    85d0:	003ff706 	br	85b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70085b0>

000085d4 <__sread>:
    85d4:	defffe04 	addi	sp,sp,-8
    85d8:	dc000015 	stw	r16,0(sp)
    85dc:	2821883a 	mov	r16,r5
    85e0:	2940038f 	ldh	r5,14(r5)
    85e4:	dfc00115 	stw	ra,4(sp)
    85e8:	000a3c80 	call	a3c8 <_read_r>
    85ec:	10000716 	blt	r2,zero,860c <__sread+0x38>
    85f0:	80c01417 	ldw	r3,80(r16)
    85f4:	1887883a 	add	r3,r3,r2
    85f8:	80c01415 	stw	r3,80(r16)
    85fc:	dfc00117 	ldw	ra,4(sp)
    8600:	dc000017 	ldw	r16,0(sp)
    8604:	dec00204 	addi	sp,sp,8
    8608:	f800283a 	ret
    860c:	80c0030b 	ldhu	r3,12(r16)
    8610:	18fbffcc 	andi	r3,r3,61439
    8614:	80c0030d 	sth	r3,12(r16)
    8618:	dfc00117 	ldw	ra,4(sp)
    861c:	dc000017 	ldw	r16,0(sp)
    8620:	dec00204 	addi	sp,sp,8
    8624:	f800283a 	ret

00008628 <__seofread>:
    8628:	0005883a 	mov	r2,zero
    862c:	f800283a 	ret

00008630 <__swrite>:
    8630:	2880030b 	ldhu	r2,12(r5)
    8634:	defffb04 	addi	sp,sp,-20
    8638:	dcc00315 	stw	r19,12(sp)
    863c:	dc800215 	stw	r18,8(sp)
    8640:	dc400115 	stw	r17,4(sp)
    8644:	dc000015 	stw	r16,0(sp)
    8648:	dfc00415 	stw	ra,16(sp)
    864c:	10c0400c 	andi	r3,r2,256
    8650:	2821883a 	mov	r16,r5
    8654:	2023883a 	mov	r17,r4
    8658:	3025883a 	mov	r18,r6
    865c:	3827883a 	mov	r19,r7
    8660:	18000526 	beq	r3,zero,8678 <__swrite+0x48>
    8664:	2940038f 	ldh	r5,14(r5)
    8668:	01c00084 	movi	r7,2
    866c:	000d883a 	mov	r6,zero
    8670:	000a3680 	call	a368 <_lseek_r>
    8674:	8080030b 	ldhu	r2,12(r16)
    8678:	8140038f 	ldh	r5,14(r16)
    867c:	10bbffcc 	andi	r2,r2,61439
    8680:	980f883a 	mov	r7,r19
    8684:	900d883a 	mov	r6,r18
    8688:	8809883a 	mov	r4,r17
    868c:	8080030d 	sth	r2,12(r16)
    8690:	dfc00417 	ldw	ra,16(sp)
    8694:	dcc00317 	ldw	r19,12(sp)
    8698:	dc800217 	ldw	r18,8(sp)
    869c:	dc400117 	ldw	r17,4(sp)
    86a0:	dc000017 	ldw	r16,0(sp)
    86a4:	dec00504 	addi	sp,sp,20
    86a8:	0009e341 	jmpi	9e34 <_write_r>

000086ac <__sseek>:
    86ac:	defffe04 	addi	sp,sp,-8
    86b0:	dc000015 	stw	r16,0(sp)
    86b4:	2821883a 	mov	r16,r5
    86b8:	2940038f 	ldh	r5,14(r5)
    86bc:	dfc00115 	stw	ra,4(sp)
    86c0:	000a3680 	call	a368 <_lseek_r>
    86c4:	00ffffc4 	movi	r3,-1
    86c8:	10c00826 	beq	r2,r3,86ec <__sseek+0x40>
    86cc:	80c0030b 	ldhu	r3,12(r16)
    86d0:	80801415 	stw	r2,80(r16)
    86d4:	18c40014 	ori	r3,r3,4096
    86d8:	80c0030d 	sth	r3,12(r16)
    86dc:	dfc00117 	ldw	ra,4(sp)
    86e0:	dc000017 	ldw	r16,0(sp)
    86e4:	dec00204 	addi	sp,sp,8
    86e8:	f800283a 	ret
    86ec:	80c0030b 	ldhu	r3,12(r16)
    86f0:	18fbffcc 	andi	r3,r3,61439
    86f4:	80c0030d 	sth	r3,12(r16)
    86f8:	dfc00117 	ldw	ra,4(sp)
    86fc:	dc000017 	ldw	r16,0(sp)
    8700:	dec00204 	addi	sp,sp,8
    8704:	f800283a 	ret

00008708 <__sclose>:
    8708:	2940038f 	ldh	r5,14(r5)
    870c:	0009e941 	jmpi	9e94 <_close_r>

00008710 <strcmp>:
    8710:	2144b03a 	or	r2,r4,r5
    8714:	108000cc 	andi	r2,r2,3
    8718:	1000171e 	bne	r2,zero,8778 <strcmp+0x68>
    871c:	20800017 	ldw	r2,0(r4)
    8720:	28c00017 	ldw	r3,0(r5)
    8724:	10c0141e 	bne	r2,r3,8778 <strcmp+0x68>
    8728:	027fbff4 	movhi	r9,65279
    872c:	4a7fbfc4 	addi	r9,r9,-257
    8730:	0086303a 	nor	r3,zero,r2
    8734:	02202074 	movhi	r8,32897
    8738:	1245883a 	add	r2,r2,r9
    873c:	42202004 	addi	r8,r8,-32640
    8740:	10c4703a 	and	r2,r2,r3
    8744:	1204703a 	and	r2,r2,r8
    8748:	10000226 	beq	r2,zero,8754 <strcmp+0x44>
    874c:	00002306 	br	87dc <strcmp+0xcc>
    8750:	1000221e 	bne	r2,zero,87dc <strcmp+0xcc>
    8754:	21000104 	addi	r4,r4,4
    8758:	20c00017 	ldw	r3,0(r4)
    875c:	29400104 	addi	r5,r5,4
    8760:	29800017 	ldw	r6,0(r5)
    8764:	1a4f883a 	add	r7,r3,r9
    8768:	00c4303a 	nor	r2,zero,r3
    876c:	3884703a 	and	r2,r7,r2
    8770:	1204703a 	and	r2,r2,r8
    8774:	19bff626 	beq	r3,r6,8750 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008750>
    8778:	20800003 	ldbu	r2,0(r4)
    877c:	10c03fcc 	andi	r3,r2,255
    8780:	18c0201c 	xori	r3,r3,128
    8784:	18ffe004 	addi	r3,r3,-128
    8788:	18000c26 	beq	r3,zero,87bc <strcmp+0xac>
    878c:	29800007 	ldb	r6,0(r5)
    8790:	19800326 	beq	r3,r6,87a0 <strcmp+0x90>
    8794:	00001306 	br	87e4 <strcmp+0xd4>
    8798:	29800007 	ldb	r6,0(r5)
    879c:	11800b1e 	bne	r2,r6,87cc <strcmp+0xbc>
    87a0:	21000044 	addi	r4,r4,1
    87a4:	20c00003 	ldbu	r3,0(r4)
    87a8:	29400044 	addi	r5,r5,1
    87ac:	18803fcc 	andi	r2,r3,255
    87b0:	1080201c 	xori	r2,r2,128
    87b4:	10bfe004 	addi	r2,r2,-128
    87b8:	103ff71e 	bne	r2,zero,8798 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008798>
    87bc:	0007883a 	mov	r3,zero
    87c0:	28800003 	ldbu	r2,0(r5)
    87c4:	1885c83a 	sub	r2,r3,r2
    87c8:	f800283a 	ret
    87cc:	28800003 	ldbu	r2,0(r5)
    87d0:	18c03fcc 	andi	r3,r3,255
    87d4:	1885c83a 	sub	r2,r3,r2
    87d8:	f800283a 	ret
    87dc:	0005883a 	mov	r2,zero
    87e0:	f800283a 	ret
    87e4:	10c03fcc 	andi	r3,r2,255
    87e8:	003ff506 	br	87c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70087c0>

000087ec <__sprint_r.part.0>:
    87ec:	28801917 	ldw	r2,100(r5)
    87f0:	defff604 	addi	sp,sp,-40
    87f4:	dd400515 	stw	r21,20(sp)
    87f8:	dfc00915 	stw	ra,36(sp)
    87fc:	df000815 	stw	fp,32(sp)
    8800:	ddc00715 	stw	r23,28(sp)
    8804:	dd800615 	stw	r22,24(sp)
    8808:	dd000415 	stw	r20,16(sp)
    880c:	dcc00315 	stw	r19,12(sp)
    8810:	dc800215 	stw	r18,8(sp)
    8814:	dc400115 	stw	r17,4(sp)
    8818:	dc000015 	stw	r16,0(sp)
    881c:	1088000c 	andi	r2,r2,8192
    8820:	302b883a 	mov	r21,r6
    8824:	10002e26 	beq	r2,zero,88e0 <__sprint_r.part.0+0xf4>
    8828:	30800217 	ldw	r2,8(r6)
    882c:	35800017 	ldw	r22,0(r6)
    8830:	10002926 	beq	r2,zero,88d8 <__sprint_r.part.0+0xec>
    8834:	2827883a 	mov	r19,r5
    8838:	2029883a 	mov	r20,r4
    883c:	b5c00104 	addi	r23,r22,4
    8840:	04bfffc4 	movi	r18,-1
    8844:	bc400017 	ldw	r17,0(r23)
    8848:	b4000017 	ldw	r16,0(r22)
    884c:	0039883a 	mov	fp,zero
    8850:	8822d0ba 	srli	r17,r17,2
    8854:	8800031e 	bne	r17,zero,8864 <__sprint_r.part.0+0x78>
    8858:	00001806 	br	88bc <__sprint_r.part.0+0xd0>
    885c:	84000104 	addi	r16,r16,4
    8860:	8f001526 	beq	r17,fp,88b8 <__sprint_r.part.0+0xcc>
    8864:	81400017 	ldw	r5,0(r16)
    8868:	980d883a 	mov	r6,r19
    886c:	a009883a 	mov	r4,r20
    8870:	000a2140 	call	a214 <_fputwc_r>
    8874:	e7000044 	addi	fp,fp,1
    8878:	14bff81e 	bne	r2,r18,885c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700885c>
    887c:	9005883a 	mov	r2,r18
    8880:	a8000215 	stw	zero,8(r21)
    8884:	a8000115 	stw	zero,4(r21)
    8888:	dfc00917 	ldw	ra,36(sp)
    888c:	df000817 	ldw	fp,32(sp)
    8890:	ddc00717 	ldw	r23,28(sp)
    8894:	dd800617 	ldw	r22,24(sp)
    8898:	dd400517 	ldw	r21,20(sp)
    889c:	dd000417 	ldw	r20,16(sp)
    88a0:	dcc00317 	ldw	r19,12(sp)
    88a4:	dc800217 	ldw	r18,8(sp)
    88a8:	dc400117 	ldw	r17,4(sp)
    88ac:	dc000017 	ldw	r16,0(sp)
    88b0:	dec00a04 	addi	sp,sp,40
    88b4:	f800283a 	ret
    88b8:	a8800217 	ldw	r2,8(r21)
    88bc:	8c63883a 	add	r17,r17,r17
    88c0:	8c63883a 	add	r17,r17,r17
    88c4:	1445c83a 	sub	r2,r2,r17
    88c8:	a8800215 	stw	r2,8(r21)
    88cc:	b5800204 	addi	r22,r22,8
    88d0:	bdc00204 	addi	r23,r23,8
    88d4:	103fdb1e 	bne	r2,zero,8844 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008844>
    88d8:	0005883a 	mov	r2,zero
    88dc:	003fe806 	br	8880 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008880>
    88e0:	0005a140 	call	5a14 <__sfvwrite_r>
    88e4:	003fe606 	br	8880 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008880>

000088e8 <__sprint_r>:
    88e8:	30c00217 	ldw	r3,8(r6)
    88ec:	18000126 	beq	r3,zero,88f4 <__sprint_r+0xc>
    88f0:	00087ec1 	jmpi	87ec <__sprint_r.part.0>
    88f4:	30000115 	stw	zero,4(r6)
    88f8:	0005883a 	mov	r2,zero
    88fc:	f800283a 	ret

00008900 <___vfiprintf_internal_r>:
    8900:	deffc904 	addi	sp,sp,-220
    8904:	df003515 	stw	fp,212(sp)
    8908:	dd003115 	stw	r20,196(sp)
    890c:	dfc03615 	stw	ra,216(sp)
    8910:	ddc03415 	stw	r23,208(sp)
    8914:	dd803315 	stw	r22,204(sp)
    8918:	dd403215 	stw	r21,200(sp)
    891c:	dcc03015 	stw	r19,192(sp)
    8920:	dc802f15 	stw	r18,188(sp)
    8924:	dc402e15 	stw	r17,184(sp)
    8928:	dc002d15 	stw	r16,180(sp)
    892c:	d9002015 	stw	r4,128(sp)
    8930:	d9c02215 	stw	r7,136(sp)
    8934:	2829883a 	mov	r20,r5
    8938:	3039883a 	mov	fp,r6
    893c:	20000226 	beq	r4,zero,8948 <___vfiprintf_internal_r+0x48>
    8940:	20800e17 	ldw	r2,56(r4)
    8944:	1000cf26 	beq	r2,zero,8c84 <___vfiprintf_internal_r+0x384>
    8948:	a080030b 	ldhu	r2,12(r20)
    894c:	10c8000c 	andi	r3,r2,8192
    8950:	1800061e 	bne	r3,zero,896c <___vfiprintf_internal_r+0x6c>
    8954:	a1001917 	ldw	r4,100(r20)
    8958:	00f7ffc4 	movi	r3,-8193
    895c:	10880014 	ori	r2,r2,8192
    8960:	20c6703a 	and	r3,r4,r3
    8964:	a080030d 	sth	r2,12(r20)
    8968:	a0c01915 	stw	r3,100(r20)
    896c:	10c0020c 	andi	r3,r2,8
    8970:	1800a926 	beq	r3,zero,8c18 <___vfiprintf_internal_r+0x318>
    8974:	a0c00417 	ldw	r3,16(r20)
    8978:	1800a726 	beq	r3,zero,8c18 <___vfiprintf_internal_r+0x318>
    897c:	1080068c 	andi	r2,r2,26
    8980:	00c00284 	movi	r3,10
    8984:	10c0ac26 	beq	r2,r3,8c38 <___vfiprintf_internal_r+0x338>
    8988:	da801a04 	addi	r10,sp,104
    898c:	da801e15 	stw	r10,120(sp)
    8990:	d8801e17 	ldw	r2,120(sp)
    8994:	da8019c4 	addi	r10,sp,103
    8998:	05800074 	movhi	r22,1
    899c:	05c00074 	movhi	r23,1
    89a0:	da801f15 	stw	r10,124(sp)
    89a4:	1295c83a 	sub	r10,r2,r10
    89a8:	b59ce904 	addi	r22,r22,29604
    89ac:	bddce504 	addi	r23,r23,29588
    89b0:	dec01a15 	stw	sp,104(sp)
    89b4:	d8001c15 	stw	zero,112(sp)
    89b8:	d8001b15 	stw	zero,108(sp)
    89bc:	d8002615 	stw	zero,152(sp)
    89c0:	d8002315 	stw	zero,140(sp)
    89c4:	da802715 	stw	r10,156(sp)
    89c8:	d811883a 	mov	r8,sp
    89cc:	dd002115 	stw	r20,132(sp)
    89d0:	e021883a 	mov	r16,fp
    89d4:	80800007 	ldb	r2,0(r16)
    89d8:	1003ea26 	beq	r2,zero,9984 <___vfiprintf_internal_r+0x1084>
    89dc:	00c00944 	movi	r3,37
    89e0:	8025883a 	mov	r18,r16
    89e4:	10c0021e 	bne	r2,r3,89f0 <___vfiprintf_internal_r+0xf0>
    89e8:	00001606 	br	8a44 <___vfiprintf_internal_r+0x144>
    89ec:	10c00326 	beq	r2,r3,89fc <___vfiprintf_internal_r+0xfc>
    89f0:	94800044 	addi	r18,r18,1
    89f4:	90800007 	ldb	r2,0(r18)
    89f8:	103ffc1e 	bne	r2,zero,89ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70089ec>
    89fc:	9423c83a 	sub	r17,r18,r16
    8a00:	88001026 	beq	r17,zero,8a44 <___vfiprintf_internal_r+0x144>
    8a04:	d8c01c17 	ldw	r3,112(sp)
    8a08:	d8801b17 	ldw	r2,108(sp)
    8a0c:	44000015 	stw	r16,0(r8)
    8a10:	88c7883a 	add	r3,r17,r3
    8a14:	10800044 	addi	r2,r2,1
    8a18:	44400115 	stw	r17,4(r8)
    8a1c:	d8c01c15 	stw	r3,112(sp)
    8a20:	d8801b15 	stw	r2,108(sp)
    8a24:	010001c4 	movi	r4,7
    8a28:	2080760e 	bge	r4,r2,8c04 <___vfiprintf_internal_r+0x304>
    8a2c:	1803821e 	bne	r3,zero,9838 <___vfiprintf_internal_r+0xf38>
    8a30:	da802317 	ldw	r10,140(sp)
    8a34:	d8001b15 	stw	zero,108(sp)
    8a38:	d811883a 	mov	r8,sp
    8a3c:	5455883a 	add	r10,r10,r17
    8a40:	da802315 	stw	r10,140(sp)
    8a44:	90800007 	ldb	r2,0(r18)
    8a48:	10044626 	beq	r2,zero,9b64 <___vfiprintf_internal_r+0x1264>
    8a4c:	90c00047 	ldb	r3,1(r18)
    8a50:	94000044 	addi	r16,r18,1
    8a54:	d8001d85 	stb	zero,118(sp)
    8a58:	0009883a 	mov	r4,zero
    8a5c:	000f883a 	mov	r7,zero
    8a60:	027fffc4 	movi	r9,-1
    8a64:	0023883a 	mov	r17,zero
    8a68:	0029883a 	mov	r20,zero
    8a6c:	01401604 	movi	r5,88
    8a70:	01800244 	movi	r6,9
    8a74:	03400a84 	movi	r13,42
    8a78:	03001b04 	movi	r12,108
    8a7c:	84000044 	addi	r16,r16,1
    8a80:	18bff804 	addi	r2,r3,-32
    8a84:	28827336 	bltu	r5,r2,9454 <___vfiprintf_internal_r+0xb54>
    8a88:	100490ba 	slli	r2,r2,2
    8a8c:	02800074 	movhi	r10,1
    8a90:	52a2a804 	addi	r10,r10,-30048
    8a94:	1285883a 	add	r2,r2,r10
    8a98:	10800017 	ldw	r2,0(r2)
    8a9c:	1000683a 	jmp	r2
    8aa0:	00009188 	cmpgei	zero,zero,582
    8aa4:	00009454 	movui	zero,593
    8aa8:	00009454 	movui	zero,593
    8aac:	000091a8 	cmpgeui	zero,zero,582
    8ab0:	00009454 	movui	zero,593
    8ab4:	00009454 	movui	zero,593
    8ab8:	00009454 	movui	zero,593
    8abc:	00009454 	movui	zero,593
    8ac0:	00009454 	movui	zero,593
    8ac4:	00009454 	movui	zero,593
    8ac8:	00009390 	cmplti	zero,zero,590
    8acc:	000093ac 	andhi	zero,zero,590
    8ad0:	00009454 	movui	zero,593
    8ad4:	00008c94 	movui	zero,562
    8ad8:	000093bc 	xorhi	zero,zero,590
    8adc:	00009454 	movui	zero,593
    8ae0:	000091b4 	movhi	zero,582
    8ae4:	000091c0 	call	91c <main+0x698>
    8ae8:	000091c0 	call	91c <main+0x698>
    8aec:	000091c0 	call	91c <main+0x698>
    8af0:	000091c0 	call	91c <main+0x698>
    8af4:	000091c0 	call	91c <main+0x698>
    8af8:	000091c0 	call	91c <main+0x698>
    8afc:	000091c0 	call	91c <main+0x698>
    8b00:	000091c0 	call	91c <main+0x698>
    8b04:	000091c0 	call	91c <main+0x698>
    8b08:	00009454 	movui	zero,593
    8b0c:	00009454 	movui	zero,593
    8b10:	00009454 	movui	zero,593
    8b14:	00009454 	movui	zero,593
    8b18:	00009454 	movui	zero,593
    8b1c:	00009454 	movui	zero,593
    8b20:	00009454 	movui	zero,593
    8b24:	00009454 	movui	zero,593
    8b28:	00009454 	movui	zero,593
    8b2c:	00009454 	movui	zero,593
    8b30:	000091ec 	andhi	zero,zero,583
    8b34:	00009454 	movui	zero,593
    8b38:	00009454 	movui	zero,593
    8b3c:	00009454 	movui	zero,593
    8b40:	00009454 	movui	zero,593
    8b44:	00009454 	movui	zero,593
    8b48:	00009454 	movui	zero,593
    8b4c:	00009454 	movui	zero,593
    8b50:	00009454 	movui	zero,593
    8b54:	00009454 	movui	zero,593
    8b58:	00009454 	movui	zero,593
    8b5c:	00009224 	muli	zero,zero,584
    8b60:	00009454 	movui	zero,593
    8b64:	00009454 	movui	zero,593
    8b68:	00009454 	movui	zero,593
    8b6c:	00009454 	movui	zero,593
    8b70:	00009454 	movui	zero,593
    8b74:	0000927c 	xorhi	zero,zero,585
    8b78:	00009454 	movui	zero,593
    8b7c:	00009454 	movui	zero,593
    8b80:	000092ec 	andhi	zero,zero,587
    8b84:	00009454 	movui	zero,593
    8b88:	00009454 	movui	zero,593
    8b8c:	00009454 	movui	zero,593
    8b90:	00009454 	movui	zero,593
    8b94:	00009454 	movui	zero,593
    8b98:	00009454 	movui	zero,593
    8b9c:	00009454 	movui	zero,593
    8ba0:	00009454 	movui	zero,593
    8ba4:	00009454 	movui	zero,593
    8ba8:	00009454 	movui	zero,593
    8bac:	00009098 	cmpnei	zero,zero,578
    8bb0:	000090c4 	movi	zero,579
    8bb4:	00009454 	movui	zero,593
    8bb8:	00009454 	movui	zero,593
    8bbc:	00009454 	movui	zero,593
    8bc0:	000093fc 	xorhi	zero,zero,591
    8bc4:	000090c4 	movi	zero,579
    8bc8:	00009454 	movui	zero,593
    8bcc:	00009454 	movui	zero,593
    8bd0:	00008f58 	cmpnei	zero,zero,573
    8bd4:	00009454 	movui	zero,593
    8bd8:	00008f68 	cmpgeui	zero,zero,573
    8bdc:	00008fa4 	muli	zero,zero,574
    8be0:	00008ca0 	cmpeqi	zero,zero,562
    8be4:	00008f4c 	andi	zero,zero,573
    8be8:	00009454 	movui	zero,593
    8bec:	00009328 	cmpgeui	zero,zero,588
    8bf0:	00009454 	movui	zero,593
    8bf4:	00009380 	call	938 <main+0x6b4>
    8bf8:	00009454 	movui	zero,593
    8bfc:	00009454 	movui	zero,593
    8c00:	00009044 	movi	zero,577
    8c04:	42000204 	addi	r8,r8,8
    8c08:	da802317 	ldw	r10,140(sp)
    8c0c:	5455883a 	add	r10,r10,r17
    8c10:	da802315 	stw	r10,140(sp)
    8c14:	003f8b06 	br	8a44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008a44>
    8c18:	d9002017 	ldw	r4,128(sp)
    8c1c:	a00b883a 	mov	r5,r20
    8c20:	00035bc0 	call	35bc <__swsetup_r>
    8c24:	1003b11e 	bne	r2,zero,9aec <___vfiprintf_internal_r+0x11ec>
    8c28:	a080030b 	ldhu	r2,12(r20)
    8c2c:	00c00284 	movi	r3,10
    8c30:	1080068c 	andi	r2,r2,26
    8c34:	10ff541e 	bne	r2,r3,8988 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008988>
    8c38:	a080038f 	ldh	r2,14(r20)
    8c3c:	103f5216 	blt	r2,zero,8988 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008988>
    8c40:	d9c02217 	ldw	r7,136(sp)
    8c44:	d9002017 	ldw	r4,128(sp)
    8c48:	e00d883a 	mov	r6,fp
    8c4c:	a00b883a 	mov	r5,r20
    8c50:	0009d780 	call	9d78 <__sbprintf>
    8c54:	dfc03617 	ldw	ra,216(sp)
    8c58:	df003517 	ldw	fp,212(sp)
    8c5c:	ddc03417 	ldw	r23,208(sp)
    8c60:	dd803317 	ldw	r22,204(sp)
    8c64:	dd403217 	ldw	r21,200(sp)
    8c68:	dd003117 	ldw	r20,196(sp)
    8c6c:	dcc03017 	ldw	r19,192(sp)
    8c70:	dc802f17 	ldw	r18,188(sp)
    8c74:	dc402e17 	ldw	r17,184(sp)
    8c78:	dc002d17 	ldw	r16,180(sp)
    8c7c:	dec03704 	addi	sp,sp,220
    8c80:	f800283a 	ret
    8c84:	00055900 	call	5590 <__sinit>
    8c88:	003f2f06 	br	8948 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008948>
    8c8c:	0463c83a 	sub	r17,zero,r17
    8c90:	d8802215 	stw	r2,136(sp)
    8c94:	a5000114 	ori	r20,r20,4
    8c98:	80c00007 	ldb	r3,0(r16)
    8c9c:	003f7706 	br	8a7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008a7c>
    8ca0:	00800c04 	movi	r2,48
    8ca4:	da802217 	ldw	r10,136(sp)
    8ca8:	d8801d05 	stb	r2,116(sp)
    8cac:	00801e04 	movi	r2,120
    8cb0:	d8801d45 	stb	r2,117(sp)
    8cb4:	d8001d85 	stb	zero,118(sp)
    8cb8:	50c00104 	addi	r3,r10,4
    8cbc:	54800017 	ldw	r18,0(r10)
    8cc0:	0027883a 	mov	r19,zero
    8cc4:	a0800094 	ori	r2,r20,2
    8cc8:	48030b16 	blt	r9,zero,98f8 <___vfiprintf_internal_r+0xff8>
    8ccc:	00bfdfc4 	movi	r2,-129
    8cd0:	a096703a 	and	r11,r20,r2
    8cd4:	d8c02215 	stw	r3,136(sp)
    8cd8:	5d000094 	ori	r20,r11,2
    8cdc:	90032b1e 	bne	r18,zero,998c <___vfiprintf_internal_r+0x108c>
    8ce0:	00800074 	movhi	r2,1
    8ce4:	109c8404 	addi	r2,r2,29200
    8ce8:	d8802615 	stw	r2,152(sp)
    8cec:	0039883a 	mov	fp,zero
    8cf0:	48017b1e 	bne	r9,zero,92e0 <___vfiprintf_internal_r+0x9e0>
    8cf4:	0013883a 	mov	r9,zero
    8cf8:	0027883a 	mov	r19,zero
    8cfc:	dd401a04 	addi	r21,sp,104
    8d00:	4825883a 	mov	r18,r9
    8d04:	4cc0010e 	bge	r9,r19,8d0c <___vfiprintf_internal_r+0x40c>
    8d08:	9825883a 	mov	r18,r19
    8d0c:	e7003fcc 	andi	fp,fp,255
    8d10:	e700201c 	xori	fp,fp,128
    8d14:	e73fe004 	addi	fp,fp,-128
    8d18:	e0000126 	beq	fp,zero,8d20 <___vfiprintf_internal_r+0x420>
    8d1c:	94800044 	addi	r18,r18,1
    8d20:	a380008c 	andi	r14,r20,2
    8d24:	70000126 	beq	r14,zero,8d2c <___vfiprintf_internal_r+0x42c>
    8d28:	94800084 	addi	r18,r18,2
    8d2c:	a700210c 	andi	fp,r20,132
    8d30:	e001df1e 	bne	fp,zero,94b0 <___vfiprintf_internal_r+0xbb0>
    8d34:	8c87c83a 	sub	r3,r17,r18
    8d38:	00c1dd0e 	bge	zero,r3,94b0 <___vfiprintf_internal_r+0xbb0>
    8d3c:	01c00404 	movi	r7,16
    8d40:	d8801c17 	ldw	r2,112(sp)
    8d44:	38c3ad0e 	bge	r7,r3,9bfc <___vfiprintf_internal_r+0x12fc>
    8d48:	02800074 	movhi	r10,1
    8d4c:	529ce904 	addi	r10,r10,29604
    8d50:	dc002915 	stw	r16,164(sp)
    8d54:	d9801b17 	ldw	r6,108(sp)
    8d58:	da802415 	stw	r10,144(sp)
    8d5c:	03c001c4 	movi	r15,7
    8d60:	da402515 	stw	r9,148(sp)
    8d64:	db802815 	stw	r14,160(sp)
    8d68:	1821883a 	mov	r16,r3
    8d6c:	00000506 	br	8d84 <___vfiprintf_internal_r+0x484>
    8d70:	31400084 	addi	r5,r6,2
    8d74:	42000204 	addi	r8,r8,8
    8d78:	200d883a 	mov	r6,r4
    8d7c:	843ffc04 	addi	r16,r16,-16
    8d80:	3c000d0e 	bge	r7,r16,8db8 <___vfiprintf_internal_r+0x4b8>
    8d84:	10800404 	addi	r2,r2,16
    8d88:	31000044 	addi	r4,r6,1
    8d8c:	45800015 	stw	r22,0(r8)
    8d90:	41c00115 	stw	r7,4(r8)
    8d94:	d8801c15 	stw	r2,112(sp)
    8d98:	d9001b15 	stw	r4,108(sp)
    8d9c:	793ff40e 	bge	r15,r4,8d70 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008d70>
    8da0:	1001b51e 	bne	r2,zero,9478 <___vfiprintf_internal_r+0xb78>
    8da4:	843ffc04 	addi	r16,r16,-16
    8da8:	000d883a 	mov	r6,zero
    8dac:	01400044 	movi	r5,1
    8db0:	d811883a 	mov	r8,sp
    8db4:	3c3ff316 	blt	r7,r16,8d84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008d84>
    8db8:	8007883a 	mov	r3,r16
    8dbc:	da402517 	ldw	r9,148(sp)
    8dc0:	db802817 	ldw	r14,160(sp)
    8dc4:	dc002917 	ldw	r16,164(sp)
    8dc8:	da802417 	ldw	r10,144(sp)
    8dcc:	1885883a 	add	r2,r3,r2
    8dd0:	40c00115 	stw	r3,4(r8)
    8dd4:	42800015 	stw	r10,0(r8)
    8dd8:	d8801c15 	stw	r2,112(sp)
    8ddc:	d9401b15 	stw	r5,108(sp)
    8de0:	00c001c4 	movi	r3,7
    8de4:	19426016 	blt	r3,r5,9768 <___vfiprintf_internal_r+0xe68>
    8de8:	d8c01d87 	ldb	r3,118(sp)
    8dec:	42000204 	addi	r8,r8,8
    8df0:	29000044 	addi	r4,r5,1
    8df4:	1801b31e 	bne	r3,zero,94c4 <___vfiprintf_internal_r+0xbc4>
    8df8:	7001c026 	beq	r14,zero,94fc <___vfiprintf_internal_r+0xbfc>
    8dfc:	d8c01d04 	addi	r3,sp,116
    8e00:	10800084 	addi	r2,r2,2
    8e04:	40c00015 	stw	r3,0(r8)
    8e08:	00c00084 	movi	r3,2
    8e0c:	40c00115 	stw	r3,4(r8)
    8e10:	d8801c15 	stw	r2,112(sp)
    8e14:	d9001b15 	stw	r4,108(sp)
    8e18:	00c001c4 	movi	r3,7
    8e1c:	1902650e 	bge	r3,r4,97b4 <___vfiprintf_internal_r+0xeb4>
    8e20:	10029a1e 	bne	r2,zero,988c <___vfiprintf_internal_r+0xf8c>
    8e24:	00c02004 	movi	r3,128
    8e28:	01000044 	movi	r4,1
    8e2c:	000b883a 	mov	r5,zero
    8e30:	d811883a 	mov	r8,sp
    8e34:	e0c1b31e 	bne	fp,r3,9504 <___vfiprintf_internal_r+0xc04>
    8e38:	8cb9c83a 	sub	fp,r17,r18
    8e3c:	0701b10e 	bge	zero,fp,9504 <___vfiprintf_internal_r+0xc04>
    8e40:	01c00404 	movi	r7,16
    8e44:	3f03890e 	bge	r7,fp,9c6c <___vfiprintf_internal_r+0x136c>
    8e48:	00c00074 	movhi	r3,1
    8e4c:	18dce504 	addi	r3,r3,29588
    8e50:	d8c02415 	stw	r3,144(sp)
    8e54:	8007883a 	mov	r3,r16
    8e58:	034001c4 	movi	r13,7
    8e5c:	e021883a 	mov	r16,fp
    8e60:	da402515 	stw	r9,148(sp)
    8e64:	1839883a 	mov	fp,r3
    8e68:	00000506 	br	8e80 <___vfiprintf_internal_r+0x580>
    8e6c:	29800084 	addi	r6,r5,2
    8e70:	42000204 	addi	r8,r8,8
    8e74:	180b883a 	mov	r5,r3
    8e78:	843ffc04 	addi	r16,r16,-16
    8e7c:	3c000d0e 	bge	r7,r16,8eb4 <___vfiprintf_internal_r+0x5b4>
    8e80:	10800404 	addi	r2,r2,16
    8e84:	28c00044 	addi	r3,r5,1
    8e88:	45c00015 	stw	r23,0(r8)
    8e8c:	41c00115 	stw	r7,4(r8)
    8e90:	d8801c15 	stw	r2,112(sp)
    8e94:	d8c01b15 	stw	r3,108(sp)
    8e98:	68fff40e 	bge	r13,r3,8e6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008e6c>
    8e9c:	1002241e 	bne	r2,zero,9730 <___vfiprintf_internal_r+0xe30>
    8ea0:	843ffc04 	addi	r16,r16,-16
    8ea4:	01800044 	movi	r6,1
    8ea8:	000b883a 	mov	r5,zero
    8eac:	d811883a 	mov	r8,sp
    8eb0:	3c3ff316 	blt	r7,r16,8e80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008e80>
    8eb4:	da402517 	ldw	r9,148(sp)
    8eb8:	e007883a 	mov	r3,fp
    8ebc:	8039883a 	mov	fp,r16
    8ec0:	1821883a 	mov	r16,r3
    8ec4:	d8c02417 	ldw	r3,144(sp)
    8ec8:	1705883a 	add	r2,r2,fp
    8ecc:	47000115 	stw	fp,4(r8)
    8ed0:	40c00015 	stw	r3,0(r8)
    8ed4:	d8801c15 	stw	r2,112(sp)
    8ed8:	d9801b15 	stw	r6,108(sp)
    8edc:	00c001c4 	movi	r3,7
    8ee0:	19827616 	blt	r3,r6,98bc <___vfiprintf_internal_r+0xfbc>
    8ee4:	4cf9c83a 	sub	fp,r9,r19
    8ee8:	42000204 	addi	r8,r8,8
    8eec:	31000044 	addi	r4,r6,1
    8ef0:	300b883a 	mov	r5,r6
    8ef4:	07018516 	blt	zero,fp,950c <___vfiprintf_internal_r+0xc0c>
    8ef8:	9885883a 	add	r2,r19,r2
    8efc:	45400015 	stw	r21,0(r8)
    8f00:	44c00115 	stw	r19,4(r8)
    8f04:	d8801c15 	stw	r2,112(sp)
    8f08:	d9001b15 	stw	r4,108(sp)
    8f0c:	00c001c4 	movi	r3,7
    8f10:	1901dd0e 	bge	r3,r4,9688 <___vfiprintf_internal_r+0xd88>
    8f14:	1002401e 	bne	r2,zero,9818 <___vfiprintf_internal_r+0xf18>
    8f18:	d8001b15 	stw	zero,108(sp)
    8f1c:	a2c0010c 	andi	r11,r20,4
    8f20:	58000226 	beq	r11,zero,8f2c <___vfiprintf_internal_r+0x62c>
    8f24:	8ca7c83a 	sub	r19,r17,r18
    8f28:	04c2f216 	blt	zero,r19,9af4 <___vfiprintf_internal_r+0x11f4>
    8f2c:	8c80010e 	bge	r17,r18,8f34 <___vfiprintf_internal_r+0x634>
    8f30:	9023883a 	mov	r17,r18
    8f34:	da802317 	ldw	r10,140(sp)
    8f38:	5455883a 	add	r10,r10,r17
    8f3c:	da802315 	stw	r10,140(sp)
    8f40:	d8001b15 	stw	zero,108(sp)
    8f44:	d811883a 	mov	r8,sp
    8f48:	003ea206 	br	89d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70089d4>
    8f4c:	a5000814 	ori	r20,r20,32
    8f50:	80c00007 	ldb	r3,0(r16)
    8f54:	003ec906 	br	8a7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008a7c>
    8f58:	80c00007 	ldb	r3,0(r16)
    8f5c:	1b030926 	beq	r3,r12,9b84 <___vfiprintf_internal_r+0x1284>
    8f60:	a5000414 	ori	r20,r20,16
    8f64:	003ec506 	br	8a7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008a7c>
    8f68:	21003fcc 	andi	r4,r4,255
    8f6c:	20035e1e 	bne	r4,zero,9ce8 <___vfiprintf_internal_r+0x13e8>
    8f70:	a080080c 	andi	r2,r20,32
    8f74:	1002a526 	beq	r2,zero,9a0c <___vfiprintf_internal_r+0x110c>
    8f78:	da802217 	ldw	r10,136(sp)
    8f7c:	50800017 	ldw	r2,0(r10)
    8f80:	da802317 	ldw	r10,140(sp)
    8f84:	5007d7fa 	srai	r3,r10,31
    8f88:	da802217 	ldw	r10,136(sp)
    8f8c:	10c00115 	stw	r3,4(r2)
    8f90:	52800104 	addi	r10,r10,4
    8f94:	da802215 	stw	r10,136(sp)
    8f98:	da802317 	ldw	r10,140(sp)
    8f9c:	12800015 	stw	r10,0(r2)
    8fa0:	003e8c06 	br	89d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70089d4>
    8fa4:	21003fcc 	andi	r4,r4,255
    8fa8:	2003511e 	bne	r4,zero,9cf0 <___vfiprintf_internal_r+0x13f0>
    8fac:	a080080c 	andi	r2,r20,32
    8fb0:	1000a126 	beq	r2,zero,9238 <___vfiprintf_internal_r+0x938>
    8fb4:	da802217 	ldw	r10,136(sp)
    8fb8:	d8001d85 	stb	zero,118(sp)
    8fbc:	50800204 	addi	r2,r10,8
    8fc0:	54800017 	ldw	r18,0(r10)
    8fc4:	54c00117 	ldw	r19,4(r10)
    8fc8:	4802b416 	blt	r9,zero,9a9c <___vfiprintf_internal_r+0x119c>
    8fcc:	013fdfc4 	movi	r4,-129
    8fd0:	94c6b03a 	or	r3,r18,r19
    8fd4:	d8802215 	stw	r2,136(sp)
    8fd8:	a128703a 	and	r20,r20,r4
    8fdc:	1800a226 	beq	r3,zero,9268 <___vfiprintf_internal_r+0x968>
    8fe0:	0039883a 	mov	fp,zero
    8fe4:	dd401a04 	addi	r21,sp,104
    8fe8:	9006d0fa 	srli	r3,r18,3
    8fec:	9808977a 	slli	r4,r19,29
    8ff0:	9826d0fa 	srli	r19,r19,3
    8ff4:	948001cc 	andi	r18,r18,7
    8ff8:	90800c04 	addi	r2,r18,48
    8ffc:	ad7fffc4 	addi	r21,r21,-1
    9000:	20e4b03a 	or	r18,r4,r3
    9004:	a8800005 	stb	r2,0(r21)
    9008:	94c6b03a 	or	r3,r18,r19
    900c:	183ff61e 	bne	r3,zero,8fe8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008fe8>
    9010:	a0c0004c 	andi	r3,r20,1
    9014:	18005926 	beq	r3,zero,917c <___vfiprintf_internal_r+0x87c>
    9018:	10803fcc 	andi	r2,r2,255
    901c:	1080201c 	xori	r2,r2,128
    9020:	10bfe004 	addi	r2,r2,-128
    9024:	00c00c04 	movi	r3,48
    9028:	10c05426 	beq	r2,r3,917c <___vfiprintf_internal_r+0x87c>
    902c:	da801e17 	ldw	r10,120(sp)
    9030:	a8bfffc4 	addi	r2,r21,-1
    9034:	a8ffffc5 	stb	r3,-1(r21)
    9038:	50a7c83a 	sub	r19,r10,r2
    903c:	102b883a 	mov	r21,r2
    9040:	003f2f06 	br	8d00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008d00>
    9044:	21003fcc 	andi	r4,r4,255
    9048:	2003421e 	bne	r4,zero,9d54 <___vfiprintf_internal_r+0x1454>
    904c:	00800074 	movhi	r2,1
    9050:	109c8404 	addi	r2,r2,29200
    9054:	d8802615 	stw	r2,152(sp)
    9058:	a080080c 	andi	r2,r20,32
    905c:	1000aa26 	beq	r2,zero,9308 <___vfiprintf_internal_r+0xa08>
    9060:	da802217 	ldw	r10,136(sp)
    9064:	54800017 	ldw	r18,0(r10)
    9068:	54c00117 	ldw	r19,4(r10)
    906c:	52800204 	addi	r10,r10,8
    9070:	da802215 	stw	r10,136(sp)
    9074:	a080004c 	andi	r2,r20,1
    9078:	1001d226 	beq	r2,zero,97c4 <___vfiprintf_internal_r+0xec4>
    907c:	94c4b03a 	or	r2,r18,r19
    9080:	1002351e 	bne	r2,zero,9958 <___vfiprintf_internal_r+0x1058>
    9084:	d8001d85 	stb	zero,118(sp)
    9088:	48022216 	blt	r9,zero,9914 <___vfiprintf_internal_r+0x1014>
    908c:	00bfdfc4 	movi	r2,-129
    9090:	a0a8703a 	and	r20,r20,r2
    9094:	003f1506 	br	8cec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008cec>
    9098:	da802217 	ldw	r10,136(sp)
    909c:	04800044 	movi	r18,1
    90a0:	d8001d85 	stb	zero,118(sp)
    90a4:	50800017 	ldw	r2,0(r10)
    90a8:	52800104 	addi	r10,r10,4
    90ac:	da802215 	stw	r10,136(sp)
    90b0:	d8801005 	stb	r2,64(sp)
    90b4:	9027883a 	mov	r19,r18
    90b8:	dd401004 	addi	r21,sp,64
    90bc:	0013883a 	mov	r9,zero
    90c0:	003f1706 	br	8d20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008d20>
    90c4:	21003fcc 	andi	r4,r4,255
    90c8:	2003201e 	bne	r4,zero,9d4c <___vfiprintf_internal_r+0x144c>
    90cc:	a080080c 	andi	r2,r20,32
    90d0:	10004b26 	beq	r2,zero,9200 <___vfiprintf_internal_r+0x900>
    90d4:	da802217 	ldw	r10,136(sp)
    90d8:	50800117 	ldw	r2,4(r10)
    90dc:	54800017 	ldw	r18,0(r10)
    90e0:	52800204 	addi	r10,r10,8
    90e4:	da802215 	stw	r10,136(sp)
    90e8:	1027883a 	mov	r19,r2
    90ec:	10022c16 	blt	r2,zero,99a0 <___vfiprintf_internal_r+0x10a0>
    90f0:	df001d83 	ldbu	fp,118(sp)
    90f4:	48007216 	blt	r9,zero,92c0 <___vfiprintf_internal_r+0x9c0>
    90f8:	00ffdfc4 	movi	r3,-129
    90fc:	94c4b03a 	or	r2,r18,r19
    9100:	a0e8703a 	and	r20,r20,r3
    9104:	1000cc26 	beq	r2,zero,9438 <___vfiprintf_internal_r+0xb38>
    9108:	98021026 	beq	r19,zero,994c <___vfiprintf_internal_r+0x104c>
    910c:	dc402415 	stw	r17,144(sp)
    9110:	dc002515 	stw	r16,148(sp)
    9114:	9823883a 	mov	r17,r19
    9118:	9021883a 	mov	r16,r18
    911c:	dd401a04 	addi	r21,sp,104
    9120:	4825883a 	mov	r18,r9
    9124:	4027883a 	mov	r19,r8
    9128:	8009883a 	mov	r4,r16
    912c:	880b883a 	mov	r5,r17
    9130:	01800284 	movi	r6,10
    9134:	000f883a 	mov	r7,zero
    9138:	000ace00 	call	ace0 <__umoddi3>
    913c:	10800c04 	addi	r2,r2,48
    9140:	ad7fffc4 	addi	r21,r21,-1
    9144:	8009883a 	mov	r4,r16
    9148:	880b883a 	mov	r5,r17
    914c:	a8800005 	stb	r2,0(r21)
    9150:	01800284 	movi	r6,10
    9154:	000f883a 	mov	r7,zero
    9158:	000a7680 	call	a768 <__udivdi3>
    915c:	1021883a 	mov	r16,r2
    9160:	10c4b03a 	or	r2,r2,r3
    9164:	1823883a 	mov	r17,r3
    9168:	103fef1e 	bne	r2,zero,9128 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009128>
    916c:	dc402417 	ldw	r17,144(sp)
    9170:	dc002517 	ldw	r16,148(sp)
    9174:	9013883a 	mov	r9,r18
    9178:	9811883a 	mov	r8,r19
    917c:	da801e17 	ldw	r10,120(sp)
    9180:	5567c83a 	sub	r19,r10,r21
    9184:	003ede06 	br	8d00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008d00>
    9188:	38803fcc 	andi	r2,r7,255
    918c:	1080201c 	xori	r2,r2,128
    9190:	10bfe004 	addi	r2,r2,-128
    9194:	1002371e 	bne	r2,zero,9a74 <___vfiprintf_internal_r+0x1174>
    9198:	01000044 	movi	r4,1
    919c:	01c00804 	movi	r7,32
    91a0:	80c00007 	ldb	r3,0(r16)
    91a4:	003e3506 	br	8a7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008a7c>
    91a8:	a5000054 	ori	r20,r20,1
    91ac:	80c00007 	ldb	r3,0(r16)
    91b0:	003e3206 	br	8a7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008a7c>
    91b4:	a5002014 	ori	r20,r20,128
    91b8:	80c00007 	ldb	r3,0(r16)
    91bc:	003e2f06 	br	8a7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008a7c>
    91c0:	8015883a 	mov	r10,r16
    91c4:	0023883a 	mov	r17,zero
    91c8:	18bff404 	addi	r2,r3,-48
    91cc:	50c00007 	ldb	r3,0(r10)
    91d0:	8c4002a4 	muli	r17,r17,10
    91d4:	84000044 	addi	r16,r16,1
    91d8:	8015883a 	mov	r10,r16
    91dc:	1463883a 	add	r17,r2,r17
    91e0:	18bff404 	addi	r2,r3,-48
    91e4:	30bff92e 	bgeu	r6,r2,91cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70091cc>
    91e8:	003e2506 	br	8a80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008a80>
    91ec:	21003fcc 	andi	r4,r4,255
    91f0:	2002d41e 	bne	r4,zero,9d44 <___vfiprintf_internal_r+0x1444>
    91f4:	a5000414 	ori	r20,r20,16
    91f8:	a080080c 	andi	r2,r20,32
    91fc:	103fb51e 	bne	r2,zero,90d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70090d4>
    9200:	a080040c 	andi	r2,r20,16
    9204:	1001f826 	beq	r2,zero,99e8 <___vfiprintf_internal_r+0x10e8>
    9208:	da802217 	ldw	r10,136(sp)
    920c:	54800017 	ldw	r18,0(r10)
    9210:	52800104 	addi	r10,r10,4
    9214:	da802215 	stw	r10,136(sp)
    9218:	9027d7fa 	srai	r19,r18,31
    921c:	9805883a 	mov	r2,r19
    9220:	003fb206 	br	90ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70090ec>
    9224:	21003fcc 	andi	r4,r4,255
    9228:	2002c41e 	bne	r4,zero,9d3c <___vfiprintf_internal_r+0x143c>
    922c:	a5000414 	ori	r20,r20,16
    9230:	a080080c 	andi	r2,r20,32
    9234:	103f5f1e 	bne	r2,zero,8fb4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008fb4>
    9238:	a080040c 	andi	r2,r20,16
    923c:	10020f26 	beq	r2,zero,9a7c <___vfiprintf_internal_r+0x117c>
    9240:	da802217 	ldw	r10,136(sp)
    9244:	d8001d85 	stb	zero,118(sp)
    9248:	0027883a 	mov	r19,zero
    924c:	50800104 	addi	r2,r10,4
    9250:	54800017 	ldw	r18,0(r10)
    9254:	48021116 	blt	r9,zero,9a9c <___vfiprintf_internal_r+0x119c>
    9258:	00ffdfc4 	movi	r3,-129
    925c:	d8802215 	stw	r2,136(sp)
    9260:	a0e8703a 	and	r20,r20,r3
    9264:	903f5e1e 	bne	r18,zero,8fe0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008fe0>
    9268:	0039883a 	mov	fp,zero
    926c:	4802a626 	beq	r9,zero,9d08 <___vfiprintf_internal_r+0x1408>
    9270:	0025883a 	mov	r18,zero
    9274:	0027883a 	mov	r19,zero
    9278:	003f5a06 	br	8fe4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008fe4>
    927c:	21003fcc 	andi	r4,r4,255
    9280:	20029f1e 	bne	r4,zero,9d00 <___vfiprintf_internal_r+0x1400>
    9284:	a5000414 	ori	r20,r20,16
    9288:	a080080c 	andi	r2,r20,32
    928c:	10005e1e 	bne	r2,zero,9408 <___vfiprintf_internal_r+0xb08>
    9290:	a080040c 	andi	r2,r20,16
    9294:	1001a21e 	bne	r2,zero,9920 <___vfiprintf_internal_r+0x1020>
    9298:	a080100c 	andi	r2,r20,64
    929c:	d8001d85 	stb	zero,118(sp)
    92a0:	da802217 	ldw	r10,136(sp)
    92a4:	1002231e 	bne	r2,zero,9b34 <___vfiprintf_internal_r+0x1234>
    92a8:	50800104 	addi	r2,r10,4
    92ac:	54800017 	ldw	r18,0(r10)
    92b0:	0027883a 	mov	r19,zero
    92b4:	4801a00e 	bge	r9,zero,9938 <___vfiprintf_internal_r+0x1038>
    92b8:	d8802215 	stw	r2,136(sp)
    92bc:	0039883a 	mov	fp,zero
    92c0:	94c4b03a 	or	r2,r18,r19
    92c4:	103f901e 	bne	r2,zero,9108 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009108>
    92c8:	00800044 	movi	r2,1
    92cc:	10803fcc 	andi	r2,r2,255
    92d0:	00c00044 	movi	r3,1
    92d4:	10c05926 	beq	r2,r3,943c <___vfiprintf_internal_r+0xb3c>
    92d8:	00c00084 	movi	r3,2
    92dc:	10ffe41e 	bne	r2,r3,9270 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009270>
    92e0:	0025883a 	mov	r18,zero
    92e4:	0027883a 	mov	r19,zero
    92e8:	00013d06 	br	97e0 <___vfiprintf_internal_r+0xee0>
    92ec:	21003fcc 	andi	r4,r4,255
    92f0:	2002811e 	bne	r4,zero,9cf8 <___vfiprintf_internal_r+0x13f8>
    92f4:	00800074 	movhi	r2,1
    92f8:	109c7f04 	addi	r2,r2,29180
    92fc:	d8802615 	stw	r2,152(sp)
    9300:	a080080c 	andi	r2,r20,32
    9304:	103f561e 	bne	r2,zero,9060 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009060>
    9308:	a080040c 	andi	r2,r20,16
    930c:	1001d126 	beq	r2,zero,9a54 <___vfiprintf_internal_r+0x1154>
    9310:	da802217 	ldw	r10,136(sp)
    9314:	0027883a 	mov	r19,zero
    9318:	54800017 	ldw	r18,0(r10)
    931c:	52800104 	addi	r10,r10,4
    9320:	da802215 	stw	r10,136(sp)
    9324:	003f5306 	br	9074 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009074>
    9328:	da802217 	ldw	r10,136(sp)
    932c:	d8001d85 	stb	zero,118(sp)
    9330:	55400017 	ldw	r21,0(r10)
    9334:	50c00104 	addi	r3,r10,4
    9338:	a8024226 	beq	r21,zero,9c44 <___vfiprintf_internal_r+0x1344>
    933c:	48021816 	blt	r9,zero,9ba0 <___vfiprintf_internal_r+0x12a0>
    9340:	480d883a 	mov	r6,r9
    9344:	000b883a 	mov	r5,zero
    9348:	a809883a 	mov	r4,r21
    934c:	d8c02a15 	stw	r3,168(sp)
    9350:	da002b15 	stw	r8,172(sp)
    9354:	da402c15 	stw	r9,176(sp)
    9358:	0006afc0 	call	6afc <memchr>
    935c:	d8c02a17 	ldw	r3,168(sp)
    9360:	da002b17 	ldw	r8,172(sp)
    9364:	da402c17 	ldw	r9,176(sp)
    9368:	10024826 	beq	r2,zero,9c8c <___vfiprintf_internal_r+0x138c>
    936c:	1567c83a 	sub	r19,r2,r21
    9370:	df001d83 	ldbu	fp,118(sp)
    9374:	d8c02215 	stw	r3,136(sp)
    9378:	0013883a 	mov	r9,zero
    937c:	003e6006 	br	8d00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008d00>
    9380:	21003fcc 	andi	r4,r4,255
    9384:	203fc026 	beq	r4,zero,9288 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009288>
    9388:	d9c01d85 	stb	r7,118(sp)
    938c:	003fbe06 	br	9288 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009288>
    9390:	da802217 	ldw	r10,136(sp)
    9394:	54400017 	ldw	r17,0(r10)
    9398:	50800104 	addi	r2,r10,4
    939c:	883e3b16 	blt	r17,zero,8c8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008c8c>
    93a0:	d8802215 	stw	r2,136(sp)
    93a4:	80c00007 	ldb	r3,0(r16)
    93a8:	003db406 	br	8a7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008a7c>
    93ac:	01000044 	movi	r4,1
    93b0:	01c00ac4 	movi	r7,43
    93b4:	80c00007 	ldb	r3,0(r16)
    93b8:	003db006 	br	8a7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008a7c>
    93bc:	80c00007 	ldb	r3,0(r16)
    93c0:	82800044 	addi	r10,r16,1
    93c4:	1b423c26 	beq	r3,r13,9cb8 <___vfiprintf_internal_r+0x13b8>
    93c8:	18bff404 	addi	r2,r3,-48
    93cc:	0013883a 	mov	r9,zero
    93d0:	30822b36 	bltu	r6,r2,9c80 <___vfiprintf_internal_r+0x1380>
    93d4:	50c00007 	ldb	r3,0(r10)
    93d8:	4a4002a4 	muli	r9,r9,10
    93dc:	54000044 	addi	r16,r10,1
    93e0:	8015883a 	mov	r10,r16
    93e4:	4893883a 	add	r9,r9,r2
    93e8:	18bff404 	addi	r2,r3,-48
    93ec:	30bff92e 	bgeu	r6,r2,93d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70093d4>
    93f0:	483da30e 	bge	r9,zero,8a80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008a80>
    93f4:	027fffc4 	movi	r9,-1
    93f8:	003da106 	br	8a80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008a80>
    93fc:	a5001014 	ori	r20,r20,64
    9400:	80c00007 	ldb	r3,0(r16)
    9404:	003d9d06 	br	8a7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008a7c>
    9408:	da802217 	ldw	r10,136(sp)
    940c:	d8001d85 	stb	zero,118(sp)
    9410:	50c00204 	addi	r3,r10,8
    9414:	54800017 	ldw	r18,0(r10)
    9418:	54c00117 	ldw	r19,4(r10)
    941c:	4801ca16 	blt	r9,zero,9b48 <___vfiprintf_internal_r+0x1248>
    9420:	013fdfc4 	movi	r4,-129
    9424:	94c4b03a 	or	r2,r18,r19
    9428:	d8c02215 	stw	r3,136(sp)
    942c:	a128703a 	and	r20,r20,r4
    9430:	0039883a 	mov	fp,zero
    9434:	103f341e 	bne	r2,zero,9108 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009108>
    9438:	483e2e26 	beq	r9,zero,8cf4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008cf4>
    943c:	0025883a 	mov	r18,zero
    9440:	94800c04 	addi	r18,r18,48
    9444:	dc8019c5 	stb	r18,103(sp)
    9448:	dcc02717 	ldw	r19,156(sp)
    944c:	dd4019c4 	addi	r21,sp,103
    9450:	003e2b06 	br	8d00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008d00>
    9454:	21003fcc 	andi	r4,r4,255
    9458:	2002361e 	bne	r4,zero,9d34 <___vfiprintf_internal_r+0x1434>
    945c:	1801c126 	beq	r3,zero,9b64 <___vfiprintf_internal_r+0x1264>
    9460:	04800044 	movi	r18,1
    9464:	d8c01005 	stb	r3,64(sp)
    9468:	d8001d85 	stb	zero,118(sp)
    946c:	9027883a 	mov	r19,r18
    9470:	dd401004 	addi	r21,sp,64
    9474:	003f1106 	br	90bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70090bc>
    9478:	d9402117 	ldw	r5,132(sp)
    947c:	d9002017 	ldw	r4,128(sp)
    9480:	d9801a04 	addi	r6,sp,104
    9484:	d9c02b15 	stw	r7,172(sp)
    9488:	dbc02a15 	stw	r15,168(sp)
    948c:	00087ec0 	call	87ec <__sprint_r.part.0>
    9490:	d9c02b17 	ldw	r7,172(sp)
    9494:	dbc02a17 	ldw	r15,168(sp)
    9498:	10006d1e 	bne	r2,zero,9650 <___vfiprintf_internal_r+0xd50>
    949c:	d9801b17 	ldw	r6,108(sp)
    94a0:	d8801c17 	ldw	r2,112(sp)
    94a4:	d811883a 	mov	r8,sp
    94a8:	31400044 	addi	r5,r6,1
    94ac:	003e3306 	br	8d7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008d7c>
    94b0:	d9401b17 	ldw	r5,108(sp)
    94b4:	d8801c17 	ldw	r2,112(sp)
    94b8:	29000044 	addi	r4,r5,1
    94bc:	d8c01d87 	ldb	r3,118(sp)
    94c0:	183e4d26 	beq	r3,zero,8df8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008df8>
    94c4:	00c00044 	movi	r3,1
    94c8:	d9401d84 	addi	r5,sp,118
    94cc:	10c5883a 	add	r2,r2,r3
    94d0:	41400015 	stw	r5,0(r8)
    94d4:	40c00115 	stw	r3,4(r8)
    94d8:	d8801c15 	stw	r2,112(sp)
    94dc:	d9001b15 	stw	r4,108(sp)
    94e0:	014001c4 	movi	r5,7
    94e4:	2900a90e 	bge	r5,r4,978c <___vfiprintf_internal_r+0xe8c>
    94e8:	1000da1e 	bne	r2,zero,9854 <___vfiprintf_internal_r+0xf54>
    94ec:	7000ab1e 	bne	r14,zero,979c <___vfiprintf_internal_r+0xe9c>
    94f0:	000b883a 	mov	r5,zero
    94f4:	1809883a 	mov	r4,r3
    94f8:	d811883a 	mov	r8,sp
    94fc:	00c02004 	movi	r3,128
    9500:	e0fe4d26 	beq	fp,r3,8e38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008e38>
    9504:	4cf9c83a 	sub	fp,r9,r19
    9508:	073e7b0e 	bge	zero,fp,8ef8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008ef8>
    950c:	01c00404 	movi	r7,16
    9510:	3f01900e 	bge	r7,fp,9b54 <___vfiprintf_internal_r+0x1254>
    9514:	00c00074 	movhi	r3,1
    9518:	18dce504 	addi	r3,r3,29588
    951c:	d8c02415 	stw	r3,144(sp)
    9520:	034001c4 	movi	r13,7
    9524:	00000506 	br	953c <___vfiprintf_internal_r+0xc3c>
    9528:	29000084 	addi	r4,r5,2
    952c:	42000204 	addi	r8,r8,8
    9530:	180b883a 	mov	r5,r3
    9534:	e73ffc04 	addi	fp,fp,-16
    9538:	3f000d0e 	bge	r7,fp,9570 <___vfiprintf_internal_r+0xc70>
    953c:	10800404 	addi	r2,r2,16
    9540:	28c00044 	addi	r3,r5,1
    9544:	45c00015 	stw	r23,0(r8)
    9548:	41c00115 	stw	r7,4(r8)
    954c:	d8801c15 	stw	r2,112(sp)
    9550:	d8c01b15 	stw	r3,108(sp)
    9554:	68fff40e 	bge	r13,r3,9528 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009528>
    9558:	1000101e 	bne	r2,zero,959c <___vfiprintf_internal_r+0xc9c>
    955c:	e73ffc04 	addi	fp,fp,-16
    9560:	01000044 	movi	r4,1
    9564:	000b883a 	mov	r5,zero
    9568:	d811883a 	mov	r8,sp
    956c:	3f3ff316 	blt	r7,fp,953c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700953c>
    9570:	da802417 	ldw	r10,144(sp)
    9574:	1705883a 	add	r2,r2,fp
    9578:	47000115 	stw	fp,4(r8)
    957c:	42800015 	stw	r10,0(r8)
    9580:	d8801c15 	stw	r2,112(sp)
    9584:	d9001b15 	stw	r4,108(sp)
    9588:	00c001c4 	movi	r3,7
    958c:	19003616 	blt	r3,r4,9668 <___vfiprintf_internal_r+0xd68>
    9590:	42000204 	addi	r8,r8,8
    9594:	21000044 	addi	r4,r4,1
    9598:	003e5706 	br	8ef8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008ef8>
    959c:	d9402117 	ldw	r5,132(sp)
    95a0:	d9002017 	ldw	r4,128(sp)
    95a4:	d9801a04 	addi	r6,sp,104
    95a8:	d9c02b15 	stw	r7,172(sp)
    95ac:	db402a15 	stw	r13,168(sp)
    95b0:	00087ec0 	call	87ec <__sprint_r.part.0>
    95b4:	d9c02b17 	ldw	r7,172(sp)
    95b8:	db402a17 	ldw	r13,168(sp)
    95bc:	1000241e 	bne	r2,zero,9650 <___vfiprintf_internal_r+0xd50>
    95c0:	d9401b17 	ldw	r5,108(sp)
    95c4:	d8801c17 	ldw	r2,112(sp)
    95c8:	d811883a 	mov	r8,sp
    95cc:	29000044 	addi	r4,r5,1
    95d0:	003fd806 	br	9534 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009534>
    95d4:	d9401b17 	ldw	r5,108(sp)
    95d8:	00c00074 	movhi	r3,1
    95dc:	18dce904 	addi	r3,r3,29604
    95e0:	d8c02415 	stw	r3,144(sp)
    95e4:	29400044 	addi	r5,r5,1
    95e8:	d8c02417 	ldw	r3,144(sp)
    95ec:	14c5883a 	add	r2,r2,r19
    95f0:	44c00115 	stw	r19,4(r8)
    95f4:	40c00015 	stw	r3,0(r8)
    95f8:	d8801c15 	stw	r2,112(sp)
    95fc:	d9401b15 	stw	r5,108(sp)
    9600:	00c001c4 	movi	r3,7
    9604:	1940070e 	bge	r3,r5,9624 <___vfiprintf_internal_r+0xd24>
    9608:	103e4826 	beq	r2,zero,8f2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008f2c>
    960c:	d9402117 	ldw	r5,132(sp)
    9610:	d9002017 	ldw	r4,128(sp)
    9614:	d9801a04 	addi	r6,sp,104
    9618:	00087ec0 	call	87ec <__sprint_r.part.0>
    961c:	10000c1e 	bne	r2,zero,9650 <___vfiprintf_internal_r+0xd50>
    9620:	d8801c17 	ldw	r2,112(sp)
    9624:	8c80010e 	bge	r17,r18,962c <___vfiprintf_internal_r+0xd2c>
    9628:	9023883a 	mov	r17,r18
    962c:	da802317 	ldw	r10,140(sp)
    9630:	5455883a 	add	r10,r10,r17
    9634:	da802315 	stw	r10,140(sp)
    9638:	103e4126 	beq	r2,zero,8f40 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008f40>
    963c:	d9402117 	ldw	r5,132(sp)
    9640:	d9002017 	ldw	r4,128(sp)
    9644:	d9801a04 	addi	r6,sp,104
    9648:	00087ec0 	call	87ec <__sprint_r.part.0>
    964c:	103e3c26 	beq	r2,zero,8f40 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008f40>
    9650:	dd002117 	ldw	r20,132(sp)
    9654:	a080030b 	ldhu	r2,12(r20)
    9658:	1080100c 	andi	r2,r2,64
    965c:	1001231e 	bne	r2,zero,9aec <___vfiprintf_internal_r+0x11ec>
    9660:	d8802317 	ldw	r2,140(sp)
    9664:	003d7b06 	br	8c54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008c54>
    9668:	1000991e 	bne	r2,zero,98d0 <___vfiprintf_internal_r+0xfd0>
    966c:	00c00044 	movi	r3,1
    9670:	9805883a 	mov	r2,r19
    9674:	dd400015 	stw	r21,0(sp)
    9678:	dcc00115 	stw	r19,4(sp)
    967c:	dcc01c15 	stw	r19,112(sp)
    9680:	d8c01b15 	stw	r3,108(sp)
    9684:	d811883a 	mov	r8,sp
    9688:	42000204 	addi	r8,r8,8
    968c:	a2c0010c 	andi	r11,r20,4
    9690:	583fe426 	beq	r11,zero,9624 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009624>
    9694:	8ca7c83a 	sub	r19,r17,r18
    9698:	04ffe20e 	bge	zero,r19,9624 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009624>
    969c:	01c00404 	movi	r7,16
    96a0:	3cffcc0e 	bge	r7,r19,95d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70095d4>
    96a4:	02800074 	movhi	r10,1
    96a8:	529ce904 	addi	r10,r10,29604
    96ac:	d9001b17 	ldw	r4,108(sp)
    96b0:	da802415 	stw	r10,144(sp)
    96b4:	382b883a 	mov	r21,r7
    96b8:	050001c4 	movi	r20,7
    96bc:	df002017 	ldw	fp,128(sp)
    96c0:	00000506 	br	96d8 <___vfiprintf_internal_r+0xdd8>
    96c4:	21400084 	addi	r5,r4,2
    96c8:	42000204 	addi	r8,r8,8
    96cc:	1809883a 	mov	r4,r3
    96d0:	9cfffc04 	addi	r19,r19,-16
    96d4:	acffc40e 	bge	r21,r19,95e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70095e8>
    96d8:	10800404 	addi	r2,r2,16
    96dc:	20c00044 	addi	r3,r4,1
    96e0:	45800015 	stw	r22,0(r8)
    96e4:	45400115 	stw	r21,4(r8)
    96e8:	d8801c15 	stw	r2,112(sp)
    96ec:	d8c01b15 	stw	r3,108(sp)
    96f0:	a0fff40e 	bge	r20,r3,96c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70096c4>
    96f4:	1000041e 	bne	r2,zero,9708 <___vfiprintf_internal_r+0xe08>
    96f8:	01400044 	movi	r5,1
    96fc:	0009883a 	mov	r4,zero
    9700:	d811883a 	mov	r8,sp
    9704:	003ff206 	br	96d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70096d0>
    9708:	d9402117 	ldw	r5,132(sp)
    970c:	d9801a04 	addi	r6,sp,104
    9710:	e009883a 	mov	r4,fp
    9714:	00087ec0 	call	87ec <__sprint_r.part.0>
    9718:	103fcd1e 	bne	r2,zero,9650 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009650>
    971c:	d9001b17 	ldw	r4,108(sp)
    9720:	d8801c17 	ldw	r2,112(sp)
    9724:	d811883a 	mov	r8,sp
    9728:	21400044 	addi	r5,r4,1
    972c:	003fe806 	br	96d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70096d0>
    9730:	d9402117 	ldw	r5,132(sp)
    9734:	d9002017 	ldw	r4,128(sp)
    9738:	d9801a04 	addi	r6,sp,104
    973c:	d9c02b15 	stw	r7,172(sp)
    9740:	db402a15 	stw	r13,168(sp)
    9744:	00087ec0 	call	87ec <__sprint_r.part.0>
    9748:	d9c02b17 	ldw	r7,172(sp)
    974c:	db402a17 	ldw	r13,168(sp)
    9750:	103fbf1e 	bne	r2,zero,9650 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009650>
    9754:	d9401b17 	ldw	r5,108(sp)
    9758:	d8801c17 	ldw	r2,112(sp)
    975c:	d811883a 	mov	r8,sp
    9760:	29800044 	addi	r6,r5,1
    9764:	003dc406 	br	8e78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008e78>
    9768:	1000d21e 	bne	r2,zero,9ab4 <___vfiprintf_internal_r+0x11b4>
    976c:	d8c01d87 	ldb	r3,118(sp)
    9770:	18009526 	beq	r3,zero,99c8 <___vfiprintf_internal_r+0x10c8>
    9774:	00800044 	movi	r2,1
    9778:	d8c01d84 	addi	r3,sp,118
    977c:	1009883a 	mov	r4,r2
    9780:	d8c00015 	stw	r3,0(sp)
    9784:	d8800115 	stw	r2,4(sp)
    9788:	d811883a 	mov	r8,sp
    978c:	200b883a 	mov	r5,r4
    9790:	42000204 	addi	r8,r8,8
    9794:	21000044 	addi	r4,r4,1
    9798:	003d9706 	br	8df8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008df8>
    979c:	d9001d04 	addi	r4,sp,116
    97a0:	00800084 	movi	r2,2
    97a4:	d9000015 	stw	r4,0(sp)
    97a8:	d8800115 	stw	r2,4(sp)
    97ac:	1809883a 	mov	r4,r3
    97b0:	d811883a 	mov	r8,sp
    97b4:	200b883a 	mov	r5,r4
    97b8:	42000204 	addi	r8,r8,8
    97bc:	21000044 	addi	r4,r4,1
    97c0:	003f4e06 	br	94fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70094fc>
    97c4:	d8001d85 	stb	zero,118(sp)
    97c8:	48005016 	blt	r9,zero,990c <___vfiprintf_internal_r+0x100c>
    97cc:	00ffdfc4 	movi	r3,-129
    97d0:	94c4b03a 	or	r2,r18,r19
    97d4:	a0e8703a 	and	r20,r20,r3
    97d8:	103d4426 	beq	r2,zero,8cec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008cec>
    97dc:	0039883a 	mov	fp,zero
    97e0:	d9002617 	ldw	r4,152(sp)
    97e4:	dd401a04 	addi	r21,sp,104
    97e8:	908003cc 	andi	r2,r18,15
    97ec:	9806973a 	slli	r3,r19,28
    97f0:	2085883a 	add	r2,r4,r2
    97f4:	9024d13a 	srli	r18,r18,4
    97f8:	10800003 	ldbu	r2,0(r2)
    97fc:	9826d13a 	srli	r19,r19,4
    9800:	ad7fffc4 	addi	r21,r21,-1
    9804:	1ca4b03a 	or	r18,r3,r18
    9808:	a8800005 	stb	r2,0(r21)
    980c:	94c4b03a 	or	r2,r18,r19
    9810:	103ff51e 	bne	r2,zero,97e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70097e8>
    9814:	003e5906 	br	917c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700917c>
    9818:	d9402117 	ldw	r5,132(sp)
    981c:	d9002017 	ldw	r4,128(sp)
    9820:	d9801a04 	addi	r6,sp,104
    9824:	00087ec0 	call	87ec <__sprint_r.part.0>
    9828:	103f891e 	bne	r2,zero,9650 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009650>
    982c:	d8801c17 	ldw	r2,112(sp)
    9830:	d811883a 	mov	r8,sp
    9834:	003f9506 	br	968c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700968c>
    9838:	d9402117 	ldw	r5,132(sp)
    983c:	d9002017 	ldw	r4,128(sp)
    9840:	d9801a04 	addi	r6,sp,104
    9844:	00087ec0 	call	87ec <__sprint_r.part.0>
    9848:	103f811e 	bne	r2,zero,9650 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009650>
    984c:	d811883a 	mov	r8,sp
    9850:	003ced06 	br	8c08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008c08>
    9854:	d9402117 	ldw	r5,132(sp)
    9858:	d9002017 	ldw	r4,128(sp)
    985c:	d9801a04 	addi	r6,sp,104
    9860:	da402c15 	stw	r9,176(sp)
    9864:	db802a15 	stw	r14,168(sp)
    9868:	00087ec0 	call	87ec <__sprint_r.part.0>
    986c:	da402c17 	ldw	r9,176(sp)
    9870:	db802a17 	ldw	r14,168(sp)
    9874:	103f761e 	bne	r2,zero,9650 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009650>
    9878:	d9401b17 	ldw	r5,108(sp)
    987c:	d8801c17 	ldw	r2,112(sp)
    9880:	d811883a 	mov	r8,sp
    9884:	29000044 	addi	r4,r5,1
    9888:	003d5b06 	br	8df8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008df8>
    988c:	d9402117 	ldw	r5,132(sp)
    9890:	d9002017 	ldw	r4,128(sp)
    9894:	d9801a04 	addi	r6,sp,104
    9898:	da402c15 	stw	r9,176(sp)
    989c:	00087ec0 	call	87ec <__sprint_r.part.0>
    98a0:	da402c17 	ldw	r9,176(sp)
    98a4:	103f6a1e 	bne	r2,zero,9650 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009650>
    98a8:	d9401b17 	ldw	r5,108(sp)
    98ac:	d8801c17 	ldw	r2,112(sp)
    98b0:	d811883a 	mov	r8,sp
    98b4:	29000044 	addi	r4,r5,1
    98b8:	003f1006 	br	94fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70094fc>
    98bc:	1000c31e 	bne	r2,zero,9bcc <___vfiprintf_internal_r+0x12cc>
    98c0:	01000044 	movi	r4,1
    98c4:	000b883a 	mov	r5,zero
    98c8:	d811883a 	mov	r8,sp
    98cc:	003f0d06 	br	9504 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009504>
    98d0:	d9402117 	ldw	r5,132(sp)
    98d4:	d9002017 	ldw	r4,128(sp)
    98d8:	d9801a04 	addi	r6,sp,104
    98dc:	00087ec0 	call	87ec <__sprint_r.part.0>
    98e0:	103f5b1e 	bne	r2,zero,9650 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009650>
    98e4:	d9001b17 	ldw	r4,108(sp)
    98e8:	d8801c17 	ldw	r2,112(sp)
    98ec:	d811883a 	mov	r8,sp
    98f0:	21000044 	addi	r4,r4,1
    98f4:	003d8006 	br	8ef8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008ef8>
    98f8:	01000074 	movhi	r4,1
    98fc:	211c8404 	addi	r4,r4,29200
    9900:	d9002615 	stw	r4,152(sp)
    9904:	d8c02215 	stw	r3,136(sp)
    9908:	1029883a 	mov	r20,r2
    990c:	94c4b03a 	or	r2,r18,r19
    9910:	103fb21e 	bne	r2,zero,97dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70097dc>
    9914:	0039883a 	mov	fp,zero
    9918:	00800084 	movi	r2,2
    991c:	003e6b06 	br	92cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70092cc>
    9920:	da802217 	ldw	r10,136(sp)
    9924:	d8001d85 	stb	zero,118(sp)
    9928:	0027883a 	mov	r19,zero
    992c:	50800104 	addi	r2,r10,4
    9930:	54800017 	ldw	r18,0(r10)
    9934:	483e6016 	blt	r9,zero,92b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70092b8>
    9938:	00ffdfc4 	movi	r3,-129
    993c:	d8802215 	stw	r2,136(sp)
    9940:	a0e8703a 	and	r20,r20,r3
    9944:	0039883a 	mov	fp,zero
    9948:	903ebb26 	beq	r18,zero,9438 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009438>
    994c:	00800244 	movi	r2,9
    9950:	14bdee36 	bltu	r2,r18,910c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700910c>
    9954:	003eba06 	br	9440 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009440>
    9958:	00800c04 	movi	r2,48
    995c:	d8c01d45 	stb	r3,117(sp)
    9960:	d8801d05 	stb	r2,116(sp)
    9964:	d8001d85 	stb	zero,118(sp)
    9968:	a0c00094 	ori	r3,r20,2
    996c:	4800a916 	blt	r9,zero,9c14 <___vfiprintf_internal_r+0x1314>
    9970:	00bfdfc4 	movi	r2,-129
    9974:	a096703a 	and	r11,r20,r2
    9978:	5d000094 	ori	r20,r11,2
    997c:	0039883a 	mov	fp,zero
    9980:	003f9706 	br	97e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70097e0>
    9984:	8025883a 	mov	r18,r16
    9988:	003c2e06 	br	8a44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008a44>
    998c:	00800074 	movhi	r2,1
    9990:	109c8404 	addi	r2,r2,29200
    9994:	0039883a 	mov	fp,zero
    9998:	d8802615 	stw	r2,152(sp)
    999c:	003f9006 	br	97e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70097e0>
    99a0:	04a5c83a 	sub	r18,zero,r18
    99a4:	07000b44 	movi	fp,45
    99a8:	9004c03a 	cmpne	r2,r18,zero
    99ac:	04e7c83a 	sub	r19,zero,r19
    99b0:	df001d85 	stb	fp,118(sp)
    99b4:	98a7c83a 	sub	r19,r19,r2
    99b8:	48009f16 	blt	r9,zero,9c38 <___vfiprintf_internal_r+0x1338>
    99bc:	00bfdfc4 	movi	r2,-129
    99c0:	a0a8703a 	and	r20,r20,r2
    99c4:	003dd006 	br	9108 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009108>
    99c8:	70004c26 	beq	r14,zero,9afc <___vfiprintf_internal_r+0x11fc>
    99cc:	00800084 	movi	r2,2
    99d0:	d8c01d04 	addi	r3,sp,116
    99d4:	d8c00015 	stw	r3,0(sp)
    99d8:	d8800115 	stw	r2,4(sp)
    99dc:	01000044 	movi	r4,1
    99e0:	d811883a 	mov	r8,sp
    99e4:	003f7306 	br	97b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70097b4>
    99e8:	a080100c 	andi	r2,r20,64
    99ec:	da802217 	ldw	r10,136(sp)
    99f0:	103e0626 	beq	r2,zero,920c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700920c>
    99f4:	5480000f 	ldh	r18,0(r10)
    99f8:	52800104 	addi	r10,r10,4
    99fc:	da802215 	stw	r10,136(sp)
    9a00:	9027d7fa 	srai	r19,r18,31
    9a04:	9805883a 	mov	r2,r19
    9a08:	003db806 	br	90ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70090ec>
    9a0c:	a080040c 	andi	r2,r20,16
    9a10:	1000091e 	bne	r2,zero,9a38 <___vfiprintf_internal_r+0x1138>
    9a14:	a2c0100c 	andi	r11,r20,64
    9a18:	58000726 	beq	r11,zero,9a38 <___vfiprintf_internal_r+0x1138>
    9a1c:	da802217 	ldw	r10,136(sp)
    9a20:	50800017 	ldw	r2,0(r10)
    9a24:	52800104 	addi	r10,r10,4
    9a28:	da802215 	stw	r10,136(sp)
    9a2c:	da802317 	ldw	r10,140(sp)
    9a30:	1280000d 	sth	r10,0(r2)
    9a34:	003be706 	br	89d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70089d4>
    9a38:	da802217 	ldw	r10,136(sp)
    9a3c:	50800017 	ldw	r2,0(r10)
    9a40:	52800104 	addi	r10,r10,4
    9a44:	da802215 	stw	r10,136(sp)
    9a48:	da802317 	ldw	r10,140(sp)
    9a4c:	12800015 	stw	r10,0(r2)
    9a50:	003be006 	br	89d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70089d4>
    9a54:	a080100c 	andi	r2,r20,64
    9a58:	da802217 	ldw	r10,136(sp)
    9a5c:	10003026 	beq	r2,zero,9b20 <___vfiprintf_internal_r+0x1220>
    9a60:	5480000b 	ldhu	r18,0(r10)
    9a64:	52800104 	addi	r10,r10,4
    9a68:	0027883a 	mov	r19,zero
    9a6c:	da802215 	stw	r10,136(sp)
    9a70:	003d8006 	br	9074 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009074>
    9a74:	80c00007 	ldb	r3,0(r16)
    9a78:	003c0006 	br	8a7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008a7c>
    9a7c:	a080100c 	andi	r2,r20,64
    9a80:	d8001d85 	stb	zero,118(sp)
    9a84:	da802217 	ldw	r10,136(sp)
    9a88:	1000201e 	bne	r2,zero,9b0c <___vfiprintf_internal_r+0x120c>
    9a8c:	50800104 	addi	r2,r10,4
    9a90:	54800017 	ldw	r18,0(r10)
    9a94:	0027883a 	mov	r19,zero
    9a98:	483def0e 	bge	r9,zero,9258 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009258>
    9a9c:	94c6b03a 	or	r3,r18,r19
    9aa0:	d8802215 	stw	r2,136(sp)
    9aa4:	183d4e1e 	bne	r3,zero,8fe0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008fe0>
    9aa8:	0039883a 	mov	fp,zero
    9aac:	0005883a 	mov	r2,zero
    9ab0:	003e0606 	br	92cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70092cc>
    9ab4:	d9402117 	ldw	r5,132(sp)
    9ab8:	d9002017 	ldw	r4,128(sp)
    9abc:	d9801a04 	addi	r6,sp,104
    9ac0:	da402c15 	stw	r9,176(sp)
    9ac4:	db802a15 	stw	r14,168(sp)
    9ac8:	00087ec0 	call	87ec <__sprint_r.part.0>
    9acc:	da402c17 	ldw	r9,176(sp)
    9ad0:	db802a17 	ldw	r14,168(sp)
    9ad4:	103ede1e 	bne	r2,zero,9650 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009650>
    9ad8:	d9401b17 	ldw	r5,108(sp)
    9adc:	d8801c17 	ldw	r2,112(sp)
    9ae0:	d811883a 	mov	r8,sp
    9ae4:	29000044 	addi	r4,r5,1
    9ae8:	003e7406 	br	94bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70094bc>
    9aec:	00bfffc4 	movi	r2,-1
    9af0:	003c5806 	br	8c54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008c54>
    9af4:	d811883a 	mov	r8,sp
    9af8:	003ee806 	br	969c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700969c>
    9afc:	000b883a 	mov	r5,zero
    9b00:	01000044 	movi	r4,1
    9b04:	d811883a 	mov	r8,sp
    9b08:	003e7c06 	br	94fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70094fc>
    9b0c:	50800104 	addi	r2,r10,4
    9b10:	5480000b 	ldhu	r18,0(r10)
    9b14:	0027883a 	mov	r19,zero
    9b18:	483dcf0e 	bge	r9,zero,9258 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009258>
    9b1c:	003fdf06 	br	9a9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009a9c>
    9b20:	54800017 	ldw	r18,0(r10)
    9b24:	52800104 	addi	r10,r10,4
    9b28:	0027883a 	mov	r19,zero
    9b2c:	da802215 	stw	r10,136(sp)
    9b30:	003d5006 	br	9074 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009074>
    9b34:	50800104 	addi	r2,r10,4
    9b38:	5480000b 	ldhu	r18,0(r10)
    9b3c:	0027883a 	mov	r19,zero
    9b40:	483f7d0e 	bge	r9,zero,9938 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009938>
    9b44:	003ddc06 	br	92b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70092b8>
    9b48:	d8c02215 	stw	r3,136(sp)
    9b4c:	0039883a 	mov	fp,zero
    9b50:	003ddb06 	br	92c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70092c0>
    9b54:	02800074 	movhi	r10,1
    9b58:	529ce504 	addi	r10,r10,29588
    9b5c:	da802415 	stw	r10,144(sp)
    9b60:	003e8306 	br	9570 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009570>
    9b64:	d8801c17 	ldw	r2,112(sp)
    9b68:	dd002117 	ldw	r20,132(sp)
    9b6c:	103eb926 	beq	r2,zero,9654 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009654>
    9b70:	d9002017 	ldw	r4,128(sp)
    9b74:	d9801a04 	addi	r6,sp,104
    9b78:	a00b883a 	mov	r5,r20
    9b7c:	00087ec0 	call	87ec <__sprint_r.part.0>
    9b80:	003eb406 	br	9654 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009654>
    9b84:	80c00043 	ldbu	r3,1(r16)
    9b88:	a5000814 	ori	r20,r20,32
    9b8c:	84000044 	addi	r16,r16,1
    9b90:	18c03fcc 	andi	r3,r3,255
    9b94:	18c0201c 	xori	r3,r3,128
    9b98:	18ffe004 	addi	r3,r3,-128
    9b9c:	003bb706 	br	8a7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008a7c>
    9ba0:	a809883a 	mov	r4,r21
    9ba4:	d8c02a15 	stw	r3,168(sp)
    9ba8:	da002b15 	stw	r8,172(sp)
    9bac:	00012540 	call	1254 <strlen>
    9bb0:	d8c02a17 	ldw	r3,168(sp)
    9bb4:	1027883a 	mov	r19,r2
    9bb8:	df001d83 	ldbu	fp,118(sp)
    9bbc:	d8c02215 	stw	r3,136(sp)
    9bc0:	0013883a 	mov	r9,zero
    9bc4:	da002b17 	ldw	r8,172(sp)
    9bc8:	003c4d06 	br	8d00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008d00>
    9bcc:	d9402117 	ldw	r5,132(sp)
    9bd0:	d9002017 	ldw	r4,128(sp)
    9bd4:	d9801a04 	addi	r6,sp,104
    9bd8:	da402c15 	stw	r9,176(sp)
    9bdc:	00087ec0 	call	87ec <__sprint_r.part.0>
    9be0:	da402c17 	ldw	r9,176(sp)
    9be4:	103e9a1e 	bne	r2,zero,9650 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009650>
    9be8:	d9401b17 	ldw	r5,108(sp)
    9bec:	d8801c17 	ldw	r2,112(sp)
    9bf0:	d811883a 	mov	r8,sp
    9bf4:	29000044 	addi	r4,r5,1
    9bf8:	003e4206 	br	9504 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009504>
    9bfc:	d9401b17 	ldw	r5,108(sp)
    9c00:	01000074 	movhi	r4,1
    9c04:	211ce904 	addi	r4,r4,29604
    9c08:	d9002415 	stw	r4,144(sp)
    9c0c:	29400044 	addi	r5,r5,1
    9c10:	003c6d06 	br	8dc8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008dc8>
    9c14:	0039883a 	mov	fp,zero
    9c18:	00800084 	movi	r2,2
    9c1c:	10803fcc 	andi	r2,r2,255
    9c20:	01000044 	movi	r4,1
    9c24:	11001e26 	beq	r2,r4,9ca0 <___vfiprintf_internal_r+0x13a0>
    9c28:	01000084 	movi	r4,2
    9c2c:	11001e1e 	bne	r2,r4,9ca8 <___vfiprintf_internal_r+0x13a8>
    9c30:	1829883a 	mov	r20,r3
    9c34:	003eea06 	br	97e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70097e0>
    9c38:	a007883a 	mov	r3,r20
    9c3c:	00800044 	movi	r2,1
    9c40:	003ff606 	br	9c1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009c1c>
    9c44:	00800184 	movi	r2,6
    9c48:	1240012e 	bgeu	r2,r9,9c50 <___vfiprintf_internal_r+0x1350>
    9c4c:	1013883a 	mov	r9,r2
    9c50:	4827883a 	mov	r19,r9
    9c54:	4825883a 	mov	r18,r9
    9c58:	48001516 	blt	r9,zero,9cb0 <___vfiprintf_internal_r+0x13b0>
    9c5c:	05400074 	movhi	r21,1
    9c60:	d8c02215 	stw	r3,136(sp)
    9c64:	ad5c8904 	addi	r21,r21,29220
    9c68:	003d1406 	br	90bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70090bc>
    9c6c:	02800074 	movhi	r10,1
    9c70:	529ce504 	addi	r10,r10,29588
    9c74:	da802415 	stw	r10,144(sp)
    9c78:	200d883a 	mov	r6,r4
    9c7c:	003c9106 	br	8ec4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008ec4>
    9c80:	5021883a 	mov	r16,r10
    9c84:	0013883a 	mov	r9,zero
    9c88:	003b7d06 	br	8a80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008a80>
    9c8c:	4827883a 	mov	r19,r9
    9c90:	df001d83 	ldbu	fp,118(sp)
    9c94:	d8c02215 	stw	r3,136(sp)
    9c98:	0013883a 	mov	r9,zero
    9c9c:	003c1806 	br	8d00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008d00>
    9ca0:	1829883a 	mov	r20,r3
    9ca4:	003d1806 	br	9108 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009108>
    9ca8:	1829883a 	mov	r20,r3
    9cac:	003ccd06 	br	8fe4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008fe4>
    9cb0:	0025883a 	mov	r18,zero
    9cb4:	003fe906 	br	9c5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009c5c>
    9cb8:	d8802217 	ldw	r2,136(sp)
    9cbc:	80c00043 	ldbu	r3,1(r16)
    9cc0:	5021883a 	mov	r16,r10
    9cc4:	12400017 	ldw	r9,0(r2)
    9cc8:	10800104 	addi	r2,r2,4
    9ccc:	d8802215 	stw	r2,136(sp)
    9cd0:	483faf0e 	bge	r9,zero,9b90 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009b90>
    9cd4:	18c03fcc 	andi	r3,r3,255
    9cd8:	18c0201c 	xori	r3,r3,128
    9cdc:	027fffc4 	movi	r9,-1
    9ce0:	18ffe004 	addi	r3,r3,-128
    9ce4:	003b6506 	br	8a7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008a7c>
    9ce8:	d9c01d85 	stb	r7,118(sp)
    9cec:	003ca006 	br	8f70 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008f70>
    9cf0:	d9c01d85 	stb	r7,118(sp)
    9cf4:	003cad06 	br	8fac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008fac>
    9cf8:	d9c01d85 	stb	r7,118(sp)
    9cfc:	003d7d06 	br	92f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70092f4>
    9d00:	d9c01d85 	stb	r7,118(sp)
    9d04:	003d5f06 	br	9284 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009284>
    9d08:	a080004c 	andi	r2,r20,1
    9d0c:	0039883a 	mov	fp,zero
    9d10:	10000526 	beq	r2,zero,9d28 <___vfiprintf_internal_r+0x1428>
    9d14:	00800c04 	movi	r2,48
    9d18:	d88019c5 	stb	r2,103(sp)
    9d1c:	dcc02717 	ldw	r19,156(sp)
    9d20:	dd4019c4 	addi	r21,sp,103
    9d24:	003bf606 	br	8d00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008d00>
    9d28:	0027883a 	mov	r19,zero
    9d2c:	dd401a04 	addi	r21,sp,104
    9d30:	003bf306 	br	8d00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008d00>
    9d34:	d9c01d85 	stb	r7,118(sp)
    9d38:	003dc806 	br	945c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700945c>
    9d3c:	d9c01d85 	stb	r7,118(sp)
    9d40:	003d3a06 	br	922c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700922c>
    9d44:	d9c01d85 	stb	r7,118(sp)
    9d48:	003d2a06 	br	91f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70091f4>
    9d4c:	d9c01d85 	stb	r7,118(sp)
    9d50:	003cde06 	br	90cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70090cc>
    9d54:	d9c01d85 	stb	r7,118(sp)
    9d58:	003cbc06 	br	904c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700904c>

00009d5c <__vfiprintf_internal>:
    9d5c:	008000b4 	movhi	r2,2
    9d60:	10a54904 	addi	r2,r2,-27356
    9d64:	300f883a 	mov	r7,r6
    9d68:	280d883a 	mov	r6,r5
    9d6c:	200b883a 	mov	r5,r4
    9d70:	11000017 	ldw	r4,0(r2)
    9d74:	00089001 	jmpi	8900 <___vfiprintf_internal_r>

00009d78 <__sbprintf>:
    9d78:	2880030b 	ldhu	r2,12(r5)
    9d7c:	2ac01917 	ldw	r11,100(r5)
    9d80:	2a80038b 	ldhu	r10,14(r5)
    9d84:	2a400717 	ldw	r9,28(r5)
    9d88:	2a000917 	ldw	r8,36(r5)
    9d8c:	defee204 	addi	sp,sp,-1144
    9d90:	00c10004 	movi	r3,1024
    9d94:	dc011a15 	stw	r16,1128(sp)
    9d98:	10bfff4c 	andi	r2,r2,65533
    9d9c:	2821883a 	mov	r16,r5
    9da0:	d8cb883a 	add	r5,sp,r3
    9da4:	dc811c15 	stw	r18,1136(sp)
    9da8:	dc411b15 	stw	r17,1132(sp)
    9dac:	dfc11d15 	stw	ra,1140(sp)
    9db0:	2025883a 	mov	r18,r4
    9db4:	d881030d 	sth	r2,1036(sp)
    9db8:	dac11915 	stw	r11,1124(sp)
    9dbc:	da81038d 	sth	r10,1038(sp)
    9dc0:	da410715 	stw	r9,1052(sp)
    9dc4:	da010915 	stw	r8,1060(sp)
    9dc8:	dec10015 	stw	sp,1024(sp)
    9dcc:	dec10415 	stw	sp,1040(sp)
    9dd0:	d8c10215 	stw	r3,1032(sp)
    9dd4:	d8c10515 	stw	r3,1044(sp)
    9dd8:	d8010615 	stw	zero,1048(sp)
    9ddc:	00089000 	call	8900 <___vfiprintf_internal_r>
    9de0:	1023883a 	mov	r17,r2
    9de4:	10000416 	blt	r2,zero,9df8 <__sbprintf+0x80>
    9de8:	d9410004 	addi	r5,sp,1024
    9dec:	9009883a 	mov	r4,r18
    9df0:	00051b40 	call	51b4 <_fflush_r>
    9df4:	10000d1e 	bne	r2,zero,9e2c <__sbprintf+0xb4>
    9df8:	d881030b 	ldhu	r2,1036(sp)
    9dfc:	1080100c 	andi	r2,r2,64
    9e00:	10000326 	beq	r2,zero,9e10 <__sbprintf+0x98>
    9e04:	8080030b 	ldhu	r2,12(r16)
    9e08:	10801014 	ori	r2,r2,64
    9e0c:	8080030d 	sth	r2,12(r16)
    9e10:	8805883a 	mov	r2,r17
    9e14:	dfc11d17 	ldw	ra,1140(sp)
    9e18:	dc811c17 	ldw	r18,1136(sp)
    9e1c:	dc411b17 	ldw	r17,1132(sp)
    9e20:	dc011a17 	ldw	r16,1128(sp)
    9e24:	dec11e04 	addi	sp,sp,1144
    9e28:	f800283a 	ret
    9e2c:	047fffc4 	movi	r17,-1
    9e30:	003ff106 	br	9df8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009df8>

00009e34 <_write_r>:
    9e34:	defffd04 	addi	sp,sp,-12
    9e38:	2805883a 	mov	r2,r5
    9e3c:	dc000015 	stw	r16,0(sp)
    9e40:	040000b4 	movhi	r16,2
    9e44:	dc400115 	stw	r17,4(sp)
    9e48:	300b883a 	mov	r5,r6
    9e4c:	842d1604 	addi	r16,r16,-19368
    9e50:	2023883a 	mov	r17,r4
    9e54:	380d883a 	mov	r6,r7
    9e58:	1009883a 	mov	r4,r2
    9e5c:	dfc00215 	stw	ra,8(sp)
    9e60:	80000015 	stw	zero,0(r16)
    9e64:	000e4e80 	call	e4e8 <write>
    9e68:	00ffffc4 	movi	r3,-1
    9e6c:	10c00526 	beq	r2,r3,9e84 <_write_r+0x50>
    9e70:	dfc00217 	ldw	ra,8(sp)
    9e74:	dc400117 	ldw	r17,4(sp)
    9e78:	dc000017 	ldw	r16,0(sp)
    9e7c:	dec00304 	addi	sp,sp,12
    9e80:	f800283a 	ret
    9e84:	80c00017 	ldw	r3,0(r16)
    9e88:	183ff926 	beq	r3,zero,9e70 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009e70>
    9e8c:	88c00015 	stw	r3,0(r17)
    9e90:	003ff706 	br	9e70 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009e70>

00009e94 <_close_r>:
    9e94:	defffd04 	addi	sp,sp,-12
    9e98:	dc000015 	stw	r16,0(sp)
    9e9c:	040000b4 	movhi	r16,2
    9ea0:	dc400115 	stw	r17,4(sp)
    9ea4:	842d1604 	addi	r16,r16,-19368
    9ea8:	2023883a 	mov	r17,r4
    9eac:	2809883a 	mov	r4,r5
    9eb0:	dfc00215 	stw	ra,8(sp)
    9eb4:	80000015 	stw	zero,0(r16)
    9eb8:	000da700 	call	da70 <close>
    9ebc:	00ffffc4 	movi	r3,-1
    9ec0:	10c00526 	beq	r2,r3,9ed8 <_close_r+0x44>
    9ec4:	dfc00217 	ldw	ra,8(sp)
    9ec8:	dc400117 	ldw	r17,4(sp)
    9ecc:	dc000017 	ldw	r16,0(sp)
    9ed0:	dec00304 	addi	sp,sp,12
    9ed4:	f800283a 	ret
    9ed8:	80c00017 	ldw	r3,0(r16)
    9edc:	183ff926 	beq	r3,zero,9ec4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009ec4>
    9ee0:	88c00015 	stw	r3,0(r17)
    9ee4:	003ff706 	br	9ec4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009ec4>

00009ee8 <_calloc_r>:
    9ee8:	298b383a 	mul	r5,r5,r6
    9eec:	defffe04 	addi	sp,sp,-8
    9ef0:	dfc00115 	stw	ra,4(sp)
    9ef4:	dc000015 	stw	r16,0(sp)
    9ef8:	00062f00 	call	62f0 <_malloc_r>
    9efc:	10002926 	beq	r2,zero,9fa4 <_calloc_r+0xbc>
    9f00:	11bfff17 	ldw	r6,-4(r2)
    9f04:	1021883a 	mov	r16,r2
    9f08:	00bfff04 	movi	r2,-4
    9f0c:	308c703a 	and	r6,r6,r2
    9f10:	00c00904 	movi	r3,36
    9f14:	308d883a 	add	r6,r6,r2
    9f18:	19801636 	bltu	r3,r6,9f74 <_calloc_r+0x8c>
    9f1c:	008004c4 	movi	r2,19
    9f20:	11800b2e 	bgeu	r2,r6,9f50 <_calloc_r+0x68>
    9f24:	80000015 	stw	zero,0(r16)
    9f28:	80000115 	stw	zero,4(r16)
    9f2c:	008006c4 	movi	r2,27
    9f30:	11801a2e 	bgeu	r2,r6,9f9c <_calloc_r+0xb4>
    9f34:	80000215 	stw	zero,8(r16)
    9f38:	80000315 	stw	zero,12(r16)
    9f3c:	30c0151e 	bne	r6,r3,9f94 <_calloc_r+0xac>
    9f40:	80000415 	stw	zero,16(r16)
    9f44:	80800604 	addi	r2,r16,24
    9f48:	80000515 	stw	zero,20(r16)
    9f4c:	00000106 	br	9f54 <_calloc_r+0x6c>
    9f50:	8005883a 	mov	r2,r16
    9f54:	10000015 	stw	zero,0(r2)
    9f58:	10000115 	stw	zero,4(r2)
    9f5c:	10000215 	stw	zero,8(r2)
    9f60:	8005883a 	mov	r2,r16
    9f64:	dfc00117 	ldw	ra,4(sp)
    9f68:	dc000017 	ldw	r16,0(sp)
    9f6c:	dec00204 	addi	sp,sp,8
    9f70:	f800283a 	ret
    9f74:	000b883a 	mov	r5,zero
    9f78:	8009883a 	mov	r4,r16
    9f7c:	0006e840 	call	6e84 <memset>
    9f80:	8005883a 	mov	r2,r16
    9f84:	dfc00117 	ldw	ra,4(sp)
    9f88:	dc000017 	ldw	r16,0(sp)
    9f8c:	dec00204 	addi	sp,sp,8
    9f90:	f800283a 	ret
    9f94:	80800404 	addi	r2,r16,16
    9f98:	003fee06 	br	9f54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009f54>
    9f9c:	80800204 	addi	r2,r16,8
    9fa0:	003fec06 	br	9f54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009f54>
    9fa4:	0005883a 	mov	r2,zero
    9fa8:	003fee06 	br	9f64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009f64>

00009fac <_fclose_r>:
    9fac:	28003926 	beq	r5,zero,a094 <_fclose_r+0xe8>
    9fb0:	defffc04 	addi	sp,sp,-16
    9fb4:	dc400115 	stw	r17,4(sp)
    9fb8:	dc000015 	stw	r16,0(sp)
    9fbc:	dfc00315 	stw	ra,12(sp)
    9fc0:	dc800215 	stw	r18,8(sp)
    9fc4:	2023883a 	mov	r17,r4
    9fc8:	2821883a 	mov	r16,r5
    9fcc:	20000226 	beq	r4,zero,9fd8 <_fclose_r+0x2c>
    9fd0:	20800e17 	ldw	r2,56(r4)
    9fd4:	10002726 	beq	r2,zero,a074 <_fclose_r+0xc8>
    9fd8:	8080030f 	ldh	r2,12(r16)
    9fdc:	1000071e 	bne	r2,zero,9ffc <_fclose_r+0x50>
    9fe0:	0005883a 	mov	r2,zero
    9fe4:	dfc00317 	ldw	ra,12(sp)
    9fe8:	dc800217 	ldw	r18,8(sp)
    9fec:	dc400117 	ldw	r17,4(sp)
    9ff0:	dc000017 	ldw	r16,0(sp)
    9ff4:	dec00404 	addi	sp,sp,16
    9ff8:	f800283a 	ret
    9ffc:	800b883a 	mov	r5,r16
    a000:	8809883a 	mov	r4,r17
    a004:	0004f980 	call	4f98 <__sflush_r>
    a008:	1025883a 	mov	r18,r2
    a00c:	80800b17 	ldw	r2,44(r16)
    a010:	10000426 	beq	r2,zero,a024 <_fclose_r+0x78>
    a014:	81400717 	ldw	r5,28(r16)
    a018:	8809883a 	mov	r4,r17
    a01c:	103ee83a 	callr	r2
    a020:	10001616 	blt	r2,zero,a07c <_fclose_r+0xd0>
    a024:	8080030b 	ldhu	r2,12(r16)
    a028:	1080200c 	andi	r2,r2,128
    a02c:	1000151e 	bne	r2,zero,a084 <_fclose_r+0xd8>
    a030:	81400c17 	ldw	r5,48(r16)
    a034:	28000526 	beq	r5,zero,a04c <_fclose_r+0xa0>
    a038:	80801004 	addi	r2,r16,64
    a03c:	28800226 	beq	r5,r2,a048 <_fclose_r+0x9c>
    a040:	8809883a 	mov	r4,r17
    a044:	00057040 	call	5704 <_free_r>
    a048:	80000c15 	stw	zero,48(r16)
    a04c:	81401117 	ldw	r5,68(r16)
    a050:	28000326 	beq	r5,zero,a060 <_fclose_r+0xb4>
    a054:	8809883a 	mov	r4,r17
    a058:	00057040 	call	5704 <_free_r>
    a05c:	80001115 	stw	zero,68(r16)
    a060:	00055a00 	call	55a0 <__sfp_lock_acquire>
    a064:	8000030d 	sth	zero,12(r16)
    a068:	00055a40 	call	55a4 <__sfp_lock_release>
    a06c:	9005883a 	mov	r2,r18
    a070:	003fdc06 	br	9fe4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009fe4>
    a074:	00055900 	call	5590 <__sinit>
    a078:	003fd706 	br	9fd8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009fd8>
    a07c:	04bfffc4 	movi	r18,-1
    a080:	003fe806 	br	a024 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a024>
    a084:	81400417 	ldw	r5,16(r16)
    a088:	8809883a 	mov	r4,r17
    a08c:	00057040 	call	5704 <_free_r>
    a090:	003fe706 	br	a030 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a030>
    a094:	0005883a 	mov	r2,zero
    a098:	f800283a 	ret

0000a09c <fclose>:
    a09c:	008000b4 	movhi	r2,2
    a0a0:	10a54904 	addi	r2,r2,-27356
    a0a4:	200b883a 	mov	r5,r4
    a0a8:	11000017 	ldw	r4,0(r2)
    a0ac:	0009fac1 	jmpi	9fac <_fclose_r>

0000a0b0 <__fputwc>:
    a0b0:	defff804 	addi	sp,sp,-32
    a0b4:	dcc00415 	stw	r19,16(sp)
    a0b8:	dc800315 	stw	r18,12(sp)
    a0bc:	dc000115 	stw	r16,4(sp)
    a0c0:	dfc00715 	stw	ra,28(sp)
    a0c4:	dd400615 	stw	r21,24(sp)
    a0c8:	dd000515 	stw	r20,20(sp)
    a0cc:	dc400215 	stw	r17,8(sp)
    a0d0:	2027883a 	mov	r19,r4
    a0d4:	2825883a 	mov	r18,r5
    a0d8:	3021883a 	mov	r16,r6
    a0dc:	00060e00 	call	60e0 <__locale_mb_cur_max>
    a0e0:	00c00044 	movi	r3,1
    a0e4:	10c03e26 	beq	r2,r3,a1e0 <__fputwc+0x130>
    a0e8:	81c01704 	addi	r7,r16,92
    a0ec:	900d883a 	mov	r6,r18
    a0f0:	d80b883a 	mov	r5,sp
    a0f4:	9809883a 	mov	r4,r19
    a0f8:	000a5800 	call	a580 <_wcrtomb_r>
    a0fc:	1029883a 	mov	r20,r2
    a100:	00bfffc4 	movi	r2,-1
    a104:	a0802026 	beq	r20,r2,a188 <__fputwc+0xd8>
    a108:	d9400003 	ldbu	r5,0(sp)
    a10c:	a0001c26 	beq	r20,zero,a180 <__fputwc+0xd0>
    a110:	0023883a 	mov	r17,zero
    a114:	05400284 	movi	r21,10
    a118:	00000906 	br	a140 <__fputwc+0x90>
    a11c:	80800017 	ldw	r2,0(r16)
    a120:	11400005 	stb	r5,0(r2)
    a124:	80c00017 	ldw	r3,0(r16)
    a128:	18c00044 	addi	r3,r3,1
    a12c:	80c00015 	stw	r3,0(r16)
    a130:	8c400044 	addi	r17,r17,1
    a134:	dc45883a 	add	r2,sp,r17
    a138:	8d00112e 	bgeu	r17,r20,a180 <__fputwc+0xd0>
    a13c:	11400003 	ldbu	r5,0(r2)
    a140:	80c00217 	ldw	r3,8(r16)
    a144:	18ffffc4 	addi	r3,r3,-1
    a148:	80c00215 	stw	r3,8(r16)
    a14c:	183ff30e 	bge	r3,zero,a11c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a11c>
    a150:	80800617 	ldw	r2,24(r16)
    a154:	18801916 	blt	r3,r2,a1bc <__fputwc+0x10c>
    a158:	80800017 	ldw	r2,0(r16)
    a15c:	11400005 	stb	r5,0(r2)
    a160:	80800017 	ldw	r2,0(r16)
    a164:	10c00003 	ldbu	r3,0(r2)
    a168:	10800044 	addi	r2,r2,1
    a16c:	1d402326 	beq	r3,r21,a1fc <__fputwc+0x14c>
    a170:	80800015 	stw	r2,0(r16)
    a174:	8c400044 	addi	r17,r17,1
    a178:	dc45883a 	add	r2,sp,r17
    a17c:	8d3fef36 	bltu	r17,r20,a13c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a13c>
    a180:	9005883a 	mov	r2,r18
    a184:	00000406 	br	a198 <__fputwc+0xe8>
    a188:	80c0030b 	ldhu	r3,12(r16)
    a18c:	a005883a 	mov	r2,r20
    a190:	18c01014 	ori	r3,r3,64
    a194:	80c0030d 	sth	r3,12(r16)
    a198:	dfc00717 	ldw	ra,28(sp)
    a19c:	dd400617 	ldw	r21,24(sp)
    a1a0:	dd000517 	ldw	r20,20(sp)
    a1a4:	dcc00417 	ldw	r19,16(sp)
    a1a8:	dc800317 	ldw	r18,12(sp)
    a1ac:	dc400217 	ldw	r17,8(sp)
    a1b0:	dc000117 	ldw	r16,4(sp)
    a1b4:	dec00804 	addi	sp,sp,32
    a1b8:	f800283a 	ret
    a1bc:	800d883a 	mov	r6,r16
    a1c0:	29403fcc 	andi	r5,r5,255
    a1c4:	9809883a 	mov	r4,r19
    a1c8:	000a4280 	call	a428 <__swbuf_r>
    a1cc:	10bfffe0 	cmpeqi	r2,r2,-1
    a1d0:	10803fcc 	andi	r2,r2,255
    a1d4:	103fd626 	beq	r2,zero,a130 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a130>
    a1d8:	00bfffc4 	movi	r2,-1
    a1dc:	003fee06 	br	a198 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a198>
    a1e0:	90ffffc4 	addi	r3,r18,-1
    a1e4:	01003f84 	movi	r4,254
    a1e8:	20ffbf36 	bltu	r4,r3,a0e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a0e8>
    a1ec:	900b883a 	mov	r5,r18
    a1f0:	dc800005 	stb	r18,0(sp)
    a1f4:	1029883a 	mov	r20,r2
    a1f8:	003fc506 	br	a110 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a110>
    a1fc:	800d883a 	mov	r6,r16
    a200:	a80b883a 	mov	r5,r21
    a204:	9809883a 	mov	r4,r19
    a208:	000a4280 	call	a428 <__swbuf_r>
    a20c:	10bfffe0 	cmpeqi	r2,r2,-1
    a210:	003fef06 	br	a1d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a1d0>

0000a214 <_fputwc_r>:
    a214:	3080030b 	ldhu	r2,12(r6)
    a218:	10c8000c 	andi	r3,r2,8192
    a21c:	1800051e 	bne	r3,zero,a234 <_fputwc_r+0x20>
    a220:	30c01917 	ldw	r3,100(r6)
    a224:	10880014 	ori	r2,r2,8192
    a228:	3080030d 	sth	r2,12(r6)
    a22c:	18880014 	ori	r2,r3,8192
    a230:	30801915 	stw	r2,100(r6)
    a234:	000a0b01 	jmpi	a0b0 <__fputwc>

0000a238 <fputwc>:
    a238:	008000b4 	movhi	r2,2
    a23c:	defffc04 	addi	sp,sp,-16
    a240:	10a54904 	addi	r2,r2,-27356
    a244:	dc000115 	stw	r16,4(sp)
    a248:	14000017 	ldw	r16,0(r2)
    a24c:	dc400215 	stw	r17,8(sp)
    a250:	dfc00315 	stw	ra,12(sp)
    a254:	2023883a 	mov	r17,r4
    a258:	80000226 	beq	r16,zero,a264 <fputwc+0x2c>
    a25c:	80800e17 	ldw	r2,56(r16)
    a260:	10001026 	beq	r2,zero,a2a4 <fputwc+0x6c>
    a264:	2880030b 	ldhu	r2,12(r5)
    a268:	10c8000c 	andi	r3,r2,8192
    a26c:	1800051e 	bne	r3,zero,a284 <fputwc+0x4c>
    a270:	28c01917 	ldw	r3,100(r5)
    a274:	10880014 	ori	r2,r2,8192
    a278:	2880030d 	sth	r2,12(r5)
    a27c:	18880014 	ori	r2,r3,8192
    a280:	28801915 	stw	r2,100(r5)
    a284:	280d883a 	mov	r6,r5
    a288:	8009883a 	mov	r4,r16
    a28c:	880b883a 	mov	r5,r17
    a290:	dfc00317 	ldw	ra,12(sp)
    a294:	dc400217 	ldw	r17,8(sp)
    a298:	dc000117 	ldw	r16,4(sp)
    a29c:	dec00404 	addi	sp,sp,16
    a2a0:	000a0b01 	jmpi	a0b0 <__fputwc>
    a2a4:	8009883a 	mov	r4,r16
    a2a8:	d9400015 	stw	r5,0(sp)
    a2ac:	00055900 	call	5590 <__sinit>
    a2b0:	d9400017 	ldw	r5,0(sp)
    a2b4:	003feb06 	br	a264 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a264>

0000a2b8 <_fstat_r>:
    a2b8:	defffd04 	addi	sp,sp,-12
    a2bc:	2805883a 	mov	r2,r5
    a2c0:	dc000015 	stw	r16,0(sp)
    a2c4:	040000b4 	movhi	r16,2
    a2c8:	dc400115 	stw	r17,4(sp)
    a2cc:	842d1604 	addi	r16,r16,-19368
    a2d0:	2023883a 	mov	r17,r4
    a2d4:	300b883a 	mov	r5,r6
    a2d8:	1009883a 	mov	r4,r2
    a2dc:	dfc00215 	stw	ra,8(sp)
    a2e0:	80000015 	stw	zero,0(r16)
    a2e4:	000dba80 	call	dba8 <fstat>
    a2e8:	00ffffc4 	movi	r3,-1
    a2ec:	10c00526 	beq	r2,r3,a304 <_fstat_r+0x4c>
    a2f0:	dfc00217 	ldw	ra,8(sp)
    a2f4:	dc400117 	ldw	r17,4(sp)
    a2f8:	dc000017 	ldw	r16,0(sp)
    a2fc:	dec00304 	addi	sp,sp,12
    a300:	f800283a 	ret
    a304:	80c00017 	ldw	r3,0(r16)
    a308:	183ff926 	beq	r3,zero,a2f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a2f0>
    a30c:	88c00015 	stw	r3,0(r17)
    a310:	003ff706 	br	a2f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a2f0>

0000a314 <_isatty_r>:
    a314:	defffd04 	addi	sp,sp,-12
    a318:	dc000015 	stw	r16,0(sp)
    a31c:	040000b4 	movhi	r16,2
    a320:	dc400115 	stw	r17,4(sp)
    a324:	842d1604 	addi	r16,r16,-19368
    a328:	2023883a 	mov	r17,r4
    a32c:	2809883a 	mov	r4,r5
    a330:	dfc00215 	stw	ra,8(sp)
    a334:	80000015 	stw	zero,0(r16)
    a338:	000dc940 	call	dc94 <isatty>
    a33c:	00ffffc4 	movi	r3,-1
    a340:	10c00526 	beq	r2,r3,a358 <_isatty_r+0x44>
    a344:	dfc00217 	ldw	ra,8(sp)
    a348:	dc400117 	ldw	r17,4(sp)
    a34c:	dc000017 	ldw	r16,0(sp)
    a350:	dec00304 	addi	sp,sp,12
    a354:	f800283a 	ret
    a358:	80c00017 	ldw	r3,0(r16)
    a35c:	183ff926 	beq	r3,zero,a344 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a344>
    a360:	88c00015 	stw	r3,0(r17)
    a364:	003ff706 	br	a344 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a344>

0000a368 <_lseek_r>:
    a368:	defffd04 	addi	sp,sp,-12
    a36c:	2805883a 	mov	r2,r5
    a370:	dc000015 	stw	r16,0(sp)
    a374:	040000b4 	movhi	r16,2
    a378:	dc400115 	stw	r17,4(sp)
    a37c:	300b883a 	mov	r5,r6
    a380:	842d1604 	addi	r16,r16,-19368
    a384:	2023883a 	mov	r17,r4
    a388:	380d883a 	mov	r6,r7
    a38c:	1009883a 	mov	r4,r2
    a390:	dfc00215 	stw	ra,8(sp)
    a394:	80000015 	stw	zero,0(r16)
    a398:	000de600 	call	de60 <lseek>
    a39c:	00ffffc4 	movi	r3,-1
    a3a0:	10c00526 	beq	r2,r3,a3b8 <_lseek_r+0x50>
    a3a4:	dfc00217 	ldw	ra,8(sp)
    a3a8:	dc400117 	ldw	r17,4(sp)
    a3ac:	dc000017 	ldw	r16,0(sp)
    a3b0:	dec00304 	addi	sp,sp,12
    a3b4:	f800283a 	ret
    a3b8:	80c00017 	ldw	r3,0(r16)
    a3bc:	183ff926 	beq	r3,zero,a3a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a3a4>
    a3c0:	88c00015 	stw	r3,0(r17)
    a3c4:	003ff706 	br	a3a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a3a4>

0000a3c8 <_read_r>:
    a3c8:	defffd04 	addi	sp,sp,-12
    a3cc:	2805883a 	mov	r2,r5
    a3d0:	dc000015 	stw	r16,0(sp)
    a3d4:	040000b4 	movhi	r16,2
    a3d8:	dc400115 	stw	r17,4(sp)
    a3dc:	300b883a 	mov	r5,r6
    a3e0:	842d1604 	addi	r16,r16,-19368
    a3e4:	2023883a 	mov	r17,r4
    a3e8:	380d883a 	mov	r6,r7
    a3ec:	1009883a 	mov	r4,r2
    a3f0:	dfc00215 	stw	ra,8(sp)
    a3f4:	80000015 	stw	zero,0(r16)
    a3f8:	000e29c0 	call	e29c <read>
    a3fc:	00ffffc4 	movi	r3,-1
    a400:	10c00526 	beq	r2,r3,a418 <_read_r+0x50>
    a404:	dfc00217 	ldw	ra,8(sp)
    a408:	dc400117 	ldw	r17,4(sp)
    a40c:	dc000017 	ldw	r16,0(sp)
    a410:	dec00304 	addi	sp,sp,12
    a414:	f800283a 	ret
    a418:	80c00017 	ldw	r3,0(r16)
    a41c:	183ff926 	beq	r3,zero,a404 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a404>
    a420:	88c00015 	stw	r3,0(r17)
    a424:	003ff706 	br	a404 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a404>

0000a428 <__swbuf_r>:
    a428:	defffb04 	addi	sp,sp,-20
    a42c:	dcc00315 	stw	r19,12(sp)
    a430:	dc800215 	stw	r18,8(sp)
    a434:	dc000015 	stw	r16,0(sp)
    a438:	dfc00415 	stw	ra,16(sp)
    a43c:	dc400115 	stw	r17,4(sp)
    a440:	2025883a 	mov	r18,r4
    a444:	2827883a 	mov	r19,r5
    a448:	3021883a 	mov	r16,r6
    a44c:	20000226 	beq	r4,zero,a458 <__swbuf_r+0x30>
    a450:	20800e17 	ldw	r2,56(r4)
    a454:	10004226 	beq	r2,zero,a560 <__swbuf_r+0x138>
    a458:	80800617 	ldw	r2,24(r16)
    a45c:	8100030b 	ldhu	r4,12(r16)
    a460:	80800215 	stw	r2,8(r16)
    a464:	2080020c 	andi	r2,r4,8
    a468:	10003626 	beq	r2,zero,a544 <__swbuf_r+0x11c>
    a46c:	80c00417 	ldw	r3,16(r16)
    a470:	18003426 	beq	r3,zero,a544 <__swbuf_r+0x11c>
    a474:	2088000c 	andi	r2,r4,8192
    a478:	9c403fcc 	andi	r17,r19,255
    a47c:	10001a26 	beq	r2,zero,a4e8 <__swbuf_r+0xc0>
    a480:	80800017 	ldw	r2,0(r16)
    a484:	81000517 	ldw	r4,20(r16)
    a488:	10c7c83a 	sub	r3,r2,r3
    a48c:	1900200e 	bge	r3,r4,a510 <__swbuf_r+0xe8>
    a490:	18c00044 	addi	r3,r3,1
    a494:	81000217 	ldw	r4,8(r16)
    a498:	11400044 	addi	r5,r2,1
    a49c:	81400015 	stw	r5,0(r16)
    a4a0:	213fffc4 	addi	r4,r4,-1
    a4a4:	81000215 	stw	r4,8(r16)
    a4a8:	14c00005 	stb	r19,0(r2)
    a4ac:	80800517 	ldw	r2,20(r16)
    a4b0:	10c01e26 	beq	r2,r3,a52c <__swbuf_r+0x104>
    a4b4:	8080030b 	ldhu	r2,12(r16)
    a4b8:	1080004c 	andi	r2,r2,1
    a4bc:	10000226 	beq	r2,zero,a4c8 <__swbuf_r+0xa0>
    a4c0:	00800284 	movi	r2,10
    a4c4:	88801926 	beq	r17,r2,a52c <__swbuf_r+0x104>
    a4c8:	8805883a 	mov	r2,r17
    a4cc:	dfc00417 	ldw	ra,16(sp)
    a4d0:	dcc00317 	ldw	r19,12(sp)
    a4d4:	dc800217 	ldw	r18,8(sp)
    a4d8:	dc400117 	ldw	r17,4(sp)
    a4dc:	dc000017 	ldw	r16,0(sp)
    a4e0:	dec00504 	addi	sp,sp,20
    a4e4:	f800283a 	ret
    a4e8:	81401917 	ldw	r5,100(r16)
    a4ec:	00b7ffc4 	movi	r2,-8193
    a4f0:	21080014 	ori	r4,r4,8192
    a4f4:	2884703a 	and	r2,r5,r2
    a4f8:	80801915 	stw	r2,100(r16)
    a4fc:	80800017 	ldw	r2,0(r16)
    a500:	8100030d 	sth	r4,12(r16)
    a504:	81000517 	ldw	r4,20(r16)
    a508:	10c7c83a 	sub	r3,r2,r3
    a50c:	193fe016 	blt	r3,r4,a490 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a490>
    a510:	800b883a 	mov	r5,r16
    a514:	9009883a 	mov	r4,r18
    a518:	00051b40 	call	51b4 <_fflush_r>
    a51c:	1000071e 	bne	r2,zero,a53c <__swbuf_r+0x114>
    a520:	80800017 	ldw	r2,0(r16)
    a524:	00c00044 	movi	r3,1
    a528:	003fda06 	br	a494 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a494>
    a52c:	800b883a 	mov	r5,r16
    a530:	9009883a 	mov	r4,r18
    a534:	00051b40 	call	51b4 <_fflush_r>
    a538:	103fe326 	beq	r2,zero,a4c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a4c8>
    a53c:	00bfffc4 	movi	r2,-1
    a540:	003fe206 	br	a4cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a4cc>
    a544:	800b883a 	mov	r5,r16
    a548:	9009883a 	mov	r4,r18
    a54c:	00035bc0 	call	35bc <__swsetup_r>
    a550:	103ffa1e 	bne	r2,zero,a53c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a53c>
    a554:	8100030b 	ldhu	r4,12(r16)
    a558:	80c00417 	ldw	r3,16(r16)
    a55c:	003fc506 	br	a474 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a474>
    a560:	00055900 	call	5590 <__sinit>
    a564:	003fbc06 	br	a458 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a458>

0000a568 <__swbuf>:
    a568:	008000b4 	movhi	r2,2
    a56c:	10a54904 	addi	r2,r2,-27356
    a570:	280d883a 	mov	r6,r5
    a574:	200b883a 	mov	r5,r4
    a578:	11000017 	ldw	r4,0(r2)
    a57c:	000a4281 	jmpi	a428 <__swbuf_r>

0000a580 <_wcrtomb_r>:
    a580:	defff604 	addi	sp,sp,-40
    a584:	008000b4 	movhi	r2,2
    a588:	dc800815 	stw	r18,32(sp)
    a58c:	dc400715 	stw	r17,28(sp)
    a590:	dc000615 	stw	r16,24(sp)
    a594:	10a54d04 	addi	r2,r2,-27340
    a598:	dfc00915 	stw	ra,36(sp)
    a59c:	2021883a 	mov	r16,r4
    a5a0:	3823883a 	mov	r17,r7
    a5a4:	14800017 	ldw	r18,0(r2)
    a5a8:	28001426 	beq	r5,zero,a5fc <_wcrtomb_r+0x7c>
    a5ac:	d9400415 	stw	r5,16(sp)
    a5b0:	d9800515 	stw	r6,20(sp)
    a5b4:	00060d40 	call	60d4 <__locale_charset>
    a5b8:	d9800517 	ldw	r6,20(sp)
    a5bc:	d9400417 	ldw	r5,16(sp)
    a5c0:	100f883a 	mov	r7,r2
    a5c4:	dc400015 	stw	r17,0(sp)
    a5c8:	8009883a 	mov	r4,r16
    a5cc:	903ee83a 	callr	r18
    a5d0:	00ffffc4 	movi	r3,-1
    a5d4:	10c0031e 	bne	r2,r3,a5e4 <_wcrtomb_r+0x64>
    a5d8:	88000015 	stw	zero,0(r17)
    a5dc:	00c02284 	movi	r3,138
    a5e0:	80c00015 	stw	r3,0(r16)
    a5e4:	dfc00917 	ldw	ra,36(sp)
    a5e8:	dc800817 	ldw	r18,32(sp)
    a5ec:	dc400717 	ldw	r17,28(sp)
    a5f0:	dc000617 	ldw	r16,24(sp)
    a5f4:	dec00a04 	addi	sp,sp,40
    a5f8:	f800283a 	ret
    a5fc:	00060d40 	call	60d4 <__locale_charset>
    a600:	100f883a 	mov	r7,r2
    a604:	dc400015 	stw	r17,0(sp)
    a608:	000d883a 	mov	r6,zero
    a60c:	d9400104 	addi	r5,sp,4
    a610:	8009883a 	mov	r4,r16
    a614:	903ee83a 	callr	r18
    a618:	003fed06 	br	a5d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a5d0>

0000a61c <wcrtomb>:
    a61c:	defff604 	addi	sp,sp,-40
    a620:	008000b4 	movhi	r2,2
    a624:	dc800615 	stw	r18,24(sp)
    a628:	dc400515 	stw	r17,20(sp)
    a62c:	10a54904 	addi	r2,r2,-27356
    a630:	dfc00915 	stw	ra,36(sp)
    a634:	dd000815 	stw	r20,32(sp)
    a638:	dcc00715 	stw	r19,28(sp)
    a63c:	dc000415 	stw	r16,16(sp)
    a640:	3025883a 	mov	r18,r6
    a644:	14400017 	ldw	r17,0(r2)
    a648:	20001926 	beq	r4,zero,a6b0 <wcrtomb+0x94>
    a64c:	008000b4 	movhi	r2,2
    a650:	10a54d04 	addi	r2,r2,-27340
    a654:	15000017 	ldw	r20,0(r2)
    a658:	2021883a 	mov	r16,r4
    a65c:	2827883a 	mov	r19,r5
    a660:	00060d40 	call	60d4 <__locale_charset>
    a664:	100f883a 	mov	r7,r2
    a668:	dc800015 	stw	r18,0(sp)
    a66c:	980d883a 	mov	r6,r19
    a670:	800b883a 	mov	r5,r16
    a674:	8809883a 	mov	r4,r17
    a678:	a03ee83a 	callr	r20
    a67c:	00ffffc4 	movi	r3,-1
    a680:	10c0031e 	bne	r2,r3,a690 <wcrtomb+0x74>
    a684:	90000015 	stw	zero,0(r18)
    a688:	00c02284 	movi	r3,138
    a68c:	88c00015 	stw	r3,0(r17)
    a690:	dfc00917 	ldw	ra,36(sp)
    a694:	dd000817 	ldw	r20,32(sp)
    a698:	dcc00717 	ldw	r19,28(sp)
    a69c:	dc800617 	ldw	r18,24(sp)
    a6a0:	dc400517 	ldw	r17,20(sp)
    a6a4:	dc000417 	ldw	r16,16(sp)
    a6a8:	dec00a04 	addi	sp,sp,40
    a6ac:	f800283a 	ret
    a6b0:	008000b4 	movhi	r2,2
    a6b4:	10a54d04 	addi	r2,r2,-27340
    a6b8:	14000017 	ldw	r16,0(r2)
    a6bc:	00060d40 	call	60d4 <__locale_charset>
    a6c0:	100f883a 	mov	r7,r2
    a6c4:	dc800015 	stw	r18,0(sp)
    a6c8:	000d883a 	mov	r6,zero
    a6cc:	d9400104 	addi	r5,sp,4
    a6d0:	8809883a 	mov	r4,r17
    a6d4:	803ee83a 	callr	r16
    a6d8:	003fe806 	br	a67c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a67c>

0000a6dc <__ascii_wctomb>:
    a6dc:	28000526 	beq	r5,zero,a6f4 <__ascii_wctomb+0x18>
    a6e0:	00803fc4 	movi	r2,255
    a6e4:	11800536 	bltu	r2,r6,a6fc <__ascii_wctomb+0x20>
    a6e8:	29800005 	stb	r6,0(r5)
    a6ec:	00800044 	movi	r2,1
    a6f0:	f800283a 	ret
    a6f4:	0005883a 	mov	r2,zero
    a6f8:	f800283a 	ret
    a6fc:	00802284 	movi	r2,138
    a700:	20800015 	stw	r2,0(r4)
    a704:	00bfffc4 	movi	r2,-1
    a708:	f800283a 	ret

0000a70c <_wctomb_r>:
    a70c:	008000b4 	movhi	r2,2
    a710:	defff904 	addi	sp,sp,-28
    a714:	10a54d04 	addi	r2,r2,-27340
    a718:	dfc00615 	stw	ra,24(sp)
    a71c:	dc400515 	stw	r17,20(sp)
    a720:	dc000415 	stw	r16,16(sp)
    a724:	3823883a 	mov	r17,r7
    a728:	14000017 	ldw	r16,0(r2)
    a72c:	d9000115 	stw	r4,4(sp)
    a730:	d9400215 	stw	r5,8(sp)
    a734:	d9800315 	stw	r6,12(sp)
    a738:	00060d40 	call	60d4 <__locale_charset>
    a73c:	d9800317 	ldw	r6,12(sp)
    a740:	d9400217 	ldw	r5,8(sp)
    a744:	d9000117 	ldw	r4,4(sp)
    a748:	100f883a 	mov	r7,r2
    a74c:	dc400015 	stw	r17,0(sp)
    a750:	803ee83a 	callr	r16
    a754:	dfc00617 	ldw	ra,24(sp)
    a758:	dc400517 	ldw	r17,20(sp)
    a75c:	dc000417 	ldw	r16,16(sp)
    a760:	dec00704 	addi	sp,sp,28
    a764:	f800283a 	ret

0000a768 <__udivdi3>:
    a768:	defff504 	addi	sp,sp,-44
    a76c:	dcc00415 	stw	r19,16(sp)
    a770:	dc000115 	stw	r16,4(sp)
    a774:	dfc00a15 	stw	ra,40(sp)
    a778:	df000915 	stw	fp,36(sp)
    a77c:	ddc00815 	stw	r23,32(sp)
    a780:	dd800715 	stw	r22,28(sp)
    a784:	dd400615 	stw	r21,24(sp)
    a788:	dd000515 	stw	r20,20(sp)
    a78c:	dc800315 	stw	r18,12(sp)
    a790:	dc400215 	stw	r17,8(sp)
    a794:	2027883a 	mov	r19,r4
    a798:	2821883a 	mov	r16,r5
    a79c:	3800411e 	bne	r7,zero,a8a4 <__udivdi3+0x13c>
    a7a0:	3023883a 	mov	r17,r6
    a7a4:	2025883a 	mov	r18,r4
    a7a8:	2980522e 	bgeu	r5,r6,a8f4 <__udivdi3+0x18c>
    a7ac:	00bfffd4 	movui	r2,65535
    a7b0:	282d883a 	mov	r22,r5
    a7b4:	1180a836 	bltu	r2,r6,aa58 <__udivdi3+0x2f0>
    a7b8:	00803fc4 	movi	r2,255
    a7bc:	1185803a 	cmpltu	r2,r2,r6
    a7c0:	100490fa 	slli	r2,r2,3
    a7c4:	3086d83a 	srl	r3,r6,r2
    a7c8:	01000074 	movhi	r4,1
    a7cc:	211ced04 	addi	r4,r4,29620
    a7d0:	20c7883a 	add	r3,r4,r3
    a7d4:	18c00003 	ldbu	r3,0(r3)
    a7d8:	1885883a 	add	r2,r3,r2
    a7dc:	00c00804 	movi	r3,32
    a7e0:	1887c83a 	sub	r3,r3,r2
    a7e4:	18000526 	beq	r3,zero,a7fc <__udivdi3+0x94>
    a7e8:	80e0983a 	sll	r16,r16,r3
    a7ec:	9884d83a 	srl	r2,r19,r2
    a7f0:	30e2983a 	sll	r17,r6,r3
    a7f4:	98e4983a 	sll	r18,r19,r3
    a7f8:	142cb03a 	or	r22,r2,r16
    a7fc:	882ad43a 	srli	r21,r17,16
    a800:	b009883a 	mov	r4,r22
    a804:	8d3fffcc 	andi	r20,r17,65535
    a808:	a80b883a 	mov	r5,r21
    a80c:	000b3740 	call	b374 <__umodsi3>
    a810:	b009883a 	mov	r4,r22
    a814:	a80b883a 	mov	r5,r21
    a818:	1027883a 	mov	r19,r2
    a81c:	000b3100 	call	b310 <__udivsi3>
    a820:	102d883a 	mov	r22,r2
    a824:	9826943a 	slli	r19,r19,16
    a828:	9004d43a 	srli	r2,r18,16
    a82c:	a5a1383a 	mul	r16,r20,r22
    a830:	14c4b03a 	or	r2,r2,r19
    a834:	1400052e 	bgeu	r2,r16,a84c <__udivdi3+0xe4>
    a838:	1445883a 	add	r2,r2,r17
    a83c:	b0ffffc4 	addi	r3,r22,-1
    a840:	14400136 	bltu	r2,r17,a848 <__udivdi3+0xe0>
    a844:	14012336 	bltu	r2,r16,acd4 <__udivdi3+0x56c>
    a848:	182d883a 	mov	r22,r3
    a84c:	1421c83a 	sub	r16,r2,r16
    a850:	a80b883a 	mov	r5,r21
    a854:	8009883a 	mov	r4,r16
    a858:	000b3740 	call	b374 <__umodsi3>
    a85c:	1027883a 	mov	r19,r2
    a860:	a80b883a 	mov	r5,r21
    a864:	8009883a 	mov	r4,r16
    a868:	000b3100 	call	b310 <__udivsi3>
    a86c:	9826943a 	slli	r19,r19,16
    a870:	a0a9383a 	mul	r20,r20,r2
    a874:	94bfffcc 	andi	r18,r18,65535
    a878:	94e4b03a 	or	r18,r18,r19
    a87c:	9500052e 	bgeu	r18,r20,a894 <__udivdi3+0x12c>
    a880:	8ca5883a 	add	r18,r17,r18
    a884:	10ffffc4 	addi	r3,r2,-1
    a888:	9440f136 	bltu	r18,r17,ac50 <__udivdi3+0x4e8>
    a88c:	9500f02e 	bgeu	r18,r20,ac50 <__udivdi3+0x4e8>
    a890:	10bfff84 	addi	r2,r2,-2
    a894:	b00c943a 	slli	r6,r22,16
    a898:	0007883a 	mov	r3,zero
    a89c:	3084b03a 	or	r2,r6,r2
    a8a0:	00005906 	br	aa08 <__udivdi3+0x2a0>
    a8a4:	29c05636 	bltu	r5,r7,aa00 <__udivdi3+0x298>
    a8a8:	00bfffd4 	movui	r2,65535
    a8ac:	11c0622e 	bgeu	r2,r7,aa38 <__udivdi3+0x2d0>
    a8b0:	00804034 	movhi	r2,256
    a8b4:	10bfffc4 	addi	r2,r2,-1
    a8b8:	11c0ee36 	bltu	r2,r7,ac74 <__udivdi3+0x50c>
    a8bc:	00800404 	movi	r2,16
    a8c0:	3886d83a 	srl	r3,r7,r2
    a8c4:	01000074 	movhi	r4,1
    a8c8:	211ced04 	addi	r4,r4,29620
    a8cc:	20c7883a 	add	r3,r4,r3
    a8d0:	18c00003 	ldbu	r3,0(r3)
    a8d4:	05400804 	movi	r21,32
    a8d8:	1885883a 	add	r2,r3,r2
    a8dc:	a8abc83a 	sub	r21,r21,r2
    a8e0:	a800621e 	bne	r21,zero,aa6c <__udivdi3+0x304>
    a8e4:	3c00e936 	bltu	r7,r16,ac8c <__udivdi3+0x524>
    a8e8:	9985403a 	cmpgeu	r2,r19,r6
    a8ec:	0007883a 	mov	r3,zero
    a8f0:	00004506 	br	aa08 <__udivdi3+0x2a0>
    a8f4:	3000041e 	bne	r6,zero,a908 <__udivdi3+0x1a0>
    a8f8:	000b883a 	mov	r5,zero
    a8fc:	01000044 	movi	r4,1
    a900:	000b3100 	call	b310 <__udivsi3>
    a904:	1023883a 	mov	r17,r2
    a908:	00bfffd4 	movui	r2,65535
    a90c:	14404e2e 	bgeu	r2,r17,aa48 <__udivdi3+0x2e0>
    a910:	00804034 	movhi	r2,256
    a914:	10bfffc4 	addi	r2,r2,-1
    a918:	1440d836 	bltu	r2,r17,ac7c <__udivdi3+0x514>
    a91c:	00800404 	movi	r2,16
    a920:	8886d83a 	srl	r3,r17,r2
    a924:	01000074 	movhi	r4,1
    a928:	211ced04 	addi	r4,r4,29620
    a92c:	20c7883a 	add	r3,r4,r3
    a930:	18c00003 	ldbu	r3,0(r3)
    a934:	1885883a 	add	r2,r3,r2
    a938:	00c00804 	movi	r3,32
    a93c:	1887c83a 	sub	r3,r3,r2
    a940:	18008f1e 	bne	r3,zero,ab80 <__udivdi3+0x418>
    a944:	882ad43a 	srli	r21,r17,16
    a948:	8461c83a 	sub	r16,r16,r17
    a94c:	8d3fffcc 	andi	r20,r17,65535
    a950:	00c00044 	movi	r3,1
    a954:	8009883a 	mov	r4,r16
    a958:	a80b883a 	mov	r5,r21
    a95c:	d8c00015 	stw	r3,0(sp)
    a960:	000b3740 	call	b374 <__umodsi3>
    a964:	8009883a 	mov	r4,r16
    a968:	a80b883a 	mov	r5,r21
    a96c:	1027883a 	mov	r19,r2
    a970:	000b3100 	call	b310 <__udivsi3>
    a974:	9826943a 	slli	r19,r19,16
    a978:	9008d43a 	srli	r4,r18,16
    a97c:	1521383a 	mul	r16,r2,r20
    a980:	102d883a 	mov	r22,r2
    a984:	24c8b03a 	or	r4,r4,r19
    a988:	d8c00017 	ldw	r3,0(sp)
    a98c:	2400052e 	bgeu	r4,r16,a9a4 <__udivdi3+0x23c>
    a990:	2449883a 	add	r4,r4,r17
    a994:	b0bfffc4 	addi	r2,r22,-1
    a998:	24400136 	bltu	r4,r17,a9a0 <__udivdi3+0x238>
    a99c:	2400ca36 	bltu	r4,r16,acc8 <__udivdi3+0x560>
    a9a0:	102d883a 	mov	r22,r2
    a9a4:	2421c83a 	sub	r16,r4,r16
    a9a8:	a80b883a 	mov	r5,r21
    a9ac:	8009883a 	mov	r4,r16
    a9b0:	d8c00015 	stw	r3,0(sp)
    a9b4:	000b3740 	call	b374 <__umodsi3>
    a9b8:	1027883a 	mov	r19,r2
    a9bc:	a80b883a 	mov	r5,r21
    a9c0:	8009883a 	mov	r4,r16
    a9c4:	000b3100 	call	b310 <__udivsi3>
    a9c8:	9826943a 	slli	r19,r19,16
    a9cc:	1529383a 	mul	r20,r2,r20
    a9d0:	94bfffcc 	andi	r18,r18,65535
    a9d4:	94e4b03a 	or	r18,r18,r19
    a9d8:	d8c00017 	ldw	r3,0(sp)
    a9dc:	9500052e 	bgeu	r18,r20,a9f4 <__udivdi3+0x28c>
    a9e0:	8ca5883a 	add	r18,r17,r18
    a9e4:	113fffc4 	addi	r4,r2,-1
    a9e8:	94409736 	bltu	r18,r17,ac48 <__udivdi3+0x4e0>
    a9ec:	9500962e 	bgeu	r18,r20,ac48 <__udivdi3+0x4e0>
    a9f0:	10bfff84 	addi	r2,r2,-2
    a9f4:	b00c943a 	slli	r6,r22,16
    a9f8:	3084b03a 	or	r2,r6,r2
    a9fc:	00000206 	br	aa08 <__udivdi3+0x2a0>
    aa00:	0007883a 	mov	r3,zero
    aa04:	0005883a 	mov	r2,zero
    aa08:	dfc00a17 	ldw	ra,40(sp)
    aa0c:	df000917 	ldw	fp,36(sp)
    aa10:	ddc00817 	ldw	r23,32(sp)
    aa14:	dd800717 	ldw	r22,28(sp)
    aa18:	dd400617 	ldw	r21,24(sp)
    aa1c:	dd000517 	ldw	r20,20(sp)
    aa20:	dcc00417 	ldw	r19,16(sp)
    aa24:	dc800317 	ldw	r18,12(sp)
    aa28:	dc400217 	ldw	r17,8(sp)
    aa2c:	dc000117 	ldw	r16,4(sp)
    aa30:	dec00b04 	addi	sp,sp,44
    aa34:	f800283a 	ret
    aa38:	00803fc4 	movi	r2,255
    aa3c:	11c5803a 	cmpltu	r2,r2,r7
    aa40:	100490fa 	slli	r2,r2,3
    aa44:	003f9e06 	br	a8c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a8c0>
    aa48:	00803fc4 	movi	r2,255
    aa4c:	1445803a 	cmpltu	r2,r2,r17
    aa50:	100490fa 	slli	r2,r2,3
    aa54:	003fb206 	br	a920 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a920>
    aa58:	00804034 	movhi	r2,256
    aa5c:	10bfffc4 	addi	r2,r2,-1
    aa60:	11808836 	bltu	r2,r6,ac84 <__udivdi3+0x51c>
    aa64:	00800404 	movi	r2,16
    aa68:	003f5606 	br	a7c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a7c4>
    aa6c:	30aed83a 	srl	r23,r6,r2
    aa70:	3d4e983a 	sll	r7,r7,r21
    aa74:	80acd83a 	srl	r22,r16,r2
    aa78:	9884d83a 	srl	r2,r19,r2
    aa7c:	3deeb03a 	or	r23,r7,r23
    aa80:	b824d43a 	srli	r18,r23,16
    aa84:	8560983a 	sll	r16,r16,r21
    aa88:	b009883a 	mov	r4,r22
    aa8c:	900b883a 	mov	r5,r18
    aa90:	3568983a 	sll	r20,r6,r21
    aa94:	1420b03a 	or	r16,r2,r16
    aa98:	000b3740 	call	b374 <__umodsi3>
    aa9c:	b009883a 	mov	r4,r22
    aaa0:	900b883a 	mov	r5,r18
    aaa4:	1023883a 	mov	r17,r2
    aaa8:	000b3100 	call	b310 <__udivsi3>
    aaac:	8808943a 	slli	r4,r17,16
    aab0:	bf3fffcc 	andi	fp,r23,65535
    aab4:	8006d43a 	srli	r3,r16,16
    aab8:	e0a3383a 	mul	r17,fp,r2
    aabc:	100d883a 	mov	r6,r2
    aac0:	1906b03a 	or	r3,r3,r4
    aac4:	1c40042e 	bgeu	r3,r17,aad8 <__udivdi3+0x370>
    aac8:	1dc7883a 	add	r3,r3,r23
    aacc:	10bfffc4 	addi	r2,r2,-1
    aad0:	1dc0752e 	bgeu	r3,r23,aca8 <__udivdi3+0x540>
    aad4:	100d883a 	mov	r6,r2
    aad8:	1c63c83a 	sub	r17,r3,r17
    aadc:	900b883a 	mov	r5,r18
    aae0:	8809883a 	mov	r4,r17
    aae4:	d9800015 	stw	r6,0(sp)
    aae8:	000b3740 	call	b374 <__umodsi3>
    aaec:	102d883a 	mov	r22,r2
    aaf0:	8809883a 	mov	r4,r17
    aaf4:	900b883a 	mov	r5,r18
    aaf8:	000b3100 	call	b310 <__udivsi3>
    aafc:	b02c943a 	slli	r22,r22,16
    ab00:	e089383a 	mul	r4,fp,r2
    ab04:	843fffcc 	andi	r16,r16,65535
    ab08:	85a0b03a 	or	r16,r16,r22
    ab0c:	d9800017 	ldw	r6,0(sp)
    ab10:	8100042e 	bgeu	r16,r4,ab24 <__udivdi3+0x3bc>
    ab14:	85e1883a 	add	r16,r16,r23
    ab18:	10ffffc4 	addi	r3,r2,-1
    ab1c:	85c05e2e 	bgeu	r16,r23,ac98 <__udivdi3+0x530>
    ab20:	1805883a 	mov	r2,r3
    ab24:	300c943a 	slli	r6,r6,16
    ab28:	a17fffcc 	andi	r5,r20,65535
    ab2c:	a028d43a 	srli	r20,r20,16
    ab30:	3084b03a 	or	r2,r6,r2
    ab34:	10ffffcc 	andi	r3,r2,65535
    ab38:	100cd43a 	srli	r6,r2,16
    ab3c:	194f383a 	mul	r7,r3,r5
    ab40:	1d07383a 	mul	r3,r3,r20
    ab44:	314b383a 	mul	r5,r6,r5
    ab48:	3810d43a 	srli	r8,r7,16
    ab4c:	8121c83a 	sub	r16,r16,r4
    ab50:	1947883a 	add	r3,r3,r5
    ab54:	40c7883a 	add	r3,r8,r3
    ab58:	350d383a 	mul	r6,r6,r20
    ab5c:	1940022e 	bgeu	r3,r5,ab68 <__udivdi3+0x400>
    ab60:	01000074 	movhi	r4,1
    ab64:	310d883a 	add	r6,r6,r4
    ab68:	1828d43a 	srli	r20,r3,16
    ab6c:	a18d883a 	add	r6,r20,r6
    ab70:	81803e36 	bltu	r16,r6,ac6c <__udivdi3+0x504>
    ab74:	81803826 	beq	r16,r6,ac58 <__udivdi3+0x4f0>
    ab78:	0007883a 	mov	r3,zero
    ab7c:	003fa206 	br	aa08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700aa08>
    ab80:	88e2983a 	sll	r17,r17,r3
    ab84:	80a8d83a 	srl	r20,r16,r2
    ab88:	80e0983a 	sll	r16,r16,r3
    ab8c:	882ad43a 	srli	r21,r17,16
    ab90:	9884d83a 	srl	r2,r19,r2
    ab94:	a009883a 	mov	r4,r20
    ab98:	a80b883a 	mov	r5,r21
    ab9c:	142eb03a 	or	r23,r2,r16
    aba0:	98e4983a 	sll	r18,r19,r3
    aba4:	000b3740 	call	b374 <__umodsi3>
    aba8:	a009883a 	mov	r4,r20
    abac:	a80b883a 	mov	r5,r21
    abb0:	1021883a 	mov	r16,r2
    abb4:	000b3100 	call	b310 <__udivsi3>
    abb8:	1039883a 	mov	fp,r2
    abbc:	8d3fffcc 	andi	r20,r17,65535
    abc0:	8020943a 	slli	r16,r16,16
    abc4:	b804d43a 	srli	r2,r23,16
    abc8:	a72d383a 	mul	r22,r20,fp
    abcc:	1404b03a 	or	r2,r2,r16
    abd0:	1580062e 	bgeu	r2,r22,abec <__udivdi3+0x484>
    abd4:	1445883a 	add	r2,r2,r17
    abd8:	e0ffffc4 	addi	r3,fp,-1
    abdc:	14403836 	bltu	r2,r17,acc0 <__udivdi3+0x558>
    abe0:	1580372e 	bgeu	r2,r22,acc0 <__udivdi3+0x558>
    abe4:	e73fff84 	addi	fp,fp,-2
    abe8:	1445883a 	add	r2,r2,r17
    abec:	15adc83a 	sub	r22,r2,r22
    abf0:	a80b883a 	mov	r5,r21
    abf4:	b009883a 	mov	r4,r22
    abf8:	000b3740 	call	b374 <__umodsi3>
    abfc:	1027883a 	mov	r19,r2
    ac00:	b009883a 	mov	r4,r22
    ac04:	a80b883a 	mov	r5,r21
    ac08:	000b3100 	call	b310 <__udivsi3>
    ac0c:	9826943a 	slli	r19,r19,16
    ac10:	a0a1383a 	mul	r16,r20,r2
    ac14:	b93fffcc 	andi	r4,r23,65535
    ac18:	24c8b03a 	or	r4,r4,r19
    ac1c:	2400062e 	bgeu	r4,r16,ac38 <__udivdi3+0x4d0>
    ac20:	2449883a 	add	r4,r4,r17
    ac24:	10ffffc4 	addi	r3,r2,-1
    ac28:	24402336 	bltu	r4,r17,acb8 <__udivdi3+0x550>
    ac2c:	2400222e 	bgeu	r4,r16,acb8 <__udivdi3+0x550>
    ac30:	10bfff84 	addi	r2,r2,-2
    ac34:	2449883a 	add	r4,r4,r17
    ac38:	e038943a 	slli	fp,fp,16
    ac3c:	2421c83a 	sub	r16,r4,r16
    ac40:	e086b03a 	or	r3,fp,r2
    ac44:	003f4306 	br	a954 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a954>
    ac48:	2005883a 	mov	r2,r4
    ac4c:	003f6906 	br	a9f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a9f4>
    ac50:	1805883a 	mov	r2,r3
    ac54:	003f0f06 	br	a894 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a894>
    ac58:	1806943a 	slli	r3,r3,16
    ac5c:	9d66983a 	sll	r19,r19,r21
    ac60:	39ffffcc 	andi	r7,r7,65535
    ac64:	19c7883a 	add	r3,r3,r7
    ac68:	98ffc32e 	bgeu	r19,r3,ab78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ab78>
    ac6c:	10bfffc4 	addi	r2,r2,-1
    ac70:	003fc106 	br	ab78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ab78>
    ac74:	00800604 	movi	r2,24
    ac78:	003f1106 	br	a8c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a8c0>
    ac7c:	00800604 	movi	r2,24
    ac80:	003f2706 	br	a920 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a920>
    ac84:	00800604 	movi	r2,24
    ac88:	003ece06 	br	a7c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a7c4>
    ac8c:	0007883a 	mov	r3,zero
    ac90:	00800044 	movi	r2,1
    ac94:	003f5c06 	br	aa08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700aa08>
    ac98:	813fa12e 	bgeu	r16,r4,ab20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ab20>
    ac9c:	10bfff84 	addi	r2,r2,-2
    aca0:	85e1883a 	add	r16,r16,r23
    aca4:	003f9f06 	br	ab24 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ab24>
    aca8:	1c7f8a2e 	bgeu	r3,r17,aad4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700aad4>
    acac:	31bfff84 	addi	r6,r6,-2
    acb0:	1dc7883a 	add	r3,r3,r23
    acb4:	003f8806 	br	aad8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700aad8>
    acb8:	1805883a 	mov	r2,r3
    acbc:	003fde06 	br	ac38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ac38>
    acc0:	1839883a 	mov	fp,r3
    acc4:	003fc906 	br	abec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700abec>
    acc8:	b5bfff84 	addi	r22,r22,-2
    accc:	2449883a 	add	r4,r4,r17
    acd0:	003f3406 	br	a9a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a9a4>
    acd4:	b5bfff84 	addi	r22,r22,-2
    acd8:	1445883a 	add	r2,r2,r17
    acdc:	003edb06 	br	a84c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a84c>

0000ace0 <__umoddi3>:
    ace0:	defff404 	addi	sp,sp,-48
    ace4:	df000a15 	stw	fp,40(sp)
    ace8:	dc400315 	stw	r17,12(sp)
    acec:	dc000215 	stw	r16,8(sp)
    acf0:	dfc00b15 	stw	ra,44(sp)
    acf4:	ddc00915 	stw	r23,36(sp)
    acf8:	dd800815 	stw	r22,32(sp)
    acfc:	dd400715 	stw	r21,28(sp)
    ad00:	dd000615 	stw	r20,24(sp)
    ad04:	dcc00515 	stw	r19,20(sp)
    ad08:	dc800415 	stw	r18,16(sp)
    ad0c:	2021883a 	mov	r16,r4
    ad10:	2823883a 	mov	r17,r5
    ad14:	2839883a 	mov	fp,r5
    ad18:	38003c1e 	bne	r7,zero,ae0c <__umoddi3+0x12c>
    ad1c:	3027883a 	mov	r19,r6
    ad20:	2029883a 	mov	r20,r4
    ad24:	2980512e 	bgeu	r5,r6,ae6c <__umoddi3+0x18c>
    ad28:	00bfffd4 	movui	r2,65535
    ad2c:	11809a36 	bltu	r2,r6,af98 <__umoddi3+0x2b8>
    ad30:	01003fc4 	movi	r4,255
    ad34:	2189803a 	cmpltu	r4,r4,r6
    ad38:	200890fa 	slli	r4,r4,3
    ad3c:	3104d83a 	srl	r2,r6,r4
    ad40:	00c00074 	movhi	r3,1
    ad44:	18dced04 	addi	r3,r3,29620
    ad48:	1885883a 	add	r2,r3,r2
    ad4c:	10c00003 	ldbu	r3,0(r2)
    ad50:	00800804 	movi	r2,32
    ad54:	1909883a 	add	r4,r3,r4
    ad58:	1125c83a 	sub	r18,r2,r4
    ad5c:	90000526 	beq	r18,zero,ad74 <__umoddi3+0x94>
    ad60:	8ca2983a 	sll	r17,r17,r18
    ad64:	8108d83a 	srl	r4,r16,r4
    ad68:	34a6983a 	sll	r19,r6,r18
    ad6c:	84a8983a 	sll	r20,r16,r18
    ad70:	2478b03a 	or	fp,r4,r17
    ad74:	982ed43a 	srli	r23,r19,16
    ad78:	e009883a 	mov	r4,fp
    ad7c:	9dbfffcc 	andi	r22,r19,65535
    ad80:	b80b883a 	mov	r5,r23
    ad84:	000b3740 	call	b374 <__umodsi3>
    ad88:	e009883a 	mov	r4,fp
    ad8c:	b80b883a 	mov	r5,r23
    ad90:	102b883a 	mov	r21,r2
    ad94:	000b3100 	call	b310 <__udivsi3>
    ad98:	a806943a 	slli	r3,r21,16
    ad9c:	a008d43a 	srli	r4,r20,16
    ada0:	b085383a 	mul	r2,r22,r2
    ada4:	20c8b03a 	or	r4,r4,r3
    ada8:	2080032e 	bgeu	r4,r2,adb8 <__umoddi3+0xd8>
    adac:	24c9883a 	add	r4,r4,r19
    adb0:	24c00136 	bltu	r4,r19,adb8 <__umoddi3+0xd8>
    adb4:	20811036 	bltu	r4,r2,b1f8 <__umoddi3+0x518>
    adb8:	20abc83a 	sub	r21,r4,r2
    adbc:	b80b883a 	mov	r5,r23
    adc0:	a809883a 	mov	r4,r21
    adc4:	000b3740 	call	b374 <__umodsi3>
    adc8:	1023883a 	mov	r17,r2
    adcc:	b80b883a 	mov	r5,r23
    add0:	a809883a 	mov	r4,r21
    add4:	000b3100 	call	b310 <__udivsi3>
    add8:	8822943a 	slli	r17,r17,16
    addc:	b085383a 	mul	r2,r22,r2
    ade0:	a0ffffcc 	andi	r3,r20,65535
    ade4:	1c46b03a 	or	r3,r3,r17
    ade8:	1880042e 	bgeu	r3,r2,adfc <__umoddi3+0x11c>
    adec:	1cc7883a 	add	r3,r3,r19
    adf0:	1cc00236 	bltu	r3,r19,adfc <__umoddi3+0x11c>
    adf4:	1880012e 	bgeu	r3,r2,adfc <__umoddi3+0x11c>
    adf8:	1cc7883a 	add	r3,r3,r19
    adfc:	1885c83a 	sub	r2,r3,r2
    ae00:	1484d83a 	srl	r2,r2,r18
    ae04:	0007883a 	mov	r3,zero
    ae08:	00004f06 	br	af48 <__umoddi3+0x268>
    ae0c:	29c04c36 	bltu	r5,r7,af40 <__umoddi3+0x260>
    ae10:	00bfffd4 	movui	r2,65535
    ae14:	11c0582e 	bgeu	r2,r7,af78 <__umoddi3+0x298>
    ae18:	00804034 	movhi	r2,256
    ae1c:	10bfffc4 	addi	r2,r2,-1
    ae20:	11c0e736 	bltu	r2,r7,b1c0 <__umoddi3+0x4e0>
    ae24:	01000404 	movi	r4,16
    ae28:	3904d83a 	srl	r2,r7,r4
    ae2c:	00c00074 	movhi	r3,1
    ae30:	18dced04 	addi	r3,r3,29620
    ae34:	1885883a 	add	r2,r3,r2
    ae38:	14c00003 	ldbu	r19,0(r2)
    ae3c:	00c00804 	movi	r3,32
    ae40:	9927883a 	add	r19,r19,r4
    ae44:	1ce9c83a 	sub	r20,r3,r19
    ae48:	a000581e 	bne	r20,zero,afac <__umoddi3+0x2cc>
    ae4c:	3c400136 	bltu	r7,r17,ae54 <__umoddi3+0x174>
    ae50:	8180eb36 	bltu	r16,r6,b200 <__umoddi3+0x520>
    ae54:	8185c83a 	sub	r2,r16,r6
    ae58:	89e3c83a 	sub	r17,r17,r7
    ae5c:	8089803a 	cmpltu	r4,r16,r2
    ae60:	8939c83a 	sub	fp,r17,r4
    ae64:	e007883a 	mov	r3,fp
    ae68:	00003706 	br	af48 <__umoddi3+0x268>
    ae6c:	3000041e 	bne	r6,zero,ae80 <__umoddi3+0x1a0>
    ae70:	000b883a 	mov	r5,zero
    ae74:	01000044 	movi	r4,1
    ae78:	000b3100 	call	b310 <__udivsi3>
    ae7c:	1027883a 	mov	r19,r2
    ae80:	00bfffd4 	movui	r2,65535
    ae84:	14c0402e 	bgeu	r2,r19,af88 <__umoddi3+0x2a8>
    ae88:	00804034 	movhi	r2,256
    ae8c:	10bfffc4 	addi	r2,r2,-1
    ae90:	14c0cd36 	bltu	r2,r19,b1c8 <__umoddi3+0x4e8>
    ae94:	00800404 	movi	r2,16
    ae98:	9886d83a 	srl	r3,r19,r2
    ae9c:	01000074 	movhi	r4,1
    aea0:	211ced04 	addi	r4,r4,29620
    aea4:	20c7883a 	add	r3,r4,r3
    aea8:	18c00003 	ldbu	r3,0(r3)
    aeac:	1887883a 	add	r3,r3,r2
    aeb0:	00800804 	movi	r2,32
    aeb4:	10e5c83a 	sub	r18,r2,r3
    aeb8:	9000901e 	bne	r18,zero,b0fc <__umoddi3+0x41c>
    aebc:	982cd43a 	srli	r22,r19,16
    aec0:	8ce3c83a 	sub	r17,r17,r19
    aec4:	9d7fffcc 	andi	r21,r19,65535
    aec8:	b00b883a 	mov	r5,r22
    aecc:	8809883a 	mov	r4,r17
    aed0:	000b3740 	call	b374 <__umodsi3>
    aed4:	8809883a 	mov	r4,r17
    aed8:	b00b883a 	mov	r5,r22
    aedc:	1021883a 	mov	r16,r2
    aee0:	000b3100 	call	b310 <__udivsi3>
    aee4:	8006943a 	slli	r3,r16,16
    aee8:	a008d43a 	srli	r4,r20,16
    aeec:	1545383a 	mul	r2,r2,r21
    aef0:	20c8b03a 	or	r4,r4,r3
    aef4:	2080042e 	bgeu	r4,r2,af08 <__umoddi3+0x228>
    aef8:	24c9883a 	add	r4,r4,r19
    aefc:	24c00236 	bltu	r4,r19,af08 <__umoddi3+0x228>
    af00:	2080012e 	bgeu	r4,r2,af08 <__umoddi3+0x228>
    af04:	24c9883a 	add	r4,r4,r19
    af08:	20a1c83a 	sub	r16,r4,r2
    af0c:	b00b883a 	mov	r5,r22
    af10:	8009883a 	mov	r4,r16
    af14:	000b3740 	call	b374 <__umodsi3>
    af18:	1023883a 	mov	r17,r2
    af1c:	b00b883a 	mov	r5,r22
    af20:	8009883a 	mov	r4,r16
    af24:	000b3100 	call	b310 <__udivsi3>
    af28:	8822943a 	slli	r17,r17,16
    af2c:	1545383a 	mul	r2,r2,r21
    af30:	a53fffcc 	andi	r20,r20,65535
    af34:	a446b03a 	or	r3,r20,r17
    af38:	18bfb02e 	bgeu	r3,r2,adfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700adfc>
    af3c:	003fab06 	br	adec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700adec>
    af40:	2005883a 	mov	r2,r4
    af44:	2807883a 	mov	r3,r5
    af48:	dfc00b17 	ldw	ra,44(sp)
    af4c:	df000a17 	ldw	fp,40(sp)
    af50:	ddc00917 	ldw	r23,36(sp)
    af54:	dd800817 	ldw	r22,32(sp)
    af58:	dd400717 	ldw	r21,28(sp)
    af5c:	dd000617 	ldw	r20,24(sp)
    af60:	dcc00517 	ldw	r19,20(sp)
    af64:	dc800417 	ldw	r18,16(sp)
    af68:	dc400317 	ldw	r17,12(sp)
    af6c:	dc000217 	ldw	r16,8(sp)
    af70:	dec00c04 	addi	sp,sp,48
    af74:	f800283a 	ret
    af78:	04c03fc4 	movi	r19,255
    af7c:	99c9803a 	cmpltu	r4,r19,r7
    af80:	200890fa 	slli	r4,r4,3
    af84:	003fa806 	br	ae28 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ae28>
    af88:	00803fc4 	movi	r2,255
    af8c:	14c5803a 	cmpltu	r2,r2,r19
    af90:	100490fa 	slli	r2,r2,3
    af94:	003fc006 	br	ae98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ae98>
    af98:	00804034 	movhi	r2,256
    af9c:	10bfffc4 	addi	r2,r2,-1
    afa0:	11808b36 	bltu	r2,r6,b1d0 <__umoddi3+0x4f0>
    afa4:	01000404 	movi	r4,16
    afa8:	003f6406 	br	ad3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ad3c>
    afac:	34c4d83a 	srl	r2,r6,r19
    afb0:	3d0e983a 	sll	r7,r7,r20
    afb4:	8cf8d83a 	srl	fp,r17,r19
    afb8:	8d10983a 	sll	r8,r17,r20
    afbc:	38aab03a 	or	r21,r7,r2
    afc0:	a82cd43a 	srli	r22,r21,16
    afc4:	84e2d83a 	srl	r17,r16,r19
    afc8:	e009883a 	mov	r4,fp
    afcc:	b00b883a 	mov	r5,r22
    afd0:	8a22b03a 	or	r17,r17,r8
    afd4:	3524983a 	sll	r18,r6,r20
    afd8:	000b3740 	call	b374 <__umodsi3>
    afdc:	e009883a 	mov	r4,fp
    afe0:	b00b883a 	mov	r5,r22
    afe4:	102f883a 	mov	r23,r2
    afe8:	000b3100 	call	b310 <__udivsi3>
    afec:	100d883a 	mov	r6,r2
    aff0:	b808943a 	slli	r4,r23,16
    aff4:	aa3fffcc 	andi	r8,r21,65535
    aff8:	8804d43a 	srli	r2,r17,16
    affc:	41af383a 	mul	r23,r8,r6
    b000:	8520983a 	sll	r16,r16,r20
    b004:	1104b03a 	or	r2,r2,r4
    b008:	15c0042e 	bgeu	r2,r23,b01c <__umoddi3+0x33c>
    b00c:	1545883a 	add	r2,r2,r21
    b010:	30ffffc4 	addi	r3,r6,-1
    b014:	1540742e 	bgeu	r2,r21,b1e8 <__umoddi3+0x508>
    b018:	180d883a 	mov	r6,r3
    b01c:	15efc83a 	sub	r23,r2,r23
    b020:	b00b883a 	mov	r5,r22
    b024:	b809883a 	mov	r4,r23
    b028:	d9800115 	stw	r6,4(sp)
    b02c:	da000015 	stw	r8,0(sp)
    b030:	000b3740 	call	b374 <__umodsi3>
    b034:	b00b883a 	mov	r5,r22
    b038:	b809883a 	mov	r4,r23
    b03c:	1039883a 	mov	fp,r2
    b040:	000b3100 	call	b310 <__udivsi3>
    b044:	da000017 	ldw	r8,0(sp)
    b048:	e038943a 	slli	fp,fp,16
    b04c:	100b883a 	mov	r5,r2
    b050:	4089383a 	mul	r4,r8,r2
    b054:	8a3fffcc 	andi	r8,r17,65535
    b058:	4710b03a 	or	r8,r8,fp
    b05c:	d9800117 	ldw	r6,4(sp)
    b060:	4100042e 	bgeu	r8,r4,b074 <__umoddi3+0x394>
    b064:	4551883a 	add	r8,r8,r21
    b068:	10bfffc4 	addi	r2,r2,-1
    b06c:	45405a2e 	bgeu	r8,r21,b1d8 <__umoddi3+0x4f8>
    b070:	100b883a 	mov	r5,r2
    b074:	300c943a 	slli	r6,r6,16
    b078:	91ffffcc 	andi	r7,r18,65535
    b07c:	9004d43a 	srli	r2,r18,16
    b080:	314cb03a 	or	r6,r6,r5
    b084:	317fffcc 	andi	r5,r6,65535
    b088:	300cd43a 	srli	r6,r6,16
    b08c:	29d3383a 	mul	r9,r5,r7
    b090:	288b383a 	mul	r5,r5,r2
    b094:	31cf383a 	mul	r7,r6,r7
    b098:	4806d43a 	srli	r3,r9,16
    b09c:	4111c83a 	sub	r8,r8,r4
    b0a0:	29cb883a 	add	r5,r5,r7
    b0a4:	194b883a 	add	r5,r3,r5
    b0a8:	3085383a 	mul	r2,r6,r2
    b0ac:	29c0022e 	bgeu	r5,r7,b0b8 <__umoddi3+0x3d8>
    b0b0:	00c00074 	movhi	r3,1
    b0b4:	10c5883a 	add	r2,r2,r3
    b0b8:	2808d43a 	srli	r4,r5,16
    b0bc:	280a943a 	slli	r5,r5,16
    b0c0:	4a7fffcc 	andi	r9,r9,65535
    b0c4:	2085883a 	add	r2,r4,r2
    b0c8:	2a4b883a 	add	r5,r5,r9
    b0cc:	40803636 	bltu	r8,r2,b1a8 <__umoddi3+0x4c8>
    b0d0:	40804d26 	beq	r8,r2,b208 <__umoddi3+0x528>
    b0d4:	4089c83a 	sub	r4,r8,r2
    b0d8:	280f883a 	mov	r7,r5
    b0dc:	81cfc83a 	sub	r7,r16,r7
    b0e0:	81c7803a 	cmpltu	r3,r16,r7
    b0e4:	20c7c83a 	sub	r3,r4,r3
    b0e8:	1cc4983a 	sll	r2,r3,r19
    b0ec:	3d0ed83a 	srl	r7,r7,r20
    b0f0:	1d06d83a 	srl	r3,r3,r20
    b0f4:	11c4b03a 	or	r2,r2,r7
    b0f8:	003f9306 	br	af48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700af48>
    b0fc:	9ca6983a 	sll	r19,r19,r18
    b100:	88e8d83a 	srl	r20,r17,r3
    b104:	80c4d83a 	srl	r2,r16,r3
    b108:	982cd43a 	srli	r22,r19,16
    b10c:	8ca2983a 	sll	r17,r17,r18
    b110:	a009883a 	mov	r4,r20
    b114:	b00b883a 	mov	r5,r22
    b118:	1478b03a 	or	fp,r2,r17
    b11c:	000b3740 	call	b374 <__umodsi3>
    b120:	a009883a 	mov	r4,r20
    b124:	b00b883a 	mov	r5,r22
    b128:	1023883a 	mov	r17,r2
    b12c:	000b3100 	call	b310 <__udivsi3>
    b130:	9d7fffcc 	andi	r21,r19,65535
    b134:	880a943a 	slli	r5,r17,16
    b138:	e008d43a 	srli	r4,fp,16
    b13c:	a885383a 	mul	r2,r21,r2
    b140:	84a8983a 	sll	r20,r16,r18
    b144:	2148b03a 	or	r4,r4,r5
    b148:	2080042e 	bgeu	r4,r2,b15c <__umoddi3+0x47c>
    b14c:	24c9883a 	add	r4,r4,r19
    b150:	24c00236 	bltu	r4,r19,b15c <__umoddi3+0x47c>
    b154:	2080012e 	bgeu	r4,r2,b15c <__umoddi3+0x47c>
    b158:	24c9883a 	add	r4,r4,r19
    b15c:	20a3c83a 	sub	r17,r4,r2
    b160:	b00b883a 	mov	r5,r22
    b164:	8809883a 	mov	r4,r17
    b168:	000b3740 	call	b374 <__umodsi3>
    b16c:	102f883a 	mov	r23,r2
    b170:	8809883a 	mov	r4,r17
    b174:	b00b883a 	mov	r5,r22
    b178:	000b3100 	call	b310 <__udivsi3>
    b17c:	b82e943a 	slli	r23,r23,16
    b180:	a885383a 	mul	r2,r21,r2
    b184:	e13fffcc 	andi	r4,fp,65535
    b188:	25c8b03a 	or	r4,r4,r23
    b18c:	2080042e 	bgeu	r4,r2,b1a0 <__umoddi3+0x4c0>
    b190:	24c9883a 	add	r4,r4,r19
    b194:	24c00236 	bltu	r4,r19,b1a0 <__umoddi3+0x4c0>
    b198:	2080012e 	bgeu	r4,r2,b1a0 <__umoddi3+0x4c0>
    b19c:	24c9883a 	add	r4,r4,r19
    b1a0:	20a3c83a 	sub	r17,r4,r2
    b1a4:	003f4806 	br	aec8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700aec8>
    b1a8:	2c8fc83a 	sub	r7,r5,r18
    b1ac:	1545c83a 	sub	r2,r2,r21
    b1b0:	29cb803a 	cmpltu	r5,r5,r7
    b1b4:	1145c83a 	sub	r2,r2,r5
    b1b8:	4089c83a 	sub	r4,r8,r2
    b1bc:	003fc706 	br	b0dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b0dc>
    b1c0:	01000604 	movi	r4,24
    b1c4:	003f1806 	br	ae28 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ae28>
    b1c8:	00800604 	movi	r2,24
    b1cc:	003f3206 	br	ae98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ae98>
    b1d0:	01000604 	movi	r4,24
    b1d4:	003ed906 	br	ad3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ad3c>
    b1d8:	413fa52e 	bgeu	r8,r4,b070 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b070>
    b1dc:	297fff84 	addi	r5,r5,-2
    b1e0:	4551883a 	add	r8,r8,r21
    b1e4:	003fa306 	br	b074 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b074>
    b1e8:	15ff8b2e 	bgeu	r2,r23,b018 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b018>
    b1ec:	31bfff84 	addi	r6,r6,-2
    b1f0:	1545883a 	add	r2,r2,r21
    b1f4:	003f8906 	br	b01c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b01c>
    b1f8:	24c9883a 	add	r4,r4,r19
    b1fc:	003eee06 	br	adb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700adb8>
    b200:	8005883a 	mov	r2,r16
    b204:	003f1706 	br	ae64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ae64>
    b208:	817fe736 	bltu	r16,r5,b1a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b1a8>
    b20c:	280f883a 	mov	r7,r5
    b210:	0009883a 	mov	r4,zero
    b214:	003fb106 	br	b0dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b0dc>

0000b218 <__divsi3>:
    b218:	20001b16 	blt	r4,zero,b288 <__divsi3+0x70>
    b21c:	000f883a 	mov	r7,zero
    b220:	28001616 	blt	r5,zero,b27c <__divsi3+0x64>
    b224:	200d883a 	mov	r6,r4
    b228:	29001a2e 	bgeu	r5,r4,b294 <__divsi3+0x7c>
    b22c:	00800804 	movi	r2,32
    b230:	00c00044 	movi	r3,1
    b234:	00000106 	br	b23c <__divsi3+0x24>
    b238:	10000d26 	beq	r2,zero,b270 <__divsi3+0x58>
    b23c:	294b883a 	add	r5,r5,r5
    b240:	10bfffc4 	addi	r2,r2,-1
    b244:	18c7883a 	add	r3,r3,r3
    b248:	293ffb36 	bltu	r5,r4,b238 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b238>
    b24c:	0005883a 	mov	r2,zero
    b250:	18000726 	beq	r3,zero,b270 <__divsi3+0x58>
    b254:	0005883a 	mov	r2,zero
    b258:	31400236 	bltu	r6,r5,b264 <__divsi3+0x4c>
    b25c:	314dc83a 	sub	r6,r6,r5
    b260:	10c4b03a 	or	r2,r2,r3
    b264:	1806d07a 	srli	r3,r3,1
    b268:	280ad07a 	srli	r5,r5,1
    b26c:	183ffa1e 	bne	r3,zero,b258 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b258>
    b270:	38000126 	beq	r7,zero,b278 <__divsi3+0x60>
    b274:	0085c83a 	sub	r2,zero,r2
    b278:	f800283a 	ret
    b27c:	014bc83a 	sub	r5,zero,r5
    b280:	39c0005c 	xori	r7,r7,1
    b284:	003fe706 	br	b224 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b224>
    b288:	0109c83a 	sub	r4,zero,r4
    b28c:	01c00044 	movi	r7,1
    b290:	003fe306 	br	b220 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b220>
    b294:	00c00044 	movi	r3,1
    b298:	003fee06 	br	b254 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b254>

0000b29c <__modsi3>:
    b29c:	20001716 	blt	r4,zero,b2fc <__modsi3+0x60>
    b2a0:	000f883a 	mov	r7,zero
    b2a4:	2005883a 	mov	r2,r4
    b2a8:	28001216 	blt	r5,zero,b2f4 <__modsi3+0x58>
    b2ac:	2900162e 	bgeu	r5,r4,b308 <__modsi3+0x6c>
    b2b0:	01800804 	movi	r6,32
    b2b4:	00c00044 	movi	r3,1
    b2b8:	00000106 	br	b2c0 <__modsi3+0x24>
    b2bc:	30000a26 	beq	r6,zero,b2e8 <__modsi3+0x4c>
    b2c0:	294b883a 	add	r5,r5,r5
    b2c4:	31bfffc4 	addi	r6,r6,-1
    b2c8:	18c7883a 	add	r3,r3,r3
    b2cc:	293ffb36 	bltu	r5,r4,b2bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b2bc>
    b2d0:	18000526 	beq	r3,zero,b2e8 <__modsi3+0x4c>
    b2d4:	1806d07a 	srli	r3,r3,1
    b2d8:	11400136 	bltu	r2,r5,b2e0 <__modsi3+0x44>
    b2dc:	1145c83a 	sub	r2,r2,r5
    b2e0:	280ad07a 	srli	r5,r5,1
    b2e4:	183ffb1e 	bne	r3,zero,b2d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b2d4>
    b2e8:	38000126 	beq	r7,zero,b2f0 <__modsi3+0x54>
    b2ec:	0085c83a 	sub	r2,zero,r2
    b2f0:	f800283a 	ret
    b2f4:	014bc83a 	sub	r5,zero,r5
    b2f8:	003fec06 	br	b2ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b2ac>
    b2fc:	0109c83a 	sub	r4,zero,r4
    b300:	01c00044 	movi	r7,1
    b304:	003fe706 	br	b2a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b2a4>
    b308:	00c00044 	movi	r3,1
    b30c:	003ff106 	br	b2d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b2d4>

0000b310 <__udivsi3>:
    b310:	200d883a 	mov	r6,r4
    b314:	2900152e 	bgeu	r5,r4,b36c <__udivsi3+0x5c>
    b318:	28001416 	blt	r5,zero,b36c <__udivsi3+0x5c>
    b31c:	00800804 	movi	r2,32
    b320:	00c00044 	movi	r3,1
    b324:	00000206 	br	b330 <__udivsi3+0x20>
    b328:	10000e26 	beq	r2,zero,b364 <__udivsi3+0x54>
    b32c:	28000516 	blt	r5,zero,b344 <__udivsi3+0x34>
    b330:	294b883a 	add	r5,r5,r5
    b334:	10bfffc4 	addi	r2,r2,-1
    b338:	18c7883a 	add	r3,r3,r3
    b33c:	293ffa36 	bltu	r5,r4,b328 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b328>
    b340:	18000826 	beq	r3,zero,b364 <__udivsi3+0x54>
    b344:	0005883a 	mov	r2,zero
    b348:	31400236 	bltu	r6,r5,b354 <__udivsi3+0x44>
    b34c:	314dc83a 	sub	r6,r6,r5
    b350:	10c4b03a 	or	r2,r2,r3
    b354:	1806d07a 	srli	r3,r3,1
    b358:	280ad07a 	srli	r5,r5,1
    b35c:	183ffa1e 	bne	r3,zero,b348 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b348>
    b360:	f800283a 	ret
    b364:	0005883a 	mov	r2,zero
    b368:	f800283a 	ret
    b36c:	00c00044 	movi	r3,1
    b370:	003ff406 	br	b344 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b344>

0000b374 <__umodsi3>:
    b374:	2005883a 	mov	r2,r4
    b378:	2900122e 	bgeu	r5,r4,b3c4 <__umodsi3+0x50>
    b37c:	28001116 	blt	r5,zero,b3c4 <__umodsi3+0x50>
    b380:	01800804 	movi	r6,32
    b384:	00c00044 	movi	r3,1
    b388:	00000206 	br	b394 <__umodsi3+0x20>
    b38c:	30000c26 	beq	r6,zero,b3c0 <__umodsi3+0x4c>
    b390:	28000516 	blt	r5,zero,b3a8 <__umodsi3+0x34>
    b394:	294b883a 	add	r5,r5,r5
    b398:	31bfffc4 	addi	r6,r6,-1
    b39c:	18c7883a 	add	r3,r3,r3
    b3a0:	293ffa36 	bltu	r5,r4,b38c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b38c>
    b3a4:	18000626 	beq	r3,zero,b3c0 <__umodsi3+0x4c>
    b3a8:	1806d07a 	srli	r3,r3,1
    b3ac:	11400136 	bltu	r2,r5,b3b4 <__umodsi3+0x40>
    b3b0:	1145c83a 	sub	r2,r2,r5
    b3b4:	280ad07a 	srli	r5,r5,1
    b3b8:	183ffb1e 	bne	r3,zero,b3a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b3a8>
    b3bc:	f800283a 	ret
    b3c0:	f800283a 	ret
    b3c4:	00c00044 	movi	r3,1
    b3c8:	003ff706 	br	b3a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b3a8>

0000b3cc <__adddf3>:
    b3cc:	02c00434 	movhi	r11,16
    b3d0:	5affffc4 	addi	r11,r11,-1
    b3d4:	2806d7fa 	srli	r3,r5,31
    b3d8:	2ad4703a 	and	r10,r5,r11
    b3dc:	3ad2703a 	and	r9,r7,r11
    b3e0:	3804d53a 	srli	r2,r7,20
    b3e4:	3018d77a 	srli	r12,r6,29
    b3e8:	280ad53a 	srli	r5,r5,20
    b3ec:	501490fa 	slli	r10,r10,3
    b3f0:	2010d77a 	srli	r8,r4,29
    b3f4:	481290fa 	slli	r9,r9,3
    b3f8:	380ed7fa 	srli	r7,r7,31
    b3fc:	defffb04 	addi	sp,sp,-20
    b400:	dc800215 	stw	r18,8(sp)
    b404:	dc400115 	stw	r17,4(sp)
    b408:	dc000015 	stw	r16,0(sp)
    b40c:	dfc00415 	stw	ra,16(sp)
    b410:	dcc00315 	stw	r19,12(sp)
    b414:	1c803fcc 	andi	r18,r3,255
    b418:	2c01ffcc 	andi	r16,r5,2047
    b41c:	5210b03a 	or	r8,r10,r8
    b420:	202290fa 	slli	r17,r4,3
    b424:	1081ffcc 	andi	r2,r2,2047
    b428:	4b12b03a 	or	r9,r9,r12
    b42c:	300c90fa 	slli	r6,r6,3
    b430:	91c07526 	beq	r18,r7,b608 <__adddf3+0x23c>
    b434:	8087c83a 	sub	r3,r16,r2
    b438:	00c0ab0e 	bge	zero,r3,b6e8 <__adddf3+0x31c>
    b43c:	10002a1e 	bne	r2,zero,b4e8 <__adddf3+0x11c>
    b440:	4984b03a 	or	r2,r9,r6
    b444:	1000961e 	bne	r2,zero,b6a0 <__adddf3+0x2d4>
    b448:	888001cc 	andi	r2,r17,7
    b44c:	10000726 	beq	r2,zero,b46c <__adddf3+0xa0>
    b450:	888003cc 	andi	r2,r17,15
    b454:	00c00104 	movi	r3,4
    b458:	10c00426 	beq	r2,r3,b46c <__adddf3+0xa0>
    b45c:	88c7883a 	add	r3,r17,r3
    b460:	1c63803a 	cmpltu	r17,r3,r17
    b464:	4451883a 	add	r8,r8,r17
    b468:	1823883a 	mov	r17,r3
    b46c:	4080202c 	andhi	r2,r8,128
    b470:	10005926 	beq	r2,zero,b5d8 <__adddf3+0x20c>
    b474:	84000044 	addi	r16,r16,1
    b478:	0081ffc4 	movi	r2,2047
    b47c:	8080ba26 	beq	r16,r2,b768 <__adddf3+0x39c>
    b480:	00bfe034 	movhi	r2,65408
    b484:	10bfffc4 	addi	r2,r2,-1
    b488:	4090703a 	and	r8,r8,r2
    b48c:	4004977a 	slli	r2,r8,29
    b490:	4010927a 	slli	r8,r8,9
    b494:	8822d0fa 	srli	r17,r17,3
    b498:	8401ffcc 	andi	r16,r16,2047
    b49c:	4010d33a 	srli	r8,r8,12
    b4a0:	9007883a 	mov	r3,r18
    b4a4:	1444b03a 	or	r2,r2,r17
    b4a8:	8401ffcc 	andi	r16,r16,2047
    b4ac:	8020953a 	slli	r16,r16,20
    b4b0:	18c03fcc 	andi	r3,r3,255
    b4b4:	01000434 	movhi	r4,16
    b4b8:	213fffc4 	addi	r4,r4,-1
    b4bc:	180697fa 	slli	r3,r3,31
    b4c0:	4110703a 	and	r8,r8,r4
    b4c4:	4410b03a 	or	r8,r8,r16
    b4c8:	40c6b03a 	or	r3,r8,r3
    b4cc:	dfc00417 	ldw	ra,16(sp)
    b4d0:	dcc00317 	ldw	r19,12(sp)
    b4d4:	dc800217 	ldw	r18,8(sp)
    b4d8:	dc400117 	ldw	r17,4(sp)
    b4dc:	dc000017 	ldw	r16,0(sp)
    b4e0:	dec00504 	addi	sp,sp,20
    b4e4:	f800283a 	ret
    b4e8:	0081ffc4 	movi	r2,2047
    b4ec:	80bfd626 	beq	r16,r2,b448 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b448>
    b4f0:	4a402034 	orhi	r9,r9,128
    b4f4:	00800e04 	movi	r2,56
    b4f8:	10c09f16 	blt	r2,r3,b778 <__adddf3+0x3ac>
    b4fc:	008007c4 	movi	r2,31
    b500:	10c0c216 	blt	r2,r3,b80c <__adddf3+0x440>
    b504:	00800804 	movi	r2,32
    b508:	10c5c83a 	sub	r2,r2,r3
    b50c:	488a983a 	sll	r5,r9,r2
    b510:	30c8d83a 	srl	r4,r6,r3
    b514:	3084983a 	sll	r2,r6,r2
    b518:	48c6d83a 	srl	r3,r9,r3
    b51c:	290cb03a 	or	r6,r5,r4
    b520:	1004c03a 	cmpne	r2,r2,zero
    b524:	308cb03a 	or	r6,r6,r2
    b528:	898dc83a 	sub	r6,r17,r6
    b52c:	89a3803a 	cmpltu	r17,r17,r6
    b530:	40d1c83a 	sub	r8,r8,r3
    b534:	4451c83a 	sub	r8,r8,r17
    b538:	3023883a 	mov	r17,r6
    b53c:	4080202c 	andhi	r2,r8,128
    b540:	10002326 	beq	r2,zero,b5d0 <__adddf3+0x204>
    b544:	04c02034 	movhi	r19,128
    b548:	9cffffc4 	addi	r19,r19,-1
    b54c:	44e6703a 	and	r19,r8,r19
    b550:	98007626 	beq	r19,zero,b72c <__adddf3+0x360>
    b554:	9809883a 	mov	r4,r19
    b558:	000d9d00 	call	d9d0 <__clzsi2>
    b55c:	10fffe04 	addi	r3,r2,-8
    b560:	010007c4 	movi	r4,31
    b564:	20c07716 	blt	r4,r3,b744 <__adddf3+0x378>
    b568:	00800804 	movi	r2,32
    b56c:	10c5c83a 	sub	r2,r2,r3
    b570:	8884d83a 	srl	r2,r17,r2
    b574:	98d0983a 	sll	r8,r19,r3
    b578:	88e2983a 	sll	r17,r17,r3
    b57c:	1204b03a 	or	r2,r2,r8
    b580:	1c007416 	blt	r3,r16,b754 <__adddf3+0x388>
    b584:	1c21c83a 	sub	r16,r3,r16
    b588:	82000044 	addi	r8,r16,1
    b58c:	00c007c4 	movi	r3,31
    b590:	1a009116 	blt	r3,r8,b7d8 <__adddf3+0x40c>
    b594:	00c00804 	movi	r3,32
    b598:	1a07c83a 	sub	r3,r3,r8
    b59c:	8a08d83a 	srl	r4,r17,r8
    b5a0:	88e2983a 	sll	r17,r17,r3
    b5a4:	10c6983a 	sll	r3,r2,r3
    b5a8:	1210d83a 	srl	r8,r2,r8
    b5ac:	8804c03a 	cmpne	r2,r17,zero
    b5b0:	1906b03a 	or	r3,r3,r4
    b5b4:	18a2b03a 	or	r17,r3,r2
    b5b8:	0021883a 	mov	r16,zero
    b5bc:	003fa206 	br	b448 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b448>
    b5c0:	1890b03a 	or	r8,r3,r2
    b5c4:	40017d26 	beq	r8,zero,bbbc <__adddf3+0x7f0>
    b5c8:	1011883a 	mov	r8,r2
    b5cc:	1823883a 	mov	r17,r3
    b5d0:	888001cc 	andi	r2,r17,7
    b5d4:	103f9e1e 	bne	r2,zero,b450 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b450>
    b5d8:	4004977a 	slli	r2,r8,29
    b5dc:	8822d0fa 	srli	r17,r17,3
    b5e0:	4010d0fa 	srli	r8,r8,3
    b5e4:	9007883a 	mov	r3,r18
    b5e8:	1444b03a 	or	r2,r2,r17
    b5ec:	0101ffc4 	movi	r4,2047
    b5f0:	81002426 	beq	r16,r4,b684 <__adddf3+0x2b8>
    b5f4:	8120703a 	and	r16,r16,r4
    b5f8:	01000434 	movhi	r4,16
    b5fc:	213fffc4 	addi	r4,r4,-1
    b600:	4110703a 	and	r8,r8,r4
    b604:	003fa806 	br	b4a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b4a8>
    b608:	8089c83a 	sub	r4,r16,r2
    b60c:	01005e0e 	bge	zero,r4,b788 <__adddf3+0x3bc>
    b610:	10002b26 	beq	r2,zero,b6c0 <__adddf3+0x2f4>
    b614:	0081ffc4 	movi	r2,2047
    b618:	80bf8b26 	beq	r16,r2,b448 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b448>
    b61c:	4a402034 	orhi	r9,r9,128
    b620:	00800e04 	movi	r2,56
    b624:	1100a40e 	bge	r2,r4,b8b8 <__adddf3+0x4ec>
    b628:	498cb03a 	or	r6,r9,r6
    b62c:	300ac03a 	cmpne	r5,r6,zero
    b630:	0013883a 	mov	r9,zero
    b634:	2c4b883a 	add	r5,r5,r17
    b638:	2c63803a 	cmpltu	r17,r5,r17
    b63c:	4a11883a 	add	r8,r9,r8
    b640:	8a11883a 	add	r8,r17,r8
    b644:	2823883a 	mov	r17,r5
    b648:	4080202c 	andhi	r2,r8,128
    b64c:	103fe026 	beq	r2,zero,b5d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b5d0>
    b650:	84000044 	addi	r16,r16,1
    b654:	0081ffc4 	movi	r2,2047
    b658:	8080d226 	beq	r16,r2,b9a4 <__adddf3+0x5d8>
    b65c:	00bfe034 	movhi	r2,65408
    b660:	10bfffc4 	addi	r2,r2,-1
    b664:	4090703a 	and	r8,r8,r2
    b668:	880ad07a 	srli	r5,r17,1
    b66c:	400897fa 	slli	r4,r8,31
    b670:	88c0004c 	andi	r3,r17,1
    b674:	28e2b03a 	or	r17,r5,r3
    b678:	4010d07a 	srli	r8,r8,1
    b67c:	2462b03a 	or	r17,r4,r17
    b680:	003f7106 	br	b448 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b448>
    b684:	4088b03a 	or	r4,r8,r2
    b688:	20014526 	beq	r4,zero,bba0 <__adddf3+0x7d4>
    b68c:	01000434 	movhi	r4,16
    b690:	42000234 	orhi	r8,r8,8
    b694:	213fffc4 	addi	r4,r4,-1
    b698:	4110703a 	and	r8,r8,r4
    b69c:	003f8206 	br	b4a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b4a8>
    b6a0:	18ffffc4 	addi	r3,r3,-1
    b6a4:	1800491e 	bne	r3,zero,b7cc <__adddf3+0x400>
    b6a8:	898bc83a 	sub	r5,r17,r6
    b6ac:	8963803a 	cmpltu	r17,r17,r5
    b6b0:	4251c83a 	sub	r8,r8,r9
    b6b4:	4451c83a 	sub	r8,r8,r17
    b6b8:	2823883a 	mov	r17,r5
    b6bc:	003f9f06 	br	b53c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b53c>
    b6c0:	4984b03a 	or	r2,r9,r6
    b6c4:	103f6026 	beq	r2,zero,b448 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b448>
    b6c8:	213fffc4 	addi	r4,r4,-1
    b6cc:	2000931e 	bne	r4,zero,b91c <__adddf3+0x550>
    b6d0:	898d883a 	add	r6,r17,r6
    b6d4:	3463803a 	cmpltu	r17,r6,r17
    b6d8:	4251883a 	add	r8,r8,r9
    b6dc:	8a11883a 	add	r8,r17,r8
    b6e0:	3023883a 	mov	r17,r6
    b6e4:	003fd806 	br	b648 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b648>
    b6e8:	1800541e 	bne	r3,zero,b83c <__adddf3+0x470>
    b6ec:	80800044 	addi	r2,r16,1
    b6f0:	1081ffcc 	andi	r2,r2,2047
    b6f4:	00c00044 	movi	r3,1
    b6f8:	1880a00e 	bge	r3,r2,b97c <__adddf3+0x5b0>
    b6fc:	8989c83a 	sub	r4,r17,r6
    b700:	8905803a 	cmpltu	r2,r17,r4
    b704:	4267c83a 	sub	r19,r8,r9
    b708:	98a7c83a 	sub	r19,r19,r2
    b70c:	9880202c 	andhi	r2,r19,128
    b710:	10006326 	beq	r2,zero,b8a0 <__adddf3+0x4d4>
    b714:	3463c83a 	sub	r17,r6,r17
    b718:	4a07c83a 	sub	r3,r9,r8
    b71c:	344d803a 	cmpltu	r6,r6,r17
    b720:	19a7c83a 	sub	r19,r3,r6
    b724:	3825883a 	mov	r18,r7
    b728:	983f8a1e 	bne	r19,zero,b554 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b554>
    b72c:	8809883a 	mov	r4,r17
    b730:	000d9d00 	call	d9d0 <__clzsi2>
    b734:	10800804 	addi	r2,r2,32
    b738:	10fffe04 	addi	r3,r2,-8
    b73c:	010007c4 	movi	r4,31
    b740:	20ff890e 	bge	r4,r3,b568 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b568>
    b744:	10bff604 	addi	r2,r2,-40
    b748:	8884983a 	sll	r2,r17,r2
    b74c:	0023883a 	mov	r17,zero
    b750:	1c3f8c0e 	bge	r3,r16,b584 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b584>
    b754:	023fe034 	movhi	r8,65408
    b758:	423fffc4 	addi	r8,r8,-1
    b75c:	80e1c83a 	sub	r16,r16,r3
    b760:	1210703a 	and	r8,r2,r8
    b764:	003f3806 	br	b448 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b448>
    b768:	9007883a 	mov	r3,r18
    b76c:	0011883a 	mov	r8,zero
    b770:	0005883a 	mov	r2,zero
    b774:	003f4c06 	br	b4a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b4a8>
    b778:	498cb03a 	or	r6,r9,r6
    b77c:	300cc03a 	cmpne	r6,r6,zero
    b780:	0007883a 	mov	r3,zero
    b784:	003f6806 	br	b528 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b528>
    b788:	20009c1e 	bne	r4,zero,b9fc <__adddf3+0x630>
    b78c:	80800044 	addi	r2,r16,1
    b790:	1141ffcc 	andi	r5,r2,2047
    b794:	01000044 	movi	r4,1
    b798:	2140670e 	bge	r4,r5,b938 <__adddf3+0x56c>
    b79c:	0101ffc4 	movi	r4,2047
    b7a0:	11007f26 	beq	r2,r4,b9a0 <__adddf3+0x5d4>
    b7a4:	898d883a 	add	r6,r17,r6
    b7a8:	4247883a 	add	r3,r8,r9
    b7ac:	3451803a 	cmpltu	r8,r6,r17
    b7b0:	40d1883a 	add	r8,r8,r3
    b7b4:	402297fa 	slli	r17,r8,31
    b7b8:	300cd07a 	srli	r6,r6,1
    b7bc:	4010d07a 	srli	r8,r8,1
    b7c0:	1021883a 	mov	r16,r2
    b7c4:	89a2b03a 	or	r17,r17,r6
    b7c8:	003f1f06 	br	b448 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b448>
    b7cc:	0081ffc4 	movi	r2,2047
    b7d0:	80bf481e 	bne	r16,r2,b4f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b4f4>
    b7d4:	003f1c06 	br	b448 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b448>
    b7d8:	843ff844 	addi	r16,r16,-31
    b7dc:	01000804 	movi	r4,32
    b7e0:	1406d83a 	srl	r3,r2,r16
    b7e4:	41005026 	beq	r8,r4,b928 <__adddf3+0x55c>
    b7e8:	01001004 	movi	r4,64
    b7ec:	2211c83a 	sub	r8,r4,r8
    b7f0:	1204983a 	sll	r2,r2,r8
    b7f4:	88a2b03a 	or	r17,r17,r2
    b7f8:	8822c03a 	cmpne	r17,r17,zero
    b7fc:	1c62b03a 	or	r17,r3,r17
    b800:	0011883a 	mov	r8,zero
    b804:	0021883a 	mov	r16,zero
    b808:	003f7106 	br	b5d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b5d0>
    b80c:	193ff804 	addi	r4,r3,-32
    b810:	00800804 	movi	r2,32
    b814:	4908d83a 	srl	r4,r9,r4
    b818:	18804526 	beq	r3,r2,b930 <__adddf3+0x564>
    b81c:	00801004 	movi	r2,64
    b820:	10c5c83a 	sub	r2,r2,r3
    b824:	4886983a 	sll	r3,r9,r2
    b828:	198cb03a 	or	r6,r3,r6
    b82c:	300cc03a 	cmpne	r6,r6,zero
    b830:	218cb03a 	or	r6,r4,r6
    b834:	0007883a 	mov	r3,zero
    b838:	003f3b06 	br	b528 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b528>
    b83c:	80002a26 	beq	r16,zero,b8e8 <__adddf3+0x51c>
    b840:	0101ffc4 	movi	r4,2047
    b844:	11006826 	beq	r2,r4,b9e8 <__adddf3+0x61c>
    b848:	00c7c83a 	sub	r3,zero,r3
    b84c:	42002034 	orhi	r8,r8,128
    b850:	01000e04 	movi	r4,56
    b854:	20c07c16 	blt	r4,r3,ba48 <__adddf3+0x67c>
    b858:	010007c4 	movi	r4,31
    b85c:	20c0da16 	blt	r4,r3,bbc8 <__adddf3+0x7fc>
    b860:	01000804 	movi	r4,32
    b864:	20c9c83a 	sub	r4,r4,r3
    b868:	4114983a 	sll	r10,r8,r4
    b86c:	88cad83a 	srl	r5,r17,r3
    b870:	8908983a 	sll	r4,r17,r4
    b874:	40c6d83a 	srl	r3,r8,r3
    b878:	5162b03a 	or	r17,r10,r5
    b87c:	2008c03a 	cmpne	r4,r4,zero
    b880:	8922b03a 	or	r17,r17,r4
    b884:	3463c83a 	sub	r17,r6,r17
    b888:	48c7c83a 	sub	r3,r9,r3
    b88c:	344d803a 	cmpltu	r6,r6,r17
    b890:	1991c83a 	sub	r8,r3,r6
    b894:	1021883a 	mov	r16,r2
    b898:	3825883a 	mov	r18,r7
    b89c:	003f2706 	br	b53c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b53c>
    b8a0:	24d0b03a 	or	r8,r4,r19
    b8a4:	40001b1e 	bne	r8,zero,b914 <__adddf3+0x548>
    b8a8:	0005883a 	mov	r2,zero
    b8ac:	0007883a 	mov	r3,zero
    b8b0:	0021883a 	mov	r16,zero
    b8b4:	003f4d06 	br	b5ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b5ec>
    b8b8:	008007c4 	movi	r2,31
    b8bc:	11003c16 	blt	r2,r4,b9b0 <__adddf3+0x5e4>
    b8c0:	00800804 	movi	r2,32
    b8c4:	1105c83a 	sub	r2,r2,r4
    b8c8:	488e983a 	sll	r7,r9,r2
    b8cc:	310ad83a 	srl	r5,r6,r4
    b8d0:	3084983a 	sll	r2,r6,r2
    b8d4:	4912d83a 	srl	r9,r9,r4
    b8d8:	394ab03a 	or	r5,r7,r5
    b8dc:	1004c03a 	cmpne	r2,r2,zero
    b8e0:	288ab03a 	or	r5,r5,r2
    b8e4:	003f5306 	br	b634 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b634>
    b8e8:	4448b03a 	or	r4,r8,r17
    b8ec:	20003e26 	beq	r4,zero,b9e8 <__adddf3+0x61c>
    b8f0:	00c6303a 	nor	r3,zero,r3
    b8f4:	18003a1e 	bne	r3,zero,b9e0 <__adddf3+0x614>
    b8f8:	3463c83a 	sub	r17,r6,r17
    b8fc:	4a07c83a 	sub	r3,r9,r8
    b900:	344d803a 	cmpltu	r6,r6,r17
    b904:	1991c83a 	sub	r8,r3,r6
    b908:	1021883a 	mov	r16,r2
    b90c:	3825883a 	mov	r18,r7
    b910:	003f0a06 	br	b53c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b53c>
    b914:	2023883a 	mov	r17,r4
    b918:	003f0d06 	br	b550 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b550>
    b91c:	0081ffc4 	movi	r2,2047
    b920:	80bf3f1e 	bne	r16,r2,b620 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b620>
    b924:	003ec806 	br	b448 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b448>
    b928:	0005883a 	mov	r2,zero
    b92c:	003fb106 	br	b7f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b7f4>
    b930:	0007883a 	mov	r3,zero
    b934:	003fbc06 	br	b828 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b828>
    b938:	4444b03a 	or	r2,r8,r17
    b93c:	8000871e 	bne	r16,zero,bb5c <__adddf3+0x790>
    b940:	1000ba26 	beq	r2,zero,bc2c <__adddf3+0x860>
    b944:	4984b03a 	or	r2,r9,r6
    b948:	103ebf26 	beq	r2,zero,b448 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b448>
    b94c:	8985883a 	add	r2,r17,r6
    b950:	4247883a 	add	r3,r8,r9
    b954:	1451803a 	cmpltu	r8,r2,r17
    b958:	40d1883a 	add	r8,r8,r3
    b95c:	40c0202c 	andhi	r3,r8,128
    b960:	1023883a 	mov	r17,r2
    b964:	183f1a26 	beq	r3,zero,b5d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b5d0>
    b968:	00bfe034 	movhi	r2,65408
    b96c:	10bfffc4 	addi	r2,r2,-1
    b970:	2021883a 	mov	r16,r4
    b974:	4090703a 	and	r8,r8,r2
    b978:	003eb306 	br	b448 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b448>
    b97c:	4444b03a 	or	r2,r8,r17
    b980:	8000291e 	bne	r16,zero,ba28 <__adddf3+0x65c>
    b984:	10004b1e 	bne	r2,zero,bab4 <__adddf3+0x6e8>
    b988:	4990b03a 	or	r8,r9,r6
    b98c:	40008b26 	beq	r8,zero,bbbc <__adddf3+0x7f0>
    b990:	4811883a 	mov	r8,r9
    b994:	3023883a 	mov	r17,r6
    b998:	3825883a 	mov	r18,r7
    b99c:	003eaa06 	br	b448 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b448>
    b9a0:	1021883a 	mov	r16,r2
    b9a4:	0011883a 	mov	r8,zero
    b9a8:	0005883a 	mov	r2,zero
    b9ac:	003f0f06 	br	b5ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b5ec>
    b9b0:	217ff804 	addi	r5,r4,-32
    b9b4:	00800804 	movi	r2,32
    b9b8:	494ad83a 	srl	r5,r9,r5
    b9bc:	20807d26 	beq	r4,r2,bbb4 <__adddf3+0x7e8>
    b9c0:	00801004 	movi	r2,64
    b9c4:	1109c83a 	sub	r4,r2,r4
    b9c8:	4912983a 	sll	r9,r9,r4
    b9cc:	498cb03a 	or	r6,r9,r6
    b9d0:	300cc03a 	cmpne	r6,r6,zero
    b9d4:	298ab03a 	or	r5,r5,r6
    b9d8:	0013883a 	mov	r9,zero
    b9dc:	003f1506 	br	b634 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b634>
    b9e0:	0101ffc4 	movi	r4,2047
    b9e4:	113f9a1e 	bne	r2,r4,b850 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b850>
    b9e8:	4811883a 	mov	r8,r9
    b9ec:	3023883a 	mov	r17,r6
    b9f0:	1021883a 	mov	r16,r2
    b9f4:	3825883a 	mov	r18,r7
    b9f8:	003e9306 	br	b448 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b448>
    b9fc:	8000161e 	bne	r16,zero,ba58 <__adddf3+0x68c>
    ba00:	444ab03a 	or	r5,r8,r17
    ba04:	28005126 	beq	r5,zero,bb4c <__adddf3+0x780>
    ba08:	0108303a 	nor	r4,zero,r4
    ba0c:	20004d1e 	bne	r4,zero,bb44 <__adddf3+0x778>
    ba10:	89a3883a 	add	r17,r17,r6
    ba14:	4253883a 	add	r9,r8,r9
    ba18:	898d803a 	cmpltu	r6,r17,r6
    ba1c:	3251883a 	add	r8,r6,r9
    ba20:	1021883a 	mov	r16,r2
    ba24:	003f0806 	br	b648 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b648>
    ba28:	1000301e 	bne	r2,zero,baec <__adddf3+0x720>
    ba2c:	4984b03a 	or	r2,r9,r6
    ba30:	10007126 	beq	r2,zero,bbf8 <__adddf3+0x82c>
    ba34:	4811883a 	mov	r8,r9
    ba38:	3023883a 	mov	r17,r6
    ba3c:	3825883a 	mov	r18,r7
    ba40:	0401ffc4 	movi	r16,2047
    ba44:	003e8006 	br	b448 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b448>
    ba48:	4462b03a 	or	r17,r8,r17
    ba4c:	8822c03a 	cmpne	r17,r17,zero
    ba50:	0007883a 	mov	r3,zero
    ba54:	003f8b06 	br	b884 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b884>
    ba58:	0141ffc4 	movi	r5,2047
    ba5c:	11403b26 	beq	r2,r5,bb4c <__adddf3+0x780>
    ba60:	0109c83a 	sub	r4,zero,r4
    ba64:	42002034 	orhi	r8,r8,128
    ba68:	01400e04 	movi	r5,56
    ba6c:	29006716 	blt	r5,r4,bc0c <__adddf3+0x840>
    ba70:	014007c4 	movi	r5,31
    ba74:	29007016 	blt	r5,r4,bc38 <__adddf3+0x86c>
    ba78:	01400804 	movi	r5,32
    ba7c:	290bc83a 	sub	r5,r5,r4
    ba80:	4154983a 	sll	r10,r8,r5
    ba84:	890ed83a 	srl	r7,r17,r4
    ba88:	894a983a 	sll	r5,r17,r5
    ba8c:	4108d83a 	srl	r4,r8,r4
    ba90:	51e2b03a 	or	r17,r10,r7
    ba94:	280ac03a 	cmpne	r5,r5,zero
    ba98:	8962b03a 	or	r17,r17,r5
    ba9c:	89a3883a 	add	r17,r17,r6
    baa0:	2253883a 	add	r9,r4,r9
    baa4:	898d803a 	cmpltu	r6,r17,r6
    baa8:	3251883a 	add	r8,r6,r9
    baac:	1021883a 	mov	r16,r2
    bab0:	003ee506 	br	b648 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b648>
    bab4:	4984b03a 	or	r2,r9,r6
    bab8:	103e6326 	beq	r2,zero,b448 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b448>
    babc:	8987c83a 	sub	r3,r17,r6
    bac0:	88c9803a 	cmpltu	r4,r17,r3
    bac4:	4245c83a 	sub	r2,r8,r9
    bac8:	1105c83a 	sub	r2,r2,r4
    bacc:	1100202c 	andhi	r4,r2,128
    bad0:	203ebb26 	beq	r4,zero,b5c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b5c0>
    bad4:	3463c83a 	sub	r17,r6,r17
    bad8:	4a07c83a 	sub	r3,r9,r8
    badc:	344d803a 	cmpltu	r6,r6,r17
    bae0:	1991c83a 	sub	r8,r3,r6
    bae4:	3825883a 	mov	r18,r7
    bae8:	003e5706 	br	b448 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b448>
    baec:	4984b03a 	or	r2,r9,r6
    baf0:	10002e26 	beq	r2,zero,bbac <__adddf3+0x7e0>
    baf4:	4004d0fa 	srli	r2,r8,3
    baf8:	8822d0fa 	srli	r17,r17,3
    bafc:	4010977a 	slli	r8,r8,29
    bb00:	10c0022c 	andhi	r3,r2,8
    bb04:	4462b03a 	or	r17,r8,r17
    bb08:	18000826 	beq	r3,zero,bb2c <__adddf3+0x760>
    bb0c:	4808d0fa 	srli	r4,r9,3
    bb10:	20c0022c 	andhi	r3,r4,8
    bb14:	1800051e 	bne	r3,zero,bb2c <__adddf3+0x760>
    bb18:	300cd0fa 	srli	r6,r6,3
    bb1c:	4806977a 	slli	r3,r9,29
    bb20:	2005883a 	mov	r2,r4
    bb24:	3825883a 	mov	r18,r7
    bb28:	19a2b03a 	or	r17,r3,r6
    bb2c:	8810d77a 	srli	r8,r17,29
    bb30:	100490fa 	slli	r2,r2,3
    bb34:	882290fa 	slli	r17,r17,3
    bb38:	0401ffc4 	movi	r16,2047
    bb3c:	4090b03a 	or	r8,r8,r2
    bb40:	003e4106 	br	b448 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b448>
    bb44:	0141ffc4 	movi	r5,2047
    bb48:	117fc71e 	bne	r2,r5,ba68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ba68>
    bb4c:	4811883a 	mov	r8,r9
    bb50:	3023883a 	mov	r17,r6
    bb54:	1021883a 	mov	r16,r2
    bb58:	003e3b06 	br	b448 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b448>
    bb5c:	10002f26 	beq	r2,zero,bc1c <__adddf3+0x850>
    bb60:	4984b03a 	or	r2,r9,r6
    bb64:	10001126 	beq	r2,zero,bbac <__adddf3+0x7e0>
    bb68:	4004d0fa 	srli	r2,r8,3
    bb6c:	8822d0fa 	srli	r17,r17,3
    bb70:	4010977a 	slli	r8,r8,29
    bb74:	10c0022c 	andhi	r3,r2,8
    bb78:	4462b03a 	or	r17,r8,r17
    bb7c:	183feb26 	beq	r3,zero,bb2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bb2c>
    bb80:	4808d0fa 	srli	r4,r9,3
    bb84:	20c0022c 	andhi	r3,r4,8
    bb88:	183fe81e 	bne	r3,zero,bb2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bb2c>
    bb8c:	300cd0fa 	srli	r6,r6,3
    bb90:	4806977a 	slli	r3,r9,29
    bb94:	2005883a 	mov	r2,r4
    bb98:	19a2b03a 	or	r17,r3,r6
    bb9c:	003fe306 	br	bb2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bb2c>
    bba0:	0011883a 	mov	r8,zero
    bba4:	0005883a 	mov	r2,zero
    bba8:	003e3f06 	br	b4a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b4a8>
    bbac:	0401ffc4 	movi	r16,2047
    bbb0:	003e2506 	br	b448 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b448>
    bbb4:	0013883a 	mov	r9,zero
    bbb8:	003f8406 	br	b9cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b9cc>
    bbbc:	0005883a 	mov	r2,zero
    bbc0:	0007883a 	mov	r3,zero
    bbc4:	003e8906 	br	b5ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b5ec>
    bbc8:	197ff804 	addi	r5,r3,-32
    bbcc:	01000804 	movi	r4,32
    bbd0:	414ad83a 	srl	r5,r8,r5
    bbd4:	19002426 	beq	r3,r4,bc68 <__adddf3+0x89c>
    bbd8:	01001004 	movi	r4,64
    bbdc:	20c7c83a 	sub	r3,r4,r3
    bbe0:	40c6983a 	sll	r3,r8,r3
    bbe4:	1c46b03a 	or	r3,r3,r17
    bbe8:	1806c03a 	cmpne	r3,r3,zero
    bbec:	28e2b03a 	or	r17,r5,r3
    bbf0:	0007883a 	mov	r3,zero
    bbf4:	003f2306 	br	b884 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b884>
    bbf8:	0007883a 	mov	r3,zero
    bbfc:	5811883a 	mov	r8,r11
    bc00:	00bfffc4 	movi	r2,-1
    bc04:	0401ffc4 	movi	r16,2047
    bc08:	003e7806 	br	b5ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b5ec>
    bc0c:	4462b03a 	or	r17,r8,r17
    bc10:	8822c03a 	cmpne	r17,r17,zero
    bc14:	0009883a 	mov	r4,zero
    bc18:	003fa006 	br	ba9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ba9c>
    bc1c:	4811883a 	mov	r8,r9
    bc20:	3023883a 	mov	r17,r6
    bc24:	0401ffc4 	movi	r16,2047
    bc28:	003e0706 	br	b448 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b448>
    bc2c:	4811883a 	mov	r8,r9
    bc30:	3023883a 	mov	r17,r6
    bc34:	003e0406 	br	b448 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b448>
    bc38:	21fff804 	addi	r7,r4,-32
    bc3c:	01400804 	movi	r5,32
    bc40:	41ced83a 	srl	r7,r8,r7
    bc44:	21400a26 	beq	r4,r5,bc70 <__adddf3+0x8a4>
    bc48:	01401004 	movi	r5,64
    bc4c:	2909c83a 	sub	r4,r5,r4
    bc50:	4108983a 	sll	r4,r8,r4
    bc54:	2448b03a 	or	r4,r4,r17
    bc58:	2008c03a 	cmpne	r4,r4,zero
    bc5c:	3922b03a 	or	r17,r7,r4
    bc60:	0009883a 	mov	r4,zero
    bc64:	003f8d06 	br	ba9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ba9c>
    bc68:	0007883a 	mov	r3,zero
    bc6c:	003fdd06 	br	bbe4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bbe4>
    bc70:	0009883a 	mov	r4,zero
    bc74:	003ff706 	br	bc54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bc54>

0000bc78 <__divdf3>:
    bc78:	defff204 	addi	sp,sp,-56
    bc7c:	dd400915 	stw	r21,36(sp)
    bc80:	282ad53a 	srli	r21,r5,20
    bc84:	dd000815 	stw	r20,32(sp)
    bc88:	2828d7fa 	srli	r20,r5,31
    bc8c:	dc000415 	stw	r16,16(sp)
    bc90:	04000434 	movhi	r16,16
    bc94:	df000c15 	stw	fp,48(sp)
    bc98:	843fffc4 	addi	r16,r16,-1
    bc9c:	dfc00d15 	stw	ra,52(sp)
    bca0:	ddc00b15 	stw	r23,44(sp)
    bca4:	dd800a15 	stw	r22,40(sp)
    bca8:	dcc00715 	stw	r19,28(sp)
    bcac:	dc800615 	stw	r18,24(sp)
    bcb0:	dc400515 	stw	r17,20(sp)
    bcb4:	ad41ffcc 	andi	r21,r21,2047
    bcb8:	2c20703a 	and	r16,r5,r16
    bcbc:	a7003fcc 	andi	fp,r20,255
    bcc0:	a8006126 	beq	r21,zero,be48 <__divdf3+0x1d0>
    bcc4:	0081ffc4 	movi	r2,2047
    bcc8:	2025883a 	mov	r18,r4
    bccc:	a8803726 	beq	r21,r2,bdac <__divdf3+0x134>
    bcd0:	80800434 	orhi	r2,r16,16
    bcd4:	100490fa 	slli	r2,r2,3
    bcd8:	2020d77a 	srli	r16,r4,29
    bcdc:	202490fa 	slli	r18,r4,3
    bce0:	ad7f0044 	addi	r21,r21,-1023
    bce4:	80a0b03a 	or	r16,r16,r2
    bce8:	0027883a 	mov	r19,zero
    bcec:	0013883a 	mov	r9,zero
    bcf0:	3804d53a 	srli	r2,r7,20
    bcf4:	382cd7fa 	srli	r22,r7,31
    bcf8:	04400434 	movhi	r17,16
    bcfc:	8c7fffc4 	addi	r17,r17,-1
    bd00:	1081ffcc 	andi	r2,r2,2047
    bd04:	3011883a 	mov	r8,r6
    bd08:	3c62703a 	and	r17,r7,r17
    bd0c:	b5c03fcc 	andi	r23,r22,255
    bd10:	10006c26 	beq	r2,zero,bec4 <__divdf3+0x24c>
    bd14:	00c1ffc4 	movi	r3,2047
    bd18:	10c06426 	beq	r2,r3,beac <__divdf3+0x234>
    bd1c:	88c00434 	orhi	r3,r17,16
    bd20:	180690fa 	slli	r3,r3,3
    bd24:	3022d77a 	srli	r17,r6,29
    bd28:	301090fa 	slli	r8,r6,3
    bd2c:	10bf0044 	addi	r2,r2,-1023
    bd30:	88e2b03a 	or	r17,r17,r3
    bd34:	000f883a 	mov	r7,zero
    bd38:	a58cf03a 	xor	r6,r20,r22
    bd3c:	3cc8b03a 	or	r4,r7,r19
    bd40:	a8abc83a 	sub	r21,r21,r2
    bd44:	008003c4 	movi	r2,15
    bd48:	3007883a 	mov	r3,r6
    bd4c:	34c03fcc 	andi	r19,r6,255
    bd50:	11009036 	bltu	r2,r4,bf94 <__divdf3+0x31c>
    bd54:	200890ba 	slli	r4,r4,2
    bd58:	00800074 	movhi	r2,1
    bd5c:	10af5b04 	addi	r2,r2,-17044
    bd60:	2089883a 	add	r4,r4,r2
    bd64:	20800017 	ldw	r2,0(r4)
    bd68:	1000683a 	jmp	r2
    bd6c:	0000bf94 	movui	zero,766
    bd70:	0000bde4 	muli	zero,zero,759
    bd74:	0000bf84 	movi	zero,766
    bd78:	0000bdd8 	cmpnei	zero,zero,759
    bd7c:	0000bf84 	movi	zero,766
    bd80:	0000bf58 	cmpnei	zero,zero,765
    bd84:	0000bf84 	movi	zero,766
    bd88:	0000bdd8 	cmpnei	zero,zero,759
    bd8c:	0000bde4 	muli	zero,zero,759
    bd90:	0000bde4 	muli	zero,zero,759
    bd94:	0000bf58 	cmpnei	zero,zero,765
    bd98:	0000bdd8 	cmpnei	zero,zero,759
    bd9c:	0000bdc8 	cmpgei	zero,zero,759
    bda0:	0000bdc8 	cmpgei	zero,zero,759
    bda4:	0000bdc8 	cmpgei	zero,zero,759
    bda8:	0000c278 	rdprs	zero,zero,777
    bdac:	2404b03a 	or	r2,r4,r16
    bdb0:	1000661e 	bne	r2,zero,bf4c <__divdf3+0x2d4>
    bdb4:	04c00204 	movi	r19,8
    bdb8:	0021883a 	mov	r16,zero
    bdbc:	0025883a 	mov	r18,zero
    bdc0:	02400084 	movi	r9,2
    bdc4:	003fca06 	br	bcf0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bcf0>
    bdc8:	8023883a 	mov	r17,r16
    bdcc:	9011883a 	mov	r8,r18
    bdd0:	e02f883a 	mov	r23,fp
    bdd4:	480f883a 	mov	r7,r9
    bdd8:	00800084 	movi	r2,2
    bddc:	3881311e 	bne	r7,r2,c2a4 <__divdf3+0x62c>
    bde0:	b827883a 	mov	r19,r23
    bde4:	98c0004c 	andi	r3,r19,1
    bde8:	0081ffc4 	movi	r2,2047
    bdec:	000b883a 	mov	r5,zero
    bdf0:	0025883a 	mov	r18,zero
    bdf4:	1004953a 	slli	r2,r2,20
    bdf8:	18c03fcc 	andi	r3,r3,255
    bdfc:	04400434 	movhi	r17,16
    be00:	8c7fffc4 	addi	r17,r17,-1
    be04:	180697fa 	slli	r3,r3,31
    be08:	2c4a703a 	and	r5,r5,r17
    be0c:	288ab03a 	or	r5,r5,r2
    be10:	28c6b03a 	or	r3,r5,r3
    be14:	9005883a 	mov	r2,r18
    be18:	dfc00d17 	ldw	ra,52(sp)
    be1c:	df000c17 	ldw	fp,48(sp)
    be20:	ddc00b17 	ldw	r23,44(sp)
    be24:	dd800a17 	ldw	r22,40(sp)
    be28:	dd400917 	ldw	r21,36(sp)
    be2c:	dd000817 	ldw	r20,32(sp)
    be30:	dcc00717 	ldw	r19,28(sp)
    be34:	dc800617 	ldw	r18,24(sp)
    be38:	dc400517 	ldw	r17,20(sp)
    be3c:	dc000417 	ldw	r16,16(sp)
    be40:	dec00e04 	addi	sp,sp,56
    be44:	f800283a 	ret
    be48:	2404b03a 	or	r2,r4,r16
    be4c:	2027883a 	mov	r19,r4
    be50:	10003926 	beq	r2,zero,bf38 <__divdf3+0x2c0>
    be54:	80012e26 	beq	r16,zero,c310 <__divdf3+0x698>
    be58:	8009883a 	mov	r4,r16
    be5c:	d9800315 	stw	r6,12(sp)
    be60:	d9c00215 	stw	r7,8(sp)
    be64:	000d9d00 	call	d9d0 <__clzsi2>
    be68:	d9800317 	ldw	r6,12(sp)
    be6c:	d9c00217 	ldw	r7,8(sp)
    be70:	113ffd44 	addi	r4,r2,-11
    be74:	00c00704 	movi	r3,28
    be78:	19012116 	blt	r3,r4,c300 <__divdf3+0x688>
    be7c:	00c00744 	movi	r3,29
    be80:	147ffe04 	addi	r17,r2,-8
    be84:	1907c83a 	sub	r3,r3,r4
    be88:	8460983a 	sll	r16,r16,r17
    be8c:	98c6d83a 	srl	r3,r19,r3
    be90:	9c64983a 	sll	r18,r19,r17
    be94:	1c20b03a 	or	r16,r3,r16
    be98:	1080fcc4 	addi	r2,r2,1011
    be9c:	00abc83a 	sub	r21,zero,r2
    bea0:	0027883a 	mov	r19,zero
    bea4:	0013883a 	mov	r9,zero
    bea8:	003f9106 	br	bcf0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bcf0>
    beac:	3446b03a 	or	r3,r6,r17
    beb0:	18001f1e 	bne	r3,zero,bf30 <__divdf3+0x2b8>
    beb4:	0023883a 	mov	r17,zero
    beb8:	0011883a 	mov	r8,zero
    bebc:	01c00084 	movi	r7,2
    bec0:	003f9d06 	br	bd38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bd38>
    bec4:	3446b03a 	or	r3,r6,r17
    bec8:	18001526 	beq	r3,zero,bf20 <__divdf3+0x2a8>
    becc:	88011b26 	beq	r17,zero,c33c <__divdf3+0x6c4>
    bed0:	8809883a 	mov	r4,r17
    bed4:	d9800315 	stw	r6,12(sp)
    bed8:	da400115 	stw	r9,4(sp)
    bedc:	000d9d00 	call	d9d0 <__clzsi2>
    bee0:	d9800317 	ldw	r6,12(sp)
    bee4:	da400117 	ldw	r9,4(sp)
    bee8:	113ffd44 	addi	r4,r2,-11
    beec:	00c00704 	movi	r3,28
    bef0:	19010e16 	blt	r3,r4,c32c <__divdf3+0x6b4>
    bef4:	00c00744 	movi	r3,29
    bef8:	123ffe04 	addi	r8,r2,-8
    befc:	1907c83a 	sub	r3,r3,r4
    bf00:	8a22983a 	sll	r17,r17,r8
    bf04:	30c6d83a 	srl	r3,r6,r3
    bf08:	3210983a 	sll	r8,r6,r8
    bf0c:	1c62b03a 	or	r17,r3,r17
    bf10:	1080fcc4 	addi	r2,r2,1011
    bf14:	0085c83a 	sub	r2,zero,r2
    bf18:	000f883a 	mov	r7,zero
    bf1c:	003f8606 	br	bd38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bd38>
    bf20:	0023883a 	mov	r17,zero
    bf24:	0011883a 	mov	r8,zero
    bf28:	01c00044 	movi	r7,1
    bf2c:	003f8206 	br	bd38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bd38>
    bf30:	01c000c4 	movi	r7,3
    bf34:	003f8006 	br	bd38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bd38>
    bf38:	04c00104 	movi	r19,4
    bf3c:	0021883a 	mov	r16,zero
    bf40:	0025883a 	mov	r18,zero
    bf44:	02400044 	movi	r9,1
    bf48:	003f6906 	br	bcf0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bcf0>
    bf4c:	04c00304 	movi	r19,12
    bf50:	024000c4 	movi	r9,3
    bf54:	003f6606 	br	bcf0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bcf0>
    bf58:	01400434 	movhi	r5,16
    bf5c:	0007883a 	mov	r3,zero
    bf60:	297fffc4 	addi	r5,r5,-1
    bf64:	04bfffc4 	movi	r18,-1
    bf68:	0081ffc4 	movi	r2,2047
    bf6c:	003fa106 	br	bdf4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bdf4>
    bf70:	00c00044 	movi	r3,1
    bf74:	1887c83a 	sub	r3,r3,r2
    bf78:	01000e04 	movi	r4,56
    bf7c:	20c1210e 	bge	r4,r3,c404 <__divdf3+0x78c>
    bf80:	98c0004c 	andi	r3,r19,1
    bf84:	0005883a 	mov	r2,zero
    bf88:	000b883a 	mov	r5,zero
    bf8c:	0025883a 	mov	r18,zero
    bf90:	003f9806 	br	bdf4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bdf4>
    bf94:	8c00fd36 	bltu	r17,r16,c38c <__divdf3+0x714>
    bf98:	8440fb26 	beq	r16,r17,c388 <__divdf3+0x710>
    bf9c:	8007883a 	mov	r3,r16
    bfa0:	ad7fffc4 	addi	r21,r21,-1
    bfa4:	0021883a 	mov	r16,zero
    bfa8:	4004d63a 	srli	r2,r8,24
    bfac:	8822923a 	slli	r17,r17,8
    bfb0:	1809883a 	mov	r4,r3
    bfb4:	402c923a 	slli	r22,r8,8
    bfb8:	88b8b03a 	or	fp,r17,r2
    bfbc:	e028d43a 	srli	r20,fp,16
    bfc0:	d8c00015 	stw	r3,0(sp)
    bfc4:	e5ffffcc 	andi	r23,fp,65535
    bfc8:	a00b883a 	mov	r5,r20
    bfcc:	000b3100 	call	b310 <__udivsi3>
    bfd0:	d8c00017 	ldw	r3,0(sp)
    bfd4:	a00b883a 	mov	r5,r20
    bfd8:	d8800315 	stw	r2,12(sp)
    bfdc:	1809883a 	mov	r4,r3
    bfe0:	000b3740 	call	b374 <__umodsi3>
    bfe4:	d9800317 	ldw	r6,12(sp)
    bfe8:	1006943a 	slli	r3,r2,16
    bfec:	9004d43a 	srli	r2,r18,16
    bff0:	b9a3383a 	mul	r17,r23,r6
    bff4:	10c4b03a 	or	r2,r2,r3
    bff8:	1440062e 	bgeu	r2,r17,c014 <__divdf3+0x39c>
    bffc:	1705883a 	add	r2,r2,fp
    c000:	30ffffc4 	addi	r3,r6,-1
    c004:	1700ee36 	bltu	r2,fp,c3c0 <__divdf3+0x748>
    c008:	1440ed2e 	bgeu	r2,r17,c3c0 <__divdf3+0x748>
    c00c:	31bfff84 	addi	r6,r6,-2
    c010:	1705883a 	add	r2,r2,fp
    c014:	1463c83a 	sub	r17,r2,r17
    c018:	a00b883a 	mov	r5,r20
    c01c:	8809883a 	mov	r4,r17
    c020:	d9800315 	stw	r6,12(sp)
    c024:	000b3100 	call	b310 <__udivsi3>
    c028:	a00b883a 	mov	r5,r20
    c02c:	8809883a 	mov	r4,r17
    c030:	d8800215 	stw	r2,8(sp)
    c034:	000b3740 	call	b374 <__umodsi3>
    c038:	d9c00217 	ldw	r7,8(sp)
    c03c:	1004943a 	slli	r2,r2,16
    c040:	94bfffcc 	andi	r18,r18,65535
    c044:	b9d1383a 	mul	r8,r23,r7
    c048:	90a4b03a 	or	r18,r18,r2
    c04c:	d9800317 	ldw	r6,12(sp)
    c050:	9200062e 	bgeu	r18,r8,c06c <__divdf3+0x3f4>
    c054:	9725883a 	add	r18,r18,fp
    c058:	38bfffc4 	addi	r2,r7,-1
    c05c:	9700d636 	bltu	r18,fp,c3b8 <__divdf3+0x740>
    c060:	9200d52e 	bgeu	r18,r8,c3b8 <__divdf3+0x740>
    c064:	39ffff84 	addi	r7,r7,-2
    c068:	9725883a 	add	r18,r18,fp
    c06c:	3004943a 	slli	r2,r6,16
    c070:	b012d43a 	srli	r9,r22,16
    c074:	b1bfffcc 	andi	r6,r22,65535
    c078:	11e2b03a 	or	r17,r2,r7
    c07c:	8806d43a 	srli	r3,r17,16
    c080:	893fffcc 	andi	r4,r17,65535
    c084:	218b383a 	mul	r5,r4,r6
    c088:	30c5383a 	mul	r2,r6,r3
    c08c:	2249383a 	mul	r4,r4,r9
    c090:	280ed43a 	srli	r7,r5,16
    c094:	9225c83a 	sub	r18,r18,r8
    c098:	2089883a 	add	r4,r4,r2
    c09c:	3909883a 	add	r4,r7,r4
    c0a0:	1a47383a 	mul	r3,r3,r9
    c0a4:	2080022e 	bgeu	r4,r2,c0b0 <__divdf3+0x438>
    c0a8:	00800074 	movhi	r2,1
    c0ac:	1887883a 	add	r3,r3,r2
    c0b0:	2004d43a 	srli	r2,r4,16
    c0b4:	2008943a 	slli	r4,r4,16
    c0b8:	297fffcc 	andi	r5,r5,65535
    c0bc:	10c7883a 	add	r3,r2,r3
    c0c0:	2149883a 	add	r4,r4,r5
    c0c4:	90c0a536 	bltu	r18,r3,c35c <__divdf3+0x6e4>
    c0c8:	90c0bf26 	beq	r18,r3,c3c8 <__divdf3+0x750>
    c0cc:	90c7c83a 	sub	r3,r18,r3
    c0d0:	810fc83a 	sub	r7,r16,r4
    c0d4:	81e5803a 	cmpltu	r18,r16,r7
    c0d8:	1ca5c83a 	sub	r18,r3,r18
    c0dc:	e480c126 	beq	fp,r18,c3e4 <__divdf3+0x76c>
    c0e0:	a00b883a 	mov	r5,r20
    c0e4:	9009883a 	mov	r4,r18
    c0e8:	d9800315 	stw	r6,12(sp)
    c0ec:	d9c00215 	stw	r7,8(sp)
    c0f0:	da400115 	stw	r9,4(sp)
    c0f4:	000b3100 	call	b310 <__udivsi3>
    c0f8:	a00b883a 	mov	r5,r20
    c0fc:	9009883a 	mov	r4,r18
    c100:	d8800015 	stw	r2,0(sp)
    c104:	000b3740 	call	b374 <__umodsi3>
    c108:	d9c00217 	ldw	r7,8(sp)
    c10c:	da000017 	ldw	r8,0(sp)
    c110:	1006943a 	slli	r3,r2,16
    c114:	3804d43a 	srli	r2,r7,16
    c118:	ba21383a 	mul	r16,r23,r8
    c11c:	d9800317 	ldw	r6,12(sp)
    c120:	10c4b03a 	or	r2,r2,r3
    c124:	da400117 	ldw	r9,4(sp)
    c128:	1400062e 	bgeu	r2,r16,c144 <__divdf3+0x4cc>
    c12c:	1705883a 	add	r2,r2,fp
    c130:	40ffffc4 	addi	r3,r8,-1
    c134:	1700ad36 	bltu	r2,fp,c3ec <__divdf3+0x774>
    c138:	1400ac2e 	bgeu	r2,r16,c3ec <__divdf3+0x774>
    c13c:	423fff84 	addi	r8,r8,-2
    c140:	1705883a 	add	r2,r2,fp
    c144:	1421c83a 	sub	r16,r2,r16
    c148:	a00b883a 	mov	r5,r20
    c14c:	8009883a 	mov	r4,r16
    c150:	d9800315 	stw	r6,12(sp)
    c154:	d9c00215 	stw	r7,8(sp)
    c158:	da000015 	stw	r8,0(sp)
    c15c:	da400115 	stw	r9,4(sp)
    c160:	000b3100 	call	b310 <__udivsi3>
    c164:	8009883a 	mov	r4,r16
    c168:	a00b883a 	mov	r5,r20
    c16c:	1025883a 	mov	r18,r2
    c170:	000b3740 	call	b374 <__umodsi3>
    c174:	d9c00217 	ldw	r7,8(sp)
    c178:	1004943a 	slli	r2,r2,16
    c17c:	bcaf383a 	mul	r23,r23,r18
    c180:	393fffcc 	andi	r4,r7,65535
    c184:	2088b03a 	or	r4,r4,r2
    c188:	d9800317 	ldw	r6,12(sp)
    c18c:	da000017 	ldw	r8,0(sp)
    c190:	da400117 	ldw	r9,4(sp)
    c194:	25c0062e 	bgeu	r4,r23,c1b0 <__divdf3+0x538>
    c198:	2709883a 	add	r4,r4,fp
    c19c:	90bfffc4 	addi	r2,r18,-1
    c1a0:	27009436 	bltu	r4,fp,c3f4 <__divdf3+0x77c>
    c1a4:	25c0932e 	bgeu	r4,r23,c3f4 <__divdf3+0x77c>
    c1a8:	94bfff84 	addi	r18,r18,-2
    c1ac:	2709883a 	add	r4,r4,fp
    c1b0:	4004943a 	slli	r2,r8,16
    c1b4:	25efc83a 	sub	r23,r4,r23
    c1b8:	1490b03a 	or	r8,r2,r18
    c1bc:	4008d43a 	srli	r4,r8,16
    c1c0:	40ffffcc 	andi	r3,r8,65535
    c1c4:	30c5383a 	mul	r2,r6,r3
    c1c8:	1a47383a 	mul	r3,r3,r9
    c1cc:	310d383a 	mul	r6,r6,r4
    c1d0:	100ad43a 	srli	r5,r2,16
    c1d4:	4913383a 	mul	r9,r9,r4
    c1d8:	1987883a 	add	r3,r3,r6
    c1dc:	28c7883a 	add	r3,r5,r3
    c1e0:	1980022e 	bgeu	r3,r6,c1ec <__divdf3+0x574>
    c1e4:	01000074 	movhi	r4,1
    c1e8:	4913883a 	add	r9,r9,r4
    c1ec:	1808d43a 	srli	r4,r3,16
    c1f0:	1806943a 	slli	r3,r3,16
    c1f4:	10bfffcc 	andi	r2,r2,65535
    c1f8:	2253883a 	add	r9,r4,r9
    c1fc:	1887883a 	add	r3,r3,r2
    c200:	ba403836 	bltu	r23,r9,c2e4 <__divdf3+0x66c>
    c204:	ba403626 	beq	r23,r9,c2e0 <__divdf3+0x668>
    c208:	42000054 	ori	r8,r8,1
    c20c:	a880ffc4 	addi	r2,r21,1023
    c210:	00bf570e 	bge	zero,r2,bf70 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bf70>
    c214:	40c001cc 	andi	r3,r8,7
    c218:	18000726 	beq	r3,zero,c238 <__divdf3+0x5c0>
    c21c:	40c003cc 	andi	r3,r8,15
    c220:	01000104 	movi	r4,4
    c224:	19000426 	beq	r3,r4,c238 <__divdf3+0x5c0>
    c228:	4107883a 	add	r3,r8,r4
    c22c:	1a11803a 	cmpltu	r8,r3,r8
    c230:	8a23883a 	add	r17,r17,r8
    c234:	1811883a 	mov	r8,r3
    c238:	88c0402c 	andhi	r3,r17,256
    c23c:	18000426 	beq	r3,zero,c250 <__divdf3+0x5d8>
    c240:	00ffc034 	movhi	r3,65280
    c244:	18ffffc4 	addi	r3,r3,-1
    c248:	a8810004 	addi	r2,r21,1024
    c24c:	88e2703a 	and	r17,r17,r3
    c250:	00c1ff84 	movi	r3,2046
    c254:	18bee316 	blt	r3,r2,bde4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bde4>
    c258:	8824977a 	slli	r18,r17,29
    c25c:	4010d0fa 	srli	r8,r8,3
    c260:	8822927a 	slli	r17,r17,9
    c264:	1081ffcc 	andi	r2,r2,2047
    c268:	9224b03a 	or	r18,r18,r8
    c26c:	880ad33a 	srli	r5,r17,12
    c270:	98c0004c 	andi	r3,r19,1
    c274:	003edf06 	br	bdf4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bdf4>
    c278:	8080022c 	andhi	r2,r16,8
    c27c:	10001226 	beq	r2,zero,c2c8 <__divdf3+0x650>
    c280:	8880022c 	andhi	r2,r17,8
    c284:	1000101e 	bne	r2,zero,c2c8 <__divdf3+0x650>
    c288:	00800434 	movhi	r2,16
    c28c:	89400234 	orhi	r5,r17,8
    c290:	10bfffc4 	addi	r2,r2,-1
    c294:	b007883a 	mov	r3,r22
    c298:	288a703a 	and	r5,r5,r2
    c29c:	4025883a 	mov	r18,r8
    c2a0:	003f3106 	br	bf68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bf68>
    c2a4:	008000c4 	movi	r2,3
    c2a8:	3880a626 	beq	r7,r2,c544 <__divdf3+0x8cc>
    c2ac:	00800044 	movi	r2,1
    c2b0:	3880521e 	bne	r7,r2,c3fc <__divdf3+0x784>
    c2b4:	b807883a 	mov	r3,r23
    c2b8:	0005883a 	mov	r2,zero
    c2bc:	000b883a 	mov	r5,zero
    c2c0:	0025883a 	mov	r18,zero
    c2c4:	003ecb06 	br	bdf4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bdf4>
    c2c8:	00800434 	movhi	r2,16
    c2cc:	81400234 	orhi	r5,r16,8
    c2d0:	10bfffc4 	addi	r2,r2,-1
    c2d4:	a007883a 	mov	r3,r20
    c2d8:	288a703a 	and	r5,r5,r2
    c2dc:	003f2206 	br	bf68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bf68>
    c2e0:	183fca26 	beq	r3,zero,c20c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c20c>
    c2e4:	e5ef883a 	add	r23,fp,r23
    c2e8:	40bfffc4 	addi	r2,r8,-1
    c2ec:	bf00392e 	bgeu	r23,fp,c3d4 <__divdf3+0x75c>
    c2f0:	1011883a 	mov	r8,r2
    c2f4:	ba7fc41e 	bne	r23,r9,c208 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c208>
    c2f8:	b0ffc31e 	bne	r22,r3,c208 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c208>
    c2fc:	003fc306 	br	c20c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c20c>
    c300:	143ff604 	addi	r16,r2,-40
    c304:	9c20983a 	sll	r16,r19,r16
    c308:	0025883a 	mov	r18,zero
    c30c:	003ee206 	br	be98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700be98>
    c310:	d9800315 	stw	r6,12(sp)
    c314:	d9c00215 	stw	r7,8(sp)
    c318:	000d9d00 	call	d9d0 <__clzsi2>
    c31c:	10800804 	addi	r2,r2,32
    c320:	d9c00217 	ldw	r7,8(sp)
    c324:	d9800317 	ldw	r6,12(sp)
    c328:	003ed106 	br	be70 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700be70>
    c32c:	147ff604 	addi	r17,r2,-40
    c330:	3462983a 	sll	r17,r6,r17
    c334:	0011883a 	mov	r8,zero
    c338:	003ef506 	br	bf10 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bf10>
    c33c:	3009883a 	mov	r4,r6
    c340:	d9800315 	stw	r6,12(sp)
    c344:	da400115 	stw	r9,4(sp)
    c348:	000d9d00 	call	d9d0 <__clzsi2>
    c34c:	10800804 	addi	r2,r2,32
    c350:	da400117 	ldw	r9,4(sp)
    c354:	d9800317 	ldw	r6,12(sp)
    c358:	003ee306 	br	bee8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bee8>
    c35c:	85a1883a 	add	r16,r16,r22
    c360:	8585803a 	cmpltu	r2,r16,r22
    c364:	1705883a 	add	r2,r2,fp
    c368:	14a5883a 	add	r18,r2,r18
    c36c:	88bfffc4 	addi	r2,r17,-1
    c370:	e4800c2e 	bgeu	fp,r18,c3a4 <__divdf3+0x72c>
    c374:	90c03e36 	bltu	r18,r3,c470 <__divdf3+0x7f8>
    c378:	1c806926 	beq	r3,r18,c520 <__divdf3+0x8a8>
    c37c:	90c7c83a 	sub	r3,r18,r3
    c380:	1023883a 	mov	r17,r2
    c384:	003f5206 	br	c0d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c0d0>
    c388:	923f0436 	bltu	r18,r8,bf9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bf9c>
    c38c:	800897fa 	slli	r4,r16,31
    c390:	9004d07a 	srli	r2,r18,1
    c394:	8006d07a 	srli	r3,r16,1
    c398:	902097fa 	slli	r16,r18,31
    c39c:	20a4b03a 	or	r18,r4,r2
    c3a0:	003f0106 	br	bfa8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bfa8>
    c3a4:	e4bff51e 	bne	fp,r18,c37c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c37c>
    c3a8:	85bff22e 	bgeu	r16,r22,c374 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c374>
    c3ac:	e0c7c83a 	sub	r3,fp,r3
    c3b0:	1023883a 	mov	r17,r2
    c3b4:	003f4606 	br	c0d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c0d0>
    c3b8:	100f883a 	mov	r7,r2
    c3bc:	003f2b06 	br	c06c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c06c>
    c3c0:	180d883a 	mov	r6,r3
    c3c4:	003f1306 	br	c014 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c014>
    c3c8:	813fe436 	bltu	r16,r4,c35c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c35c>
    c3cc:	0007883a 	mov	r3,zero
    c3d0:	003f3f06 	br	c0d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c0d0>
    c3d4:	ba402c36 	bltu	r23,r9,c488 <__divdf3+0x810>
    c3d8:	4dc05426 	beq	r9,r23,c52c <__divdf3+0x8b4>
    c3dc:	1011883a 	mov	r8,r2
    c3e0:	003f8906 	br	c208 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c208>
    c3e4:	023fffc4 	movi	r8,-1
    c3e8:	003f8806 	br	c20c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c20c>
    c3ec:	1811883a 	mov	r8,r3
    c3f0:	003f5406 	br	c144 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c144>
    c3f4:	1025883a 	mov	r18,r2
    c3f8:	003f6d06 	br	c1b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c1b0>
    c3fc:	b827883a 	mov	r19,r23
    c400:	003f8206 	br	c20c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c20c>
    c404:	010007c4 	movi	r4,31
    c408:	20c02616 	blt	r4,r3,c4a4 <__divdf3+0x82c>
    c40c:	00800804 	movi	r2,32
    c410:	10c5c83a 	sub	r2,r2,r3
    c414:	888a983a 	sll	r5,r17,r2
    c418:	40c8d83a 	srl	r4,r8,r3
    c41c:	4084983a 	sll	r2,r8,r2
    c420:	88e2d83a 	srl	r17,r17,r3
    c424:	2906b03a 	or	r3,r5,r4
    c428:	1004c03a 	cmpne	r2,r2,zero
    c42c:	1886b03a 	or	r3,r3,r2
    c430:	188001cc 	andi	r2,r3,7
    c434:	10000726 	beq	r2,zero,c454 <__divdf3+0x7dc>
    c438:	188003cc 	andi	r2,r3,15
    c43c:	01000104 	movi	r4,4
    c440:	11000426 	beq	r2,r4,c454 <__divdf3+0x7dc>
    c444:	1805883a 	mov	r2,r3
    c448:	10c00104 	addi	r3,r2,4
    c44c:	1885803a 	cmpltu	r2,r3,r2
    c450:	88a3883a 	add	r17,r17,r2
    c454:	8880202c 	andhi	r2,r17,128
    c458:	10002726 	beq	r2,zero,c4f8 <__divdf3+0x880>
    c45c:	98c0004c 	andi	r3,r19,1
    c460:	00800044 	movi	r2,1
    c464:	000b883a 	mov	r5,zero
    c468:	0025883a 	mov	r18,zero
    c46c:	003e6106 	br	bdf4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bdf4>
    c470:	85a1883a 	add	r16,r16,r22
    c474:	8585803a 	cmpltu	r2,r16,r22
    c478:	1705883a 	add	r2,r2,fp
    c47c:	14a5883a 	add	r18,r2,r18
    c480:	8c7fff84 	addi	r17,r17,-2
    c484:	003f1106 	br	c0cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c0cc>
    c488:	b589883a 	add	r4,r22,r22
    c48c:	25ad803a 	cmpltu	r22,r4,r22
    c490:	b739883a 	add	fp,r22,fp
    c494:	40bfff84 	addi	r2,r8,-2
    c498:	bf2f883a 	add	r23,r23,fp
    c49c:	202d883a 	mov	r22,r4
    c4a0:	003f9306 	br	c2f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c2f0>
    c4a4:	013ff844 	movi	r4,-31
    c4a8:	2085c83a 	sub	r2,r4,r2
    c4ac:	8888d83a 	srl	r4,r17,r2
    c4b0:	00800804 	movi	r2,32
    c4b4:	18802126 	beq	r3,r2,c53c <__divdf3+0x8c4>
    c4b8:	00801004 	movi	r2,64
    c4bc:	10c5c83a 	sub	r2,r2,r3
    c4c0:	8884983a 	sll	r2,r17,r2
    c4c4:	1204b03a 	or	r2,r2,r8
    c4c8:	1004c03a 	cmpne	r2,r2,zero
    c4cc:	2084b03a 	or	r2,r4,r2
    c4d0:	144001cc 	andi	r17,r2,7
    c4d4:	88000d1e 	bne	r17,zero,c50c <__divdf3+0x894>
    c4d8:	000b883a 	mov	r5,zero
    c4dc:	1024d0fa 	srli	r18,r2,3
    c4e0:	98c0004c 	andi	r3,r19,1
    c4e4:	0005883a 	mov	r2,zero
    c4e8:	9464b03a 	or	r18,r18,r17
    c4ec:	003e4106 	br	bdf4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bdf4>
    c4f0:	1007883a 	mov	r3,r2
    c4f4:	0023883a 	mov	r17,zero
    c4f8:	880a927a 	slli	r5,r17,9
    c4fc:	1805883a 	mov	r2,r3
    c500:	8822977a 	slli	r17,r17,29
    c504:	280ad33a 	srli	r5,r5,12
    c508:	003ff406 	br	c4dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c4dc>
    c50c:	10c003cc 	andi	r3,r2,15
    c510:	01000104 	movi	r4,4
    c514:	193ff626 	beq	r3,r4,c4f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c4f0>
    c518:	0023883a 	mov	r17,zero
    c51c:	003fca06 	br	c448 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c448>
    c520:	813fd336 	bltu	r16,r4,c470 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c470>
    c524:	1023883a 	mov	r17,r2
    c528:	003fa806 	br	c3cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c3cc>
    c52c:	b0ffd636 	bltu	r22,r3,c488 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c488>
    c530:	1011883a 	mov	r8,r2
    c534:	b0ff341e 	bne	r22,r3,c208 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c208>
    c538:	003f3406 	br	c20c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c20c>
    c53c:	0005883a 	mov	r2,zero
    c540:	003fe006 	br	c4c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c4c4>
    c544:	00800434 	movhi	r2,16
    c548:	89400234 	orhi	r5,r17,8
    c54c:	10bfffc4 	addi	r2,r2,-1
    c550:	b807883a 	mov	r3,r23
    c554:	288a703a 	and	r5,r5,r2
    c558:	4025883a 	mov	r18,r8
    c55c:	003e8206 	br	bf68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bf68>

0000c560 <__eqdf2>:
    c560:	2804d53a 	srli	r2,r5,20
    c564:	3806d53a 	srli	r3,r7,20
    c568:	02000434 	movhi	r8,16
    c56c:	423fffc4 	addi	r8,r8,-1
    c570:	1081ffcc 	andi	r2,r2,2047
    c574:	0281ffc4 	movi	r10,2047
    c578:	2a12703a 	and	r9,r5,r8
    c57c:	18c1ffcc 	andi	r3,r3,2047
    c580:	3a10703a 	and	r8,r7,r8
    c584:	280ad7fa 	srli	r5,r5,31
    c588:	380ed7fa 	srli	r7,r7,31
    c58c:	12801026 	beq	r2,r10,c5d0 <__eqdf2+0x70>
    c590:	0281ffc4 	movi	r10,2047
    c594:	1a800a26 	beq	r3,r10,c5c0 <__eqdf2+0x60>
    c598:	10c00226 	beq	r2,r3,c5a4 <__eqdf2+0x44>
    c59c:	00800044 	movi	r2,1
    c5a0:	f800283a 	ret
    c5a4:	4a3ffd1e 	bne	r9,r8,c59c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c59c>
    c5a8:	21bffc1e 	bne	r4,r6,c59c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c59c>
    c5ac:	29c00c26 	beq	r5,r7,c5e0 <__eqdf2+0x80>
    c5b0:	103ffa1e 	bne	r2,zero,c59c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c59c>
    c5b4:	2244b03a 	or	r2,r4,r9
    c5b8:	1004c03a 	cmpne	r2,r2,zero
    c5bc:	f800283a 	ret
    c5c0:	3214b03a 	or	r10,r6,r8
    c5c4:	503ff426 	beq	r10,zero,c598 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c598>
    c5c8:	00800044 	movi	r2,1
    c5cc:	f800283a 	ret
    c5d0:	2254b03a 	or	r10,r4,r9
    c5d4:	503fee26 	beq	r10,zero,c590 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c590>
    c5d8:	00800044 	movi	r2,1
    c5dc:	f800283a 	ret
    c5e0:	0005883a 	mov	r2,zero
    c5e4:	f800283a 	ret

0000c5e8 <__gedf2>:
    c5e8:	2804d53a 	srli	r2,r5,20
    c5ec:	3806d53a 	srli	r3,r7,20
    c5f0:	02000434 	movhi	r8,16
    c5f4:	423fffc4 	addi	r8,r8,-1
    c5f8:	1081ffcc 	andi	r2,r2,2047
    c5fc:	0241ffc4 	movi	r9,2047
    c600:	2a14703a 	and	r10,r5,r8
    c604:	18c1ffcc 	andi	r3,r3,2047
    c608:	3a10703a 	and	r8,r7,r8
    c60c:	280ad7fa 	srli	r5,r5,31
    c610:	380ed7fa 	srli	r7,r7,31
    c614:	12401d26 	beq	r2,r9,c68c <__gedf2+0xa4>
    c618:	0241ffc4 	movi	r9,2047
    c61c:	1a401226 	beq	r3,r9,c668 <__gedf2+0x80>
    c620:	1000081e 	bne	r2,zero,c644 <__gedf2+0x5c>
    c624:	2296b03a 	or	r11,r4,r10
    c628:	5813003a 	cmpeq	r9,r11,zero
    c62c:	1800091e 	bne	r3,zero,c654 <__gedf2+0x6c>
    c630:	3218b03a 	or	r12,r6,r8
    c634:	6000071e 	bne	r12,zero,c654 <__gedf2+0x6c>
    c638:	0005883a 	mov	r2,zero
    c63c:	5800101e 	bne	r11,zero,c680 <__gedf2+0x98>
    c640:	f800283a 	ret
    c644:	18000c1e 	bne	r3,zero,c678 <__gedf2+0x90>
    c648:	3212b03a 	or	r9,r6,r8
    c64c:	48000c26 	beq	r9,zero,c680 <__gedf2+0x98>
    c650:	0013883a 	mov	r9,zero
    c654:	39c03fcc 	andi	r7,r7,255
    c658:	48000826 	beq	r9,zero,c67c <__gedf2+0x94>
    c65c:	38000926 	beq	r7,zero,c684 <__gedf2+0x9c>
    c660:	00800044 	movi	r2,1
    c664:	f800283a 	ret
    c668:	3212b03a 	or	r9,r6,r8
    c66c:	483fec26 	beq	r9,zero,c620 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c620>
    c670:	00bfff84 	movi	r2,-2
    c674:	f800283a 	ret
    c678:	39c03fcc 	andi	r7,r7,255
    c67c:	29c00626 	beq	r5,r7,c698 <__gedf2+0xb0>
    c680:	283ff726 	beq	r5,zero,c660 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c660>
    c684:	00bfffc4 	movi	r2,-1
    c688:	f800283a 	ret
    c68c:	2292b03a 	or	r9,r4,r10
    c690:	483fe126 	beq	r9,zero,c618 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c618>
    c694:	003ff606 	br	c670 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c670>
    c698:	18bff916 	blt	r3,r2,c680 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c680>
    c69c:	10c00316 	blt	r2,r3,c6ac <__gedf2+0xc4>
    c6a0:	42bff736 	bltu	r8,r10,c680 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c680>
    c6a4:	52000326 	beq	r10,r8,c6b4 <__gedf2+0xcc>
    c6a8:	5200042e 	bgeu	r10,r8,c6bc <__gedf2+0xd4>
    c6ac:	283fec1e 	bne	r5,zero,c660 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c660>
    c6b0:	003ff406 	br	c684 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c684>
    c6b4:	313ff236 	bltu	r6,r4,c680 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c680>
    c6b8:	21bffc36 	bltu	r4,r6,c6ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c6ac>
    c6bc:	0005883a 	mov	r2,zero
    c6c0:	f800283a 	ret

0000c6c4 <__ledf2>:
    c6c4:	2804d53a 	srli	r2,r5,20
    c6c8:	3810d53a 	srli	r8,r7,20
    c6cc:	00c00434 	movhi	r3,16
    c6d0:	18ffffc4 	addi	r3,r3,-1
    c6d4:	1081ffcc 	andi	r2,r2,2047
    c6d8:	0241ffc4 	movi	r9,2047
    c6dc:	28d4703a 	and	r10,r5,r3
    c6e0:	4201ffcc 	andi	r8,r8,2047
    c6e4:	38c6703a 	and	r3,r7,r3
    c6e8:	280ad7fa 	srli	r5,r5,31
    c6ec:	380ed7fa 	srli	r7,r7,31
    c6f0:	12401f26 	beq	r2,r9,c770 <__ledf2+0xac>
    c6f4:	0241ffc4 	movi	r9,2047
    c6f8:	42401426 	beq	r8,r9,c74c <__ledf2+0x88>
    c6fc:	1000091e 	bne	r2,zero,c724 <__ledf2+0x60>
    c700:	2296b03a 	or	r11,r4,r10
    c704:	5813003a 	cmpeq	r9,r11,zero
    c708:	29403fcc 	andi	r5,r5,255
    c70c:	40000a1e 	bne	r8,zero,c738 <__ledf2+0x74>
    c710:	30d8b03a 	or	r12,r6,r3
    c714:	6000081e 	bne	r12,zero,c738 <__ledf2+0x74>
    c718:	0005883a 	mov	r2,zero
    c71c:	5800111e 	bne	r11,zero,c764 <__ledf2+0xa0>
    c720:	f800283a 	ret
    c724:	29403fcc 	andi	r5,r5,255
    c728:	40000c1e 	bne	r8,zero,c75c <__ledf2+0x98>
    c72c:	30d2b03a 	or	r9,r6,r3
    c730:	48000c26 	beq	r9,zero,c764 <__ledf2+0xa0>
    c734:	0013883a 	mov	r9,zero
    c738:	39c03fcc 	andi	r7,r7,255
    c73c:	48000826 	beq	r9,zero,c760 <__ledf2+0x9c>
    c740:	38001126 	beq	r7,zero,c788 <__ledf2+0xc4>
    c744:	00800044 	movi	r2,1
    c748:	f800283a 	ret
    c74c:	30d2b03a 	or	r9,r6,r3
    c750:	483fea26 	beq	r9,zero,c6fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c6fc>
    c754:	00800084 	movi	r2,2
    c758:	f800283a 	ret
    c75c:	39c03fcc 	andi	r7,r7,255
    c760:	39400726 	beq	r7,r5,c780 <__ledf2+0xbc>
    c764:	2800081e 	bne	r5,zero,c788 <__ledf2+0xc4>
    c768:	00800044 	movi	r2,1
    c76c:	f800283a 	ret
    c770:	2292b03a 	or	r9,r4,r10
    c774:	483fdf26 	beq	r9,zero,c6f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c6f4>
    c778:	00800084 	movi	r2,2
    c77c:	f800283a 	ret
    c780:	4080030e 	bge	r8,r2,c790 <__ledf2+0xcc>
    c784:	383fef26 	beq	r7,zero,c744 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c744>
    c788:	00bfffc4 	movi	r2,-1
    c78c:	f800283a 	ret
    c790:	123feb16 	blt	r2,r8,c740 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c740>
    c794:	1abff336 	bltu	r3,r10,c764 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c764>
    c798:	50c00326 	beq	r10,r3,c7a8 <__ledf2+0xe4>
    c79c:	50c0042e 	bgeu	r10,r3,c7b0 <__ledf2+0xec>
    c7a0:	283fe81e 	bne	r5,zero,c744 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c744>
    c7a4:	003ff806 	br	c788 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c788>
    c7a8:	313fee36 	bltu	r6,r4,c764 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c764>
    c7ac:	21bffc36 	bltu	r4,r6,c7a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c7a0>
    c7b0:	0005883a 	mov	r2,zero
    c7b4:	f800283a 	ret

0000c7b8 <__muldf3>:
    c7b8:	defff304 	addi	sp,sp,-52
    c7bc:	2804d53a 	srli	r2,r5,20
    c7c0:	dd800915 	stw	r22,36(sp)
    c7c4:	282cd7fa 	srli	r22,r5,31
    c7c8:	dc000315 	stw	r16,12(sp)
    c7cc:	04000434 	movhi	r16,16
    c7d0:	dd400815 	stw	r21,32(sp)
    c7d4:	dc800515 	stw	r18,20(sp)
    c7d8:	843fffc4 	addi	r16,r16,-1
    c7dc:	dfc00c15 	stw	ra,48(sp)
    c7e0:	df000b15 	stw	fp,44(sp)
    c7e4:	ddc00a15 	stw	r23,40(sp)
    c7e8:	dd000715 	stw	r20,28(sp)
    c7ec:	dcc00615 	stw	r19,24(sp)
    c7f0:	dc400415 	stw	r17,16(sp)
    c7f4:	1481ffcc 	andi	r18,r2,2047
    c7f8:	2c20703a 	and	r16,r5,r16
    c7fc:	b02b883a 	mov	r21,r22
    c800:	b2403fcc 	andi	r9,r22,255
    c804:	90006026 	beq	r18,zero,c988 <__muldf3+0x1d0>
    c808:	0081ffc4 	movi	r2,2047
    c80c:	2029883a 	mov	r20,r4
    c810:	90803626 	beq	r18,r2,c8ec <__muldf3+0x134>
    c814:	80800434 	orhi	r2,r16,16
    c818:	100490fa 	slli	r2,r2,3
    c81c:	2020d77a 	srli	r16,r4,29
    c820:	202890fa 	slli	r20,r4,3
    c824:	94bf0044 	addi	r18,r18,-1023
    c828:	80a0b03a 	or	r16,r16,r2
    c82c:	0027883a 	mov	r19,zero
    c830:	0039883a 	mov	fp,zero
    c834:	3804d53a 	srli	r2,r7,20
    c838:	382ed7fa 	srli	r23,r7,31
    c83c:	04400434 	movhi	r17,16
    c840:	8c7fffc4 	addi	r17,r17,-1
    c844:	1081ffcc 	andi	r2,r2,2047
    c848:	3011883a 	mov	r8,r6
    c84c:	3c62703a 	and	r17,r7,r17
    c850:	ba803fcc 	andi	r10,r23,255
    c854:	10006d26 	beq	r2,zero,ca0c <__muldf3+0x254>
    c858:	00c1ffc4 	movi	r3,2047
    c85c:	10c06526 	beq	r2,r3,c9f4 <__muldf3+0x23c>
    c860:	88c00434 	orhi	r3,r17,16
    c864:	180690fa 	slli	r3,r3,3
    c868:	3022d77a 	srli	r17,r6,29
    c86c:	301090fa 	slli	r8,r6,3
    c870:	10bf0044 	addi	r2,r2,-1023
    c874:	88e2b03a 	or	r17,r17,r3
    c878:	000b883a 	mov	r5,zero
    c87c:	9085883a 	add	r2,r18,r2
    c880:	2cc8b03a 	or	r4,r5,r19
    c884:	00c003c4 	movi	r3,15
    c888:	bdacf03a 	xor	r22,r23,r22
    c88c:	12c00044 	addi	r11,r2,1
    c890:	19009936 	bltu	r3,r4,caf8 <__muldf3+0x340>
    c894:	200890ba 	slli	r4,r4,2
    c898:	00c00074 	movhi	r3,1
    c89c:	18f22b04 	addi	r3,r3,-14164
    c8a0:	20c9883a 	add	r4,r4,r3
    c8a4:	20c00017 	ldw	r3,0(r4)
    c8a8:	1800683a 	jmp	r3
    c8ac:	0000caf8 	rdprs	zero,zero,811
    c8b0:	0000c90c 	andi	zero,zero,804
    c8b4:	0000c90c 	andi	zero,zero,804
    c8b8:	0000c908 	cmpgei	zero,zero,804
    c8bc:	0000cad4 	movui	zero,811
    c8c0:	0000cad4 	movui	zero,811
    c8c4:	0000cabc 	xorhi	zero,zero,810
    c8c8:	0000c908 	cmpgei	zero,zero,804
    c8cc:	0000cad4 	movui	zero,811
    c8d0:	0000cabc 	xorhi	zero,zero,810
    c8d4:	0000cad4 	movui	zero,811
    c8d8:	0000c908 	cmpgei	zero,zero,804
    c8dc:	0000cae4 	muli	zero,zero,811
    c8e0:	0000cae4 	muli	zero,zero,811
    c8e4:	0000cae4 	muli	zero,zero,811
    c8e8:	0000cd00 	call	cd0 <main+0xa4c>
    c8ec:	2404b03a 	or	r2,r4,r16
    c8f0:	10006f1e 	bne	r2,zero,cab0 <__muldf3+0x2f8>
    c8f4:	04c00204 	movi	r19,8
    c8f8:	0021883a 	mov	r16,zero
    c8fc:	0029883a 	mov	r20,zero
    c900:	07000084 	movi	fp,2
    c904:	003fcb06 	br	c834 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c834>
    c908:	502d883a 	mov	r22,r10
    c90c:	00800084 	movi	r2,2
    c910:	28805726 	beq	r5,r2,ca70 <__muldf3+0x2b8>
    c914:	008000c4 	movi	r2,3
    c918:	28816626 	beq	r5,r2,ceb4 <__muldf3+0x6fc>
    c91c:	00800044 	movi	r2,1
    c920:	2881411e 	bne	r5,r2,ce28 <__muldf3+0x670>
    c924:	b02b883a 	mov	r21,r22
    c928:	0005883a 	mov	r2,zero
    c92c:	000b883a 	mov	r5,zero
    c930:	0029883a 	mov	r20,zero
    c934:	1004953a 	slli	r2,r2,20
    c938:	a8c03fcc 	andi	r3,r21,255
    c93c:	04400434 	movhi	r17,16
    c940:	8c7fffc4 	addi	r17,r17,-1
    c944:	180697fa 	slli	r3,r3,31
    c948:	2c4a703a 	and	r5,r5,r17
    c94c:	288ab03a 	or	r5,r5,r2
    c950:	28c6b03a 	or	r3,r5,r3
    c954:	a005883a 	mov	r2,r20
    c958:	dfc00c17 	ldw	ra,48(sp)
    c95c:	df000b17 	ldw	fp,44(sp)
    c960:	ddc00a17 	ldw	r23,40(sp)
    c964:	dd800917 	ldw	r22,36(sp)
    c968:	dd400817 	ldw	r21,32(sp)
    c96c:	dd000717 	ldw	r20,28(sp)
    c970:	dcc00617 	ldw	r19,24(sp)
    c974:	dc800517 	ldw	r18,20(sp)
    c978:	dc400417 	ldw	r17,16(sp)
    c97c:	dc000317 	ldw	r16,12(sp)
    c980:	dec00d04 	addi	sp,sp,52
    c984:	f800283a 	ret
    c988:	2404b03a 	or	r2,r4,r16
    c98c:	2027883a 	mov	r19,r4
    c990:	10004226 	beq	r2,zero,ca9c <__muldf3+0x2e4>
    c994:	8000fc26 	beq	r16,zero,cd88 <__muldf3+0x5d0>
    c998:	8009883a 	mov	r4,r16
    c99c:	d9800215 	stw	r6,8(sp)
    c9a0:	d9c00015 	stw	r7,0(sp)
    c9a4:	da400115 	stw	r9,4(sp)
    c9a8:	000d9d00 	call	d9d0 <__clzsi2>
    c9ac:	d9800217 	ldw	r6,8(sp)
    c9b0:	d9c00017 	ldw	r7,0(sp)
    c9b4:	da400117 	ldw	r9,4(sp)
    c9b8:	113ffd44 	addi	r4,r2,-11
    c9bc:	00c00704 	movi	r3,28
    c9c0:	1900ed16 	blt	r3,r4,cd78 <__muldf3+0x5c0>
    c9c4:	00c00744 	movi	r3,29
    c9c8:	147ffe04 	addi	r17,r2,-8
    c9cc:	1907c83a 	sub	r3,r3,r4
    c9d0:	8460983a 	sll	r16,r16,r17
    c9d4:	98c6d83a 	srl	r3,r19,r3
    c9d8:	9c68983a 	sll	r20,r19,r17
    c9dc:	1c20b03a 	or	r16,r3,r16
    c9e0:	1080fcc4 	addi	r2,r2,1011
    c9e4:	00a5c83a 	sub	r18,zero,r2
    c9e8:	0027883a 	mov	r19,zero
    c9ec:	0039883a 	mov	fp,zero
    c9f0:	003f9006 	br	c834 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c834>
    c9f4:	3446b03a 	or	r3,r6,r17
    c9f8:	1800261e 	bne	r3,zero,ca94 <__muldf3+0x2dc>
    c9fc:	0023883a 	mov	r17,zero
    ca00:	0011883a 	mov	r8,zero
    ca04:	01400084 	movi	r5,2
    ca08:	003f9c06 	br	c87c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c87c>
    ca0c:	3446b03a 	or	r3,r6,r17
    ca10:	18001c26 	beq	r3,zero,ca84 <__muldf3+0x2cc>
    ca14:	8800ce26 	beq	r17,zero,cd50 <__muldf3+0x598>
    ca18:	8809883a 	mov	r4,r17
    ca1c:	d9800215 	stw	r6,8(sp)
    ca20:	da400115 	stw	r9,4(sp)
    ca24:	da800015 	stw	r10,0(sp)
    ca28:	000d9d00 	call	d9d0 <__clzsi2>
    ca2c:	d9800217 	ldw	r6,8(sp)
    ca30:	da400117 	ldw	r9,4(sp)
    ca34:	da800017 	ldw	r10,0(sp)
    ca38:	113ffd44 	addi	r4,r2,-11
    ca3c:	00c00704 	movi	r3,28
    ca40:	1900bf16 	blt	r3,r4,cd40 <__muldf3+0x588>
    ca44:	00c00744 	movi	r3,29
    ca48:	123ffe04 	addi	r8,r2,-8
    ca4c:	1907c83a 	sub	r3,r3,r4
    ca50:	8a22983a 	sll	r17,r17,r8
    ca54:	30c6d83a 	srl	r3,r6,r3
    ca58:	3210983a 	sll	r8,r6,r8
    ca5c:	1c62b03a 	or	r17,r3,r17
    ca60:	1080fcc4 	addi	r2,r2,1011
    ca64:	0085c83a 	sub	r2,zero,r2
    ca68:	000b883a 	mov	r5,zero
    ca6c:	003f8306 	br	c87c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c87c>
    ca70:	b02b883a 	mov	r21,r22
    ca74:	0081ffc4 	movi	r2,2047
    ca78:	000b883a 	mov	r5,zero
    ca7c:	0029883a 	mov	r20,zero
    ca80:	003fac06 	br	c934 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c934>
    ca84:	0023883a 	mov	r17,zero
    ca88:	0011883a 	mov	r8,zero
    ca8c:	01400044 	movi	r5,1
    ca90:	003f7a06 	br	c87c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c87c>
    ca94:	014000c4 	movi	r5,3
    ca98:	003f7806 	br	c87c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c87c>
    ca9c:	04c00104 	movi	r19,4
    caa0:	0021883a 	mov	r16,zero
    caa4:	0029883a 	mov	r20,zero
    caa8:	07000044 	movi	fp,1
    caac:	003f6106 	br	c834 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c834>
    cab0:	04c00304 	movi	r19,12
    cab4:	070000c4 	movi	fp,3
    cab8:	003f5e06 	br	c834 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c834>
    cabc:	01400434 	movhi	r5,16
    cac0:	002b883a 	mov	r21,zero
    cac4:	297fffc4 	addi	r5,r5,-1
    cac8:	053fffc4 	movi	r20,-1
    cacc:	0081ffc4 	movi	r2,2047
    cad0:	003f9806 	br	c934 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c934>
    cad4:	8023883a 	mov	r17,r16
    cad8:	a011883a 	mov	r8,r20
    cadc:	e00b883a 	mov	r5,fp
    cae0:	003f8a06 	br	c90c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c90c>
    cae4:	8023883a 	mov	r17,r16
    cae8:	a011883a 	mov	r8,r20
    caec:	482d883a 	mov	r22,r9
    caf0:	e00b883a 	mov	r5,fp
    caf4:	003f8506 	br	c90c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c90c>
    caf8:	a00ad43a 	srli	r5,r20,16
    cafc:	401ad43a 	srli	r13,r8,16
    cb00:	a53fffcc 	andi	r20,r20,65535
    cb04:	423fffcc 	andi	r8,r8,65535
    cb08:	4519383a 	mul	r12,r8,r20
    cb0c:	4147383a 	mul	r3,r8,r5
    cb10:	6d09383a 	mul	r4,r13,r20
    cb14:	600cd43a 	srli	r6,r12,16
    cb18:	2b5d383a 	mul	r14,r5,r13
    cb1c:	20c9883a 	add	r4,r4,r3
    cb20:	310d883a 	add	r6,r6,r4
    cb24:	30c0022e 	bgeu	r6,r3,cb30 <__muldf3+0x378>
    cb28:	00c00074 	movhi	r3,1
    cb2c:	70dd883a 	add	r14,r14,r3
    cb30:	8826d43a 	srli	r19,r17,16
    cb34:	8bffffcc 	andi	r15,r17,65535
    cb38:	7d23383a 	mul	r17,r15,r20
    cb3c:	7949383a 	mul	r4,r15,r5
    cb40:	9d29383a 	mul	r20,r19,r20
    cb44:	8814d43a 	srli	r10,r17,16
    cb48:	3012943a 	slli	r9,r6,16
    cb4c:	a129883a 	add	r20,r20,r4
    cb50:	633fffcc 	andi	r12,r12,65535
    cb54:	5515883a 	add	r10,r10,r20
    cb58:	3006d43a 	srli	r3,r6,16
    cb5c:	4b13883a 	add	r9,r9,r12
    cb60:	2ccb383a 	mul	r5,r5,r19
    cb64:	5100022e 	bgeu	r10,r4,cb70 <__muldf3+0x3b8>
    cb68:	01000074 	movhi	r4,1
    cb6c:	290b883a 	add	r5,r5,r4
    cb70:	802ad43a 	srli	r21,r16,16
    cb74:	843fffcc 	andi	r16,r16,65535
    cb78:	440d383a 	mul	r6,r8,r16
    cb7c:	4565383a 	mul	r18,r8,r21
    cb80:	8349383a 	mul	r4,r16,r13
    cb84:	500e943a 	slli	r7,r10,16
    cb88:	3010d43a 	srli	r8,r6,16
    cb8c:	5028d43a 	srli	r20,r10,16
    cb90:	2489883a 	add	r4,r4,r18
    cb94:	8abfffcc 	andi	r10,r17,65535
    cb98:	3a95883a 	add	r10,r7,r10
    cb9c:	4119883a 	add	r12,r8,r4
    cba0:	a169883a 	add	r20,r20,r5
    cba4:	1a87883a 	add	r3,r3,r10
    cba8:	6d5b383a 	mul	r13,r13,r21
    cbac:	6480022e 	bgeu	r12,r18,cbb8 <__muldf3+0x400>
    cbb0:	01000074 	movhi	r4,1
    cbb4:	691b883a 	add	r13,r13,r4
    cbb8:	7c25383a 	mul	r18,r15,r16
    cbbc:	7d4b383a 	mul	r5,r15,r21
    cbc0:	84cf383a 	mul	r7,r16,r19
    cbc4:	901ed43a 	srli	r15,r18,16
    cbc8:	6008d43a 	srli	r4,r12,16
    cbcc:	6010943a 	slli	r8,r12,16
    cbd0:	394f883a 	add	r7,r7,r5
    cbd4:	333fffcc 	andi	r12,r6,65535
    cbd8:	79df883a 	add	r15,r15,r7
    cbdc:	235b883a 	add	r13,r4,r13
    cbe0:	9d63383a 	mul	r17,r19,r21
    cbe4:	4309883a 	add	r4,r8,r12
    cbe8:	7940022e 	bgeu	r15,r5,cbf4 <__muldf3+0x43c>
    cbec:	01400074 	movhi	r5,1
    cbf0:	8963883a 	add	r17,r17,r5
    cbf4:	780a943a 	slli	r5,r15,16
    cbf8:	91bfffcc 	andi	r6,r18,65535
    cbfc:	70c7883a 	add	r3,r14,r3
    cc00:	298d883a 	add	r6,r5,r6
    cc04:	1a8f803a 	cmpltu	r7,r3,r10
    cc08:	350b883a 	add	r5,r6,r20
    cc0c:	20c7883a 	add	r3,r4,r3
    cc10:	3955883a 	add	r10,r7,r5
    cc14:	1909803a 	cmpltu	r4,r3,r4
    cc18:	6a91883a 	add	r8,r13,r10
    cc1c:	780cd43a 	srli	r6,r15,16
    cc20:	2219883a 	add	r12,r4,r8
    cc24:	2d0b803a 	cmpltu	r5,r5,r20
    cc28:	51cf803a 	cmpltu	r7,r10,r7
    cc2c:	29ceb03a 	or	r7,r5,r7
    cc30:	4351803a 	cmpltu	r8,r8,r13
    cc34:	610b803a 	cmpltu	r5,r12,r4
    cc38:	4148b03a 	or	r4,r8,r5
    cc3c:	398f883a 	add	r7,r7,r6
    cc40:	3909883a 	add	r4,r7,r4
    cc44:	1810927a 	slli	r8,r3,9
    cc48:	2449883a 	add	r4,r4,r17
    cc4c:	2008927a 	slli	r4,r4,9
    cc50:	6022d5fa 	srli	r17,r12,23
    cc54:	1806d5fa 	srli	r3,r3,23
    cc58:	4252b03a 	or	r9,r8,r9
    cc5c:	600a927a 	slli	r5,r12,9
    cc60:	4810c03a 	cmpne	r8,r9,zero
    cc64:	2462b03a 	or	r17,r4,r17
    cc68:	40c6b03a 	or	r3,r8,r3
    cc6c:	8900402c 	andhi	r4,r17,256
    cc70:	1950b03a 	or	r8,r3,r5
    cc74:	20000726 	beq	r4,zero,cc94 <__muldf3+0x4dc>
    cc78:	4006d07a 	srli	r3,r8,1
    cc7c:	880497fa 	slli	r2,r17,31
    cc80:	4200004c 	andi	r8,r8,1
    cc84:	8822d07a 	srli	r17,r17,1
    cc88:	1a10b03a 	or	r8,r3,r8
    cc8c:	1210b03a 	or	r8,r2,r8
    cc90:	5805883a 	mov	r2,r11
    cc94:	1140ffc4 	addi	r5,r2,1023
    cc98:	0140440e 	bge	zero,r5,cdac <__muldf3+0x5f4>
    cc9c:	40c001cc 	andi	r3,r8,7
    cca0:	18000726 	beq	r3,zero,ccc0 <__muldf3+0x508>
    cca4:	40c003cc 	andi	r3,r8,15
    cca8:	01000104 	movi	r4,4
    ccac:	19000426 	beq	r3,r4,ccc0 <__muldf3+0x508>
    ccb0:	4107883a 	add	r3,r8,r4
    ccb4:	1a11803a 	cmpltu	r8,r3,r8
    ccb8:	8a23883a 	add	r17,r17,r8
    ccbc:	1811883a 	mov	r8,r3
    ccc0:	88c0402c 	andhi	r3,r17,256
    ccc4:	18000426 	beq	r3,zero,ccd8 <__muldf3+0x520>
    ccc8:	11410004 	addi	r5,r2,1024
    cccc:	00bfc034 	movhi	r2,65280
    ccd0:	10bfffc4 	addi	r2,r2,-1
    ccd4:	88a2703a 	and	r17,r17,r2
    ccd8:	0081ff84 	movi	r2,2046
    ccdc:	117f6416 	blt	r2,r5,ca70 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ca70>
    cce0:	8828977a 	slli	r20,r17,29
    cce4:	4010d0fa 	srli	r8,r8,3
    cce8:	8822927a 	slli	r17,r17,9
    ccec:	2881ffcc 	andi	r2,r5,2047
    ccf0:	a228b03a 	or	r20,r20,r8
    ccf4:	880ad33a 	srli	r5,r17,12
    ccf8:	b02b883a 	mov	r21,r22
    ccfc:	003f0d06 	br	c934 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c934>
    cd00:	8080022c 	andhi	r2,r16,8
    cd04:	10000926 	beq	r2,zero,cd2c <__muldf3+0x574>
    cd08:	8880022c 	andhi	r2,r17,8
    cd0c:	1000071e 	bne	r2,zero,cd2c <__muldf3+0x574>
    cd10:	00800434 	movhi	r2,16
    cd14:	89400234 	orhi	r5,r17,8
    cd18:	10bfffc4 	addi	r2,r2,-1
    cd1c:	b82b883a 	mov	r21,r23
    cd20:	288a703a 	and	r5,r5,r2
    cd24:	4029883a 	mov	r20,r8
    cd28:	003f6806 	br	cacc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cacc>
    cd2c:	00800434 	movhi	r2,16
    cd30:	81400234 	orhi	r5,r16,8
    cd34:	10bfffc4 	addi	r2,r2,-1
    cd38:	288a703a 	and	r5,r5,r2
    cd3c:	003f6306 	br	cacc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cacc>
    cd40:	147ff604 	addi	r17,r2,-40
    cd44:	3462983a 	sll	r17,r6,r17
    cd48:	0011883a 	mov	r8,zero
    cd4c:	003f4406 	br	ca60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ca60>
    cd50:	3009883a 	mov	r4,r6
    cd54:	d9800215 	stw	r6,8(sp)
    cd58:	da400115 	stw	r9,4(sp)
    cd5c:	da800015 	stw	r10,0(sp)
    cd60:	000d9d00 	call	d9d0 <__clzsi2>
    cd64:	10800804 	addi	r2,r2,32
    cd68:	da800017 	ldw	r10,0(sp)
    cd6c:	da400117 	ldw	r9,4(sp)
    cd70:	d9800217 	ldw	r6,8(sp)
    cd74:	003f3006 	br	ca38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ca38>
    cd78:	143ff604 	addi	r16,r2,-40
    cd7c:	9c20983a 	sll	r16,r19,r16
    cd80:	0029883a 	mov	r20,zero
    cd84:	003f1606 	br	c9e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c9e0>
    cd88:	d9800215 	stw	r6,8(sp)
    cd8c:	d9c00015 	stw	r7,0(sp)
    cd90:	da400115 	stw	r9,4(sp)
    cd94:	000d9d00 	call	d9d0 <__clzsi2>
    cd98:	10800804 	addi	r2,r2,32
    cd9c:	da400117 	ldw	r9,4(sp)
    cda0:	d9c00017 	ldw	r7,0(sp)
    cda4:	d9800217 	ldw	r6,8(sp)
    cda8:	003f0306 	br	c9b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c9b8>
    cdac:	00c00044 	movi	r3,1
    cdb0:	1947c83a 	sub	r3,r3,r5
    cdb4:	00800e04 	movi	r2,56
    cdb8:	10feda16 	blt	r2,r3,c924 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c924>
    cdbc:	008007c4 	movi	r2,31
    cdc0:	10c01b16 	blt	r2,r3,ce30 <__muldf3+0x678>
    cdc4:	00800804 	movi	r2,32
    cdc8:	10c5c83a 	sub	r2,r2,r3
    cdcc:	888a983a 	sll	r5,r17,r2
    cdd0:	40c8d83a 	srl	r4,r8,r3
    cdd4:	4084983a 	sll	r2,r8,r2
    cdd8:	88e2d83a 	srl	r17,r17,r3
    cddc:	2906b03a 	or	r3,r5,r4
    cde0:	1004c03a 	cmpne	r2,r2,zero
    cde4:	1886b03a 	or	r3,r3,r2
    cde8:	188001cc 	andi	r2,r3,7
    cdec:	10000726 	beq	r2,zero,ce0c <__muldf3+0x654>
    cdf0:	188003cc 	andi	r2,r3,15
    cdf4:	01000104 	movi	r4,4
    cdf8:	11000426 	beq	r2,r4,ce0c <__muldf3+0x654>
    cdfc:	1805883a 	mov	r2,r3
    ce00:	10c00104 	addi	r3,r2,4
    ce04:	1885803a 	cmpltu	r2,r3,r2
    ce08:	88a3883a 	add	r17,r17,r2
    ce0c:	8880202c 	andhi	r2,r17,128
    ce10:	10001c26 	beq	r2,zero,ce84 <__muldf3+0x6cc>
    ce14:	b02b883a 	mov	r21,r22
    ce18:	00800044 	movi	r2,1
    ce1c:	000b883a 	mov	r5,zero
    ce20:	0029883a 	mov	r20,zero
    ce24:	003ec306 	br	c934 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c934>
    ce28:	5805883a 	mov	r2,r11
    ce2c:	003f9906 	br	cc94 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cc94>
    ce30:	00bff844 	movi	r2,-31
    ce34:	1145c83a 	sub	r2,r2,r5
    ce38:	8888d83a 	srl	r4,r17,r2
    ce3c:	00800804 	movi	r2,32
    ce40:	18801a26 	beq	r3,r2,ceac <__muldf3+0x6f4>
    ce44:	00801004 	movi	r2,64
    ce48:	10c5c83a 	sub	r2,r2,r3
    ce4c:	8884983a 	sll	r2,r17,r2
    ce50:	1204b03a 	or	r2,r2,r8
    ce54:	1004c03a 	cmpne	r2,r2,zero
    ce58:	2084b03a 	or	r2,r4,r2
    ce5c:	144001cc 	andi	r17,r2,7
    ce60:	88000d1e 	bne	r17,zero,ce98 <__muldf3+0x6e0>
    ce64:	000b883a 	mov	r5,zero
    ce68:	1028d0fa 	srli	r20,r2,3
    ce6c:	b02b883a 	mov	r21,r22
    ce70:	0005883a 	mov	r2,zero
    ce74:	a468b03a 	or	r20,r20,r17
    ce78:	003eae06 	br	c934 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c934>
    ce7c:	1007883a 	mov	r3,r2
    ce80:	0023883a 	mov	r17,zero
    ce84:	880a927a 	slli	r5,r17,9
    ce88:	1805883a 	mov	r2,r3
    ce8c:	8822977a 	slli	r17,r17,29
    ce90:	280ad33a 	srli	r5,r5,12
    ce94:	003ff406 	br	ce68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ce68>
    ce98:	10c003cc 	andi	r3,r2,15
    ce9c:	01000104 	movi	r4,4
    cea0:	193ff626 	beq	r3,r4,ce7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ce7c>
    cea4:	0023883a 	mov	r17,zero
    cea8:	003fd506 	br	ce00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ce00>
    ceac:	0005883a 	mov	r2,zero
    ceb0:	003fe706 	br	ce50 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ce50>
    ceb4:	00800434 	movhi	r2,16
    ceb8:	89400234 	orhi	r5,r17,8
    cebc:	10bfffc4 	addi	r2,r2,-1
    cec0:	b02b883a 	mov	r21,r22
    cec4:	288a703a 	and	r5,r5,r2
    cec8:	4029883a 	mov	r20,r8
    cecc:	003eff06 	br	cacc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cacc>

0000ced0 <__subdf3>:
    ced0:	02000434 	movhi	r8,16
    ced4:	423fffc4 	addi	r8,r8,-1
    ced8:	defffb04 	addi	sp,sp,-20
    cedc:	2a14703a 	and	r10,r5,r8
    cee0:	3812d53a 	srli	r9,r7,20
    cee4:	3a10703a 	and	r8,r7,r8
    cee8:	2006d77a 	srli	r3,r4,29
    ceec:	3004d77a 	srli	r2,r6,29
    cef0:	dc000015 	stw	r16,0(sp)
    cef4:	501490fa 	slli	r10,r10,3
    cef8:	2820d53a 	srli	r16,r5,20
    cefc:	401090fa 	slli	r8,r8,3
    cf00:	dc800215 	stw	r18,8(sp)
    cf04:	dc400115 	stw	r17,4(sp)
    cf08:	dfc00415 	stw	ra,16(sp)
    cf0c:	202290fa 	slli	r17,r4,3
    cf10:	dcc00315 	stw	r19,12(sp)
    cf14:	4a41ffcc 	andi	r9,r9,2047
    cf18:	0101ffc4 	movi	r4,2047
    cf1c:	2824d7fa 	srli	r18,r5,31
    cf20:	8401ffcc 	andi	r16,r16,2047
    cf24:	50c6b03a 	or	r3,r10,r3
    cf28:	380ed7fa 	srli	r7,r7,31
    cf2c:	408ab03a 	or	r5,r8,r2
    cf30:	300c90fa 	slli	r6,r6,3
    cf34:	49009626 	beq	r9,r4,d190 <__subdf3+0x2c0>
    cf38:	39c0005c 	xori	r7,r7,1
    cf3c:	8245c83a 	sub	r2,r16,r9
    cf40:	3c807426 	beq	r7,r18,d114 <__subdf3+0x244>
    cf44:	0080af0e 	bge	zero,r2,d204 <__subdf3+0x334>
    cf48:	48002a1e 	bne	r9,zero,cff4 <__subdf3+0x124>
    cf4c:	2988b03a 	or	r4,r5,r6
    cf50:	20009a1e 	bne	r4,zero,d1bc <__subdf3+0x2ec>
    cf54:	888001cc 	andi	r2,r17,7
    cf58:	10000726 	beq	r2,zero,cf78 <__subdf3+0xa8>
    cf5c:	888003cc 	andi	r2,r17,15
    cf60:	01000104 	movi	r4,4
    cf64:	11000426 	beq	r2,r4,cf78 <__subdf3+0xa8>
    cf68:	890b883a 	add	r5,r17,r4
    cf6c:	2c63803a 	cmpltu	r17,r5,r17
    cf70:	1c47883a 	add	r3,r3,r17
    cf74:	2823883a 	mov	r17,r5
    cf78:	1880202c 	andhi	r2,r3,128
    cf7c:	10005926 	beq	r2,zero,d0e4 <__subdf3+0x214>
    cf80:	84000044 	addi	r16,r16,1
    cf84:	0081ffc4 	movi	r2,2047
    cf88:	8080be26 	beq	r16,r2,d284 <__subdf3+0x3b4>
    cf8c:	017fe034 	movhi	r5,65408
    cf90:	297fffc4 	addi	r5,r5,-1
    cf94:	1946703a 	and	r3,r3,r5
    cf98:	1804977a 	slli	r2,r3,29
    cf9c:	1806927a 	slli	r3,r3,9
    cfa0:	8822d0fa 	srli	r17,r17,3
    cfa4:	8401ffcc 	andi	r16,r16,2047
    cfa8:	180ad33a 	srli	r5,r3,12
    cfac:	9100004c 	andi	r4,r18,1
    cfb0:	1444b03a 	or	r2,r2,r17
    cfb4:	80c1ffcc 	andi	r3,r16,2047
    cfb8:	1820953a 	slli	r16,r3,20
    cfbc:	20c03fcc 	andi	r3,r4,255
    cfc0:	180897fa 	slli	r4,r3,31
    cfc4:	00c00434 	movhi	r3,16
    cfc8:	18ffffc4 	addi	r3,r3,-1
    cfcc:	28c6703a 	and	r3,r5,r3
    cfd0:	1c06b03a 	or	r3,r3,r16
    cfd4:	1906b03a 	or	r3,r3,r4
    cfd8:	dfc00417 	ldw	ra,16(sp)
    cfdc:	dcc00317 	ldw	r19,12(sp)
    cfe0:	dc800217 	ldw	r18,8(sp)
    cfe4:	dc400117 	ldw	r17,4(sp)
    cfe8:	dc000017 	ldw	r16,0(sp)
    cfec:	dec00504 	addi	sp,sp,20
    cff0:	f800283a 	ret
    cff4:	0101ffc4 	movi	r4,2047
    cff8:	813fd626 	beq	r16,r4,cf54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cf54>
    cffc:	29402034 	orhi	r5,r5,128
    d000:	01000e04 	movi	r4,56
    d004:	2080a316 	blt	r4,r2,d294 <__subdf3+0x3c4>
    d008:	010007c4 	movi	r4,31
    d00c:	2080c616 	blt	r4,r2,d328 <__subdf3+0x458>
    d010:	01000804 	movi	r4,32
    d014:	2089c83a 	sub	r4,r4,r2
    d018:	2910983a 	sll	r8,r5,r4
    d01c:	308ed83a 	srl	r7,r6,r2
    d020:	3108983a 	sll	r4,r6,r4
    d024:	2884d83a 	srl	r2,r5,r2
    d028:	41ccb03a 	or	r6,r8,r7
    d02c:	2008c03a 	cmpne	r4,r4,zero
    d030:	310cb03a 	or	r6,r6,r4
    d034:	898dc83a 	sub	r6,r17,r6
    d038:	89a3803a 	cmpltu	r17,r17,r6
    d03c:	1887c83a 	sub	r3,r3,r2
    d040:	1c47c83a 	sub	r3,r3,r17
    d044:	3023883a 	mov	r17,r6
    d048:	1880202c 	andhi	r2,r3,128
    d04c:	10002326 	beq	r2,zero,d0dc <__subdf3+0x20c>
    d050:	04c02034 	movhi	r19,128
    d054:	9cffffc4 	addi	r19,r19,-1
    d058:	1ce6703a 	and	r19,r3,r19
    d05c:	98007a26 	beq	r19,zero,d248 <__subdf3+0x378>
    d060:	9809883a 	mov	r4,r19
    d064:	000d9d00 	call	d9d0 <__clzsi2>
    d068:	113ffe04 	addi	r4,r2,-8
    d06c:	00c007c4 	movi	r3,31
    d070:	19007b16 	blt	r3,r4,d260 <__subdf3+0x390>
    d074:	00800804 	movi	r2,32
    d078:	1105c83a 	sub	r2,r2,r4
    d07c:	8884d83a 	srl	r2,r17,r2
    d080:	9906983a 	sll	r3,r19,r4
    d084:	8922983a 	sll	r17,r17,r4
    d088:	10c4b03a 	or	r2,r2,r3
    d08c:	24007816 	blt	r4,r16,d270 <__subdf3+0x3a0>
    d090:	2421c83a 	sub	r16,r4,r16
    d094:	80c00044 	addi	r3,r16,1
    d098:	010007c4 	movi	r4,31
    d09c:	20c09516 	blt	r4,r3,d2f4 <__subdf3+0x424>
    d0a0:	01400804 	movi	r5,32
    d0a4:	28cbc83a 	sub	r5,r5,r3
    d0a8:	88c8d83a 	srl	r4,r17,r3
    d0ac:	8962983a 	sll	r17,r17,r5
    d0b0:	114a983a 	sll	r5,r2,r5
    d0b4:	10c6d83a 	srl	r3,r2,r3
    d0b8:	8804c03a 	cmpne	r2,r17,zero
    d0bc:	290ab03a 	or	r5,r5,r4
    d0c0:	28a2b03a 	or	r17,r5,r2
    d0c4:	0021883a 	mov	r16,zero
    d0c8:	003fa206 	br	cf54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cf54>
    d0cc:	2090b03a 	or	r8,r4,r2
    d0d0:	40018e26 	beq	r8,zero,d70c <__subdf3+0x83c>
    d0d4:	1007883a 	mov	r3,r2
    d0d8:	2023883a 	mov	r17,r4
    d0dc:	888001cc 	andi	r2,r17,7
    d0e0:	103f9e1e 	bne	r2,zero,cf5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cf5c>
    d0e4:	1804977a 	slli	r2,r3,29
    d0e8:	8822d0fa 	srli	r17,r17,3
    d0ec:	1810d0fa 	srli	r8,r3,3
    d0f0:	9100004c 	andi	r4,r18,1
    d0f4:	1444b03a 	or	r2,r2,r17
    d0f8:	00c1ffc4 	movi	r3,2047
    d0fc:	80c02826 	beq	r16,r3,d1a0 <__subdf3+0x2d0>
    d100:	01400434 	movhi	r5,16
    d104:	297fffc4 	addi	r5,r5,-1
    d108:	80e0703a 	and	r16,r16,r3
    d10c:	414a703a 	and	r5,r8,r5
    d110:	003fa806 	br	cfb4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cfb4>
    d114:	0080630e 	bge	zero,r2,d2a4 <__subdf3+0x3d4>
    d118:	48003026 	beq	r9,zero,d1dc <__subdf3+0x30c>
    d11c:	0101ffc4 	movi	r4,2047
    d120:	813f8c26 	beq	r16,r4,cf54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cf54>
    d124:	29402034 	orhi	r5,r5,128
    d128:	01000e04 	movi	r4,56
    d12c:	2080a90e 	bge	r4,r2,d3d4 <__subdf3+0x504>
    d130:	298cb03a 	or	r6,r5,r6
    d134:	3012c03a 	cmpne	r9,r6,zero
    d138:	0005883a 	mov	r2,zero
    d13c:	4c53883a 	add	r9,r9,r17
    d140:	4c63803a 	cmpltu	r17,r9,r17
    d144:	10c7883a 	add	r3,r2,r3
    d148:	88c7883a 	add	r3,r17,r3
    d14c:	4823883a 	mov	r17,r9
    d150:	1880202c 	andhi	r2,r3,128
    d154:	1000d026 	beq	r2,zero,d498 <__subdf3+0x5c8>
    d158:	84000044 	addi	r16,r16,1
    d15c:	0081ffc4 	movi	r2,2047
    d160:	8080fe26 	beq	r16,r2,d55c <__subdf3+0x68c>
    d164:	00bfe034 	movhi	r2,65408
    d168:	10bfffc4 	addi	r2,r2,-1
    d16c:	1886703a 	and	r3,r3,r2
    d170:	880ad07a 	srli	r5,r17,1
    d174:	180497fa 	slli	r2,r3,31
    d178:	8900004c 	andi	r4,r17,1
    d17c:	2922b03a 	or	r17,r5,r4
    d180:	1806d07a 	srli	r3,r3,1
    d184:	1462b03a 	or	r17,r2,r17
    d188:	3825883a 	mov	r18,r7
    d18c:	003f7106 	br	cf54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cf54>
    d190:	2984b03a 	or	r2,r5,r6
    d194:	103f6826 	beq	r2,zero,cf38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cf38>
    d198:	39c03fcc 	andi	r7,r7,255
    d19c:	003f6706 	br	cf3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cf3c>
    d1a0:	4086b03a 	or	r3,r8,r2
    d1a4:	18015226 	beq	r3,zero,d6f0 <__subdf3+0x820>
    d1a8:	00c00434 	movhi	r3,16
    d1ac:	41400234 	orhi	r5,r8,8
    d1b0:	18ffffc4 	addi	r3,r3,-1
    d1b4:	28ca703a 	and	r5,r5,r3
    d1b8:	003f7e06 	br	cfb4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cfb4>
    d1bc:	10bfffc4 	addi	r2,r2,-1
    d1c0:	1000491e 	bne	r2,zero,d2e8 <__subdf3+0x418>
    d1c4:	898fc83a 	sub	r7,r17,r6
    d1c8:	89e3803a 	cmpltu	r17,r17,r7
    d1cc:	1947c83a 	sub	r3,r3,r5
    d1d0:	1c47c83a 	sub	r3,r3,r17
    d1d4:	3823883a 	mov	r17,r7
    d1d8:	003f9b06 	br	d048 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d048>
    d1dc:	2988b03a 	or	r4,r5,r6
    d1e0:	203f5c26 	beq	r4,zero,cf54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cf54>
    d1e4:	10bfffc4 	addi	r2,r2,-1
    d1e8:	1000931e 	bne	r2,zero,d438 <__subdf3+0x568>
    d1ec:	898d883a 	add	r6,r17,r6
    d1f0:	3463803a 	cmpltu	r17,r6,r17
    d1f4:	1947883a 	add	r3,r3,r5
    d1f8:	88c7883a 	add	r3,r17,r3
    d1fc:	3023883a 	mov	r17,r6
    d200:	003fd306 	br	d150 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d150>
    d204:	1000541e 	bne	r2,zero,d358 <__subdf3+0x488>
    d208:	80800044 	addi	r2,r16,1
    d20c:	1081ffcc 	andi	r2,r2,2047
    d210:	01000044 	movi	r4,1
    d214:	2080a20e 	bge	r4,r2,d4a0 <__subdf3+0x5d0>
    d218:	8989c83a 	sub	r4,r17,r6
    d21c:	8905803a 	cmpltu	r2,r17,r4
    d220:	1967c83a 	sub	r19,r3,r5
    d224:	98a7c83a 	sub	r19,r19,r2
    d228:	9880202c 	andhi	r2,r19,128
    d22c:	10006326 	beq	r2,zero,d3bc <__subdf3+0x4ec>
    d230:	3463c83a 	sub	r17,r6,r17
    d234:	28c7c83a 	sub	r3,r5,r3
    d238:	344d803a 	cmpltu	r6,r6,r17
    d23c:	19a7c83a 	sub	r19,r3,r6
    d240:	3825883a 	mov	r18,r7
    d244:	983f861e 	bne	r19,zero,d060 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d060>
    d248:	8809883a 	mov	r4,r17
    d24c:	000d9d00 	call	d9d0 <__clzsi2>
    d250:	10800804 	addi	r2,r2,32
    d254:	113ffe04 	addi	r4,r2,-8
    d258:	00c007c4 	movi	r3,31
    d25c:	193f850e 	bge	r3,r4,d074 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d074>
    d260:	10bff604 	addi	r2,r2,-40
    d264:	8884983a 	sll	r2,r17,r2
    d268:	0023883a 	mov	r17,zero
    d26c:	243f880e 	bge	r4,r16,d090 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d090>
    d270:	00ffe034 	movhi	r3,65408
    d274:	18ffffc4 	addi	r3,r3,-1
    d278:	8121c83a 	sub	r16,r16,r4
    d27c:	10c6703a 	and	r3,r2,r3
    d280:	003f3406 	br	cf54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cf54>
    d284:	9100004c 	andi	r4,r18,1
    d288:	000b883a 	mov	r5,zero
    d28c:	0005883a 	mov	r2,zero
    d290:	003f4806 	br	cfb4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cfb4>
    d294:	298cb03a 	or	r6,r5,r6
    d298:	300cc03a 	cmpne	r6,r6,zero
    d29c:	0005883a 	mov	r2,zero
    d2a0:	003f6406 	br	d034 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d034>
    d2a4:	10009a1e 	bne	r2,zero,d510 <__subdf3+0x640>
    d2a8:	82400044 	addi	r9,r16,1
    d2ac:	4881ffcc 	andi	r2,r9,2047
    d2b0:	02800044 	movi	r10,1
    d2b4:	5080670e 	bge	r10,r2,d454 <__subdf3+0x584>
    d2b8:	0081ffc4 	movi	r2,2047
    d2bc:	4880af26 	beq	r9,r2,d57c <__subdf3+0x6ac>
    d2c0:	898d883a 	add	r6,r17,r6
    d2c4:	1945883a 	add	r2,r3,r5
    d2c8:	3447803a 	cmpltu	r3,r6,r17
    d2cc:	1887883a 	add	r3,r3,r2
    d2d0:	182297fa 	slli	r17,r3,31
    d2d4:	300cd07a 	srli	r6,r6,1
    d2d8:	1806d07a 	srli	r3,r3,1
    d2dc:	4821883a 	mov	r16,r9
    d2e0:	89a2b03a 	or	r17,r17,r6
    d2e4:	003f1b06 	br	cf54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cf54>
    d2e8:	0101ffc4 	movi	r4,2047
    d2ec:	813f441e 	bne	r16,r4,d000 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d000>
    d2f0:	003f1806 	br	cf54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cf54>
    d2f4:	843ff844 	addi	r16,r16,-31
    d2f8:	01400804 	movi	r5,32
    d2fc:	1408d83a 	srl	r4,r2,r16
    d300:	19405026 	beq	r3,r5,d444 <__subdf3+0x574>
    d304:	01401004 	movi	r5,64
    d308:	28c7c83a 	sub	r3,r5,r3
    d30c:	10c4983a 	sll	r2,r2,r3
    d310:	88a2b03a 	or	r17,r17,r2
    d314:	8822c03a 	cmpne	r17,r17,zero
    d318:	2462b03a 	or	r17,r4,r17
    d31c:	0007883a 	mov	r3,zero
    d320:	0021883a 	mov	r16,zero
    d324:	003f6d06 	br	d0dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d0dc>
    d328:	11fff804 	addi	r7,r2,-32
    d32c:	01000804 	movi	r4,32
    d330:	29ced83a 	srl	r7,r5,r7
    d334:	11004526 	beq	r2,r4,d44c <__subdf3+0x57c>
    d338:	01001004 	movi	r4,64
    d33c:	2089c83a 	sub	r4,r4,r2
    d340:	2904983a 	sll	r2,r5,r4
    d344:	118cb03a 	or	r6,r2,r6
    d348:	300cc03a 	cmpne	r6,r6,zero
    d34c:	398cb03a 	or	r6,r7,r6
    d350:	0005883a 	mov	r2,zero
    d354:	003f3706 	br	d034 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d034>
    d358:	80002a26 	beq	r16,zero,d404 <__subdf3+0x534>
    d35c:	0101ffc4 	movi	r4,2047
    d360:	49006626 	beq	r9,r4,d4fc <__subdf3+0x62c>
    d364:	0085c83a 	sub	r2,zero,r2
    d368:	18c02034 	orhi	r3,r3,128
    d36c:	01000e04 	movi	r4,56
    d370:	20807e16 	blt	r4,r2,d56c <__subdf3+0x69c>
    d374:	010007c4 	movi	r4,31
    d378:	2080e716 	blt	r4,r2,d718 <__subdf3+0x848>
    d37c:	01000804 	movi	r4,32
    d380:	2089c83a 	sub	r4,r4,r2
    d384:	1914983a 	sll	r10,r3,r4
    d388:	8890d83a 	srl	r8,r17,r2
    d38c:	8908983a 	sll	r4,r17,r4
    d390:	1884d83a 	srl	r2,r3,r2
    d394:	5222b03a 	or	r17,r10,r8
    d398:	2006c03a 	cmpne	r3,r4,zero
    d39c:	88e2b03a 	or	r17,r17,r3
    d3a0:	3463c83a 	sub	r17,r6,r17
    d3a4:	2885c83a 	sub	r2,r5,r2
    d3a8:	344d803a 	cmpltu	r6,r6,r17
    d3ac:	1187c83a 	sub	r3,r2,r6
    d3b0:	4821883a 	mov	r16,r9
    d3b4:	3825883a 	mov	r18,r7
    d3b8:	003f2306 	br	d048 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d048>
    d3bc:	24d0b03a 	or	r8,r4,r19
    d3c0:	40001b1e 	bne	r8,zero,d430 <__subdf3+0x560>
    d3c4:	0005883a 	mov	r2,zero
    d3c8:	0009883a 	mov	r4,zero
    d3cc:	0021883a 	mov	r16,zero
    d3d0:	003f4906 	br	d0f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d0f8>
    d3d4:	010007c4 	movi	r4,31
    d3d8:	20803a16 	blt	r4,r2,d4c4 <__subdf3+0x5f4>
    d3dc:	01000804 	movi	r4,32
    d3e0:	2089c83a 	sub	r4,r4,r2
    d3e4:	2912983a 	sll	r9,r5,r4
    d3e8:	3090d83a 	srl	r8,r6,r2
    d3ec:	3108983a 	sll	r4,r6,r4
    d3f0:	2884d83a 	srl	r2,r5,r2
    d3f4:	4a12b03a 	or	r9,r9,r8
    d3f8:	2008c03a 	cmpne	r4,r4,zero
    d3fc:	4912b03a 	or	r9,r9,r4
    d400:	003f4e06 	br	d13c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d13c>
    d404:	1c48b03a 	or	r4,r3,r17
    d408:	20003c26 	beq	r4,zero,d4fc <__subdf3+0x62c>
    d40c:	0084303a 	nor	r2,zero,r2
    d410:	1000381e 	bne	r2,zero,d4f4 <__subdf3+0x624>
    d414:	3463c83a 	sub	r17,r6,r17
    d418:	28c5c83a 	sub	r2,r5,r3
    d41c:	344d803a 	cmpltu	r6,r6,r17
    d420:	1187c83a 	sub	r3,r2,r6
    d424:	4821883a 	mov	r16,r9
    d428:	3825883a 	mov	r18,r7
    d42c:	003f0606 	br	d048 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d048>
    d430:	2023883a 	mov	r17,r4
    d434:	003f0906 	br	d05c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d05c>
    d438:	0101ffc4 	movi	r4,2047
    d43c:	813f3a1e 	bne	r16,r4,d128 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d128>
    d440:	003ec406 	br	cf54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cf54>
    d444:	0005883a 	mov	r2,zero
    d448:	003fb106 	br	d310 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d310>
    d44c:	0005883a 	mov	r2,zero
    d450:	003fbc06 	br	d344 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d344>
    d454:	1c44b03a 	or	r2,r3,r17
    d458:	80008e1e 	bne	r16,zero,d694 <__subdf3+0x7c4>
    d45c:	1000c826 	beq	r2,zero,d780 <__subdf3+0x8b0>
    d460:	2984b03a 	or	r2,r5,r6
    d464:	103ebb26 	beq	r2,zero,cf54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cf54>
    d468:	8989883a 	add	r4,r17,r6
    d46c:	1945883a 	add	r2,r3,r5
    d470:	2447803a 	cmpltu	r3,r4,r17
    d474:	1887883a 	add	r3,r3,r2
    d478:	1880202c 	andhi	r2,r3,128
    d47c:	2023883a 	mov	r17,r4
    d480:	103f1626 	beq	r2,zero,d0dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d0dc>
    d484:	00bfe034 	movhi	r2,65408
    d488:	10bfffc4 	addi	r2,r2,-1
    d48c:	5021883a 	mov	r16,r10
    d490:	1886703a 	and	r3,r3,r2
    d494:	003eaf06 	br	cf54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cf54>
    d498:	3825883a 	mov	r18,r7
    d49c:	003f0f06 	br	d0dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d0dc>
    d4a0:	1c44b03a 	or	r2,r3,r17
    d4a4:	8000251e 	bne	r16,zero,d53c <__subdf3+0x66c>
    d4a8:	1000661e 	bne	r2,zero,d644 <__subdf3+0x774>
    d4ac:	2990b03a 	or	r8,r5,r6
    d4b0:	40009626 	beq	r8,zero,d70c <__subdf3+0x83c>
    d4b4:	2807883a 	mov	r3,r5
    d4b8:	3023883a 	mov	r17,r6
    d4bc:	3825883a 	mov	r18,r7
    d4c0:	003ea406 	br	cf54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cf54>
    d4c4:	127ff804 	addi	r9,r2,-32
    d4c8:	01000804 	movi	r4,32
    d4cc:	2a52d83a 	srl	r9,r5,r9
    d4d0:	11008c26 	beq	r2,r4,d704 <__subdf3+0x834>
    d4d4:	01001004 	movi	r4,64
    d4d8:	2085c83a 	sub	r2,r4,r2
    d4dc:	2884983a 	sll	r2,r5,r2
    d4e0:	118cb03a 	or	r6,r2,r6
    d4e4:	300cc03a 	cmpne	r6,r6,zero
    d4e8:	4992b03a 	or	r9,r9,r6
    d4ec:	0005883a 	mov	r2,zero
    d4f0:	003f1206 	br	d13c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d13c>
    d4f4:	0101ffc4 	movi	r4,2047
    d4f8:	493f9c1e 	bne	r9,r4,d36c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d36c>
    d4fc:	2807883a 	mov	r3,r5
    d500:	3023883a 	mov	r17,r6
    d504:	4821883a 	mov	r16,r9
    d508:	3825883a 	mov	r18,r7
    d50c:	003e9106 	br	cf54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cf54>
    d510:	80001f1e 	bne	r16,zero,d590 <__subdf3+0x6c0>
    d514:	1c48b03a 	or	r4,r3,r17
    d518:	20005a26 	beq	r4,zero,d684 <__subdf3+0x7b4>
    d51c:	0084303a 	nor	r2,zero,r2
    d520:	1000561e 	bne	r2,zero,d67c <__subdf3+0x7ac>
    d524:	89a3883a 	add	r17,r17,r6
    d528:	1945883a 	add	r2,r3,r5
    d52c:	898d803a 	cmpltu	r6,r17,r6
    d530:	3087883a 	add	r3,r6,r2
    d534:	4821883a 	mov	r16,r9
    d538:	003f0506 	br	d150 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d150>
    d53c:	10002b1e 	bne	r2,zero,d5ec <__subdf3+0x71c>
    d540:	2984b03a 	or	r2,r5,r6
    d544:	10008026 	beq	r2,zero,d748 <__subdf3+0x878>
    d548:	2807883a 	mov	r3,r5
    d54c:	3023883a 	mov	r17,r6
    d550:	3825883a 	mov	r18,r7
    d554:	0401ffc4 	movi	r16,2047
    d558:	003e7e06 	br	cf54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cf54>
    d55c:	3809883a 	mov	r4,r7
    d560:	0011883a 	mov	r8,zero
    d564:	0005883a 	mov	r2,zero
    d568:	003ee306 	br	d0f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d0f8>
    d56c:	1c62b03a 	or	r17,r3,r17
    d570:	8822c03a 	cmpne	r17,r17,zero
    d574:	0005883a 	mov	r2,zero
    d578:	003f8906 	br	d3a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d3a0>
    d57c:	3809883a 	mov	r4,r7
    d580:	4821883a 	mov	r16,r9
    d584:	0011883a 	mov	r8,zero
    d588:	0005883a 	mov	r2,zero
    d58c:	003eda06 	br	d0f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d0f8>
    d590:	0101ffc4 	movi	r4,2047
    d594:	49003b26 	beq	r9,r4,d684 <__subdf3+0x7b4>
    d598:	0085c83a 	sub	r2,zero,r2
    d59c:	18c02034 	orhi	r3,r3,128
    d5a0:	01000e04 	movi	r4,56
    d5a4:	20806e16 	blt	r4,r2,d760 <__subdf3+0x890>
    d5a8:	010007c4 	movi	r4,31
    d5ac:	20807716 	blt	r4,r2,d78c <__subdf3+0x8bc>
    d5b0:	01000804 	movi	r4,32
    d5b4:	2089c83a 	sub	r4,r4,r2
    d5b8:	1914983a 	sll	r10,r3,r4
    d5bc:	8890d83a 	srl	r8,r17,r2
    d5c0:	8908983a 	sll	r4,r17,r4
    d5c4:	1884d83a 	srl	r2,r3,r2
    d5c8:	5222b03a 	or	r17,r10,r8
    d5cc:	2006c03a 	cmpne	r3,r4,zero
    d5d0:	88e2b03a 	or	r17,r17,r3
    d5d4:	89a3883a 	add	r17,r17,r6
    d5d8:	1145883a 	add	r2,r2,r5
    d5dc:	898d803a 	cmpltu	r6,r17,r6
    d5e0:	3087883a 	add	r3,r6,r2
    d5e4:	4821883a 	mov	r16,r9
    d5e8:	003ed906 	br	d150 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d150>
    d5ec:	2984b03a 	or	r2,r5,r6
    d5f0:	10004226 	beq	r2,zero,d6fc <__subdf3+0x82c>
    d5f4:	1808d0fa 	srli	r4,r3,3
    d5f8:	8822d0fa 	srli	r17,r17,3
    d5fc:	1806977a 	slli	r3,r3,29
    d600:	2080022c 	andhi	r2,r4,8
    d604:	1c62b03a 	or	r17,r3,r17
    d608:	10000826 	beq	r2,zero,d62c <__subdf3+0x75c>
    d60c:	2812d0fa 	srli	r9,r5,3
    d610:	4880022c 	andhi	r2,r9,8
    d614:	1000051e 	bne	r2,zero,d62c <__subdf3+0x75c>
    d618:	300cd0fa 	srli	r6,r6,3
    d61c:	2804977a 	slli	r2,r5,29
    d620:	4809883a 	mov	r4,r9
    d624:	3825883a 	mov	r18,r7
    d628:	11a2b03a 	or	r17,r2,r6
    d62c:	8806d77a 	srli	r3,r17,29
    d630:	200890fa 	slli	r4,r4,3
    d634:	882290fa 	slli	r17,r17,3
    d638:	0401ffc4 	movi	r16,2047
    d63c:	1906b03a 	or	r3,r3,r4
    d640:	003e4406 	br	cf54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cf54>
    d644:	2984b03a 	or	r2,r5,r6
    d648:	103e4226 	beq	r2,zero,cf54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cf54>
    d64c:	8989c83a 	sub	r4,r17,r6
    d650:	8911803a 	cmpltu	r8,r17,r4
    d654:	1945c83a 	sub	r2,r3,r5
    d658:	1205c83a 	sub	r2,r2,r8
    d65c:	1200202c 	andhi	r8,r2,128
    d660:	403e9a26 	beq	r8,zero,d0cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d0cc>
    d664:	3463c83a 	sub	r17,r6,r17
    d668:	28c5c83a 	sub	r2,r5,r3
    d66c:	344d803a 	cmpltu	r6,r6,r17
    d670:	1187c83a 	sub	r3,r2,r6
    d674:	3825883a 	mov	r18,r7
    d678:	003e3606 	br	cf54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cf54>
    d67c:	0101ffc4 	movi	r4,2047
    d680:	493fc71e 	bne	r9,r4,d5a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d5a0>
    d684:	2807883a 	mov	r3,r5
    d688:	3023883a 	mov	r17,r6
    d68c:	4821883a 	mov	r16,r9
    d690:	003e3006 	br	cf54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cf54>
    d694:	10003626 	beq	r2,zero,d770 <__subdf3+0x8a0>
    d698:	2984b03a 	or	r2,r5,r6
    d69c:	10001726 	beq	r2,zero,d6fc <__subdf3+0x82c>
    d6a0:	1808d0fa 	srli	r4,r3,3
    d6a4:	8822d0fa 	srli	r17,r17,3
    d6a8:	1806977a 	slli	r3,r3,29
    d6ac:	2080022c 	andhi	r2,r4,8
    d6b0:	1c62b03a 	or	r17,r3,r17
    d6b4:	10000726 	beq	r2,zero,d6d4 <__subdf3+0x804>
    d6b8:	2812d0fa 	srli	r9,r5,3
    d6bc:	4880022c 	andhi	r2,r9,8
    d6c0:	1000041e 	bne	r2,zero,d6d4 <__subdf3+0x804>
    d6c4:	300cd0fa 	srli	r6,r6,3
    d6c8:	2804977a 	slli	r2,r5,29
    d6cc:	4809883a 	mov	r4,r9
    d6d0:	11a2b03a 	or	r17,r2,r6
    d6d4:	8806d77a 	srli	r3,r17,29
    d6d8:	200890fa 	slli	r4,r4,3
    d6dc:	882290fa 	slli	r17,r17,3
    d6e0:	3825883a 	mov	r18,r7
    d6e4:	1906b03a 	or	r3,r3,r4
    d6e8:	0401ffc4 	movi	r16,2047
    d6ec:	003e1906 	br	cf54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cf54>
    d6f0:	000b883a 	mov	r5,zero
    d6f4:	0005883a 	mov	r2,zero
    d6f8:	003e2e06 	br	cfb4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cfb4>
    d6fc:	0401ffc4 	movi	r16,2047
    d700:	003e1406 	br	cf54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cf54>
    d704:	0005883a 	mov	r2,zero
    d708:	003f7506 	br	d4e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d4e0>
    d70c:	0005883a 	mov	r2,zero
    d710:	0009883a 	mov	r4,zero
    d714:	003e7806 	br	d0f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d0f8>
    d718:	123ff804 	addi	r8,r2,-32
    d71c:	01000804 	movi	r4,32
    d720:	1a10d83a 	srl	r8,r3,r8
    d724:	11002526 	beq	r2,r4,d7bc <__subdf3+0x8ec>
    d728:	01001004 	movi	r4,64
    d72c:	2085c83a 	sub	r2,r4,r2
    d730:	1884983a 	sll	r2,r3,r2
    d734:	1444b03a 	or	r2,r2,r17
    d738:	1004c03a 	cmpne	r2,r2,zero
    d73c:	40a2b03a 	or	r17,r8,r2
    d740:	0005883a 	mov	r2,zero
    d744:	003f1606 	br	d3a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d3a0>
    d748:	02000434 	movhi	r8,16
    d74c:	0009883a 	mov	r4,zero
    d750:	423fffc4 	addi	r8,r8,-1
    d754:	00bfffc4 	movi	r2,-1
    d758:	0401ffc4 	movi	r16,2047
    d75c:	003e6606 	br	d0f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d0f8>
    d760:	1c62b03a 	or	r17,r3,r17
    d764:	8822c03a 	cmpne	r17,r17,zero
    d768:	0005883a 	mov	r2,zero
    d76c:	003f9906 	br	d5d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d5d4>
    d770:	2807883a 	mov	r3,r5
    d774:	3023883a 	mov	r17,r6
    d778:	0401ffc4 	movi	r16,2047
    d77c:	003df506 	br	cf54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cf54>
    d780:	2807883a 	mov	r3,r5
    d784:	3023883a 	mov	r17,r6
    d788:	003df206 	br	cf54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cf54>
    d78c:	123ff804 	addi	r8,r2,-32
    d790:	01000804 	movi	r4,32
    d794:	1a10d83a 	srl	r8,r3,r8
    d798:	11000a26 	beq	r2,r4,d7c4 <__subdf3+0x8f4>
    d79c:	01001004 	movi	r4,64
    d7a0:	2085c83a 	sub	r2,r4,r2
    d7a4:	1884983a 	sll	r2,r3,r2
    d7a8:	1444b03a 	or	r2,r2,r17
    d7ac:	1004c03a 	cmpne	r2,r2,zero
    d7b0:	40a2b03a 	or	r17,r8,r2
    d7b4:	0005883a 	mov	r2,zero
    d7b8:	003f8606 	br	d5d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d5d4>
    d7bc:	0005883a 	mov	r2,zero
    d7c0:	003fdc06 	br	d734 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d734>
    d7c4:	0005883a 	mov	r2,zero
    d7c8:	003ff706 	br	d7a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d7a8>

0000d7cc <__fixdfsi>:
    d7cc:	280cd53a 	srli	r6,r5,20
    d7d0:	00c00434 	movhi	r3,16
    d7d4:	18ffffc4 	addi	r3,r3,-1
    d7d8:	3181ffcc 	andi	r6,r6,2047
    d7dc:	01c0ff84 	movi	r7,1022
    d7e0:	28c6703a 	and	r3,r5,r3
    d7e4:	280ad7fa 	srli	r5,r5,31
    d7e8:	3980120e 	bge	r7,r6,d834 <__fixdfsi+0x68>
    d7ec:	00810744 	movi	r2,1053
    d7f0:	11800c16 	blt	r2,r6,d824 <__fixdfsi+0x58>
    d7f4:	00810cc4 	movi	r2,1075
    d7f8:	1185c83a 	sub	r2,r2,r6
    d7fc:	01c007c4 	movi	r7,31
    d800:	18c00434 	orhi	r3,r3,16
    d804:	38800d16 	blt	r7,r2,d83c <__fixdfsi+0x70>
    d808:	31befb44 	addi	r6,r6,-1043
    d80c:	2084d83a 	srl	r2,r4,r2
    d810:	1986983a 	sll	r3,r3,r6
    d814:	1884b03a 	or	r2,r3,r2
    d818:	28000726 	beq	r5,zero,d838 <__fixdfsi+0x6c>
    d81c:	0085c83a 	sub	r2,zero,r2
    d820:	f800283a 	ret
    d824:	00a00034 	movhi	r2,32768
    d828:	10bfffc4 	addi	r2,r2,-1
    d82c:	2885883a 	add	r2,r5,r2
    d830:	f800283a 	ret
    d834:	0005883a 	mov	r2,zero
    d838:	f800283a 	ret
    d83c:	008104c4 	movi	r2,1043
    d840:	1185c83a 	sub	r2,r2,r6
    d844:	1884d83a 	srl	r2,r3,r2
    d848:	003ff306 	br	d818 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d818>

0000d84c <__floatsidf>:
    d84c:	defffd04 	addi	sp,sp,-12
    d850:	dfc00215 	stw	ra,8(sp)
    d854:	dc400115 	stw	r17,4(sp)
    d858:	dc000015 	stw	r16,0(sp)
    d85c:	20002b26 	beq	r4,zero,d90c <__floatsidf+0xc0>
    d860:	2023883a 	mov	r17,r4
    d864:	2020d7fa 	srli	r16,r4,31
    d868:	20002d16 	blt	r4,zero,d920 <__floatsidf+0xd4>
    d86c:	8809883a 	mov	r4,r17
    d870:	000d9d00 	call	d9d0 <__clzsi2>
    d874:	01410784 	movi	r5,1054
    d878:	288bc83a 	sub	r5,r5,r2
    d87c:	01010cc4 	movi	r4,1075
    d880:	2149c83a 	sub	r4,r4,r5
    d884:	00c007c4 	movi	r3,31
    d888:	1900160e 	bge	r3,r4,d8e4 <__floatsidf+0x98>
    d88c:	00c104c4 	movi	r3,1043
    d890:	1947c83a 	sub	r3,r3,r5
    d894:	88c6983a 	sll	r3,r17,r3
    d898:	00800434 	movhi	r2,16
    d89c:	10bfffc4 	addi	r2,r2,-1
    d8a0:	1886703a 	and	r3,r3,r2
    d8a4:	2941ffcc 	andi	r5,r5,2047
    d8a8:	800d883a 	mov	r6,r16
    d8ac:	0005883a 	mov	r2,zero
    d8b0:	280a953a 	slli	r5,r5,20
    d8b4:	31803fcc 	andi	r6,r6,255
    d8b8:	01000434 	movhi	r4,16
    d8bc:	300c97fa 	slli	r6,r6,31
    d8c0:	213fffc4 	addi	r4,r4,-1
    d8c4:	1906703a 	and	r3,r3,r4
    d8c8:	1946b03a 	or	r3,r3,r5
    d8cc:	1986b03a 	or	r3,r3,r6
    d8d0:	dfc00217 	ldw	ra,8(sp)
    d8d4:	dc400117 	ldw	r17,4(sp)
    d8d8:	dc000017 	ldw	r16,0(sp)
    d8dc:	dec00304 	addi	sp,sp,12
    d8e0:	f800283a 	ret
    d8e4:	00c002c4 	movi	r3,11
    d8e8:	1887c83a 	sub	r3,r3,r2
    d8ec:	88c6d83a 	srl	r3,r17,r3
    d8f0:	8904983a 	sll	r2,r17,r4
    d8f4:	01000434 	movhi	r4,16
    d8f8:	213fffc4 	addi	r4,r4,-1
    d8fc:	2941ffcc 	andi	r5,r5,2047
    d900:	1906703a 	and	r3,r3,r4
    d904:	800d883a 	mov	r6,r16
    d908:	003fe906 	br	d8b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d8b0>
    d90c:	000d883a 	mov	r6,zero
    d910:	000b883a 	mov	r5,zero
    d914:	0007883a 	mov	r3,zero
    d918:	0005883a 	mov	r2,zero
    d91c:	003fe406 	br	d8b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d8b0>
    d920:	0123c83a 	sub	r17,zero,r4
    d924:	003fd106 	br	d86c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d86c>

0000d928 <__floatunsidf>:
    d928:	defffe04 	addi	sp,sp,-8
    d92c:	dc000015 	stw	r16,0(sp)
    d930:	dfc00115 	stw	ra,4(sp)
    d934:	2021883a 	mov	r16,r4
    d938:	20002226 	beq	r4,zero,d9c4 <__floatunsidf+0x9c>
    d93c:	000d9d00 	call	d9d0 <__clzsi2>
    d940:	01010784 	movi	r4,1054
    d944:	2089c83a 	sub	r4,r4,r2
    d948:	01810cc4 	movi	r6,1075
    d94c:	310dc83a 	sub	r6,r6,r4
    d950:	00c007c4 	movi	r3,31
    d954:	1980120e 	bge	r3,r6,d9a0 <__floatunsidf+0x78>
    d958:	00c104c4 	movi	r3,1043
    d95c:	1907c83a 	sub	r3,r3,r4
    d960:	80ca983a 	sll	r5,r16,r3
    d964:	00800434 	movhi	r2,16
    d968:	10bfffc4 	addi	r2,r2,-1
    d96c:	2101ffcc 	andi	r4,r4,2047
    d970:	0021883a 	mov	r16,zero
    d974:	288a703a 	and	r5,r5,r2
    d978:	2008953a 	slli	r4,r4,20
    d97c:	00c00434 	movhi	r3,16
    d980:	18ffffc4 	addi	r3,r3,-1
    d984:	28c6703a 	and	r3,r5,r3
    d988:	8005883a 	mov	r2,r16
    d98c:	1906b03a 	or	r3,r3,r4
    d990:	dfc00117 	ldw	ra,4(sp)
    d994:	dc000017 	ldw	r16,0(sp)
    d998:	dec00204 	addi	sp,sp,8
    d99c:	f800283a 	ret
    d9a0:	00c002c4 	movi	r3,11
    d9a4:	188bc83a 	sub	r5,r3,r2
    d9a8:	814ad83a 	srl	r5,r16,r5
    d9ac:	00c00434 	movhi	r3,16
    d9b0:	18ffffc4 	addi	r3,r3,-1
    d9b4:	81a0983a 	sll	r16,r16,r6
    d9b8:	2101ffcc 	andi	r4,r4,2047
    d9bc:	28ca703a 	and	r5,r5,r3
    d9c0:	003fed06 	br	d978 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d978>
    d9c4:	0009883a 	mov	r4,zero
    d9c8:	000b883a 	mov	r5,zero
    d9cc:	003fea06 	br	d978 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d978>

0000d9d0 <__clzsi2>:
    d9d0:	00bfffd4 	movui	r2,65535
    d9d4:	11000536 	bltu	r2,r4,d9ec <__clzsi2+0x1c>
    d9d8:	00803fc4 	movi	r2,255
    d9dc:	11000f36 	bltu	r2,r4,da1c <__clzsi2+0x4c>
    d9e0:	00800804 	movi	r2,32
    d9e4:	0007883a 	mov	r3,zero
    d9e8:	00000506 	br	da00 <__clzsi2+0x30>
    d9ec:	00804034 	movhi	r2,256
    d9f0:	10bfffc4 	addi	r2,r2,-1
    d9f4:	11000c2e 	bgeu	r2,r4,da28 <__clzsi2+0x58>
    d9f8:	00800204 	movi	r2,8
    d9fc:	00c00604 	movi	r3,24
    da00:	20c8d83a 	srl	r4,r4,r3
    da04:	00c00074 	movhi	r3,1
    da08:	18dced04 	addi	r3,r3,29620
    da0c:	1909883a 	add	r4,r3,r4
    da10:	20c00003 	ldbu	r3,0(r4)
    da14:	10c5c83a 	sub	r2,r2,r3
    da18:	f800283a 	ret
    da1c:	00800604 	movi	r2,24
    da20:	00c00204 	movi	r3,8
    da24:	003ff606 	br	da00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700da00>
    da28:	00800404 	movi	r2,16
    da2c:	1007883a 	mov	r3,r2
    da30:	003ff306 	br	da00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700da00>

0000da34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    da34:	defffe04 	addi	sp,sp,-8
    da38:	dfc00115 	stw	ra,4(sp)
    da3c:	df000015 	stw	fp,0(sp)
    da40:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    da44:	d0a00b17 	ldw	r2,-32724(gp)
    da48:	10000326 	beq	r2,zero,da58 <alt_get_errno+0x24>
    da4c:	d0a00b17 	ldw	r2,-32724(gp)
    da50:	103ee83a 	callr	r2
    da54:	00000106 	br	da5c <alt_get_errno+0x28>
    da58:	d0a7ce04 	addi	r2,gp,-24776
}
    da5c:	e037883a 	mov	sp,fp
    da60:	dfc00117 	ldw	ra,4(sp)
    da64:	df000017 	ldw	fp,0(sp)
    da68:	dec00204 	addi	sp,sp,8
    da6c:	f800283a 	ret

0000da70 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    da70:	defffb04 	addi	sp,sp,-20
    da74:	dfc00415 	stw	ra,16(sp)
    da78:	df000315 	stw	fp,12(sp)
    da7c:	df000304 	addi	fp,sp,12
    da80:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    da84:	e0bfff17 	ldw	r2,-4(fp)
    da88:	10000616 	blt	r2,zero,daa4 <close+0x34>
    da8c:	e0bfff17 	ldw	r2,-4(fp)
    da90:	10c00324 	muli	r3,r2,12
    da94:	00800074 	movhi	r2,1
    da98:	109fd304 	addi	r2,r2,32588
    da9c:	1885883a 	add	r2,r3,r2
    daa0:	00000106 	br	daa8 <close+0x38>
    daa4:	0005883a 	mov	r2,zero
    daa8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    daac:	e0bffd17 	ldw	r2,-12(fp)
    dab0:	10001926 	beq	r2,zero,db18 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    dab4:	e0bffd17 	ldw	r2,-12(fp)
    dab8:	10800017 	ldw	r2,0(r2)
    dabc:	10800417 	ldw	r2,16(r2)
    dac0:	10000626 	beq	r2,zero,dadc <close+0x6c>
    dac4:	e0bffd17 	ldw	r2,-12(fp)
    dac8:	10800017 	ldw	r2,0(r2)
    dacc:	10800417 	ldw	r2,16(r2)
    dad0:	e13ffd17 	ldw	r4,-12(fp)
    dad4:	103ee83a 	callr	r2
    dad8:	00000106 	br	dae0 <close+0x70>
    dadc:	0005883a 	mov	r2,zero
    dae0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    dae4:	e13fff17 	ldw	r4,-4(fp)
    dae8:	000e3980 	call	e398 <alt_release_fd>
    if (rval < 0)
    daec:	e0bffe17 	ldw	r2,-8(fp)
    daf0:	1000070e 	bge	r2,zero,db10 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    daf4:	000da340 	call	da34 <alt_get_errno>
    daf8:	1007883a 	mov	r3,r2
    dafc:	e0bffe17 	ldw	r2,-8(fp)
    db00:	0085c83a 	sub	r2,zero,r2
    db04:	18800015 	stw	r2,0(r3)
      return -1;
    db08:	00bfffc4 	movi	r2,-1
    db0c:	00000706 	br	db2c <close+0xbc>
    }
    return 0;
    db10:	0005883a 	mov	r2,zero
    db14:	00000506 	br	db2c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    db18:	000da340 	call	da34 <alt_get_errno>
    db1c:	1007883a 	mov	r3,r2
    db20:	00801444 	movi	r2,81
    db24:	18800015 	stw	r2,0(r3)
    return -1;
    db28:	00bfffc4 	movi	r2,-1
  }
}
    db2c:	e037883a 	mov	sp,fp
    db30:	dfc00117 	ldw	ra,4(sp)
    db34:	df000017 	ldw	fp,0(sp)
    db38:	dec00204 	addi	sp,sp,8
    db3c:	f800283a 	ret

0000db40 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    db40:	defffc04 	addi	sp,sp,-16
    db44:	df000315 	stw	fp,12(sp)
    db48:	df000304 	addi	fp,sp,12
    db4c:	e13ffd15 	stw	r4,-12(fp)
    db50:	e17ffe15 	stw	r5,-8(fp)
    db54:	e1bfff15 	stw	r6,-4(fp)
  return len;
    db58:	e0bfff17 	ldw	r2,-4(fp)
}
    db5c:	e037883a 	mov	sp,fp
    db60:	df000017 	ldw	fp,0(sp)
    db64:	dec00104 	addi	sp,sp,4
    db68:	f800283a 	ret

0000db6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    db6c:	defffe04 	addi	sp,sp,-8
    db70:	dfc00115 	stw	ra,4(sp)
    db74:	df000015 	stw	fp,0(sp)
    db78:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    db7c:	d0a00b17 	ldw	r2,-32724(gp)
    db80:	10000326 	beq	r2,zero,db90 <alt_get_errno+0x24>
    db84:	d0a00b17 	ldw	r2,-32724(gp)
    db88:	103ee83a 	callr	r2
    db8c:	00000106 	br	db94 <alt_get_errno+0x28>
    db90:	d0a7ce04 	addi	r2,gp,-24776
}
    db94:	e037883a 	mov	sp,fp
    db98:	dfc00117 	ldw	ra,4(sp)
    db9c:	df000017 	ldw	fp,0(sp)
    dba0:	dec00204 	addi	sp,sp,8
    dba4:	f800283a 	ret

0000dba8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    dba8:	defffb04 	addi	sp,sp,-20
    dbac:	dfc00415 	stw	ra,16(sp)
    dbb0:	df000315 	stw	fp,12(sp)
    dbb4:	df000304 	addi	fp,sp,12
    dbb8:	e13ffe15 	stw	r4,-8(fp)
    dbbc:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    dbc0:	e0bffe17 	ldw	r2,-8(fp)
    dbc4:	10000616 	blt	r2,zero,dbe0 <fstat+0x38>
    dbc8:	e0bffe17 	ldw	r2,-8(fp)
    dbcc:	10c00324 	muli	r3,r2,12
    dbd0:	00800074 	movhi	r2,1
    dbd4:	109fd304 	addi	r2,r2,32588
    dbd8:	1885883a 	add	r2,r3,r2
    dbdc:	00000106 	br	dbe4 <fstat+0x3c>
    dbe0:	0005883a 	mov	r2,zero
    dbe4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    dbe8:	e0bffd17 	ldw	r2,-12(fp)
    dbec:	10001026 	beq	r2,zero,dc30 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    dbf0:	e0bffd17 	ldw	r2,-12(fp)
    dbf4:	10800017 	ldw	r2,0(r2)
    dbf8:	10800817 	ldw	r2,32(r2)
    dbfc:	10000726 	beq	r2,zero,dc1c <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    dc00:	e0bffd17 	ldw	r2,-12(fp)
    dc04:	10800017 	ldw	r2,0(r2)
    dc08:	10800817 	ldw	r2,32(r2)
    dc0c:	e17fff17 	ldw	r5,-4(fp)
    dc10:	e13ffd17 	ldw	r4,-12(fp)
    dc14:	103ee83a 	callr	r2
    dc18:	00000a06 	br	dc44 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    dc1c:	e0bfff17 	ldw	r2,-4(fp)
    dc20:	00c80004 	movi	r3,8192
    dc24:	10c00115 	stw	r3,4(r2)
      return 0;
    dc28:	0005883a 	mov	r2,zero
    dc2c:	00000506 	br	dc44 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    dc30:	000db6c0 	call	db6c <alt_get_errno>
    dc34:	1007883a 	mov	r3,r2
    dc38:	00801444 	movi	r2,81
    dc3c:	18800015 	stw	r2,0(r3)
    return -1;
    dc40:	00bfffc4 	movi	r2,-1
  }
}
    dc44:	e037883a 	mov	sp,fp
    dc48:	dfc00117 	ldw	ra,4(sp)
    dc4c:	df000017 	ldw	fp,0(sp)
    dc50:	dec00204 	addi	sp,sp,8
    dc54:	f800283a 	ret

0000dc58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    dc58:	defffe04 	addi	sp,sp,-8
    dc5c:	dfc00115 	stw	ra,4(sp)
    dc60:	df000015 	stw	fp,0(sp)
    dc64:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    dc68:	d0a00b17 	ldw	r2,-32724(gp)
    dc6c:	10000326 	beq	r2,zero,dc7c <alt_get_errno+0x24>
    dc70:	d0a00b17 	ldw	r2,-32724(gp)
    dc74:	103ee83a 	callr	r2
    dc78:	00000106 	br	dc80 <alt_get_errno+0x28>
    dc7c:	d0a7ce04 	addi	r2,gp,-24776
}
    dc80:	e037883a 	mov	sp,fp
    dc84:	dfc00117 	ldw	ra,4(sp)
    dc88:	df000017 	ldw	fp,0(sp)
    dc8c:	dec00204 	addi	sp,sp,8
    dc90:	f800283a 	ret

0000dc94 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    dc94:	deffed04 	addi	sp,sp,-76
    dc98:	dfc01215 	stw	ra,72(sp)
    dc9c:	df001115 	stw	fp,68(sp)
    dca0:	df001104 	addi	fp,sp,68
    dca4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    dca8:	e0bfff17 	ldw	r2,-4(fp)
    dcac:	10000616 	blt	r2,zero,dcc8 <isatty+0x34>
    dcb0:	e0bfff17 	ldw	r2,-4(fp)
    dcb4:	10c00324 	muli	r3,r2,12
    dcb8:	00800074 	movhi	r2,1
    dcbc:	109fd304 	addi	r2,r2,32588
    dcc0:	1885883a 	add	r2,r3,r2
    dcc4:	00000106 	br	dccc <isatty+0x38>
    dcc8:	0005883a 	mov	r2,zero
    dccc:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    dcd0:	e0bfef17 	ldw	r2,-68(fp)
    dcd4:	10000e26 	beq	r2,zero,dd10 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    dcd8:	e0bfef17 	ldw	r2,-68(fp)
    dcdc:	10800017 	ldw	r2,0(r2)
    dce0:	10800817 	ldw	r2,32(r2)
    dce4:	1000021e 	bne	r2,zero,dcf0 <isatty+0x5c>
    {
      return 1;
    dce8:	00800044 	movi	r2,1
    dcec:	00000d06 	br	dd24 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    dcf0:	e0bff004 	addi	r2,fp,-64
    dcf4:	100b883a 	mov	r5,r2
    dcf8:	e13fff17 	ldw	r4,-4(fp)
    dcfc:	000dba80 	call	dba8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    dd00:	e0bff117 	ldw	r2,-60(fp)
    dd04:	10880020 	cmpeqi	r2,r2,8192
    dd08:	10803fcc 	andi	r2,r2,255
    dd0c:	00000506 	br	dd24 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    dd10:	000dc580 	call	dc58 <alt_get_errno>
    dd14:	1007883a 	mov	r3,r2
    dd18:	00801444 	movi	r2,81
    dd1c:	18800015 	stw	r2,0(r3)
    return 0;
    dd20:	0005883a 	mov	r2,zero
  }
}
    dd24:	e037883a 	mov	sp,fp
    dd28:	dfc00117 	ldw	ra,4(sp)
    dd2c:	df000017 	ldw	fp,0(sp)
    dd30:	dec00204 	addi	sp,sp,8
    dd34:	f800283a 	ret

0000dd38 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    dd38:	defffc04 	addi	sp,sp,-16
    dd3c:	df000315 	stw	fp,12(sp)
    dd40:	df000304 	addi	fp,sp,12
    dd44:	e13ffd15 	stw	r4,-12(fp)
    dd48:	e17ffe15 	stw	r5,-8(fp)
    dd4c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    dd50:	e0fffe17 	ldw	r3,-8(fp)
    dd54:	e0bffd17 	ldw	r2,-12(fp)
    dd58:	18800c26 	beq	r3,r2,dd8c <alt_load_section+0x54>
  {
    while( to != end )
    dd5c:	00000806 	br	dd80 <alt_load_section+0x48>
    {
      *to++ = *from++;
    dd60:	e0bffe17 	ldw	r2,-8(fp)
    dd64:	10c00104 	addi	r3,r2,4
    dd68:	e0fffe15 	stw	r3,-8(fp)
    dd6c:	e0fffd17 	ldw	r3,-12(fp)
    dd70:	19000104 	addi	r4,r3,4
    dd74:	e13ffd15 	stw	r4,-12(fp)
    dd78:	18c00017 	ldw	r3,0(r3)
    dd7c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    dd80:	e0fffe17 	ldw	r3,-8(fp)
    dd84:	e0bfff17 	ldw	r2,-4(fp)
    dd88:	18bff51e 	bne	r3,r2,dd60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dd60>
    {
      *to++ = *from++;
    }
  }
}
    dd8c:	0001883a 	nop
    dd90:	e037883a 	mov	sp,fp
    dd94:	df000017 	ldw	fp,0(sp)
    dd98:	dec00104 	addi	sp,sp,4
    dd9c:	f800283a 	ret

0000dda0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    dda0:	defffe04 	addi	sp,sp,-8
    dda4:	dfc00115 	stw	ra,4(sp)
    dda8:	df000015 	stw	fp,0(sp)
    ddac:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    ddb0:	018000b4 	movhi	r6,2
    ddb4:	31a55804 	addi	r6,r6,-27296
    ddb8:	01400074 	movhi	r5,1
    ddbc:	295da004 	addi	r5,r5,30336
    ddc0:	010000b4 	movhi	r4,2
    ddc4:	21255804 	addi	r4,r4,-27296
    ddc8:	000dd380 	call	dd38 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    ddcc:	01800034 	movhi	r6,0
    ddd0:	31809204 	addi	r6,r6,584
    ddd4:	01400034 	movhi	r5,0
    ddd8:	29400804 	addi	r5,r5,32
    dddc:	01000034 	movhi	r4,0
    dde0:	21000804 	addi	r4,r4,32
    dde4:	000dd380 	call	dd38 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    dde8:	01800074 	movhi	r6,1
    ddec:	319da004 	addi	r6,r6,30336
    ddf0:	01400074 	movhi	r5,1
    ddf4:	295c1304 	addi	r5,r5,28748
    ddf8:	01000074 	movhi	r4,1
    ddfc:	211c1304 	addi	r4,r4,28748
    de00:	000dd380 	call	dd38 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    de04:	0015f180 	call	15f18 <alt_dcache_flush_all>
  alt_icache_flush_all();
    de08:	00161680 	call	16168 <alt_icache_flush_all>
}
    de0c:	0001883a 	nop
    de10:	e037883a 	mov	sp,fp
    de14:	dfc00117 	ldw	ra,4(sp)
    de18:	df000017 	ldw	fp,0(sp)
    de1c:	dec00204 	addi	sp,sp,8
    de20:	f800283a 	ret

0000de24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    de24:	defffe04 	addi	sp,sp,-8
    de28:	dfc00115 	stw	ra,4(sp)
    de2c:	df000015 	stw	fp,0(sp)
    de30:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    de34:	d0a00b17 	ldw	r2,-32724(gp)
    de38:	10000326 	beq	r2,zero,de48 <alt_get_errno+0x24>
    de3c:	d0a00b17 	ldw	r2,-32724(gp)
    de40:	103ee83a 	callr	r2
    de44:	00000106 	br	de4c <alt_get_errno+0x28>
    de48:	d0a7ce04 	addi	r2,gp,-24776
}
    de4c:	e037883a 	mov	sp,fp
    de50:	dfc00117 	ldw	ra,4(sp)
    de54:	df000017 	ldw	fp,0(sp)
    de58:	dec00204 	addi	sp,sp,8
    de5c:	f800283a 	ret

0000de60 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    de60:	defff904 	addi	sp,sp,-28
    de64:	dfc00615 	stw	ra,24(sp)
    de68:	df000515 	stw	fp,20(sp)
    de6c:	df000504 	addi	fp,sp,20
    de70:	e13ffd15 	stw	r4,-12(fp)
    de74:	e17ffe15 	stw	r5,-8(fp)
    de78:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    de7c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    de80:	e0bffd17 	ldw	r2,-12(fp)
    de84:	10000616 	blt	r2,zero,dea0 <lseek+0x40>
    de88:	e0bffd17 	ldw	r2,-12(fp)
    de8c:	10c00324 	muli	r3,r2,12
    de90:	00800074 	movhi	r2,1
    de94:	109fd304 	addi	r2,r2,32588
    de98:	1885883a 	add	r2,r3,r2
    de9c:	00000106 	br	dea4 <lseek+0x44>
    dea0:	0005883a 	mov	r2,zero
    dea4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    dea8:	e0bffc17 	ldw	r2,-16(fp)
    deac:	10001026 	beq	r2,zero,def0 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    deb0:	e0bffc17 	ldw	r2,-16(fp)
    deb4:	10800017 	ldw	r2,0(r2)
    deb8:	10800717 	ldw	r2,28(r2)
    debc:	10000926 	beq	r2,zero,dee4 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    dec0:	e0bffc17 	ldw	r2,-16(fp)
    dec4:	10800017 	ldw	r2,0(r2)
    dec8:	10800717 	ldw	r2,28(r2)
    decc:	e1bfff17 	ldw	r6,-4(fp)
    ded0:	e17ffe17 	ldw	r5,-8(fp)
    ded4:	e13ffc17 	ldw	r4,-16(fp)
    ded8:	103ee83a 	callr	r2
    dedc:	e0bffb15 	stw	r2,-20(fp)
    dee0:	00000506 	br	def8 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    dee4:	00bfde84 	movi	r2,-134
    dee8:	e0bffb15 	stw	r2,-20(fp)
    deec:	00000206 	br	def8 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    def0:	00bfebc4 	movi	r2,-81
    def4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    def8:	e0bffb17 	ldw	r2,-20(fp)
    defc:	1000070e 	bge	r2,zero,df1c <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    df00:	000de240 	call	de24 <alt_get_errno>
    df04:	1007883a 	mov	r3,r2
    df08:	e0bffb17 	ldw	r2,-20(fp)
    df0c:	0085c83a 	sub	r2,zero,r2
    df10:	18800015 	stw	r2,0(r3)
    rc = -1;
    df14:	00bfffc4 	movi	r2,-1
    df18:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    df1c:	e0bffb17 	ldw	r2,-20(fp)
}
    df20:	e037883a 	mov	sp,fp
    df24:	dfc00117 	ldw	ra,4(sp)
    df28:	df000017 	ldw	fp,0(sp)
    df2c:	dec00204 	addi	sp,sp,8
    df30:	f800283a 	ret

0000df34 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    df34:	defffd04 	addi	sp,sp,-12
    df38:	dfc00215 	stw	ra,8(sp)
    df3c:	df000115 	stw	fp,4(sp)
    df40:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    df44:	0009883a 	mov	r4,zero
    df48:	000e6140 	call	e614 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    df4c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    df50:	000e64c0 	call	e64c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    df54:	01800074 	movhi	r6,1
    df58:	319d3004 	addi	r6,r6,29888
    df5c:	01400074 	movhi	r5,1
    df60:	295d3004 	addi	r5,r5,29888
    df64:	01000074 	movhi	r4,1
    df68:	211d3004 	addi	r4,r4,29888
    df6c:	00162600 	call	16260 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    df70:	00160180 	call	16018 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    df74:	01000074 	movhi	r4,1
    df78:	21181e04 	addi	r4,r4,24696
    df7c:	0016b500 	call	16b50 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    df80:	d0a7cf17 	ldw	r2,-24772(gp)
    df84:	d0e7d017 	ldw	r3,-24768(gp)
    df88:	d127d117 	ldw	r4,-24764(gp)
    df8c:	200d883a 	mov	r6,r4
    df90:	180b883a 	mov	r5,r3
    df94:	1009883a 	mov	r4,r2
    df98:	00002840 	call	284 <main>
    df9c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    dfa0:	01000044 	movi	r4,1
    dfa4:	000da700 	call	da70 <close>
  exit (result);
    dfa8:	e13fff17 	ldw	r4,-4(fp)
    dfac:	0016b640 	call	16b64 <exit>

0000dfb0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    dfb0:	defffe04 	addi	sp,sp,-8
    dfb4:	df000115 	stw	fp,4(sp)
    dfb8:	df000104 	addi	fp,sp,4
    dfbc:	e13fff15 	stw	r4,-4(fp)
}
    dfc0:	0001883a 	nop
    dfc4:	e037883a 	mov	sp,fp
    dfc8:	df000017 	ldw	fp,0(sp)
    dfcc:	dec00104 	addi	sp,sp,4
    dfd0:	f800283a 	ret

0000dfd4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    dfd4:	defffe04 	addi	sp,sp,-8
    dfd8:	df000115 	stw	fp,4(sp)
    dfdc:	df000104 	addi	fp,sp,4
    dfe0:	e13fff15 	stw	r4,-4(fp)
}
    dfe4:	0001883a 	nop
    dfe8:	e037883a 	mov	sp,fp
    dfec:	df000017 	ldw	fp,0(sp)
    dff0:	dec00104 	addi	sp,sp,4
    dff4:	f800283a 	ret

0000dff8 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    dff8:	defff204 	addi	sp,sp,-56
    dffc:	dfc00a15 	stw	ra,40(sp)
    e000:	df000915 	stw	fp,36(sp)
    e004:	df000904 	addi	fp,sp,36
    e008:	e13fff15 	stw	r4,-4(fp)
    e00c:	e1400215 	stw	r5,8(fp)
    e010:	e1800315 	stw	r6,12(fp)
    e014:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
    e018:	e0800204 	addi	r2,fp,8
    e01c:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    e020:	e0bfff17 	ldw	r2,-4(fp)
    e024:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
    e028:	00006f06 	br	e1e8 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    e02c:	e0bff807 	ldb	r2,-32(fp)
    e030:	10800960 	cmpeqi	r2,r2,37
    e034:	1000041e 	bne	r2,zero,e048 <alt_printf+0x50>
        {
            alt_putchar(c);
    e038:	e0bff807 	ldb	r2,-32(fp)
    e03c:	1009883a 	mov	r4,r2
    e040:	000e2240 	call	e224 <alt_putchar>
    e044:	00006806 	br	e1e8 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    e048:	e0bff717 	ldw	r2,-36(fp)
    e04c:	10c00044 	addi	r3,r2,1
    e050:	e0fff715 	stw	r3,-36(fp)
    e054:	10800003 	ldbu	r2,0(r2)
    e058:	e0bff805 	stb	r2,-32(fp)
    e05c:	e0bff807 	ldb	r2,-32(fp)
    e060:	10006926 	beq	r2,zero,e208 <alt_printf+0x210>
            {
                if (c == '%')
    e064:	e0bff807 	ldb	r2,-32(fp)
    e068:	10800958 	cmpnei	r2,r2,37
    e06c:	1000041e 	bne	r2,zero,e080 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
    e070:	e0bff807 	ldb	r2,-32(fp)
    e074:	1009883a 	mov	r4,r2
    e078:	000e2240 	call	e224 <alt_putchar>
    e07c:	00005a06 	br	e1e8 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
    e080:	e0bff807 	ldb	r2,-32(fp)
    e084:	108018d8 	cmpnei	r2,r2,99
    e088:	1000081e 	bne	r2,zero,e0ac <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
    e08c:	e0bffe17 	ldw	r2,-8(fp)
    e090:	10c00104 	addi	r3,r2,4
    e094:	e0fffe15 	stw	r3,-8(fp)
    e098:	10800017 	ldw	r2,0(r2)
    e09c:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
    e0a0:	e13ffd17 	ldw	r4,-12(fp)
    e0a4:	000e2240 	call	e224 <alt_putchar>
    e0a8:	00004f06 	br	e1e8 <alt_printf+0x1f0>
                }
                else if (c == 'x')
    e0ac:	e0bff807 	ldb	r2,-32(fp)
    e0b0:	10801e18 	cmpnei	r2,r2,120
    e0b4:	1000341e 	bne	r2,zero,e188 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    e0b8:	e0bffe17 	ldw	r2,-8(fp)
    e0bc:	10c00104 	addi	r3,r2,4
    e0c0:	e0fffe15 	stw	r3,-8(fp)
    e0c4:	10800017 	ldw	r2,0(r2)
    e0c8:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    e0cc:	e0bffb17 	ldw	r2,-20(fp)
    e0d0:	1000031e 	bne	r2,zero,e0e0 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
    e0d4:	01000c04 	movi	r4,48
    e0d8:	000e2240 	call	e224 <alt_putchar>
                        continue;
    e0dc:	00004206 	br	e1e8 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
    e0e0:	00800704 	movi	r2,28
    e0e4:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
    e0e8:	00000306 	br	e0f8 <alt_printf+0x100>
                        digit_shift -= 4;
    e0ec:	e0bff917 	ldw	r2,-28(fp)
    e0f0:	10bfff04 	addi	r2,r2,-4
    e0f4:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    e0f8:	00c003c4 	movi	r3,15
    e0fc:	e0bff917 	ldw	r2,-28(fp)
    e100:	1884983a 	sll	r2,r3,r2
    e104:	1007883a 	mov	r3,r2
    e108:	e0bffb17 	ldw	r2,-20(fp)
    e10c:	1884703a 	and	r2,r3,r2
    e110:	103ff626 	beq	r2,zero,e0ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e0ec>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    e114:	00001906 	br	e17c <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    e118:	00c003c4 	movi	r3,15
    e11c:	e0bff917 	ldw	r2,-28(fp)
    e120:	1884983a 	sll	r2,r3,r2
    e124:	1007883a 	mov	r3,r2
    e128:	e0bffb17 	ldw	r2,-20(fp)
    e12c:	1886703a 	and	r3,r3,r2
    e130:	e0bff917 	ldw	r2,-28(fp)
    e134:	1884d83a 	srl	r2,r3,r2
    e138:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
    e13c:	e0bffc17 	ldw	r2,-16(fp)
    e140:	108002a8 	cmpgeui	r2,r2,10
    e144:	1000041e 	bne	r2,zero,e158 <alt_printf+0x160>
                            c = '0' + digit;
    e148:	e0bffc17 	ldw	r2,-16(fp)
    e14c:	10800c04 	addi	r2,r2,48
    e150:	e0bff805 	stb	r2,-32(fp)
    e154:	00000306 	br	e164 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
    e158:	e0bffc17 	ldw	r2,-16(fp)
    e15c:	108015c4 	addi	r2,r2,87
    e160:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
    e164:	e0bff807 	ldb	r2,-32(fp)
    e168:	1009883a 	mov	r4,r2
    e16c:	000e2240 	call	e224 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    e170:	e0bff917 	ldw	r2,-28(fp)
    e174:	10bfff04 	addi	r2,r2,-4
    e178:	e0bff915 	stw	r2,-28(fp)
    e17c:	e0bff917 	ldw	r2,-28(fp)
    e180:	103fe50e 	bge	r2,zero,e118 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e118>
    e184:	00001806 	br	e1e8 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    e188:	e0bff807 	ldb	r2,-32(fp)
    e18c:	10801cd8 	cmpnei	r2,r2,115
    e190:	1000151e 	bne	r2,zero,e1e8 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    e194:	e0bffe17 	ldw	r2,-8(fp)
    e198:	10c00104 	addi	r3,r2,4
    e19c:	e0fffe15 	stw	r3,-8(fp)
    e1a0:	10800017 	ldw	r2,0(r2)
    e1a4:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
    e1a8:	00000906 	br	e1d0 <alt_printf+0x1d8>
                      alt_putchar(*s++);
    e1ac:	e0bffa17 	ldw	r2,-24(fp)
    e1b0:	10c00044 	addi	r3,r2,1
    e1b4:	e0fffa15 	stw	r3,-24(fp)
    e1b8:	10800003 	ldbu	r2,0(r2)
    e1bc:	10803fcc 	andi	r2,r2,255
    e1c0:	1080201c 	xori	r2,r2,128
    e1c4:	10bfe004 	addi	r2,r2,-128
    e1c8:	1009883a 	mov	r4,r2
    e1cc:	000e2240 	call	e224 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    e1d0:	e0bffa17 	ldw	r2,-24(fp)
    e1d4:	10800003 	ldbu	r2,0(r2)
    e1d8:	10803fcc 	andi	r2,r2,255
    e1dc:	1080201c 	xori	r2,r2,128
    e1e0:	10bfe004 	addi	r2,r2,-128
    e1e4:	103ff11e 	bne	r2,zero,e1ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e1ac>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    e1e8:	e0bff717 	ldw	r2,-36(fp)
    e1ec:	10c00044 	addi	r3,r2,1
    e1f0:	e0fff715 	stw	r3,-36(fp)
    e1f4:	10800003 	ldbu	r2,0(r2)
    e1f8:	e0bff805 	stb	r2,-32(fp)
    e1fc:	e0bff807 	ldb	r2,-32(fp)
    e200:	103f8a1e 	bne	r2,zero,e02c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e02c>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
    e204:	00000106 	br	e20c <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
    e208:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
    e20c:	0001883a 	nop
    e210:	e037883a 	mov	sp,fp
    e214:	dfc00117 	ldw	ra,4(sp)
    e218:	df000017 	ldw	fp,0(sp)
    e21c:	dec00504 	addi	sp,sp,20
    e220:	f800283a 	ret

0000e224 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    e224:	defffd04 	addi	sp,sp,-12
    e228:	dfc00215 	stw	ra,8(sp)
    e22c:	df000115 	stw	fp,4(sp)
    e230:	df000104 	addi	fp,sp,4
    e234:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
    e238:	d0a00117 	ldw	r2,-32764(gp)
    e23c:	10800217 	ldw	r2,8(r2)
    e240:	100b883a 	mov	r5,r2
    e244:	e13fff17 	ldw	r4,-4(fp)
    e248:	0016cb80 	call	16cb8 <putc>
#endif
#endif
}
    e24c:	e037883a 	mov	sp,fp
    e250:	dfc00117 	ldw	ra,4(sp)
    e254:	df000017 	ldw	fp,0(sp)
    e258:	dec00204 	addi	sp,sp,8
    e25c:	f800283a 	ret

0000e260 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e260:	defffe04 	addi	sp,sp,-8
    e264:	dfc00115 	stw	ra,4(sp)
    e268:	df000015 	stw	fp,0(sp)
    e26c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e270:	d0a00b17 	ldw	r2,-32724(gp)
    e274:	10000326 	beq	r2,zero,e284 <alt_get_errno+0x24>
    e278:	d0a00b17 	ldw	r2,-32724(gp)
    e27c:	103ee83a 	callr	r2
    e280:	00000106 	br	e288 <alt_get_errno+0x28>
    e284:	d0a7ce04 	addi	r2,gp,-24776
}
    e288:	e037883a 	mov	sp,fp
    e28c:	dfc00117 	ldw	ra,4(sp)
    e290:	df000017 	ldw	fp,0(sp)
    e294:	dec00204 	addi	sp,sp,8
    e298:	f800283a 	ret

0000e29c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    e29c:	defff904 	addi	sp,sp,-28
    e2a0:	dfc00615 	stw	ra,24(sp)
    e2a4:	df000515 	stw	fp,20(sp)
    e2a8:	df000504 	addi	fp,sp,20
    e2ac:	e13ffd15 	stw	r4,-12(fp)
    e2b0:	e17ffe15 	stw	r5,-8(fp)
    e2b4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e2b8:	e0bffd17 	ldw	r2,-12(fp)
    e2bc:	10000616 	blt	r2,zero,e2d8 <read+0x3c>
    e2c0:	e0bffd17 	ldw	r2,-12(fp)
    e2c4:	10c00324 	muli	r3,r2,12
    e2c8:	00800074 	movhi	r2,1
    e2cc:	109fd304 	addi	r2,r2,32588
    e2d0:	1885883a 	add	r2,r3,r2
    e2d4:	00000106 	br	e2dc <read+0x40>
    e2d8:	0005883a 	mov	r2,zero
    e2dc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    e2e0:	e0bffb17 	ldw	r2,-20(fp)
    e2e4:	10002226 	beq	r2,zero,e370 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    e2e8:	e0bffb17 	ldw	r2,-20(fp)
    e2ec:	10800217 	ldw	r2,8(r2)
    e2f0:	108000cc 	andi	r2,r2,3
    e2f4:	10800060 	cmpeqi	r2,r2,1
    e2f8:	1000181e 	bne	r2,zero,e35c <read+0xc0>
        (fd->dev->read))
    e2fc:	e0bffb17 	ldw	r2,-20(fp)
    e300:	10800017 	ldw	r2,0(r2)
    e304:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    e308:	10001426 	beq	r2,zero,e35c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    e30c:	e0bffb17 	ldw	r2,-20(fp)
    e310:	10800017 	ldw	r2,0(r2)
    e314:	10800517 	ldw	r2,20(r2)
    e318:	e0ffff17 	ldw	r3,-4(fp)
    e31c:	180d883a 	mov	r6,r3
    e320:	e17ffe17 	ldw	r5,-8(fp)
    e324:	e13ffb17 	ldw	r4,-20(fp)
    e328:	103ee83a 	callr	r2
    e32c:	e0bffc15 	stw	r2,-16(fp)
    e330:	e0bffc17 	ldw	r2,-16(fp)
    e334:	1000070e 	bge	r2,zero,e354 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    e338:	000e2600 	call	e260 <alt_get_errno>
    e33c:	1007883a 	mov	r3,r2
    e340:	e0bffc17 	ldw	r2,-16(fp)
    e344:	0085c83a 	sub	r2,zero,r2
    e348:	18800015 	stw	r2,0(r3)
          return -1;
    e34c:	00bfffc4 	movi	r2,-1
    e350:	00000c06 	br	e384 <read+0xe8>
        }
        return rval;
    e354:	e0bffc17 	ldw	r2,-16(fp)
    e358:	00000a06 	br	e384 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    e35c:	000e2600 	call	e260 <alt_get_errno>
    e360:	1007883a 	mov	r3,r2
    e364:	00800344 	movi	r2,13
    e368:	18800015 	stw	r2,0(r3)
    e36c:	00000406 	br	e380 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    e370:	000e2600 	call	e260 <alt_get_errno>
    e374:	1007883a 	mov	r3,r2
    e378:	00801444 	movi	r2,81
    e37c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    e380:	00bfffc4 	movi	r2,-1
}
    e384:	e037883a 	mov	sp,fp
    e388:	dfc00117 	ldw	ra,4(sp)
    e38c:	df000017 	ldw	fp,0(sp)
    e390:	dec00204 	addi	sp,sp,8
    e394:	f800283a 	ret

0000e398 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    e398:	defffe04 	addi	sp,sp,-8
    e39c:	df000115 	stw	fp,4(sp)
    e3a0:	df000104 	addi	fp,sp,4
    e3a4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    e3a8:	e0bfff17 	ldw	r2,-4(fp)
    e3ac:	108000d0 	cmplti	r2,r2,3
    e3b0:	10000d1e 	bne	r2,zero,e3e8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    e3b4:	00800074 	movhi	r2,1
    e3b8:	109fd304 	addi	r2,r2,32588
    e3bc:	e0ffff17 	ldw	r3,-4(fp)
    e3c0:	18c00324 	muli	r3,r3,12
    e3c4:	10c5883a 	add	r2,r2,r3
    e3c8:	10800204 	addi	r2,r2,8
    e3cc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    e3d0:	00800074 	movhi	r2,1
    e3d4:	109fd304 	addi	r2,r2,32588
    e3d8:	e0ffff17 	ldw	r3,-4(fp)
    e3dc:	18c00324 	muli	r3,r3,12
    e3e0:	10c5883a 	add	r2,r2,r3
    e3e4:	10000015 	stw	zero,0(r2)
  }
}
    e3e8:	0001883a 	nop
    e3ec:	e037883a 	mov	sp,fp
    e3f0:	df000017 	ldw	fp,0(sp)
    e3f4:	dec00104 	addi	sp,sp,4
    e3f8:	f800283a 	ret

0000e3fc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    e3fc:	defff904 	addi	sp,sp,-28
    e400:	df000615 	stw	fp,24(sp)
    e404:	df000604 	addi	fp,sp,24
    e408:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e40c:	0005303a 	rdctl	r2,status
    e410:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e414:	e0fffe17 	ldw	r3,-8(fp)
    e418:	00bfff84 	movi	r2,-2
    e41c:	1884703a 	and	r2,r3,r2
    e420:	1001703a 	wrctl	status,r2
  
  return context;
    e424:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    e428:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    e42c:	d0a00c17 	ldw	r2,-32720(gp)
    e430:	10c000c4 	addi	r3,r2,3
    e434:	00bfff04 	movi	r2,-4
    e438:	1884703a 	and	r2,r3,r2
    e43c:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    e440:	d0e00c17 	ldw	r3,-32720(gp)
    e444:	e0bfff17 	ldw	r2,-4(fp)
    e448:	1887883a 	add	r3,r3,r2
    e44c:	00810034 	movhi	r2,1024
    e450:	10800004 	addi	r2,r2,0
    e454:	10c0062e 	bgeu	r2,r3,e470 <sbrk+0x74>
    e458:	e0bffb17 	ldw	r2,-20(fp)
    e45c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e460:	e0bffa17 	ldw	r2,-24(fp)
    e464:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    e468:	00bfffc4 	movi	r2,-1
    e46c:	00000b06 	br	e49c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    e470:	d0a00c17 	ldw	r2,-32720(gp)
    e474:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    e478:	d0e00c17 	ldw	r3,-32720(gp)
    e47c:	e0bfff17 	ldw	r2,-4(fp)
    e480:	1885883a 	add	r2,r3,r2
    e484:	d0a00c15 	stw	r2,-32720(gp)
    e488:	e0bffb17 	ldw	r2,-20(fp)
    e48c:	e0bffc15 	stw	r2,-16(fp)
    e490:	e0bffc17 	ldw	r2,-16(fp)
    e494:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    e498:	e0bffd17 	ldw	r2,-12(fp)
} 
    e49c:	e037883a 	mov	sp,fp
    e4a0:	df000017 	ldw	fp,0(sp)
    e4a4:	dec00104 	addi	sp,sp,4
    e4a8:	f800283a 	ret

0000e4ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e4ac:	defffe04 	addi	sp,sp,-8
    e4b0:	dfc00115 	stw	ra,4(sp)
    e4b4:	df000015 	stw	fp,0(sp)
    e4b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e4bc:	d0a00b17 	ldw	r2,-32724(gp)
    e4c0:	10000326 	beq	r2,zero,e4d0 <alt_get_errno+0x24>
    e4c4:	d0a00b17 	ldw	r2,-32724(gp)
    e4c8:	103ee83a 	callr	r2
    e4cc:	00000106 	br	e4d4 <alt_get_errno+0x28>
    e4d0:	d0a7ce04 	addi	r2,gp,-24776
}
    e4d4:	e037883a 	mov	sp,fp
    e4d8:	dfc00117 	ldw	ra,4(sp)
    e4dc:	df000017 	ldw	fp,0(sp)
    e4e0:	dec00204 	addi	sp,sp,8
    e4e4:	f800283a 	ret

0000e4e8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    e4e8:	defff904 	addi	sp,sp,-28
    e4ec:	dfc00615 	stw	ra,24(sp)
    e4f0:	df000515 	stw	fp,20(sp)
    e4f4:	df000504 	addi	fp,sp,20
    e4f8:	e13ffd15 	stw	r4,-12(fp)
    e4fc:	e17ffe15 	stw	r5,-8(fp)
    e500:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e504:	e0bffd17 	ldw	r2,-12(fp)
    e508:	10000616 	blt	r2,zero,e524 <write+0x3c>
    e50c:	e0bffd17 	ldw	r2,-12(fp)
    e510:	10c00324 	muli	r3,r2,12
    e514:	00800074 	movhi	r2,1
    e518:	109fd304 	addi	r2,r2,32588
    e51c:	1885883a 	add	r2,r3,r2
    e520:	00000106 	br	e528 <write+0x40>
    e524:	0005883a 	mov	r2,zero
    e528:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    e52c:	e0bffb17 	ldw	r2,-20(fp)
    e530:	10002126 	beq	r2,zero,e5b8 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    e534:	e0bffb17 	ldw	r2,-20(fp)
    e538:	10800217 	ldw	r2,8(r2)
    e53c:	108000cc 	andi	r2,r2,3
    e540:	10001826 	beq	r2,zero,e5a4 <write+0xbc>
    e544:	e0bffb17 	ldw	r2,-20(fp)
    e548:	10800017 	ldw	r2,0(r2)
    e54c:	10800617 	ldw	r2,24(r2)
    e550:	10001426 	beq	r2,zero,e5a4 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    e554:	e0bffb17 	ldw	r2,-20(fp)
    e558:	10800017 	ldw	r2,0(r2)
    e55c:	10800617 	ldw	r2,24(r2)
    e560:	e0ffff17 	ldw	r3,-4(fp)
    e564:	180d883a 	mov	r6,r3
    e568:	e17ffe17 	ldw	r5,-8(fp)
    e56c:	e13ffb17 	ldw	r4,-20(fp)
    e570:	103ee83a 	callr	r2
    e574:	e0bffc15 	stw	r2,-16(fp)
    e578:	e0bffc17 	ldw	r2,-16(fp)
    e57c:	1000070e 	bge	r2,zero,e59c <write+0xb4>
      {
        ALT_ERRNO = -rval;
    e580:	000e4ac0 	call	e4ac <alt_get_errno>
    e584:	1007883a 	mov	r3,r2
    e588:	e0bffc17 	ldw	r2,-16(fp)
    e58c:	0085c83a 	sub	r2,zero,r2
    e590:	18800015 	stw	r2,0(r3)
        return -1;
    e594:	00bfffc4 	movi	r2,-1
    e598:	00000c06 	br	e5cc <write+0xe4>
      }
      return rval;
    e59c:	e0bffc17 	ldw	r2,-16(fp)
    e5a0:	00000a06 	br	e5cc <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    e5a4:	000e4ac0 	call	e4ac <alt_get_errno>
    e5a8:	1007883a 	mov	r3,r2
    e5ac:	00800344 	movi	r2,13
    e5b0:	18800015 	stw	r2,0(r3)
    e5b4:	00000406 	br	e5c8 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    e5b8:	000e4ac0 	call	e4ac <alt_get_errno>
    e5bc:	1007883a 	mov	r3,r2
    e5c0:	00801444 	movi	r2,81
    e5c4:	18800015 	stw	r2,0(r3)
  }
  return -1;
    e5c8:	00bfffc4 	movi	r2,-1
}
    e5cc:	e037883a 	mov	sp,fp
    e5d0:	dfc00117 	ldw	ra,4(sp)
    e5d4:	df000017 	ldw	fp,0(sp)
    e5d8:	dec00204 	addi	sp,sp,8
    e5dc:	f800283a 	ret

0000e5e0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    e5e0:	defffd04 	addi	sp,sp,-12
    e5e4:	dfc00215 	stw	ra,8(sp)
    e5e8:	df000115 	stw	fp,4(sp)
    e5ec:	df000104 	addi	fp,sp,4
    e5f0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    e5f4:	d1600804 	addi	r5,gp,-32736
    e5f8:	e13fff17 	ldw	r4,-4(fp)
    e5fc:	0015f740 	call	15f74 <alt_dev_llist_insert>
}
    e600:	e037883a 	mov	sp,fp
    e604:	dfc00117 	ldw	ra,4(sp)
    e608:	df000017 	ldw	fp,0(sp)
    e60c:	dec00204 	addi	sp,sp,8
    e610:	f800283a 	ret

0000e614 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    e614:	defffd04 	addi	sp,sp,-12
    e618:	dfc00215 	stw	ra,8(sp)
    e61c:	df000115 	stw	fp,4(sp)
    e620:	df000104 	addi	fp,sp,4
    e624:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
    e628:	00168540 	call	16854 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    e62c:	00800044 	movi	r2,1
    e630:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    e634:	0001883a 	nop
    e638:	e037883a 	mov	sp,fp
    e63c:	dfc00117 	ldw	ra,4(sp)
    e640:	df000017 	ldw	fp,0(sp)
    e644:	dec00204 	addi	sp,sp,8
    e648:	f800283a 	ret

0000e64c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    e64c:	defffc04 	addi	sp,sp,-16
    e650:	dfc00315 	stw	ra,12(sp)
    e654:	df000215 	stw	fp,8(sp)
    e658:	df000204 	addi	fp,sp,8
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
    e65c:	01c00204 	movi	r7,8
    e660:	000d883a 	mov	r6,zero
    e664:	000b883a 	mov	r5,zero
    e668:	01040034 	movhi	r4,4096
    e66c:	21080004 	addi	r4,r4,8192
    e670:	0013c040 	call	13c04 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    e674:	01800204 	movi	r6,8
    e678:	000b883a 	mov	r5,zero
    e67c:	010000b4 	movhi	r4,2
    e680:	21203d04 	addi	r4,r4,-32524
    e684:	001328c0 	call	1328c <altera_avalon_jtag_uart_init>
    e688:	010000b4 	movhi	r4,2
    e68c:	21203304 	addi	r4,r4,-32564
    e690:	000e5e00 	call	e5e0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
    e694:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
    e698:	010000b4 	movhi	r4,2
    e69c:	21244b04 	addi	r4,r4,-28372
    e6a0:	000e5e00 	call	e5e0 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
    e6a4:	010000b4 	movhi	r4,2
    e6a8:	21245704 	addi	r4,r4,-28324
    e6ac:	000e5e00 	call	e5e0 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
    e6b0:	010000b4 	movhi	r4,2
    e6b4:	21246304 	addi	r4,r4,-28276
    e6b8:	0013d2c0 	call	13d2c <alt_up_character_lcd_init>
    e6bc:	010000b4 	movhi	r4,2
    e6c0:	21246304 	addi	r4,r4,-28276
    e6c4:	000e5e00 	call	e5e0 <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
    e6c8:	010000b4 	movhi	r4,2
    e6cc:	21246e04 	addi	r4,r4,-28232
    e6d0:	000e5e00 	call	e5e0 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP5, Expansion_JP5);
    e6d4:	010000b4 	movhi	r4,2
    e6d8:	21247904 	addi	r4,r4,-28188
    e6dc:	000e5e00 	call	e5e0 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
    e6e0:	010000b4 	movhi	r4,2
    e6e4:	21248404 	addi	r4,r4,-28144
    e6e8:	000e5e00 	call	e5e0 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
    e6ec:	010000b4 	movhi	r4,2
    e6f0:	21248f04 	addi	r4,r4,-28100
    e6f4:	000e5e00 	call	e5e0 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
    e6f8:	010000b4 	movhi	r4,2
    e6fc:	21249a04 	addi	r4,r4,-28056
    e700:	000e5e00 	call	e5e0 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
    e704:	010000b4 	movhi	r4,2
    e708:	2124a504 	addi	r4,r4,-28012
    e70c:	000e5e00 	call	e5e0 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
    e710:	010000b4 	movhi	r4,2
    e714:	2124b004 	addi	r4,r4,-27968
    e718:	000e5e00 	call	e5e0 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
    e71c:	010000b4 	movhi	r4,2
    e720:	2124bb04 	addi	r4,r4,-27924
    e724:	000e5e00 	call	e5e0 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
    e728:	010000b4 	movhi	r4,2
    e72c:	2124c604 	addi	r4,r4,-27880
    e730:	00146200 	call	14620 <alt_up_ps2_init>
    e734:	010000b4 	movhi	r4,2
    e738:	2124c604 	addi	r4,r4,-27880
    e73c:	000e5e00 	call	e5e0 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
    e740:	010000b4 	movhi	r4,2
    e744:	2124d404 	addi	r4,r4,-27824
    e748:	00146200 	call	14620 <alt_up_ps2_init>
    e74c:	010000b4 	movhi	r4,2
    e750:	2124d404 	addi	r4,r4,-27824
    e754:	000e5e00 	call	e5e0 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
    e758:	010000b4 	movhi	r4,2
    e75c:	2124e204 	addi	r4,r4,-27768
    e760:	000e5e00 	call	e5e0 <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
    e764:	010000b4 	movhi	r4,2
    e768:	2124ed04 	addi	r4,r4,-27724
    e76c:	000e5e00 	call	e5e0 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VGA_SUBSYSTEM_CHAR_BUF_SUBSYSTEM_CHAR_BUF_DMA, VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA);
    e770:	008000b4 	movhi	r2,2
    e774:	10a4fa04 	addi	r2,r2,-27672
    e778:	10800a17 	ldw	r2,40(r2)
    e77c:	10800017 	ldw	r2,0(r2)
    e780:	1007883a 	mov	r3,r2
    e784:	008000b4 	movhi	r2,2
    e788:	10a4fa04 	addi	r2,r2,-27672
    e78c:	10c00b15 	stw	r3,44(r2)
    e790:	008000b4 	movhi	r2,2
    e794:	10a4fa04 	addi	r2,r2,-27672
    e798:	10800a17 	ldw	r2,40(r2)
    e79c:	10800104 	addi	r2,r2,4
    e7a0:	10800017 	ldw	r2,0(r2)
    e7a4:	1007883a 	mov	r3,r2
    e7a8:	008000b4 	movhi	r2,2
    e7ac:	10a4fa04 	addi	r2,r2,-27672
    e7b0:	10c00c15 	stw	r3,48(r2)
    e7b4:	008000b4 	movhi	r2,2
    e7b8:	10a4fa04 	addi	r2,r2,-27672
    e7bc:	10800a17 	ldw	r2,40(r2)
    e7c0:	10800204 	addi	r2,r2,8
    e7c4:	10800017 	ldw	r2,0(r2)
    e7c8:	10ffffcc 	andi	r3,r2,65535
    e7cc:	008000b4 	movhi	r2,2
    e7d0:	10a4fa04 	addi	r2,r2,-27672
    e7d4:	10c01115 	stw	r3,68(r2)
    e7d8:	008000b4 	movhi	r2,2
    e7dc:	10a4fa04 	addi	r2,r2,-27672
    e7e0:	10800a17 	ldw	r2,40(r2)
    e7e4:	10800204 	addi	r2,r2,8
    e7e8:	10800017 	ldw	r2,0(r2)
    e7ec:	1006d43a 	srli	r3,r2,16
    e7f0:	008000b4 	movhi	r2,2
    e7f4:	10a4fa04 	addi	r2,r2,-27672
    e7f8:	10c01215 	stw	r3,72(r2)
    e7fc:	008000b4 	movhi	r2,2
    e800:	10a4fa04 	addi	r2,r2,-27672
    e804:	10800a17 	ldw	r2,40(r2)
    e808:	10800304 	addi	r2,r2,12
    e80c:	10800017 	ldw	r2,0(r2)
    e810:	1005d07a 	srai	r2,r2,1
    e814:	10c0004c 	andi	r3,r2,1
    e818:	008000b4 	movhi	r2,2
    e81c:	10a4fa04 	addi	r2,r2,-27672
    e820:	10c00d15 	stw	r3,52(r2)
    e824:	008000b4 	movhi	r2,2
    e828:	10a4fa04 	addi	r2,r2,-27672
    e82c:	10800a17 	ldw	r2,40(r2)
    e830:	10800304 	addi	r2,r2,12
    e834:	10800017 	ldw	r2,0(r2)
    e838:	1005d23a 	srai	r2,r2,8
    e83c:	10c003cc 	andi	r3,r2,15
    e840:	008000b4 	movhi	r2,2
    e844:	10a4fa04 	addi	r2,r2,-27672
    e848:	10c00e15 	stw	r3,56(r2)
    e84c:	008000b4 	movhi	r2,2
    e850:	10a4fa04 	addi	r2,r2,-27672
    e854:	10800a17 	ldw	r2,40(r2)
    e858:	10800304 	addi	r2,r2,12
    e85c:	10800017 	ldw	r2,0(r2)
    e860:	1005d1ba 	srai	r2,r2,6
    e864:	10c000cc 	andi	r3,r2,3
    e868:	008000b4 	movhi	r2,2
    e86c:	10a4fa04 	addi	r2,r2,-27672
    e870:	10c00f15 	stw	r3,60(r2)
    e874:	008000b4 	movhi	r2,2
    e878:	10a4fa04 	addi	r2,r2,-27672
    e87c:	10800e17 	ldw	r2,56(r2)
    e880:	1007883a 	mov	r3,r2
    e884:	008000b4 	movhi	r2,2
    e888:	10a4fa04 	addi	r2,r2,-27672
    e88c:	10800f17 	ldw	r2,60(r2)
    e890:	1885383a 	mul	r2,r3,r2
    e894:	e0bffe05 	stb	r2,-8(fp)
    e898:	e0bffe03 	ldbu	r2,-8(fp)
    e89c:	10800268 	cmpgeui	r2,r2,9
    e8a0:	1000051e 	bne	r2,zero,e8b8 <alt_sys_init+0x26c>
    e8a4:	008000b4 	movhi	r2,2
    e8a8:	10a4fa04 	addi	r2,r2,-27672
    e8ac:	00c00044 	movi	r3,1
    e8b0:	10c01015 	stw	r3,64(r2)
    e8b4:	00000c06 	br	e8e8 <alt_sys_init+0x29c>
    e8b8:	e0bffe03 	ldbu	r2,-8(fp)
    e8bc:	10800468 	cmpgeui	r2,r2,17
    e8c0:	1000051e 	bne	r2,zero,e8d8 <alt_sys_init+0x28c>
    e8c4:	008000b4 	movhi	r2,2
    e8c8:	10a4fa04 	addi	r2,r2,-27672
    e8cc:	00c00084 	movi	r3,2
    e8d0:	10c01015 	stw	r3,64(r2)
    e8d4:	00000406 	br	e8e8 <alt_sys_init+0x29c>
    e8d8:	008000b4 	movhi	r2,2
    e8dc:	10a4fa04 	addi	r2,r2,-27672
    e8e0:	00c00104 	movi	r3,4
    e8e4:	10c01015 	stw	r3,64(r2)
    e8e8:	008000b4 	movhi	r2,2
    e8ec:	10a4fa04 	addi	r2,r2,-27672
    e8f0:	10800a17 	ldw	r2,40(r2)
    e8f4:	10800304 	addi	r2,r2,12
    e8f8:	10800017 	ldw	r2,0(r2)
    e8fc:	1005d43a 	srai	r2,r2,16
    e900:	e0bffe45 	stb	r2,-7(fp)
    e904:	008000b4 	movhi	r2,2
    e908:	10a4fa04 	addi	r2,r2,-27672
    e90c:	10800a17 	ldw	r2,40(r2)
    e910:	10800304 	addi	r2,r2,12
    e914:	10800017 	ldw	r2,0(r2)
    e918:	1004d63a 	srli	r2,r2,24
    e91c:	e0bffe85 	stb	r2,-6(fp)
    e920:	008000b4 	movhi	r2,2
    e924:	10a4fa04 	addi	r2,r2,-27672
    e928:	10801017 	ldw	r2,64(r2)
    e92c:	10800058 	cmpnei	r2,r2,1
    e930:	1000041e 	bne	r2,zero,e944 <alt_sys_init+0x2f8>
    e934:	008000b4 	movhi	r2,2
    e938:	10a4fa04 	addi	r2,r2,-27672
    e93c:	10001315 	stw	zero,76(r2)
    e940:	00000e06 	br	e97c <alt_sys_init+0x330>
    e944:	008000b4 	movhi	r2,2
    e948:	10a4fa04 	addi	r2,r2,-27672
    e94c:	10801017 	ldw	r2,64(r2)
    e950:	10800098 	cmpnei	r2,r2,2
    e954:	1000051e 	bne	r2,zero,e96c <alt_sys_init+0x320>
    e958:	008000b4 	movhi	r2,2
    e95c:	10a4fa04 	addi	r2,r2,-27672
    e960:	00c00044 	movi	r3,1
    e964:	10c01315 	stw	r3,76(r2)
    e968:	00000406 	br	e97c <alt_sys_init+0x330>
    e96c:	008000b4 	movhi	r2,2
    e970:	10a4fa04 	addi	r2,r2,-27672
    e974:	00c00084 	movi	r3,2
    e978:	10c01315 	stw	r3,76(r2)
    e97c:	e0bffe43 	ldbu	r2,-7(fp)
    e980:	00c00804 	movi	r3,32
    e984:	1885c83a 	sub	r2,r3,r2
    e988:	00ffffc4 	movi	r3,-1
    e98c:	1886d83a 	srl	r3,r3,r2
    e990:	008000b4 	movhi	r2,2
    e994:	10a4fa04 	addi	r2,r2,-27672
    e998:	10c01415 	stw	r3,80(r2)
    e99c:	e0fffe43 	ldbu	r3,-7(fp)
    e9a0:	008000b4 	movhi	r2,2
    e9a4:	10a4fa04 	addi	r2,r2,-27672
    e9a8:	10801317 	ldw	r2,76(r2)
    e9ac:	1887883a 	add	r3,r3,r2
    e9b0:	008000b4 	movhi	r2,2
    e9b4:	10a4fa04 	addi	r2,r2,-27672
    e9b8:	10c01515 	stw	r3,84(r2)
    e9bc:	e0bffe83 	ldbu	r2,-6(fp)
    e9c0:	00c00804 	movi	r3,32
    e9c4:	1885c83a 	sub	r2,r3,r2
    e9c8:	00ffffc4 	movi	r3,-1
    e9cc:	1886d83a 	srl	r3,r3,r2
    e9d0:	008000b4 	movhi	r2,2
    e9d4:	10a4fa04 	addi	r2,r2,-27672
    e9d8:	10c01615 	stw	r3,88(r2)
    e9dc:	010000b4 	movhi	r4,2
    e9e0:	2124fa04 	addi	r4,r4,-27672
    e9e4:	000e5e00 	call	e5e0 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VIDEO_IN_SUBSYSTEM_VIDEO_IN_DMA, Video_In_Subsystem_Video_In_DMA);
    e9e8:	008000b4 	movhi	r2,2
    e9ec:	10a51104 	addi	r2,r2,-27580
    e9f0:	10800a17 	ldw	r2,40(r2)
    e9f4:	10800017 	ldw	r2,0(r2)
    e9f8:	1007883a 	mov	r3,r2
    e9fc:	008000b4 	movhi	r2,2
    ea00:	10a51104 	addi	r2,r2,-27580
    ea04:	10c00b15 	stw	r3,44(r2)
    ea08:	008000b4 	movhi	r2,2
    ea0c:	10a51104 	addi	r2,r2,-27580
    ea10:	10800a17 	ldw	r2,40(r2)
    ea14:	10800104 	addi	r2,r2,4
    ea18:	10800017 	ldw	r2,0(r2)
    ea1c:	1007883a 	mov	r3,r2
    ea20:	008000b4 	movhi	r2,2
    ea24:	10a51104 	addi	r2,r2,-27580
    ea28:	10c00c15 	stw	r3,48(r2)
    ea2c:	008000b4 	movhi	r2,2
    ea30:	10a51104 	addi	r2,r2,-27580
    ea34:	10800a17 	ldw	r2,40(r2)
    ea38:	10800204 	addi	r2,r2,8
    ea3c:	10800017 	ldw	r2,0(r2)
    ea40:	10ffffcc 	andi	r3,r2,65535
    ea44:	008000b4 	movhi	r2,2
    ea48:	10a51104 	addi	r2,r2,-27580
    ea4c:	10c01115 	stw	r3,68(r2)
    ea50:	008000b4 	movhi	r2,2
    ea54:	10a51104 	addi	r2,r2,-27580
    ea58:	10800a17 	ldw	r2,40(r2)
    ea5c:	10800204 	addi	r2,r2,8
    ea60:	10800017 	ldw	r2,0(r2)
    ea64:	1006d43a 	srli	r3,r2,16
    ea68:	008000b4 	movhi	r2,2
    ea6c:	10a51104 	addi	r2,r2,-27580
    ea70:	10c01215 	stw	r3,72(r2)
    ea74:	008000b4 	movhi	r2,2
    ea78:	10a51104 	addi	r2,r2,-27580
    ea7c:	10800a17 	ldw	r2,40(r2)
    ea80:	10800304 	addi	r2,r2,12
    ea84:	10800017 	ldw	r2,0(r2)
    ea88:	1005d07a 	srai	r2,r2,1
    ea8c:	10c0004c 	andi	r3,r2,1
    ea90:	008000b4 	movhi	r2,2
    ea94:	10a51104 	addi	r2,r2,-27580
    ea98:	10c00d15 	stw	r3,52(r2)
    ea9c:	008000b4 	movhi	r2,2
    eaa0:	10a51104 	addi	r2,r2,-27580
    eaa4:	10800a17 	ldw	r2,40(r2)
    eaa8:	10800304 	addi	r2,r2,12
    eaac:	10800017 	ldw	r2,0(r2)
    eab0:	1005d23a 	srai	r2,r2,8
    eab4:	10c003cc 	andi	r3,r2,15
    eab8:	008000b4 	movhi	r2,2
    eabc:	10a51104 	addi	r2,r2,-27580
    eac0:	10c00e15 	stw	r3,56(r2)
    eac4:	008000b4 	movhi	r2,2
    eac8:	10a51104 	addi	r2,r2,-27580
    eacc:	10800a17 	ldw	r2,40(r2)
    ead0:	10800304 	addi	r2,r2,12
    ead4:	10800017 	ldw	r2,0(r2)
    ead8:	1005d1ba 	srai	r2,r2,6
    eadc:	10c000cc 	andi	r3,r2,3
    eae0:	008000b4 	movhi	r2,2
    eae4:	10a51104 	addi	r2,r2,-27580
    eae8:	10c00f15 	stw	r3,60(r2)
    eaec:	008000b4 	movhi	r2,2
    eaf0:	10a51104 	addi	r2,r2,-27580
    eaf4:	10800e17 	ldw	r2,56(r2)
    eaf8:	1007883a 	mov	r3,r2
    eafc:	008000b4 	movhi	r2,2
    eb00:	10a51104 	addi	r2,r2,-27580
    eb04:	10800f17 	ldw	r2,60(r2)
    eb08:	1885383a 	mul	r2,r3,r2
    eb0c:	e0bffec5 	stb	r2,-5(fp)
    eb10:	e0bffec3 	ldbu	r2,-5(fp)
    eb14:	10800268 	cmpgeui	r2,r2,9
    eb18:	1000051e 	bne	r2,zero,eb30 <alt_sys_init+0x4e4>
    eb1c:	008000b4 	movhi	r2,2
    eb20:	10a51104 	addi	r2,r2,-27580
    eb24:	00c00044 	movi	r3,1
    eb28:	10c01015 	stw	r3,64(r2)
    eb2c:	00000c06 	br	eb60 <alt_sys_init+0x514>
    eb30:	e0bffec3 	ldbu	r2,-5(fp)
    eb34:	10800468 	cmpgeui	r2,r2,17
    eb38:	1000051e 	bne	r2,zero,eb50 <alt_sys_init+0x504>
    eb3c:	008000b4 	movhi	r2,2
    eb40:	10a51104 	addi	r2,r2,-27580
    eb44:	00c00084 	movi	r3,2
    eb48:	10c01015 	stw	r3,64(r2)
    eb4c:	00000406 	br	eb60 <alt_sys_init+0x514>
    eb50:	008000b4 	movhi	r2,2
    eb54:	10a51104 	addi	r2,r2,-27580
    eb58:	00c00104 	movi	r3,4
    eb5c:	10c01015 	stw	r3,64(r2)
    eb60:	008000b4 	movhi	r2,2
    eb64:	10a51104 	addi	r2,r2,-27580
    eb68:	10800a17 	ldw	r2,40(r2)
    eb6c:	10800304 	addi	r2,r2,12
    eb70:	10800017 	ldw	r2,0(r2)
    eb74:	1005d43a 	srai	r2,r2,16
    eb78:	e0bfff05 	stb	r2,-4(fp)
    eb7c:	008000b4 	movhi	r2,2
    eb80:	10a51104 	addi	r2,r2,-27580
    eb84:	10800a17 	ldw	r2,40(r2)
    eb88:	10800304 	addi	r2,r2,12
    eb8c:	10800017 	ldw	r2,0(r2)
    eb90:	1004d63a 	srli	r2,r2,24
    eb94:	e0bfff45 	stb	r2,-3(fp)
    eb98:	008000b4 	movhi	r2,2
    eb9c:	10a51104 	addi	r2,r2,-27580
    eba0:	10801017 	ldw	r2,64(r2)
    eba4:	10800058 	cmpnei	r2,r2,1
    eba8:	1000041e 	bne	r2,zero,ebbc <alt_sys_init+0x570>
    ebac:	008000b4 	movhi	r2,2
    ebb0:	10a51104 	addi	r2,r2,-27580
    ebb4:	10001315 	stw	zero,76(r2)
    ebb8:	00000e06 	br	ebf4 <alt_sys_init+0x5a8>
    ebbc:	008000b4 	movhi	r2,2
    ebc0:	10a51104 	addi	r2,r2,-27580
    ebc4:	10801017 	ldw	r2,64(r2)
    ebc8:	10800098 	cmpnei	r2,r2,2
    ebcc:	1000051e 	bne	r2,zero,ebe4 <alt_sys_init+0x598>
    ebd0:	008000b4 	movhi	r2,2
    ebd4:	10a51104 	addi	r2,r2,-27580
    ebd8:	00c00044 	movi	r3,1
    ebdc:	10c01315 	stw	r3,76(r2)
    ebe0:	00000406 	br	ebf4 <alt_sys_init+0x5a8>
    ebe4:	008000b4 	movhi	r2,2
    ebe8:	10a51104 	addi	r2,r2,-27580
    ebec:	00c00084 	movi	r3,2
    ebf0:	10c01315 	stw	r3,76(r2)
    ebf4:	e0bfff03 	ldbu	r2,-4(fp)
    ebf8:	00c00804 	movi	r3,32
    ebfc:	1885c83a 	sub	r2,r3,r2
    ec00:	00ffffc4 	movi	r3,-1
    ec04:	1886d83a 	srl	r3,r3,r2
    ec08:	008000b4 	movhi	r2,2
    ec0c:	10a51104 	addi	r2,r2,-27580
    ec10:	10c01415 	stw	r3,80(r2)
    ec14:	e0ffff03 	ldbu	r3,-4(fp)
    ec18:	008000b4 	movhi	r2,2
    ec1c:	10a51104 	addi	r2,r2,-27580
    ec20:	10801317 	ldw	r2,76(r2)
    ec24:	1887883a 	add	r3,r3,r2
    ec28:	008000b4 	movhi	r2,2
    ec2c:	10a51104 	addi	r2,r2,-27580
    ec30:	10c01515 	stw	r3,84(r2)
    ec34:	e0bfff43 	ldbu	r2,-3(fp)
    ec38:	00c00804 	movi	r3,32
    ec3c:	1885c83a 	sub	r2,r3,r2
    ec40:	00ffffc4 	movi	r3,-1
    ec44:	1886d83a 	srl	r3,r3,r2
    ec48:	008000b4 	movhi	r2,2
    ec4c:	10a51104 	addi	r2,r2,-27580
    ec50:	10c01615 	stw	r3,88(r2)
    ec54:	010000b4 	movhi	r4,2
    ec58:	21251104 	addi	r4,r4,-27580
    ec5c:	000e5e00 	call	e5e0 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
    ec60:	008000b4 	movhi	r2,2
    ec64:	10a52804 	addi	r2,r2,-27488
    ec68:	10800a17 	ldw	r2,40(r2)
    ec6c:	10800017 	ldw	r2,0(r2)
    ec70:	1007883a 	mov	r3,r2
    ec74:	008000b4 	movhi	r2,2
    ec78:	10a52804 	addi	r2,r2,-27488
    ec7c:	10c00b15 	stw	r3,44(r2)
    ec80:	008000b4 	movhi	r2,2
    ec84:	10a52804 	addi	r2,r2,-27488
    ec88:	10800a17 	ldw	r2,40(r2)
    ec8c:	10800104 	addi	r2,r2,4
    ec90:	10800017 	ldw	r2,0(r2)
    ec94:	1007883a 	mov	r3,r2
    ec98:	008000b4 	movhi	r2,2
    ec9c:	10a52804 	addi	r2,r2,-27488
    eca0:	10c00c15 	stw	r3,48(r2)
    eca4:	008000b4 	movhi	r2,2
    eca8:	10a52804 	addi	r2,r2,-27488
    ecac:	10800a17 	ldw	r2,40(r2)
    ecb0:	10800204 	addi	r2,r2,8
    ecb4:	10800017 	ldw	r2,0(r2)
    ecb8:	10ffffcc 	andi	r3,r2,65535
    ecbc:	008000b4 	movhi	r2,2
    ecc0:	10a52804 	addi	r2,r2,-27488
    ecc4:	10c00f15 	stw	r3,60(r2)
    ecc8:	008000b4 	movhi	r2,2
    eccc:	10a52804 	addi	r2,r2,-27488
    ecd0:	10800a17 	ldw	r2,40(r2)
    ecd4:	10800204 	addi	r2,r2,8
    ecd8:	10800017 	ldw	r2,0(r2)
    ecdc:	1006d43a 	srli	r3,r2,16
    ece0:	008000b4 	movhi	r2,2
    ece4:	10a52804 	addi	r2,r2,-27488
    ece8:	10c01015 	stw	r3,64(r2)
    ecec:	008000b4 	movhi	r2,2
    ecf0:	10a52804 	addi	r2,r2,-27488
    ecf4:	10800a17 	ldw	r2,40(r2)
    ecf8:	10800304 	addi	r2,r2,12
    ecfc:	10800017 	ldw	r2,0(r2)
    ed00:	1005d07a 	srai	r2,r2,1
    ed04:	10c0004c 	andi	r3,r2,1
    ed08:	008000b4 	movhi	r2,2
    ed0c:	10a52804 	addi	r2,r2,-27488
    ed10:	10c00d15 	stw	r3,52(r2)
    ed14:	008000b4 	movhi	r2,2
    ed18:	10a52804 	addi	r2,r2,-27488
    ed1c:	10800a17 	ldw	r2,40(r2)
    ed20:	10800304 	addi	r2,r2,12
    ed24:	10800017 	ldw	r2,0(r2)
    ed28:	1005d13a 	srai	r2,r2,4
    ed2c:	10c003cc 	andi	r3,r2,15
    ed30:	008000b4 	movhi	r2,2
    ed34:	10a52804 	addi	r2,r2,-27488
    ed38:	10c00e15 	stw	r3,56(r2)
    ed3c:	008000b4 	movhi	r2,2
    ed40:	10a52804 	addi	r2,r2,-27488
    ed44:	10800a17 	ldw	r2,40(r2)
    ed48:	10800304 	addi	r2,r2,12
    ed4c:	10800017 	ldw	r2,0(r2)
    ed50:	1005d43a 	srai	r2,r2,16
    ed54:	e0bfff85 	stb	r2,-2(fp)
    ed58:	008000b4 	movhi	r2,2
    ed5c:	10a52804 	addi	r2,r2,-27488
    ed60:	10800a17 	ldw	r2,40(r2)
    ed64:	10800304 	addi	r2,r2,12
    ed68:	10800017 	ldw	r2,0(r2)
    ed6c:	1004d63a 	srli	r2,r2,24
    ed70:	e0bfffc5 	stb	r2,-1(fp)
    ed74:	008000b4 	movhi	r2,2
    ed78:	10a52804 	addi	r2,r2,-27488
    ed7c:	10800e17 	ldw	r2,56(r2)
    ed80:	10800058 	cmpnei	r2,r2,1
    ed84:	1000041e 	bne	r2,zero,ed98 <alt_sys_init+0x74c>
    ed88:	008000b4 	movhi	r2,2
    ed8c:	10a52804 	addi	r2,r2,-27488
    ed90:	10001115 	stw	zero,68(r2)
    ed94:	00000e06 	br	edd0 <alt_sys_init+0x784>
    ed98:	008000b4 	movhi	r2,2
    ed9c:	10a52804 	addi	r2,r2,-27488
    eda0:	10800e17 	ldw	r2,56(r2)
    eda4:	10800098 	cmpnei	r2,r2,2
    eda8:	1000051e 	bne	r2,zero,edc0 <alt_sys_init+0x774>
    edac:	008000b4 	movhi	r2,2
    edb0:	10a52804 	addi	r2,r2,-27488
    edb4:	00c00044 	movi	r3,1
    edb8:	10c01115 	stw	r3,68(r2)
    edbc:	00000406 	br	edd0 <alt_sys_init+0x784>
    edc0:	008000b4 	movhi	r2,2
    edc4:	10a52804 	addi	r2,r2,-27488
    edc8:	00c00084 	movi	r3,2
    edcc:	10c01115 	stw	r3,68(r2)
    edd0:	e0bfff83 	ldbu	r2,-2(fp)
    edd4:	00c00804 	movi	r3,32
    edd8:	1885c83a 	sub	r2,r3,r2
    eddc:	00ffffc4 	movi	r3,-1
    ede0:	1886d83a 	srl	r3,r3,r2
    ede4:	008000b4 	movhi	r2,2
    ede8:	10a52804 	addi	r2,r2,-27488
    edec:	10c01215 	stw	r3,72(r2)
    edf0:	e0ffff83 	ldbu	r3,-2(fp)
    edf4:	008000b4 	movhi	r2,2
    edf8:	10a52804 	addi	r2,r2,-27488
    edfc:	10801117 	ldw	r2,68(r2)
    ee00:	1887883a 	add	r3,r3,r2
    ee04:	008000b4 	movhi	r2,2
    ee08:	10a52804 	addi	r2,r2,-27488
    ee0c:	10c01315 	stw	r3,76(r2)
    ee10:	e0bfffc3 	ldbu	r2,-1(fp)
    ee14:	00c00804 	movi	r3,32
    ee18:	1885c83a 	sub	r2,r3,r2
    ee1c:	00ffffc4 	movi	r3,-1
    ee20:	1886d83a 	srl	r3,r3,r2
    ee24:	008000b4 	movhi	r2,2
    ee28:	10a52804 	addi	r2,r2,-27488
    ee2c:	10c01415 	stw	r3,80(r2)
    ee30:	010000b4 	movhi	r4,2
    ee34:	21252804 	addi	r4,r4,-27488
    ee38:	000e5e00 	call	e5e0 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
    ee3c:	010000b4 	movhi	r4,2
    ee40:	21253d04 	addi	r4,r4,-27404
    ee44:	000e5e00 	call	e5e0 <alt_dev_reg>
}
    ee48:	0001883a 	nop
    ee4c:	e037883a 	mov	sp,fp
    ee50:	dfc00117 	ldw	ra,4(sp)
    ee54:	df000017 	ldw	fp,0(sp)
    ee58:	dec00204 	addi	sp,sp,8
    ee5c:	f800283a 	ret

0000ee60 <Write_Sector_Data>:
///////////////////////////////////////////////////////////////////////////

        
bool Write_Sector_Data(int sector_index, int partition_offset)
// This function writes a sector at the specified address on the SD Card.
{
    ee60:	defffa04 	addi	sp,sp,-24
    ee64:	dfc00515 	stw	ra,20(sp)
    ee68:	df000415 	stw	fp,16(sp)
    ee6c:	df000404 	addi	fp,sp,16
    ee70:	e13ffe15 	stw	r4,-8(fp)
    ee74:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
    ee78:	e03ffc15 	stw	zero,-16(fp)
    
    if (alt_up_sd_card_is_Present())
    ee7c:	0011b900 	call	11b90 <alt_up_sd_card_is_Present>
    ee80:	10001e26 	beq	r2,zero,eefc <Write_Sector_Data+0x9c>
    {
        short int reg_state = 0xff;
    ee84:	00803fc4 	movi	r2,255
    ee88:	e0bffd0d 	sth	r2,-12(fp)

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
    ee8c:	d0a7d817 	ldw	r2,-24736(gp)
    ee90:	e13ffe17 	ldw	r4,-8(fp)
    ee94:	e0ffff17 	ldw	r3,-4(fp)
    ee98:	20c7883a 	add	r3,r4,r3
    ee9c:	1806927a 	slli	r3,r3,9
    eea0:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
    eea4:	d0a7d717 	ldw	r2,-24740(gp)
    eea8:	00c00604 	movi	r3,24
    eeac:	10c0002d 	sthio	r3,0(r2)
        do {
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
    eeb0:	d0a7d417 	ldw	r2,-24752(gp)
    eeb4:	1080002b 	ldhuio	r2,0(r2)
    eeb8:	10bfffcc 	andi	r2,r2,65535
    eebc:	e0bffd0d 	sth	r2,-12(fp)
        } while ((reg_state & 0x04)!=0);
    eec0:	e0bffd0b 	ldhu	r2,-12(fp)
    eec4:	10bfffcc 	andi	r2,r2,65535
    eec8:	1080010c 	andi	r2,r2,4
    eecc:	103ff81e 	bne	r2,zero,eeb0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700eeb0>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
    eed0:	e0bffd0b 	ldhu	r2,-12(fp)
    eed4:	10bfffcc 	andi	r2,r2,65535
    eed8:	1080040c 	andi	r2,r2,16
    eedc:	1000071e 	bne	r2,zero,eefc <Write_Sector_Data+0x9c>
        {
            result = true;
    eee0:	00800044 	movi	r2,1
    eee4:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
    eee8:	d027dd15 	stw	zero,-24716(gp)
            current_sector_index = sector_index+partition_offset;
    eeec:	e0fffe17 	ldw	r3,-8(fp)
    eef0:	e0bfff17 	ldw	r2,-4(fp)
    eef4:	1885883a 	add	r2,r3,r2
    eef8:	d0a7de15 	stw	r2,-24712(gp)
        }
    }
    return result;
    eefc:	e0bffc17 	ldw	r2,-16(fp)
}
    ef00:	e037883a 	mov	sp,fp
    ef04:	dfc00117 	ldw	ra,4(sp)
    ef08:	df000017 	ldw	fp,0(sp)
    ef0c:	dec00204 	addi	sp,sp,8
    ef10:	f800283a 	ret

0000ef14 <Save_Modified_Sector>:


bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
    ef14:	defffd04 	addi	sp,sp,-12
    ef18:	dfc00215 	stw	ra,8(sp)
    ef1c:	df000115 	stw	fp,4(sp)
    ef20:	df000104 	addi	fp,sp,4
    bool result = true;
    ef24:	00800044 	movi	r2,1
    ef28:	e0bfff15 	stw	r2,-4(fp)
    if (current_sector_modified)
    ef2c:	d0a7dd17 	ldw	r2,-24716(gp)
    ef30:	10000526 	beq	r2,zero,ef48 <Save_Modified_Sector+0x34>
    {
        result = Write_Sector_Data(current_sector_index, 0);
    ef34:	d0a7de17 	ldw	r2,-24712(gp)
    ef38:	000b883a 	mov	r5,zero
    ef3c:	1009883a 	mov	r4,r2
    ef40:	000ee600 	call	ee60 <Write_Sector_Data>
    ef44:	e0bfff15 	stw	r2,-4(fp)
    }
    return result;
    ef48:	e0bfff17 	ldw	r2,-4(fp)
}
    ef4c:	e037883a 	mov	sp,fp
    ef50:	dfc00117 	ldw	ra,4(sp)
    ef54:	df000017 	ldw	fp,0(sp)
    ef58:	dec00204 	addi	sp,sp,8
    ef5c:	f800283a 	ret

0000ef60 <Read_Sector_Data>:


bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
    ef60:	defffa04 	addi	sp,sp,-24
    ef64:	dfc00515 	stw	ra,20(sp)
    ef68:	df000415 	stw	fp,16(sp)
    ef6c:	df000404 	addi	fp,sp,16
    ef70:	e13ffe15 	stw	r4,-8(fp)
    ef74:	e17fff15 	stw	r5,-4(fp)
	bool result = false;
    ef78:	e03ffc15 	stw	zero,-16(fp)
    
	if (alt_up_sd_card_is_Present())
    ef7c:	0011b900 	call	11b90 <alt_up_sd_card_is_Present>
    ef80:	10002726 	beq	r2,zero,f020 <Read_Sector_Data+0xc0>
	{
		short int reg_state = 0xff;
    ef84:	00803fc4 	movi	r2,255
    ef88:	e0bffd0d 	sth	r2,-12(fp)
        
        /* Write data to the SD card if the current buffer is out of date. */
        if (current_sector_modified)
    ef8c:	d0a7dd17 	ldw	r2,-24716(gp)
    ef90:	10000726 	beq	r2,zero,efb0 <Read_Sector_Data+0x50>
        {
            if (Write_Sector_Data(current_sector_index, 0) == false)
    ef94:	d0a7de17 	ldw	r2,-24712(gp)
    ef98:	000b883a 	mov	r5,zero
    ef9c:	1009883a 	mov	r4,r2
    efa0:	000ee600 	call	ee60 <Write_Sector_Data>
    efa4:	1000021e 	bne	r2,zero,efb0 <Read_Sector_Data+0x50>
            {
                return false;
    efa8:	0005883a 	mov	r2,zero
    efac:	00001d06 	br	f024 <Read_Sector_Data+0xc4>
            }
        }
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
    efb0:	d0a7d817 	ldw	r2,-24736(gp)
    efb4:	e13ffe17 	ldw	r4,-8(fp)
    efb8:	e0ffff17 	ldw	r3,-4(fp)
    efbc:	20c7883a 	add	r3,r4,r3
    efc0:	1806927a 	slli	r3,r3,9
    efc4:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
    efc8:	d0a7d717 	ldw	r2,-24740(gp)
    efcc:	00c00444 	movi	r3,17
    efd0:	10c0002d 	sthio	r3,0(r2)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
    efd4:	d0a7d417 	ldw	r2,-24752(gp)
    efd8:	1080002b 	ldhuio	r2,0(r2)
    efdc:	10bfffcc 	andi	r2,r2,65535
    efe0:	e0bffd0d 	sth	r2,-12(fp)
		} while ((reg_state & 0x04)!=0);
    efe4:	e0bffd0b 	ldhu	r2,-12(fp)
    efe8:	10bfffcc 	andi	r2,r2,65535
    efec:	1080010c 	andi	r2,r2,4
    eff0:	103ff81e 	bne	r2,zero,efd4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700efd4>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
    eff4:	e0bffd0b 	ldhu	r2,-12(fp)
    eff8:	10bfffcc 	andi	r2,r2,65535
    effc:	1080040c 	andi	r2,r2,16
    f000:	1000071e 	bne	r2,zero,f020 <Read_Sector_Data+0xc0>
		{
			result = true;
    f004:	00800044 	movi	r2,1
    f008:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
    f00c:	d027dd15 	stw	zero,-24716(gp)
            current_sector_index = sector_index+partition_offset;
    f010:	e0fffe17 	ldw	r3,-8(fp)
    f014:	e0bfff17 	ldw	r2,-4(fp)
    f018:	1885883a 	add	r2,r3,r2
    f01c:	d0a7de15 	stw	r2,-24712(gp)
		}
	}
	return result;
    f020:	e0bffc17 	ldw	r2,-16(fp)
}
    f024:	e037883a 	mov	sp,fp
    f028:	dfc00117 	ldw	ra,4(sp)
    f02c:	df000017 	ldw	fp,0(sp)
    f030:	dec00204 	addi	sp,sp,8
    f034:	f800283a 	ret

0000f038 <get_cluster_flag>:


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
    f038:	defffb04 	addi	sp,sp,-20
    f03c:	dfc00415 	stw	ra,16(sp)
    f040:	df000315 	stw	fp,12(sp)
    f044:	df000304 	addi	fp,sp,12
    f048:	e13ffe15 	stw	r4,-8(fp)
    f04c:	e17fff15 	stw	r5,-4(fp)
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
    f050:	e0bffe17 	ldw	r2,-8(fp)
    f054:	1004d23a 	srli	r2,r2,8
    f058:	d0e7da17 	ldw	r3,-24728(gp)
    f05c:	10c5883a 	add	r2,r2,r3
    f060:	e0bffd15 	stw	r2,-12(fp)
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
    f064:	008000b4 	movhi	r2,2
    f068:	10ad3a04 	addi	r2,r2,-19224
    f06c:	10801117 	ldw	r2,68(r2)
    f070:	e0fffd17 	ldw	r3,-12(fp)
    f074:	1885883a 	add	r2,r3,r2
    f078:	e0bffd15 	stw	r2,-12(fp)
     
    if (sector_index != current_sector_index)
    f07c:	d0a7de17 	ldw	r2,-24712(gp)
    f080:	e0fffd17 	ldw	r3,-12(fp)
    f084:	18800726 	beq	r3,r2,f0a4 <get_cluster_flag+0x6c>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
    f088:	e0bffd17 	ldw	r2,-12(fp)
    f08c:	000b883a 	mov	r5,zero
    f090:	1009883a 	mov	r4,r2
    f094:	000ef600 	call	ef60 <Read_Sector_Data>
    f098:	1000021e 	bne	r2,zero,f0a4 <get_cluster_flag+0x6c>
        {
            return false;
    f09c:	0005883a 	mov	r2,zero
    f0a0:	00000d06 	br	f0d8 <get_cluster_flag+0xa0>
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
    f0a4:	e0bffe17 	ldw	r2,-8(fp)
    f0a8:	10803fcc 	andi	r2,r2,255
    f0ac:	1085883a 	add	r2,r2,r2
    f0b0:	1007883a 	mov	r3,r2
    f0b4:	d0a7dc17 	ldw	r2,-24720(gp)
    f0b8:	10800a17 	ldw	r2,40(r2)
    f0bc:	1885883a 	add	r2,r3,r2
    f0c0:	1080002b 	ldhuio	r2,0(r2)
    f0c4:	10bfffcc 	andi	r2,r2,65535
    f0c8:	1007883a 	mov	r3,r2
    f0cc:	e0bfff17 	ldw	r2,-4(fp)
    f0d0:	10c0000d 	sth	r3,0(r2)
    return true;
    f0d4:	00800044 	movi	r2,1
}
    f0d8:	e037883a 	mov	sp,fp
    f0dc:	dfc00117 	ldw	ra,4(sp)
    f0e0:	df000017 	ldw	fp,0(sp)
    f0e4:	dec00204 	addi	sp,sp,8
    f0e8:	f800283a 	ret

0000f0ec <mark_cluster>:


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    f0ec:	defffa04 	addi	sp,sp,-24
    f0f0:	dfc00515 	stw	ra,20(sp)
    f0f4:	df000415 	stw	fp,16(sp)
    f0f8:	df000404 	addi	fp,sp,16
    f0fc:	e13ffd15 	stw	r4,-12(fp)
    f100:	2805883a 	mov	r2,r5
    f104:	e1bfff15 	stw	r6,-4(fp)
    f108:	e0bffe0d 	sth	r2,-8(fp)
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
    f10c:	e0bffd17 	ldw	r2,-12(fp)
    f110:	1004d23a 	srli	r2,r2,8
    f114:	d0e7da17 	ldw	r3,-24728(gp)
    f118:	10c5883a 	add	r2,r2,r3
    f11c:	e0bffc15 	stw	r2,-16(fp)
    
    if (first_fat)
    f120:	e0bfff17 	ldw	r2,-4(fp)
    f124:	10000726 	beq	r2,zero,f144 <mark_cluster+0x58>
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
    f128:	008000b4 	movhi	r2,2
    f12c:	10ad3a04 	addi	r2,r2,-19224
    f130:	10801117 	ldw	r2,68(r2)
    f134:	e0fffc17 	ldw	r3,-16(fp)
    f138:	1885883a 	add	r2,r3,r2
    f13c:	e0bffc15 	stw	r2,-16(fp)
    f140:	00000606 	br	f15c <mark_cluster+0x70>
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
    f144:	008000b4 	movhi	r2,2
    f148:	10ad3a04 	addi	r2,r2,-19224
    f14c:	10801217 	ldw	r2,72(r2)
    f150:	e0fffc17 	ldw	r3,-16(fp)
    f154:	1885883a 	add	r2,r3,r2
    f158:	e0bffc15 	stw	r2,-16(fp)
    }
     
    if (sector_index != current_sector_index)
    f15c:	d0a7de17 	ldw	r2,-24712(gp)
    f160:	e0fffc17 	ldw	r3,-16(fp)
    f164:	18800726 	beq	r3,r2,f184 <mark_cluster+0x98>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
    f168:	e0bffc17 	ldw	r2,-16(fp)
    f16c:	000b883a 	mov	r5,zero
    f170:	1009883a 	mov	r4,r2
    f174:	000ef600 	call	ef60 <Read_Sector_Data>
    f178:	1000021e 	bne	r2,zero,f184 <mark_cluster+0x98>
        {
            return false;
    f17c:	0005883a 	mov	r2,zero
    f180:	00000d06 	br	f1b8 <mark_cluster+0xcc>
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
    f184:	e0bffd17 	ldw	r2,-12(fp)
    f188:	10803fcc 	andi	r2,r2,255
    f18c:	1085883a 	add	r2,r2,r2
    f190:	1007883a 	mov	r3,r2
    f194:	d0a7dc17 	ldw	r2,-24720(gp)
    f198:	10800a17 	ldw	r2,40(r2)
    f19c:	1885883a 	add	r2,r3,r2
    f1a0:	1007883a 	mov	r3,r2
    f1a4:	e0bffe0f 	ldh	r2,-8(fp)
    f1a8:	1880002d 	sthio	r2,0(r3)
    current_sector_modified = true;
    f1ac:	00800044 	movi	r2,1
    f1b0:	d0a7dd15 	stw	r2,-24716(gp)
    return true;
    f1b4:	00800044 	movi	r2,1
}
    f1b8:	e037883a 	mov	sp,fp
    f1bc:	dfc00117 	ldw	ra,4(sp)
    f1c0:	df000017 	ldw	fp,0(sp)
    f1c4:	dec00204 	addi	sp,sp,8
    f1c8:	f800283a 	ret

0000f1cc <Check_for_Master_Boot_Record>:

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
    f1cc:	defff704 	addi	sp,sp,-36
    f1d0:	dfc00815 	stw	ra,32(sp)
    f1d4:	df000715 	stw	fp,28(sp)
    f1d8:	df000704 	addi	fp,sp,28
	bool result = false;
    f1dc:	e03ff915 	stw	zero,-28(fp)
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data(0, 0))
    f1e0:	000b883a 	mov	r5,zero
    f1e4:	0009883a 	mov	r4,zero
    f1e8:	000ef600 	call	ef60 <Read_Sector_Data>
    f1ec:	10005a26 	beq	r2,zero,f358 <Check_for_Master_Boot_Record+0x18c>
	{
		end =  (short int) IORD_16DIRECT(device_pointer->base,0x1fe);
    f1f0:	d0a7dc17 	ldw	r2,-24720(gp)
    f1f4:	10800a17 	ldw	r2,40(r2)
    f1f8:	10807f84 	addi	r2,r2,510
    f1fc:	1080002b 	ldhuio	r2,0(r2)
    f200:	10bfffcc 	andi	r2,r2,65535
    f204:	10bfffcc 	andi	r2,r2,65535
    f208:	10a0001c 	xori	r2,r2,32768
    f20c:	10a00004 	addi	r2,r2,-32768
    f210:	e0bffb15 	stw	r2,-20(fp)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
    f214:	e0bffb17 	ldw	r2,-20(fp)
    f218:	10ffffcc 	andi	r3,r2,65535
    f21c:	00aa9554 	movui	r2,43605
    f220:	18804d1e 	bne	r3,r2,f358 <Check_for_Master_Boot_Record+0x18c>
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
    f224:	e03ffa15 	stw	zero,-24(fp)
    f228:	00004806 	br	f34c <Check_for_Master_Boot_Record+0x180>
			{
				int partition_data_offset = (index * 16) + 0x01be;
    f22c:	e0bffa17 	ldw	r2,-24(fp)
    f230:	1004913a 	slli	r2,r2,4
    f234:	10806f84 	addi	r2,r2,446
    f238:	e0bffc15 	stw	r2,-16(fp)
				char type;
		        
				// Read Partition type
				type = (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);
    f23c:	d0a7dc17 	ldw	r2,-24720(gp)
    f240:	10c00a17 	ldw	r3,40(r2)
    f244:	e0bffc17 	ldw	r2,-16(fp)
    f248:	1885883a 	add	r2,r3,r2
    f24c:	10800104 	addi	r2,r2,4
    f250:	10800023 	ldbuio	r2,0(r2)
    f254:	10803fcc 	andi	r2,r2,255
    f258:	e0bffd05 	stb	r2,-12(fp)

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
    f25c:	e0bffd07 	ldb	r2,-12(fp)
    f260:	10800060 	cmpeqi	r2,r2,1
    f264:	1000091e 	bne	r2,zero,f28c <Check_for_Master_Boot_Record+0xc0>
    f268:	e0bffd07 	ldb	r2,-12(fp)
    f26c:	10800120 	cmpeqi	r2,r2,4
    f270:	1000061e 	bne	r2,zero,f28c <Check_for_Master_Boot_Record+0xc0>
    f274:	e0bffd07 	ldb	r2,-12(fp)
    f278:	108001a0 	cmpeqi	r2,r2,6
    f27c:	1000031e 	bne	r2,zero,f28c <Check_for_Master_Boot_Record+0xc0>
    f280:	e0bffd07 	ldb	r2,-12(fp)
    f284:	10800398 	cmpnei	r2,r2,14
    f288:	10002d1e 	bne	r2,zero,f340 <Check_for_Master_Boot_Record+0x174>
				{
					// Get partition offset and size.
					offset = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
    f28c:	d0a7dc17 	ldw	r2,-24720(gp)
    f290:	10c00a17 	ldw	r3,40(r2)
    f294:	e0bffc17 	ldw	r2,-16(fp)
    f298:	1885883a 	add	r2,r3,r2
    f29c:	10800284 	addi	r2,r2,10
    f2a0:	1080002b 	ldhuio	r2,0(r2)
    f2a4:	10bfffcc 	andi	r2,r2,65535
    f2a8:	1006943a 	slli	r3,r2,16
    f2ac:	d0a7dc17 	ldw	r2,-24720(gp)
    f2b0:	11000a17 	ldw	r4,40(r2)
    f2b4:	e0bffc17 	ldw	r2,-16(fp)
    f2b8:	2085883a 	add	r2,r4,r2
    f2bc:	10800204 	addi	r2,r2,8
    f2c0:	1080002b 	ldhuio	r2,0(r2)
    f2c4:	10bfffcc 	andi	r2,r2,65535
    f2c8:	10bfffcc 	andi	r2,r2,65535
    f2cc:	1884b03a 	or	r2,r3,r2
    f2d0:	e0bffe15 	stw	r2,-8(fp)
					partition_size = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));
    f2d4:	d0a7dc17 	ldw	r2,-24720(gp)
    f2d8:	10c00a17 	ldw	r3,40(r2)
    f2dc:	e0bffc17 	ldw	r2,-16(fp)
    f2e0:	1885883a 	add	r2,r3,r2
    f2e4:	10800384 	addi	r2,r2,14
    f2e8:	1080002b 	ldhuio	r2,0(r2)
    f2ec:	10bfffcc 	andi	r2,r2,65535
    f2f0:	1006943a 	slli	r3,r2,16
    f2f4:	d0a7dc17 	ldw	r2,-24720(gp)
    f2f8:	11000a17 	ldw	r4,40(r2)
    f2fc:	e0bffc17 	ldw	r2,-16(fp)
    f300:	2085883a 	add	r2,r4,r2
    f304:	10800304 	addi	r2,r2,12
    f308:	1080002b 	ldhuio	r2,0(r2)
    f30c:	10bfffcc 	andi	r2,r2,65535
    f310:	10bfffcc 	andi	r2,r2,65535
    f314:	1884b03a 	or	r2,r3,r2
    f318:	e0bfff15 	stw	r2,-4(fp)
		            
					// Check if the partition is valid
					if (partition_size > 0)
    f31c:	e0bfff17 	ldw	r2,-4(fp)
    f320:	0080070e 	bge	zero,r2,f340 <Check_for_Master_Boot_Record+0x174>
					{
						result = true;
    f324:	00800044 	movi	r2,1
    f328:	e0bff915 	stw	r2,-28(fp)
						fat_partition_size_in_512_byte_sectors = partition_size;
    f32c:	e0bfff17 	ldw	r2,-4(fp)
    f330:	d0a7db15 	stw	r2,-24724(gp)
						fat_partition_offset_in_512_byte_sectors = offset;
    f334:	e0bffe17 	ldw	r2,-8(fp)
    f338:	d0a7da15 	stw	r2,-24728(gp)
						break;
    f33c:	00000606 	br	f358 <Check_for_Master_Boot_Record+0x18c>

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
    f340:	e0bffa17 	ldw	r2,-24(fp)
    f344:	10800044 	addi	r2,r2,1
    f348:	e0bffa15 	stw	r2,-24(fp)
    f34c:	e0bffa17 	ldw	r2,-24(fp)
    f350:	10800110 	cmplti	r2,r2,4
    f354:	103fb51e 	bne	r2,zero,f22c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f22c>
				}
			}
		}
	}

	return result;
    f358:	e0bff917 	ldw	r2,-28(fp)
}
    f35c:	e037883a 	mov	sp,fp
    f360:	dfc00117 	ldw	ra,4(sp)
    f364:	df000017 	ldw	fp,0(sp)
    f368:	dec00204 	addi	sp,sp,8
    f36c:	f800283a 	ret

0000f370 <Read_File_Record_At_Offset>:


bool Read_File_Record_At_Offset(int offset, t_file_record *record, unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
    f370:	defff804 	addi	sp,sp,-32
    f374:	dfc00715 	stw	ra,28(sp)
    f378:	df000615 	stw	fp,24(sp)
    f37c:	df000604 	addi	fp,sp,24
    f380:	e13ffc15 	stw	r4,-16(fp)
    f384:	e17ffd15 	stw	r5,-12(fp)
    f388:	e1bffe15 	stw	r6,-8(fp)
    f38c:	e1ffff15 	stw	r7,-4(fp)
	bool result = false;
    f390:	e03ffa15 	stw	zero,-24(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
    f394:	e0bffc17 	ldw	r2,-16(fp)
    f398:	108007cc 	andi	r2,r2,31
    f39c:	10008d1e 	bne	r2,zero,f5d4 <Read_File_Record_At_Offset+0x264>
    f3a0:	0011b900 	call	11b90 <alt_up_sd_card_is_Present>
    f3a4:	10008b26 	beq	r2,zero,f5d4 <Read_File_Record_At_Offset+0x264>
    f3a8:	d0a7d317 	ldw	r2,-24756(gp)
    f3ac:	10008926 	beq	r2,zero,f5d4 <Read_File_Record_At_Offset+0x264>
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
    f3b0:	e03ffb15 	stw	zero,-20(fp)
    f3b4:	00001106 	br	f3fc <Read_File_Record_At_Offset+0x8c>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
    f3b8:	e0fffc17 	ldw	r3,-16(fp)
    f3bc:	e0bffb17 	ldw	r2,-20(fp)
    f3c0:	1885883a 	add	r2,r3,r2
    f3c4:	1007883a 	mov	r3,r2
    f3c8:	d0a7dc17 	ldw	r2,-24720(gp)
    f3cc:	10800a17 	ldw	r2,40(r2)
    f3d0:	1885883a 	add	r2,r3,r2
    f3d4:	10800023 	ldbuio	r2,0(r2)
    f3d8:	10803fcc 	andi	r2,r2,255
    f3dc:	1009883a 	mov	r4,r2
    f3e0:	e0fffd17 	ldw	r3,-12(fp)
    f3e4:	e0bffb17 	ldw	r2,-20(fp)
    f3e8:	1885883a 	add	r2,r3,r2
    f3ec:	11000005 	stb	r4,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
    f3f0:	e0bffb17 	ldw	r2,-20(fp)
    f3f4:	10800044 	addi	r2,r2,1
    f3f8:	e0bffb15 	stw	r2,-20(fp)
    f3fc:	e0bffb17 	ldw	r2,-20(fp)
    f400:	10800210 	cmplti	r2,r2,8
    f404:	103fec1e 	bne	r2,zero,f3b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f3b8>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
    f408:	e03ffb15 	stw	zero,-20(fp)
    f40c:	00001306 	br	f45c <Read_File_Record_At_Offset+0xec>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
    f410:	e0fffc17 	ldw	r3,-16(fp)
    f414:	e0bffb17 	ldw	r2,-20(fp)
    f418:	1885883a 	add	r2,r3,r2
    f41c:	1007883a 	mov	r3,r2
    f420:	d0a7dc17 	ldw	r2,-24720(gp)
    f424:	10800a17 	ldw	r2,40(r2)
    f428:	1885883a 	add	r2,r3,r2
    f42c:	10800204 	addi	r2,r2,8
    f430:	10800023 	ldbuio	r2,0(r2)
    f434:	10803fcc 	andi	r2,r2,255
    f438:	1009883a 	mov	r4,r2
    f43c:	e0fffd17 	ldw	r3,-12(fp)
    f440:	e0bffb17 	ldw	r2,-20(fp)
    f444:	1885883a 	add	r2,r3,r2
    f448:	10800204 	addi	r2,r2,8
    f44c:	11000005 	stb	r4,0(r2)

		for (counter = 0; counter < 8; counter++)
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
    f450:	e0bffb17 	ldw	r2,-20(fp)
    f454:	10800044 	addi	r2,r2,1
    f458:	e0bffb15 	stw	r2,-20(fp)
    f45c:	e0bffb17 	ldw	r2,-20(fp)
    f460:	108000d0 	cmplti	r2,r2,3
    f464:	103fea1e 	bne	r2,zero,f410 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f410>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
		}        
		record->attributes          =   (char) IORD_8DIRECT(device_pointer->base, offset+11);
    f468:	d0a7dc17 	ldw	r2,-24720(gp)
    f46c:	10c00a17 	ldw	r3,40(r2)
    f470:	e0bffc17 	ldw	r2,-16(fp)
    f474:	1885883a 	add	r2,r3,r2
    f478:	108002c4 	addi	r2,r2,11
    f47c:	10800023 	ldbuio	r2,0(r2)
    f480:	10803fcc 	andi	r2,r2,255
    f484:	1007883a 	mov	r3,r2
    f488:	e0bffd17 	ldw	r2,-12(fp)
    f48c:	10c002c5 	stb	r3,11(r2)
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
    f490:	d0a7dc17 	ldw	r2,-24720(gp)
    f494:	10c00a17 	ldw	r3,40(r2)
    f498:	e0bffc17 	ldw	r2,-16(fp)
    f49c:	1885883a 	add	r2,r3,r2
    f4a0:	10800384 	addi	r2,r2,14
    f4a4:	1080002b 	ldhuio	r2,0(r2)
    f4a8:	10bfffcc 	andi	r2,r2,65535
    f4ac:	1007883a 	mov	r3,r2
    f4b0:	e0bffd17 	ldw	r2,-12(fp)
    f4b4:	10c0030d 	sth	r3,12(r2)
		record->create_date         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
    f4b8:	d0a7dc17 	ldw	r2,-24720(gp)
    f4bc:	10c00a17 	ldw	r3,40(r2)
    f4c0:	e0bffc17 	ldw	r2,-16(fp)
    f4c4:	1885883a 	add	r2,r3,r2
    f4c8:	10800404 	addi	r2,r2,16
    f4cc:	1080002b 	ldhuio	r2,0(r2)
    f4d0:	10bfffcc 	andi	r2,r2,65535
    f4d4:	1007883a 	mov	r3,r2
    f4d8:	e0bffd17 	ldw	r2,-12(fp)
    f4dc:	10c0038d 	sth	r3,14(r2)
		record->last_access_date    =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
    f4e0:	d0a7dc17 	ldw	r2,-24720(gp)
    f4e4:	10c00a17 	ldw	r3,40(r2)
    f4e8:	e0bffc17 	ldw	r2,-16(fp)
    f4ec:	1885883a 	add	r2,r3,r2
    f4f0:	10800484 	addi	r2,r2,18
    f4f4:	1080002b 	ldhuio	r2,0(r2)
    f4f8:	10bfffcc 	andi	r2,r2,65535
    f4fc:	1007883a 	mov	r3,r2
    f500:	e0bffd17 	ldw	r2,-12(fp)
    f504:	10c0040d 	sth	r3,16(r2)
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
    f508:	d0a7dc17 	ldw	r2,-24720(gp)
    f50c:	10c00a17 	ldw	r3,40(r2)
    f510:	e0bffc17 	ldw	r2,-16(fp)
    f514:	1885883a 	add	r2,r3,r2
    f518:	10800584 	addi	r2,r2,22
    f51c:	1080002b 	ldhuio	r2,0(r2)
    f520:	10bfffcc 	andi	r2,r2,65535
    f524:	1007883a 	mov	r3,r2
    f528:	e0bffd17 	ldw	r2,-12(fp)
    f52c:	10c0048d 	sth	r3,18(r2)
		record->last_modified_date  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
    f530:	d0a7dc17 	ldw	r2,-24720(gp)
    f534:	10c00a17 	ldw	r3,40(r2)
    f538:	e0bffc17 	ldw	r2,-16(fp)
    f53c:	1885883a 	add	r2,r3,r2
    f540:	10800604 	addi	r2,r2,24
    f544:	1080002b 	ldhuio	r2,0(r2)
    f548:	10bfffcc 	andi	r2,r2,65535
    f54c:	1007883a 	mov	r3,r2
    f550:	e0bffd17 	ldw	r2,-12(fp)
    f554:	10c0050d 	sth	r3,20(r2)
		record->start_cluster_index =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
    f558:	d0a7dc17 	ldw	r2,-24720(gp)
    f55c:	10c00a17 	ldw	r3,40(r2)
    f560:	e0bffc17 	ldw	r2,-16(fp)
    f564:	1885883a 	add	r2,r3,r2
    f568:	10800684 	addi	r2,r2,26
    f56c:	1080002b 	ldhuio	r2,0(r2)
    f570:	10bfffcc 	andi	r2,r2,65535
    f574:	1007883a 	mov	r3,r2
    f578:	e0bffd17 	ldw	r2,-12(fp)
    f57c:	10c0058d 	sth	r3,22(r2)
		record->file_size_in_bytes  =	(unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
    f580:	d0a7dc17 	ldw	r2,-24720(gp)
    f584:	10c00a17 	ldw	r3,40(r2)
    f588:	e0bffc17 	ldw	r2,-16(fp)
    f58c:	1885883a 	add	r2,r3,r2
    f590:	10800704 	addi	r2,r2,28
    f594:	10800037 	ldwio	r2,0(r2)
    f598:	1007883a 	mov	r3,r2
    f59c:	e0bffd17 	ldw	r2,-12(fp)
    f5a0:	10c00615 	stw	r3,24(r2)
		record->file_record_cluster = cluster_index;
    f5a4:	e0bffd17 	ldw	r2,-12(fp)
    f5a8:	e0fffe17 	ldw	r3,-8(fp)
    f5ac:	10c00a15 	stw	r3,40(r2)
		record->file_record_sector_in_cluster = sector_in_cluster;
    f5b0:	e0bffd17 	ldw	r2,-12(fp)
    f5b4:	e0ffff17 	ldw	r3,-4(fp)
    f5b8:	10c00b15 	stw	r3,44(r2)
		record->file_record_offset = offset;
    f5bc:	e0bffc17 	ldw	r2,-16(fp)
    f5c0:	1007883a 	mov	r3,r2
    f5c4:	e0bffd17 	ldw	r2,-12(fp)
    f5c8:	10c00c0d 	sth	r3,48(r2)
		result = true;
    f5cc:	00800044 	movi	r2,1
    f5d0:	e0bffa15 	stw	r2,-24(fp)
	}
	return result;
    f5d4:	e0bffa17 	ldw	r2,-24(fp)
}
    f5d8:	e037883a 	mov	sp,fp
    f5dc:	dfc00117 	ldw	ra,4(sp)
    f5e0:	df000017 	ldw	fp,0(sp)
    f5e4:	dec00204 	addi	sp,sp,8
    f5e8:	f800283a 	ret

0000f5ec <Write_File_Record_At_Offset>:


bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
    f5ec:	defff904 	addi	sp,sp,-28
    f5f0:	dfc00615 	stw	ra,24(sp)
    f5f4:	df000515 	stw	fp,20(sp)
    f5f8:	df000504 	addi	fp,sp,20
    f5fc:	e13ffe15 	stw	r4,-8(fp)
    f600:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
    f604:	e03ffb15 	stw	zero,-20(fp)
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
    f608:	e0bffe17 	ldw	r2,-8(fp)
    f60c:	108007cc 	andi	r2,r2,31
    f610:	1000931e 	bne	r2,zero,f860 <Write_File_Record_At_Offset+0x274>
    f614:	0011b900 	call	11b90 <alt_up_sd_card_is_Present>
    f618:	10009126 	beq	r2,zero,f860 <Write_File_Record_At_Offset+0x274>
    f61c:	d0a7d317 	ldw	r2,-24756(gp)
    f620:	10008f26 	beq	r2,zero,f860 <Write_File_Record_At_Offset+0x274>
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
    f624:	e03ffc15 	stw	zero,-16(fp)
    f628:	00001f06 	br	f6a8 <Write_File_Record_At_Offset+0xbc>
        {
            short int two_chars = (short int) record->name[counter+1];
    f62c:	e0bffc17 	ldw	r2,-16(fp)
    f630:	10800044 	addi	r2,r2,1
    f634:	e0ffff17 	ldw	r3,-4(fp)
    f638:	1885883a 	add	r2,r3,r2
    f63c:	10800003 	ldbu	r2,0(r2)
    f640:	10803fcc 	andi	r2,r2,255
    f644:	e0bffd0d 	sth	r2,-12(fp)
            two_chars = two_chars << 8;
    f648:	e0bffd0f 	ldh	r2,-12(fp)
    f64c:	1004923a 	slli	r2,r2,8
    f650:	e0bffd0d 	sth	r2,-12(fp)
            two_chars = two_chars | record->name[counter];
    f654:	e0ffff17 	ldw	r3,-4(fp)
    f658:	e0bffc17 	ldw	r2,-16(fp)
    f65c:	1885883a 	add	r2,r3,r2
    f660:	10800003 	ldbu	r2,0(r2)
    f664:	10c03fcc 	andi	r3,r2,255
    f668:	e0bffd0b 	ldhu	r2,-12(fp)
    f66c:	1884b03a 	or	r2,r3,r2
    f670:	e0bffd0d 	sth	r2,-12(fp)
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
    f674:	e0fffe17 	ldw	r3,-8(fp)
    f678:	e0bffc17 	ldw	r2,-16(fp)
    f67c:	1885883a 	add	r2,r3,r2
    f680:	1007883a 	mov	r3,r2
    f684:	d0a7dc17 	ldw	r2,-24720(gp)
    f688:	10800a17 	ldw	r2,40(r2)
    f68c:	1885883a 	add	r2,r3,r2
    f690:	1007883a 	mov	r3,r2
    f694:	e0bffd0f 	ldh	r2,-12(fp)
    f698:	1880002d 	sthio	r2,0(r3)
    bool result = false;
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
    f69c:	e0bffc17 	ldw	r2,-16(fp)
    f6a0:	10800084 	addi	r2,r2,2
    f6a4:	e0bffc15 	stw	r2,-16(fp)
    f6a8:	e0bffc17 	ldw	r2,-16(fp)
    f6ac:	10800210 	cmplti	r2,r2,8
    f6b0:	103fde1e 	bne	r2,zero,f62c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f62c>
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
    f6b4:	e03ffc15 	stw	zero,-16(fp)
    f6b8:	00001306 	br	f708 <Write_File_Record_At_Offset+0x11c>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
    f6bc:	e0fffe17 	ldw	r3,-8(fp)
    f6c0:	e0bffc17 	ldw	r2,-16(fp)
    f6c4:	1885883a 	add	r2,r3,r2
    f6c8:	1007883a 	mov	r3,r2
    f6cc:	d0a7dc17 	ldw	r2,-24720(gp)
    f6d0:	10800a17 	ldw	r2,40(r2)
    f6d4:	1885883a 	add	r2,r3,r2
    f6d8:	10800204 	addi	r2,r2,8
    f6dc:	1009883a 	mov	r4,r2
    f6e0:	e0ffff17 	ldw	r3,-4(fp)
    f6e4:	e0bffc17 	ldw	r2,-16(fp)
    f6e8:	1885883a 	add	r2,r3,r2
    f6ec:	10800204 	addi	r2,r2,8
    f6f0:	10800003 	ldbu	r2,0(r2)
    f6f4:	10803fcc 	andi	r2,r2,255
    f6f8:	20800025 	stbio	r2,0(r4)
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
    f6fc:	e0bffc17 	ldw	r2,-16(fp)
    f700:	10800044 	addi	r2,r2,1
    f704:	e0bffc15 	stw	r2,-16(fp)
    f708:	e0bffc17 	ldw	r2,-16(fp)
    f70c:	108000d0 	cmplti	r2,r2,3
    f710:	103fea1e 	bne	r2,zero,f6bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f6bc>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
        }        
        IOWR_8DIRECT(device_pointer->base, offset+11, record->attributes);
    f714:	d0a7dc17 	ldw	r2,-24720(gp)
    f718:	10c00a17 	ldw	r3,40(r2)
    f71c:	e0bffe17 	ldw	r2,-8(fp)
    f720:	1885883a 	add	r2,r3,r2
    f724:	108002c4 	addi	r2,r2,11
    f728:	1007883a 	mov	r3,r2
    f72c:	e0bfff17 	ldw	r2,-4(fp)
    f730:	108002c3 	ldbu	r2,11(r2)
    f734:	10803fcc 	andi	r2,r2,255
    f738:	18800025 	stbio	r2,0(r3)
        /* Ignore reserved bytes at locations 12 and 13. */
        IOWR_16DIRECT(device_pointer->base, offset+14, record->create_time);
    f73c:	d0a7dc17 	ldw	r2,-24720(gp)
    f740:	10c00a17 	ldw	r3,40(r2)
    f744:	e0bffe17 	ldw	r2,-8(fp)
    f748:	1885883a 	add	r2,r3,r2
    f74c:	10800384 	addi	r2,r2,14
    f750:	1007883a 	mov	r3,r2
    f754:	e0bfff17 	ldw	r2,-4(fp)
    f758:	1080030b 	ldhu	r2,12(r2)
    f75c:	10bfffcc 	andi	r2,r2,65535
    f760:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+16, record->create_date);
    f764:	d0a7dc17 	ldw	r2,-24720(gp)
    f768:	10c00a17 	ldw	r3,40(r2)
    f76c:	e0bffe17 	ldw	r2,-8(fp)
    f770:	1885883a 	add	r2,r3,r2
    f774:	10800404 	addi	r2,r2,16
    f778:	1007883a 	mov	r3,r2
    f77c:	e0bfff17 	ldw	r2,-4(fp)
    f780:	1080038b 	ldhu	r2,14(r2)
    f784:	10bfffcc 	andi	r2,r2,65535
    f788:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+18, record->last_access_date);
    f78c:	d0a7dc17 	ldw	r2,-24720(gp)
    f790:	10c00a17 	ldw	r3,40(r2)
    f794:	e0bffe17 	ldw	r2,-8(fp)
    f798:	1885883a 	add	r2,r3,r2
    f79c:	10800484 	addi	r2,r2,18
    f7a0:	1007883a 	mov	r3,r2
    f7a4:	e0bfff17 	ldw	r2,-4(fp)
    f7a8:	1080040b 	ldhu	r2,16(r2)
    f7ac:	10bfffcc 	andi	r2,r2,65535
    f7b0:	1880002d 	sthio	r2,0(r3)
        /* Ignore reserved bytes at locations 20 and 21. */
        IOWR_16DIRECT(device_pointer->base, offset+22, record->last_modified_time);
    f7b4:	d0a7dc17 	ldw	r2,-24720(gp)
    f7b8:	10c00a17 	ldw	r3,40(r2)
    f7bc:	e0bffe17 	ldw	r2,-8(fp)
    f7c0:	1885883a 	add	r2,r3,r2
    f7c4:	10800584 	addi	r2,r2,22
    f7c8:	1007883a 	mov	r3,r2
    f7cc:	e0bfff17 	ldw	r2,-4(fp)
    f7d0:	1080048b 	ldhu	r2,18(r2)
    f7d4:	10bfffcc 	andi	r2,r2,65535
    f7d8:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+24, record->last_modified_date);
    f7dc:	d0a7dc17 	ldw	r2,-24720(gp)
    f7e0:	10c00a17 	ldw	r3,40(r2)
    f7e4:	e0bffe17 	ldw	r2,-8(fp)
    f7e8:	1885883a 	add	r2,r3,r2
    f7ec:	10800604 	addi	r2,r2,24
    f7f0:	1007883a 	mov	r3,r2
    f7f4:	e0bfff17 	ldw	r2,-4(fp)
    f7f8:	1080050b 	ldhu	r2,20(r2)
    f7fc:	10bfffcc 	andi	r2,r2,65535
    f800:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+26, record->start_cluster_index);
    f804:	d0a7dc17 	ldw	r2,-24720(gp)
    f808:	10c00a17 	ldw	r3,40(r2)
    f80c:	e0bffe17 	ldw	r2,-8(fp)
    f810:	1885883a 	add	r2,r3,r2
    f814:	10800684 	addi	r2,r2,26
    f818:	1007883a 	mov	r3,r2
    f81c:	e0bfff17 	ldw	r2,-4(fp)
    f820:	1080058b 	ldhu	r2,22(r2)
    f824:	10bfffcc 	andi	r2,r2,65535
    f828:	1880002d 	sthio	r2,0(r3)
        IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
    f82c:	d0a7dc17 	ldw	r2,-24720(gp)
    f830:	10c00a17 	ldw	r3,40(r2)
    f834:	e0bffe17 	ldw	r2,-8(fp)
    f838:	1885883a 	add	r2,r3,r2
    f83c:	10800704 	addi	r2,r2,28
    f840:	1007883a 	mov	r3,r2
    f844:	e0bfff17 	ldw	r2,-4(fp)
    f848:	10800617 	ldw	r2,24(r2)
    f84c:	18800035 	stwio	r2,0(r3)
        current_sector_modified = true;                  
    f850:	00800044 	movi	r2,1
    f854:	d0a7dd15 	stw	r2,-24716(gp)
        result = true;
    f858:	00800044 	movi	r2,1
    f85c:	e0bffb15 	stw	r2,-20(fp)
    }
    return result;
    f860:	e0bffb17 	ldw	r2,-20(fp)
}
    f864:	e037883a 	mov	sp,fp
    f868:	dfc00117 	ldw	ra,4(sp)
    f86c:	df000017 	ldw	fp,0(sp)
    f870:	dec00204 	addi	sp,sp,8
    f874:	f800283a 	ret

0000f878 <Check_for_DOS_FAT>:
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
    f878:	defff904 	addi	sp,sp,-28
    f87c:	dfc00615 	stw	ra,24(sp)
    f880:	df000515 	stw	fp,20(sp)
    f884:	df000504 	addi	fp,sp,20
    f888:	e13fff15 	stw	r4,-4(fp)
	bool result = false;
    f88c:	e03ffb15 	stw	zero,-20(fp)
	int counter = 0;
    f890:	e03ffc15 	stw	zero,-16(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
    f894:	e17fff17 	ldw	r5,-4(fp)
    f898:	0009883a 	mov	r4,zero
    f89c:	000ef600 	call	ef60 <Read_Sector_Data>
    f8a0:	e0bffb15 	stw	r2,-20(fp)
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
    f8a4:	d0a7dc17 	ldw	r2,-24720(gp)
    f8a8:	10800a17 	ldw	r2,40(r2)
    f8ac:	10807f84 	addi	r2,r2,510
    f8b0:	1080002b 	ldhuio	r2,0(r2)
    f8b4:	10bfffcc 	andi	r2,r2,65535
    f8b8:	e0bffe0d 	sth	r2,-8(fp)
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
    f8bc:	e0bffe0f 	ldh	r2,-8(fp)
    f8c0:	10ffffcc 	andi	r3,r2,65535
    f8c4:	00aa9554 	movui	r2,43605
    f8c8:	1881841e 	bne	r3,r2,fedc <Check_for_DOS_FAT+0x664>
    f8cc:	e0bffb17 	ldw	r2,-20(fp)
    f8d0:	10018226 	beq	r2,zero,fedc <Check_for_DOS_FAT+0x664>
	{
		int num_clusters = 0;
    f8d4:	e03ffd15 	stw	zero,-12(fp)

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
    f8d8:	d0a7dc17 	ldw	r2,-24720(gp)
    f8dc:	10800a17 	ldw	r2,40(r2)
    f8e0:	10800023 	ldbuio	r2,0(r2)
    f8e4:	10803fcc 	andi	r2,r2,255
    f8e8:	1007883a 	mov	r3,r2
    f8ec:	008000b4 	movhi	r2,2
    f8f0:	10ad3a04 	addi	r2,r2,-19224
    f8f4:	10c00005 	stb	r3,0(r2)
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
    f8f8:	d0a7dc17 	ldw	r2,-24720(gp)
    f8fc:	10800a17 	ldw	r2,40(r2)
    f900:	10800044 	addi	r2,r2,1
    f904:	10800023 	ldbuio	r2,0(r2)
    f908:	10803fcc 	andi	r2,r2,255
    f90c:	1007883a 	mov	r3,r2
    f910:	008000b4 	movhi	r2,2
    f914:	10ad3a04 	addi	r2,r2,-19224
    f918:	10c00045 	stb	r3,1(r2)
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
    f91c:	d0a7dc17 	ldw	r2,-24720(gp)
    f920:	10800a17 	ldw	r2,40(r2)
    f924:	10800084 	addi	r2,r2,2
    f928:	10800023 	ldbuio	r2,0(r2)
    f92c:	10803fcc 	andi	r2,r2,255
    f930:	1007883a 	mov	r3,r2
    f934:	008000b4 	movhi	r2,2
    f938:	10ad3a04 	addi	r2,r2,-19224
    f93c:	10c00085 	stb	r3,2(r2)
		for (counter = 0; counter < 8; counter++)
    f940:	e03ffc15 	stw	zero,-16(fp)
    f944:	00001106 	br	f98c <Check_for_DOS_FAT+0x114>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
    f948:	d0a7dc17 	ldw	r2,-24720(gp)
    f94c:	10c00a17 	ldw	r3,40(r2)
    f950:	e0bffc17 	ldw	r2,-16(fp)
    f954:	1885883a 	add	r2,r3,r2
    f958:	108000c4 	addi	r2,r2,3
    f95c:	10800023 	ldbuio	r2,0(r2)
    f960:	10803fcc 	andi	r2,r2,255
    f964:	1009883a 	mov	r4,r2
    f968:	008000b4 	movhi	r2,2
    f96c:	10ad3a04 	addi	r2,r2,-19224
    f970:	e0fffc17 	ldw	r3,-16(fp)
    f974:	10c5883a 	add	r2,r2,r3
    f978:	108000c4 	addi	r2,r2,3
    f97c:	11000005 	stb	r4,0(r2)
		int num_clusters = 0;

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++)
    f980:	e0bffc17 	ldw	r2,-16(fp)
    f984:	10800044 	addi	r2,r2,1
    f988:	e0bffc15 	stw	r2,-16(fp)
    f98c:	e0bffc17 	ldw	r2,-16(fp)
    f990:	10800210 	cmplti	r2,r2,8
    f994:	103fec1e 	bne	r2,zero,f948 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f948>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
		}
		boot_sector_data.sector_size_in_bytes = (((unsigned char) IORD_8DIRECT(device_pointer->base, 12)) << 8 ) | ((char) IORD_8DIRECT(device_pointer->base, 11));
    f998:	d0a7dc17 	ldw	r2,-24720(gp)
    f99c:	10800a17 	ldw	r2,40(r2)
    f9a0:	10800304 	addi	r2,r2,12
    f9a4:	10800023 	ldbuio	r2,0(r2)
    f9a8:	10803fcc 	andi	r2,r2,255
    f9ac:	1004923a 	slli	r2,r2,8
    f9b0:	1007883a 	mov	r3,r2
    f9b4:	d0a7dc17 	ldw	r2,-24720(gp)
    f9b8:	10800a17 	ldw	r2,40(r2)
    f9bc:	108002c4 	addi	r2,r2,11
    f9c0:	10800023 	ldbuio	r2,0(r2)
    f9c4:	10803fcc 	andi	r2,r2,255
    f9c8:	10803fcc 	andi	r2,r2,255
    f9cc:	1080201c 	xori	r2,r2,128
    f9d0:	10bfe004 	addi	r2,r2,-128
    f9d4:	1884b03a 	or	r2,r3,r2
    f9d8:	1007883a 	mov	r3,r2
    f9dc:	008000b4 	movhi	r2,2
    f9e0:	10ad3a04 	addi	r2,r2,-19224
    f9e4:	10c0030d 	sth	r3,12(r2)
		boot_sector_data.sectors_per_cluster = ((unsigned char) IORD_8DIRECT(device_pointer->base, 13));
    f9e8:	d0a7dc17 	ldw	r2,-24720(gp)
    f9ec:	10800a17 	ldw	r2,40(r2)
    f9f0:	10800344 	addi	r2,r2,13
    f9f4:	10800023 	ldbuio	r2,0(r2)
    f9f8:	10803fcc 	andi	r2,r2,255
    f9fc:	1007883a 	mov	r3,r2
    fa00:	008000b4 	movhi	r2,2
    fa04:	10ad3a04 	addi	r2,r2,-19224
    fa08:	10c00385 	stb	r3,14(r2)
		boot_sector_data.reserved_sectors = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 14));
    fa0c:	d0a7dc17 	ldw	r2,-24720(gp)
    fa10:	10800a17 	ldw	r2,40(r2)
    fa14:	10800384 	addi	r2,r2,14
    fa18:	1080002b 	ldhuio	r2,0(r2)
    fa1c:	10bfffcc 	andi	r2,r2,65535
    fa20:	1007883a 	mov	r3,r2
    fa24:	008000b4 	movhi	r2,2
    fa28:	10ad3a04 	addi	r2,r2,-19224
    fa2c:	10c0040d 	sth	r3,16(r2)
		boot_sector_data.number_of_FATs = ((unsigned char) IORD_8DIRECT(device_pointer->base, 16));
    fa30:	d0a7dc17 	ldw	r2,-24720(gp)
    fa34:	10800a17 	ldw	r2,40(r2)
    fa38:	10800404 	addi	r2,r2,16
    fa3c:	10800023 	ldbuio	r2,0(r2)
    fa40:	10803fcc 	andi	r2,r2,255
    fa44:	1007883a 	mov	r3,r2
    fa48:	008000b4 	movhi	r2,2
    fa4c:	10ad3a04 	addi	r2,r2,-19224
    fa50:	10c00485 	stb	r3,18(r2)
		boot_sector_data.max_number_of_dir_entires = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 18)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 17));
    fa54:	d0a7dc17 	ldw	r2,-24720(gp)
    fa58:	10800a17 	ldw	r2,40(r2)
    fa5c:	10800484 	addi	r2,r2,18
    fa60:	10800023 	ldbuio	r2,0(r2)
    fa64:	10803fcc 	andi	r2,r2,255
    fa68:	1004923a 	slli	r2,r2,8
    fa6c:	1007883a 	mov	r3,r2
    fa70:	d0a7dc17 	ldw	r2,-24720(gp)
    fa74:	10800a17 	ldw	r2,40(r2)
    fa78:	10800444 	addi	r2,r2,17
    fa7c:	10800023 	ldbuio	r2,0(r2)
    fa80:	10803fcc 	andi	r2,r2,255
    fa84:	10803fcc 	andi	r2,r2,255
    fa88:	1884b03a 	or	r2,r3,r2
    fa8c:	1007883a 	mov	r3,r2
    fa90:	008000b4 	movhi	r2,2
    fa94:	10ad3a04 	addi	r2,r2,-19224
    fa98:	10c0050d 	sth	r3,20(r2)
		boot_sector_data.number_of_sectors_in_partition = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 20)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 19));
    fa9c:	d0a7dc17 	ldw	r2,-24720(gp)
    faa0:	10800a17 	ldw	r2,40(r2)
    faa4:	10800504 	addi	r2,r2,20
    faa8:	10800023 	ldbuio	r2,0(r2)
    faac:	10803fcc 	andi	r2,r2,255
    fab0:	1004923a 	slli	r2,r2,8
    fab4:	1007883a 	mov	r3,r2
    fab8:	d0a7dc17 	ldw	r2,-24720(gp)
    fabc:	10800a17 	ldw	r2,40(r2)
    fac0:	108004c4 	addi	r2,r2,19
    fac4:	10800023 	ldbuio	r2,0(r2)
    fac8:	10803fcc 	andi	r2,r2,255
    facc:	10803fcc 	andi	r2,r2,255
    fad0:	1884b03a 	or	r2,r3,r2
    fad4:	1007883a 	mov	r3,r2
    fad8:	008000b4 	movhi	r2,2
    fadc:	10ad3a04 	addi	r2,r2,-19224
    fae0:	10c0058d 	sth	r3,22(r2)
		boot_sector_data.media_descriptor = ((unsigned char) IORD_8DIRECT(device_pointer->base, 21));
    fae4:	d0a7dc17 	ldw	r2,-24720(gp)
    fae8:	10800a17 	ldw	r2,40(r2)
    faec:	10800544 	addi	r2,r2,21
    faf0:	10800023 	ldbuio	r2,0(r2)
    faf4:	10803fcc 	andi	r2,r2,255
    faf8:	1007883a 	mov	r3,r2
    fafc:	008000b4 	movhi	r2,2
    fb00:	10ad3a04 	addi	r2,r2,-19224
    fb04:	10c00605 	stb	r3,24(r2)
		boot_sector_data.number_of_sectors_per_table = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 22));
    fb08:	d0a7dc17 	ldw	r2,-24720(gp)
    fb0c:	10800a17 	ldw	r2,40(r2)
    fb10:	10800584 	addi	r2,r2,22
    fb14:	1080002b 	ldhuio	r2,0(r2)
    fb18:	10bfffcc 	andi	r2,r2,65535
    fb1c:	1007883a 	mov	r3,r2
    fb20:	008000b4 	movhi	r2,2
    fb24:	10ad3a04 	addi	r2,r2,-19224
    fb28:	10c0068d 	sth	r3,26(r2)
		boot_sector_data.number_of_sectors_per_track = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 24));
    fb2c:	d0a7dc17 	ldw	r2,-24720(gp)
    fb30:	10800a17 	ldw	r2,40(r2)
    fb34:	10800604 	addi	r2,r2,24
    fb38:	1080002b 	ldhuio	r2,0(r2)
    fb3c:	10bfffcc 	andi	r2,r2,65535
    fb40:	1007883a 	mov	r3,r2
    fb44:	008000b4 	movhi	r2,2
    fb48:	10ad3a04 	addi	r2,r2,-19224
    fb4c:	10c0070d 	sth	r3,28(r2)
		boot_sector_data.number_of_heads = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
    fb50:	d0a7dc17 	ldw	r2,-24720(gp)
    fb54:	10800a17 	ldw	r2,40(r2)
    fb58:	10800684 	addi	r2,r2,26
    fb5c:	1080002b 	ldhuio	r2,0(r2)
    fb60:	10bfffcc 	andi	r2,r2,65535
    fb64:	1007883a 	mov	r3,r2
    fb68:	008000b4 	movhi	r2,2
    fb6c:	10ad3a04 	addi	r2,r2,-19224
    fb70:	10c0078d 	sth	r3,30(r2)
		boot_sector_data.number_of_hidden_sectors = ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
    fb74:	d0a7dc17 	ldw	r2,-24720(gp)
    fb78:	10800a17 	ldw	r2,40(r2)
    fb7c:	10800704 	addi	r2,r2,28
    fb80:	10800037 	ldwio	r2,0(r2)
    fb84:	1007883a 	mov	r3,r2
    fb88:	008000b4 	movhi	r2,2
    fb8c:	10ad3a04 	addi	r2,r2,-19224
    fb90:	10c00815 	stw	r3,32(r2)
		boot_sector_data.total_sector_count_if_above_32MB = ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
    fb94:	d0a7dc17 	ldw	r2,-24720(gp)
    fb98:	10800a17 	ldw	r2,40(r2)
    fb9c:	10800804 	addi	r2,r2,32
    fba0:	10800037 	ldwio	r2,0(r2)
    fba4:	1007883a 	mov	r3,r2
    fba8:	008000b4 	movhi	r2,2
    fbac:	10ad3a04 	addi	r2,r2,-19224
    fbb0:	10c00915 	stw	r3,36(r2)
		boot_sector_data.drive_number = ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
    fbb4:	d0a7dc17 	ldw	r2,-24720(gp)
    fbb8:	10800a17 	ldw	r2,40(r2)
    fbbc:	10800904 	addi	r2,r2,36
    fbc0:	10800023 	ldbuio	r2,0(r2)
    fbc4:	10803fcc 	andi	r2,r2,255
    fbc8:	1007883a 	mov	r3,r2
    fbcc:	008000b4 	movhi	r2,2
    fbd0:	10ad3a04 	addi	r2,r2,-19224
    fbd4:	10c00a05 	stb	r3,40(r2)
		boot_sector_data.current_head = ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
    fbd8:	d0a7dc17 	ldw	r2,-24720(gp)
    fbdc:	10800a17 	ldw	r2,40(r2)
    fbe0:	10800944 	addi	r2,r2,37
    fbe4:	10800023 	ldbuio	r2,0(r2)
    fbe8:	10803fcc 	andi	r2,r2,255
    fbec:	1007883a 	mov	r3,r2
    fbf0:	008000b4 	movhi	r2,2
    fbf4:	10ad3a04 	addi	r2,r2,-19224
    fbf8:	10c00a45 	stb	r3,41(r2)
		boot_sector_data.boot_signature = ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
    fbfc:	d0a7dc17 	ldw	r2,-24720(gp)
    fc00:	10800a17 	ldw	r2,40(r2)
    fc04:	10800984 	addi	r2,r2,38
    fc08:	10800023 	ldbuio	r2,0(r2)
    fc0c:	10803fcc 	andi	r2,r2,255
    fc10:	1007883a 	mov	r3,r2
    fc14:	008000b4 	movhi	r2,2
    fc18:	10ad3a04 	addi	r2,r2,-19224
    fc1c:	10c00a85 	stb	r3,42(r2)
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
    fc20:	008000b4 	movhi	r2,2
    fc24:	10ad3a04 	addi	r2,r2,-19224
    fc28:	1080040b 	ldhu	r2,16(r2)
    fc2c:	10ffffcc 	andi	r3,r2,65535
    fc30:	008000b4 	movhi	r2,2
    fc34:	10ad3a04 	addi	r2,r2,-19224
    fc38:	10c01115 	stw	r3,68(r2)
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
    fc3c:	008000b4 	movhi	r2,2
    fc40:	10ad3a04 	addi	r2,r2,-19224
    fc44:	10c01117 	ldw	r3,68(r2)
    fc48:	008000b4 	movhi	r2,2
    fc4c:	10ad3a04 	addi	r2,r2,-19224
    fc50:	1080068b 	ldhu	r2,26(r2)
    fc54:	10bfffcc 	andi	r2,r2,65535
    fc58:	1887883a 	add	r3,r3,r2
    fc5c:	008000b4 	movhi	r2,2
    fc60:	10ad3a04 	addi	r2,r2,-19224
    fc64:	10c01215 	stw	r3,72(r2)
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
    fc68:	008000b4 	movhi	r2,2
    fc6c:	10ad3a04 	addi	r2,r2,-19224
    fc70:	10c01217 	ldw	r3,72(r2)
    fc74:	008000b4 	movhi	r2,2
    fc78:	10ad3a04 	addi	r2,r2,-19224
    fc7c:	1080068b 	ldhu	r2,26(r2)
    fc80:	10bfffcc 	andi	r2,r2,65535
    fc84:	1887883a 	add	r3,r3,r2
    fc88:	008000b4 	movhi	r2,2
    fc8c:	10ad3a04 	addi	r2,r2,-19224
    fc90:	10c01315 	stw	r3,76(r2)
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
    fc94:	008000b4 	movhi	r2,2
    fc98:	10ad3a04 	addi	r2,r2,-19224
    fc9c:	10c01317 	ldw	r3,76(r2)
    fca0:	008000b4 	movhi	r2,2
    fca4:	10ad3a04 	addi	r2,r2,-19224
    fca8:	1080050b 	ldhu	r2,20(r2)
    fcac:	10bfffcc 	andi	r2,r2,65535
    fcb0:	1008917a 	slli	r4,r2,5
    fcb4:	008000b4 	movhi	r2,2
    fcb8:	10ad3a04 	addi	r2,r2,-19224
    fcbc:	1080030b 	ldhu	r2,12(r2)
    fcc0:	10bfffcc 	andi	r2,r2,65535
    fcc4:	2085283a 	div	r2,r4,r2
    fcc8:	1887883a 	add	r3,r3,r2
    fccc:	008000b4 	movhi	r2,2
    fcd0:	10ad3a04 	addi	r2,r2,-19224
    fcd4:	10c01415 	stw	r3,80(r2)
	    
		if (boot_sector_data.number_of_sectors_in_partition > 0)
    fcd8:	008000b4 	movhi	r2,2
    fcdc:	10ad3a04 	addi	r2,r2,-19224
    fce0:	1080058b 	ldhu	r2,22(r2)
    fce4:	10bfffcc 	andi	r2,r2,65535
    fce8:	10000b26 	beq	r2,zero,fd18 <Check_for_DOS_FAT+0x4a0>
		{
			num_clusters = (boot_sector_data.number_of_sectors_in_partition / boot_sector_data.sectors_per_cluster);
    fcec:	008000b4 	movhi	r2,2
    fcf0:	10ad3a04 	addi	r2,r2,-19224
    fcf4:	1080058b 	ldhu	r2,22(r2)
    fcf8:	10ffffcc 	andi	r3,r2,65535
    fcfc:	008000b4 	movhi	r2,2
    fd00:	10ad3a04 	addi	r2,r2,-19224
    fd04:	10800383 	ldbu	r2,14(r2)
    fd08:	10803fcc 	andi	r2,r2,255
    fd0c:	1885283a 	div	r2,r3,r2
    fd10:	e0bffd15 	stw	r2,-12(fp)
    fd14:	00000906 	br	fd3c <Check_for_DOS_FAT+0x4c4>
		}
		else
		{
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB / boot_sector_data.sectors_per_cluster);
    fd18:	008000b4 	movhi	r2,2
    fd1c:	10ad3a04 	addi	r2,r2,-19224
    fd20:	10c00917 	ldw	r3,36(r2)
    fd24:	008000b4 	movhi	r2,2
    fd28:	10ad3a04 	addi	r2,r2,-19224
    fd2c:	10800383 	ldbu	r2,14(r2)
    fd30:	10803fcc 	andi	r2,r2,255
    fd34:	1885203a 	divu	r2,r3,r2
    fd38:	e0bffd15 	stw	r2,-12(fp)
		}
		if (num_clusters < 4087)
    fd3c:	e0bffd17 	ldw	r2,-12(fp)
    fd40:	1083fdc8 	cmpgei	r2,r2,4087
    fd44:	1000051e 	bne	r2,zero,fd5c <Check_for_DOS_FAT+0x4e4>
		{
			boot_sector_data.bits_for_cluster_index = 12;
    fd48:	008000b4 	movhi	r2,2
    fd4c:	10ad3a04 	addi	r2,r2,-19224
    fd50:	00c00304 	movi	r3,12
    fd54:	10c01085 	stb	r3,66(r2)
    fd58:	00000c06 	br	fd8c <Check_for_DOS_FAT+0x514>
		}
		else if (num_clusters <= 65517)
    fd5c:	e0bffd17 	ldw	r2,-12(fp)
    fd60:	00fffb54 	movui	r3,65517
    fd64:	18800516 	blt	r3,r2,fd7c <Check_for_DOS_FAT+0x504>
		{
			boot_sector_data.bits_for_cluster_index = 16;
    fd68:	008000b4 	movhi	r2,2
    fd6c:	10ad3a04 	addi	r2,r2,-19224
    fd70:	00c00404 	movi	r3,16
    fd74:	10c01085 	stb	r3,66(r2)
    fd78:	00000406 	br	fd8c <Check_for_DOS_FAT+0x514>
		}
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
    fd7c:	008000b4 	movhi	r2,2
    fd80:	10ad3a04 	addi	r2,r2,-19224
    fd84:	00c00804 	movi	r3,32
    fd88:	10c01085 	stb	r3,66(r2)
		}
	    
		for (counter = 0; counter < 4; counter++)
    fd8c:	e03ffc15 	stw	zero,-16(fp)
    fd90:	00001106 	br	fdd8 <Check_for_DOS_FAT+0x560>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
    fd94:	d0a7dc17 	ldw	r2,-24720(gp)
    fd98:	10c00a17 	ldw	r3,40(r2)
    fd9c:	e0bffc17 	ldw	r2,-16(fp)
    fda0:	1885883a 	add	r2,r3,r2
    fda4:	108009c4 	addi	r2,r2,39
    fda8:	10800023 	ldbuio	r2,0(r2)
    fdac:	10803fcc 	andi	r2,r2,255
    fdb0:	1009883a 	mov	r4,r2
    fdb4:	008000b4 	movhi	r2,2
    fdb8:	10ad3a04 	addi	r2,r2,-19224
    fdbc:	e0fffc17 	ldw	r3,-16(fp)
    fdc0:	10c5883a 	add	r2,r2,r3
    fdc4:	10800ac4 	addi	r2,r2,43
    fdc8:	11000005 	stb	r4,0(r2)
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
		}
	    
		for (counter = 0; counter < 4; counter++)
    fdcc:	e0bffc17 	ldw	r2,-16(fp)
    fdd0:	10800044 	addi	r2,r2,1
    fdd4:	e0bffc15 	stw	r2,-16(fp)
    fdd8:	e0bffc17 	ldw	r2,-16(fp)
    fddc:	10800110 	cmplti	r2,r2,4
    fde0:	103fec1e 	bne	r2,zero,fd94 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fd94>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
    fde4:	e03ffc15 	stw	zero,-16(fp)
    fde8:	00001106 	br	fe30 <Check_for_DOS_FAT+0x5b8>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
    fdec:	d0a7dc17 	ldw	r2,-24720(gp)
    fdf0:	10c00a17 	ldw	r3,40(r2)
    fdf4:	e0bffc17 	ldw	r2,-16(fp)
    fdf8:	1885883a 	add	r2,r3,r2
    fdfc:	10800ac4 	addi	r2,r2,43
    fe00:	10800023 	ldbuio	r2,0(r2)
    fe04:	10803fcc 	andi	r2,r2,255
    fe08:	1009883a 	mov	r4,r2
    fe0c:	008000b4 	movhi	r2,2
    fe10:	10ad3a04 	addi	r2,r2,-19224
    fe14:	e0fffc17 	ldw	r3,-16(fp)
    fe18:	10c5883a 	add	r2,r2,r3
    fe1c:	10800bc4 	addi	r2,r2,47
    fe20:	11000005 	stb	r4,0(r2)
	    
		for (counter = 0; counter < 4; counter++)
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
    fe24:	e0bffc17 	ldw	r2,-16(fp)
    fe28:	10800044 	addi	r2,r2,1
    fe2c:	e0bffc15 	stw	r2,-16(fp)
    fe30:	e0bffc17 	ldw	r2,-16(fp)
    fe34:	108002d0 	cmplti	r2,r2,11
    fe38:	103fec1e 	bne	r2,zero,fdec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fdec>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
    fe3c:	e03ffc15 	stw	zero,-16(fp)
    fe40:	00001106 	br	fe88 <Check_for_DOS_FAT+0x610>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
    fe44:	d0a7dc17 	ldw	r2,-24720(gp)
    fe48:	10c00a17 	ldw	r3,40(r2)
    fe4c:	e0bffc17 	ldw	r2,-16(fp)
    fe50:	1885883a 	add	r2,r3,r2
    fe54:	10800d84 	addi	r2,r2,54
    fe58:	10800023 	ldbuio	r2,0(r2)
    fe5c:	10803fcc 	andi	r2,r2,255
    fe60:	1009883a 	mov	r4,r2
    fe64:	008000b4 	movhi	r2,2
    fe68:	10ad3a04 	addi	r2,r2,-19224
    fe6c:	e0fffc17 	ldw	r3,-16(fp)
    fe70:	10c5883a 	add	r2,r2,r3
    fe74:	10800e84 	addi	r2,r2,58
    fe78:	11000005 	stb	r4,0(r2)
		}    
		for (counter = 0; counter < 11; counter++)
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
    fe7c:	e0bffc17 	ldw	r2,-16(fp)
    fe80:	10800044 	addi	r2,r2,1
    fe84:	e0bffc15 	stw	r2,-16(fp)
    fe88:	e0bffc17 	ldw	r2,-16(fp)
    fe8c:	10800210 	cmplti	r2,r2,8
    fe90:	103fec1e 	bne	r2,zero,fe44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fe44>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
    fe94:	e03ffc15 	stw	zero,-16(fp)
    fe98:	00000a06 	br	fec4 <Check_for_DOS_FAT+0x64c>
		{
			active_files[counter].in_use = false;
    fe9c:	008000b4 	movhi	r2,2
    fea0:	10ad4f04 	addi	r2,r2,-19140
    fea4:	e0fffc17 	ldw	r3,-16(fp)
    fea8:	180691ba 	slli	r3,r3,6
    feac:	10c5883a 	add	r2,r2,r3
    feb0:	10800f04 	addi	r2,r2,60
    feb4:	10000015 	stw	zero,0(r2)
		for (counter = 0; counter < 8; counter++)
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
    feb8:	e0bffc17 	ldw	r2,-16(fp)
    febc:	10800044 	addi	r2,r2,1
    fec0:	e0bffc15 	stw	r2,-16(fp)
    fec4:	e0bffc17 	ldw	r2,-16(fp)
    fec8:	10800510 	cmplti	r2,r2,20
    fecc:	103ff31e 	bne	r2,zero,fe9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fe9c>
		{
			active_files[counter].in_use = false;
		}
		result = true;
    fed0:	00800044 	movi	r2,1
    fed4:	e0bffb15 	stw	r2,-20(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
	{
    fed8:	00000106 	br	fee0 <Check_for_DOS_FAT+0x668>
		}
		result = true;
	}
    else
    {
        result = false;
    fedc:	e03ffb15 	stw	zero,-20(fp)
    }
	return result;
    fee0:	e0bffb17 	ldw	r2,-20(fp)
}
    fee4:	e037883a 	mov	sp,fp
    fee8:	dfc00117 	ldw	ra,4(sp)
    feec:	df000017 	ldw	fp,0(sp)
    fef0:	dec00204 	addi	sp,sp,8
    fef4:	f800283a 	ret

0000fef8 <Look_for_FAT16>:


bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
    fef8:	defffc04 	addi	sp,sp,-16
    fefc:	dfc00315 	stw	ra,12(sp)
    ff00:	df000215 	stw	fp,8(sp)
    ff04:	df000204 	addi	fp,sp,8
	bool result = false;
    ff08:	e03ffe15 	stw	zero,-8(fp)

	if (alt_up_sd_card_is_Present())
    ff0c:	0011b900 	call	11b90 <alt_up_sd_card_is_Present>
    ff10:	10002e26 	beq	r2,zero,ffcc <Look_for_FAT16+0xd4>
	{
		short int csd_file_format = *CSD_register_w0;
    ff14:	d0a7d617 	ldw	r2,-24744(gp)
    ff18:	1080000b 	ldhu	r2,0(r2)
    ff1c:	e0bfff0d 	sth	r2,-4(fp)
        
		fat_partition_offset_in_512_byte_sectors = 0;
    ff20:	d027da15 	stw	zero,-24728(gp)
		fat_partition_size_in_512_byte_sectors = 0;              
    ff24:	d027db15 	stw	zero,-24724(gp)

		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00) != 0x0c00))
    ff28:	e0bfff0f 	ldh	r2,-4(fp)
    ff2c:	10002716 	blt	r2,zero,ffcc <Look_for_FAT16+0xd4>
    ff30:	e0bfff0b 	ldhu	r2,-4(fp)
    ff34:	10bfffcc 	andi	r2,r2,65535
    ff38:	1083000c 	andi	r2,r2,3072
    ff3c:	10830020 	cmpeqi	r2,r2,3072
    ff40:	1000221e 	bne	r2,zero,ffcc <Look_for_FAT16+0xd4>
		{
			if ((csd_file_format & 0x0c00) == 0x0400)
    ff44:	e0bfff0b 	ldhu	r2,-4(fp)
    ff48:	10bfffcc 	andi	r2,r2,65535
    ff4c:	1083000c 	andi	r2,r2,3072
    ff50:	10810018 	cmpnei	r2,r2,1024
    ff54:	1000031e 	bne	r2,zero,ff64 <Look_for_FAT16+0x6c>
			{
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
    ff58:	0009883a 	mov	r4,zero
    ff5c:	000f8780 	call	f878 <Check_for_DOS_FAT>
    ff60:	e0bffe15 	stw	r2,-8(fp)
			}
			if ((csd_file_format & 0x0c00) == 0x0000)
    ff64:	e0bfff0b 	ldhu	r2,-4(fp)
    ff68:	10bfffcc 	andi	r2,r2,65535
    ff6c:	1083000c 	andi	r2,r2,3072
    ff70:	1000061e 	bne	r2,zero,ff8c <Look_for_FAT16+0x94>
			{
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record())
    ff74:	000f1cc0 	call	f1cc <Check_for_Master_Boot_Record>
    ff78:	10000426 	beq	r2,zero,ff8c <Look_for_FAT16+0x94>
				{
					result = Check_for_DOS_FAT(fat_partition_offset_in_512_byte_sectors);
    ff7c:	d0a7da17 	ldw	r2,-24728(gp)
    ff80:	1009883a 	mov	r4,r2
    ff84:	000f8780 	call	f878 <Check_for_DOS_FAT>
    ff88:	e0bffe15 	stw	r2,-8(fp)
				}                        
			}
			if (result == true)
    ff8c:	e0bffe17 	ldw	r2,-8(fp)
    ff90:	10800058 	cmpnei	r2,r2,1
    ff94:	10000d1e 	bne	r2,zero,ffcc <Look_for_FAT16+0xd4>
			{
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16)
    ff98:	008000b4 	movhi	r2,2
    ff9c:	10ad3a04 	addi	r2,r2,-19224
    ffa0:	10801083 	ldbu	r2,66(r2)
    ffa4:	10803fcc 	andi	r2,r2,255
    ffa8:	10800420 	cmpeqi	r2,r2,16
    ffac:	1000021e 	bne	r2,zero,ffb8 <Look_for_FAT16+0xc0>
				{
					result = false;
    ffb0:	e03ffe15 	stw	zero,-8(fp)
    ffb4:	00000506 	br	ffcc <Look_for_FAT16+0xd4>
				}
				else
				{
					fat_partition_size_in_512_byte_sectors = boot_sector_data.number_of_sectors_in_partition;
    ffb8:	008000b4 	movhi	r2,2
    ffbc:	10ad3a04 	addi	r2,r2,-19224
    ffc0:	1080058b 	ldhu	r2,22(r2)
    ffc4:	10bfffcc 	andi	r2,r2,65535
    ffc8:	d0a7db15 	stw	r2,-24724(gp)
				}
			}
		}
	}
	return result;
    ffcc:	e0bffe17 	ldw	r2,-8(fp)
}
    ffd0:	e037883a 	mov	sp,fp
    ffd4:	dfc00117 	ldw	ra,4(sp)
    ffd8:	df000017 	ldw	fp,0(sp)
    ffdc:	dec00204 	addi	sp,sp,8
    ffe0:	f800283a 	ret

0000ffe4 <filename_to_upper_case>:
 

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
    ffe4:	defffb04 	addi	sp,sp,-20
    ffe8:	dfc00415 	stw	ra,16(sp)
    ffec:	df000315 	stw	fp,12(sp)
    fff0:	df000304 	addi	fp,sp,12
    fff4:	e13fff15 	stw	r4,-4(fp)
    int index;
    int length = strlen(file_name);
    fff8:	e13fff17 	ldw	r4,-4(fp)
    fffc:	00012540 	call	1254 <strlen>
   10000:	e0bffe15 	stw	r2,-8(fp)
    
    for (index = 0; index < length; index++)
   10004:	e03ffd15 	stw	zero,-12(fp)
   10008:	00001e06 	br	10084 <filename_to_upper_case+0xa0>
    {
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
   1000c:	e0bffd17 	ldw	r2,-12(fp)
   10010:	e0ffff17 	ldw	r3,-4(fp)
   10014:	1885883a 	add	r2,r3,r2
   10018:	10800003 	ldbu	r2,0(r2)
   1001c:	10803fcc 	andi	r2,r2,255
   10020:	1080201c 	xori	r2,r2,128
   10024:	10bfe004 	addi	r2,r2,-128
   10028:	10801850 	cmplti	r2,r2,97
   1002c:	1000121e 	bne	r2,zero,10078 <filename_to_upper_case+0x94>
   10030:	e0bffd17 	ldw	r2,-12(fp)
   10034:	e0ffff17 	ldw	r3,-4(fp)
   10038:	1885883a 	add	r2,r3,r2
   1003c:	10800003 	ldbu	r2,0(r2)
   10040:	10803fcc 	andi	r2,r2,255
   10044:	1080201c 	xori	r2,r2,128
   10048:	10bfe004 	addi	r2,r2,-128
   1004c:	10801ec8 	cmpgei	r2,r2,123
   10050:	1000091e 	bne	r2,zero,10078 <filename_to_upper_case+0x94>
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
   10054:	e0bffd17 	ldw	r2,-12(fp)
   10058:	e0ffff17 	ldw	r3,-4(fp)
   1005c:	1885883a 	add	r2,r3,r2
   10060:	e0fffd17 	ldw	r3,-12(fp)
   10064:	e13fff17 	ldw	r4,-4(fp)
   10068:	20c7883a 	add	r3,r4,r3
   1006c:	18c00003 	ldbu	r3,0(r3)
   10070:	18fff804 	addi	r3,r3,-32
   10074:	10c00005 	stb	r3,0(r2)
// Change file name to upper case.
{
    int index;
    int length = strlen(file_name);
    
    for (index = 0; index < length; index++)
   10078:	e0bffd17 	ldw	r2,-12(fp)
   1007c:	10800044 	addi	r2,r2,1
   10080:	e0bffd15 	stw	r2,-12(fp)
   10084:	e0fffd17 	ldw	r3,-12(fp)
   10088:	e0bffe17 	ldw	r2,-8(fp)
   1008c:	18bfdf16 	blt	r3,r2,1000c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701000c>
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
        }
    }
}
   10090:	0001883a 	nop
   10094:	e037883a 	mov	sp,fp
   10098:	dfc00117 	ldw	ra,4(sp)
   1009c:	df000017 	ldw	fp,0(sp)
   100a0:	dec00204 	addi	sp,sp,8
   100a4:	f800283a 	ret

000100a8 <check_file_name_for_FAT16_compliance>:


bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
   100a8:	defff804 	addi	sp,sp,-32
   100ac:	dfc00715 	stw	ra,28(sp)
   100b0:	df000615 	stw	fp,24(sp)
   100b4:	df000604 	addi	fp,sp,24
   100b8:	e13fff15 	stw	r4,-4(fp)
    int length = strlen(file_name);
   100bc:	e13fff17 	ldw	r4,-4(fp)
   100c0:	00012540 	call	1254 <strlen>
   100c4:	e0bffe15 	stw	r2,-8(fp)
    int index;
    int last_dir_break_position = -1;
   100c8:	00bfffc4 	movi	r2,-1
   100cc:	e0bffb15 	stw	r2,-20(fp)
    int last_period = -1;
   100d0:	00bfffc4 	movi	r2,-1
   100d4:	e0bffc15 	stw	r2,-16(fp)
    bool result = true;
   100d8:	00800044 	movi	r2,1
   100dc:	e0bffd15 	stw	r2,-12(fp)
    
    for(index = 0; index < length; index++)
   100e0:	e03ffa15 	stw	zero,-24(fp)
   100e4:	00006d06 	br	1029c <check_file_name_for_FAT16_compliance+0x1f4>
    {
        if ((file_name[index] == ' ') ||
   100e8:	e0bffa17 	ldw	r2,-24(fp)
   100ec:	e0ffff17 	ldw	r3,-4(fp)
   100f0:	1885883a 	add	r2,r3,r2
   100f4:	10800003 	ldbu	r2,0(r2)
   100f8:	10803fcc 	andi	r2,r2,255
   100fc:	1080201c 	xori	r2,r2,128
   10100:	10bfe004 	addi	r2,r2,-128
   10104:	10800820 	cmpeqi	r2,r2,32
   10108:	10003e1e 	bne	r2,zero,10204 <check_file_name_for_FAT16_compliance+0x15c>
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
   1010c:	e0bffa17 	ldw	r2,-24(fp)
   10110:	10ffffc4 	addi	r3,r2,-1
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
   10114:	e0bffb17 	ldw	r2,-20(fp)
   10118:	1880121e 	bne	r3,r2,10164 <check_file_name_for_FAT16_compliance+0xbc>
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
   1011c:	e0bffa17 	ldw	r2,-24(fp)
   10120:	e0ffff17 	ldw	r3,-4(fp)
   10124:	1885883a 	add	r2,r3,r2
   10128:	10800003 	ldbu	r2,0(r2)
   1012c:	10803fcc 	andi	r2,r2,255
   10130:	1080201c 	xori	r2,r2,128
   10134:	10bfe004 	addi	r2,r2,-128
   10138:	10801720 	cmpeqi	r2,r2,92
   1013c:	1000311e 	bne	r2,zero,10204 <check_file_name_for_FAT16_compliance+0x15c>
   10140:	e0bffa17 	ldw	r2,-24(fp)
   10144:	e0ffff17 	ldw	r3,-4(fp)
   10148:	1885883a 	add	r2,r3,r2
   1014c:	10800003 	ldbu	r2,0(r2)
   10150:	10803fcc 	andi	r2,r2,255
   10154:	1080201c 	xori	r2,r2,128
   10158:	10bfe004 	addi	r2,r2,-128
   1015c:	10800be0 	cmpeqi	r2,r2,47
   10160:	1000281e 	bne	r2,zero,10204 <check_file_name_for_FAT16_compliance+0x15c>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
   10164:	e0fffa17 	ldw	r3,-24(fp)
   10168:	e0bffc17 	ldw	r2,-16(fp)
   1016c:	1885c83a 	sub	r2,r3,r2
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
   10170:	10800258 	cmpnei	r2,r2,9
   10174:	1000091e 	bne	r2,zero,1019c <check_file_name_for_FAT16_compliance+0xf4>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
   10178:	e0bffa17 	ldw	r2,-24(fp)
   1017c:	e0ffff17 	ldw	r3,-4(fp)
   10180:	1885883a 	add	r2,r3,r2
   10184:	10800003 	ldbu	r2,0(r2)
   10188:	10803fcc 	andi	r2,r2,255
   1018c:	1080201c 	xori	r2,r2,128
   10190:	10bfe004 	addi	r2,r2,-128
   10194:	10800b98 	cmpnei	r2,r2,46
   10198:	10001a1e 	bne	r2,zero,10204 <check_file_name_for_FAT16_compliance+0x15c>
   1019c:	e0fffb17 	ldw	r3,-20(fp)
   101a0:	e0bffc17 	ldw	r2,-16(fp)
   101a4:	18801926 	beq	r3,r2,1020c <check_file_name_for_FAT16_compliance+0x164>
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
   101a8:	e0fffa17 	ldw	r3,-24(fp)
   101ac:	e0bffc17 	ldw	r2,-16(fp)
   101b0:	1885c83a 	sub	r2,r3,r2
   101b4:	10800110 	cmplti	r2,r2,4
   101b8:	1000141e 	bne	r2,zero,1020c <check_file_name_for_FAT16_compliance+0x164>
             (file_name[index] != '\\') && (file_name[index] != '/'))
   101bc:	e0bffa17 	ldw	r2,-24(fp)
   101c0:	e0ffff17 	ldw	r3,-4(fp)
   101c4:	1885883a 	add	r2,r3,r2
   101c8:	10800003 	ldbu	r2,0(r2)
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
            ((index - last_period == 9) && (file_name[index] != '.')) ||
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
   101cc:	10803fcc 	andi	r2,r2,255
   101d0:	1080201c 	xori	r2,r2,128
   101d4:	10bfe004 	addi	r2,r2,-128
   101d8:	10801720 	cmpeqi	r2,r2,92
   101dc:	10000b1e 	bne	r2,zero,1020c <check_file_name_for_FAT16_compliance+0x164>
             (file_name[index] != '\\') && (file_name[index] != '/'))
   101e0:	e0bffa17 	ldw	r2,-24(fp)
   101e4:	e0ffff17 	ldw	r3,-4(fp)
   101e8:	1885883a 	add	r2,r3,r2
   101ec:	10800003 	ldbu	r2,0(r2)
   101f0:	10803fcc 	andi	r2,r2,255
   101f4:	1080201c 	xori	r2,r2,128
   101f8:	10bfe004 	addi	r2,r2,-128
   101fc:	10800be0 	cmpeqi	r2,r2,47
   10200:	1000021e 	bne	r2,zero,1020c <check_file_name_for_FAT16_compliance+0x164>
           )
        {
            result = false;
   10204:	e03ffd15 	stw	zero,-12(fp)
            break;
   10208:	00002706 	br	102a8 <check_file_name_for_FAT16_compliance+0x200>
        }
        if ((file_name[index] == '\\') || (file_name[index] == '/'))
   1020c:	e0bffa17 	ldw	r2,-24(fp)
   10210:	e0ffff17 	ldw	r3,-4(fp)
   10214:	1885883a 	add	r2,r3,r2
   10218:	10800003 	ldbu	r2,0(r2)
   1021c:	10803fcc 	andi	r2,r2,255
   10220:	1080201c 	xori	r2,r2,128
   10224:	10bfe004 	addi	r2,r2,-128
   10228:	10801720 	cmpeqi	r2,r2,92
   1022c:	1000091e 	bne	r2,zero,10254 <check_file_name_for_FAT16_compliance+0x1ac>
   10230:	e0bffa17 	ldw	r2,-24(fp)
   10234:	e0ffff17 	ldw	r3,-4(fp)
   10238:	1885883a 	add	r2,r3,r2
   1023c:	10800003 	ldbu	r2,0(r2)
   10240:	10803fcc 	andi	r2,r2,255
   10244:	1080201c 	xori	r2,r2,128
   10248:	10bfe004 	addi	r2,r2,-128
   1024c:	10800bd8 	cmpnei	r2,r2,47
   10250:	1000041e 	bne	r2,zero,10264 <check_file_name_for_FAT16_compliance+0x1bc>
        {
            last_period = index;
   10254:	e0bffa17 	ldw	r2,-24(fp)
   10258:	e0bffc15 	stw	r2,-16(fp)
            last_dir_break_position = index;
   1025c:	e0bffa17 	ldw	r2,-24(fp)
   10260:	e0bffb15 	stw	r2,-20(fp)
        }
        if (file_name[index] == '.')
   10264:	e0bffa17 	ldw	r2,-24(fp)
   10268:	e0ffff17 	ldw	r3,-4(fp)
   1026c:	1885883a 	add	r2,r3,r2
   10270:	10800003 	ldbu	r2,0(r2)
   10274:	10803fcc 	andi	r2,r2,255
   10278:	1080201c 	xori	r2,r2,128
   1027c:	10bfe004 	addi	r2,r2,-128
   10280:	10800b98 	cmpnei	r2,r2,46
   10284:	1000021e 	bne	r2,zero,10290 <check_file_name_for_FAT16_compliance+0x1e8>
        {
            last_period = index;
   10288:	e0bffa17 	ldw	r2,-24(fp)
   1028c:	e0bffc15 	stw	r2,-16(fp)
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
   10290:	e0bffa17 	ldw	r2,-24(fp)
   10294:	10800044 	addi	r2,r2,1
   10298:	e0bffa15 	stw	r2,-24(fp)
   1029c:	e0fffa17 	ldw	r3,-24(fp)
   102a0:	e0bffe17 	ldw	r2,-8(fp)
   102a4:	18bf9016 	blt	r3,r2,100e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70100e8>
        if (file_name[index] == '.')
        {
            last_period = index;
        }
    }
    if ((file_name[length-1] == '\\') || (file_name[length-1] == '/'))
   102a8:	e0bffe17 	ldw	r2,-8(fp)
   102ac:	10bfffc4 	addi	r2,r2,-1
   102b0:	e0ffff17 	ldw	r3,-4(fp)
   102b4:	1885883a 	add	r2,r3,r2
   102b8:	10800003 	ldbu	r2,0(r2)
   102bc:	10803fcc 	andi	r2,r2,255
   102c0:	1080201c 	xori	r2,r2,128
   102c4:	10bfe004 	addi	r2,r2,-128
   102c8:	10801720 	cmpeqi	r2,r2,92
   102cc:	10000a1e 	bne	r2,zero,102f8 <check_file_name_for_FAT16_compliance+0x250>
   102d0:	e0bffe17 	ldw	r2,-8(fp)
   102d4:	10bfffc4 	addi	r2,r2,-1
   102d8:	e0ffff17 	ldw	r3,-4(fp)
   102dc:	1885883a 	add	r2,r3,r2
   102e0:	10800003 	ldbu	r2,0(r2)
   102e4:	10803fcc 	andi	r2,r2,255
   102e8:	1080201c 	xori	r2,r2,128
   102ec:	10bfe004 	addi	r2,r2,-128
   102f0:	10800bd8 	cmpnei	r2,r2,47
   102f4:	1000011e 	bne	r2,zero,102fc <check_file_name_for_FAT16_compliance+0x254>
    {
        result = false;
   102f8:	e03ffd15 	stw	zero,-12(fp)
    }
    return result;
   102fc:	e0bffd17 	ldw	r2,-12(fp)
}
   10300:	e037883a 	mov	sp,fp
   10304:	dfc00117 	ldw	ra,4(sp)
   10308:	df000017 	ldw	fp,0(sp)
   1030c:	dec00204 	addi	sp,sp,8
   10310:	f800283a 	ret

00010314 <get_dir_divider_location>:


int get_dir_divider_location(char *name)
// Find a directory divider location.
{
   10314:	defffb04 	addi	sp,sp,-20
   10318:	dfc00415 	stw	ra,16(sp)
   1031c:	df000315 	stw	fp,12(sp)
   10320:	df000304 	addi	fp,sp,12
   10324:	e13fff15 	stw	r4,-4(fp)
    int index = 0;
   10328:	e03ffd15 	stw	zero,-12(fp)
    int length = strlen(name);
   1032c:	e13fff17 	ldw	r4,-4(fp)
   10330:	00012540 	call	1254 <strlen>
   10334:	e0bffe15 	stw	r2,-8(fp)
    
    for(index = 0; index < length; index++)
   10338:	e03ffd15 	stw	zero,-12(fp)
   1033c:	00001506 	br	10394 <get_dir_divider_location+0x80>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
   10340:	e0bffd17 	ldw	r2,-12(fp)
   10344:	e0ffff17 	ldw	r3,-4(fp)
   10348:	1885883a 	add	r2,r3,r2
   1034c:	10800003 	ldbu	r2,0(r2)
   10350:	10803fcc 	andi	r2,r2,255
   10354:	1080201c 	xori	r2,r2,128
   10358:	10bfe004 	addi	r2,r2,-128
   1035c:	10801720 	cmpeqi	r2,r2,92
   10360:	10000f1e 	bne	r2,zero,103a0 <get_dir_divider_location+0x8c>
   10364:	e0bffd17 	ldw	r2,-12(fp)
   10368:	e0ffff17 	ldw	r3,-4(fp)
   1036c:	1885883a 	add	r2,r3,r2
   10370:	10800003 	ldbu	r2,0(r2)
   10374:	10803fcc 	andi	r2,r2,255
   10378:	1080201c 	xori	r2,r2,128
   1037c:	10bfe004 	addi	r2,r2,-128
   10380:	10800be0 	cmpeqi	r2,r2,47
   10384:	1000061e 	bne	r2,zero,103a0 <get_dir_divider_location+0x8c>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
   10388:	e0bffd17 	ldw	r2,-12(fp)
   1038c:	10800044 	addi	r2,r2,1
   10390:	e0bffd15 	stw	r2,-12(fp)
   10394:	e0fffd17 	ldw	r3,-12(fp)
   10398:	e0bffe17 	ldw	r2,-8(fp)
   1039c:	18bfe816 	blt	r3,r2,10340 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010340>
        {
            break;
        }
    }
    
    if (index == length)
   103a0:	e0fffd17 	ldw	r3,-12(fp)
   103a4:	e0bffe17 	ldw	r2,-8(fp)
   103a8:	1880021e 	bne	r3,r2,103b4 <get_dir_divider_location+0xa0>
    {
        index = -1;
   103ac:	00bfffc4 	movi	r2,-1
   103b0:	e0bffd15 	stw	r2,-12(fp)
    }
    
    return index;
   103b4:	e0bffd17 	ldw	r2,-12(fp)
}
   103b8:	e037883a 	mov	sp,fp
   103bc:	dfc00117 	ldw	ra,4(sp)
   103c0:	df000017 	ldw	fp,0(sp)
   103c4:	dec00204 	addi	sp,sp,8
   103c8:	f800283a 	ret

000103cc <match_file_record_to_name_ext>:


bool match_file_record_to_name_ext(t_file_record *file_record, char *name, char *extension)
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
   103cc:	defffa04 	addi	sp,sp,-24
   103d0:	df000515 	stw	fp,20(sp)
   103d4:	df000504 	addi	fp,sp,20
   103d8:	e13ffd15 	stw	r4,-12(fp)
   103dc:	e17ffe15 	stw	r5,-8(fp)
   103e0:	e1bfff15 	stw	r6,-4(fp)
    bool match = true;
   103e4:	00800044 	movi	r2,1
   103e8:	e0bffb15 	stw	r2,-20(fp)
	int index;

    for (index = 0; index < 8; index++)
   103ec:	e03ffc15 	stw	zero,-16(fp)
   103f0:	00004606 	br	1050c <match_file_record_to_name_ext+0x140>
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
   103f4:	e0fffd17 	ldw	r3,-12(fp)
   103f8:	e0bffc17 	ldw	r2,-16(fp)
   103fc:	1885883a 	add	r2,r3,r2
   10400:	10800003 	ldbu	r2,0(r2)
   10404:	10803fcc 	andi	r2,r2,255
   10408:	10801870 	cmpltui	r2,r2,97
   1040c:	1000101e 	bne	r2,zero,10450 <match_file_record_to_name_ext+0x84>
   10410:	e0fffd17 	ldw	r3,-12(fp)
   10414:	e0bffc17 	ldw	r2,-16(fp)
   10418:	1885883a 	add	r2,r3,r2
   1041c:	10800003 	ldbu	r2,0(r2)
   10420:	10803fcc 	andi	r2,r2,255
   10424:	10801ee8 	cmpgeui	r2,r2,123
   10428:	1000091e 	bne	r2,zero,10450 <match_file_record_to_name_ext+0x84>
   1042c:	e0fffd17 	ldw	r3,-12(fp)
   10430:	e0bffc17 	ldw	r2,-16(fp)
   10434:	1885883a 	add	r2,r3,r2
   10438:	10800003 	ldbu	r2,0(r2)
   1043c:	10bff804 	addi	r2,r2,-32
   10440:	10c03fcc 	andi	r3,r2,255
   10444:	18c0201c 	xori	r3,r3,128
   10448:	18ffe004 	addi	r3,r3,-128
   1044c:	00000706 	br	1046c <match_file_record_to_name_ext+0xa0>
   10450:	e0fffd17 	ldw	r3,-12(fp)
   10454:	e0bffc17 	ldw	r2,-16(fp)
   10458:	1885883a 	add	r2,r3,r2
   1045c:	10800003 	ldbu	r2,0(r2)
   10460:	10c03fcc 	andi	r3,r2,255
   10464:	18c0201c 	xori	r3,r3,128
   10468:	18ffe004 	addi	r3,r3,-128
   1046c:	e0bffc17 	ldw	r2,-16(fp)
   10470:	e13ffe17 	ldw	r4,-8(fp)
   10474:	2085883a 	add	r2,r4,r2
   10478:	10800003 	ldbu	r2,0(r2)
   1047c:	10803fcc 	andi	r2,r2,255
   10480:	1080201c 	xori	r2,r2,128
   10484:	10bfe004 	addi	r2,r2,-128
   10488:	10801850 	cmplti	r2,r2,97
   1048c:	1000121e 	bne	r2,zero,104d8 <match_file_record_to_name_ext+0x10c>
   10490:	e0bffc17 	ldw	r2,-16(fp)
   10494:	e13ffe17 	ldw	r4,-8(fp)
   10498:	2085883a 	add	r2,r4,r2
   1049c:	10800003 	ldbu	r2,0(r2)
   104a0:	10803fcc 	andi	r2,r2,255
   104a4:	1080201c 	xori	r2,r2,128
   104a8:	10bfe004 	addi	r2,r2,-128
   104ac:	10801ec8 	cmpgei	r2,r2,123
   104b0:	1000091e 	bne	r2,zero,104d8 <match_file_record_to_name_ext+0x10c>
   104b4:	e0bffc17 	ldw	r2,-16(fp)
   104b8:	e13ffe17 	ldw	r4,-8(fp)
   104bc:	2085883a 	add	r2,r4,r2
   104c0:	10800003 	ldbu	r2,0(r2)
   104c4:	10bff804 	addi	r2,r2,-32
   104c8:	10803fcc 	andi	r2,r2,255
   104cc:	1080201c 	xori	r2,r2,128
   104d0:	10bfe004 	addi	r2,r2,-128
   104d4:	00000706 	br	104f4 <match_file_record_to_name_ext+0x128>
   104d8:	e0bffc17 	ldw	r2,-16(fp)
   104dc:	e13ffe17 	ldw	r4,-8(fp)
   104e0:	2085883a 	add	r2,r4,r2
   104e4:	10800003 	ldbu	r2,0(r2)
   104e8:	10803fcc 	andi	r2,r2,255
   104ec:	1080201c 	xori	r2,r2,128
   104f0:	10bfe004 	addi	r2,r2,-128
   104f4:	18800226 	beq	r3,r2,10500 <match_file_record_to_name_ext+0x134>
        {
            match = false;
   104f8:	e03ffb15 	stw	zero,-20(fp)
			break;
   104fc:	00000606 	br	10518 <match_file_record_to_name_ext+0x14c>
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
   10500:	e0bffc17 	ldw	r2,-16(fp)
   10504:	10800044 	addi	r2,r2,1
   10508:	e0bffc15 	stw	r2,-16(fp)
   1050c:	e0bffc17 	ldw	r2,-16(fp)
   10510:	10800210 	cmplti	r2,r2,8
   10514:	103fb71e 	bne	r2,zero,103f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70103f4>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
   10518:	e03ffc15 	stw	zero,-16(fp)
   1051c:	00004a06 	br	10648 <match_file_record_to_name_ext+0x27c>
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
   10520:	e0fffd17 	ldw	r3,-12(fp)
   10524:	e0bffc17 	ldw	r2,-16(fp)
   10528:	1885883a 	add	r2,r3,r2
   1052c:	10800204 	addi	r2,r2,8
   10530:	10800003 	ldbu	r2,0(r2)
   10534:	10803fcc 	andi	r2,r2,255
   10538:	10801870 	cmpltui	r2,r2,97
   1053c:	1000121e 	bne	r2,zero,10588 <match_file_record_to_name_ext+0x1bc>
   10540:	e0fffd17 	ldw	r3,-12(fp)
   10544:	e0bffc17 	ldw	r2,-16(fp)
   10548:	1885883a 	add	r2,r3,r2
   1054c:	10800204 	addi	r2,r2,8
   10550:	10800003 	ldbu	r2,0(r2)
   10554:	10803fcc 	andi	r2,r2,255
   10558:	10801ee8 	cmpgeui	r2,r2,123
   1055c:	10000a1e 	bne	r2,zero,10588 <match_file_record_to_name_ext+0x1bc>
   10560:	e0fffd17 	ldw	r3,-12(fp)
   10564:	e0bffc17 	ldw	r2,-16(fp)
   10568:	1885883a 	add	r2,r3,r2
   1056c:	10800204 	addi	r2,r2,8
   10570:	10800003 	ldbu	r2,0(r2)
   10574:	10bff804 	addi	r2,r2,-32
   10578:	10c03fcc 	andi	r3,r2,255
   1057c:	18c0201c 	xori	r3,r3,128
   10580:	18ffe004 	addi	r3,r3,-128
   10584:	00000806 	br	105a8 <match_file_record_to_name_ext+0x1dc>
   10588:	e0fffd17 	ldw	r3,-12(fp)
   1058c:	e0bffc17 	ldw	r2,-16(fp)
   10590:	1885883a 	add	r2,r3,r2
   10594:	10800204 	addi	r2,r2,8
   10598:	10800003 	ldbu	r2,0(r2)
   1059c:	10c03fcc 	andi	r3,r2,255
   105a0:	18c0201c 	xori	r3,r3,128
   105a4:	18ffe004 	addi	r3,r3,-128
   105a8:	e0bffc17 	ldw	r2,-16(fp)
   105ac:	e13fff17 	ldw	r4,-4(fp)
   105b0:	2085883a 	add	r2,r4,r2
   105b4:	10800003 	ldbu	r2,0(r2)
   105b8:	10803fcc 	andi	r2,r2,255
   105bc:	1080201c 	xori	r2,r2,128
   105c0:	10bfe004 	addi	r2,r2,-128
   105c4:	10801850 	cmplti	r2,r2,97
   105c8:	1000121e 	bne	r2,zero,10614 <match_file_record_to_name_ext+0x248>
   105cc:	e0bffc17 	ldw	r2,-16(fp)
   105d0:	e13fff17 	ldw	r4,-4(fp)
   105d4:	2085883a 	add	r2,r4,r2
   105d8:	10800003 	ldbu	r2,0(r2)
   105dc:	10803fcc 	andi	r2,r2,255
   105e0:	1080201c 	xori	r2,r2,128
   105e4:	10bfe004 	addi	r2,r2,-128
   105e8:	10801ec8 	cmpgei	r2,r2,123
   105ec:	1000091e 	bne	r2,zero,10614 <match_file_record_to_name_ext+0x248>
   105f0:	e0bffc17 	ldw	r2,-16(fp)
   105f4:	e13fff17 	ldw	r4,-4(fp)
   105f8:	2085883a 	add	r2,r4,r2
   105fc:	10800003 	ldbu	r2,0(r2)
   10600:	10bff804 	addi	r2,r2,-32
   10604:	10803fcc 	andi	r2,r2,255
   10608:	1080201c 	xori	r2,r2,128
   1060c:	10bfe004 	addi	r2,r2,-128
   10610:	00000706 	br	10630 <match_file_record_to_name_ext+0x264>
   10614:	e0bffc17 	ldw	r2,-16(fp)
   10618:	e13fff17 	ldw	r4,-4(fp)
   1061c:	2085883a 	add	r2,r4,r2
   10620:	10800003 	ldbu	r2,0(r2)
   10624:	10803fcc 	andi	r2,r2,255
   10628:	1080201c 	xori	r2,r2,128
   1062c:	10bfe004 	addi	r2,r2,-128
   10630:	18800226 	beq	r3,r2,1063c <match_file_record_to_name_ext+0x270>
        {
            match = false;
   10634:	e03ffb15 	stw	zero,-20(fp)
			break;
   10638:	00000606 	br	10654 <match_file_record_to_name_ext+0x288>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
   1063c:	e0bffc17 	ldw	r2,-16(fp)
   10640:	10800044 	addi	r2,r2,1
   10644:	e0bffc15 	stw	r2,-16(fp)
   10648:	e0bffc17 	ldw	r2,-16(fp)
   1064c:	108000d0 	cmplti	r2,r2,3
   10650:	103fb31e 	bne	r2,zero,10520 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010520>
        {
            match = false;
			break;
        }
    }
	return match;
   10654:	e0bffb17 	ldw	r2,-20(fp)
}
   10658:	e037883a 	mov	sp,fp
   1065c:	df000017 	ldw	fp,0(sp)
   10660:	dec00104 	addi	sp,sp,4
   10664:	f800283a 	ret

00010668 <get_home_directory_cluster_for_file>:


bool get_home_directory_cluster_for_file(char *file_name, int *home_directory_cluster, t_file_record *file_record)
// Scan the directories in given in the file name and find the root directory for the file.
{
   10668:	deffe704 	addi	sp,sp,-100
   1066c:	dfc01815 	stw	ra,96(sp)
   10670:	df001715 	stw	fp,92(sp)
   10674:	df001704 	addi	fp,sp,92
   10678:	e13ffd15 	stw	r4,-12(fp)
   1067c:	e17ffe15 	stw	r5,-8(fp)
   10680:	e1bfff15 	stw	r6,-4(fp)
    bool result = false;
   10684:	e03fe915 	stw	zero,-92(fp)
    int home_dir_cluster = 0;
   10688:	e03fea15 	stw	zero,-88(fp)
    int location, index;
    int start_location = 0;
   1068c:	e03fed15 	stw	zero,-76(fp)
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
   10690:	e13ffd17 	ldw	r4,-12(fp)
   10694:	00103140 	call	10314 <get_dir_divider_location>
   10698:	e0bfeb15 	stw	r2,-84(fp)
    while (location > 0)
   1069c:	00012f06 	br	10b5c <get_home_directory_cluster_for_file+0x4f4>
    {
        char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
   106a0:	00800804 	movi	r2,32
   106a4:	e0bff905 	stb	r2,-28(fp)
   106a8:	00800804 	movi	r2,32
   106ac:	e0bff945 	stb	r2,-27(fp)
   106b0:	00800804 	movi	r2,32
   106b4:	e0bff985 	stb	r2,-26(fp)
   106b8:	00800804 	movi	r2,32
   106bc:	e0bff9c5 	stb	r2,-25(fp)
   106c0:	00800804 	movi	r2,32
   106c4:	e0bffa05 	stb	r2,-24(fp)
   106c8:	00800804 	movi	r2,32
   106cc:	e0bffa45 	stb	r2,-23(fp)
   106d0:	00800804 	movi	r2,32
   106d4:	e0bffa85 	stb	r2,-22(fp)
   106d8:	00800804 	movi	r2,32
   106dc:	e0bffac5 	stb	r2,-21(fp)
        char extension[3] = { ' ', ' ', ' ' };
   106e0:	00800804 	movi	r2,32
   106e4:	e0bffb05 	stb	r2,-20(fp)
   106e8:	00800804 	movi	r2,32
   106ec:	e0bffb45 	stb	r2,-19(fp)
   106f0:	00800804 	movi	r2,32
   106f4:	e0bffb85 	stb	r2,-18(fp)
        int ext_index = -1;
   106f8:	00bfffc4 	movi	r2,-1
   106fc:	e0bfee15 	stw	r2,-72(fp)
        int new_cluster = home_dir_cluster;
   10700:	e0bfea17 	ldw	r2,-88(fp)
   10704:	e0bfef15 	stw	r2,-68(fp)
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
   10708:	e03fec15 	stw	zero,-80(fp)
   1070c:	00002d06 	br	107c4 <get_home_directory_cluster_for_file+0x15c>
        {
            if (file_name[index+start_location] == '.')
   10710:	e0ffec17 	ldw	r3,-80(fp)
   10714:	e0bfed17 	ldw	r2,-76(fp)
   10718:	1885883a 	add	r2,r3,r2
   1071c:	1007883a 	mov	r3,r2
   10720:	e0bffd17 	ldw	r2,-12(fp)
   10724:	10c5883a 	add	r2,r2,r3
   10728:	10800003 	ldbu	r2,0(r2)
   1072c:	10803fcc 	andi	r2,r2,255
   10730:	1080201c 	xori	r2,r2,128
   10734:	10bfe004 	addi	r2,r2,-128
   10738:	10800b98 	cmpnei	r2,r2,46
   1073c:	1000031e 	bne	r2,zero,1074c <get_home_directory_cluster_for_file+0xe4>
            {
                ext_index = index;
   10740:	e0bfec17 	ldw	r2,-80(fp)
   10744:	e0bfee15 	stw	r2,-72(fp)
   10748:	00001b06 	br	107b8 <get_home_directory_cluster_for_file+0x150>
            }
            else if (ext_index < 0)
   1074c:	e0bfee17 	ldw	r2,-72(fp)
   10750:	10000c0e 	bge	r2,zero,10784 <get_home_directory_cluster_for_file+0x11c>
            {
                name[index] = file_name[index+start_location];
   10754:	e0ffec17 	ldw	r3,-80(fp)
   10758:	e0bfed17 	ldw	r2,-76(fp)
   1075c:	1885883a 	add	r2,r3,r2
   10760:	1007883a 	mov	r3,r2
   10764:	e0bffd17 	ldw	r2,-12(fp)
   10768:	10c5883a 	add	r2,r2,r3
   1076c:	10c00003 	ldbu	r3,0(r2)
   10770:	e13ff904 	addi	r4,fp,-28
   10774:	e0bfec17 	ldw	r2,-80(fp)
   10778:	2085883a 	add	r2,r4,r2
   1077c:	10c00005 	stb	r3,0(r2)
   10780:	00000d06 	br	107b8 <get_home_directory_cluster_for_file+0x150>
            }
            else
            {
                extension[index-ext_index] = file_name[index+start_location];
   10784:	e0ffec17 	ldw	r3,-80(fp)
   10788:	e0bfee17 	ldw	r2,-72(fp)
   1078c:	1885c83a 	sub	r2,r3,r2
   10790:	e13fec17 	ldw	r4,-80(fp)
   10794:	e0ffed17 	ldw	r3,-76(fp)
   10798:	20c7883a 	add	r3,r4,r3
   1079c:	1809883a 	mov	r4,r3
   107a0:	e0fffd17 	ldw	r3,-12(fp)
   107a4:	1907883a 	add	r3,r3,r4
   107a8:	18c00003 	ldbu	r3,0(r3)
   107ac:	e13ffb04 	addi	r4,fp,-20
   107b0:	2085883a 	add	r2,r4,r2
   107b4:	10c00005 	stb	r3,0(r2)
        char extension[3] = { ' ', ' ', ' ' };
        int ext_index = -1;
        int new_cluster = home_dir_cluster;
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
   107b8:	e0bfec17 	ldw	r2,-80(fp)
   107bc:	10800044 	addi	r2,r2,1
   107c0:	e0bfec15 	stw	r2,-80(fp)
   107c4:	e0ffec17 	ldw	r3,-80(fp)
   107c8:	e0bfeb17 	ldw	r2,-84(fp)
   107cc:	18bfd016 	blt	r3,r2,10710 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010710>
            {
                extension[index-ext_index] = file_name[index+start_location];
            }
        }
        
        if (home_dir_cluster == 0)
   107d0:	e0bfea17 	ldw	r2,-88(fp)
   107d4:	10005c1e 	bne	r2,zero,10948 <get_home_directory_cluster_for_file+0x2e0>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
   107d8:	008000b4 	movhi	r2,2
   107dc:	10ad3a04 	addi	r2,r2,-19224
   107e0:	1080050b 	ldhu	r2,20(r2)
   107e4:	10bfffcc 	andi	r2,r2,65535
   107e8:	1006917a 	slli	r3,r2,5
   107ec:	008000b4 	movhi	r2,2
   107f0:	10ad3a04 	addi	r2,r2,-19224
   107f4:	1080030b 	ldhu	r2,12(r2)
   107f8:	10bfffcc 	andi	r2,r2,65535
   107fc:	1885283a 	div	r2,r3,r2
   10800:	e0bff715 	stw	r2,-36(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   10804:	e03ff015 	stw	zero,-64(fp)
   10808:	00003b06 	br	108f8 <get_home_directory_cluster_for_file+0x290>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
   1080c:	008000b4 	movhi	r2,2
   10810:	10ad3a04 	addi	r2,r2,-19224
   10814:	10c01317 	ldw	r3,76(r2)
   10818:	e0bff017 	ldw	r2,-64(fp)
   1081c:	1885883a 	add	r2,r3,r2
   10820:	1007883a 	mov	r3,r2
   10824:	d0a7da17 	ldw	r2,-24728(gp)
   10828:	100b883a 	mov	r5,r2
   1082c:	1809883a 	mov	r4,r3
   10830:	000ef600 	call	ef60 <Read_Sector_Data>
   10834:	10003426 	beq	r2,zero,10908 <get_home_directory_cluster_for_file+0x2a0>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
   10838:	e03ff115 	stw	zero,-60(fp)
   1083c:	00002506 	br	108d4 <get_home_directory_cluster_for_file+0x26c>
                    {
                       
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
   10840:	e0bff117 	ldw	r2,-60(fp)
   10844:	1004917a 	slli	r2,r2,5
   10848:	e0fff017 	ldw	r3,-64(fp)
   1084c:	180f883a 	mov	r7,r3
   10850:	000d883a 	mov	r6,zero
   10854:	e17fff17 	ldw	r5,-4(fp)
   10858:	1009883a 	mov	r4,r2
   1085c:	000f3700 	call	f370 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
   10860:	e0bfff17 	ldw	r2,-4(fp)
   10864:	10800003 	ldbu	r2,0(r2)
   10868:	10803fcc 	andi	r2,r2,255
   1086c:	10803960 	cmpeqi	r2,r2,229
   10870:	1000151e 	bne	r2,zero,108c8 <get_home_directory_cluster_for_file+0x260>
   10874:	e0bfff17 	ldw	r2,-4(fp)
   10878:	10800003 	ldbu	r2,0(r2)
   1087c:	10803fcc 	andi	r2,r2,255
   10880:	10001126 	beq	r2,zero,108c8 <get_home_directory_cluster_for_file+0x260>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
   10884:	e0fffb04 	addi	r3,fp,-20
   10888:	e0bff904 	addi	r2,fp,-28
   1088c:	180d883a 	mov	r6,r3
   10890:	100b883a 	mov	r5,r2
   10894:	e13fff17 	ldw	r4,-4(fp)
   10898:	00103cc0 	call	103cc <match_file_record_to_name_ext>
   1089c:	e0bff815 	stw	r2,-32(fp)
                            if (match)
   108a0:	e0bff817 	ldw	r2,-32(fp)
   108a4:	10000826 	beq	r2,zero,108c8 <get_home_directory_cluster_for_file+0x260>
                            {
                                new_cluster = file_record->start_cluster_index;
   108a8:	e0bfff17 	ldw	r2,-4(fp)
   108ac:	1080058b 	ldhu	r2,22(r2)
   108b0:	10bfffcc 	andi	r2,r2,65535
   108b4:	e0bfef15 	stw	r2,-68(fp)
                                file_record->file_record_cluster = 1; // Home directory is a subdirectory in the root directory.
   108b8:	e0bfff17 	ldw	r2,-4(fp)
   108bc:	00c00044 	movi	r3,1
   108c0:	10c00a15 	stw	r3,40(r2)
                                break;
   108c4:	00000606 	br	108e0 <get_home_directory_cluster_for_file+0x278>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
   108c8:	e0bff117 	ldw	r2,-60(fp)
   108cc:	10800044 	addi	r2,r2,1
   108d0:	e0bff115 	stw	r2,-60(fp)
   108d4:	e0bff117 	ldw	r2,-60(fp)
   108d8:	10800410 	cmplti	r2,r2,16
   108dc:	103fd81e 	bne	r2,zero,10840 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010840>
                }
                else
                {
                    break;
                }
                if (new_cluster != home_dir_cluster)
   108e0:	e0ffef17 	ldw	r3,-68(fp)
   108e4:	e0bfea17 	ldw	r2,-88(fp)
   108e8:	1880091e 	bne	r3,r2,10910 <get_home_directory_cluster_for_file+0x2a8>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   108ec:	e0bff017 	ldw	r2,-64(fp)
   108f0:	10800044 	addi	r2,r2,1
   108f4:	e0bff015 	stw	r2,-64(fp)
   108f8:	e0fff017 	ldw	r3,-64(fp)
   108fc:	e0bff717 	ldw	r2,-36(fp)
   10900:	18bfc216 	blt	r3,r2,1080c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701080c>
   10904:	00000306 	br	10914 <get_home_directory_cluster_for_file+0x2ac>
                        }
                    }
                }
                else
                {
                    break;
   10908:	0001883a 	nop
   1090c:	00000106 	br	10914 <get_home_directory_cluster_for_file+0x2ac>
                }
                if (new_cluster != home_dir_cluster)
                {
                    break;
   10910:	0001883a 	nop
                }
            }
            if (new_cluster != home_dir_cluster)
   10914:	e0ffef17 	ldw	r3,-68(fp)
   10918:	e0bfea17 	ldw	r2,-88(fp)
   1091c:	18800826 	beq	r3,r2,10940 <get_home_directory_cluster_for_file+0x2d8>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
   10920:	e0bfef17 	ldw	r2,-68(fp)
   10924:	e0bfea15 	stw	r2,-88(fp)
                start_location = start_location+location+1;
   10928:	e0ffed17 	ldw	r3,-76(fp)
   1092c:	e0bfeb17 	ldw	r2,-84(fp)
   10930:	1885883a 	add	r2,r3,r2
   10934:	10800044 	addi	r2,r2,1
   10938:	e0bfed15 	stw	r2,-76(fp)
   1093c:	00007d06 	br	10b34 <get_home_directory_cluster_for_file+0x4cc>
            }
            else
            {
                // Directory path is invalid. 
                return false;
   10940:	0005883a 	mov	r2,zero
   10944:	00009106 	br	10b8c <get_home_directory_cluster_for_file+0x524>
            }
        } else {
            // This is a subdirectory that can have any number of elements. So scan through it as though it was a file
            // and see if you can find the directory of interest.
            int cluster = home_dir_cluster;
   10948:	e0bfea17 	ldw	r2,-88(fp)
   1094c:	e0bff415 	stw	r2,-48(fp)
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
   10950:	e0bff417 	ldw	r2,-48(fp)
   10954:	10ffff84 	addi	r3,r2,-2
   10958:	008000b4 	movhi	r2,2
   1095c:	10ad3a04 	addi	r2,r2,-19224
   10960:	10800383 	ldbu	r2,14(r2)
   10964:	10803fcc 	andi	r2,r2,255
   10968:	1885383a 	mul	r2,r3,r2
   1096c:	1007883a 	mov	r3,r2
   10970:	008000b4 	movhi	r2,2
   10974:	10ad3a04 	addi	r2,r2,-19224
   10978:	10801417 	ldw	r2,80(r2)
   1097c:	1885883a 	add	r2,r3,r2
   10980:	e0bff515 	stw	r2,-44(fp)
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   10984:	e03ff215 	stw	zero,-56(fp)
   10988:	00003606 	br	10a64 <get_home_directory_cluster_for_file+0x3fc>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
   1098c:	e0fff217 	ldw	r3,-56(fp)
   10990:	e0bff517 	ldw	r2,-44(fp)
   10994:	1885883a 	add	r2,r3,r2
   10998:	d0e7da17 	ldw	r3,-24728(gp)
   1099c:	180b883a 	mov	r5,r3
   109a0:	1009883a 	mov	r4,r2
   109a4:	000ef600 	call	ef60 <Read_Sector_Data>
   109a8:	10003526 	beq	r2,zero,10a80 <get_home_directory_cluster_for_file+0x418>
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
   109ac:	e03ff315 	stw	zero,-52(fp)
   109b0:	00002306 	br	10a40 <get_home_directory_cluster_for_file+0x3d8>
                        {                         
                            // Read file record.
                            Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
   109b4:	e0bff317 	ldw	r2,-52(fp)
   109b8:	1004917a 	slli	r2,r2,5
   109bc:	e0fff417 	ldw	r3,-48(fp)
   109c0:	e13ff217 	ldw	r4,-56(fp)
   109c4:	200f883a 	mov	r7,r4
   109c8:	180d883a 	mov	r6,r3
   109cc:	e17fff17 	ldw	r5,-4(fp)
   109d0:	1009883a 	mov	r4,r2
   109d4:	000f3700 	call	f370 <Read_File_Record_At_Offset>
                            if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
   109d8:	e0bfff17 	ldw	r2,-4(fp)
   109dc:	10800003 	ldbu	r2,0(r2)
   109e0:	10803fcc 	andi	r2,r2,255
   109e4:	10803960 	cmpeqi	r2,r2,229
   109e8:	1000121e 	bne	r2,zero,10a34 <get_home_directory_cluster_for_file+0x3cc>
   109ec:	e0bfff17 	ldw	r2,-4(fp)
   109f0:	10800003 	ldbu	r2,0(r2)
   109f4:	10803fcc 	andi	r2,r2,255
   109f8:	10000e26 	beq	r2,zero,10a34 <get_home_directory_cluster_for_file+0x3cc>
                            {
								bool match = match_file_record_to_name_ext(file_record, name, extension);
   109fc:	e0fffb04 	addi	r3,fp,-20
   10a00:	e0bff904 	addi	r2,fp,-28
   10a04:	180d883a 	mov	r6,r3
   10a08:	100b883a 	mov	r5,r2
   10a0c:	e13fff17 	ldw	r4,-4(fp)
   10a10:	00103cc0 	call	103cc <match_file_record_to_name_ext>
   10a14:	e0bff615 	stw	r2,-40(fp)
                                if (match)
   10a18:	e0bff617 	ldw	r2,-40(fp)
   10a1c:	10000526 	beq	r2,zero,10a34 <get_home_directory_cluster_for_file+0x3cc>
                                {
                                    new_cluster = file_record->start_cluster_index;                                   
   10a20:	e0bfff17 	ldw	r2,-4(fp)
   10a24:	1080058b 	ldhu	r2,22(r2)
   10a28:	10bfffcc 	andi	r2,r2,65535
   10a2c:	e0bfef15 	stw	r2,-68(fp)
                                    break;
   10a30:	00000606 	br	10a4c <get_home_directory_cluster_for_file+0x3e4>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
   10a34:	e0bff317 	ldw	r2,-52(fp)
   10a38:	10800044 	addi	r2,r2,1
   10a3c:	e0bff315 	stw	r2,-52(fp)
   10a40:	e0bff317 	ldw	r2,-52(fp)
   10a44:	10800410 	cmplti	r2,r2,16
   10a48:	103fda1e 	bne	r2,zero,109b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70109b4>
                    }
                    else
                    {
                        break;
                    }
                    if (new_cluster != home_dir_cluster)
   10a4c:	e0ffef17 	ldw	r3,-68(fp)
   10a50:	e0bfea17 	ldw	r2,-88(fp)
   10a54:	18800c1e 	bne	r3,r2,10a88 <get_home_directory_cluster_for_file+0x420>
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   10a58:	e0bff217 	ldw	r2,-56(fp)
   10a5c:	10800044 	addi	r2,r2,1
   10a60:	e0bff215 	stw	r2,-56(fp)
   10a64:	008000b4 	movhi	r2,2
   10a68:	10ad3a04 	addi	r2,r2,-19224
   10a6c:	10800383 	ldbu	r2,14(r2)
   10a70:	10803fcc 	andi	r2,r2,255
   10a74:	e0fff217 	ldw	r3,-56(fp)
   10a78:	18bfc416 	blt	r3,r2,1098c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701098c>
   10a7c:	00000306 	br	10a8c <get_home_directory_cluster_for_file+0x424>
                            }
                        }
                    }
                    else
                    {
                        break;
   10a80:	0001883a 	nop
   10a84:	00000106 	br	10a8c <get_home_directory_cluster_for_file+0x424>
                    }
                    if (new_cluster != home_dir_cluster)
                    {
                        break;
   10a88:	0001883a 	nop
                    }
                }
                // If this is the end of the cluster and the directory has not been found, then see if there is another cluster
                // that holds data for the current directory.
                if (new_cluster == home_dir_cluster)
   10a8c:	e0ffef17 	ldw	r3,-68(fp)
   10a90:	e0bfea17 	ldw	r2,-88(fp)
   10a94:	1880141e 	bne	r3,r2,10ae8 <get_home_directory_cluster_for_file+0x480>
                {
					unsigned short int next_cluster;

					if (get_cluster_flag(new_cluster, &next_cluster))
   10a98:	e0bfef17 	ldw	r2,-68(fp)
   10a9c:	e0fffc04 	addi	r3,fp,-16
   10aa0:	180b883a 	mov	r5,r3
   10aa4:	1009883a 	mov	r4,r2
   10aa8:	000f0380 	call	f038 <get_cluster_flag>
   10aac:	10000c26 	beq	r2,zero,10ae0 <get_home_directory_cluster_for_file+0x478>
					{
						// The directory needs to be expanded to store more files.
						if ((next_cluster & 0x0000fff8) == 0x0000fff8)
   10ab0:	e0bffc0b 	ldhu	r2,-16(fp)
   10ab4:	10bfffcc 	andi	r2,r2,65535
   10ab8:	10fffe0c 	andi	r3,r2,65528
   10abc:	00bffe14 	movui	r2,65528
   10ac0:	1880021e 	bne	r3,r2,10acc <get_home_directory_cluster_for_file+0x464>
						{
							return false;
   10ac4:	0005883a 	mov	r2,zero
   10ac8:	00003006 	br	10b8c <get_home_directory_cluster_for_file+0x524>
						}
						new_cluster = (next_cluster & 0x0000fff8);
   10acc:	e0bffc0b 	ldhu	r2,-16(fp)
   10ad0:	10bfffcc 	andi	r2,r2,65535
   10ad4:	10bffe0c 	andi	r2,r2,65528
   10ad8:	e0bfef15 	stw	r2,-68(fp)
   10adc:	00000206 	br	10ae8 <get_home_directory_cluster_for_file+0x480>
					}
					else
					{
						// Directory path is invalid.                 
						return false;
   10ae0:	0005883a 	mov	r2,zero
   10ae4:	00002906 	br	10b8c <get_home_directory_cluster_for_file+0x524>
					}
                }              
            } while ((cluster < 0x0000fff8) && (new_cluster == home_dir_cluster));
   10ae8:	e0bff417 	ldw	r2,-48(fp)
   10aec:	00fffdd4 	movui	r3,65527
   10af0:	18800316 	blt	r3,r2,10b00 <get_home_directory_cluster_for_file+0x498>
   10af4:	e0ffef17 	ldw	r3,-68(fp)
   10af8:	e0bfea17 	ldw	r2,-88(fp)
   10afc:	18bf9426 	beq	r3,r2,10950 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010950>
            if (new_cluster != home_dir_cluster)
   10b00:	e0ffef17 	ldw	r3,-68(fp)
   10b04:	e0bfea17 	ldw	r2,-88(fp)
   10b08:	18800826 	beq	r3,r2,10b2c <get_home_directory_cluster_for_file+0x4c4>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
   10b0c:	e0bfef17 	ldw	r2,-68(fp)
   10b10:	e0bfea15 	stw	r2,-88(fp)
                start_location = start_location+location+1;
   10b14:	e0ffed17 	ldw	r3,-76(fp)
   10b18:	e0bfeb17 	ldw	r2,-84(fp)
   10b1c:	1885883a 	add	r2,r3,r2
   10b20:	10800044 	addi	r2,r2,1
   10b24:	e0bfed15 	stw	r2,-76(fp)
   10b28:	00000206 	br	10b34 <get_home_directory_cluster_for_file+0x4cc>
            }
            else
            {
                // Directory path is invalid. 
                return false;
   10b2c:	0005883a 	mov	r2,zero
   10b30:	00001606 	br	10b8c <get_home_directory_cluster_for_file+0x524>
            }            
        }
        location = get_dir_divider_location(&(file_name[start_location]));
   10b34:	e0bfed17 	ldw	r2,-76(fp)
   10b38:	e0fffd17 	ldw	r3,-12(fp)
   10b3c:	1885883a 	add	r2,r3,r2
   10b40:	1009883a 	mov	r4,r2
   10b44:	00103140 	call	10314 <get_dir_divider_location>
   10b48:	e0bfeb15 	stw	r2,-84(fp)
        if (location < 0)
   10b4c:	e0bfeb17 	ldw	r2,-84(fp)
   10b50:	1000020e 	bge	r2,zero,10b5c <get_home_directory_cluster_for_file+0x4f4>
        {
            // Directory has been located.
            result = true;
   10b54:	00800044 	movi	r2,1
   10b58:	e0bfe915 	stw	r2,-92(fp)
    int location, index;
    int start_location = 0;
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
    while (location > 0)
   10b5c:	e0bfeb17 	ldw	r2,-84(fp)
   10b60:	00becf16 	blt	zero,r2,106a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70106a0>
            // Directory has been located.
            result = true;
        }
    }
    
    *home_directory_cluster = home_dir_cluster;
   10b64:	e0bffe17 	ldw	r2,-8(fp)
   10b68:	e0ffea17 	ldw	r3,-88(fp)
   10b6c:	10c00015 	stw	r3,0(r2)
    if (home_dir_cluster == 0)
   10b70:	e0bfea17 	ldw	r2,-88(fp)
   10b74:	1000041e 	bne	r2,zero,10b88 <get_home_directory_cluster_for_file+0x520>
    {
        file_record->file_record_cluster = 0; // Home directory is the root directory.
   10b78:	e0bfff17 	ldw	r2,-4(fp)
   10b7c:	10000a15 	stw	zero,40(r2)
		result = true;
   10b80:	00800044 	movi	r2,1
   10b84:	e0bfe915 	stw	r2,-92(fp)
    }
    return result;
   10b88:	e0bfe917 	ldw	r2,-92(fp)
}
   10b8c:	e037883a 	mov	sp,fp
   10b90:	dfc00117 	ldw	ra,4(sp)
   10b94:	df000017 	ldw	fp,0(sp)
   10b98:	dec00204 	addi	sp,sp,8
   10b9c:	f800283a 	ret

00010ba0 <find_file_in_directory>:


bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
   10ba0:	deffe804 	addi	sp,sp,-96
   10ba4:	dfc01715 	stw	ra,92(sp)
   10ba8:	df001615 	stw	fp,88(sp)
   10bac:	df001604 	addi	fp,sp,88
   10bb0:	e13ffd15 	stw	r4,-12(fp)
   10bb4:	e17ffe15 	stw	r5,-8(fp)
   10bb8:	e1bfff15 	stw	r6,-4(fp)
    int location = get_dir_divider_location( file_name );
   10bbc:	e13ffe17 	ldw	r4,-8(fp)
   10bc0:	00103140 	call	10314 <get_dir_divider_location>
   10bc4:	e0bfea15 	stw	r2,-88(fp)
    int last_dir_separator = 0;
   10bc8:	e03feb15 	stw	zero,-84(fp)
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
   10bcc:	00800804 	movi	r2,32
   10bd0:	e0bff905 	stb	r2,-28(fp)
   10bd4:	00800804 	movi	r2,32
   10bd8:	e0bff945 	stb	r2,-27(fp)
   10bdc:	00800804 	movi	r2,32
   10be0:	e0bff985 	stb	r2,-26(fp)
   10be4:	00800804 	movi	r2,32
   10be8:	e0bff9c5 	stb	r2,-25(fp)
   10bec:	00800804 	movi	r2,32
   10bf0:	e0bffa05 	stb	r2,-24(fp)
   10bf4:	00800804 	movi	r2,32
   10bf8:	e0bffa45 	stb	r2,-23(fp)
   10bfc:	00800804 	movi	r2,32
   10c00:	e0bffa85 	stb	r2,-22(fp)
   10c04:	00800804 	movi	r2,32
   10c08:	e0bffac5 	stb	r2,-21(fp)
    char extension[3] = { ' ', ' ', ' ' };
   10c0c:	00800804 	movi	r2,32
   10c10:	e0bffb05 	stb	r2,-20(fp)
   10c14:	00800804 	movi	r2,32
   10c18:	e0bffb45 	stb	r2,-19(fp)
   10c1c:	00800804 	movi	r2,32
   10c20:	e0bffb85 	stb	r2,-18(fp)
    int ext_index = -1;
   10c24:	00bfffc4 	movi	r2,-1
   10c28:	e0bfec15 	stw	r2,-80(fp)
    int cluster = directory_start_cluster;
   10c2c:	e0bffd17 	ldw	r2,-12(fp)
   10c30:	e0bfed15 	stw	r2,-76(fp)
    int index;
	int length = strlen(file_name);
   10c34:	e13ffe17 	ldw	r4,-8(fp)
   10c38:	00012540 	call	1254 <strlen>
   10c3c:	e0bff415 	stw	r2,-48(fp)
    bool result = false;
   10c40:	e03fef15 	stw	zero,-68(fp)
    
    // Skip through all directory separators.
    while (location > 0)
   10c44:	00000b06 	br	10c74 <find_file_in_directory+0xd4>
    {
        last_dir_separator = last_dir_separator+location+1;
   10c48:	e0ffeb17 	ldw	r3,-84(fp)
   10c4c:	e0bfea17 	ldw	r2,-88(fp)
   10c50:	1885883a 	add	r2,r3,r2
   10c54:	10800044 	addi	r2,r2,1
   10c58:	e0bfeb15 	stw	r2,-84(fp)
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
   10c5c:	e0bfeb17 	ldw	r2,-84(fp)
   10c60:	e0fffe17 	ldw	r3,-8(fp)
   10c64:	1885883a 	add	r2,r3,r2
   10c68:	1009883a 	mov	r4,r2
   10c6c:	00103140 	call	10314 <get_dir_divider_location>
   10c70:	e0bfea15 	stw	r2,-88(fp)
    int index;
	int length = strlen(file_name);
    bool result = false;
    
    // Skip through all directory separators.
    while (location > 0)
   10c74:	e0bfea17 	ldw	r2,-88(fp)
   10c78:	00bff316 	blt	zero,r2,10c48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010c48>
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
   10c7c:	e0bfeb17 	ldw	r2,-84(fp)
   10c80:	e0bfee15 	stw	r2,-72(fp)
   10c84:	00002706 	br	10d24 <find_file_in_directory+0x184>
    {
        if (file_name[index] == '.')
   10c88:	e0bfee17 	ldw	r2,-72(fp)
   10c8c:	e0fffe17 	ldw	r3,-8(fp)
   10c90:	1885883a 	add	r2,r3,r2
   10c94:	10800003 	ldbu	r2,0(r2)
   10c98:	10803fcc 	andi	r2,r2,255
   10c9c:	1080201c 	xori	r2,r2,128
   10ca0:	10bfe004 	addi	r2,r2,-128
   10ca4:	10800b98 	cmpnei	r2,r2,46
   10ca8:	1000031e 	bne	r2,zero,10cb8 <find_file_in_directory+0x118>
        {
            ext_index = index;
   10cac:	e0bfee17 	ldw	r2,-72(fp)
   10cb0:	e0bfec15 	stw	r2,-80(fp)
   10cb4:	00001806 	br	10d18 <find_file_in_directory+0x178>
        }
        else if (ext_index < 0)
   10cb8:	e0bfec17 	ldw	r2,-80(fp)
   10cbc:	10000b0e 	bge	r2,zero,10cec <find_file_in_directory+0x14c>
        {
            name[index-last_dir_separator] = file_name[index];
   10cc0:	e0ffee17 	ldw	r3,-72(fp)
   10cc4:	e0bfeb17 	ldw	r2,-84(fp)
   10cc8:	1885c83a 	sub	r2,r3,r2
   10ccc:	e0ffee17 	ldw	r3,-72(fp)
   10cd0:	e13ffe17 	ldw	r4,-8(fp)
   10cd4:	20c7883a 	add	r3,r4,r3
   10cd8:	18c00003 	ldbu	r3,0(r3)
   10cdc:	e13ff904 	addi	r4,fp,-28
   10ce0:	2085883a 	add	r2,r4,r2
   10ce4:	10c00005 	stb	r3,0(r2)
   10ce8:	00000b06 	br	10d18 <find_file_in_directory+0x178>
        }
        else
        {
            extension[index-ext_index-1] = file_name[index];
   10cec:	e0ffee17 	ldw	r3,-72(fp)
   10cf0:	e0bfec17 	ldw	r2,-80(fp)
   10cf4:	1885c83a 	sub	r2,r3,r2
   10cf8:	10bfffc4 	addi	r2,r2,-1
   10cfc:	e0ffee17 	ldw	r3,-72(fp)
   10d00:	e13ffe17 	ldw	r4,-8(fp)
   10d04:	20c7883a 	add	r3,r4,r3
   10d08:	18c00003 	ldbu	r3,0(r3)
   10d0c:	e13ffb04 	addi	r4,fp,-20
   10d10:	2085883a 	add	r2,r4,r2
   10d14:	10c00005 	stb	r3,0(r2)
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
   10d18:	e0bfee17 	ldw	r2,-72(fp)
   10d1c:	10800044 	addi	r2,r2,1
   10d20:	e0bfee15 	stw	r2,-72(fp)
   10d24:	e0ffee17 	ldw	r3,-72(fp)
   10d28:	e0bff417 	ldw	r2,-48(fp)
   10d2c:	18bfd616 	blt	r3,r2,10c88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010c88>
            extension[index-ext_index-1] = file_name[index];
        }
    }

    // Look for the file.
    if (directory_start_cluster == 0)
   10d30:	e0bffd17 	ldw	r2,-12(fp)
   10d34:	1000461e 	bne	r2,zero,10e50 <find_file_in_directory+0x2b0>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
   10d38:	008000b4 	movhi	r2,2
   10d3c:	10ad3a04 	addi	r2,r2,-19224
   10d40:	1080050b 	ldhu	r2,20(r2)
   10d44:	10bfffcc 	andi	r2,r2,65535
   10d48:	1006917a 	slli	r3,r2,5
   10d4c:	008000b4 	movhi	r2,2
   10d50:	10ad3a04 	addi	r2,r2,-19224
   10d54:	1080030b 	ldhu	r2,12(r2)
   10d58:	10bfffcc 	andi	r2,r2,65535
   10d5c:	1885283a 	div	r2,r3,r2
   10d60:	e0bff715 	stw	r2,-36(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   10d64:	e03ff015 	stw	zero,-64(fp)
   10d68:	00003506 	br	10e40 <find_file_in_directory+0x2a0>
        {
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
   10d6c:	008000b4 	movhi	r2,2
   10d70:	10ad3a04 	addi	r2,r2,-19224
   10d74:	10c01317 	ldw	r3,76(r2)
   10d78:	e0bff017 	ldw	r2,-64(fp)
   10d7c:	1885883a 	add	r2,r3,r2
   10d80:	1007883a 	mov	r3,r2
   10d84:	d0a7da17 	ldw	r2,-24728(gp)
   10d88:	100b883a 	mov	r5,r2
   10d8c:	1809883a 	mov	r4,r3
   10d90:	000ef600 	call	ef60 <Read_Sector_Data>
   10d94:	10009626 	beq	r2,zero,10ff0 <find_file_in_directory+0x450>
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
   10d98:	e03ff115 	stw	zero,-60(fp)
   10d9c:	00002006 	br	10e20 <find_file_in_directory+0x280>
                {
                    // Read file record.
                    Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
   10da0:	e0bff117 	ldw	r2,-60(fp)
   10da4:	1004917a 	slli	r2,r2,5
   10da8:	e0fff017 	ldw	r3,-64(fp)
   10dac:	180f883a 	mov	r7,r3
   10db0:	000d883a 	mov	r6,zero
   10db4:	e17fff17 	ldw	r5,-4(fp)
   10db8:	1009883a 	mov	r4,r2
   10dbc:	000f3700 	call	f370 <Read_File_Record_At_Offset>
                    if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
   10dc0:	e0bfff17 	ldw	r2,-4(fp)
   10dc4:	10800003 	ldbu	r2,0(r2)
   10dc8:	10803fcc 	andi	r2,r2,255
   10dcc:	10803960 	cmpeqi	r2,r2,229
   10dd0:	1000101e 	bne	r2,zero,10e14 <find_file_in_directory+0x274>
   10dd4:	e0bfff17 	ldw	r2,-4(fp)
   10dd8:	10800003 	ldbu	r2,0(r2)
   10ddc:	10803fcc 	andi	r2,r2,255
   10de0:	10000c26 	beq	r2,zero,10e14 <find_file_in_directory+0x274>
                    {
                        bool match = match_file_record_to_name_ext(file_record, name, extension);
   10de4:	e0fffb04 	addi	r3,fp,-20
   10de8:	e0bff904 	addi	r2,fp,-28
   10dec:	180d883a 	mov	r6,r3
   10df0:	100b883a 	mov	r5,r2
   10df4:	e13fff17 	ldw	r4,-4(fp)
   10df8:	00103cc0 	call	103cc <match_file_record_to_name_ext>
   10dfc:	e0bff815 	stw	r2,-32(fp)

                        if (match)
   10e00:	e0bff817 	ldw	r2,-32(fp)
   10e04:	10000326 	beq	r2,zero,10e14 <find_file_in_directory+0x274>
                        {
                            result = true;
   10e08:	00800044 	movi	r2,1
   10e0c:	e0bfef15 	stw	r2,-68(fp)
                            break;
   10e10:	00000606 	br	10e2c <find_file_in_directory+0x28c>
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
   10e14:	e0bff117 	ldw	r2,-60(fp)
   10e18:	10800044 	addi	r2,r2,1
   10e1c:	e0bff115 	stw	r2,-60(fp)
   10e20:	e0bff117 	ldw	r2,-60(fp)
   10e24:	10800410 	cmplti	r2,r2,16
   10e28:	103fdd1e 	bne	r2,zero,10da0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010da0>
            }
            else
            {
                break;
            }
            if (result)
   10e2c:	e0bfef17 	ldw	r2,-68(fp)
   10e30:	1000711e 	bne	r2,zero,10ff8 <find_file_in_directory+0x458>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   10e34:	e0bff017 	ldw	r2,-64(fp)
   10e38:	10800044 	addi	r2,r2,1
   10e3c:	e0bff015 	stw	r2,-64(fp)
   10e40:	e0fff017 	ldw	r3,-64(fp)
   10e44:	e0bff717 	ldw	r2,-36(fp)
   10e48:	18bfc816 	blt	r3,r2,10d6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010d6c>
   10e4c:	00006b06 	br	10ffc <find_file_in_directory+0x45c>
        }
    }
    else
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
   10e50:	e0bfed17 	ldw	r2,-76(fp)
   10e54:	10ffff84 	addi	r3,r2,-2
   10e58:	008000b4 	movhi	r2,2
   10e5c:	10ad3a04 	addi	r2,r2,-19224
   10e60:	10800383 	ldbu	r2,14(r2)
   10e64:	10803fcc 	andi	r2,r2,255
   10e68:	1885383a 	mul	r2,r3,r2
   10e6c:	1007883a 	mov	r3,r2
   10e70:	008000b4 	movhi	r2,2
   10e74:	10ad3a04 	addi	r2,r2,-19224
   10e78:	10801417 	ldw	r2,80(r2)
   10e7c:	1885883a 	add	r2,r3,r2
   10e80:	e0bff515 	stw	r2,-44(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   10e84:	e03ff215 	stw	zero,-56(fp)
   10e88:	00003306 	br	10f58 <find_file_in_directory+0x3b8>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
   10e8c:	e0fff217 	ldw	r3,-56(fp)
   10e90:	e0bff517 	ldw	r2,-44(fp)
   10e94:	1885883a 	add	r2,r3,r2
   10e98:	d0e7da17 	ldw	r3,-24728(gp)
   10e9c:	180b883a 	mov	r5,r3
   10ea0:	1009883a 	mov	r4,r2
   10ea4:	000ef600 	call	ef60 <Read_Sector_Data>
   10ea8:	10003226 	beq	r2,zero,10f74 <find_file_in_directory+0x3d4>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
   10eac:	e03ff315 	stw	zero,-52(fp)
   10eb0:	00002106 	br	10f38 <find_file_in_directory+0x398>
                    {
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
   10eb4:	e0bff317 	ldw	r2,-52(fp)
   10eb8:	1004917a 	slli	r2,r2,5
   10ebc:	e0ffed17 	ldw	r3,-76(fp)
   10ec0:	e13ff217 	ldw	r4,-56(fp)
   10ec4:	200f883a 	mov	r7,r4
   10ec8:	180d883a 	mov	r6,r3
   10ecc:	e17fff17 	ldw	r5,-4(fp)
   10ed0:	1009883a 	mov	r4,r2
   10ed4:	000f3700 	call	f370 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
   10ed8:	e0bfff17 	ldw	r2,-4(fp)
   10edc:	10800003 	ldbu	r2,0(r2)
   10ee0:	10803fcc 	andi	r2,r2,255
   10ee4:	10803960 	cmpeqi	r2,r2,229
   10ee8:	1000101e 	bne	r2,zero,10f2c <find_file_in_directory+0x38c>
   10eec:	e0bfff17 	ldw	r2,-4(fp)
   10ef0:	10800003 	ldbu	r2,0(r2)
   10ef4:	10803fcc 	andi	r2,r2,255
   10ef8:	10000c26 	beq	r2,zero,10f2c <find_file_in_directory+0x38c>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
   10efc:	e0fffb04 	addi	r3,fp,-20
   10f00:	e0bff904 	addi	r2,fp,-28
   10f04:	180d883a 	mov	r6,r3
   10f08:	100b883a 	mov	r5,r2
   10f0c:	e13fff17 	ldw	r4,-4(fp)
   10f10:	00103cc0 	call	103cc <match_file_record_to_name_ext>
   10f14:	e0bff615 	stw	r2,-40(fp)

                            if (match)
   10f18:	e0bff617 	ldw	r2,-40(fp)
   10f1c:	10000326 	beq	r2,zero,10f2c <find_file_in_directory+0x38c>
                            {                               
                                result = true;
   10f20:	00800044 	movi	r2,1
   10f24:	e0bfef15 	stw	r2,-68(fp)
                                break;
   10f28:	00000606 	br	10f44 <find_file_in_directory+0x3a4>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
   10f2c:	e0bff317 	ldw	r2,-52(fp)
   10f30:	10800044 	addi	r2,r2,1
   10f34:	e0bff315 	stw	r2,-52(fp)
   10f38:	e0bff317 	ldw	r2,-52(fp)
   10f3c:	10800410 	cmplti	r2,r2,16
   10f40:	103fdc1e 	bne	r2,zero,10eb4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010eb4>
                }
                else
                {
                    break;
                }
                if (result)
   10f44:	e0bfef17 	ldw	r2,-68(fp)
   10f48:	10000c1e 	bne	r2,zero,10f7c <find_file_in_directory+0x3dc>
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   10f4c:	e0bff217 	ldw	r2,-56(fp)
   10f50:	10800044 	addi	r2,r2,1
   10f54:	e0bff215 	stw	r2,-56(fp)
   10f58:	008000b4 	movhi	r2,2
   10f5c:	10ad3a04 	addi	r2,r2,-19224
   10f60:	10800383 	ldbu	r2,14(r2)
   10f64:	10803fcc 	andi	r2,r2,255
   10f68:	e0fff217 	ldw	r3,-56(fp)
   10f6c:	18bfc716 	blt	r3,r2,10e8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010e8c>
   10f70:	00000306 	br	10f80 <find_file_in_directory+0x3e0>
                        }
                    }
                }
                else
                {
                    break;
   10f74:	0001883a 	nop
   10f78:	00000106 	br	10f80 <find_file_in_directory+0x3e0>
                }
                if (result)
                {
                    break;
   10f7c:	0001883a 	nop
                }
            }
            // If this is the end of the cluster and the file has not been found, then see if there is another cluster
            // that holds data for the current directory.
            if (result == false)
   10f80:	e0bfef17 	ldw	r2,-68(fp)
   10f84:	1000141e 	bne	r2,zero,10fd8 <find_file_in_directory+0x438>
            {
				unsigned short int new_cluster;

				if (get_cluster_flag(cluster, &new_cluster))
   10f88:	e0bfed17 	ldw	r2,-76(fp)
   10f8c:	e0fffc04 	addi	r3,fp,-16
   10f90:	180b883a 	mov	r5,r3
   10f94:	1009883a 	mov	r4,r2
   10f98:	000f0380 	call	f038 <get_cluster_flag>
   10f9c:	10000c26 	beq	r2,zero,10fd0 <find_file_in_directory+0x430>
				{
					// The directory needs to be expanded to store more files.
					if ((new_cluster & 0x0000fff8) == 0x0000fff8)
   10fa0:	e0bffc0b 	ldhu	r2,-16(fp)
   10fa4:	10bfffcc 	andi	r2,r2,65535
   10fa8:	10fffe0c 	andi	r3,r2,65528
   10fac:	00bffe14 	movui	r2,65528
   10fb0:	1880021e 	bne	r3,r2,10fbc <find_file_in_directory+0x41c>
					{
						return false;
   10fb4:	0005883a 	mov	r2,zero
   10fb8:	00001106 	br	11000 <find_file_in_directory+0x460>
					}
					cluster = (new_cluster & 0x0000fff8);
   10fbc:	e0bffc0b 	ldhu	r2,-16(fp)
   10fc0:	10bfffcc 	andi	r2,r2,65535
   10fc4:	10bffe0c 	andi	r2,r2,65528
   10fc8:	e0bfed15 	stw	r2,-76(fp)
   10fcc:	00000206 	br	10fd8 <find_file_in_directory+0x438>
				}
				else
                {
                    // Directory path is invalid.                 
                    return false;
   10fd0:	0005883a 	mov	r2,zero
   10fd4:	00000a06 	br	11000 <find_file_in_directory+0x460>
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
   10fd8:	e0bfed17 	ldw	r2,-76(fp)
   10fdc:	00fffdd4 	movui	r3,65527
   10fe0:	18800616 	blt	r3,r2,10ffc <find_file_in_directory+0x45c>
   10fe4:	e0bfef17 	ldw	r2,-68(fp)
   10fe8:	103f9926 	beq	r2,zero,10e50 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010e50>
   10fec:	00000306 	br	10ffc <find_file_in_directory+0x45c>
                    }
                }
            }
            else
            {
                break;
   10ff0:	0001883a 	nop
   10ff4:	00000106 	br	10ffc <find_file_in_directory+0x45c>
            }
            if (result)
            {
                break;
   10ff8:	0001883a 	nop
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
    }
    
    return result;   
   10ffc:	e0bfef17 	ldw	r2,-68(fp)
}
   11000:	e037883a 	mov	sp,fp
   11004:	dfc00117 	ldw	ra,4(sp)
   11008:	df000017 	ldw	fp,0(sp)
   1100c:	dec00204 	addi	sp,sp,8
   11010:	f800283a 	ret

00011014 <find_first_empty_cluster>:


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
   11014:	defff504 	addi	sp,sp,-44
   11018:	dfc00a15 	stw	ra,40(sp)
   1101c:	df000915 	stw	fp,36(sp)
   11020:	df000904 	addi	fp,sp,36
   11024:	e13fff15 	stw	r4,-4(fp)
    unsigned int sector = boot_sector_data.first_fat_sector_offset;
   11028:	008000b4 	movhi	r2,2
   1102c:	10ad3a04 	addi	r2,r2,-19224
   11030:	10801117 	ldw	r2,68(r2)
   11034:	e0bff715 	stw	r2,-36(fp)
    unsigned int cluster_index = 2;
   11038:	00800084 	movi	r2,2
   1103c:	e0bff815 	stw	r2,-32(fp)
    short int cluster = -1;
   11040:	00bfffc4 	movi	r2,-1
   11044:	e0bff90d 	sth	r2,-28(fp)
    bool result = false;
   11048:	e03ffa15 	stw	zero,-24(fp)
	unsigned max_cluster_index = 0;
   1104c:	e03ffb15 	stw	zero,-20(fp)
	unsigned int non_data_sectors = boot_sector_data.data_sector_offset;
   11050:	008000b4 	movhi	r2,2
   11054:	10ad3a04 	addi	r2,r2,-19224
   11058:	10801417 	ldw	r2,80(r2)
   1105c:	e0bffc15 	stw	r2,-16(fp)
	unsigned int less_than_32 = boot_sector_data.number_of_sectors_in_partition;
   11060:	008000b4 	movhi	r2,2
   11064:	10ad3a04 	addi	r2,r2,-19224
   11068:	1080058b 	ldhu	r2,22(r2)
   1106c:	10bfffcc 	andi	r2,r2,65535
   11070:	e0bffd15 	stw	r2,-12(fp)
	unsigned int greater_than_32 = boot_sector_data.total_sector_count_if_above_32MB;
   11074:	008000b4 	movhi	r2,2
   11078:	10ad3a04 	addi	r2,r2,-19224
   1107c:	10800917 	ldw	r2,36(r2)
   11080:	e0bffe15 	stw	r2,-8(fp)

	if (less_than_32 > greater_than_32)
   11084:	e0bffd17 	ldw	r2,-12(fp)
   11088:	e0fffe17 	ldw	r3,-8(fp)
   1108c:	18800b2e 	bgeu	r3,r2,110bc <find_first_empty_cluster+0xa8>
	{
		max_cluster_index = ((less_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
   11090:	e0fffd17 	ldw	r3,-12(fp)
   11094:	e0bffc17 	ldw	r2,-16(fp)
   11098:	1887c83a 	sub	r3,r3,r2
   1109c:	008000b4 	movhi	r2,2
   110a0:	10ad3a04 	addi	r2,r2,-19224
   110a4:	10800383 	ldbu	r2,14(r2)
   110a8:	10803fcc 	andi	r2,r2,255
   110ac:	1885203a 	divu	r2,r3,r2
   110b0:	10800044 	addi	r2,r2,1
   110b4:	e0bffb15 	stw	r2,-20(fp)
   110b8:	00002a06 	br	11164 <find_first_empty_cluster+0x150>
	}
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
   110bc:	e0fffe17 	ldw	r3,-8(fp)
   110c0:	e0bffc17 	ldw	r2,-16(fp)
   110c4:	1887c83a 	sub	r3,r3,r2
   110c8:	008000b4 	movhi	r2,2
   110cc:	10ad3a04 	addi	r2,r2,-19224
   110d0:	10800383 	ldbu	r2,14(r2)
   110d4:	10803fcc 	andi	r2,r2,255
   110d8:	1885203a 	divu	r2,r3,r2
   110dc:	10800044 	addi	r2,r2,1
   110e0:	e0bffb15 	stw	r2,-20(fp)
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
   110e4:	00001f06 	br	11164 <find_first_empty_cluster+0x150>
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
   110e8:	e0bff717 	ldw	r2,-36(fp)
   110ec:	d0e7da17 	ldw	r3,-24728(gp)
   110f0:	180b883a 	mov	r5,r3
   110f4:	1009883a 	mov	r4,r2
   110f8:	000ef600 	call	ef60 <Read_Sector_Data>
   110fc:	10001426 	beq	r2,zero,11150 <find_first_empty_cluster+0x13c>
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
   11100:	e0bff817 	ldw	r2,-32(fp)
   11104:	10803fcc 	andi	r2,r2,255
   11108:	1085883a 	add	r2,r2,r2
   1110c:	1007883a 	mov	r3,r2
   11110:	d0a7dc17 	ldw	r2,-24720(gp)
   11114:	10800a17 	ldw	r2,40(r2)
   11118:	1885883a 	add	r2,r3,r2
   1111c:	1080002b 	ldhuio	r2,0(r2)
   11120:	10bfffcc 	andi	r2,r2,65535
   11124:	e0bff90d 	sth	r2,-28(fp)
                if (cluster == 0)
   11128:	e0bff90f 	ldh	r2,-28(fp)
   1112c:	10000726 	beq	r2,zero,1114c <find_first_empty_cluster+0x138>
                    // Free cluster found.
                    break;
                }
                else
                {
                    cluster_index++;
   11130:	e0bff817 	ldw	r2,-32(fp)
   11134:	10800044 	addi	r2,r2,1
   11138:	e0bff815 	stw	r2,-32(fp)
                } 
            } while ((cluster_index % 256) != 0);
   1113c:	e0bff817 	ldw	r2,-32(fp)
   11140:	10803fcc 	andi	r2,r2,255
   11144:	103fee1e 	bne	r2,zero,11100 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011100>
   11148:	00000106 	br	11150 <find_first_empty_cluster+0x13c>
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
                if (cluster == 0)
                {
                    // Free cluster found.
                    break;
   1114c:	0001883a 	nop
                {
                    cluster_index++;
                } 
            } while ((cluster_index % 256) != 0);
        }
        if (cluster == 0)
   11150:	e0bff90f 	ldh	r2,-28(fp)
   11154:	10000926 	beq	r2,zero,1117c <find_first_empty_cluster+0x168>
        {
            break;
        }
        sector++;
   11158:	e0bff717 	ldw	r2,-36(fp)
   1115c:	10800044 	addi	r2,r2,1
   11160:	e0bff715 	stw	r2,-36(fp)
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
   11164:	008000b4 	movhi	r2,2
   11168:	10ad3a04 	addi	r2,r2,-19224
   1116c:	10c01217 	ldw	r3,72(r2)
   11170:	e0bff717 	ldw	r2,-36(fp)
   11174:	18bfdc1e 	bne	r3,r2,110e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70110e8>
   11178:	00000106 	br	11180 <find_first_empty_cluster+0x16c>
                } 
            } while ((cluster_index % 256) != 0);
        }
        if (cluster == 0)
        {
            break;
   1117c:	0001883a 	nop
        }
        sector++;
    }
    if ((cluster == 0) && (cluster <= max_cluster_index))
   11180:	e0bff90f 	ldh	r2,-28(fp)
   11184:	1000081e 	bne	r2,zero,111a8 <find_first_empty_cluster+0x194>
   11188:	e0bff90f 	ldh	r2,-28(fp)
   1118c:	e0fffb17 	ldw	r3,-20(fp)
   11190:	18800536 	bltu	r3,r2,111a8 <find_first_empty_cluster+0x194>
    {
        *cluster_number = cluster_index;
   11194:	e0bfff17 	ldw	r2,-4(fp)
   11198:	e0fff817 	ldw	r3,-32(fp)
   1119c:	10c00015 	stw	r3,0(r2)
		result = true;
   111a0:	00800044 	movi	r2,1
   111a4:	e0bffa15 	stw	r2,-24(fp)
    }
    return result;
   111a8:	e0bffa17 	ldw	r2,-24(fp)
}
   111ac:	e037883a 	mov	sp,fp
   111b0:	dfc00117 	ldw	ra,4(sp)
   111b4:	df000017 	ldw	fp,0(sp)
   111b8:	dec00204 	addi	sp,sp,8
   111bc:	f800283a 	ret

000111c0 <find_first_empty_record_in_a_subdirectory>:


int find_first_empty_record_in_a_subdirectory(int start_cluster_index)
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
   111c0:	defff604 	addi	sp,sp,-40
   111c4:	dfc00915 	stw	ra,36(sp)
   111c8:	df000815 	stw	fp,32(sp)
   111cc:	df000804 	addi	fp,sp,32
   111d0:	e13fff15 	stw	r4,-4(fp)
    int result = -1;
   111d4:	00bfffc4 	movi	r2,-1
   111d8:	e0bff815 	stw	r2,-32(fp)
    int cluster = start_cluster_index;
   111dc:	e0bfff17 	ldw	r2,-4(fp)
   111e0:	e0bff915 	stw	r2,-28(fp)
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
   111e4:	e0bff917 	ldw	r2,-28(fp)
   111e8:	10ffff84 	addi	r3,r2,-2
   111ec:	008000b4 	movhi	r2,2
   111f0:	10ad3a04 	addi	r2,r2,-19224
   111f4:	10800383 	ldbu	r2,14(r2)
   111f8:	10803fcc 	andi	r2,r2,255
   111fc:	1885383a 	mul	r2,r3,r2
   11200:	1007883a 	mov	r3,r2
   11204:	008000b4 	movhi	r2,2
   11208:	10ad3a04 	addi	r2,r2,-19224
   1120c:	10801417 	ldw	r2,80(r2)
   11210:	1885883a 	add	r2,r3,r2
   11214:	e0bffc15 	stw	r2,-16(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   11218:	e03ffa15 	stw	zero,-24(fp)
   1121c:	00002c06 	br	112d0 <find_first_empty_record_in_a_subdirectory+0x110>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
   11220:	e0fffa17 	ldw	r3,-24(fp)
   11224:	e0bffc17 	ldw	r2,-16(fp)
   11228:	1885883a 	add	r2,r3,r2
   1122c:	d0e7da17 	ldw	r3,-24728(gp)
   11230:	180b883a 	mov	r5,r3
   11234:	1009883a 	mov	r4,r2
   11238:	000ef600 	call	ef60 <Read_Sector_Data>
   1123c:	10002b26 	beq	r2,zero,112ec <find_first_empty_record_in_a_subdirectory+0x12c>
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
   11240:	e03ffb15 	stw	zero,-20(fp)
   11244:	00001c06 	br	112b8 <find_first_empty_record_in_a_subdirectory+0xf8>
                {
                    unsigned short int leading_char;
                    
                    // Read file record.
                    leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
   11248:	e0bffb17 	ldw	r2,-20(fp)
   1124c:	1004917a 	slli	r2,r2,5
   11250:	1007883a 	mov	r3,r2
   11254:	d0a7dc17 	ldw	r2,-24720(gp)
   11258:	10800a17 	ldw	r2,40(r2)
   1125c:	1885883a 	add	r2,r3,r2
   11260:	10800023 	ldbuio	r2,0(r2)
   11264:	10803fcc 	andi	r2,r2,255
   11268:	10803fcc 	andi	r2,r2,255
   1126c:	e0bffd0d 	sth	r2,-12(fp)
                    if ((leading_char == 0x00e5) || (leading_char == 0))
   11270:	e0bffd0b 	ldhu	r2,-12(fp)
   11274:	10803960 	cmpeqi	r2,r2,229
   11278:	1000021e 	bne	r2,zero,11284 <find_first_empty_record_in_a_subdirectory+0xc4>
   1127c:	e0bffd0b 	ldhu	r2,-12(fp)
   11280:	10000a1e 	bne	r2,zero,112ac <find_first_empty_record_in_a_subdirectory+0xec>
                    {
                        result = (cluster) | ((sector_index*16 + file_counter) << 16);
   11284:	e0bffa17 	ldw	r2,-24(fp)
   11288:	1006913a 	slli	r3,r2,4
   1128c:	e0bffb17 	ldw	r2,-20(fp)
   11290:	1885883a 	add	r2,r3,r2
   11294:	1006943a 	slli	r3,r2,16
   11298:	e0bff917 	ldw	r2,-28(fp)
   1129c:	1884b03a 	or	r2,r3,r2
   112a0:	e0bff815 	stw	r2,-32(fp)
                        return result;
   112a4:	e0bff817 	ldw	r2,-32(fp)
   112a8:	00005306 	br	113f8 <find_first_empty_record_in_a_subdirectory+0x238>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
   112ac:	e0bffb17 	ldw	r2,-20(fp)
   112b0:	10800044 	addi	r2,r2,1
   112b4:	e0bffb15 	stw	r2,-20(fp)
   112b8:	e0bffb17 	ldw	r2,-20(fp)
   112bc:	10800410 	cmplti	r2,r2,16
   112c0:	103fe11e 	bne	r2,zero,11248 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011248>
    int cluster = start_cluster_index;
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   112c4:	e0bffa17 	ldw	r2,-24(fp)
   112c8:	10800044 	addi	r2,r2,1
   112cc:	e0bffa15 	stw	r2,-24(fp)
   112d0:	008000b4 	movhi	r2,2
   112d4:	10ad3a04 	addi	r2,r2,-19224
   112d8:	10800383 	ldbu	r2,14(r2)
   112dc:	10803fcc 	andi	r2,r2,255
   112e0:	e0fffa17 	ldw	r3,-24(fp)
   112e4:	18bfce16 	blt	r3,r2,11220 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011220>
   112e8:	00000106 	br	112f0 <find_first_empty_record_in_a_subdirectory+0x130>
                    }
                }
            }
            else
            {
                break;
   112ec:	0001883a 	nop
            }
        }
        // If this is the end of the cluster and the file has not been found, then see if there is another cluster
        // that holds data for the current directory.
        if (result < 0)
   112f0:	e0bff817 	ldw	r2,-32(fp)
   112f4:	1000390e 	bge	r2,zero,113dc <find_first_empty_record_in_a_subdirectory+0x21c>
        {
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster))
   112f8:	e0bff917 	ldw	r2,-28(fp)
   112fc:	e0fffd84 	addi	r3,fp,-10
   11300:	180b883a 	mov	r5,r3
   11304:	1009883a 	mov	r4,r2
   11308:	000f0380 	call	f038 <get_cluster_flag>
   1130c:	10003126 	beq	r2,zero,113d4 <find_first_empty_record_in_a_subdirectory+0x214>
			{
                // The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8)
   11310:	e0bffd8b 	ldhu	r2,-10(fp)
   11314:	10bfffcc 	andi	r2,r2,65535
   11318:	10fffe0c 	andi	r3,r2,65528
   1131c:	00bffe14 	movui	r2,65528
   11320:	18802e1e 	bne	r3,r2,113dc <find_first_empty_record_in_a_subdirectory+0x21c>
				{
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
   11324:	e0bffe04 	addi	r2,fp,-8
   11328:	1009883a 	mov	r4,r2
   1132c:	00110140 	call	11014 <find_first_empty_cluster>
   11330:	10002326 	beq	r2,zero,113c0 <find_first_empty_record_in_a_subdirectory+0x200>
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
   11334:	e0bff917 	ldw	r2,-28(fp)
   11338:	e0fffe17 	ldw	r3,-8(fp)
   1133c:	18ffffcc 	andi	r3,r3,65535
   11340:	18e0001c 	xori	r3,r3,32768
   11344:	18e00004 	addi	r3,r3,-32768
   11348:	01800044 	movi	r6,1
   1134c:	180b883a 	mov	r5,r3
   11350:	1009883a 	mov	r4,r2
   11354:	000f0ec0 	call	f0ec <mark_cluster>
   11358:	10001926 	beq	r2,zero,113c0 <find_first_empty_record_in_a_subdirectory+0x200>
   1135c:	e0bffe17 	ldw	r2,-8(fp)
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
   11360:	01800044 	movi	r6,1
   11364:	017fffc4 	movi	r5,-1
   11368:	1009883a 	mov	r4,r2
   1136c:	000f0ec0 	call	f0ec <mark_cluster>
				{
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
   11370:	10001326 	beq	r2,zero,113c0 <find_first_empty_record_in_a_subdirectory+0x200>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
   11374:	e0bff917 	ldw	r2,-28(fp)
   11378:	e0fffe17 	ldw	r3,-8(fp)
   1137c:	18ffffcc 	andi	r3,r3,65535
   11380:	18e0001c 	xori	r3,r3,32768
   11384:	18e00004 	addi	r3,r3,-32768
   11388:	000d883a 	mov	r6,zero
   1138c:	180b883a 	mov	r5,r3
   11390:	1009883a 	mov	r4,r2
   11394:	000f0ec0 	call	f0ec <mark_cluster>
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
   11398:	10000926 	beq	r2,zero,113c0 <find_first_empty_record_in_a_subdirectory+0x200>
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
   1139c:	e0bffe17 	ldw	r2,-8(fp)
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
   113a0:	000d883a 	mov	r6,zero
   113a4:	017fffc4 	movi	r5,-1
   113a8:	1009883a 	mov	r4,r2
   113ac:	000f0ec0 	call	f0ec <mark_cluster>
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
   113b0:	10000326 	beq	r2,zero,113c0 <find_first_empty_record_in_a_subdirectory+0x200>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
						{
							Save_Modified_Sector();
   113b4:	000ef140 	call	ef14 <Save_Modified_Sector>
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;                           
   113b8:	e0bffe17 	ldw	r2,-8(fp)
   113bc:	e0bff815 	stw	r2,-32(fp)
						}
					}
					cluster = (new_cluster & 0x0000fff8);
   113c0:	e0bffd8b 	ldhu	r2,-10(fp)
   113c4:	10bfffcc 	andi	r2,r2,65535
   113c8:	10bffe0c 	andi	r2,r2,65528
   113cc:	e0bff915 	stw	r2,-28(fp)
   113d0:	00000206 	br	113dc <find_first_empty_record_in_a_subdirectory+0x21c>
				}
			}
			else
			{
				// Error encountered.                 
				result = -1;
   113d4:	00bfffc4 	movi	r2,-1
   113d8:	e0bff815 	stw	r2,-32(fp)
			}
        }              
    } while ((cluster < 0x0000fff8) && (result == -1)); 
   113dc:	e0bff917 	ldw	r2,-28(fp)
   113e0:	00fffdd4 	movui	r3,65527
   113e4:	18800316 	blt	r3,r2,113f4 <find_first_empty_record_in_a_subdirectory+0x234>
   113e8:	e0bff817 	ldw	r2,-32(fp)
   113ec:	10bfffe0 	cmpeqi	r2,r2,-1
   113f0:	103f7c1e 	bne	r2,zero,111e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70111e4>
    return result; 
   113f4:	e0bff817 	ldw	r2,-32(fp)
}
   113f8:	e037883a 	mov	sp,fp
   113fc:	dfc00117 	ldw	ra,4(sp)
   11400:	df000017 	ldw	fp,0(sp)
   11404:	dec00204 	addi	sp,sp,8
   11408:	f800283a 	ret

0001140c <find_first_empty_record_in_root_directory>:


int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
   1140c:	defff904 	addi	sp,sp,-28
   11410:	dfc00615 	stw	ra,24(sp)
   11414:	df000515 	stw	fp,20(sp)
   11418:	df000504 	addi	fp,sp,20
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
   1141c:	008000b4 	movhi	r2,2
   11420:	10ad3a04 	addi	r2,r2,-19224
   11424:	1080050b 	ldhu	r2,20(r2)
   11428:	10bfffcc 	andi	r2,r2,65535
   1142c:	1006917a 	slli	r3,r2,5
   11430:	008000b4 	movhi	r2,2
   11434:	10ad3a04 	addi	r2,r2,-19224
   11438:	1080030b 	ldhu	r2,12(r2)
   1143c:	10bfffcc 	andi	r2,r2,65535
   11440:	1885283a 	div	r2,r3,r2
   11444:	e0bffd15 	stw	r2,-12(fp)
    int sector_index;
    int result = -1;
   11448:	00bfffc4 	movi	r2,-1
   1144c:	e0bffe15 	stw	r2,-8(fp)
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   11450:	e03ffb15 	stw	zero,-20(fp)
   11454:	00002d06 	br	1150c <find_first_empty_record_in_root_directory+0x100>
    {
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
   11458:	008000b4 	movhi	r2,2
   1145c:	10ad3a04 	addi	r2,r2,-19224
   11460:	10c01317 	ldw	r3,76(r2)
   11464:	e0bffb17 	ldw	r2,-20(fp)
   11468:	1885883a 	add	r2,r3,r2
   1146c:	1007883a 	mov	r3,r2
   11470:	d0a7da17 	ldw	r2,-24728(gp)
   11474:	100b883a 	mov	r5,r2
   11478:	1809883a 	mov	r4,r3
   1147c:	000ef600 	call	ef60 <Read_Sector_Data>
   11480:	10002626 	beq	r2,zero,1151c <find_first_empty_record_in_root_directory+0x110>
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
   11484:	e03ffc15 	stw	zero,-16(fp)
   11488:	00001a06 	br	114f4 <find_first_empty_record_in_root_directory+0xe8>
            {
                unsigned short int leading_char;
                
                // Read first character of the file record.
                leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
   1148c:	e0bffc17 	ldw	r2,-16(fp)
   11490:	1004917a 	slli	r2,r2,5
   11494:	1007883a 	mov	r3,r2
   11498:	d0a7dc17 	ldw	r2,-24720(gp)
   1149c:	10800a17 	ldw	r2,40(r2)
   114a0:	1885883a 	add	r2,r3,r2
   114a4:	10800023 	ldbuio	r2,0(r2)
   114a8:	10803fcc 	andi	r2,r2,255
   114ac:	10803fcc 	andi	r2,r2,255
   114b0:	e0bfff0d 	sth	r2,-4(fp)
                if ((leading_char == 0x00e5) || (leading_char == 0))
   114b4:	e0bfff0b 	ldhu	r2,-4(fp)
   114b8:	10803960 	cmpeqi	r2,r2,229
   114bc:	1000021e 	bne	r2,zero,114c8 <find_first_empty_record_in_root_directory+0xbc>
   114c0:	e0bfff0b 	ldhu	r2,-4(fp)
   114c4:	1000081e 	bne	r2,zero,114e8 <find_first_empty_record_in_root_directory+0xdc>
                {
                    result = (sector_index*16 + file_counter) << 16;
   114c8:	e0bffb17 	ldw	r2,-20(fp)
   114cc:	1006913a 	slli	r3,r2,4
   114d0:	e0bffc17 	ldw	r2,-16(fp)
   114d4:	1885883a 	add	r2,r3,r2
   114d8:	1004943a 	slli	r2,r2,16
   114dc:	e0bffe15 	stw	r2,-8(fp)
                    return result;
   114e0:	e0bffe17 	ldw	r2,-8(fp)
   114e4:	00000f06 	br	11524 <find_first_empty_record_in_root_directory+0x118>
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
   114e8:	e0bffc17 	ldw	r2,-16(fp)
   114ec:	10800044 	addi	r2,r2,1
   114f0:	e0bffc15 	stw	r2,-16(fp)
   114f4:	e0bffc17 	ldw	r2,-16(fp)
   114f8:	10800410 	cmplti	r2,r2,16
   114fc:	103fe31e 	bne	r2,zero,1148c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701148c>
{
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
    int sector_index;
    int result = -1;
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   11500:	e0bffb17 	ldw	r2,-20(fp)
   11504:	10800044 	addi	r2,r2,1
   11508:	e0bffb15 	stw	r2,-20(fp)
   1150c:	e0fffb17 	ldw	r3,-20(fp)
   11510:	e0bffd17 	ldw	r2,-12(fp)
   11514:	18bfd016 	blt	r3,r2,11458 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011458>
   11518:	00000106 	br	11520 <find_first_empty_record_in_root_directory+0x114>
                }
            }
        }
        else
        {
            break;
   1151c:	0001883a 	nop
        }
    }
    return result;
   11520:	e0bffe17 	ldw	r2,-8(fp)
}
   11524:	e037883a 	mov	sp,fp
   11528:	dfc00117 	ldw	ra,4(sp)
   1152c:	df000017 	ldw	fp,0(sp)
   11530:	dec00204 	addi	sp,sp,8
   11534:	f800283a 	ret

00011538 <convert_filename_to_name_extension>:

void convert_filename_to_name_extension(char *filename, char *name, char *extension)
// This function converts the file name into a name . extension format.
{
   11538:	defffa04 	addi	sp,sp,-24
   1153c:	df000515 	stw	fp,20(sp)
   11540:	df000504 	addi	fp,sp,20
   11544:	e13ffd15 	stw	r4,-12(fp)
   11548:	e17ffe15 	stw	r5,-8(fp)
   1154c:	e1bfff15 	stw	r6,-4(fp)
    int counter;
    int local = 0;
   11550:	e03ffc15 	stw	zero,-16(fp)
    
    for(counter = 0; counter < 8; counter++)
   11554:	e03ffb15 	stw	zero,-20(fp)
   11558:	00002506 	br	115f0 <convert_filename_to_name_extension+0xb8>
    {
        if (filename[local] != '.')
   1155c:	e0bffc17 	ldw	r2,-16(fp)
   11560:	e0fffd17 	ldw	r3,-12(fp)
   11564:	1885883a 	add	r2,r3,r2
   11568:	10800003 	ldbu	r2,0(r2)
   1156c:	10803fcc 	andi	r2,r2,255
   11570:	1080201c 	xori	r2,r2,128
   11574:	10bfe004 	addi	r2,r2,-128
   11578:	10800ba0 	cmpeqi	r2,r2,46
   1157c:	1000141e 	bne	r2,zero,115d0 <convert_filename_to_name_extension+0x98>
        {
            name[counter] = filename[local];
   11580:	e0bffb17 	ldw	r2,-20(fp)
   11584:	e0fffe17 	ldw	r3,-8(fp)
   11588:	1885883a 	add	r2,r3,r2
   1158c:	e0fffc17 	ldw	r3,-16(fp)
   11590:	e13ffd17 	ldw	r4,-12(fp)
   11594:	20c7883a 	add	r3,r4,r3
   11598:	18c00003 	ldbu	r3,0(r3)
   1159c:	10c00005 	stb	r3,0(r2)
            if (filename[local] != 0) local++;
   115a0:	e0bffc17 	ldw	r2,-16(fp)
   115a4:	e0fffd17 	ldw	r3,-12(fp)
   115a8:	1885883a 	add	r2,r3,r2
   115ac:	10800003 	ldbu	r2,0(r2)
   115b0:	10803fcc 	andi	r2,r2,255
   115b4:	1080201c 	xori	r2,r2,128
   115b8:	10bfe004 	addi	r2,r2,-128
   115bc:	10000926 	beq	r2,zero,115e4 <convert_filename_to_name_extension+0xac>
   115c0:	e0bffc17 	ldw	r2,-16(fp)
   115c4:	10800044 	addi	r2,r2,1
   115c8:	e0bffc15 	stw	r2,-16(fp)
   115cc:	00000506 	br	115e4 <convert_filename_to_name_extension+0xac>
        }
        else
        {
            name[counter] = ' ';
   115d0:	e0bffb17 	ldw	r2,-20(fp)
   115d4:	e0fffe17 	ldw	r3,-8(fp)
   115d8:	1885883a 	add	r2,r3,r2
   115dc:	00c00804 	movi	r3,32
   115e0:	10c00005 	stb	r3,0(r2)
// This function converts the file name into a name . extension format.
{
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
   115e4:	e0bffb17 	ldw	r2,-20(fp)
   115e8:	10800044 	addi	r2,r2,1
   115ec:	e0bffb15 	stw	r2,-20(fp)
   115f0:	e0bffb17 	ldw	r2,-20(fp)
   115f4:	10800210 	cmplti	r2,r2,8
   115f8:	103fd81e 	bne	r2,zero,1155c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701155c>
        else
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
   115fc:	e0bffc17 	ldw	r2,-16(fp)
   11600:	e0fffd17 	ldw	r3,-12(fp)
   11604:	1885883a 	add	r2,r3,r2
   11608:	10800003 	ldbu	r2,0(r2)
   1160c:	10803fcc 	andi	r2,r2,255
   11610:	1080201c 	xori	r2,r2,128
   11614:	10bfe004 	addi	r2,r2,-128
   11618:	10800b98 	cmpnei	r2,r2,46
   1161c:	1000031e 	bne	r2,zero,1162c <convert_filename_to_name_extension+0xf4>
   11620:	e0bffc17 	ldw	r2,-16(fp)
   11624:	10800044 	addi	r2,r2,1
   11628:	e0bffc15 	stw	r2,-16(fp)
    for(counter = 0; counter < 3; counter++)
   1162c:	e03ffb15 	stw	zero,-20(fp)
   11630:	00001c06 	br	116a4 <convert_filename_to_name_extension+0x16c>
    {
        if (filename[local] != 0)
   11634:	e0bffc17 	ldw	r2,-16(fp)
   11638:	e0fffd17 	ldw	r3,-12(fp)
   1163c:	1885883a 	add	r2,r3,r2
   11640:	10800003 	ldbu	r2,0(r2)
   11644:	10803fcc 	andi	r2,r2,255
   11648:	1080201c 	xori	r2,r2,128
   1164c:	10bfe004 	addi	r2,r2,-128
   11650:	10000c26 	beq	r2,zero,11684 <convert_filename_to_name_extension+0x14c>
        {
            extension[counter] = filename[local];
   11654:	e0bffb17 	ldw	r2,-20(fp)
   11658:	e0ffff17 	ldw	r3,-4(fp)
   1165c:	1885883a 	add	r2,r3,r2
   11660:	e0fffc17 	ldw	r3,-16(fp)
   11664:	e13ffd17 	ldw	r4,-12(fp)
   11668:	20c7883a 	add	r3,r4,r3
   1166c:	18c00003 	ldbu	r3,0(r3)
   11670:	10c00005 	stb	r3,0(r2)
            local++;
   11674:	e0bffc17 	ldw	r2,-16(fp)
   11678:	10800044 	addi	r2,r2,1
   1167c:	e0bffc15 	stw	r2,-16(fp)
   11680:	00000506 	br	11698 <convert_filename_to_name_extension+0x160>
        }
        else
        {
            extension[counter] = ' ';
   11684:	e0bffb17 	ldw	r2,-20(fp)
   11688:	e0ffff17 	ldw	r3,-4(fp)
   1168c:	1885883a 	add	r2,r3,r2
   11690:	00c00804 	movi	r3,32
   11694:	10c00005 	stb	r3,0(r2)
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
   11698:	e0bffb17 	ldw	r2,-20(fp)
   1169c:	10800044 	addi	r2,r2,1
   116a0:	e0bffb15 	stw	r2,-20(fp)
   116a4:	e0bffb17 	ldw	r2,-20(fp)
   116a8:	108000d0 	cmplti	r2,r2,3
   116ac:	103fe11e 	bne	r2,zero,11634 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011634>
        {
            extension[counter] = ' ';
        }
    }

}
   116b0:	0001883a 	nop
   116b4:	e037883a 	mov	sp,fp
   116b8:	df000017 	ldw	fp,0(sp)
   116bc:	dec00104 	addi	sp,sp,4
   116c0:	f800283a 	ret

000116c4 <create_file>:

bool create_file(char *name, t_file_record *file_record, t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
   116c4:	defff504 	addi	sp,sp,-44
   116c8:	dfc00a15 	stw	ra,40(sp)
   116cc:	df000915 	stw	fp,36(sp)
   116d0:	df000904 	addi	fp,sp,36
   116d4:	e13ffd15 	stw	r4,-12(fp)
   116d8:	e17ffe15 	stw	r5,-8(fp)
   116dc:	e1bfff15 	stw	r6,-4(fp)
    unsigned int cluster_number;
    bool result = false;
   116e0:	e03ff715 	stw	zero,-36(fp)
    
    if (find_first_empty_cluster(&cluster_number))
   116e4:	e0bffc04 	addi	r2,fp,-16
   116e8:	1009883a 	mov	r4,r2
   116ec:	00110140 	call	11014 <find_first_empty_cluster>
   116f0:	1000a026 	beq	r2,zero,11974 <create_file+0x2b0>
    {
        int record_index;
        
        if (home_dir->file_record_cluster == 0)
   116f4:	e0bfff17 	ldw	r2,-4(fp)
   116f8:	10800a17 	ldw	r2,40(r2)
   116fc:	1000031e 	bne	r2,zero,1170c <create_file+0x48>
        {
            // Put a file in the root directory.
            record_index = find_first_empty_record_in_root_directory();
   11700:	001140c0 	call	1140c <find_first_empty_record_in_root_directory>
   11704:	e0bff815 	stw	r2,-32(fp)
   11708:	00000606 	br	11724 <create_file+0x60>
        }
        else
        {
            // Put a file in a subdirectory.
            record_index = find_first_empty_record_in_a_subdirectory(home_dir->start_cluster_index);           
   1170c:	e0bfff17 	ldw	r2,-4(fp)
   11710:	1080058b 	ldhu	r2,22(r2)
   11714:	10bfffcc 	andi	r2,r2,65535
   11718:	1009883a 	mov	r4,r2
   1171c:	00111c00 	call	111c0 <find_first_empty_record_in_a_subdirectory>
   11720:	e0bff815 	stw	r2,-32(fp)
        }
        if (record_index >= 0)
   11724:	e0bff817 	ldw	r2,-32(fp)
   11728:	10009216 	blt	r2,zero,11974 <create_file+0x2b0>
        {   
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
   1172c:	e13ffd17 	ldw	r4,-12(fp)
   11730:	00103140 	call	10314 <get_dir_divider_location>
   11734:	e0bff915 	stw	r2,-28(fp)
            int last_dir_separator = 0;
   11738:	e03ffa15 	stw	zero,-24(fp)

            // Skip through all directory separators.
            while (location > 0)
   1173c:	00000b06 	br	1176c <create_file+0xa8>
            {
                last_dir_separator = last_dir_separator+location+1;
   11740:	e0fffa17 	ldw	r3,-24(fp)
   11744:	e0bff917 	ldw	r2,-28(fp)
   11748:	1885883a 	add	r2,r3,r2
   1174c:	10800044 	addi	r2,r2,1
   11750:	e0bffa15 	stw	r2,-24(fp)
                location = get_dir_divider_location( &(name[last_dir_separator]) );
   11754:	e0bffa17 	ldw	r2,-24(fp)
   11758:	e0fffd17 	ldw	r3,-12(fp)
   1175c:	1885883a 	add	r2,r3,r2
   11760:	1009883a 	mov	r4,r2
   11764:	00103140 	call	10314 <get_dir_divider_location>
   11768:	e0bff915 	stw	r2,-28(fp)
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
            int last_dir_separator = 0;

            // Skip through all directory separators.
            while (location > 0)
   1176c:	e0bff917 	ldw	r2,-28(fp)
   11770:	00bff316 	blt	zero,r2,11740 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011740>
            {
                last_dir_separator = last_dir_separator+location+1;
                location = get_dir_divider_location( &(name[last_dir_separator]) );
            }
            
            convert_filename_to_name_extension(&(name[last_dir_separator]), (char *)file_record->name, (char *)file_record->extension);
   11774:	e0bffa17 	ldw	r2,-24(fp)
   11778:	e0fffd17 	ldw	r3,-12(fp)
   1177c:	1887883a 	add	r3,r3,r2
   11780:	e13ffe17 	ldw	r4,-8(fp)
   11784:	e0bffe17 	ldw	r2,-8(fp)
   11788:	10800204 	addi	r2,r2,8
   1178c:	100d883a 	mov	r6,r2
   11790:	200b883a 	mov	r5,r4
   11794:	1809883a 	mov	r4,r3
   11798:	00115380 	call	11538 <convert_filename_to_name_extension>
                         
            file_record->attributes = 0;
   1179c:	e0bffe17 	ldw	r2,-8(fp)
   117a0:	100002c5 	stb	zero,11(r2)
            file_record->create_time = 0;
   117a4:	e0bffe17 	ldw	r2,-8(fp)
   117a8:	1000030d 	sth	zero,12(r2)
            file_record->create_date = 0;
   117ac:	e0bffe17 	ldw	r2,-8(fp)
   117b0:	1000038d 	sth	zero,14(r2)
            file_record->last_access_date = 0;
   117b4:	e0bffe17 	ldw	r2,-8(fp)
   117b8:	1000040d 	sth	zero,16(r2)
            file_record->last_modified_time = 0;
   117bc:	e0bffe17 	ldw	r2,-8(fp)
   117c0:	1000048d 	sth	zero,18(r2)
            file_record->last_modified_date = 0;
   117c4:	e0bffe17 	ldw	r2,-8(fp)
   117c8:	1000050d 	sth	zero,20(r2)
            file_record->start_cluster_index = cluster_number;
   117cc:	e0bffc17 	ldw	r2,-16(fp)
   117d0:	1007883a 	mov	r3,r2
   117d4:	e0bffe17 	ldw	r2,-8(fp)
   117d8:	10c0058d 	sth	r3,22(r2)
            file_record->file_size_in_bytes = 0;
   117dc:	e0bffe17 	ldw	r2,-8(fp)
   117e0:	10000615 	stw	zero,24(r2)
            file_record->current_cluster_index = cluster_number;
   117e4:	e0fffc17 	ldw	r3,-16(fp)
   117e8:	e0bffe17 	ldw	r2,-8(fp)
   117ec:	10c00715 	stw	r3,28(r2)
            file_record->current_sector_in_cluster = 0;
   117f0:	e0bffe17 	ldw	r2,-8(fp)
   117f4:	10000815 	stw	zero,32(r2)
            file_record->current_byte_position = 0;
   117f8:	e0bffe17 	ldw	r2,-8(fp)
   117fc:	10000915 	stw	zero,36(r2)
            file_record->file_record_cluster = record_index & 0x0000ffff;
   11800:	e0bff817 	ldw	r2,-32(fp)
   11804:	10ffffcc 	andi	r3,r2,65535
   11808:	e0bffe17 	ldw	r2,-8(fp)
   1180c:	10c00a15 	stw	r3,40(r2)
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
   11810:	e0bff817 	ldw	r2,-32(fp)
   11814:	1004d43a 	srli	r2,r2,16
   11818:	1000010e 	bge	r2,zero,11820 <create_file+0x15c>
   1181c:	108003c4 	addi	r2,r2,15
   11820:	1005d13a 	srai	r2,r2,4
   11824:	1007883a 	mov	r3,r2
   11828:	e0bffe17 	ldw	r2,-8(fp)
   1182c:	10c00b15 	stw	r3,44(r2)
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
   11830:	e0bff817 	ldw	r2,-32(fp)
   11834:	1004d43a 	srli	r2,r2,16
   11838:	1007883a 	mov	r3,r2
   1183c:	00a00034 	movhi	r2,32768
   11840:	108003c4 	addi	r2,r2,15
   11844:	1884703a 	and	r2,r3,r2
   11848:	1000040e 	bge	r2,zero,1185c <create_file+0x198>
   1184c:	10bfffc4 	addi	r2,r2,-1
   11850:	00fffc04 	movi	r3,-16
   11854:	10c4b03a 	or	r2,r2,r3
   11858:	10800044 	addi	r2,r2,1
   1185c:	1004917a 	slli	r2,r2,5
   11860:	1007883a 	mov	r3,r2
   11864:	e0bffe17 	ldw	r2,-8(fp)
   11868:	10c00c0d 	sth	r3,48(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
   1186c:	e0bfff17 	ldw	r2,-4(fp)
   11870:	1080058b 	ldhu	r2,22(r2)
   11874:	10ffffcc 	andi	r3,r2,65535
   11878:	e0bffe17 	ldw	r2,-8(fp)
   1187c:	10c00d15 	stw	r3,52(r2)
            file_record->in_use = true;
   11880:	e0bffe17 	ldw	r2,-8(fp)
   11884:	00c00044 	movi	r3,1
   11888:	10c00f15 	stw	r3,60(r2)
            file_record->modified = true;
   1188c:	e0bffe17 	ldw	r2,-8(fp)
   11890:	00c00044 	movi	r3,1
   11894:	10c00e15 	stw	r3,56(r2)
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
   11898:	e0bffe17 	ldw	r2,-8(fp)
   1189c:	10800a17 	ldw	r2,40(r2)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
   118a0:	1000071e 	bne	r2,zero,118c0 <create_file+0x1fc>
   118a4:	008000b4 	movhi	r2,2
   118a8:	10ad3a04 	addi	r2,r2,-19224
   118ac:	10c01317 	ldw	r3,76(r2)
   118b0:	e0bffe17 	ldw	r2,-8(fp)
   118b4:	10800b17 	ldw	r2,44(r2)
   118b8:	1885883a 	add	r2,r3,r2
   118bc:	00000f06 	br	118fc <create_file+0x238>
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
   118c0:	008000b4 	movhi	r2,2
   118c4:	10ad3a04 	addi	r2,r2,-19224
   118c8:	10c01417 	ldw	r3,80(r2)
   118cc:	e0bffe17 	ldw	r2,-8(fp)
   118d0:	10800a17 	ldw	r2,40(r2)
   118d4:	113fff84 	addi	r4,r2,-2
   118d8:	008000b4 	movhi	r2,2
   118dc:	10ad3a04 	addi	r2,r2,-19224
   118e0:	10800383 	ldbu	r2,14(r2)
   118e4:	10803fcc 	andi	r2,r2,255
   118e8:	2085383a 	mul	r2,r4,r2
   118ec:	1887883a 	add	r3,r3,r2
                                     file_record->file_record_sector_in_cluster);
   118f0:	e0bffe17 	ldw	r2,-8(fp)
   118f4:	10800b17 	ldw	r2,44(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
   118f8:	1885883a 	add	r2,r3,r2
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
   118fc:	e0bffb15 	stw	r2,-20(fp)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
                                     file_record->file_record_sector_in_cluster);

			if (Read_Sector_Data(file_record_sector, fat_partition_offset_in_512_byte_sectors))
   11900:	e0bffb17 	ldw	r2,-20(fp)
   11904:	d0e7da17 	ldw	r3,-24728(gp)
   11908:	180b883a 	mov	r5,r3
   1190c:	1009883a 	mov	r4,r2
   11910:	000ef600 	call	ef60 <Read_Sector_Data>
   11914:	10001726 	beq	r2,zero,11974 <create_file+0x2b0>
            {
                if (Write_File_Record_At_Offset(file_record->file_record_offset, file_record))
   11918:	e0bffe17 	ldw	r2,-8(fp)
   1191c:	10800c0b 	ldhu	r2,48(r2)
   11920:	10bfffcc 	andi	r2,r2,65535
   11924:	10a0001c 	xori	r2,r2,32768
   11928:	10a00004 	addi	r2,r2,-32768
   1192c:	e17ffe17 	ldw	r5,-8(fp)
   11930:	1009883a 	mov	r4,r2
   11934:	000f5ec0 	call	f5ec <Write_File_Record_At_Offset>
   11938:	10000e26 	beq	r2,zero,11974 <create_file+0x2b0>
                {
                    Save_Modified_Sector();
   1193c:	000ef140 	call	ef14 <Save_Modified_Sector>
                    // Mark the first cluster of the file as the last cluster at first.
                    mark_cluster(cluster_number, ((short int) (0xffff)), true);
   11940:	e0bffc17 	ldw	r2,-16(fp)
   11944:	01800044 	movi	r6,1
   11948:	017fffc4 	movi	r5,-1
   1194c:	1009883a 	mov	r4,r2
   11950:	000f0ec0 	call	f0ec <mark_cluster>
                    if (mark_cluster(cluster_number, ((short int) (0xffff)), false))
   11954:	e0bffc17 	ldw	r2,-16(fp)
   11958:	000d883a 	mov	r6,zero
   1195c:	017fffc4 	movi	r5,-1
   11960:	1009883a 	mov	r4,r2
   11964:	000f0ec0 	call	f0ec <mark_cluster>
   11968:	10000226 	beq	r2,zero,11974 <create_file+0x2b0>
                    {
                        result = true;
   1196c:	00800044 	movi	r2,1
   11970:	e0bff715 	stw	r2,-36(fp)
                }
            }
        }

    }
    return result;           
   11974:	e0bff717 	ldw	r2,-36(fp)
}
   11978:	e037883a 	mov	sp,fp
   1197c:	dfc00117 	ldw	ra,4(sp)
   11980:	df000017 	ldw	fp,0(sp)
   11984:	dec00204 	addi	sp,sp,8
   11988:	f800283a 	ret

0001198c <copy_file_record_name_to_string>:


void copy_file_record_name_to_string(t_file_record *file_record, char *file_name)
/* Copy a file name from the file record to a given string */
{
   1198c:	defffb04 	addi	sp,sp,-20
   11990:	df000415 	stw	fp,16(sp)
   11994:	df000404 	addi	fp,sp,16
   11998:	e13ffe15 	stw	r4,-8(fp)
   1199c:	e17fff15 	stw	r5,-4(fp)
	int index;
	int flength = 0;
   119a0:	e03ffd15 	stw	zero,-12(fp)

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
   119a4:	e03ffc15 	stw	zero,-16(fp)
   119a8:	00001506 	br	11a00 <copy_file_record_name_to_string+0x74>
	{
		if (file_record->name[index] != ' ')
   119ac:	e0fffe17 	ldw	r3,-8(fp)
   119b0:	e0bffc17 	ldw	r2,-16(fp)
   119b4:	1885883a 	add	r2,r3,r2
   119b8:	10800003 	ldbu	r2,0(r2)
   119bc:	10803fcc 	andi	r2,r2,255
   119c0:	10800820 	cmpeqi	r2,r2,32
   119c4:	10000b1e 	bne	r2,zero,119f4 <copy_file_record_name_to_string+0x68>
		{
			file_name[flength] = file_record->name[index];
   119c8:	e0bffd17 	ldw	r2,-12(fp)
   119cc:	e0ffff17 	ldw	r3,-4(fp)
   119d0:	1885883a 	add	r2,r3,r2
   119d4:	e13ffe17 	ldw	r4,-8(fp)
   119d8:	e0fffc17 	ldw	r3,-16(fp)
   119dc:	20c7883a 	add	r3,r4,r3
   119e0:	18c00003 	ldbu	r3,0(r3)
   119e4:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
   119e8:	e0bffd17 	ldw	r2,-12(fp)
   119ec:	10800044 	addi	r2,r2,1
   119f0:	e0bffd15 	stw	r2,-12(fp)
{
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
   119f4:	e0bffc17 	ldw	r2,-16(fp)
   119f8:	10800044 	addi	r2,r2,1
   119fc:	e0bffc15 	stw	r2,-16(fp)
   11a00:	e0bffc17 	ldw	r2,-16(fp)
   11a04:	10800210 	cmplti	r2,r2,8
   11a08:	103fe81e 	bne	r2,zero,119ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70119ac>
		{
			file_name[flength] = file_record->name[index];
			flength = flength + 1;
		}
	}
	if (file_record->extension[0] != ' ')
   11a0c:	e0bffe17 	ldw	r2,-8(fp)
   11a10:	10800203 	ldbu	r2,8(r2)
   11a14:	10803fcc 	andi	r2,r2,255
   11a18:	10800820 	cmpeqi	r2,r2,32
   11a1c:	1000241e 	bne	r2,zero,11ab0 <copy_file_record_name_to_string+0x124>
	{
		file_name[flength] = '.';
   11a20:	e0bffd17 	ldw	r2,-12(fp)
   11a24:	e0ffff17 	ldw	r3,-4(fp)
   11a28:	1885883a 	add	r2,r3,r2
   11a2c:	00c00b84 	movi	r3,46
   11a30:	10c00005 	stb	r3,0(r2)
		flength = flength + 1;
   11a34:	e0bffd17 	ldw	r2,-12(fp)
   11a38:	10800044 	addi	r2,r2,1
   11a3c:	e0bffd15 	stw	r2,-12(fp)
		for (index = 0; index < 3; index++)
   11a40:	e03ffc15 	stw	zero,-16(fp)
   11a44:	00001706 	br	11aa4 <copy_file_record_name_to_string+0x118>
		{
			if (file_record->extension[index] != ' ')
   11a48:	e0fffe17 	ldw	r3,-8(fp)
   11a4c:	e0bffc17 	ldw	r2,-16(fp)
   11a50:	1885883a 	add	r2,r3,r2
   11a54:	10800204 	addi	r2,r2,8
   11a58:	10800003 	ldbu	r2,0(r2)
   11a5c:	10803fcc 	andi	r2,r2,255
   11a60:	10800820 	cmpeqi	r2,r2,32
   11a64:	10000c1e 	bne	r2,zero,11a98 <copy_file_record_name_to_string+0x10c>
			{
				file_name[flength] = file_record->extension[index];
   11a68:	e0bffd17 	ldw	r2,-12(fp)
   11a6c:	e0ffff17 	ldw	r3,-4(fp)
   11a70:	1885883a 	add	r2,r3,r2
   11a74:	e13ffe17 	ldw	r4,-8(fp)
   11a78:	e0fffc17 	ldw	r3,-16(fp)
   11a7c:	20c7883a 	add	r3,r4,r3
   11a80:	18c00204 	addi	r3,r3,8
   11a84:	18c00003 	ldbu	r3,0(r3)
   11a88:	10c00005 	stb	r3,0(r2)
				flength = flength + 1;
   11a8c:	e0bffd17 	ldw	r2,-12(fp)
   11a90:	10800044 	addi	r2,r2,1
   11a94:	e0bffd15 	stw	r2,-12(fp)
	}
	if (file_record->extension[0] != ' ')
	{
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++)
   11a98:	e0bffc17 	ldw	r2,-16(fp)
   11a9c:	10800044 	addi	r2,r2,1
   11aa0:	e0bffc15 	stw	r2,-16(fp)
   11aa4:	e0bffc17 	ldw	r2,-16(fp)
   11aa8:	108000d0 	cmplti	r2,r2,3
   11aac:	103fe61e 	bne	r2,zero,11a48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011a48>
				file_name[flength] = file_record->extension[index];
				flength = flength + 1;
			}
		}
	}
	file_name[flength] = 0;
   11ab0:	e0bffd17 	ldw	r2,-12(fp)
   11ab4:	e0ffff17 	ldw	r3,-4(fp)
   11ab8:	1885883a 	add	r2,r3,r2
   11abc:	10000005 	stb	zero,0(r2)
}
   11ac0:	0001883a 	nop
   11ac4:	e037883a 	mov	sp,fp
   11ac8:	df000017 	ldw	fp,0(sp)
   11acc:	dec00104 	addi	sp,sp,4
   11ad0:	f800283a 	ret

00011ad4 <alt_up_sd_card_open_dev>:
// Direct functions
///////////////////////////////////////////////////////////////////////////


alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name)
{
   11ad4:	defffc04 	addi	sp,sp,-16
   11ad8:	dfc00315 	stw	ra,12(sp)
   11adc:	df000215 	stw	fp,8(sp)
   11ae0:	df000204 	addi	fp,sp,8
   11ae4:	e13fff15 	stw	r4,-4(fp)
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name, &alt_dev_list);
   11ae8:	d1600804 	addi	r5,gp,-32736
   11aec:	e13fff17 	ldw	r4,-4(fp)
   11af0:	00160d80 	call	160d8 <alt_find_dev>
   11af4:	e0bffe15 	stw	r2,-8(fp)

	if (dev != NULL)
   11af8:	e0bffe17 	ldw	r2,-8(fp)
   11afc:	10001e26 	beq	r2,zero,11b78 <alt_up_sd_card_open_dev+0xa4>
	{
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
   11b00:	e0bffe17 	ldw	r2,-8(fp)
   11b04:	10800a17 	ldw	r2,40(r2)
   11b08:	10808d04 	addi	r2,r2,564
   11b0c:	d0a7d415 	stw	r2,-24752(gp)
		status_register = ((int *) SD_CARD_STATUS(dev->base));
   11b10:	e0bffe17 	ldw	r2,-8(fp)
   11b14:	10800a17 	ldw	r2,40(r2)
   11b18:	10808904 	addi	r2,r2,548
   11b1c:	d0a7d515 	stw	r2,-24748(gp)
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
   11b20:	e0bffe17 	ldw	r2,-8(fp)
   11b24:	10800a17 	ldw	r2,40(r2)
   11b28:	10808404 	addi	r2,r2,528
   11b2c:	d0a7d615 	stw	r2,-24744(gp)
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
   11b30:	e0bffe17 	ldw	r2,-8(fp)
   11b34:	10800a17 	ldw	r2,40(r2)
   11b38:	10808c04 	addi	r2,r2,560
   11b3c:	d0a7d715 	stw	r2,-24740(gp)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
   11b40:	e0bffe17 	ldw	r2,-8(fp)
   11b44:	10800a17 	ldw	r2,40(r2)
   11b48:	10808b04 	addi	r2,r2,556
   11b4c:	d0a7d815 	stw	r2,-24736(gp)
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
   11b50:	e0bffe17 	ldw	r2,-8(fp)
   11b54:	10800a17 	ldw	r2,40(r2)
   11b58:	d0a7d915 	stw	r2,-24732(gp)
		device_pointer = dev;
   11b5c:	e0bffe17 	ldw	r2,-8(fp)
   11b60:	d0a7dc15 	stw	r2,-24720(gp)
		initialized = false;
   11b64:	d027d215 	stw	zero,-24760(gp)
		is_sd_card_formated_as_FAT16 = false;
   11b68:	d027d315 	stw	zero,-24756(gp)
		search_data.valid = false;
   11b6c:	008000b4 	movhi	r2,2
   11b70:	10ad3504 	addi	r2,r2,-19244
   11b74:	10000415 	stw	zero,16(r2)
	}
	return dev;
   11b78:	e0bffe17 	ldw	r2,-8(fp)
}
   11b7c:	e037883a 	mov	sp,fp
   11b80:	dfc00117 	ldw	ra,4(sp)
   11b84:	df000017 	ldw	fp,0(sp)
   11b88:	dec00204 	addi	sp,sp,8
   11b8c:	f800283a 	ret

00011b90 <alt_up_sd_card_is_Present>:


bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
   11b90:	defffd04 	addi	sp,sp,-12
   11b94:	df000215 	stw	fp,8(sp)
   11b98:	df000204 	addi	fp,sp,8
    bool result = false;
   11b9c:	e03ffe15 	stw	zero,-8(fp)

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
   11ba0:	d0a7dc17 	ldw	r2,-24720(gp)
   11ba4:	10000826 	beq	r2,zero,11bc8 <alt_up_sd_card_is_Present+0x38>
   11ba8:	d0a7d417 	ldw	r2,-24752(gp)
   11bac:	1080002b 	ldhuio	r2,0(r2)
   11bb0:	10bfffcc 	andi	r2,r2,65535
   11bb4:	1080008c 	andi	r2,r2,2
   11bb8:	10000326 	beq	r2,zero,11bc8 <alt_up_sd_card_is_Present+0x38>
    {
        result = true;
   11bbc:	00800044 	movi	r2,1
   11bc0:	e0bffe15 	stw	r2,-8(fp)
   11bc4:	00001e06 	br	11c40 <alt_up_sd_card_is_Present+0xb0>
    }
	else if (initialized == true)
   11bc8:	d0a7d217 	ldw	r2,-24760(gp)
   11bcc:	10800058 	cmpnei	r2,r2,1
   11bd0:	10001b1e 	bne	r2,zero,11c40 <alt_up_sd_card_is_Present+0xb0>
	{
		int index;

		initialized = false;
   11bd4:	d027d215 	stw	zero,-24760(gp)
		search_data.valid = false;
   11bd8:	008000b4 	movhi	r2,2
   11bdc:	10ad3504 	addi	r2,r2,-19244
   11be0:	10000415 	stw	zero,16(r2)
		is_sd_card_formated_as_FAT16 = false;
   11be4:	d027d315 	stw	zero,-24756(gp)

		for(index = 0; index < MAX_FILES_OPENED; index++)
   11be8:	e03fff15 	stw	zero,-4(fp)
   11bec:	00001106 	br	11c34 <alt_up_sd_card_is_Present+0xa4>
		{
			active_files[index].in_use = false;
   11bf0:	008000b4 	movhi	r2,2
   11bf4:	10ad4f04 	addi	r2,r2,-19140
   11bf8:	e0ffff17 	ldw	r3,-4(fp)
   11bfc:	180691ba 	slli	r3,r3,6
   11c00:	10c5883a 	add	r2,r2,r3
   11c04:	10800f04 	addi	r2,r2,60
   11c08:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
   11c0c:	008000b4 	movhi	r2,2
   11c10:	10ad4f04 	addi	r2,r2,-19140
   11c14:	e0ffff17 	ldw	r3,-4(fp)
   11c18:	180691ba 	slli	r3,r3,6
   11c1c:	10c5883a 	add	r2,r2,r3
   11c20:	10800e04 	addi	r2,r2,56
   11c24:	10000015 	stw	zero,0(r2)

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
   11c28:	e0bfff17 	ldw	r2,-4(fp)
   11c2c:	10800044 	addi	r2,r2,1
   11c30:	e0bfff15 	stw	r2,-4(fp)
   11c34:	e0bfff17 	ldw	r2,-4(fp)
   11c38:	10800510 	cmplti	r2,r2,20
   11c3c:	103fec1e 	bne	r2,zero,11bf0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011bf0>
		{
			active_files[index].in_use = false;
			active_files[index].modified = false;
		}
	}
    return result;
   11c40:	e0bffe17 	ldw	r2,-8(fp)
}
   11c44:	e037883a 	mov	sp,fp
   11c48:	df000017 	ldw	fp,0(sp)
   11c4c:	dec00104 	addi	sp,sp,4
   11c50:	f800283a 	ret

00011c54 <alt_up_sd_card_is_FAT16>:
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
   11c54:	defffd04 	addi	sp,sp,-12
   11c58:	dfc00215 	stw	ra,8(sp)
   11c5c:	df000115 	stw	fp,4(sp)
   11c60:	df000104 	addi	fp,sp,4
	bool result = false;
   11c64:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present())
   11c68:	0011b900 	call	11b90 <alt_up_sd_card_is_Present>
   11c6c:	10000c26 	beq	r2,zero,11ca0 <alt_up_sd_card_is_FAT16+0x4c>
	{
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false)
   11c70:	d0a7d217 	ldw	r2,-24760(gp)
   11c74:	1000071e 	bne	r2,zero,11c94 <alt_up_sd_card_is_FAT16+0x40>
		{
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
   11c78:	000fef80 	call	fef8 <Look_for_FAT16>
   11c7c:	d0a7d315 	stw	r2,-24756(gp)
			initialized = is_sd_card_formated_as_FAT16;
   11c80:	d0a7d317 	ldw	r2,-24756(gp)
   11c84:	d0a7d215 	stw	r2,-24760(gp)
			search_data.valid = false;
   11c88:	008000b4 	movhi	r2,2
   11c8c:	10ad3504 	addi	r2,r2,-19244
   11c90:	10000415 	stw	zero,16(r2)
		}
		result = is_sd_card_formated_as_FAT16;
   11c94:	d0a7d317 	ldw	r2,-24756(gp)
   11c98:	e0bfff15 	stw	r2,-4(fp)
   11c9c:	00000206 	br	11ca8 <alt_up_sd_card_is_FAT16+0x54>
	}
	else
	{
		// If not then you may as well not open the device.
		initialized = false;
   11ca0:	d027d215 	stw	zero,-24760(gp)
		is_sd_card_formated_as_FAT16 = false;
   11ca4:	d027d315 	stw	zero,-24756(gp)
	}

	return result;
   11ca8:	e0bfff17 	ldw	r2,-4(fp)
}
   11cac:	e037883a 	mov	sp,fp
   11cb0:	dfc00117 	ldw	ra,4(sp)
   11cb4:	df000017 	ldw	fp,0(sp)
   11cb8:	dec00204 	addi	sp,sp,8
   11cbc:	f800283a 	ret

00011cc0 <alt_up_sd_card_find_first>:
 * "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
   11cc0:	deffea04 	addi	sp,sp,-88
   11cc4:	dfc01515 	stw	ra,84(sp)
   11cc8:	df001415 	stw	fp,80(sp)
   11ccc:	df001404 	addi	fp,sp,80
   11cd0:	e13ffe15 	stw	r4,-8(fp)
   11cd4:	e17fff15 	stw	r5,-4(fp)
	short int result = 2;
   11cd8:	00800084 	movi	r2,2
   11cdc:	e0bfec0d 	sth	r2,-80(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   11ce0:	0011b900 	call	11b90 <alt_up_sd_card_is_Present>
   11ce4:	10002426 	beq	r2,zero,11d78 <alt_up_sd_card_find_first+0xb8>
   11ce8:	d0a7d317 	ldw	r2,-24756(gp)
   11cec:	10002226 	beq	r2,zero,11d78 <alt_up_sd_card_find_first+0xb8>
	{
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through, &home_directory_cluster, &file_record))
   11cf0:	e0ffee04 	addi	r3,fp,-72
   11cf4:	e0bfed04 	addi	r2,fp,-76
   11cf8:	180d883a 	mov	r6,r3
   11cfc:	100b883a 	mov	r5,r2
   11d00:	e13ffe17 	ldw	r4,-8(fp)
   11d04:	00106680 	call	10668 <get_home_directory_cluster_for_file>
   11d08:	10001926 	beq	r2,zero,11d70 <alt_up_sd_card_find_first+0xb0>
		{
			search_data.directory_root_cluster = home_directory_cluster;
   11d0c:	e0bfed17 	ldw	r2,-76(fp)
   11d10:	1007883a 	mov	r3,r2
   11d14:	008000b4 	movhi	r2,2
   11d18:	10ad3504 	addi	r2,r2,-19244
   11d1c:	10c00015 	stw	r3,0(r2)
			search_data.current_cluster_index = home_directory_cluster;
   11d20:	e0bfed17 	ldw	r2,-76(fp)
   11d24:	1007883a 	mov	r3,r2
   11d28:	008000b4 	movhi	r2,2
   11d2c:	10ad3504 	addi	r2,r2,-19244
   11d30:	10c00115 	stw	r3,4(r2)
			search_data.current_sector_in_cluster = 0;
   11d34:	008000b4 	movhi	r2,2
   11d38:	10ad3504 	addi	r2,r2,-19244
   11d3c:	10000215 	stw	zero,8(r2)
			search_data.file_index_in_sector = -1;
   11d40:	008000b4 	movhi	r2,2
   11d44:	10ad3504 	addi	r2,r2,-19244
   11d48:	00ffffc4 	movi	r3,-1
   11d4c:	10c0030d 	sth	r3,12(r2)
			search_data.valid = true;
   11d50:	008000b4 	movhi	r2,2
   11d54:	10ad3504 	addi	r2,r2,-19244
   11d58:	00c00044 	movi	r3,1
   11d5c:	10c00415 	stw	r3,16(r2)
			result = alt_up_sd_card_find_next(file_name);
   11d60:	e13fff17 	ldw	r4,-4(fp)
   11d64:	0011d900 	call	11d90 <alt_up_sd_card_find_next>
   11d68:	e0bfec0d 	sth	r2,-80(fp)
   11d6c:	00000206 	br	11d78 <alt_up_sd_card_find_first+0xb8>
		}
		else
		{
			result = 1;
   11d70:	00800044 	movi	r2,1
   11d74:	e0bfec0d 	sth	r2,-80(fp)
		}
	}
	return result;
   11d78:	e0bfec0b 	ldhu	r2,-80(fp)
}
   11d7c:	e037883a 	mov	sp,fp
   11d80:	dfc00117 	ldw	ra,4(sp)
   11d84:	df000017 	ldw	fp,0(sp)
   11d88:	dec00204 	addi	sp,sp,8
   11d8c:	f800283a 	ret

00011d90 <alt_up_sd_card_find_next>:
 *		-1 - end of directory.
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
   11d90:	deffe404 	addi	sp,sp,-112
   11d94:	dfc01b15 	stw	ra,108(sp)
   11d98:	df001a15 	stw	fp,104(sp)
   11d9c:	df001a04 	addi	fp,sp,104
   11da0:	e13fff15 	stw	r4,-4(fp)
	short int result = 2;
   11da4:	00800084 	movi	r2,2
   11da8:	e0bfe60d 	sth	r2,-104(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   11dac:	0011b900 	call	11b90 <alt_up_sd_card_is_Present>
   11db0:	1000df26 	beq	r2,zero,12130 <alt_up_sd_card_find_next+0x3a0>
   11db4:	d0a7d317 	ldw	r2,-24756(gp)
   11db8:	1000dd26 	beq	r2,zero,12130 <alt_up_sd_card_find_next+0x3a0>
	{
		if (search_data.valid)
   11dbc:	008000b4 	movhi	r2,2
   11dc0:	10ad3504 	addi	r2,r2,-19244
   11dc4:	10800417 	ldw	r2,16(r2)
   11dc8:	1000d726 	beq	r2,zero,12128 <alt_up_sd_card_find_next+0x398>
		{
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
   11dcc:	008000b4 	movhi	r2,2
   11dd0:	10ad3504 	addi	r2,r2,-19244
   11dd4:	10800117 	ldw	r2,4(r2)
   11dd8:	e0bfe715 	stw	r2,-100(fp)

			if (cluster == 0)
   11ddc:	e0bfe717 	ldw	r2,-100(fp)
   11de0:	1000561e 	bne	r2,zero,11f3c <alt_up_sd_card_find_next+0x1ac>
			{
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
   11de4:	008000b4 	movhi	r2,2
   11de8:	10ad3a04 	addi	r2,r2,-19224
   11dec:	1080050b 	ldhu	r2,20(r2)
   11df0:	10bfffcc 	andi	r2,r2,65535
   11df4:	1006917a 	slli	r3,r2,5
   11df8:	008000b4 	movhi	r2,2
   11dfc:	10ad3a04 	addi	r2,r2,-19224
   11e00:	1080030b 	ldhu	r2,12(r2)
   11e04:	10bfffcc 	andi	r2,r2,65535
   11e08:	1885283a 	div	r2,r3,r2
   11e0c:	e0bfec15 	stw	r2,-80(fp)
				int sector_index = search_data.current_sector_in_cluster;
   11e10:	008000b4 	movhi	r2,2
   11e14:	10ad3504 	addi	r2,r2,-19244
   11e18:	10800217 	ldw	r2,8(r2)
   11e1c:	e0bfe815 	stw	r2,-96(fp)
				int file_counter = search_data.file_index_in_sector+1;
   11e20:	008000b4 	movhi	r2,2
   11e24:	10ad3504 	addi	r2,r2,-19244
   11e28:	1080030b 	ldhu	r2,12(r2)
   11e2c:	10bfffcc 	andi	r2,r2,65535
   11e30:	10a0001c 	xori	r2,r2,32768
   11e34:	10a00004 	addi	r2,r2,-32768
   11e38:	10800044 	addi	r2,r2,1
   11e3c:	e0bfe915 	stw	r2,-92(fp)
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
   11e40:	00003606 	br	11f1c <alt_up_sd_card_find_next+0x18c>
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
   11e44:	008000b4 	movhi	r2,2
   11e48:	10ad3a04 	addi	r2,r2,-19224
   11e4c:	10c01317 	ldw	r3,76(r2)
   11e50:	e0bfe817 	ldw	r2,-96(fp)
   11e54:	1885883a 	add	r2,r3,r2
   11e58:	1007883a 	mov	r3,r2
   11e5c:	d0a7da17 	ldw	r2,-24728(gp)
   11e60:	100b883a 	mov	r5,r2
   11e64:	1809883a 	mov	r4,r3
   11e68:	000ef600 	call	ef60 <Read_Sector_Data>
   11e6c:	10002f26 	beq	r2,zero,11f2c <alt_up_sd_card_find_next+0x19c>
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
   11e70:	00002306 	br	11f00 <alt_up_sd_card_find_next+0x170>
						{
							if (Read_File_Record_At_Offset(file_counter*32, &file_record, 0, sector_index))
   11e74:	e0bfe917 	ldw	r2,-92(fp)
   11e78:	1004917a 	slli	r2,r2,5
   11e7c:	e13fe817 	ldw	r4,-96(fp)
   11e80:	e0ffef04 	addi	r3,fp,-68
   11e84:	200f883a 	mov	r7,r4
   11e88:	000d883a 	mov	r6,zero
   11e8c:	180b883a 	mov	r5,r3
   11e90:	1009883a 	mov	r4,r2
   11e94:	000f3700 	call	f370 <Read_File_Record_At_Offset>
   11e98:	10001626 	beq	r2,zero,11ef4 <alt_up_sd_card_find_next+0x164>
							{
								if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
   11e9c:	e0bfef03 	ldbu	r2,-68(fp)
   11ea0:	10803fcc 	andi	r2,r2,255
   11ea4:	10001326 	beq	r2,zero,11ef4 <alt_up_sd_card_find_next+0x164>
   11ea8:	e0bfef03 	ldbu	r2,-68(fp)
   11eac:	10803fcc 	andi	r2,r2,255
   11eb0:	10803960 	cmpeqi	r2,r2,229
   11eb4:	10000f1e 	bne	r2,zero,11ef4 <alt_up_sd_card_find_next+0x164>
								{
									/* Update search structure. */
									search_data.file_index_in_sector = file_counter;
   11eb8:	e0bfe917 	ldw	r2,-92(fp)
   11ebc:	1007883a 	mov	r3,r2
   11ec0:	008000b4 	movhi	r2,2
   11ec4:	10ad3504 	addi	r2,r2,-19244
   11ec8:	10c0030d 	sth	r3,12(r2)
									search_data.current_sector_in_cluster = sector_index;
   11ecc:	e0ffe817 	ldw	r3,-96(fp)
   11ed0:	008000b4 	movhi	r2,2
   11ed4:	10ad3504 	addi	r2,r2,-19244
   11ed8:	10c00215 	stw	r3,8(r2)

									/* Copy file name.*/
									copy_file_record_name_to_string(&file_record, file_name);
   11edc:	e0bfef04 	addi	r2,fp,-68
   11ee0:	e17fff17 	ldw	r5,-4(fp)
   11ee4:	1009883a 	mov	r4,r2
   11ee8:	001198c0 	call	1198c <copy_file_record_name_to_string>
									return 0;
   11eec:	0005883a 	mov	r2,zero
   11ef0:	00009006 	br	12134 <alt_up_sd_card_find_next+0x3a4>
				for (; sector_index < max_root_dir_sectors; sector_index++)
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
   11ef4:	e0bfe917 	ldw	r2,-92(fp)
   11ef8:	10800044 	addi	r2,r2,1
   11efc:	e0bfe915 	stw	r2,-92(fp)
   11f00:	e0bfe917 	ldw	r2,-92(fp)
   11f04:	10800410 	cmplti	r2,r2,16
   11f08:	103fda1e 	bne	r2,zero,11e74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011e74>
									copy_file_record_name_to_string(&file_record, file_name);
									return 0;
								}
							}
						}
						file_counter = 0;
   11f0c:	e03fe915 	stw	zero,-92(fp)
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector+1;
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
   11f10:	e0bfe817 	ldw	r2,-96(fp)
   11f14:	10800044 	addi	r2,r2,1
   11f18:	e0bfe815 	stw	r2,-96(fp)
   11f1c:	e0ffe817 	ldw	r3,-96(fp)
   11f20:	e0bfec17 	ldw	r2,-80(fp)
   11f24:	18bfc716 	blt	r3,r2,11e44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011e44>
   11f28:	00000106 	br	11f30 <alt_up_sd_card_find_next+0x1a0>
						}
						file_counter = 0;
					}
					else
					{
						break;
   11f2c:	0001883a 	nop
					}
				}
				result = -1;
   11f30:	00bfffc4 	movi	r2,-1
   11f34:	e0bfe60d 	sth	r2,-104(fp)
   11f38:	00007d06 	br	12130 <alt_up_sd_card_find_next+0x3a0>
			}
			else
			{
				int file_counter = search_data.file_index_in_sector+1;
   11f3c:	008000b4 	movhi	r2,2
   11f40:	10ad3504 	addi	r2,r2,-19244
   11f44:	1080030b 	ldhu	r2,12(r2)
   11f48:	10bfffcc 	andi	r2,r2,65535
   11f4c:	10a0001c 	xori	r2,r2,32768
   11f50:	10a00004 	addi	r2,r2,-32768
   11f54:	10800044 	addi	r2,r2,1
   11f58:	e0bfea15 	stw	r2,-88(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
   11f5c:	e0bfe717 	ldw	r2,-100(fp)
   11f60:	10ffff84 	addi	r3,r2,-2
   11f64:	008000b4 	movhi	r2,2
   11f68:	10ad3a04 	addi	r2,r2,-19224
   11f6c:	10800383 	ldbu	r2,14(r2)
   11f70:	10803fcc 	andi	r2,r2,255
   11f74:	1885383a 	mul	r2,r3,r2
   11f78:	1007883a 	mov	r3,r2
   11f7c:	008000b4 	movhi	r2,2
   11f80:	10ad3a04 	addi	r2,r2,-19224
   11f84:	10801417 	ldw	r2,80(r2)
   11f88:	1885883a 	add	r2,r3,r2
   11f8c:	e0bfed15 	stw	r2,-76(fp)
					int sector_index = search_data.current_sector_in_cluster;
   11f90:	008000b4 	movhi	r2,2
   11f94:	10ad3504 	addi	r2,r2,-19244
   11f98:	10800217 	ldw	r2,8(r2)
   11f9c:	e0bfeb15 	stw	r2,-84(fp)
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   11fa0:	00003806 	br	12084 <alt_up_sd_card_find_next+0x2f4>
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
   11fa4:	e0ffeb17 	ldw	r3,-84(fp)
   11fa8:	e0bfed17 	ldw	r2,-76(fp)
   11fac:	1885883a 	add	r2,r3,r2
   11fb0:	d0e7da17 	ldw	r3,-24728(gp)
   11fb4:	180b883a 	mov	r5,r3
   11fb8:	1009883a 	mov	r4,r2
   11fbc:	000ef600 	call	ef60 <Read_Sector_Data>
   11fc0:	10003726 	beq	r2,zero,120a0 <alt_up_sd_card_find_next+0x310>
						{        
							for (; file_counter < 16; file_counter++)
   11fc4:	00002806 	br	12068 <alt_up_sd_card_find_next+0x2d8>
							{
								if (Read_File_Record_At_Offset(file_counter*32, &file_record, cluster, sector_index))
   11fc8:	e0bfea17 	ldw	r2,-88(fp)
   11fcc:	1004917a 	slli	r2,r2,5
   11fd0:	e13fe717 	ldw	r4,-100(fp)
   11fd4:	e17feb17 	ldw	r5,-84(fp)
   11fd8:	e0ffef04 	addi	r3,fp,-68
   11fdc:	280f883a 	mov	r7,r5
   11fe0:	200d883a 	mov	r6,r4
   11fe4:	180b883a 	mov	r5,r3
   11fe8:	1009883a 	mov	r4,r2
   11fec:	000f3700 	call	f370 <Read_File_Record_At_Offset>
   11ff0:	10001a26 	beq	r2,zero,1205c <alt_up_sd_card_find_next+0x2cc>
								{
									if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
   11ff4:	e0bfef03 	ldbu	r2,-68(fp)
   11ff8:	10803fcc 	andi	r2,r2,255
   11ffc:	10001726 	beq	r2,zero,1205c <alt_up_sd_card_find_next+0x2cc>
   12000:	e0bfef03 	ldbu	r2,-68(fp)
   12004:	10803fcc 	andi	r2,r2,255
   12008:	10803960 	cmpeqi	r2,r2,229
   1200c:	1000131e 	bne	r2,zero,1205c <alt_up_sd_card_find_next+0x2cc>
									{
										/* Update search structure. */
										search_data.current_cluster_index = cluster;
   12010:	e0ffe717 	ldw	r3,-100(fp)
   12014:	008000b4 	movhi	r2,2
   12018:	10ad3504 	addi	r2,r2,-19244
   1201c:	10c00115 	stw	r3,4(r2)
										search_data.file_index_in_sector = file_counter;
   12020:	e0bfea17 	ldw	r2,-88(fp)
   12024:	1007883a 	mov	r3,r2
   12028:	008000b4 	movhi	r2,2
   1202c:	10ad3504 	addi	r2,r2,-19244
   12030:	10c0030d 	sth	r3,12(r2)
										search_data.current_sector_in_cluster = sector_index;
   12034:	e0ffeb17 	ldw	r3,-84(fp)
   12038:	008000b4 	movhi	r2,2
   1203c:	10ad3504 	addi	r2,r2,-19244
   12040:	10c00215 	stw	r3,8(r2)

										/* Copy file name.*/
										copy_file_record_name_to_string(&file_record, file_name);
   12044:	e0bfef04 	addi	r2,fp,-68
   12048:	e17fff17 	ldw	r5,-4(fp)
   1204c:	1009883a 	mov	r4,r2
   12050:	001198c0 	call	1198c <copy_file_record_name_to_string>
										return 0;
   12054:	0005883a 	mov	r2,zero
   12058:	00003606 	br	12134 <alt_up_sd_card_find_next+0x3a4>
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
						{        
							for (; file_counter < 16; file_counter++)
   1205c:	e0bfea17 	ldw	r2,-88(fp)
   12060:	10800044 	addi	r2,r2,1
   12064:	e0bfea15 	stw	r2,-88(fp)
   12068:	e0bfea17 	ldw	r2,-88(fp)
   1206c:	10800410 	cmplti	r2,r2,16
   12070:	103fd51e 	bne	r2,zero,11fc8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011fc8>
										copy_file_record_name_to_string(&file_record, file_name);
										return 0;
									}
								}
							}
							file_counter = 0;
   12074:	e03fea15 	stw	zero,-88(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   12078:	e0bfeb17 	ldw	r2,-84(fp)
   1207c:	10800044 	addi	r2,r2,1
   12080:	e0bfeb15 	stw	r2,-84(fp)
   12084:	008000b4 	movhi	r2,2
   12088:	10ad3a04 	addi	r2,r2,-19224
   1208c:	10800383 	ldbu	r2,14(r2)
   12090:	10803fcc 	andi	r2,r2,255
   12094:	e0ffeb17 	ldw	r3,-84(fp)
   12098:	18bfc216 	blt	r3,r2,11fa4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011fa4>
   1209c:	00000106 	br	120a4 <alt_up_sd_card_find_next+0x314>
							}
							file_counter = 0;
						}
						else
						{
							break;
   120a0:	0001883a 	nop
						}
					}
					// If this is the end of the cluster and the file has not been found, then see if there is another cluster
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster)
   120a4:	008000b4 	movhi	r2,2
   120a8:	10ad3a04 	addi	r2,r2,-19224
   120ac:	10800383 	ldbu	r2,14(r2)
   120b0:	10803fcc 	andi	r2,r2,255
   120b4:	e0ffeb17 	ldw	r3,-84(fp)
   120b8:	18801716 	blt	r3,r2,12118 <alt_up_sd_card_find_next+0x388>
					{
						unsigned short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster))
   120bc:	e0bfe717 	ldw	r2,-100(fp)
   120c0:	e0ffee04 	addi	r3,fp,-72
   120c4:	180b883a 	mov	r5,r3
   120c8:	1009883a 	mov	r4,r2
   120cc:	000f0380 	call	f038 <get_cluster_flag>
   120d0:	10000f26 	beq	r2,zero,12110 <alt_up_sd_card_find_next+0x380>
						{
							if ((new_cluster & 0x0000fff8) == 0x0000fff8)
   120d4:	e0bfee0b 	ldhu	r2,-72(fp)
   120d8:	10bfffcc 	andi	r2,r2,65535
   120dc:	10fffe0c 	andi	r3,r2,65528
   120e0:	00bffe14 	movui	r2,65528
   120e4:	1880051e 	bne	r3,r2,120fc <alt_up_sd_card_find_next+0x36c>
							{
								result = -1;
   120e8:	00bfffc4 	movi	r2,-1
   120ec:	e0bfe60d 	sth	r2,-104(fp)
								search_data.valid = false;
   120f0:	008000b4 	movhi	r2,2
   120f4:	10ad3504 	addi	r2,r2,-19244
   120f8:	10000415 	stw	zero,16(r2)
							}
							cluster = ((new_cluster) & 0x0000fff8);
   120fc:	e0bfee0b 	ldhu	r2,-72(fp)
   12100:	10bfffcc 	andi	r2,r2,65535
   12104:	10bffe0c 	andi	r2,r2,65528
   12108:	e0bfe715 	stw	r2,-100(fp)
   1210c:	00000206 	br	12118 <alt_up_sd_card_find_next+0x388>
						}
						else
						{
							// Error encountered.                 
							result = -1;
   12110:	00bfffc4 	movi	r2,-1
   12114:	e0bfe60d 	sth	r2,-104(fp)
						}
					}              
				} while (cluster < 0x0000fff8);
   12118:	e0bfe717 	ldw	r2,-100(fp)
   1211c:	00fffdd4 	movui	r3,65527
   12120:	18bf8e0e 	bge	r3,r2,11f5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011f5c>
   12124:	00000206 	br	12130 <alt_up_sd_card_find_next+0x3a0>
			}
		}
		else
		{
			// Call Find_First first.
			result = 3;
   12128:	008000c4 	movi	r2,3
   1212c:	e0bfe60d 	sth	r2,-104(fp)
		}
	}
	return result;
   12130:	e0bfe60b 	ldhu	r2,-104(fp)
}
   12134:	e037883a 	mov	sp,fp
   12138:	dfc00117 	ldw	ra,4(sp)
   1213c:	df000017 	ldw	fp,0(sp)
   12140:	dec00204 	addi	sp,sp,8
   12144:	f800283a 	ret

00012148 <alt_up_sd_card_fopen>:
 *      create - a flag set to true to create a file if it does not already exist
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
   12148:	deffe904 	addi	sp,sp,-92
   1214c:	dfc01615 	stw	ra,88(sp)
   12150:	df001515 	stw	fp,84(sp)
   12154:	df001504 	addi	fp,sp,84
   12158:	e13ffe15 	stw	r4,-8(fp)
   1215c:	e17fff15 	stw	r5,-4(fp)
	short int file_record_index = -1;
   12160:	00bfffc4 	movi	r2,-1
   12164:	e0bfeb0d 	sth	r2,-84(fp)

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   12168:	0011b900 	call	11b90 <alt_up_sd_card_is_Present>
   1216c:	1000cf26 	beq	r2,zero,124ac <alt_up_sd_card_fopen+0x364>
   12170:	d0a7d317 	ldw	r2,-24756(gp)
   12174:	1000cd26 	beq	r2,zero,124ac <alt_up_sd_card_fopen+0x364>
	{
        unsigned int home_directory_cluster = 0;
   12178:	e03fed15 	stw	zero,-76(fp)
         * Rules:
         *  - no spaces
         *  - at most 12 chatacters per name, with a period in 9th position.
         *  - a / or a \ every at most 12 characters.
         */
        filename_to_upper_case(name);
   1217c:	e13ffe17 	ldw	r4,-8(fp)
   12180:	000ffe40 	call	ffe4 <filename_to_upper_case>
        if (check_file_name_for_FAT16_compliance(name))
   12184:	e13ffe17 	ldw	r4,-8(fp)
   12188:	00100a80 	call	100a8 <check_file_name_for_FAT16_compliance>
   1218c:	1000c726 	beq	r2,zero,124ac <alt_up_sd_card_fopen+0x364>
        {
			int index;

            /* Get home directory cluster location for the specified file. 0 means root directory. */
            if (!get_home_directory_cluster_for_file(name, (int *) &home_directory_cluster, &home_dir))
   12190:	e0ffee04 	addi	r3,fp,-72
   12194:	e0bfed04 	addi	r2,fp,-76
   12198:	180d883a 	mov	r6,r3
   1219c:	100b883a 	mov	r5,r2
   121a0:	e13ffe17 	ldw	r4,-8(fp)
   121a4:	00106680 	call	10668 <get_home_directory_cluster_for_file>
   121a8:	1000021e 	bne	r2,zero,121b4 <alt_up_sd_card_fopen+0x6c>
            {
                return file_record_index;
   121ac:	e0bfeb0b 	ldhu	r2,-84(fp)
   121b0:	0000bf06 	br	124b0 <alt_up_sd_card_fopen+0x368>
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
   121b4:	e03fec15 	stw	zero,-80(fp)
   121b8:	00000e06 	br	121f4 <alt_up_sd_card_fopen+0xac>
    		{
    			if (active_files[index].in_use == false)
   121bc:	008000b4 	movhi	r2,2
   121c0:	10ad4f04 	addi	r2,r2,-19140
   121c4:	e0ffec17 	ldw	r3,-80(fp)
   121c8:	180691ba 	slli	r3,r3,6
   121cc:	10c5883a 	add	r2,r2,r3
   121d0:	10800f04 	addi	r2,r2,60
   121d4:	10800017 	ldw	r2,0(r2)
   121d8:	1000031e 	bne	r2,zero,121e8 <alt_up_sd_card_fopen+0xa0>
    			{
    				file_record_index = index;
   121dc:	e0bfec17 	ldw	r2,-80(fp)
   121e0:	e0bfeb0d 	sth	r2,-84(fp)
    				break;
   121e4:	00000606 	br	12200 <alt_up_sd_card_fopen+0xb8>
            {
                return file_record_index;
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
   121e8:	e0bfec17 	ldw	r2,-80(fp)
   121ec:	10800044 	addi	r2,r2,1
   121f0:	e0bfec15 	stw	r2,-80(fp)
   121f4:	e0bfec17 	ldw	r2,-80(fp)
   121f8:	10800510 	cmplti	r2,r2,20
   121fc:	103fef1e 	bne	r2,zero,121bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70121bc>
    			{
    				file_record_index = index;
    				break;
    			}
    		}
    		if (file_record_index >= 0)
   12200:	e0bfeb0f 	ldh	r2,-84(fp)
   12204:	1000a916 	blt	r2,zero,124ac <alt_up_sd_card_fopen+0x364>
    		{
    			/* If file record is found, then look for the specified file. If the create flag is set to true 
    			 * and the file is not found, then it should be created in the current directory. 
    			 */
                
                if (find_file_in_directory(home_directory_cluster, name, &(active_files[file_record_index])))
   12208:	e0bfed17 	ldw	r2,-76(fp)
   1220c:	1009883a 	mov	r4,r2
   12210:	e0bfeb0f 	ldh	r2,-84(fp)
   12214:	100691ba 	slli	r3,r2,6
   12218:	008000b4 	movhi	r2,2
   1221c:	10ad4f04 	addi	r2,r2,-19140
   12220:	1885883a 	add	r2,r3,r2
   12224:	100d883a 	mov	r6,r2
   12228:	e17ffe17 	ldw	r5,-8(fp)
   1222c:	0010ba00 	call	10ba0 <find_file_in_directory>
   12230:	10007b26 	beq	r2,zero,12420 <alt_up_sd_card_fopen+0x2d8>
                {
                    if (create)
   12234:	e0bfff17 	ldw	r2,-4(fp)
   12238:	10000226 	beq	r2,zero,12244 <alt_up_sd_card_fopen+0xfc>
                    {
                        /* Do not allow overwriting existing files for now. */
                        return -1;
   1223c:	00bfffc4 	movi	r2,-1
   12240:	00009b06 	br	124b0 <alt_up_sd_card_fopen+0x368>
                    }
                    active_files[file_record_index].current_cluster_index = active_files[file_record_index].start_cluster_index;
   12244:	e13feb0f 	ldh	r4,-84(fp)
   12248:	e0ffeb0f 	ldh	r3,-84(fp)
   1224c:	008000b4 	movhi	r2,2
   12250:	10ad4f04 	addi	r2,r2,-19140
   12254:	180691ba 	slli	r3,r3,6
   12258:	10c5883a 	add	r2,r2,r3
   1225c:	10800584 	addi	r2,r2,22
   12260:	1080000b 	ldhu	r2,0(r2)
   12264:	10ffffcc 	andi	r3,r2,65535
   12268:	008000b4 	movhi	r2,2
   1226c:	10ad4f04 	addi	r2,r2,-19140
   12270:	200891ba 	slli	r4,r4,6
   12274:	1105883a 	add	r2,r2,r4
   12278:	10800704 	addi	r2,r2,28
   1227c:	10c00015 	stw	r3,0(r2)
                    active_files[file_record_index].current_sector_in_cluster = 0;
   12280:	e0ffeb0f 	ldh	r3,-84(fp)
   12284:	008000b4 	movhi	r2,2
   12288:	10ad4f04 	addi	r2,r2,-19140
   1228c:	180691ba 	slli	r3,r3,6
   12290:	10c5883a 	add	r2,r2,r3
   12294:	10800804 	addi	r2,r2,32
   12298:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].current_byte_position = 0;
   1229c:	e0ffeb0f 	ldh	r3,-84(fp)
   122a0:	008000b4 	movhi	r2,2
   122a4:	10ad4f04 	addi	r2,r2,-19140
   122a8:	180691ba 	slli	r3,r3,6
   122ac:	10c5883a 	add	r2,r2,r3
   122b0:	10800904 	addi	r2,r2,36
   122b4:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].in_use = true;
   122b8:	e0ffeb0f 	ldh	r3,-84(fp)
   122bc:	008000b4 	movhi	r2,2
   122c0:	10ad4f04 	addi	r2,r2,-19140
   122c4:	180691ba 	slli	r3,r3,6
   122c8:	10c5883a 	add	r2,r2,r3
   122cc:	10800f04 	addi	r2,r2,60
   122d0:	00c00044 	movi	r3,1
   122d4:	10c00015 	stw	r3,0(r2)
    				active_files[file_record_index].modified = false;
   122d8:	e0ffeb0f 	ldh	r3,-84(fp)
   122dc:	008000b4 	movhi	r2,2
   122e0:	10ad4f04 	addi	r2,r2,-19140
   122e4:	180691ba 	slli	r3,r3,6
   122e8:	10c5883a 	add	r2,r2,r3
   122ec:	10800e04 	addi	r2,r2,56
   122f0:	10000015 	stw	zero,0(r2)

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
   122f4:	e03fec15 	stw	zero,-80(fp)
   122f8:	00004506 	br	12410 <alt_up_sd_card_fopen+0x2c8>
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
   122fc:	e0ffeb0f 	ldh	r3,-84(fp)
   12300:	e0bfec17 	ldw	r2,-80(fp)
   12304:	18803f26 	beq	r3,r2,12404 <alt_up_sd_card_fopen+0x2bc>
   12308:	008000b4 	movhi	r2,2
   1230c:	10ad4f04 	addi	r2,r2,-19140
   12310:	e0ffec17 	ldw	r3,-80(fp)
   12314:	180691ba 	slli	r3,r3,6
   12318:	10c5883a 	add	r2,r2,r3
   1231c:	10800f04 	addi	r2,r2,60
   12320:	10800017 	ldw	r2,0(r2)
   12324:	10800058 	cmpnei	r2,r2,1
   12328:	1000361e 	bne	r2,zero,12404 <alt_up_sd_card_fopen+0x2bc>
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
   1232c:	e0ffeb0f 	ldh	r3,-84(fp)
   12330:	008000b4 	movhi	r2,2
   12334:	10ad4f04 	addi	r2,r2,-19140
   12338:	180691ba 	slli	r3,r3,6
   1233c:	10c5883a 	add	r2,r2,r3
   12340:	10800a04 	addi	r2,r2,40
   12344:	10c00017 	ldw	r3,0(r2)
   12348:	008000b4 	movhi	r2,2
   1234c:	10ad4f04 	addi	r2,r2,-19140
   12350:	e13fec17 	ldw	r4,-80(fp)
   12354:	200891ba 	slli	r4,r4,6
   12358:	1105883a 	add	r2,r2,r4
   1235c:	10800a04 	addi	r2,r2,40
   12360:	10800017 	ldw	r2,0(r2)
   12364:	1880271e 	bne	r3,r2,12404 <alt_up_sd_card_fopen+0x2bc>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
   12368:	e0ffeb0f 	ldh	r3,-84(fp)
   1236c:	008000b4 	movhi	r2,2
   12370:	10ad4f04 	addi	r2,r2,-19140
   12374:	180691ba 	slli	r3,r3,6
   12378:	10c5883a 	add	r2,r2,r3
   1237c:	10800b04 	addi	r2,r2,44
   12380:	10c00017 	ldw	r3,0(r2)
   12384:	008000b4 	movhi	r2,2
   12388:	10ad4f04 	addi	r2,r2,-19140
   1238c:	e13fec17 	ldw	r4,-80(fp)
   12390:	200891ba 	slli	r4,r4,6
   12394:	1105883a 	add	r2,r2,r4
   12398:	10800b04 	addi	r2,r2,44
   1239c:	10800017 	ldw	r2,0(r2)
					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
   123a0:	1880181e 	bne	r3,r2,12404 <alt_up_sd_card_fopen+0x2bc>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
   123a4:	e0ffeb0f 	ldh	r3,-84(fp)
   123a8:	008000b4 	movhi	r2,2
   123ac:	10ad4f04 	addi	r2,r2,-19140
   123b0:	180691ba 	slli	r3,r3,6
   123b4:	10c5883a 	add	r2,r2,r3
   123b8:	10800c04 	addi	r2,r2,48
   123bc:	1100000b 	ldhu	r4,0(r2)
   123c0:	008000b4 	movhi	r2,2
   123c4:	10ad4f04 	addi	r2,r2,-19140
   123c8:	e0ffec17 	ldw	r3,-80(fp)
   123cc:	180691ba 	slli	r3,r3,6
   123d0:	10c5883a 	add	r2,r2,r3
   123d4:	10800c04 	addi	r2,r2,48
   123d8:	1080000b 	ldhu	r2,0(r2)
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
   123dc:	20ffffcc 	andi	r3,r4,65535
   123e0:	18e0001c 	xori	r3,r3,32768
   123e4:	18e00004 	addi	r3,r3,-32768
   123e8:	10bfffcc 	andi	r2,r2,65535
   123ec:	10a0001c 	xori	r2,r2,32768
   123f0:	10a00004 	addi	r2,r2,-32768
   123f4:	1880031e 	bne	r3,r2,12404 <alt_up_sd_card_fopen+0x2bc>
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
							{
								// file already in use.
								file_record_index = -2;
   123f8:	00bfff84 	movi	r2,-2
   123fc:	e0bfeb0d 	sth	r2,-84(fp)
								break;
   12400:	00002a06 	br	124ac <alt_up_sd_card_fopen+0x364>
                    active_files[file_record_index].current_byte_position = 0;
                    active_files[file_record_index].in_use = true;
    				active_files[file_record_index].modified = false;

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
   12404:	e0bfec17 	ldw	r2,-80(fp)
   12408:	10800044 	addi	r2,r2,1
   1240c:	e0bfec15 	stw	r2,-80(fp)
   12410:	e0bfec17 	ldw	r2,-80(fp)
   12414:	10800510 	cmplti	r2,r2,20
   12418:	103fb81e 	bne	r2,zero,122fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70122fc>
   1241c:	00002306 	br	124ac <alt_up_sd_card_fopen+0x364>
							}
						}
					}

                }
                else if (create)
   12420:	e0bfff17 	ldw	r2,-4(fp)
   12424:	10001f26 	beq	r2,zero,124a4 <alt_up_sd_card_fopen+0x35c>
                {
                    /* Create file if needed. */
                    if (create_file(name, &(active_files[file_record_index]), &home_dir))
   12428:	e0bfeb0f 	ldh	r2,-84(fp)
   1242c:	100691ba 	slli	r3,r2,6
   12430:	008000b4 	movhi	r2,2
   12434:	10ad4f04 	addi	r2,r2,-19140
   12438:	1885883a 	add	r2,r3,r2
   1243c:	e0ffee04 	addi	r3,fp,-72
   12440:	180d883a 	mov	r6,r3
   12444:	100b883a 	mov	r5,r2
   12448:	e13ffe17 	ldw	r4,-8(fp)
   1244c:	00116c40 	call	116c4 <create_file>
   12450:	10001126 	beq	r2,zero,12498 <alt_up_sd_card_fopen+0x350>
                    {
                        active_files[file_record_index].in_use = true;
   12454:	e0ffeb0f 	ldh	r3,-84(fp)
   12458:	008000b4 	movhi	r2,2
   1245c:	10ad4f04 	addi	r2,r2,-19140
   12460:	180691ba 	slli	r3,r3,6
   12464:	10c5883a 	add	r2,r2,r3
   12468:	10800f04 	addi	r2,r2,60
   1246c:	00c00044 	movi	r3,1
   12470:	10c00015 	stw	r3,0(r2)
    					active_files[file_record_index].modified = true;
   12474:	e0ffeb0f 	ldh	r3,-84(fp)
   12478:	008000b4 	movhi	r2,2
   1247c:	10ad4f04 	addi	r2,r2,-19140
   12480:	180691ba 	slli	r3,r3,6
   12484:	10c5883a 	add	r2,r2,r3
   12488:	10800e04 	addi	r2,r2,56
   1248c:	00c00044 	movi	r3,1
   12490:	10c00015 	stw	r3,0(r2)
   12494:	00000506 	br	124ac <alt_up_sd_card_fopen+0x364>
                    }
                    else
                    {
                        /* If file creation fails then return an invalid file handle. */
                        file_record_index = -1;
   12498:	00bfffc4 	movi	r2,-1
   1249c:	e0bfeb0d 	sth	r2,-84(fp)
   124a0:	00000206 	br	124ac <alt_up_sd_card_fopen+0x364>
                    }                
                }
                else
                {
                    /* Otherwise the file could not be opened.*/
                    file_record_index = -1;
   124a4:	00bfffc4 	movi	r2,-1
   124a8:	e0bfeb0d 	sth	r2,-84(fp)
                }
    		}
        }
	}

	return file_record_index;
   124ac:	e0bfeb0b 	ldhu	r2,-84(fp)
}
   124b0:	e037883a 	mov	sp,fp
   124b4:	dfc00117 	ldw	ra,4(sp)
   124b8:	df000017 	ldw	fp,0(sp)
   124bc:	dec00204 	addi	sp,sp,8
   124c0:	f800283a 	ret

000124c4 <alt_up_sd_card_set_attributes>:


void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
   124c4:	defffd04 	addi	sp,sp,-12
   124c8:	df000215 	stw	fp,8(sp)
   124cc:	df000204 	addi	fp,sp,8
   124d0:	2007883a 	mov	r3,r4
   124d4:	2805883a 	mov	r2,r5
   124d8:	e0fffe0d 	sth	r3,-8(fp)
   124dc:	e0bfff0d 	sth	r2,-4(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
   124e0:	e0bffe0f 	ldh	r2,-8(fp)
   124e4:	10001416 	blt	r2,zero,12538 <alt_up_sd_card_set_attributes+0x74>
   124e8:	e0bffe0f 	ldh	r2,-8(fp)
   124ec:	10800508 	cmpgei	r2,r2,20
   124f0:	1000111e 	bne	r2,zero,12538 <alt_up_sd_card_set_attributes+0x74>
    {
        if (active_files[file_handle].in_use)
   124f4:	e0fffe0f 	ldh	r3,-8(fp)
   124f8:	008000b4 	movhi	r2,2
   124fc:	10ad4f04 	addi	r2,r2,-19140
   12500:	180691ba 	slli	r3,r3,6
   12504:	10c5883a 	add	r2,r2,r3
   12508:	10800f04 	addi	r2,r2,60
   1250c:	10800017 	ldw	r2,0(r2)
   12510:	10000926 	beq	r2,zero,12538 <alt_up_sd_card_set_attributes+0x74>
        {
            active_files[file_handle].attributes = ((char)(attributes & 0x00ff));
   12514:	e0fffe0f 	ldh	r3,-8(fp)
   12518:	e0bfff0b 	ldhu	r2,-4(fp)
   1251c:	1009883a 	mov	r4,r2
   12520:	008000b4 	movhi	r2,2
   12524:	10ad4f04 	addi	r2,r2,-19140
   12528:	180691ba 	slli	r3,r3,6
   1252c:	10c5883a 	add	r2,r2,r3
   12530:	108002c4 	addi	r2,r2,11
   12534:	11000005 	stb	r4,0(r2)
        }
    }
}
   12538:	0001883a 	nop
   1253c:	e037883a 	mov	sp,fp
   12540:	df000017 	ldw	fp,0(sp)
   12544:	dec00104 	addi	sp,sp,4
   12548:	f800283a 	ret

0001254c <alt_up_sd_card_get_attributes>:


short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
   1254c:	defffd04 	addi	sp,sp,-12
   12550:	df000215 	stw	fp,8(sp)
   12554:	df000204 	addi	fp,sp,8
   12558:	2005883a 	mov	r2,r4
   1255c:	e0bfff0d 	sth	r2,-4(fp)
	short int result = -1;
   12560:	00bfffc4 	movi	r2,-1
   12564:	e0bffe0d 	sth	r2,-8(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
   12568:	e0bfff0f 	ldh	r2,-4(fp)
   1256c:	10001416 	blt	r2,zero,125c0 <alt_up_sd_card_get_attributes+0x74>
   12570:	e0bfff0f 	ldh	r2,-4(fp)
   12574:	10800508 	cmpgei	r2,r2,20
   12578:	1000111e 	bne	r2,zero,125c0 <alt_up_sd_card_get_attributes+0x74>
    {
        if (active_files[file_handle].in_use)
   1257c:	e0ffff0f 	ldh	r3,-4(fp)
   12580:	008000b4 	movhi	r2,2
   12584:	10ad4f04 	addi	r2,r2,-19140
   12588:	180691ba 	slli	r3,r3,6
   1258c:	10c5883a 	add	r2,r2,r3
   12590:	10800f04 	addi	r2,r2,60
   12594:	10800017 	ldw	r2,0(r2)
   12598:	10000926 	beq	r2,zero,125c0 <alt_up_sd_card_get_attributes+0x74>
		{
			result = ((active_files[file_handle].attributes) & 0x00ff);
   1259c:	e0ffff0f 	ldh	r3,-4(fp)
   125a0:	008000b4 	movhi	r2,2
   125a4:	10ad4f04 	addi	r2,r2,-19140
   125a8:	180691ba 	slli	r3,r3,6
   125ac:	10c5883a 	add	r2,r2,r3
   125b0:	108002c4 	addi	r2,r2,11
   125b4:	10800003 	ldbu	r2,0(r2)
   125b8:	10803fcc 	andi	r2,r2,255
   125bc:	e0bffe0d 	sth	r2,-8(fp)
		}
	}
	return result;
   125c0:	e0bffe0b 	ldhu	r2,-8(fp)
}
   125c4:	e037883a 	mov	sp,fp
   125c8:	df000017 	ldw	fp,0(sp)
   125cc:	dec00104 	addi	sp,sp,4
   125d0:	f800283a 	ret

000125d4 <alt_up_sd_card_read>:

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
   125d4:	defffa04 	addi	sp,sp,-24
   125d8:	dfc00515 	stw	ra,20(sp)
   125dc:	df000415 	stw	fp,16(sp)
   125e0:	df000404 	addi	fp,sp,16
   125e4:	2005883a 	mov	r2,r4
   125e8:	e0bfff0d 	sth	r2,-4(fp)
    short int ch = -1;
   125ec:	00bfffc4 	movi	r2,-1
   125f0:	e0bffc0d 	sth	r2,-16(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
   125f4:	e0bfff0f 	ldh	r2,-4(fp)
   125f8:	1000ce16 	blt	r2,zero,12934 <alt_up_sd_card_read+0x360>
   125fc:	e0bfff0f 	ldh	r2,-4(fp)
   12600:	10800508 	cmpgei	r2,r2,20
   12604:	1000cb1e 	bne	r2,zero,12934 <alt_up_sd_card_read+0x360>
    {
        if (active_files[file_handle].in_use)
   12608:	e0ffff0f 	ldh	r3,-4(fp)
   1260c:	008000b4 	movhi	r2,2
   12610:	10ad4f04 	addi	r2,r2,-19140
   12614:	180691ba 	slli	r3,r3,6
   12618:	10c5883a 	add	r2,r2,r3
   1261c:	10800f04 	addi	r2,r2,60
   12620:	10800017 	ldw	r2,0(r2)
   12624:	1000c326 	beq	r2,zero,12934 <alt_up_sd_card_read+0x360>
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
   12628:	e0ffff0f 	ldh	r3,-4(fp)
   1262c:	008000b4 	movhi	r2,2
   12630:	10ad4f04 	addi	r2,r2,-19140
   12634:	180691ba 	slli	r3,r3,6
   12638:	10c5883a 	add	r2,r2,r3
   1263c:	10800904 	addi	r2,r2,36
   12640:	10c00017 	ldw	r3,0(r2)
   12644:	e13fff0f 	ldh	r4,-4(fp)
   12648:	008000b4 	movhi	r2,2
   1264c:	10ad4f04 	addi	r2,r2,-19140
   12650:	200891ba 	slli	r4,r4,6
   12654:	1105883a 	add	r2,r2,r4
   12658:	10800604 	addi	r2,r2,24
   1265c:	10800017 	ldw	r2,0(r2)
   12660:	1880b42e 	bgeu	r3,r2,12934 <alt_up_sd_card_read+0x360>
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   12664:	008000b4 	movhi	r2,2
   12668:	10ad3a04 	addi	r2,r2,-19224
   1266c:	10c01417 	ldw	r3,80(r2)
   12670:	e13fff0f 	ldh	r4,-4(fp)
   12674:	008000b4 	movhi	r2,2
   12678:	10ad4f04 	addi	r2,r2,-19140
   1267c:	200891ba 	slli	r4,r4,6
   12680:	1105883a 	add	r2,r2,r4
   12684:	10800704 	addi	r2,r2,28
   12688:	10800017 	ldw	r2,0(r2)
   1268c:	113fff84 	addi	r4,r2,-2
   12690:	008000b4 	movhi	r2,2
   12694:	10ad3a04 	addi	r2,r2,-19224
   12698:	10800383 	ldbu	r2,14(r2)
   1269c:	10803fcc 	andi	r2,r2,255
   126a0:	2085383a 	mul	r2,r4,r2
   126a4:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;
   126a8:	e13fff0f 	ldh	r4,-4(fp)
   126ac:	008000b4 	movhi	r2,2
   126b0:	10ad4f04 	addi	r2,r2,-19140
   126b4:	200891ba 	slli	r4,r4,6
   126b8:	1105883a 	add	r2,r2,r4
   126bc:	10800804 	addi	r2,r2,32
   126c0:	10800017 	ldw	r2,0(r2)
    {
        if (active_files[file_handle].in_use)
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   126c4:	1885883a 	add	r2,r3,r2
   126c8:	e0bffd15 	stw	r2,-12(fp)
                                  active_files[file_handle].current_sector_in_cluster;
                
                if ((active_files[file_handle].current_byte_position > 0) && ((active_files[file_handle].current_byte_position % 512) == 0))
   126cc:	e0ffff0f 	ldh	r3,-4(fp)
   126d0:	008000b4 	movhi	r2,2
   126d4:	10ad4f04 	addi	r2,r2,-19140
   126d8:	180691ba 	slli	r3,r3,6
   126dc:	10c5883a 	add	r2,r2,r3
   126e0:	10800904 	addi	r2,r2,36
   126e4:	10800017 	ldw	r2,0(r2)
   126e8:	10006826 	beq	r2,zero,1288c <alt_up_sd_card_read+0x2b8>
   126ec:	e0ffff0f 	ldh	r3,-4(fp)
   126f0:	008000b4 	movhi	r2,2
   126f4:	10ad4f04 	addi	r2,r2,-19140
   126f8:	180691ba 	slli	r3,r3,6
   126fc:	10c5883a 	add	r2,r2,r3
   12700:	10800904 	addi	r2,r2,36
   12704:	10800017 	ldw	r2,0(r2)
   12708:	10807fcc 	andi	r2,r2,511
   1270c:	10005f1e 	bne	r2,zero,1288c <alt_up_sd_card_read+0x2b8>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
   12710:	e0ffff0f 	ldh	r3,-4(fp)
   12714:	008000b4 	movhi	r2,2
   12718:	10ad4f04 	addi	r2,r2,-19140
   1271c:	180691ba 	slli	r3,r3,6
   12720:	10c5883a 	add	r2,r2,r3
   12724:	10800804 	addi	r2,r2,32
   12728:	10c00017 	ldw	r3,0(r2)
   1272c:	008000b4 	movhi	r2,2
   12730:	10ad3a04 	addi	r2,r2,-19224
   12734:	10800383 	ldbu	r2,14(r2)
   12738:	10803fcc 	andi	r2,r2,255
   1273c:	10bfffc4 	addi	r2,r2,-1
   12740:	1880401e 	bne	r3,r2,12844 <alt_up_sd_card_read+0x270>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
   12744:	e0ffff0f 	ldh	r3,-4(fp)
   12748:	008000b4 	movhi	r2,2
   1274c:	10ad4f04 	addi	r2,r2,-19140
   12750:	180691ba 	slli	r3,r3,6
   12754:	10c5883a 	add	r2,r2,r3
   12758:	10800704 	addi	r2,r2,28
   1275c:	10800017 	ldw	r2,0(r2)
   12760:	e0fffe04 	addi	r3,fp,-8
   12764:	180b883a 	mov	r5,r3
   12768:	1009883a 	mov	r4,r2
   1276c:	000f0380 	call	f038 <get_cluster_flag>
   12770:	10003226 	beq	r2,zero,1283c <alt_up_sd_card_read+0x268>
                        {
                            if ((next_cluster & 0x0000fff8) == 0x0000fff8)
   12774:	e0bffe0b 	ldhu	r2,-8(fp)
   12778:	10bfffcc 	andi	r2,r2,65535
   1277c:	10fffe0c 	andi	r3,r2,65528
   12780:	00bffe14 	movui	r2,65528
   12784:	1880021e 	bne	r3,r2,12790 <alt_up_sd_card_read+0x1bc>
                            {
                                /* End of file */
                                return -1;
   12788:	00bfffc4 	movi	r2,-1
   1278c:	00006a06 	br	12938 <alt_up_sd_card_read+0x364>
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
   12790:	e13fff0f 	ldh	r4,-4(fp)
   12794:	e0bffe0b 	ldhu	r2,-8(fp)
   12798:	10ffffcc 	andi	r3,r2,65535
   1279c:	008000b4 	movhi	r2,2
   127a0:	10ad4f04 	addi	r2,r2,-19140
   127a4:	200891ba 	slli	r4,r4,6
   127a8:	1105883a 	add	r2,r2,r4
   127ac:	10800704 	addi	r2,r2,28
   127b0:	10c00015 	stw	r3,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
   127b4:	e0ffff0f 	ldh	r3,-4(fp)
   127b8:	008000b4 	movhi	r2,2
   127bc:	10ad4f04 	addi	r2,r2,-19140
   127c0:	180691ba 	slli	r3,r3,6
   127c4:	10c5883a 	add	r2,r2,r3
   127c8:	10800804 	addi	r2,r2,32
   127cc:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   127d0:	008000b4 	movhi	r2,2
   127d4:	10ad3a04 	addi	r2,r2,-19224
   127d8:	10c01417 	ldw	r3,80(r2)
   127dc:	e13fff0f 	ldh	r4,-4(fp)
   127e0:	008000b4 	movhi	r2,2
   127e4:	10ad4f04 	addi	r2,r2,-19140
   127e8:	200891ba 	slli	r4,r4,6
   127ec:	1105883a 	add	r2,r2,r4
   127f0:	10800704 	addi	r2,r2,28
   127f4:	10800017 	ldw	r2,0(r2)
   127f8:	113fff84 	addi	r4,r2,-2
   127fc:	008000b4 	movhi	r2,2
   12800:	10ad3a04 	addi	r2,r2,-19224
   12804:	10800383 	ldbu	r2,14(r2)
   12808:	10803fcc 	andi	r2,r2,255
   1280c:	2085383a 	mul	r2,r4,r2
   12810:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;                                
   12814:	e13fff0f 	ldh	r4,-4(fp)
   12818:	008000b4 	movhi	r2,2
   1281c:	10ad4f04 	addi	r2,r2,-19140
   12820:	200891ba 	slli	r4,r4,6
   12824:	1105883a 	add	r2,r2,r4
   12828:	10800804 	addi	r2,r2,32
   1282c:	10800017 	ldw	r2,0(r2)
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   12830:	1885883a 	add	r2,r3,r2
   12834:	e0bffd15 	stw	r2,-12(fp)
   12838:	00001406 	br	1288c <alt_up_sd_card_read+0x2b8>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return -2;
   1283c:	00bfff84 	movi	r2,-2
   12840:	00003d06 	br	12938 <alt_up_sd_card_read+0x364>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
   12844:	e13fff0f 	ldh	r4,-4(fp)
   12848:	e0ffff0f 	ldh	r3,-4(fp)
   1284c:	008000b4 	movhi	r2,2
   12850:	10ad4f04 	addi	r2,r2,-19140
   12854:	180691ba 	slli	r3,r3,6
   12858:	10c5883a 	add	r2,r2,r3
   1285c:	10800804 	addi	r2,r2,32
   12860:	10800017 	ldw	r2,0(r2)
   12864:	10c00044 	addi	r3,r2,1
   12868:	008000b4 	movhi	r2,2
   1286c:	10ad4f04 	addi	r2,r2,-19140
   12870:	200891ba 	slli	r4,r4,6
   12874:	1105883a 	add	r2,r2,r4
   12878:	10800804 	addi	r2,r2,32
   1287c:	10c00015 	stw	r3,0(r2)
                        data_sector = data_sector + 1;
   12880:	e0bffd17 	ldw	r2,-12(fp)
   12884:	10800044 	addi	r2,r2,1
   12888:	e0bffd15 	stw	r2,-12(fp)
                    }
                }
                // Reading te first byte of the file.
                if (current_sector_index != (data_sector + fat_partition_offset_in_512_byte_sectors))
   1288c:	d0e7da17 	ldw	r3,-24728(gp)
   12890:	e0bffd17 	ldw	r2,-12(fp)
   12894:	1885883a 	add	r2,r3,r2
   12898:	1007883a 	mov	r3,r2
   1289c:	d0a7de17 	ldw	r2,-24712(gp)
   128a0:	18800726 	beq	r3,r2,128c0 <alt_up_sd_card_read+0x2ec>
                {
                    if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
   128a4:	d0a7da17 	ldw	r2,-24728(gp)
   128a8:	100b883a 	mov	r5,r2
   128ac:	e13ffd17 	ldw	r4,-12(fp)
   128b0:	000ef600 	call	ef60 <Read_Sector_Data>
   128b4:	1000021e 	bne	r2,zero,128c0 <alt_up_sd_card_read+0x2ec>
                    {
						return -2;
   128b8:	00bfff84 	movi	r2,-2
   128bc:	00001e06 	br	12938 <alt_up_sd_card_read+0x364>
                    }
                }

                ch = (unsigned char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
   128c0:	d0e7d917 	ldw	r3,-24732(gp)
   128c4:	e13fff0f 	ldh	r4,-4(fp)
   128c8:	008000b4 	movhi	r2,2
   128cc:	10ad4f04 	addi	r2,r2,-19140
   128d0:	200891ba 	slli	r4,r4,6
   128d4:	1105883a 	add	r2,r2,r4
   128d8:	10800904 	addi	r2,r2,36
   128dc:	10800017 	ldw	r2,0(r2)
   128e0:	10807fcc 	andi	r2,r2,511
   128e4:	1885883a 	add	r2,r3,r2
   128e8:	10800023 	ldbuio	r2,0(r2)
   128ec:	10803fcc 	andi	r2,r2,255
   128f0:	10803fcc 	andi	r2,r2,255
   128f4:	e0bffc0d 	sth	r2,-16(fp)
                active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
   128f8:	e13fff0f 	ldh	r4,-4(fp)
   128fc:	e0ffff0f 	ldh	r3,-4(fp)
   12900:	008000b4 	movhi	r2,2
   12904:	10ad4f04 	addi	r2,r2,-19140
   12908:	180691ba 	slli	r3,r3,6
   1290c:	10c5883a 	add	r2,r2,r3
   12910:	10800904 	addi	r2,r2,36
   12914:	10800017 	ldw	r2,0(r2)
   12918:	10c00044 	addi	r3,r2,1
   1291c:	008000b4 	movhi	r2,2
   12920:	10ad4f04 	addi	r2,r2,-19140
   12924:	200891ba 	slli	r4,r4,6
   12928:	1105883a 	add	r2,r2,r4
   1292c:	10800904 	addi	r2,r2,36
   12930:	10c00015 	stw	r3,0(r2)
            }
        }
    }
    
    return ch;
   12934:	e0bffc0b 	ldhu	r2,-16(fp)
}
   12938:	e037883a 	mov	sp,fp
   1293c:	dfc00117 	ldw	ra,4(sp)
   12940:	df000017 	ldw	fp,0(sp)
   12944:	dec00204 	addi	sp,sp,8
   12948:	f800283a 	ret

0001294c <alt_up_sd_card_write>:


bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
   1294c:	defff804 	addi	sp,sp,-32
   12950:	dfc00715 	stw	ra,28(sp)
   12954:	df000615 	stw	fp,24(sp)
   12958:	df000604 	addi	fp,sp,24
   1295c:	2007883a 	mov	r3,r4
   12960:	2805883a 	mov	r2,r5
   12964:	e0fffe0d 	sth	r3,-8(fp)
   12968:	e0bfff05 	stb	r2,-4(fp)
    bool result = false;
   1296c:	e03ffa15 	stw	zero,-24(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
   12970:	e0bffe0f 	ldh	r2,-8(fp)
   12974:	10017716 	blt	r2,zero,12f54 <alt_up_sd_card_write+0x608>
   12978:	e0bffe0f 	ldh	r2,-8(fp)
   1297c:	10800508 	cmpgei	r2,r2,20
   12980:	1001741e 	bne	r2,zero,12f54 <alt_up_sd_card_write+0x608>
    {
        if (active_files[file_handle].in_use)
   12984:	e0fffe0f 	ldh	r3,-8(fp)
   12988:	008000b4 	movhi	r2,2
   1298c:	10ad4f04 	addi	r2,r2,-19140
   12990:	180691ba 	slli	r3,r3,6
   12994:	10c5883a 	add	r2,r2,r3
   12998:	10800f04 	addi	r2,r2,60
   1299c:	10800017 	ldw	r2,0(r2)
   129a0:	10016c26 	beq	r2,zero,12f54 <alt_up_sd_card_write+0x608>
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   129a4:	008000b4 	movhi	r2,2
   129a8:	10ad3a04 	addi	r2,r2,-19224
   129ac:	10c01417 	ldw	r3,80(r2)
   129b0:	e13ffe0f 	ldh	r4,-8(fp)
   129b4:	008000b4 	movhi	r2,2
   129b8:	10ad4f04 	addi	r2,r2,-19140
   129bc:	200891ba 	slli	r4,r4,6
   129c0:	1105883a 	add	r2,r2,r4
   129c4:	10800704 	addi	r2,r2,28
   129c8:	10800017 	ldw	r2,0(r2)
   129cc:	113fff84 	addi	r4,r2,-2
   129d0:	008000b4 	movhi	r2,2
   129d4:	10ad3a04 	addi	r2,r2,-19224
   129d8:	10800383 	ldbu	r2,14(r2)
   129dc:	10803fcc 	andi	r2,r2,255
   129e0:	2085383a 	mul	r2,r4,r2
   129e4:	1887883a 	add	r3,r3,r2
                              active_files[file_handle].current_sector_in_cluster;
   129e8:	e13ffe0f 	ldh	r4,-8(fp)
   129ec:	008000b4 	movhi	r2,2
   129f0:	10ad4f04 	addi	r2,r2,-19140
   129f4:	200891ba 	slli	r4,r4,6
   129f8:	1105883a 	add	r2,r2,r4
   129fc:	10800804 	addi	r2,r2,32
   12a00:	10800017 	ldw	r2,0(r2)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
    {
        if (active_files[file_handle].in_use)
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   12a04:	1885883a 	add	r2,r3,r2
   12a08:	e0bffb15 	stw	r2,-20(fp)
                              active_files[file_handle].current_sector_in_cluster;
			short int buffer_offset = active_files[file_handle].current_byte_position % boot_sector_data.sector_size_in_bytes;
   12a0c:	e0fffe0f 	ldh	r3,-8(fp)
   12a10:	008000b4 	movhi	r2,2
   12a14:	10ad4f04 	addi	r2,r2,-19140
   12a18:	180691ba 	slli	r3,r3,6
   12a1c:	10c5883a 	add	r2,r2,r3
   12a20:	10800904 	addi	r2,r2,36
   12a24:	10c00017 	ldw	r3,0(r2)
   12a28:	008000b4 	movhi	r2,2
   12a2c:	10ad3a04 	addi	r2,r2,-19224
   12a30:	1080030b 	ldhu	r2,12(r2)
   12a34:	10bfffcc 	andi	r2,r2,65535
   12a38:	1889203a 	divu	r4,r3,r2
   12a3c:	2085383a 	mul	r2,r4,r2
   12a40:	1885c83a 	sub	r2,r3,r2
   12a44:	e0bffc0d 	sth	r2,-16(fp)

			if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
   12a48:	e0fffe0f 	ldh	r3,-8(fp)
   12a4c:	008000b4 	movhi	r2,2
   12a50:	10ad4f04 	addi	r2,r2,-19140
   12a54:	180691ba 	slli	r3,r3,6
   12a58:	10c5883a 	add	r2,r2,r3
   12a5c:	10800904 	addi	r2,r2,36
   12a60:	10c00017 	ldw	r3,0(r2)
   12a64:	e13ffe0f 	ldh	r4,-8(fp)
   12a68:	008000b4 	movhi	r2,2
   12a6c:	10ad4f04 	addi	r2,r2,-19140
   12a70:	200891ba 	slli	r4,r4,6
   12a74:	1105883a 	add	r2,r2,r4
   12a78:	10800604 	addi	r2,r2,24
   12a7c:	10800017 	ldw	r2,0(r2)
   12a80:	1880672e 	bgeu	r3,r2,12c20 <alt_up_sd_card_write+0x2d4>
            {
                if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
   12a84:	e0fffe0f 	ldh	r3,-8(fp)
   12a88:	008000b4 	movhi	r2,2
   12a8c:	10ad4f04 	addi	r2,r2,-19140
   12a90:	180691ba 	slli	r3,r3,6
   12a94:	10c5883a 	add	r2,r2,r3
   12a98:	10800904 	addi	r2,r2,36
   12a9c:	10800017 	ldw	r2,0(r2)
   12aa0:	1000e126 	beq	r2,zero,12e28 <alt_up_sd_card_write+0x4dc>
   12aa4:	e0bffc0f 	ldh	r2,-16(fp)
   12aa8:	1000df1e 	bne	r2,zero,12e28 <alt_up_sd_card_write+0x4dc>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
   12aac:	e0fffe0f 	ldh	r3,-8(fp)
   12ab0:	008000b4 	movhi	r2,2
   12ab4:	10ad4f04 	addi	r2,r2,-19140
   12ab8:	180691ba 	slli	r3,r3,6
   12abc:	10c5883a 	add	r2,r2,r3
   12ac0:	10800804 	addi	r2,r2,32
   12ac4:	10c00017 	ldw	r3,0(r2)
   12ac8:	008000b4 	movhi	r2,2
   12acc:	10ad3a04 	addi	r2,r2,-19224
   12ad0:	10800383 	ldbu	r2,14(r2)
   12ad4:	10803fcc 	andi	r2,r2,255
   12ad8:	10bfffc4 	addi	r2,r2,-1
   12adc:	18803d1e 	bne	r3,r2,12bd4 <alt_up_sd_card_write+0x288>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
   12ae0:	e0fffe0f 	ldh	r3,-8(fp)
   12ae4:	008000b4 	movhi	r2,2
   12ae8:	10ad4f04 	addi	r2,r2,-19140
   12aec:	180691ba 	slli	r3,r3,6
   12af0:	10c5883a 	add	r2,r2,r3
   12af4:	10800704 	addi	r2,r2,28
   12af8:	10800017 	ldw	r2,0(r2)
   12afc:	e0fffc84 	addi	r3,fp,-14
   12b00:	180b883a 	mov	r5,r3
   12b04:	1009883a 	mov	r4,r2
   12b08:	000f0380 	call	f038 <get_cluster_flag>
   12b0c:	10002f26 	beq	r2,zero,12bcc <alt_up_sd_card_write+0x280>
                        {
                            if (next_cluster < 0x0000fff8)
   12b10:	e0bffc8b 	ldhu	r2,-14(fp)
   12b14:	10bfffcc 	andi	r2,r2,65535
   12b18:	10bffe28 	cmpgeui	r2,r2,65528
   12b1c:	1000c21e 	bne	r2,zero,12e28 <alt_up_sd_card_write+0x4dc>
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
   12b20:	e13ffe0f 	ldh	r4,-8(fp)
   12b24:	e0bffc8b 	ldhu	r2,-14(fp)
   12b28:	10ffffcc 	andi	r3,r2,65535
   12b2c:	008000b4 	movhi	r2,2
   12b30:	10ad4f04 	addi	r2,r2,-19140
   12b34:	200891ba 	slli	r4,r4,6
   12b38:	1105883a 	add	r2,r2,r4
   12b3c:	10800704 	addi	r2,r2,28
   12b40:	10c00015 	stw	r3,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
   12b44:	e0fffe0f 	ldh	r3,-8(fp)
   12b48:	008000b4 	movhi	r2,2
   12b4c:	10ad4f04 	addi	r2,r2,-19140
   12b50:	180691ba 	slli	r3,r3,6
   12b54:	10c5883a 	add	r2,r2,r3
   12b58:	10800804 	addi	r2,r2,32
   12b5c:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   12b60:	008000b4 	movhi	r2,2
   12b64:	10ad3a04 	addi	r2,r2,-19224
   12b68:	10c01417 	ldw	r3,80(r2)
   12b6c:	e13ffe0f 	ldh	r4,-8(fp)
   12b70:	008000b4 	movhi	r2,2
   12b74:	10ad4f04 	addi	r2,r2,-19140
   12b78:	200891ba 	slli	r4,r4,6
   12b7c:	1105883a 	add	r2,r2,r4
   12b80:	10800704 	addi	r2,r2,28
   12b84:	10800017 	ldw	r2,0(r2)
   12b88:	113fff84 	addi	r4,r2,-2
   12b8c:	008000b4 	movhi	r2,2
   12b90:	10ad3a04 	addi	r2,r2,-19224
   12b94:	10800383 	ldbu	r2,14(r2)
   12b98:	10803fcc 	andi	r2,r2,255
   12b9c:	2085383a 	mul	r2,r4,r2
   12ba0:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;                                
   12ba4:	e13ffe0f 	ldh	r4,-8(fp)
   12ba8:	008000b4 	movhi	r2,2
   12bac:	10ad4f04 	addi	r2,r2,-19140
   12bb0:	200891ba 	slli	r4,r4,6
   12bb4:	1105883a 	add	r2,r2,r4
   12bb8:	10800804 	addi	r2,r2,32
   12bbc:	10800017 	ldw	r2,0(r2)
                        {
                            if (next_cluster < 0x0000fff8)
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   12bc0:	1885883a 	add	r2,r3,r2
   12bc4:	e0bffb15 	stw	r2,-20(fp)
   12bc8:	00009706 	br	12e28 <alt_up_sd_card_write+0x4dc>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return false;
   12bcc:	0005883a 	mov	r2,zero
   12bd0:	0000e106 	br	12f58 <alt_up_sd_card_write+0x60c>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
   12bd4:	e13ffe0f 	ldh	r4,-8(fp)
   12bd8:	e0fffe0f 	ldh	r3,-8(fp)
   12bdc:	008000b4 	movhi	r2,2
   12be0:	10ad4f04 	addi	r2,r2,-19140
   12be4:	180691ba 	slli	r3,r3,6
   12be8:	10c5883a 	add	r2,r2,r3
   12bec:	10800804 	addi	r2,r2,32
   12bf0:	10800017 	ldw	r2,0(r2)
   12bf4:	10c00044 	addi	r3,r2,1
   12bf8:	008000b4 	movhi	r2,2
   12bfc:	10ad4f04 	addi	r2,r2,-19140
   12c00:	200891ba 	slli	r4,r4,6
   12c04:	1105883a 	add	r2,r2,r4
   12c08:	10800804 	addi	r2,r2,32
   12c0c:	10c00015 	stw	r3,0(r2)
                        data_sector = data_sector + 1;
   12c10:	e0bffb17 	ldw	r2,-20(fp)
   12c14:	10800044 	addi	r2,r2,1
   12c18:	e0bffb15 	stw	r2,-20(fp)
   12c1c:	00008206 	br	12e28 <alt_up_sd_card_write+0x4dc>
                }
            }
			else
			{
				/* You are adding data to the end of the file, so increment its size and look for an additional data cluster if needed. */
				if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
   12c20:	e0fffe0f 	ldh	r3,-8(fp)
   12c24:	008000b4 	movhi	r2,2
   12c28:	10ad4f04 	addi	r2,r2,-19140
   12c2c:	180691ba 	slli	r3,r3,6
   12c30:	10c5883a 	add	r2,r2,r3
   12c34:	10800904 	addi	r2,r2,36
   12c38:	10800017 	ldw	r2,0(r2)
   12c3c:	10007a26 	beq	r2,zero,12e28 <alt_up_sd_card_write+0x4dc>
   12c40:	e0bffc0f 	ldh	r2,-16(fp)
   12c44:	1000781e 	bne	r2,zero,12e28 <alt_up_sd_card_write+0x4dc>
				{
					if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
   12c48:	e0fffe0f 	ldh	r3,-8(fp)
   12c4c:	008000b4 	movhi	r2,2
   12c50:	10ad4f04 	addi	r2,r2,-19140
   12c54:	180691ba 	slli	r3,r3,6
   12c58:	10c5883a 	add	r2,r2,r3
   12c5c:	10800804 	addi	r2,r2,32
   12c60:	10c00017 	ldw	r3,0(r2)
   12c64:	008000b4 	movhi	r2,2
   12c68:	10ad3a04 	addi	r2,r2,-19224
   12c6c:	10800383 	ldbu	r2,14(r2)
   12c70:	10803fcc 	andi	r2,r2,255
   12c74:	10bfffc4 	addi	r2,r2,-1
   12c78:	18803e1e 	bne	r3,r2,12d74 <alt_up_sd_card_write+0x428>
					{
						/* Find a new cluster if possible. */
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number))
   12c7c:	e0bffd04 	addi	r2,fp,-12
   12c80:	1009883a 	mov	r4,r2
   12c84:	00110140 	call	11014 <find_first_empty_cluster>
   12c88:	10003826 	beq	r2,zero,12d6c <alt_up_sd_card_write+0x420>
						{
							// mark clusters in both File Allocation Tables.
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), true);
   12c8c:	e0fffe0f 	ldh	r3,-8(fp)
   12c90:	008000b4 	movhi	r2,2
   12c94:	10ad4f04 	addi	r2,r2,-19140
   12c98:	180691ba 	slli	r3,r3,6
   12c9c:	10c5883a 	add	r2,r2,r3
   12ca0:	10800704 	addi	r2,r2,28
   12ca4:	10800017 	ldw	r2,0(r2)
   12ca8:	e0fffd17 	ldw	r3,-12(fp)
   12cac:	18ffffcc 	andi	r3,r3,65535
   12cb0:	18e0001c 	xori	r3,r3,32768
   12cb4:	18e00004 	addi	r3,r3,-32768
   12cb8:	01800044 	movi	r6,1
   12cbc:	180b883a 	mov	r5,r3
   12cc0:	1009883a 	mov	r4,r2
   12cc4:	000f0ec0 	call	f0ec <mark_cluster>
							mark_cluster(cluster_number, 0xffff, true);
   12cc8:	e0bffd17 	ldw	r2,-12(fp)
   12ccc:	01800044 	movi	r6,1
   12cd0:	017fffc4 	movi	r5,-1
   12cd4:	1009883a 	mov	r4,r2
   12cd8:	000f0ec0 	call	f0ec <mark_cluster>
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), false);
   12cdc:	e0fffe0f 	ldh	r3,-8(fp)
   12ce0:	008000b4 	movhi	r2,2
   12ce4:	10ad4f04 	addi	r2,r2,-19140
   12ce8:	180691ba 	slli	r3,r3,6
   12cec:	10c5883a 	add	r2,r2,r3
   12cf0:	10800704 	addi	r2,r2,28
   12cf4:	10800017 	ldw	r2,0(r2)
   12cf8:	e0fffd17 	ldw	r3,-12(fp)
   12cfc:	18ffffcc 	andi	r3,r3,65535
   12d00:	18e0001c 	xori	r3,r3,32768
   12d04:	18e00004 	addi	r3,r3,-32768
   12d08:	000d883a 	mov	r6,zero
   12d0c:	180b883a 	mov	r5,r3
   12d10:	1009883a 	mov	r4,r2
   12d14:	000f0ec0 	call	f0ec <mark_cluster>
							mark_cluster(cluster_number, 0xffff, false);
   12d18:	e0bffd17 	ldw	r2,-12(fp)
   12d1c:	000d883a 	mov	r6,zero
   12d20:	017fffc4 	movi	r5,-1
   12d24:	1009883a 	mov	r4,r2
   12d28:	000f0ec0 	call	f0ec <mark_cluster>
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index = cluster_number;
   12d2c:	e13ffe0f 	ldh	r4,-8(fp)
   12d30:	e0fffd17 	ldw	r3,-12(fp)
   12d34:	008000b4 	movhi	r2,2
   12d38:	10ad4f04 	addi	r2,r2,-19140
   12d3c:	200891ba 	slli	r4,r4,6
   12d40:	1105883a 	add	r2,r2,r4
   12d44:	10800704 	addi	r2,r2,28
   12d48:	10c00015 	stw	r3,0(r2)
							active_files[file_handle].current_sector_in_cluster = 0;
   12d4c:	e0fffe0f 	ldh	r3,-8(fp)
   12d50:	008000b4 	movhi	r2,2
   12d54:	10ad4f04 	addi	r2,r2,-19140
   12d58:	180691ba 	slli	r3,r3,6
   12d5c:	10c5883a 	add	r2,r2,r3
   12d60:	10800804 	addi	r2,r2,32
   12d64:	10000015 	stw	zero,0(r2)
   12d68:	00001506 	br	12dc0 <alt_up_sd_card_write+0x474>
						}
						else
						{
							return false;
   12d6c:	0005883a 	mov	r2,zero
   12d70:	00007906 	br	12f58 <alt_up_sd_card_write+0x60c>
						}
					}
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
   12d74:	e13ffe0f 	ldh	r4,-8(fp)
   12d78:	e0fffe0f 	ldh	r3,-8(fp)
   12d7c:	008000b4 	movhi	r2,2
   12d80:	10ad4f04 	addi	r2,r2,-19140
   12d84:	180691ba 	slli	r3,r3,6
   12d88:	10c5883a 	add	r2,r2,r3
   12d8c:	10800904 	addi	r2,r2,36
   12d90:	10c00017 	ldw	r3,0(r2)
   12d94:	008000b4 	movhi	r2,2
   12d98:	10ad3a04 	addi	r2,r2,-19224
   12d9c:	1080030b 	ldhu	r2,12(r2)
   12da0:	10bfffcc 	andi	r2,r2,65535
   12da4:	1887203a 	divu	r3,r3,r2
   12da8:	008000b4 	movhi	r2,2
   12dac:	10ad4f04 	addi	r2,r2,-19140
   12db0:	200891ba 	slli	r4,r4,6
   12db4:	1105883a 	add	r2,r2,r4
   12db8:	10800804 	addi	r2,r2,32
   12dbc:	10c00015 	stw	r3,0(r2)
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   12dc0:	008000b4 	movhi	r2,2
   12dc4:	10ad3a04 	addi	r2,r2,-19224
   12dc8:	10c01417 	ldw	r3,80(r2)
   12dcc:	e13ffe0f 	ldh	r4,-8(fp)
   12dd0:	008000b4 	movhi	r2,2
   12dd4:	10ad4f04 	addi	r2,r2,-19140
   12dd8:	200891ba 	slli	r4,r4,6
   12ddc:	1105883a 	add	r2,r2,r4
   12de0:	10800704 	addi	r2,r2,28
   12de4:	10800017 	ldw	r2,0(r2)
   12de8:	113fff84 	addi	r4,r2,-2
   12dec:	008000b4 	movhi	r2,2
   12df0:	10ad3a04 	addi	r2,r2,-19224
   12df4:	10800383 	ldbu	r2,14(r2)
   12df8:	10803fcc 	andi	r2,r2,255
   12dfc:	2085383a 	mul	r2,r4,r2
   12e00:	1887883a 	add	r3,r3,r2
                          active_files[file_handle].current_sector_in_cluster;
   12e04:	e13ffe0f 	ldh	r4,-8(fp)
   12e08:	008000b4 	movhi	r2,2
   12e0c:	10ad4f04 	addi	r2,r2,-19140
   12e10:	200891ba 	slli	r4,r4,6
   12e14:	1105883a 	add	r2,r2,r4
   12e18:	10800804 	addi	r2,r2,32
   12e1c:	10800017 	ldw	r2,0(r2)
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   12e20:	1885883a 	add	r2,r3,r2
   12e24:	e0bffb15 	stw	r2,-20(fp)
                          active_files[file_handle].current_sector_in_cluster;
				}
			}
            // Reading a data sector into the buffer. Note that changes to the most recently modified sector will be saved before
			// a new sector is read from the SD Card.
            if (current_sector_index != data_sector + fat_partition_offset_in_512_byte_sectors)
   12e28:	d0e7da17 	ldw	r3,-24728(gp)
   12e2c:	e0bffb17 	ldw	r2,-20(fp)
   12e30:	1885883a 	add	r2,r3,r2
   12e34:	1007883a 	mov	r3,r2
   12e38:	d0a7de17 	ldw	r2,-24712(gp)
   12e3c:	18800726 	beq	r3,r2,12e5c <alt_up_sd_card_write+0x510>
            {
                if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
   12e40:	d0a7da17 	ldw	r2,-24728(gp)
   12e44:	100b883a 	mov	r5,r2
   12e48:	e13ffb17 	ldw	r4,-20(fp)
   12e4c:	000ef600 	call	ef60 <Read_Sector_Data>
   12e50:	1000021e 	bne	r2,zero,12e5c <alt_up_sd_card_write+0x510>
                {
					return false;
   12e54:	0005883a 	mov	r2,zero
   12e58:	00003f06 	br	12f58 <alt_up_sd_card_write+0x60c>
                }
            }
            // Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
   12e5c:	d0e7d917 	ldw	r3,-24732(gp)
   12e60:	e0bffc0f 	ldh	r2,-16(fp)
   12e64:	1885883a 	add	r2,r3,r2
   12e68:	e0ffff07 	ldb	r3,-4(fp)
   12e6c:	10c00025 	stbio	r3,0(r2)
			active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
   12e70:	e13ffe0f 	ldh	r4,-8(fp)
   12e74:	e0fffe0f 	ldh	r3,-8(fp)
   12e78:	008000b4 	movhi	r2,2
   12e7c:	10ad4f04 	addi	r2,r2,-19140
   12e80:	180691ba 	slli	r3,r3,6
   12e84:	10c5883a 	add	r2,r2,r3
   12e88:	10800904 	addi	r2,r2,36
   12e8c:	10800017 	ldw	r2,0(r2)
   12e90:	10c00044 	addi	r3,r2,1
   12e94:	008000b4 	movhi	r2,2
   12e98:	10ad4f04 	addi	r2,r2,-19140
   12e9c:	200891ba 	slli	r4,r4,6
   12ea0:	1105883a 	add	r2,r2,r4
   12ea4:	10800904 	addi	r2,r2,36
   12ea8:	10c00015 	stw	r3,0(r2)

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position >= active_files[file_handle].file_size_in_bytes)
   12eac:	e0fffe0f 	ldh	r3,-8(fp)
   12eb0:	008000b4 	movhi	r2,2
   12eb4:	10ad4f04 	addi	r2,r2,-19140
   12eb8:	180691ba 	slli	r3,r3,6
   12ebc:	10c5883a 	add	r2,r2,r3
   12ec0:	10800904 	addi	r2,r2,36
   12ec4:	10c00017 	ldw	r3,0(r2)
   12ec8:	e13ffe0f 	ldh	r4,-8(fp)
   12ecc:	008000b4 	movhi	r2,2
   12ed0:	10ad4f04 	addi	r2,r2,-19140
   12ed4:	200891ba 	slli	r4,r4,6
   12ed8:	1105883a 	add	r2,r2,r4
   12edc:	10800604 	addi	r2,r2,24
   12ee0:	10800017 	ldw	r2,0(r2)
   12ee4:	18801736 	bltu	r3,r2,12f44 <alt_up_sd_card_write+0x5f8>
			{
				active_files[file_handle].file_size_in_bytes = active_files[file_handle].file_size_in_bytes + 1;
   12ee8:	e13ffe0f 	ldh	r4,-8(fp)
   12eec:	e0fffe0f 	ldh	r3,-8(fp)
   12ef0:	008000b4 	movhi	r2,2
   12ef4:	10ad4f04 	addi	r2,r2,-19140
   12ef8:	180691ba 	slli	r3,r3,6
   12efc:	10c5883a 	add	r2,r2,r3
   12f00:	10800604 	addi	r2,r2,24
   12f04:	10800017 	ldw	r2,0(r2)
   12f08:	10c00044 	addi	r3,r2,1
   12f0c:	008000b4 	movhi	r2,2
   12f10:	10ad4f04 	addi	r2,r2,-19140
   12f14:	200891ba 	slli	r4,r4,6
   12f18:	1105883a 	add	r2,r2,r4
   12f1c:	10800604 	addi	r2,r2,24
   12f20:	10c00015 	stw	r3,0(r2)
				active_files[file_handle].modified = true;
   12f24:	e0fffe0f 	ldh	r3,-8(fp)
   12f28:	008000b4 	movhi	r2,2
   12f2c:	10ad4f04 	addi	r2,r2,-19140
   12f30:	180691ba 	slli	r3,r3,6
   12f34:	10c5883a 	add	r2,r2,r3
   12f38:	10800e04 	addi	r2,r2,56
   12f3c:	00c00044 	movi	r3,1
   12f40:	10c00015 	stw	r3,0(r2)
			}
            // Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
            current_sector_modified = true;
   12f44:	00800044 	movi	r2,1
   12f48:	d0a7dd15 	stw	r2,-24716(gp)
			result = true;
   12f4c:	00800044 	movi	r2,1
   12f50:	e0bffa15 	stw	r2,-24(fp)
		}
    }
    
    return result;
   12f54:	e0bffa17 	ldw	r2,-24(fp)
}
   12f58:	e037883a 	mov	sp,fp
   12f5c:	dfc00117 	ldw	ra,4(sp)
   12f60:	df000017 	ldw	fp,0(sp)
   12f64:	dec00204 	addi	sp,sp,8
   12f68:	f800283a 	ret

00012f6c <alt_up_sd_card_fclose>:


bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
   12f6c:	defffb04 	addi	sp,sp,-20
   12f70:	dfc00415 	stw	ra,16(sp)
   12f74:	df000315 	stw	fp,12(sp)
   12f78:	df000304 	addi	fp,sp,12
   12f7c:	2005883a 	mov	r2,r4
   12f80:	e0bfff0d 	sth	r2,-4(fp)
    bool result = false;
   12f84:	e03ffd15 	stw	zero,-12(fp)
    if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   12f88:	0011b900 	call	11b90 <alt_up_sd_card_is_Present>
   12f8c:	10006026 	beq	r2,zero,13110 <alt_up_sd_card_fclose+0x1a4>
   12f90:	d0a7d317 	ldw	r2,-24756(gp)
   12f94:	10005e26 	beq	r2,zero,13110 <alt_up_sd_card_fclose+0x1a4>
    {
        if (active_files[file_handle].in_use) 
   12f98:	e0ffff0f 	ldh	r3,-4(fp)
   12f9c:	008000b4 	movhi	r2,2
   12fa0:	10ad4f04 	addi	r2,r2,-19140
   12fa4:	180691ba 	slli	r3,r3,6
   12fa8:	10c5883a 	add	r2,r2,r3
   12fac:	10800f04 	addi	r2,r2,60
   12fb0:	10800017 	ldw	r2,0(r2)
   12fb4:	10005626 	beq	r2,zero,13110 <alt_up_sd_card_fclose+0x1a4>
        {
			if (active_files[file_handle].modified)
   12fb8:	e0ffff0f 	ldh	r3,-4(fp)
   12fbc:	008000b4 	movhi	r2,2
   12fc0:	10ad4f04 	addi	r2,r2,-19140
   12fc4:	180691ba 	slli	r3,r3,6
   12fc8:	10c5883a 	add	r2,r2,r3
   12fcc:	10800e04 	addi	r2,r2,56
   12fd0:	10800017 	ldw	r2,0(r2)
   12fd4:	10004526 	beq	r2,zero,130ec <alt_up_sd_card_fclose+0x180>
			{
				unsigned int record_sector = active_files[file_handle].file_record_sector_in_cluster;
   12fd8:	e0ffff0f 	ldh	r3,-4(fp)
   12fdc:	008000b4 	movhi	r2,2
   12fe0:	10ad4f04 	addi	r2,r2,-19140
   12fe4:	180691ba 	slli	r3,r3,6
   12fe8:	10c5883a 	add	r2,r2,r3
   12fec:	10800b04 	addi	r2,r2,44
   12ff0:	10800017 	ldw	r2,0(r2)
   12ff4:	e0bffe15 	stw	r2,-8(fp)
				if (active_files[file_handle].file_record_cluster == 0)
   12ff8:	e0ffff0f 	ldh	r3,-4(fp)
   12ffc:	008000b4 	movhi	r2,2
   13000:	10ad4f04 	addi	r2,r2,-19140
   13004:	180691ba 	slli	r3,r3,6
   13008:	10c5883a 	add	r2,r2,r3
   1300c:	10800a04 	addi	r2,r2,40
   13010:	10800017 	ldw	r2,0(r2)
   13014:	1000071e 	bne	r2,zero,13034 <alt_up_sd_card_fclose+0xc8>
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
   13018:	008000b4 	movhi	r2,2
   1301c:	10ad3a04 	addi	r2,r2,-19224
   13020:	10801317 	ldw	r2,76(r2)
   13024:	e0fffe17 	ldw	r3,-8(fp)
   13028:	1885883a 	add	r2,r3,r2
   1302c:	e0bffe15 	stw	r2,-8(fp)
   13030:	00001406 	br	13084 <alt_up_sd_card_fclose+0x118>
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
   13034:	008000b4 	movhi	r2,2
   13038:	10ad3a04 	addi	r2,r2,-19224
   1303c:	10c01417 	ldw	r3,80(r2)
   13040:	e0bffe17 	ldw	r2,-8(fp)
   13044:	1887883a 	add	r3,r3,r2
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
   13048:	e13fff0f 	ldh	r4,-4(fp)
   1304c:	008000b4 	movhi	r2,2
   13050:	10ad4f04 	addi	r2,r2,-19140
   13054:	200891ba 	slli	r4,r4,6
   13058:	1105883a 	add	r2,r2,r4
   1305c:	10800a04 	addi	r2,r2,40
   13060:	10800017 	ldw	r2,0(r2)
   13064:	113fff84 	addi	r4,r2,-2
   13068:	008000b4 	movhi	r2,2
   1306c:	10ad3a04 	addi	r2,r2,-19224
   13070:	10800383 	ldbu	r2,14(r2)
   13074:	10803fcc 	andi	r2,r2,255
   13078:	2085383a 	mul	r2,r4,r2
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
   1307c:	1885883a 	add	r2,r3,r2
   13080:	e0bffe15 	stw	r2,-8(fp)
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
				}
				if (Read_Sector_Data(record_sector, fat_partition_offset_in_512_byte_sectors))
   13084:	e0bffe17 	ldw	r2,-8(fp)
   13088:	d0e7da17 	ldw	r3,-24728(gp)
   1308c:	180b883a 	mov	r5,r3
   13090:	1009883a 	mov	r4,r2
   13094:	000ef600 	call	ef60 <Read_Sector_Data>
   13098:	10001426 	beq	r2,zero,130ec <alt_up_sd_card_fclose+0x180>
				{
					if (Write_File_Record_At_Offset(active_files[file_handle].file_record_offset, &(active_files[file_handle])))
   1309c:	e0ffff0f 	ldh	r3,-4(fp)
   130a0:	008000b4 	movhi	r2,2
   130a4:	10ad4f04 	addi	r2,r2,-19140
   130a8:	180691ba 	slli	r3,r3,6
   130ac:	10c5883a 	add	r2,r2,r3
   130b0:	10800c04 	addi	r2,r2,48
   130b4:	1080000b 	ldhu	r2,0(r2)
   130b8:	113fffcc 	andi	r4,r2,65535
   130bc:	2120001c 	xori	r4,r4,32768
   130c0:	21200004 	addi	r4,r4,-32768
   130c4:	e0bfff0f 	ldh	r2,-4(fp)
   130c8:	100691ba 	slli	r3,r2,6
   130cc:	008000b4 	movhi	r2,2
   130d0:	10ad4f04 	addi	r2,r2,-19140
   130d4:	1885883a 	add	r2,r3,r2
   130d8:	100b883a 	mov	r5,r2
   130dc:	000f5ec0 	call	f5ec <Write_File_Record_At_Offset>
   130e0:	10000226 	beq	r2,zero,130ec <alt_up_sd_card_fclose+0x180>
					{
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
   130e4:	000ef140 	call	ef14 <Save_Modified_Sector>
   130e8:	e0bffd15 	stw	r2,-12(fp)
					}
				}
			}
			active_files[file_handle].in_use = false;
   130ec:	e0ffff0f 	ldh	r3,-4(fp)
   130f0:	008000b4 	movhi	r2,2
   130f4:	10ad4f04 	addi	r2,r2,-19140
   130f8:	180691ba 	slli	r3,r3,6
   130fc:	10c5883a 	add	r2,r2,r3
   13100:	10800f04 	addi	r2,r2,60
   13104:	10000015 	stw	zero,0(r2)
			result = true;
   13108:	00800044 	movi	r2,1
   1310c:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    return result;
   13110:	e0bffd17 	ldw	r2,-12(fp)
}
   13114:	e037883a 	mov	sp,fp
   13118:	dfc00117 	ldw	ra,4(sp)
   1311c:	df000017 	ldw	fp,0(sp)
   13120:	dec00204 	addi	sp,sp,8
   13124:	f800283a 	ret

00013128 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   13128:	defffa04 	addi	sp,sp,-24
   1312c:	dfc00515 	stw	ra,20(sp)
   13130:	df000415 	stw	fp,16(sp)
   13134:	df000404 	addi	fp,sp,16
   13138:	e13ffd15 	stw	r4,-12(fp)
   1313c:	e17ffe15 	stw	r5,-8(fp)
   13140:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   13144:	e0bffd17 	ldw	r2,-12(fp)
   13148:	10800017 	ldw	r2,0(r2)
   1314c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   13150:	e0bffc17 	ldw	r2,-16(fp)
   13154:	10c00a04 	addi	r3,r2,40
   13158:	e0bffd17 	ldw	r2,-12(fp)
   1315c:	10800217 	ldw	r2,8(r2)
   13160:	100f883a 	mov	r7,r2
   13164:	e1bfff17 	ldw	r6,-4(fp)
   13168:	e17ffe17 	ldw	r5,-8(fp)
   1316c:	1809883a 	mov	r4,r3
   13170:	00137480 	call	13748 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   13174:	e037883a 	mov	sp,fp
   13178:	dfc00117 	ldw	ra,4(sp)
   1317c:	df000017 	ldw	fp,0(sp)
   13180:	dec00204 	addi	sp,sp,8
   13184:	f800283a 	ret

00013188 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   13188:	defffa04 	addi	sp,sp,-24
   1318c:	dfc00515 	stw	ra,20(sp)
   13190:	df000415 	stw	fp,16(sp)
   13194:	df000404 	addi	fp,sp,16
   13198:	e13ffd15 	stw	r4,-12(fp)
   1319c:	e17ffe15 	stw	r5,-8(fp)
   131a0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   131a4:	e0bffd17 	ldw	r2,-12(fp)
   131a8:	10800017 	ldw	r2,0(r2)
   131ac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   131b0:	e0bffc17 	ldw	r2,-16(fp)
   131b4:	10c00a04 	addi	r3,r2,40
   131b8:	e0bffd17 	ldw	r2,-12(fp)
   131bc:	10800217 	ldw	r2,8(r2)
   131c0:	100f883a 	mov	r7,r2
   131c4:	e1bfff17 	ldw	r6,-4(fp)
   131c8:	e17ffe17 	ldw	r5,-8(fp)
   131cc:	1809883a 	mov	r4,r3
   131d0:	00139640 	call	13964 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   131d4:	e037883a 	mov	sp,fp
   131d8:	dfc00117 	ldw	ra,4(sp)
   131dc:	df000017 	ldw	fp,0(sp)
   131e0:	dec00204 	addi	sp,sp,8
   131e4:	f800283a 	ret

000131e8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   131e8:	defffc04 	addi	sp,sp,-16
   131ec:	dfc00315 	stw	ra,12(sp)
   131f0:	df000215 	stw	fp,8(sp)
   131f4:	df000204 	addi	fp,sp,8
   131f8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   131fc:	e0bfff17 	ldw	r2,-4(fp)
   13200:	10800017 	ldw	r2,0(r2)
   13204:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   13208:	e0bffe17 	ldw	r2,-8(fp)
   1320c:	10c00a04 	addi	r3,r2,40
   13210:	e0bfff17 	ldw	r2,-4(fp)
   13214:	10800217 	ldw	r2,8(r2)
   13218:	100b883a 	mov	r5,r2
   1321c:	1809883a 	mov	r4,r3
   13220:	00135f00 	call	135f0 <altera_avalon_jtag_uart_close>
}
   13224:	e037883a 	mov	sp,fp
   13228:	dfc00117 	ldw	ra,4(sp)
   1322c:	df000017 	ldw	fp,0(sp)
   13230:	dec00204 	addi	sp,sp,8
   13234:	f800283a 	ret

00013238 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   13238:	defffa04 	addi	sp,sp,-24
   1323c:	dfc00515 	stw	ra,20(sp)
   13240:	df000415 	stw	fp,16(sp)
   13244:	df000404 	addi	fp,sp,16
   13248:	e13ffd15 	stw	r4,-12(fp)
   1324c:	e17ffe15 	stw	r5,-8(fp)
   13250:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   13254:	e0bffd17 	ldw	r2,-12(fp)
   13258:	10800017 	ldw	r2,0(r2)
   1325c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   13260:	e0bffc17 	ldw	r2,-16(fp)
   13264:	10800a04 	addi	r2,r2,40
   13268:	e1bfff17 	ldw	r6,-4(fp)
   1326c:	e17ffe17 	ldw	r5,-8(fp)
   13270:	1009883a 	mov	r4,r2
   13274:	00136580 	call	13658 <altera_avalon_jtag_uart_ioctl>
}
   13278:	e037883a 	mov	sp,fp
   1327c:	dfc00117 	ldw	ra,4(sp)
   13280:	df000017 	ldw	fp,0(sp)
   13284:	dec00204 	addi	sp,sp,8
   13288:	f800283a 	ret

0001328c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   1328c:	defffb04 	addi	sp,sp,-20
   13290:	dfc00415 	stw	ra,16(sp)
   13294:	df000315 	stw	fp,12(sp)
   13298:	df000304 	addi	fp,sp,12
   1329c:	e13ffd15 	stw	r4,-12(fp)
   132a0:	e17ffe15 	stw	r5,-8(fp)
   132a4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   132a8:	e0bffd17 	ldw	r2,-12(fp)
   132ac:	00c00044 	movi	r3,1
   132b0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   132b4:	e0bffd17 	ldw	r2,-12(fp)
   132b8:	10800017 	ldw	r2,0(r2)
   132bc:	10800104 	addi	r2,r2,4
   132c0:	1007883a 	mov	r3,r2
   132c4:	e0bffd17 	ldw	r2,-12(fp)
   132c8:	10800817 	ldw	r2,32(r2)
   132cc:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   132d0:	e0bfff17 	ldw	r2,-4(fp)
   132d4:	01800074 	movhi	r6,1
   132d8:	318cd004 	addi	r6,r6,13120
   132dc:	e17ffd17 	ldw	r5,-12(fp)
   132e0:	1009883a 	mov	r4,r2
   132e4:	00162dc0 	call	162dc <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   132e8:	e0bffd17 	ldw	r2,-12(fp)
   132ec:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   132f0:	e0bffd17 	ldw	r2,-12(fp)
   132f4:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   132f8:	d0e7e017 	ldw	r3,-24704(gp)
   132fc:	e1fffd17 	ldw	r7,-12(fp)
   13300:	01800074 	movhi	r6,1
   13304:	318d5404 	addi	r6,r6,13648
   13308:	180b883a 	mov	r5,r3
   1330c:	1009883a 	mov	r4,r2
   13310:	0015dec0 	call	15dec <alt_alarm_start>
   13314:	1000040e 	bge	r2,zero,13328 <altera_avalon_jtag_uart_init+0x9c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   13318:	e0fffd17 	ldw	r3,-12(fp)
   1331c:	00a00034 	movhi	r2,32768
   13320:	10bfffc4 	addi	r2,r2,-1
   13324:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   13328:	0001883a 	nop
   1332c:	e037883a 	mov	sp,fp
   13330:	dfc00117 	ldw	ra,4(sp)
   13334:	df000017 	ldw	fp,0(sp)
   13338:	dec00204 	addi	sp,sp,8
   1333c:	f800283a 	ret

00013340 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   13340:	defff704 	addi	sp,sp,-36
   13344:	df000815 	stw	fp,32(sp)
   13348:	df000804 	addi	fp,sp,32
   1334c:	e13ffe15 	stw	r4,-8(fp)
   13350:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   13354:	e0bffe17 	ldw	r2,-8(fp)
   13358:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
   1335c:	e0bffa17 	ldw	r2,-24(fp)
   13360:	10800017 	ldw	r2,0(r2)
   13364:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   13368:	e0bffb17 	ldw	r2,-20(fp)
   1336c:	10800104 	addi	r2,r2,4
   13370:	10800037 	ldwio	r2,0(r2)
   13374:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   13378:	e0bffc17 	ldw	r2,-16(fp)
   1337c:	1080c00c 	andi	r2,r2,768
   13380:	10006d26 	beq	r2,zero,13538 <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   13384:	e0bffc17 	ldw	r2,-16(fp)
   13388:	1080400c 	andi	r2,r2,256
   1338c:	10003526 	beq	r2,zero,13464 <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   13390:	00800074 	movhi	r2,1
   13394:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   13398:	e0bffa17 	ldw	r2,-24(fp)
   1339c:	10800a17 	ldw	r2,40(r2)
   133a0:	10800044 	addi	r2,r2,1
   133a4:	1081ffcc 	andi	r2,r2,2047
   133a8:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
   133ac:	e0bffa17 	ldw	r2,-24(fp)
   133b0:	10c00b17 	ldw	r3,44(r2)
   133b4:	e0bffd17 	ldw	r2,-12(fp)
   133b8:	18801526 	beq	r3,r2,13410 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   133bc:	e0bffb17 	ldw	r2,-20(fp)
   133c0:	10800037 	ldwio	r2,0(r2)
   133c4:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   133c8:	e0bff817 	ldw	r2,-32(fp)
   133cc:	10a0000c 	andi	r2,r2,32768
   133d0:	10001126 	beq	r2,zero,13418 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   133d4:	e0bffa17 	ldw	r2,-24(fp)
   133d8:	10800a17 	ldw	r2,40(r2)
   133dc:	e0fff817 	ldw	r3,-32(fp)
   133e0:	1809883a 	mov	r4,r3
   133e4:	e0fffa17 	ldw	r3,-24(fp)
   133e8:	1885883a 	add	r2,r3,r2
   133ec:	10800e04 	addi	r2,r2,56
   133f0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   133f4:	e0bffa17 	ldw	r2,-24(fp)
   133f8:	10800a17 	ldw	r2,40(r2)
   133fc:	10800044 	addi	r2,r2,1
   13400:	10c1ffcc 	andi	r3,r2,2047
   13404:	e0bffa17 	ldw	r2,-24(fp)
   13408:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   1340c:	003fe206 	br	13398 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013398>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   13410:	0001883a 	nop
   13414:	00000106 	br	1341c <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   13418:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   1341c:	e0bff817 	ldw	r2,-32(fp)
   13420:	10bfffec 	andhi	r2,r2,65535
   13424:	10000f26 	beq	r2,zero,13464 <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   13428:	e0bffa17 	ldw	r2,-24(fp)
   1342c:	10c00817 	ldw	r3,32(r2)
   13430:	00bfff84 	movi	r2,-2
   13434:	1886703a 	and	r3,r3,r2
   13438:	e0bffa17 	ldw	r2,-24(fp)
   1343c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   13440:	e0bffb17 	ldw	r2,-20(fp)
   13444:	10800104 	addi	r2,r2,4
   13448:	1007883a 	mov	r3,r2
   1344c:	e0bffa17 	ldw	r2,-24(fp)
   13450:	10800817 	ldw	r2,32(r2)
   13454:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   13458:	e0bffb17 	ldw	r2,-20(fp)
   1345c:	10800104 	addi	r2,r2,4
   13460:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   13464:	e0bffc17 	ldw	r2,-16(fp)
   13468:	1080800c 	andi	r2,r2,512
   1346c:	103fbe26 	beq	r2,zero,13368 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013368>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   13470:	e0bffc17 	ldw	r2,-16(fp)
   13474:	1004d43a 	srli	r2,r2,16
   13478:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   1347c:	00001406 	br	134d0 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   13480:	e0bffb17 	ldw	r2,-20(fp)
   13484:	e0fffa17 	ldw	r3,-24(fp)
   13488:	18c00d17 	ldw	r3,52(r3)
   1348c:	e13ffa17 	ldw	r4,-24(fp)
   13490:	20c7883a 	add	r3,r4,r3
   13494:	18c20e04 	addi	r3,r3,2104
   13498:	18c00003 	ldbu	r3,0(r3)
   1349c:	18c03fcc 	andi	r3,r3,255
   134a0:	18c0201c 	xori	r3,r3,128
   134a4:	18ffe004 	addi	r3,r3,-128
   134a8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   134ac:	e0bffa17 	ldw	r2,-24(fp)
   134b0:	10800d17 	ldw	r2,52(r2)
   134b4:	10800044 	addi	r2,r2,1
   134b8:	10c1ffcc 	andi	r3,r2,2047
   134bc:	e0bffa17 	ldw	r2,-24(fp)
   134c0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   134c4:	e0bff917 	ldw	r2,-28(fp)
   134c8:	10bfffc4 	addi	r2,r2,-1
   134cc:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   134d0:	e0bff917 	ldw	r2,-28(fp)
   134d4:	10000526 	beq	r2,zero,134ec <altera_avalon_jtag_uart_irq+0x1ac>
   134d8:	e0bffa17 	ldw	r2,-24(fp)
   134dc:	10c00d17 	ldw	r3,52(r2)
   134e0:	e0bffa17 	ldw	r2,-24(fp)
   134e4:	10800c17 	ldw	r2,48(r2)
   134e8:	18bfe51e 	bne	r3,r2,13480 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013480>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   134ec:	e0bff917 	ldw	r2,-28(fp)
   134f0:	103f9d26 	beq	r2,zero,13368 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013368>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   134f4:	e0bffa17 	ldw	r2,-24(fp)
   134f8:	10c00817 	ldw	r3,32(r2)
   134fc:	00bfff44 	movi	r2,-3
   13500:	1886703a 	and	r3,r3,r2
   13504:	e0bffa17 	ldw	r2,-24(fp)
   13508:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1350c:	e0bffa17 	ldw	r2,-24(fp)
   13510:	10800017 	ldw	r2,0(r2)
   13514:	10800104 	addi	r2,r2,4
   13518:	1007883a 	mov	r3,r2
   1351c:	e0bffa17 	ldw	r2,-24(fp)
   13520:	10800817 	ldw	r2,32(r2)
   13524:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   13528:	e0bffb17 	ldw	r2,-20(fp)
   1352c:	10800104 	addi	r2,r2,4
   13530:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   13534:	003f8c06 	br	13368 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013368>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   13538:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   1353c:	0001883a 	nop
   13540:	e037883a 	mov	sp,fp
   13544:	df000017 	ldw	fp,0(sp)
   13548:	dec00104 	addi	sp,sp,4
   1354c:	f800283a 	ret

00013550 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   13550:	defff804 	addi	sp,sp,-32
   13554:	df000715 	stw	fp,28(sp)
   13558:	df000704 	addi	fp,sp,28
   1355c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   13560:	e0bffb17 	ldw	r2,-20(fp)
   13564:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   13568:	e0bff917 	ldw	r2,-28(fp)
   1356c:	10800017 	ldw	r2,0(r2)
   13570:	10800104 	addi	r2,r2,4
   13574:	10800037 	ldwio	r2,0(r2)
   13578:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   1357c:	e0bffa17 	ldw	r2,-24(fp)
   13580:	1081000c 	andi	r2,r2,1024
   13584:	10000b26 	beq	r2,zero,135b4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   13588:	e0bff917 	ldw	r2,-28(fp)
   1358c:	10800017 	ldw	r2,0(r2)
   13590:	10800104 	addi	r2,r2,4
   13594:	1007883a 	mov	r3,r2
   13598:	e0bff917 	ldw	r2,-28(fp)
   1359c:	10800817 	ldw	r2,32(r2)
   135a0:	10810014 	ori	r2,r2,1024
   135a4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   135a8:	e0bff917 	ldw	r2,-28(fp)
   135ac:	10000915 	stw	zero,36(r2)
   135b0:	00000a06 	br	135dc <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   135b4:	e0bff917 	ldw	r2,-28(fp)
   135b8:	10c00917 	ldw	r3,36(r2)
   135bc:	00a00034 	movhi	r2,32768
   135c0:	10bfff04 	addi	r2,r2,-4
   135c4:	10c00536 	bltu	r2,r3,135dc <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   135c8:	e0bff917 	ldw	r2,-28(fp)
   135cc:	10800917 	ldw	r2,36(r2)
   135d0:	10c00044 	addi	r3,r2,1
   135d4:	e0bff917 	ldw	r2,-28(fp)
   135d8:	10c00915 	stw	r3,36(r2)
   135dc:	d0a7e017 	ldw	r2,-24704(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   135e0:	e037883a 	mov	sp,fp
   135e4:	df000017 	ldw	fp,0(sp)
   135e8:	dec00104 	addi	sp,sp,4
   135ec:	f800283a 	ret

000135f0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   135f0:	defffd04 	addi	sp,sp,-12
   135f4:	df000215 	stw	fp,8(sp)
   135f8:	df000204 	addi	fp,sp,8
   135fc:	e13ffe15 	stw	r4,-8(fp)
   13600:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   13604:	00000506 	br	1361c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   13608:	e0bfff17 	ldw	r2,-4(fp)
   1360c:	1090000c 	andi	r2,r2,16384
   13610:	10000226 	beq	r2,zero,1361c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   13614:	00bffd44 	movi	r2,-11
   13618:	00000b06 	br	13648 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1361c:	e0bffe17 	ldw	r2,-8(fp)
   13620:	10c00d17 	ldw	r3,52(r2)
   13624:	e0bffe17 	ldw	r2,-8(fp)
   13628:	10800c17 	ldw	r2,48(r2)
   1362c:	18800526 	beq	r3,r2,13644 <altera_avalon_jtag_uart_close+0x54>
   13630:	e0bffe17 	ldw	r2,-8(fp)
   13634:	10c00917 	ldw	r3,36(r2)
   13638:	e0bffe17 	ldw	r2,-8(fp)
   1363c:	10800117 	ldw	r2,4(r2)
   13640:	18bff136 	bltu	r3,r2,13608 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013608>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   13644:	0005883a 	mov	r2,zero
}
   13648:	e037883a 	mov	sp,fp
   1364c:	df000017 	ldw	fp,0(sp)
   13650:	dec00104 	addi	sp,sp,4
   13654:	f800283a 	ret

00013658 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   13658:	defffa04 	addi	sp,sp,-24
   1365c:	df000515 	stw	fp,20(sp)
   13660:	df000504 	addi	fp,sp,20
   13664:	e13ffd15 	stw	r4,-12(fp)
   13668:	e17ffe15 	stw	r5,-8(fp)
   1366c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   13670:	00bff9c4 	movi	r2,-25
   13674:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   13678:	e0bffe17 	ldw	r2,-8(fp)
   1367c:	10da8060 	cmpeqi	r3,r2,27137
   13680:	1800031e 	bne	r3,zero,13690 <altera_avalon_jtag_uart_ioctl+0x38>
   13684:	109a80a0 	cmpeqi	r2,r2,27138
   13688:	1000181e 	bne	r2,zero,136ec <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   1368c:	00002906 	br	13734 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   13690:	e0bffd17 	ldw	r2,-12(fp)
   13694:	10c00117 	ldw	r3,4(r2)
   13698:	00a00034 	movhi	r2,32768
   1369c:	10bfffc4 	addi	r2,r2,-1
   136a0:	18802126 	beq	r3,r2,13728 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   136a4:	e0bfff17 	ldw	r2,-4(fp)
   136a8:	10800017 	ldw	r2,0(r2)
   136ac:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   136b0:	e0bffc17 	ldw	r2,-16(fp)
   136b4:	10800090 	cmplti	r2,r2,2
   136b8:	1000061e 	bne	r2,zero,136d4 <altera_avalon_jtag_uart_ioctl+0x7c>
   136bc:	e0fffc17 	ldw	r3,-16(fp)
   136c0:	00a00034 	movhi	r2,32768
   136c4:	10bfffc4 	addi	r2,r2,-1
   136c8:	18800226 	beq	r3,r2,136d4 <altera_avalon_jtag_uart_ioctl+0x7c>
   136cc:	e0bffc17 	ldw	r2,-16(fp)
   136d0:	00000206 	br	136dc <altera_avalon_jtag_uart_ioctl+0x84>
   136d4:	00a00034 	movhi	r2,32768
   136d8:	10bfff84 	addi	r2,r2,-2
   136dc:	e0fffd17 	ldw	r3,-12(fp)
   136e0:	18800115 	stw	r2,4(r3)
      rc = 0;
   136e4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   136e8:	00000f06 	br	13728 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   136ec:	e0bffd17 	ldw	r2,-12(fp)
   136f0:	10c00117 	ldw	r3,4(r2)
   136f4:	00a00034 	movhi	r2,32768
   136f8:	10bfffc4 	addi	r2,r2,-1
   136fc:	18800c26 	beq	r3,r2,13730 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   13700:	e0bffd17 	ldw	r2,-12(fp)
   13704:	10c00917 	ldw	r3,36(r2)
   13708:	e0bffd17 	ldw	r2,-12(fp)
   1370c:	10800117 	ldw	r2,4(r2)
   13710:	1885803a 	cmpltu	r2,r3,r2
   13714:	10c03fcc 	andi	r3,r2,255
   13718:	e0bfff17 	ldw	r2,-4(fp)
   1371c:	10c00015 	stw	r3,0(r2)
      rc = 0;
   13720:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   13724:	00000206 	br	13730 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   13728:	0001883a 	nop
   1372c:	00000106 	br	13734 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   13730:	0001883a 	nop

  default:
    break;
  }

  return rc;
   13734:	e0bffb17 	ldw	r2,-20(fp)
}
   13738:	e037883a 	mov	sp,fp
   1373c:	df000017 	ldw	fp,0(sp)
   13740:	dec00104 	addi	sp,sp,4
   13744:	f800283a 	ret

00013748 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   13748:	defff304 	addi	sp,sp,-52
   1374c:	dfc00c15 	stw	ra,48(sp)
   13750:	df000b15 	stw	fp,44(sp)
   13754:	df000b04 	addi	fp,sp,44
   13758:	e13ffc15 	stw	r4,-16(fp)
   1375c:	e17ffd15 	stw	r5,-12(fp)
   13760:	e1bffe15 	stw	r6,-8(fp)
   13764:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   13768:	e0bffd17 	ldw	r2,-12(fp)
   1376c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   13770:	00004706 	br	13890 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   13774:	e0bffc17 	ldw	r2,-16(fp)
   13778:	10800a17 	ldw	r2,40(r2)
   1377c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   13780:	e0bffc17 	ldw	r2,-16(fp)
   13784:	10800b17 	ldw	r2,44(r2)
   13788:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   1378c:	e0fff717 	ldw	r3,-36(fp)
   13790:	e0bff817 	ldw	r2,-32(fp)
   13794:	18800536 	bltu	r3,r2,137ac <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   13798:	e0fff717 	ldw	r3,-36(fp)
   1379c:	e0bff817 	ldw	r2,-32(fp)
   137a0:	1885c83a 	sub	r2,r3,r2
   137a4:	e0bff615 	stw	r2,-40(fp)
   137a8:	00000406 	br	137bc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   137ac:	00c20004 	movi	r3,2048
   137b0:	e0bff817 	ldw	r2,-32(fp)
   137b4:	1885c83a 	sub	r2,r3,r2
   137b8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   137bc:	e0bff617 	ldw	r2,-40(fp)
   137c0:	10001e26 	beq	r2,zero,1383c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   137c4:	e0fffe17 	ldw	r3,-8(fp)
   137c8:	e0bff617 	ldw	r2,-40(fp)
   137cc:	1880022e 	bgeu	r3,r2,137d8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   137d0:	e0bffe17 	ldw	r2,-8(fp)
   137d4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   137d8:	e0bffc17 	ldw	r2,-16(fp)
   137dc:	10c00e04 	addi	r3,r2,56
   137e0:	e0bff817 	ldw	r2,-32(fp)
   137e4:	1885883a 	add	r2,r3,r2
   137e8:	e1bff617 	ldw	r6,-40(fp)
   137ec:	100b883a 	mov	r5,r2
   137f0:	e13ff517 	ldw	r4,-44(fp)
   137f4:	0006be00 	call	6be0 <memcpy>
      ptr   += n;
   137f8:	e0fff517 	ldw	r3,-44(fp)
   137fc:	e0bff617 	ldw	r2,-40(fp)
   13800:	1885883a 	add	r2,r3,r2
   13804:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   13808:	e0fffe17 	ldw	r3,-8(fp)
   1380c:	e0bff617 	ldw	r2,-40(fp)
   13810:	1885c83a 	sub	r2,r3,r2
   13814:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   13818:	e0fff817 	ldw	r3,-32(fp)
   1381c:	e0bff617 	ldw	r2,-40(fp)
   13820:	1885883a 	add	r2,r3,r2
   13824:	10c1ffcc 	andi	r3,r2,2047
   13828:	e0bffc17 	ldw	r2,-16(fp)
   1382c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   13830:	e0bffe17 	ldw	r2,-8(fp)
   13834:	00bfcf16 	blt	zero,r2,13774 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013774>
   13838:	00000106 	br	13840 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   1383c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   13840:	e0fff517 	ldw	r3,-44(fp)
   13844:	e0bffd17 	ldw	r2,-12(fp)
   13848:	1880141e 	bne	r3,r2,1389c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   1384c:	e0bfff17 	ldw	r2,-4(fp)
   13850:	1090000c 	andi	r2,r2,16384
   13854:	1000131e 	bne	r2,zero,138a4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   13858:	0001883a 	nop
   1385c:	e0bffc17 	ldw	r2,-16(fp)
   13860:	10c00a17 	ldw	r3,40(r2)
   13864:	e0bff717 	ldw	r2,-36(fp)
   13868:	1880051e 	bne	r3,r2,13880 <altera_avalon_jtag_uart_read+0x138>
   1386c:	e0bffc17 	ldw	r2,-16(fp)
   13870:	10c00917 	ldw	r3,36(r2)
   13874:	e0bffc17 	ldw	r2,-16(fp)
   13878:	10800117 	ldw	r2,4(r2)
   1387c:	18bff736 	bltu	r3,r2,1385c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701385c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   13880:	e0bffc17 	ldw	r2,-16(fp)
   13884:	10c00a17 	ldw	r3,40(r2)
   13888:	e0bff717 	ldw	r2,-36(fp)
   1388c:	18800726 	beq	r3,r2,138ac <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   13890:	e0bffe17 	ldw	r2,-8(fp)
   13894:	00bfb716 	blt	zero,r2,13774 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013774>
   13898:	00000506 	br	138b0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   1389c:	0001883a 	nop
   138a0:	00000306 	br	138b0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   138a4:	0001883a 	nop
   138a8:	00000106 	br	138b0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   138ac:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   138b0:	e0fff517 	ldw	r3,-44(fp)
   138b4:	e0bffd17 	ldw	r2,-12(fp)
   138b8:	18801826 	beq	r3,r2,1391c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   138bc:	0005303a 	rdctl	r2,status
   138c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   138c4:	e0fffb17 	ldw	r3,-20(fp)
   138c8:	00bfff84 	movi	r2,-2
   138cc:	1884703a 	and	r2,r3,r2
   138d0:	1001703a 	wrctl	status,r2
  
  return context;
   138d4:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   138d8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   138dc:	e0bffc17 	ldw	r2,-16(fp)
   138e0:	10800817 	ldw	r2,32(r2)
   138e4:	10c00054 	ori	r3,r2,1
   138e8:	e0bffc17 	ldw	r2,-16(fp)
   138ec:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   138f0:	e0bffc17 	ldw	r2,-16(fp)
   138f4:	10800017 	ldw	r2,0(r2)
   138f8:	10800104 	addi	r2,r2,4
   138fc:	1007883a 	mov	r3,r2
   13900:	e0bffc17 	ldw	r2,-16(fp)
   13904:	10800817 	ldw	r2,32(r2)
   13908:	18800035 	stwio	r2,0(r3)
   1390c:	e0bffa17 	ldw	r2,-24(fp)
   13910:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13914:	e0bff917 	ldw	r2,-28(fp)
   13918:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   1391c:	e0fff517 	ldw	r3,-44(fp)
   13920:	e0bffd17 	ldw	r2,-12(fp)
   13924:	18800426 	beq	r3,r2,13938 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   13928:	e0fff517 	ldw	r3,-44(fp)
   1392c:	e0bffd17 	ldw	r2,-12(fp)
   13930:	1885c83a 	sub	r2,r3,r2
   13934:	00000606 	br	13950 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   13938:	e0bfff17 	ldw	r2,-4(fp)
   1393c:	1090000c 	andi	r2,r2,16384
   13940:	10000226 	beq	r2,zero,1394c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   13944:	00bffd44 	movi	r2,-11
   13948:	00000106 	br	13950 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   1394c:	00bffec4 	movi	r2,-5
}
   13950:	e037883a 	mov	sp,fp
   13954:	dfc00117 	ldw	ra,4(sp)
   13958:	df000017 	ldw	fp,0(sp)
   1395c:	dec00204 	addi	sp,sp,8
   13960:	f800283a 	ret

00013964 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   13964:	defff304 	addi	sp,sp,-52
   13968:	dfc00c15 	stw	ra,48(sp)
   1396c:	df000b15 	stw	fp,44(sp)
   13970:	df000b04 	addi	fp,sp,44
   13974:	e13ffc15 	stw	r4,-16(fp)
   13978:	e17ffd15 	stw	r5,-12(fp)
   1397c:	e1bffe15 	stw	r6,-8(fp)
   13980:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   13984:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   13988:	e0bffd17 	ldw	r2,-12(fp)
   1398c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   13990:	00003706 	br	13a70 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   13994:	e0bffc17 	ldw	r2,-16(fp)
   13998:	10800c17 	ldw	r2,48(r2)
   1399c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   139a0:	e0bffc17 	ldw	r2,-16(fp)
   139a4:	10800d17 	ldw	r2,52(r2)
   139a8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   139ac:	e0fff917 	ldw	r3,-28(fp)
   139b0:	e0bff517 	ldw	r2,-44(fp)
   139b4:	1880062e 	bgeu	r3,r2,139d0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   139b8:	e0fff517 	ldw	r3,-44(fp)
   139bc:	e0bff917 	ldw	r2,-28(fp)
   139c0:	1885c83a 	sub	r2,r3,r2
   139c4:	10bfffc4 	addi	r2,r2,-1
   139c8:	e0bff615 	stw	r2,-40(fp)
   139cc:	00000b06 	br	139fc <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   139d0:	e0bff517 	ldw	r2,-44(fp)
   139d4:	10000526 	beq	r2,zero,139ec <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   139d8:	00c20004 	movi	r3,2048
   139dc:	e0bff917 	ldw	r2,-28(fp)
   139e0:	1885c83a 	sub	r2,r3,r2
   139e4:	e0bff615 	stw	r2,-40(fp)
   139e8:	00000406 	br	139fc <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   139ec:	00c1ffc4 	movi	r3,2047
   139f0:	e0bff917 	ldw	r2,-28(fp)
   139f4:	1885c83a 	sub	r2,r3,r2
   139f8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   139fc:	e0bff617 	ldw	r2,-40(fp)
   13a00:	10001e26 	beq	r2,zero,13a7c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   13a04:	e0fffe17 	ldw	r3,-8(fp)
   13a08:	e0bff617 	ldw	r2,-40(fp)
   13a0c:	1880022e 	bgeu	r3,r2,13a18 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   13a10:	e0bffe17 	ldw	r2,-8(fp)
   13a14:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   13a18:	e0bffc17 	ldw	r2,-16(fp)
   13a1c:	10c20e04 	addi	r3,r2,2104
   13a20:	e0bff917 	ldw	r2,-28(fp)
   13a24:	1885883a 	add	r2,r3,r2
   13a28:	e1bff617 	ldw	r6,-40(fp)
   13a2c:	e17ffd17 	ldw	r5,-12(fp)
   13a30:	1009883a 	mov	r4,r2
   13a34:	0006be00 	call	6be0 <memcpy>
      ptr   += n;
   13a38:	e0fffd17 	ldw	r3,-12(fp)
   13a3c:	e0bff617 	ldw	r2,-40(fp)
   13a40:	1885883a 	add	r2,r3,r2
   13a44:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   13a48:	e0fffe17 	ldw	r3,-8(fp)
   13a4c:	e0bff617 	ldw	r2,-40(fp)
   13a50:	1885c83a 	sub	r2,r3,r2
   13a54:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   13a58:	e0fff917 	ldw	r3,-28(fp)
   13a5c:	e0bff617 	ldw	r2,-40(fp)
   13a60:	1885883a 	add	r2,r3,r2
   13a64:	10c1ffcc 	andi	r3,r2,2047
   13a68:	e0bffc17 	ldw	r2,-16(fp)
   13a6c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   13a70:	e0bffe17 	ldw	r2,-8(fp)
   13a74:	00bfc716 	blt	zero,r2,13994 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013994>
   13a78:	00000106 	br	13a80 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   13a7c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13a80:	0005303a 	rdctl	r2,status
   13a84:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13a88:	e0fffb17 	ldw	r3,-20(fp)
   13a8c:	00bfff84 	movi	r2,-2
   13a90:	1884703a 	and	r2,r3,r2
   13a94:	1001703a 	wrctl	status,r2
  
  return context;
   13a98:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   13a9c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   13aa0:	e0bffc17 	ldw	r2,-16(fp)
   13aa4:	10800817 	ldw	r2,32(r2)
   13aa8:	10c00094 	ori	r3,r2,2
   13aac:	e0bffc17 	ldw	r2,-16(fp)
   13ab0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   13ab4:	e0bffc17 	ldw	r2,-16(fp)
   13ab8:	10800017 	ldw	r2,0(r2)
   13abc:	10800104 	addi	r2,r2,4
   13ac0:	1007883a 	mov	r3,r2
   13ac4:	e0bffc17 	ldw	r2,-16(fp)
   13ac8:	10800817 	ldw	r2,32(r2)
   13acc:	18800035 	stwio	r2,0(r3)
   13ad0:	e0bffa17 	ldw	r2,-24(fp)
   13ad4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13ad8:	e0bff817 	ldw	r2,-32(fp)
   13adc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   13ae0:	e0bffe17 	ldw	r2,-8(fp)
   13ae4:	0080100e 	bge	zero,r2,13b28 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   13ae8:	e0bfff17 	ldw	r2,-4(fp)
   13aec:	1090000c 	andi	r2,r2,16384
   13af0:	1000101e 	bne	r2,zero,13b34 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   13af4:	0001883a 	nop
   13af8:	e0bffc17 	ldw	r2,-16(fp)
   13afc:	10c00d17 	ldw	r3,52(r2)
   13b00:	e0bff517 	ldw	r2,-44(fp)
   13b04:	1880051e 	bne	r3,r2,13b1c <altera_avalon_jtag_uart_write+0x1b8>
   13b08:	e0bffc17 	ldw	r2,-16(fp)
   13b0c:	10c00917 	ldw	r3,36(r2)
   13b10:	e0bffc17 	ldw	r2,-16(fp)
   13b14:	10800117 	ldw	r2,4(r2)
   13b18:	18bff736 	bltu	r3,r2,13af8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013af8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   13b1c:	e0bffc17 	ldw	r2,-16(fp)
   13b20:	10800917 	ldw	r2,36(r2)
   13b24:	1000051e 	bne	r2,zero,13b3c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   13b28:	e0bffe17 	ldw	r2,-8(fp)
   13b2c:	00bfd016 	blt	zero,r2,13a70 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013a70>
   13b30:	00000306 	br	13b40 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   13b34:	0001883a 	nop
   13b38:	00000106 	br	13b40 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   13b3c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   13b40:	e0fffd17 	ldw	r3,-12(fp)
   13b44:	e0bff717 	ldw	r2,-36(fp)
   13b48:	18800426 	beq	r3,r2,13b5c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   13b4c:	e0fffd17 	ldw	r3,-12(fp)
   13b50:	e0bff717 	ldw	r2,-36(fp)
   13b54:	1885c83a 	sub	r2,r3,r2
   13b58:	00000606 	br	13b74 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   13b5c:	e0bfff17 	ldw	r2,-4(fp)
   13b60:	1090000c 	andi	r2,r2,16384
   13b64:	10000226 	beq	r2,zero,13b70 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   13b68:	00bffd44 	movi	r2,-11
   13b6c:	00000106 	br	13b74 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   13b70:	00bffec4 	movi	r2,-5
}
   13b74:	e037883a 	mov	sp,fp
   13b78:	dfc00117 	ldw	ra,4(sp)
   13b7c:	df000017 	ldw	fp,0(sp)
   13b80:	dec00204 	addi	sp,sp,8
   13b84:	f800283a 	ret

00013b88 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   13b88:	defff904 	addi	sp,sp,-28
   13b8c:	dfc00615 	stw	ra,24(sp)
   13b90:	df000515 	stw	fp,20(sp)
   13b94:	df000504 	addi	fp,sp,20
   13b98:	e13ffe15 	stw	r4,-8(fp)
   13b9c:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   13ba0:	0007883a 	mov	r3,zero
   13ba4:	e0bffe17 	ldw	r2,-8(fp)
   13ba8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   13bac:	e0bffe17 	ldw	r2,-8(fp)
   13bb0:	10800104 	addi	r2,r2,4
   13bb4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13bb8:	0005303a 	rdctl	r2,status
   13bbc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13bc0:	e0fffc17 	ldw	r3,-16(fp)
   13bc4:	00bfff84 	movi	r2,-2
   13bc8:	1884703a 	and	r2,r3,r2
   13bcc:	1001703a 	wrctl	status,r2
  
  return context;
   13bd0:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   13bd4:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
   13bd8:	001674c0 	call	1674c <alt_tick>
   13bdc:	e0bffb17 	ldw	r2,-20(fp)
   13be0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13be4:	e0bffd17 	ldw	r2,-12(fp)
   13be8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   13bec:	0001883a 	nop
   13bf0:	e037883a 	mov	sp,fp
   13bf4:	dfc00117 	ldw	ra,4(sp)
   13bf8:	df000017 	ldw	fp,0(sp)
   13bfc:	dec00204 	addi	sp,sp,8
   13c00:	f800283a 	ret

00013c04 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   13c04:	defff904 	addi	sp,sp,-28
   13c08:	dfc00615 	stw	ra,24(sp)
   13c0c:	df000515 	stw	fp,20(sp)
   13c10:	df000504 	addi	fp,sp,20
   13c14:	e13ffc15 	stw	r4,-16(fp)
   13c18:	e17ffd15 	stw	r5,-12(fp)
   13c1c:	e1bffe15 	stw	r6,-8(fp)
   13c20:	e1ffff15 	stw	r7,-4(fp)
   13c24:	e0bfff17 	ldw	r2,-4(fp)
   13c28:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   13c2c:	d0a7e017 	ldw	r2,-24704(gp)
   13c30:	1000021e 	bne	r2,zero,13c3c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   13c34:	e0bffb17 	ldw	r2,-20(fp)
   13c38:	d0a7e015 	stw	r2,-24704(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   13c3c:	e0bffc17 	ldw	r2,-16(fp)
   13c40:	10800104 	addi	r2,r2,4
   13c44:	00c001c4 	movi	r3,7
   13c48:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   13c4c:	01800074 	movhi	r6,1
   13c50:	318ee204 	addi	r6,r6,15240
   13c54:	e17ffc17 	ldw	r5,-16(fp)
   13c58:	e13ffe17 	ldw	r4,-8(fp)
   13c5c:	00162dc0 	call	162dc <alt_irq_register>
#endif  
}
   13c60:	0001883a 	nop
   13c64:	e037883a 	mov	sp,fp
   13c68:	dfc00117 	ldw	ra,4(sp)
   13c6c:	df000017 	ldw	fp,0(sp)
   13c70:	dec00204 	addi	sp,sp,8
   13c74:	f800283a 	ret

00013c78 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
   13c78:	defffc04 	addi	sp,sp,-16
   13c7c:	df000315 	stw	fp,12(sp)
   13c80:	df000304 	addi	fp,sp,12
   13c84:	e13ffe15 	stw	r4,-8(fp)
   13c88:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
   13c8c:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
   13c90:	e0bfff17 	ldw	r2,-4(fp)
   13c94:	1000061e 	bne	r2,zero,13cb0 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
   13c98:	e0bffe17 	ldw	r2,-8(fp)
   13c9c:	1007883a 	mov	r3,r2
   13ca0:	e0bffd03 	ldbu	r2,-12(fp)
   13ca4:	1884b03a 	or	r2,r3,r2
   13ca8:	e0bffd05 	stb	r2,-12(fp)
   13cac:	00000806 	br	13cd0 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
   13cb0:	e0bffe17 	ldw	r2,-8(fp)
   13cb4:	1007883a 	mov	r3,r2
   13cb8:	e0bffd03 	ldbu	r2,-12(fp)
   13cbc:	1884b03a 	or	r2,r3,r2
   13cc0:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
   13cc4:	e0bffd03 	ldbu	r2,-12(fp)
   13cc8:	10801014 	ori	r2,r2,64
   13ccc:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
   13cd0:	e0fffd03 	ldbu	r3,-12(fp)
   13cd4:	00bfe004 	movi	r2,-128
   13cd8:	1884b03a 	or	r2,r3,r2
}
   13cdc:	e037883a 	mov	sp,fp
   13ce0:	df000017 	ldw	fp,0(sp)
   13ce4:	dec00104 	addi	sp,sp,4
   13ce8:	f800283a 	ret

00013cec <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
   13cec:	defffd04 	addi	sp,sp,-12
   13cf0:	df000215 	stw	fp,8(sp)
   13cf4:	df000204 	addi	fp,sp,8
   13cf8:	e13ffe15 	stw	r4,-8(fp)
   13cfc:	2805883a 	mov	r2,r5
   13d00:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
   13d04:	e0bffe17 	ldw	r2,-8(fp)
   13d08:	10800a17 	ldw	r2,40(r2)
   13d0c:	1007883a 	mov	r3,r2
   13d10:	e0bfff03 	ldbu	r2,-4(fp)
   13d14:	18800025 	stbio	r2,0(r3)
}
   13d18:	0001883a 	nop
   13d1c:	e037883a 	mov	sp,fp
   13d20:	df000017 	ldw	fp,0(sp)
   13d24:	dec00104 	addi	sp,sp,4
   13d28:	f800283a 	ret

00013d2c <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
   13d2c:	defffe04 	addi	sp,sp,-8
   13d30:	df000115 	stw	fp,4(sp)
   13d34:	df000104 	addi	fp,sp,4
   13d38:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
   13d3c:	e0bfff17 	ldw	r2,-4(fp)
   13d40:	10800a17 	ldw	r2,40(r2)
   13d44:	1007883a 	mov	r3,r2
   13d48:	00800044 	movi	r2,1
   13d4c:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
   13d50:	0001883a 	nop
   13d54:	e037883a 	mov	sp,fp
   13d58:	df000017 	ldw	fp,0(sp)
   13d5c:	dec00104 	addi	sp,sp,4
   13d60:	f800283a 	ret

00013d64 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
   13d64:	defffc04 	addi	sp,sp,-16
   13d68:	dfc00315 	stw	ra,12(sp)
   13d6c:	df000215 	stw	fp,8(sp)
   13d70:	df000204 	addi	fp,sp,8
   13d74:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
   13d78:	d1600804 	addi	r5,gp,-32736
   13d7c:	e13fff17 	ldw	r4,-4(fp)
   13d80:	00160d80 	call	160d8 <alt_find_dev>
   13d84:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   13d88:	e0bffe17 	ldw	r2,-8(fp)
}
   13d8c:	e037883a 	mov	sp,fp
   13d90:	dfc00117 	ldw	ra,4(sp)
   13d94:	df000017 	ldw	fp,0(sp)
   13d98:	dec00204 	addi	sp,sp,8
   13d9c:	f800283a 	ret

00013da0 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
   13da0:	defffb04 	addi	sp,sp,-20
   13da4:	df000415 	stw	fp,16(sp)
   13da8:	df000404 	addi	fp,sp,16
   13dac:	e13ffd15 	stw	r4,-12(fp)
   13db0:	e17ffe15 	stw	r5,-8(fp)
   13db4:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
   13db8:	e03ffc15 	stw	zero,-16(fp)
   13dbc:	00000f06 	br	13dfc <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
   13dc0:	e0bffd17 	ldw	r2,-12(fp)
   13dc4:	10800a17 	ldw	r2,40(r2)
   13dc8:	10800044 	addi	r2,r2,1
   13dcc:	1009883a 	mov	r4,r2
   13dd0:	e0fffe17 	ldw	r3,-8(fp)
   13dd4:	e0bffc17 	ldw	r2,-16(fp)
   13dd8:	1885883a 	add	r2,r3,r2
   13ddc:	10800003 	ldbu	r2,0(r2)
   13de0:	10803fcc 	andi	r2,r2,255
   13de4:	1080201c 	xori	r2,r2,128
   13de8:	10bfe004 	addi	r2,r2,-128
   13dec:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
   13df0:	e0bffc17 	ldw	r2,-16(fp)
   13df4:	10800044 	addi	r2,r2,1
   13df8:	e0bffc15 	stw	r2,-16(fp)
   13dfc:	e0fffc17 	ldw	r3,-16(fp)
   13e00:	e0bfff17 	ldw	r2,-4(fp)
   13e04:	18bfee36 	bltu	r3,r2,13dc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013dc0>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
   13e08:	0001883a 	nop
   13e0c:	e037883a 	mov	sp,fp
   13e10:	df000017 	ldw	fp,0(sp)
   13e14:	dec00104 	addi	sp,sp,4
   13e18:	f800283a 	ret

00013e1c <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
   13e1c:	defffd04 	addi	sp,sp,-12
   13e20:	df000215 	stw	fp,8(sp)
   13e24:	df000204 	addi	fp,sp,8
   13e28:	e13ffe15 	stw	r4,-8(fp)
   13e2c:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
   13e30:	00000d06 	br	13e68 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
   13e34:	e0bffe17 	ldw	r2,-8(fp)
   13e38:	10800a17 	ldw	r2,40(r2)
   13e3c:	10800044 	addi	r2,r2,1
   13e40:	1007883a 	mov	r3,r2
   13e44:	e0bfff17 	ldw	r2,-4(fp)
   13e48:	10800003 	ldbu	r2,0(r2)
   13e4c:	10803fcc 	andi	r2,r2,255
   13e50:	1080201c 	xori	r2,r2,128
   13e54:	10bfe004 	addi	r2,r2,-128
   13e58:	18800025 	stbio	r2,0(r3)
		++ptr;
   13e5c:	e0bfff17 	ldw	r2,-4(fp)
   13e60:	10800044 	addi	r2,r2,1
   13e64:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
   13e68:	e0bfff17 	ldw	r2,-4(fp)
   13e6c:	10800003 	ldbu	r2,0(r2)
   13e70:	10803fcc 	andi	r2,r2,255
   13e74:	1080201c 	xori	r2,r2,128
   13e78:	10bfe004 	addi	r2,r2,-128
   13e7c:	103fed1e 	bne	r2,zero,13e34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013e34>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
   13e80:	0001883a 	nop
   13e84:	e037883a 	mov	sp,fp
   13e88:	df000017 	ldw	fp,0(sp)
   13e8c:	dec00104 	addi	sp,sp,4
   13e90:	f800283a 	ret

00013e94 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
   13e94:	defffb04 	addi	sp,sp,-20
   13e98:	dfc00415 	stw	ra,16(sp)
   13e9c:	df000315 	stw	fp,12(sp)
   13ea0:	df000304 	addi	fp,sp,12
   13ea4:	e13ffd15 	stw	r4,-12(fp)
   13ea8:	e17ffe15 	stw	r5,-8(fp)
   13eac:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
   13eb0:	e0bffd17 	ldw	r2,-12(fp)
   13eb4:	10800017 	ldw	r2,0(r2)
   13eb8:	e0ffff17 	ldw	r3,-4(fp)
   13ebc:	180d883a 	mov	r6,r3
   13ec0:	e17ffe17 	ldw	r5,-8(fp)
   13ec4:	1009883a 	mov	r4,r2
   13ec8:	0013da00 	call	13da0 <alt_up_character_lcd_write>
	return 0;
   13ecc:	0005883a 	mov	r2,zero
}
   13ed0:	e037883a 	mov	sp,fp
   13ed4:	dfc00117 	ldw	ra,4(sp)
   13ed8:	df000017 	ldw	fp,0(sp)
   13edc:	dec00204 	addi	sp,sp,8
   13ee0:	f800283a 	ret

00013ee4 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
   13ee4:	defffa04 	addi	sp,sp,-24
   13ee8:	dfc00515 	stw	ra,20(sp)
   13eec:	df000415 	stw	fp,16(sp)
   13ef0:	df000404 	addi	fp,sp,16
   13ef4:	e13ffd15 	stw	r4,-12(fp)
   13ef8:	e17ffe15 	stw	r5,-8(fp)
   13efc:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
   13f00:	e0bffe17 	ldw	r2,-8(fp)
   13f04:	10800a28 	cmpgeui	r2,r2,40
   13f08:	1000031e 	bne	r2,zero,13f18 <alt_up_character_lcd_set_cursor_pos+0x34>
   13f0c:	e0bfff17 	ldw	r2,-4(fp)
   13f10:	108000b0 	cmpltui	r2,r2,2
   13f14:	1000021e 	bne	r2,zero,13f20 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
   13f18:	00bfffc4 	movi	r2,-1
   13f1c:	00000906 	br	13f44 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   13f20:	e17fff17 	ldw	r5,-4(fp)
   13f24:	e13ffe17 	ldw	r4,-8(fp)
   13f28:	0013c780 	call	13c78 <get_DDRAM_addr>
   13f2c:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
   13f30:	e0bffc03 	ldbu	r2,-16(fp)
   13f34:	100b883a 	mov	r5,r2
   13f38:	e13ffd17 	ldw	r4,-12(fp)
   13f3c:	0013cec0 	call	13cec <alt_up_character_lcd_send_cmd>
	return 0;
   13f40:	0005883a 	mov	r2,zero
}
   13f44:	e037883a 	mov	sp,fp
   13f48:	dfc00117 	ldw	ra,4(sp)
   13f4c:	df000017 	ldw	fp,0(sp)
   13f50:	dec00204 	addi	sp,sp,8
   13f54:	f800283a 	ret

00013f58 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   13f58:	defffb04 	addi	sp,sp,-20
   13f5c:	dfc00415 	stw	ra,16(sp)
   13f60:	df000315 	stw	fp,12(sp)
   13f64:	df000304 	addi	fp,sp,12
   13f68:	e13ffe15 	stw	r4,-8(fp)
   13f6c:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   13f70:	e0bfff17 	ldw	r2,-4(fp)
   13f74:	10001526 	beq	r2,zero,13fcc <alt_up_character_lcd_shift_cursor+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   13f78:	e0bfff17 	ldw	r2,-4(fp)
   13f7c:	0080020e 	bge	zero,r2,13f88 <alt_up_character_lcd_shift_cursor+0x30>
   13f80:	00800504 	movi	r2,20
   13f84:	00000106 	br	13f8c <alt_up_character_lcd_shift_cursor+0x34>
   13f88:	00800404 	movi	r2,16
   13f8c:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   13f90:	e0bfff17 	ldw	r2,-4(fp)
   13f94:	1000010e 	bge	r2,zero,13f9c <alt_up_character_lcd_shift_cursor+0x44>
   13f98:	0085c83a 	sub	r2,zero,r2
   13f9c:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   13fa0:	00000406 	br	13fb4 <alt_up_character_lcd_shift_cursor+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   13fa4:	e0bffd43 	ldbu	r2,-11(fp)
   13fa8:	100b883a 	mov	r5,r2
   13fac:	e13ffe17 	ldw	r4,-8(fp)
   13fb0:	0013cec0 	call	13cec <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   13fb4:	e0bffd03 	ldbu	r2,-12(fp)
   13fb8:	10ffffc4 	addi	r3,r2,-1
   13fbc:	e0fffd05 	stb	r3,-12(fp)
   13fc0:	10803fcc 	andi	r2,r2,255
   13fc4:	103ff71e 	bne	r2,zero,13fa4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013fa4>
   13fc8:	00000106 	br	13fd0 <alt_up_character_lcd_shift_cursor+0x78>

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
   13fcc:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   13fd0:	e037883a 	mov	sp,fp
   13fd4:	dfc00117 	ldw	ra,4(sp)
   13fd8:	df000017 	ldw	fp,0(sp)
   13fdc:	dec00204 	addi	sp,sp,8
   13fe0:	f800283a 	ret

00013fe4 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   13fe4:	defffb04 	addi	sp,sp,-20
   13fe8:	dfc00415 	stw	ra,16(sp)
   13fec:	df000315 	stw	fp,12(sp)
   13ff0:	df000304 	addi	fp,sp,12
   13ff4:	e13ffe15 	stw	r4,-8(fp)
   13ff8:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   13ffc:	e0bfff17 	ldw	r2,-4(fp)
   14000:	10001526 	beq	r2,zero,14058 <alt_up_character_lcd_shift_display+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   14004:	e0bfff17 	ldw	r2,-4(fp)
   14008:	0080020e 	bge	zero,r2,14014 <alt_up_character_lcd_shift_display+0x30>
   1400c:	00800704 	movi	r2,28
   14010:	00000106 	br	14018 <alt_up_character_lcd_shift_display+0x34>
   14014:	00800604 	movi	r2,24
   14018:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   1401c:	e0bfff17 	ldw	r2,-4(fp)
   14020:	1000010e 	bge	r2,zero,14028 <alt_up_character_lcd_shift_display+0x44>
   14024:	0085c83a 	sub	r2,zero,r2
   14028:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1402c:	00000406 	br	14040 <alt_up_character_lcd_shift_display+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   14030:	e0bffd43 	ldbu	r2,-11(fp)
   14034:	100b883a 	mov	r5,r2
   14038:	e13ffe17 	ldw	r4,-8(fp)
   1403c:	0013cec0 	call	13cec <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   14040:	e0bffd03 	ldbu	r2,-12(fp)
   14044:	10ffffc4 	addi	r3,r2,-1
   14048:	e0fffd05 	stb	r3,-12(fp)
   1404c:	10803fcc 	andi	r2,r2,255
   14050:	103ff71e 	bne	r2,zero,14030 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014030>
   14054:	00000106 	br	1405c <alt_up_character_lcd_shift_display+0x78>

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
   14058:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   1405c:	e037883a 	mov	sp,fp
   14060:	dfc00117 	ldw	ra,4(sp)
   14064:	df000017 	ldw	fp,0(sp)
   14068:	dec00204 	addi	sp,sp,8
   1406c:	f800283a 	ret

00014070 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
   14070:	defffa04 	addi	sp,sp,-24
   14074:	dfc00515 	stw	ra,20(sp)
   14078:	df000415 	stw	fp,16(sp)
   1407c:	df000404 	addi	fp,sp,16
   14080:	e13ffd15 	stw	r4,-12(fp)
   14084:	e17ffe15 	stw	r5,-8(fp)
   14088:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
   1408c:	e0bffe17 	ldw	r2,-8(fp)
   14090:	10800a28 	cmpgeui	r2,r2,40
   14094:	1000031e 	bne	r2,zero,140a4 <alt_up_character_lcd_erase_pos+0x34>
   14098:	e0bfff17 	ldw	r2,-4(fp)
   1409c:	108000b0 	cmpltui	r2,r2,2
   140a0:	1000021e 	bne	r2,zero,140ac <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
   140a4:	00bfffc4 	movi	r2,-1
   140a8:	00000f06 	br	140e8 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   140ac:	e17fff17 	ldw	r5,-4(fp)
   140b0:	e13ffe17 	ldw	r4,-8(fp)
   140b4:	0013c780 	call	13c78 <get_DDRAM_addr>
   140b8:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
   140bc:	e0bffc03 	ldbu	r2,-16(fp)
   140c0:	100b883a 	mov	r5,r2
   140c4:	e13ffd17 	ldw	r4,-12(fp)
   140c8:	0013cec0 	call	13cec <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
   140cc:	e0bffd17 	ldw	r2,-12(fp)
   140d0:	10800a17 	ldw	r2,40(r2)
   140d4:	10800044 	addi	r2,r2,1
   140d8:	1007883a 	mov	r3,r2
   140dc:	00800084 	movi	r2,2
   140e0:	18800025 	stbio	r2,0(r3)
	return 0;
   140e4:	0005883a 	mov	r2,zero
}
   140e8:	e037883a 	mov	sp,fp
   140ec:	dfc00117 	ldw	ra,4(sp)
   140f0:	df000017 	ldw	fp,0(sp)
   140f4:	dec00204 	addi	sp,sp,8
   140f8:	f800283a 	ret

000140fc <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
   140fc:	defffd04 	addi	sp,sp,-12
   14100:	dfc00215 	stw	ra,8(sp)
   14104:	df000115 	stw	fp,4(sp)
   14108:	df000104 	addi	fp,sp,4
   1410c:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
   14110:	01400304 	movi	r5,12
   14114:	e13fff17 	ldw	r4,-4(fp)
   14118:	0013cec0 	call	13cec <alt_up_character_lcd_send_cmd>
}
   1411c:	0001883a 	nop
   14120:	e037883a 	mov	sp,fp
   14124:	dfc00117 	ldw	ra,4(sp)
   14128:	df000017 	ldw	fp,0(sp)
   1412c:	dec00204 	addi	sp,sp,8
   14130:	f800283a 	ret

00014134 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
   14134:	defffd04 	addi	sp,sp,-12
   14138:	dfc00215 	stw	ra,8(sp)
   1413c:	df000115 	stw	fp,4(sp)
   14140:	df000104 	addi	fp,sp,4
   14144:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
   14148:	014003c4 	movi	r5,15
   1414c:	e13fff17 	ldw	r4,-4(fp)
   14150:	0013cec0 	call	13cec <alt_up_character_lcd_send_cmd>
}
   14154:	0001883a 	nop
   14158:	e037883a 	mov	sp,fp
   1415c:	dfc00117 	ldw	ra,4(sp)
   14160:	df000017 	ldw	fp,0(sp)
   14164:	dec00204 	addi	sp,sp,8
   14168:	f800283a 	ret

0001416c <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
   1416c:	defffd04 	addi	sp,sp,-12
   14170:	df000215 	stw	fp,8(sp)
   14174:	df000204 	addi	fp,sp,8
   14178:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1417c:	e0bfff17 	ldw	r2,-4(fp)
   14180:	10800a17 	ldw	r2,40(r2)
   14184:	10800104 	addi	r2,r2,4
   14188:	10800037 	ldwio	r2,0(r2)
   1418c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
   14190:	e0bffe17 	ldw	r2,-8(fp)
   14194:	10800054 	ori	r2,r2,1
   14198:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   1419c:	e0bfff17 	ldw	r2,-4(fp)
   141a0:	10800a17 	ldw	r2,40(r2)
   141a4:	10800104 	addi	r2,r2,4
   141a8:	1007883a 	mov	r3,r2
   141ac:	e0bffe17 	ldw	r2,-8(fp)
   141b0:	18800035 	stwio	r2,0(r3)
}
   141b4:	0001883a 	nop
   141b8:	e037883a 	mov	sp,fp
   141bc:	df000017 	ldw	fp,0(sp)
   141c0:	dec00104 	addi	sp,sp,4
   141c4:	f800283a 	ret

000141c8 <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
   141c8:	defffd04 	addi	sp,sp,-12
   141cc:	df000215 	stw	fp,8(sp)
   141d0:	df000204 	addi	fp,sp,8
   141d4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   141d8:	e0bfff17 	ldw	r2,-4(fp)
   141dc:	10800a17 	ldw	r2,40(r2)
   141e0:	10800104 	addi	r2,r2,4
   141e4:	10800037 	ldwio	r2,0(r2)
   141e8:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
   141ec:	e0fffe17 	ldw	r3,-8(fp)
   141f0:	00bfff84 	movi	r2,-2
   141f4:	1884703a 	and	r2,r3,r2
   141f8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   141fc:	e0bfff17 	ldw	r2,-4(fp)
   14200:	10800a17 	ldw	r2,40(r2)
   14204:	10800104 	addi	r2,r2,4
   14208:	1007883a 	mov	r3,r2
   1420c:	e0bffe17 	ldw	r2,-8(fp)
   14210:	18800035 	stwio	r2,0(r3)
}
   14214:	0001883a 	nop
   14218:	e037883a 	mov	sp,fp
   1421c:	df000017 	ldw	fp,0(sp)
   14220:	dec00104 	addi	sp,sp,4
   14224:	f800283a 	ret

00014228 <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
   14228:	defffd04 	addi	sp,sp,-12
   1422c:	df000215 	stw	fp,8(sp)
   14230:	df000204 	addi	fp,sp,8
   14234:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   14238:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
   1423c:	e0bfff17 	ldw	r2,-4(fp)
   14240:	10800a17 	ldw	r2,40(r2)
   14244:	10800084 	addi	r2,r2,2
   14248:	1080002b 	ldhuio	r2,0(r2)
   1424c:	10bfffcc 	andi	r2,r2,65535
   14250:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
   14254:	e0bffe0b 	ldhu	r2,-8(fp)
}
   14258:	e037883a 	mov	sp,fp
   1425c:	df000017 	ldw	fp,0(sp)
   14260:	dec00104 	addi	sp,sp,4
   14264:	f800283a 	ret

00014268 <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
   14268:	defffd04 	addi	sp,sp,-12
   1426c:	df000215 	stw	fp,8(sp)
   14270:	df000204 	addi	fp,sp,8
   14274:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   14278:	e0bfff17 	ldw	r2,-4(fp)
   1427c:	10800a17 	ldw	r2,40(r2)
   14280:	10800104 	addi	r2,r2,4
   14284:	10800037 	ldwio	r2,0(r2)
   14288:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
   1428c:	e0bffe17 	ldw	r2,-8(fp)
   14290:	1004d43a 	srli	r2,r2,16
}
   14294:	e037883a 	mov	sp,fp
   14298:	df000017 	ldw	fp,0(sp)
   1429c:	dec00104 	addi	sp,sp,4
   142a0:	f800283a 	ret

000142a4 <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
   142a4:	defffd04 	addi	sp,sp,-12
   142a8:	df000215 	stw	fp,8(sp)
   142ac:	df000204 	addi	fp,sp,8
   142b0:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
   142b4:	e0bfff17 	ldw	r2,-4(fp)
   142b8:	1080800c 	andi	r2,r2,512
   142bc:	1004d27a 	srli	r2,r2,9
   142c0:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   142c4:	e0bffe17 	ldw	r2,-8(fp)
   142c8:	10000226 	beq	r2,zero,142d4 <alt_up_irda_check_parity+0x30>
   142cc:	00bfffc4 	movi	r2,-1
   142d0:	00000106 	br	142d8 <alt_up_irda_check_parity+0x34>
   142d4:	0005883a 	mov	r2,zero
}
   142d8:	e037883a 	mov	sp,fp
   142dc:	df000017 	ldw	fp,0(sp)
   142e0:	dec00104 	addi	sp,sp,4
   142e4:	f800283a 	ret

000142e8 <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
   142e8:	defffd04 	addi	sp,sp,-12
   142ec:	df000215 	stw	fp,8(sp)
   142f0:	df000204 	addi	fp,sp,8
   142f4:	e13ffe15 	stw	r4,-8(fp)
   142f8:	2805883a 	mov	r2,r5
   142fc:	e0bfff05 	stb	r2,-4(fp)
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
   14300:	e0bffe17 	ldw	r2,-8(fp)
   14304:	10800a17 	ldw	r2,40(r2)
   14308:	1007883a 	mov	r3,r2
   1430c:	e0bfff03 	ldbu	r2,-4(fp)
   14310:	18800035 	stwio	r2,0(r3)
	return 0;
   14314:	0005883a 	mov	r2,zero
}
   14318:	e037883a 	mov	sp,fp
   1431c:	df000017 	ldw	fp,0(sp)
   14320:	dec00104 	addi	sp,sp,4
   14324:	f800283a 	ret

00014328 <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
   14328:	defffa04 	addi	sp,sp,-24
   1432c:	dfc00515 	stw	ra,20(sp)
   14330:	df000415 	stw	fp,16(sp)
   14334:	df000404 	addi	fp,sp,16
   14338:	e13ffd15 	stw	r4,-12(fp)
   1433c:	e17ffe15 	stw	r5,-8(fp)
   14340:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
   14344:	e0bffd17 	ldw	r2,-12(fp)
   14348:	10800a17 	ldw	r2,40(r2)
   1434c:	10800037 	ldwio	r2,0(r2)
   14350:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
   14354:	e0bffc17 	ldw	r2,-16(fp)
   14358:	1007883a 	mov	r3,r2
   1435c:	e0bffe17 	ldw	r2,-8(fp)
   14360:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
   14364:	e13ffc17 	ldw	r4,-16(fp)
   14368:	00142a40 	call	142a4 <alt_up_irda_check_parity>
   1436c:	1007883a 	mov	r3,r2
   14370:	e0bfff17 	ldw	r2,-4(fp)
   14374:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
   14378:	e0bffc17 	ldw	r2,-16(fp)
   1437c:	10a0000c 	andi	r2,r2,32768
   14380:	1004d3fa 	srli	r2,r2,15
   14384:	10bfffc4 	addi	r2,r2,-1
}
   14388:	e037883a 	mov	sp,fp
   1438c:	dfc00117 	ldw	ra,4(sp)
   14390:	df000017 	ldw	fp,0(sp)
   14394:	dec00204 	addi	sp,sp,8
   14398:	f800283a 	ret

0001439c <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
   1439c:	defff804 	addi	sp,sp,-32
   143a0:	dfc00715 	stw	ra,28(sp)
   143a4:	df000615 	stw	fp,24(sp)
   143a8:	df000604 	addi	fp,sp,24
   143ac:	e13ffd15 	stw	r4,-12(fp)
   143b0:	e17ffe15 	stw	r5,-8(fp)
   143b4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   143b8:	e0bffd17 	ldw	r2,-12(fp)
   143bc:	10800017 	ldw	r2,0(r2)
   143c0:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   143c4:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   143c8:	00000c06 	br	143fc <alt_up_irda_read_fd+0x60>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
   143cc:	e0bffe17 	ldw	r2,-8(fp)
   143d0:	10c00044 	addi	r3,r2,1
   143d4:	e0fffe15 	stw	r3,-8(fp)
   143d8:	e0fffc04 	addi	r3,fp,-16
   143dc:	180d883a 	mov	r6,r3
   143e0:	100b883a 	mov	r5,r2
   143e4:	e13ffb17 	ldw	r4,-20(fp)
   143e8:	00143280 	call	14328 <alt_up_irda_read_data>
   143ec:	1000081e 	bne	r2,zero,14410 <alt_up_irda_read_fd+0x74>
			count++;
   143f0:	e0bffa17 	ldw	r2,-24(fp)
   143f4:	10800044 	addi	r2,r2,1
   143f8:	e0bffa15 	stw	r2,-24(fp)
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   143fc:	e0bfff17 	ldw	r2,-4(fp)
   14400:	10ffffc4 	addi	r3,r2,-1
   14404:	e0ffff15 	stw	r3,-4(fp)
   14408:	103ff01e 	bne	r2,zero,143cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70143cc>
   1440c:	00000106 	br	14414 <alt_up_irda_read_fd+0x78>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
   14410:	0001883a 	nop
	}
	return count;
   14414:	e0bffa17 	ldw	r2,-24(fp)
}
   14418:	e037883a 	mov	sp,fp
   1441c:	dfc00117 	ldw	ra,4(sp)
   14420:	df000017 	ldw	fp,0(sp)
   14424:	dec00204 	addi	sp,sp,8
   14428:	f800283a 	ret

0001442c <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1442c:	defff904 	addi	sp,sp,-28
   14430:	dfc00615 	stw	ra,24(sp)
   14434:	df000515 	stw	fp,20(sp)
   14438:	df000504 	addi	fp,sp,20
   1443c:	e13ffd15 	stw	r4,-12(fp)
   14440:	e17ffe15 	stw	r5,-8(fp)
   14444:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   14448:	e0bffd17 	ldw	r2,-12(fp)
   1444c:	10800017 	ldw	r2,0(r2)
   14450:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   14454:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   14458:	00000c06 	br	1448c <alt_up_irda_write_fd+0x60>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
   1445c:	e0bffe17 	ldw	r2,-8(fp)
   14460:	10c00044 	addi	r3,r2,1
   14464:	e0fffe15 	stw	r3,-8(fp)
   14468:	10800003 	ldbu	r2,0(r2)
   1446c:	10803fcc 	andi	r2,r2,255
   14470:	100b883a 	mov	r5,r2
   14474:	e13ffc17 	ldw	r4,-16(fp)
   14478:	00142e80 	call	142e8 <alt_up_irda_write_data>
   1447c:	1000081e 	bne	r2,zero,144a0 <alt_up_irda_write_fd+0x74>
			count++;
   14480:	e0bffb17 	ldw	r2,-20(fp)
   14484:	10800044 	addi	r2,r2,1
   14488:	e0bffb15 	stw	r2,-20(fp)

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
   1448c:	e0bfff17 	ldw	r2,-4(fp)
   14490:	10ffffc4 	addi	r3,r2,-1
   14494:	e0ffff15 	stw	r3,-4(fp)
   14498:	103ff01e 	bne	r2,zero,1445c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701445c>
   1449c:	00000106 	br	144a4 <alt_up_irda_write_fd+0x78>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
			count++;
		else
			break;
   144a0:	0001883a 	nop
	}
	return count;
   144a4:	e0bffb17 	ldw	r2,-20(fp)
}
   144a8:	e037883a 	mov	sp,fp
   144ac:	dfc00117 	ldw	ra,4(sp)
   144b0:	df000017 	ldw	fp,0(sp)
   144b4:	dec00204 	addi	sp,sp,8
   144b8:	f800283a 	ret

000144bc <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
   144bc:	defffc04 	addi	sp,sp,-16
   144c0:	dfc00315 	stw	ra,12(sp)
   144c4:	df000215 	stw	fp,8(sp)
   144c8:	df000204 	addi	fp,sp,8
   144cc:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
   144d0:	d1600804 	addi	r5,gp,-32736
   144d4:	e13fff17 	ldw	r4,-4(fp)
   144d8:	00160d80 	call	160d8 <alt_find_dev>
   144dc:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   144e0:	e0bffe17 	ldw	r2,-8(fp)
}
   144e4:	e037883a 	mov	sp,fp
   144e8:	dfc00117 	ldw	ra,4(sp)
   144ec:	df000017 	ldw	fp,0(sp)
   144f0:	dec00204 	addi	sp,sp,8
   144f4:	f800283a 	ret

000144f8 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
   144f8:	defffd04 	addi	sp,sp,-12
   144fc:	df000215 	stw	fp,8(sp)
   14500:	df000204 	addi	fp,sp,8
   14504:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
   14508:	e0bfff17 	ldw	r2,-4(fp)
   1450c:	1080400c 	andi	r2,r2,256
   14510:	1004d23a 	srli	r2,r2,8
   14514:	e0bffe05 	stb	r2,-8(fp)
	return ri;
   14518:	e0bffe03 	ldbu	r2,-8(fp)
}
   1451c:	e037883a 	mov	sp,fp
   14520:	df000017 	ldw	fp,0(sp)
   14524:	dec00104 	addi	sp,sp,4
   14528:	f800283a 	ret

0001452c <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
   1452c:	defffd04 	addi	sp,sp,-12
   14530:	df000215 	stw	fp,8(sp)
   14534:	df000204 	addi	fp,sp,8
   14538:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
   1453c:	e0bfff17 	ldw	r2,-4(fp)
   14540:	1080004c 	andi	r2,r2,1
   14544:	e0bffe05 	stb	r2,-8(fp)
	return re;
   14548:	e0bffe03 	ldbu	r2,-8(fp)
}
   1454c:	e037883a 	mov	sp,fp
   14550:	df000017 	ldw	fp,0(sp)
   14554:	dec00104 	addi	sp,sp,4
   14558:	f800283a 	ret

0001455c <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
   1455c:	defffd04 	addi	sp,sp,-12
   14560:	df000215 	stw	fp,8(sp)
   14564:	df000204 	addi	fp,sp,8
   14568:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
   1456c:	e0bfff17 	ldw	r2,-4(fp)
   14570:	1081000c 	andi	r2,r2,1024
   14574:	1004d2ba 	srli	r2,r2,10
   14578:	e0bffe05 	stb	r2,-8(fp)
	return re;
   1457c:	e0bffe03 	ldbu	r2,-8(fp)
}
   14580:	e037883a 	mov	sp,fp
   14584:	df000017 	ldw	fp,0(sp)
   14588:	dec00104 	addi	sp,sp,4
   1458c:	f800283a 	ret

00014590 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
   14590:	defffd04 	addi	sp,sp,-12
   14594:	df000215 	stw	fp,8(sp)
   14598:	df000204 	addi	fp,sp,8
   1459c:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
   145a0:	e0bfff17 	ldw	r2,-4(fp)
   145a4:	1004d43a 	srli	r2,r2,16
   145a8:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
   145ac:	e0bffe0b 	ldhu	r2,-8(fp)
}
   145b0:	e037883a 	mov	sp,fp
   145b4:	df000017 	ldw	fp,0(sp)
   145b8:	dec00104 	addi	sp,sp,4
   145bc:	f800283a 	ret

000145c0 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
   145c0:	defffd04 	addi	sp,sp,-12
   145c4:	df000215 	stw	fp,8(sp)
   145c8:	df000204 	addi	fp,sp,8
   145cc:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
   145d0:	e0bfff17 	ldw	r2,-4(fp)
   145d4:	10a0000c 	andi	r2,r2,32768
   145d8:	1004d3fa 	srli	r2,r2,15
   145dc:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
   145e0:	e0bffe03 	ldbu	r2,-8(fp)
}
   145e4:	e037883a 	mov	sp,fp
   145e8:	df000017 	ldw	fp,0(sp)
   145ec:	dec00104 	addi	sp,sp,4
   145f0:	f800283a 	ret

000145f4 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
   145f4:	defffd04 	addi	sp,sp,-12
   145f8:	df000215 	stw	fp,8(sp)
   145fc:	df000204 	addi	fp,sp,8
   14600:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
   14604:	e0bfff17 	ldw	r2,-4(fp)
   14608:	e0bffe05 	stb	r2,-8(fp)
	return data;
   1460c:	e0bffe03 	ldbu	r2,-8(fp)
}
   14610:	e037883a 	mov	sp,fp
   14614:	df000017 	ldw	fp,0(sp)
   14618:	dec00104 	addi	sp,sp,4
   1461c:	f800283a 	ret

00014620 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
   14620:	defffb04 	addi	sp,sp,-20
   14624:	dfc00415 	stw	ra,16(sp)
   14628:	df000315 	stw	fp,12(sp)
   1462c:	df000304 	addi	fp,sp,12
   14630:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
   14634:	01403fc4 	movi	r5,255
   14638:	e13fff17 	ldw	r4,-4(fp)
   1463c:	00148800 	call	14880 <alt_up_ps2_write_data_byte_with_ack>
   14640:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
   14644:	e0bffd17 	ldw	r2,-12(fp)
   14648:	1000211e 	bne	r2,zero,146d0 <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   1464c:	e0bffe04 	addi	r2,fp,-8
   14650:	100b883a 	mov	r5,r2
   14654:	e13fff17 	ldw	r4,-4(fp)
   14658:	00148e40 	call	148e4 <alt_up_ps2_read_data_byte_timeout>
   1465c:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
   14660:	e0bffd17 	ldw	r2,-12(fp)
   14664:	10001a1e 	bne	r2,zero,146d0 <alt_up_ps2_init+0xb0>
   14668:	e0bffe03 	ldbu	r2,-8(fp)
   1466c:	10803fcc 	andi	r2,r2,255
   14670:	10802a98 	cmpnei	r2,r2,170
   14674:	1000161e 	bne	r2,zero,146d0 <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   14678:	e0bffe04 	addi	r2,fp,-8
   1467c:	100b883a 	mov	r5,r2
   14680:	e13fff17 	ldw	r4,-4(fp)
   14684:	00148e40 	call	148e4 <alt_up_ps2_read_data_byte_timeout>
   14688:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
   1468c:	e0bffd17 	ldw	r2,-12(fp)
   14690:	10bfe318 	cmpnei	r2,r2,-116
   14694:	1000041e 	bne	r2,zero,146a8 <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
   14698:	e0bfff17 	ldw	r2,-4(fp)
   1469c:	00c00044 	movi	r3,1
   146a0:	10c00d15 	stw	r3,52(r2)
				ps2->device_type = PS2_MOUSE;
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
			}
		}
	}
}
   146a4:	00000a06 	br	146d0 <alt_up_ps2_init+0xb0>
			if (status == -ETIMEDOUT)
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
			}
			else if (status == 0 && byte == 0x00)
   146a8:	e0bffd17 	ldw	r2,-12(fp)
   146ac:	1000081e 	bne	r2,zero,146d0 <alt_up_ps2_init+0xb0>
   146b0:	e0bffe03 	ldbu	r2,-8(fp)
   146b4:	10803fcc 	andi	r2,r2,255
   146b8:	1000051e 	bne	r2,zero,146d0 <alt_up_ps2_init+0xb0>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
   146bc:	e0bfff17 	ldw	r2,-4(fp)
   146c0:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
   146c4:	01403d04 	movi	r5,244
   146c8:	e13fff17 	ldw	r4,-4(fp)
   146cc:	00147a40 	call	147a4 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
   146d0:	0001883a 	nop
   146d4:	e037883a 	mov	sp,fp
   146d8:	dfc00117 	ldw	ra,4(sp)
   146dc:	df000017 	ldw	fp,0(sp)
   146e0:	dec00204 	addi	sp,sp,8
   146e4:	f800283a 	ret

000146e8 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
   146e8:	defffd04 	addi	sp,sp,-12
   146ec:	df000215 	stw	fp,8(sp)
   146f0:	df000204 	addi	fp,sp,8
   146f4:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   146f8:	e0bfff17 	ldw	r2,-4(fp)
   146fc:	10800a17 	ldw	r2,40(r2)
   14700:	10800104 	addi	r2,r2,4
   14704:	10800037 	ldwio	r2,0(r2)
   14708:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   1470c:	e0bffe17 	ldw	r2,-8(fp)
   14710:	10800054 	ori	r2,r2,1
   14714:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   14718:	e0bfff17 	ldw	r2,-4(fp)
   1471c:	10800a17 	ldw	r2,40(r2)
   14720:	10800104 	addi	r2,r2,4
   14724:	1007883a 	mov	r3,r2
   14728:	e0bffe17 	ldw	r2,-8(fp)
   1472c:	18800035 	stwio	r2,0(r3)
}
   14730:	0001883a 	nop
   14734:	e037883a 	mov	sp,fp
   14738:	df000017 	ldw	fp,0(sp)
   1473c:	dec00104 	addi	sp,sp,4
   14740:	f800283a 	ret

00014744 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
   14744:	defffd04 	addi	sp,sp,-12
   14748:	df000215 	stw	fp,8(sp)
   1474c:	df000204 	addi	fp,sp,8
   14750:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   14754:	e0bfff17 	ldw	r2,-4(fp)
   14758:	10800a17 	ldw	r2,40(r2)
   1475c:	10800104 	addi	r2,r2,4
   14760:	10800037 	ldwio	r2,0(r2)
   14764:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   14768:	e0fffe17 	ldw	r3,-8(fp)
   1476c:	00bfff84 	movi	r2,-2
   14770:	1884703a 	and	r2,r3,r2
   14774:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   14778:	e0bfff17 	ldw	r2,-4(fp)
   1477c:	10800a17 	ldw	r2,40(r2)
   14780:	10800104 	addi	r2,r2,4
   14784:	1007883a 	mov	r3,r2
   14788:	e0bffe17 	ldw	r2,-8(fp)
   1478c:	18800035 	stwio	r2,0(r3)
}
   14790:	0001883a 	nop
   14794:	e037883a 	mov	sp,fp
   14798:	df000017 	ldw	fp,0(sp)
   1479c:	dec00104 	addi	sp,sp,4
   147a0:	f800283a 	ret

000147a4 <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
   147a4:	defffb04 	addi	sp,sp,-20
   147a8:	dfc00415 	stw	ra,16(sp)
   147ac:	df000315 	stw	fp,12(sp)
   147b0:	df000304 	addi	fp,sp,12
   147b4:	e13ffe15 	stw	r4,-8(fp)
   147b8:	2805883a 	mov	r2,r5
   147bc:	e0bfff05 	stb	r2,-4(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
   147c0:	e0bffe17 	ldw	r2,-8(fp)
   147c4:	10800a17 	ldw	r2,40(r2)
   147c8:	1007883a 	mov	r3,r2
   147cc:	e0bfff03 	ldbu	r2,-4(fp)
   147d0:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
   147d4:	e0bffe17 	ldw	r2,-8(fp)
   147d8:	10800a17 	ldw	r2,40(r2)
   147dc:	10800104 	addi	r2,r2,4
   147e0:	10800037 	ldwio	r2,0(r2)
   147e4:	e0bffd15 	stw	r2,-12(fp)
	if (read_CE_bit(ctrl_reg))
   147e8:	e13ffd17 	ldw	r4,-12(fp)
   147ec:	001455c0 	call	1455c <read_CE_bit>
   147f0:	10803fcc 	andi	r2,r2,255
   147f4:	10000226 	beq	r2,zero,14800 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
   147f8:	00bffec4 	movi	r2,-5
   147fc:	00000106 	br	14804 <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
   14800:	0005883a 	mov	r2,zero
}
   14804:	e037883a 	mov	sp,fp
   14808:	dfc00117 	ldw	ra,4(sp)
   1480c:	df000017 	ldw	fp,0(sp)
   14810:	dec00204 	addi	sp,sp,8
   14814:	f800283a 	ret

00014818 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
   14818:	defffc04 	addi	sp,sp,-16
   1481c:	dfc00315 	stw	ra,12(sp)
   14820:	df000215 	stw	fp,8(sp)
   14824:	df000204 	addi	fp,sp,8
   14828:	e13fff15 	stw	r4,-4(fp)
	unsigned char data = 0;
   1482c:	e03ffe45 	stb	zero,-7(fp)
	unsigned char status = 0;
   14830:	e03ffe05 	stb	zero,-8(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
   14834:	e0bffe44 	addi	r2,fp,-7
   14838:	100b883a 	mov	r5,r2
   1483c:	e13fff17 	ldw	r4,-4(fp)
   14840:	00148e40 	call	148e4 <alt_up_ps2_read_data_byte_timeout>
   14844:	e0bffe05 	stb	r2,-8(fp)
		if ( status == 0)
   14848:	e0bffe03 	ldbu	r2,-8(fp)
   1484c:	1000061e 	bne	r2,zero,14868 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
   14850:	e0bffe43 	ldbu	r2,-7(fp)
   14854:	10803fcc 	andi	r2,r2,255
   14858:	10803e98 	cmpnei	r2,r2,250
   1485c:	103ff51e 	bne	r2,zero,14834 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014834>
				return 0;
   14860:	0005883a 	mov	r2,zero
   14864:	00000106 	br	1486c <alt_up_ps2_wait_for_ack+0x54>
		}
		else 
		{
			return status;
   14868:	e0bffe03 	ldbu	r2,-8(fp)
		}
	} while(1);
	return -ETIMEDOUT;
}
   1486c:	e037883a 	mov	sp,fp
   14870:	dfc00117 	ldw	ra,4(sp)
   14874:	df000017 	ldw	fp,0(sp)
   14878:	dec00204 	addi	sp,sp,8
   1487c:	f800283a 	ret

00014880 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
   14880:	defffa04 	addi	sp,sp,-24
   14884:	dfc00515 	stw	ra,20(sp)
   14888:	df000415 	stw	fp,16(sp)
   1488c:	df000404 	addi	fp,sp,16
   14890:	e13ffe15 	stw	r4,-8(fp)
   14894:	2805883a 	mov	r2,r5
   14898:	e0bfff05 	stb	r2,-4(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
   1489c:	e0bfff03 	ldbu	r2,-4(fp)
   148a0:	100b883a 	mov	r5,r2
   148a4:	e13ffe17 	ldw	r4,-8(fp)
   148a8:	00147a40 	call	147a4 <alt_up_ps2_write_data_byte>
   148ac:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
   148b0:	e0bffc17 	ldw	r2,-16(fp)
   148b4:	10000226 	beq	r2,zero,148c0 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
   148b8:	e0bffc17 	ldw	r2,-16(fp)
   148bc:	00000406 	br	148d0 <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
   148c0:	e13ffe17 	ldw	r4,-8(fp)
   148c4:	00148180 	call	14818 <alt_up_ps2_wait_for_ack>
   148c8:	e0bffd15 	stw	r2,-12(fp)
	return ack_status;
   148cc:	e0bffd17 	ldw	r2,-12(fp)
}
   148d0:	e037883a 	mov	sp,fp
   148d4:	dfc00117 	ldw	ra,4(sp)
   148d8:	df000017 	ldw	fp,0(sp)
   148dc:	dec00204 	addi	sp,sp,8
   148e0:	f800283a 	ret

000148e4 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   148e4:	defffa04 	addi	sp,sp,-24
   148e8:	dfc00515 	stw	ra,20(sp)
   148ec:	df000415 	stw	fp,16(sp)
   148f0:	df000404 	addi	fp,sp,16
   148f4:	e13ffe15 	stw	r4,-8(fp)
   148f8:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   148fc:	e03ffd15 	stw	zero,-12(fp)
	unsigned int count = 0;
   14900:	e03ffc15 	stw	zero,-16(fp)
	do {
		count++;
   14904:	e0bffc17 	ldw	r2,-16(fp)
   14908:	10800044 	addi	r2,r2,1
   1490c:	e0bffc15 	stw	r2,-16(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   14910:	e0bffe17 	ldw	r2,-8(fp)
   14914:	10800a17 	ldw	r2,40(r2)
   14918:	10800037 	ldwio	r2,0(r2)
   1491c:	e0bffd15 	stw	r2,-12(fp)
		if (read_data_valid(data_reg))
   14920:	e13ffd17 	ldw	r4,-12(fp)
   14924:	00145c00 	call	145c0 <read_data_valid>
   14928:	10803fcc 	andi	r2,r2,255
   1492c:	10000726 	beq	r2,zero,1494c <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
   14930:	e13ffd17 	ldw	r4,-12(fp)
   14934:	00145f40 	call	145f4 <read_data_byte>
   14938:	1007883a 	mov	r3,r2
   1493c:	e0bfff17 	ldw	r2,-4(fp)
   14940:	10c00005 	stb	r3,0(r2)
			return 0;
   14944:	0005883a 	mov	r2,zero
   14948:	00000806 	br	1496c <alt_up_ps2_read_data_byte_timeout+0x88>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
   1494c:	e0bffe17 	ldw	r2,-8(fp)
   14950:	10800c17 	ldw	r2,48(r2)
   14954:	103feb26 	beq	r2,zero,14904 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014904>
   14958:	e0bffe17 	ldw	r2,-8(fp)
   1495c:	10c00c17 	ldw	r3,48(r2)
   14960:	e0bffc17 	ldw	r2,-16(fp)
   14964:	18bfe72e 	bgeu	r3,r2,14904 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014904>
		{
			return -ETIMEDOUT;
   14968:	00bfe304 	movi	r2,-116
		}
	} while (1);
}
   1496c:	e037883a 	mov	sp,fp
   14970:	dfc00117 	ldw	ra,4(sp)
   14974:	df000017 	ldw	fp,0(sp)
   14978:	dec00204 	addi	sp,sp,8
   1497c:	f800283a 	ret

00014980 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   14980:	defffb04 	addi	sp,sp,-20
   14984:	dfc00415 	stw	ra,16(sp)
   14988:	df000315 	stw	fp,12(sp)
   1498c:	df000304 	addi	fp,sp,12
   14990:	e13ffe15 	stw	r4,-8(fp)
   14994:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   14998:	e03ffd15 	stw	zero,-12(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1499c:	e0bffe17 	ldw	r2,-8(fp)
   149a0:	10800a17 	ldw	r2,40(r2)
   149a4:	10800037 	ldwio	r2,0(r2)
   149a8:	e0bffd15 	stw	r2,-12(fp)
	if (read_data_valid(data_reg))
   149ac:	e13ffd17 	ldw	r4,-12(fp)
   149b0:	00145c00 	call	145c0 <read_data_valid>
   149b4:	10803fcc 	andi	r2,r2,255
   149b8:	10000726 	beq	r2,zero,149d8 <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
   149bc:	e13ffd17 	ldw	r4,-12(fp)
   149c0:	00145f40 	call	145f4 <read_data_byte>
   149c4:	1007883a 	mov	r3,r2
   149c8:	e0bfff17 	ldw	r2,-4(fp)
   149cc:	10c00005 	stb	r3,0(r2)
		return 0;
   149d0:	0005883a 	mov	r2,zero
   149d4:	00000106 	br	149dc <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
   149d8:	00bfffc4 	movi	r2,-1
}
   149dc:	e037883a 	mov	sp,fp
   149e0:	dfc00117 	ldw	ra,4(sp)
   149e4:	df000017 	ldw	fp,0(sp)
   149e8:	dec00204 	addi	sp,sp,8
   149ec:	f800283a 	ret

000149f0 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
   149f0:	defffb04 	addi	sp,sp,-20
   149f4:	dfc00415 	stw	ra,16(sp)
   149f8:	df000315 	stw	fp,12(sp)
   149fc:	df000304 	addi	fp,sp,12
   14a00:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
   14a04:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int data_reg = 0;
   14a08:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   14a0c:	e0bfff17 	ldw	r2,-4(fp)
   14a10:	10800a17 	ldw	r2,40(r2)
   14a14:	10800037 	ldwio	r2,0(r2)
   14a18:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
   14a1c:	e13ffe17 	ldw	r4,-8(fp)
   14a20:	00145900 	call	14590 <read_num_bytes_available>
   14a24:	e0bffd0d 	sth	r2,-12(fp)
	} while (num > 0);
   14a28:	e0bffd0b 	ldhu	r2,-12(fp)
   14a2c:	103ff71e 	bne	r2,zero,14a0c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014a0c>
}
   14a30:	0001883a 	nop
   14a34:	e037883a 	mov	sp,fp
   14a38:	dfc00117 	ldw	ra,4(sp)
   14a3c:	df000017 	ldw	fp,0(sp)
   14a40:	dec00204 	addi	sp,sp,8
   14a44:	f800283a 	ret

00014a48 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
   14a48:	defff804 	addi	sp,sp,-32
   14a4c:	dfc00715 	stw	ra,28(sp)
   14a50:	df000615 	stw	fp,24(sp)
   14a54:	df000604 	addi	fp,sp,24
   14a58:	e13ffd15 	stw	r4,-12(fp)
   14a5c:	e17ffe15 	stw	r5,-8(fp)
   14a60:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   14a64:	e0bffd17 	ldw	r2,-12(fp)
   14a68:	10800017 	ldw	r2,0(r2)
   14a6c:	e0bffa15 	stw	r2,-24(fp)
	int status = 0;
   14a70:	e03ffb15 	stw	zero,-20(fp)
	int count = 0;
   14a74:	e03ffc15 	stw	zero,-16(fp)
	while (count < len);
   14a78:	e0fffc17 	ldw	r3,-16(fp)
   14a7c:	e0bfff17 	ldw	r2,-4(fp)
   14a80:	18bffd16 	blt	r3,r2,14a78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014a78>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
   14a84:	e0bffe17 	ldw	r2,-8(fp)
   14a88:	10c00044 	addi	r3,r2,1
   14a8c:	e0fffe15 	stw	r3,-8(fp)
   14a90:	100b883a 	mov	r5,r2
   14a94:	e13ffa17 	ldw	r4,-24(fp)
   14a98:	00148e40 	call	148e4 <alt_up_ps2_read_data_byte_timeout>
   14a9c:	e0bffb15 	stw	r2,-20(fp)
		if (status!=0)
   14aa0:	e0bffb17 	ldw	r2,-20(fp)
   14aa4:	10000226 	beq	r2,zero,14ab0 <alt_up_ps2_read_fd+0x68>
			return count;
   14aa8:	e0bffc17 	ldw	r2,-16(fp)
   14aac:	00000406 	br	14ac0 <alt_up_ps2_read_fd+0x78>
		count++;
   14ab0:	e0bffc17 	ldw	r2,-16(fp)
   14ab4:	10800044 	addi	r2,r2,1
   14ab8:	e0bffc15 	stw	r2,-16(fp)
	} 
	return count;
   14abc:	e0bffc17 	ldw	r2,-16(fp)
}
   14ac0:	e037883a 	mov	sp,fp
   14ac4:	dfc00117 	ldw	ra,4(sp)
   14ac8:	df000017 	ldw	fp,0(sp)
   14acc:	dec00204 	addi	sp,sp,8
   14ad0:	f800283a 	ret

00014ad4 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
   14ad4:	defff804 	addi	sp,sp,-32
   14ad8:	dfc00715 	stw	ra,28(sp)
   14adc:	df000615 	stw	fp,24(sp)
   14ae0:	df000604 	addi	fp,sp,24
   14ae4:	e13ffd15 	stw	r4,-12(fp)
   14ae8:	e17ffe15 	stw	r5,-8(fp)
   14aec:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   14af0:	e0bffd17 	ldw	r2,-12(fp)
   14af4:	10800017 	ldw	r2,0(r2)
   14af8:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
   14afc:	e03ffc15 	stw	zero,-16(fp)
	int count = 0;
   14b00:	e03ffa15 	stw	zero,-24(fp)
	while (count < len)
   14b04:	00001006 	br	14b48 <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
   14b08:	e0bffe17 	ldw	r2,-8(fp)
   14b0c:	10c00044 	addi	r3,r2,1
   14b10:	e0fffe15 	stw	r3,-8(fp)
   14b14:	10800003 	ldbu	r2,0(r2)
   14b18:	10803fcc 	andi	r2,r2,255
   14b1c:	100b883a 	mov	r5,r2
   14b20:	e13ffb17 	ldw	r4,-20(fp)
   14b24:	00147a40 	call	147a4 <alt_up_ps2_write_data_byte>
   14b28:	e0bffc15 	stw	r2,-16(fp)
		if (status!=0)
   14b2c:	e0bffc17 	ldw	r2,-16(fp)
   14b30:	10000226 	beq	r2,zero,14b3c <alt_up_ps2_write_fd+0x68>
			return count;
   14b34:	e0bffa17 	ldw	r2,-24(fp)
   14b38:	00000706 	br	14b58 <alt_up_ps2_write_fd+0x84>
		count++;
   14b3c:	e0bffa17 	ldw	r2,-24(fp)
   14b40:	10800044 	addi	r2,r2,1
   14b44:	e0bffa15 	stw	r2,-24(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
   14b48:	e0fffa17 	ldw	r3,-24(fp)
   14b4c:	e0bfff17 	ldw	r2,-4(fp)
   14b50:	18bfed16 	blt	r3,r2,14b08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014b08>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
   14b54:	e0bffa17 	ldw	r2,-24(fp)
}
   14b58:	e037883a 	mov	sp,fp
   14b5c:	dfc00117 	ldw	ra,4(sp)
   14b60:	df000017 	ldw	fp,0(sp)
   14b64:	dec00204 	addi	sp,sp,8
   14b68:	f800283a 	ret

00014b6c <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
   14b6c:	defffc04 	addi	sp,sp,-16
   14b70:	dfc00315 	stw	ra,12(sp)
   14b74:	df000215 	stw	fp,8(sp)
   14b78:	df000204 	addi	fp,sp,8
   14b7c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
   14b80:	d1600804 	addi	r5,gp,-32736
   14b84:	e13fff17 	ldw	r4,-4(fp)
   14b88:	00160d80 	call	160d8 <alt_find_dev>
   14b8c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   14b90:	e0bffe17 	ldw	r2,-8(fp)
}
   14b94:	e037883a 	mov	sp,fp
   14b98:	dfc00117 	ldw	ra,4(sp)
   14b9c:	df000017 	ldw	fp,0(sp)
   14ba0:	dec00204 	addi	sp,sp,8
   14ba4:	f800283a 	ret

00014ba8 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
   14ba8:	defffd04 	addi	sp,sp,-12
   14bac:	df000215 	stw	fp,8(sp)
   14bb0:	df000204 	addi	fp,sp,8
   14bb4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   14bb8:	e0bfff17 	ldw	r2,-4(fp)
   14bbc:	10800a17 	ldw	r2,40(r2)
   14bc0:	10800104 	addi	r2,r2,4
   14bc4:	10800037 	ldwio	r2,0(r2)
   14bc8:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
   14bcc:	e0bffe17 	ldw	r2,-8(fp)
   14bd0:	10800054 	ori	r2,r2,1
   14bd4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   14bd8:	e0bfff17 	ldw	r2,-4(fp)
   14bdc:	10800a17 	ldw	r2,40(r2)
   14be0:	10800104 	addi	r2,r2,4
   14be4:	1007883a 	mov	r3,r2
   14be8:	e0bffe17 	ldw	r2,-8(fp)
   14bec:	18800035 	stwio	r2,0(r3)
}
   14bf0:	0001883a 	nop
   14bf4:	e037883a 	mov	sp,fp
   14bf8:	df000017 	ldw	fp,0(sp)
   14bfc:	dec00104 	addi	sp,sp,4
   14c00:	f800283a 	ret

00014c04 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
   14c04:	defffd04 	addi	sp,sp,-12
   14c08:	df000215 	stw	fp,8(sp)
   14c0c:	df000204 	addi	fp,sp,8
   14c10:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   14c14:	e0bfff17 	ldw	r2,-4(fp)
   14c18:	10800a17 	ldw	r2,40(r2)
   14c1c:	10800104 	addi	r2,r2,4
   14c20:	10800037 	ldwio	r2,0(r2)
   14c24:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
   14c28:	e0fffe17 	ldw	r3,-8(fp)
   14c2c:	00bfff84 	movi	r2,-2
   14c30:	1884703a 	and	r2,r3,r2
   14c34:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   14c38:	e0bfff17 	ldw	r2,-4(fp)
   14c3c:	10800a17 	ldw	r2,40(r2)
   14c40:	10800104 	addi	r2,r2,4
   14c44:	1007883a 	mov	r3,r2
   14c48:	e0bffe17 	ldw	r2,-8(fp)
   14c4c:	18800035 	stwio	r2,0(r3)
}
   14c50:	0001883a 	nop
   14c54:	e037883a 	mov	sp,fp
   14c58:	df000017 	ldw	fp,0(sp)
   14c5c:	dec00104 	addi	sp,sp,4
   14c60:	f800283a 	ret

00014c64 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
   14c64:	defffd04 	addi	sp,sp,-12
   14c68:	df000215 	stw	fp,8(sp)
   14c6c:	df000204 	addi	fp,sp,8
   14c70:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   14c74:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
   14c78:	e0bfff17 	ldw	r2,-4(fp)
   14c7c:	10800a17 	ldw	r2,40(r2)
   14c80:	10800084 	addi	r2,r2,2
   14c84:	1080002b 	ldhuio	r2,0(r2)
   14c88:	10bfffcc 	andi	r2,r2,65535
   14c8c:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
   14c90:	e0bffe0b 	ldhu	r2,-8(fp)
}
   14c94:	e037883a 	mov	sp,fp
   14c98:	df000017 	ldw	fp,0(sp)
   14c9c:	dec00104 	addi	sp,sp,4
   14ca0:	f800283a 	ret

00014ca4 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
   14ca4:	defffd04 	addi	sp,sp,-12
   14ca8:	df000215 	stw	fp,8(sp)
   14cac:	df000204 	addi	fp,sp,8
   14cb0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   14cb4:	e0bfff17 	ldw	r2,-4(fp)
   14cb8:	10800a17 	ldw	r2,40(r2)
   14cbc:	10800104 	addi	r2,r2,4
   14cc0:	10800037 	ldwio	r2,0(r2)
   14cc4:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
   14cc8:	e0bffe17 	ldw	r2,-8(fp)
   14ccc:	1004d43a 	srli	r2,r2,16
}
   14cd0:	e037883a 	mov	sp,fp
   14cd4:	df000017 	ldw	fp,0(sp)
   14cd8:	dec00104 	addi	sp,sp,4
   14cdc:	f800283a 	ret

00014ce0 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
   14ce0:	defffd04 	addi	sp,sp,-12
   14ce4:	df000215 	stw	fp,8(sp)
   14ce8:	df000204 	addi	fp,sp,8
   14cec:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
   14cf0:	e0bfff17 	ldw	r2,-4(fp)
   14cf4:	1080800c 	andi	r2,r2,512
   14cf8:	1004d27a 	srli	r2,r2,9
   14cfc:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   14d00:	e0bffe17 	ldw	r2,-8(fp)
   14d04:	10000226 	beq	r2,zero,14d10 <alt_up_rs232_check_parity+0x30>
   14d08:	00bfffc4 	movi	r2,-1
   14d0c:	00000106 	br	14d14 <alt_up_rs232_check_parity+0x34>
   14d10:	0005883a 	mov	r2,zero
}
   14d14:	e037883a 	mov	sp,fp
   14d18:	df000017 	ldw	fp,0(sp)
   14d1c:	dec00104 	addi	sp,sp,4
   14d20:	f800283a 	ret

00014d24 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
   14d24:	defffd04 	addi	sp,sp,-12
   14d28:	df000215 	stw	fp,8(sp)
   14d2c:	df000204 	addi	fp,sp,8
   14d30:	e13ffe15 	stw	r4,-8(fp)
   14d34:	2805883a 	mov	r2,r5
   14d38:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   14d3c:	e0bffe17 	ldw	r2,-8(fp)
   14d40:	10800a17 	ldw	r2,40(r2)
   14d44:	1007883a 	mov	r3,r2
   14d48:	e0bfff03 	ldbu	r2,-4(fp)
   14d4c:	18800035 	stwio	r2,0(r3)
	return 0;
   14d50:	0005883a 	mov	r2,zero
}
   14d54:	e037883a 	mov	sp,fp
   14d58:	df000017 	ldw	fp,0(sp)
   14d5c:	dec00104 	addi	sp,sp,4
   14d60:	f800283a 	ret

00014d64 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
   14d64:	defffa04 	addi	sp,sp,-24
   14d68:	dfc00515 	stw	ra,20(sp)
   14d6c:	df000415 	stw	fp,16(sp)
   14d70:	df000404 	addi	fp,sp,16
   14d74:	e13ffd15 	stw	r4,-12(fp)
   14d78:	e17ffe15 	stw	r5,-8(fp)
   14d7c:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   14d80:	e0bffd17 	ldw	r2,-12(fp)
   14d84:	10800a17 	ldw	r2,40(r2)
   14d88:	10800037 	ldwio	r2,0(r2)
   14d8c:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
   14d90:	e0bffc17 	ldw	r2,-16(fp)
   14d94:	1007883a 	mov	r3,r2
   14d98:	e0bffe17 	ldw	r2,-8(fp)
   14d9c:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
   14da0:	e13ffc17 	ldw	r4,-16(fp)
   14da4:	0014ce00 	call	14ce0 <alt_up_rs232_check_parity>
   14da8:	1007883a 	mov	r3,r2
   14dac:	e0bfff17 	ldw	r2,-4(fp)
   14db0:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
   14db4:	e0bffc17 	ldw	r2,-16(fp)
   14db8:	10a0000c 	andi	r2,r2,32768
   14dbc:	1004d3fa 	srli	r2,r2,15
   14dc0:	10bfffc4 	addi	r2,r2,-1
}
   14dc4:	e037883a 	mov	sp,fp
   14dc8:	dfc00117 	ldw	ra,4(sp)
   14dcc:	df000017 	ldw	fp,0(sp)
   14dd0:	dec00204 	addi	sp,sp,8
   14dd4:	f800283a 	ret

00014dd8 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   14dd8:	defff804 	addi	sp,sp,-32
   14ddc:	dfc00715 	stw	ra,28(sp)
   14de0:	df000615 	stw	fp,24(sp)
   14de4:	df000604 	addi	fp,sp,24
   14de8:	e13ffd15 	stw	r4,-12(fp)
   14dec:	e17ffe15 	stw	r5,-8(fp)
   14df0:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   14df4:	e0bffd17 	ldw	r2,-12(fp)
   14df8:	10800017 	ldw	r2,0(r2)
   14dfc:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   14e00:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   14e04:	00000c06 	br	14e38 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
   14e08:	e0bffe17 	ldw	r2,-8(fp)
   14e0c:	10c00044 	addi	r3,r2,1
   14e10:	e0fffe15 	stw	r3,-8(fp)
   14e14:	e0fffc04 	addi	r3,fp,-16
   14e18:	180d883a 	mov	r6,r3
   14e1c:	100b883a 	mov	r5,r2
   14e20:	e13ffb17 	ldw	r4,-20(fp)
   14e24:	0014d640 	call	14d64 <alt_up_rs232_read_data>
   14e28:	1000081e 	bne	r2,zero,14e4c <alt_up_rs232_read_fd+0x74>
			count++;
   14e2c:	e0bffa17 	ldw	r2,-24(fp)
   14e30:	10800044 	addi	r2,r2,1
   14e34:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   14e38:	e0bfff17 	ldw	r2,-4(fp)
   14e3c:	10ffffc4 	addi	r3,r2,-1
   14e40:	e0ffff15 	stw	r3,-4(fp)
   14e44:	103ff01e 	bne	r2,zero,14e08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014e08>
   14e48:	00000106 	br	14e50 <alt_up_rs232_read_fd+0x78>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
   14e4c:	0001883a 	nop
	}
	return count;
   14e50:	e0bffa17 	ldw	r2,-24(fp)
}
   14e54:	e037883a 	mov	sp,fp
   14e58:	dfc00117 	ldw	ra,4(sp)
   14e5c:	df000017 	ldw	fp,0(sp)
   14e60:	dec00204 	addi	sp,sp,8
   14e64:	f800283a 	ret

00014e68 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
   14e68:	defff904 	addi	sp,sp,-28
   14e6c:	dfc00615 	stw	ra,24(sp)
   14e70:	df000515 	stw	fp,20(sp)
   14e74:	df000504 	addi	fp,sp,20
   14e78:	e13ffd15 	stw	r4,-12(fp)
   14e7c:	e17ffe15 	stw	r5,-8(fp)
   14e80:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   14e84:	e0bffd17 	ldw	r2,-12(fp)
   14e88:	10800017 	ldw	r2,0(r2)
   14e8c:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   14e90:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   14e94:	00000d06 	br	14ecc <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
   14e98:	e0bffe17 	ldw	r2,-8(fp)
   14e9c:	10800003 	ldbu	r2,0(r2)
   14ea0:	10803fcc 	andi	r2,r2,255
   14ea4:	100b883a 	mov	r5,r2
   14ea8:	e13ffc17 	ldw	r4,-16(fp)
   14eac:	0014d240 	call	14d24 <alt_up_rs232_write_data>
   14eb0:	10000b1e 	bne	r2,zero,14ee0 <alt_up_rs232_write_fd+0x78>
		{
			count++;
   14eb4:	e0bffb17 	ldw	r2,-20(fp)
   14eb8:	10800044 	addi	r2,r2,1
   14ebc:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
   14ec0:	e0bffe17 	ldw	r2,-8(fp)
   14ec4:	10800044 	addi	r2,r2,1
   14ec8:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
   14ecc:	e0bfff17 	ldw	r2,-4(fp)
   14ed0:	10ffffc4 	addi	r3,r2,-1
   14ed4:	e0ffff15 	stw	r3,-4(fp)
   14ed8:	103fef1e 	bne	r2,zero,14e98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014e98>
   14edc:	00000106 	br	14ee4 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
			ptr++;
		}
		else
			break;
   14ee0:	0001883a 	nop
	}
	return count;
   14ee4:	e0bffb17 	ldw	r2,-20(fp)
}
   14ee8:	e037883a 	mov	sp,fp
   14eec:	dfc00117 	ldw	ra,4(sp)
   14ef0:	df000017 	ldw	fp,0(sp)
   14ef4:	dec00204 	addi	sp,sp,8
   14ef8:	f800283a 	ret

00014efc <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
   14efc:	defffc04 	addi	sp,sp,-16
   14f00:	dfc00315 	stw	ra,12(sp)
   14f04:	df000215 	stw	fp,8(sp)
   14f08:	df000204 	addi	fp,sp,8
   14f0c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
   14f10:	d1600804 	addi	r5,gp,-32736
   14f14:	e13fff17 	ldw	r4,-4(fp)
   14f18:	00160d80 	call	160d8 <alt_find_dev>
   14f1c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   14f20:	e0bffe17 	ldw	r2,-8(fp)
}
   14f24:	e037883a 	mov	sp,fp
   14f28:	dfc00117 	ldw	ra,4(sp)
   14f2c:	df000017 	ldw	fp,0(sp)
   14f30:	dec00204 	addi	sp,sp,8
   14f34:	f800283a 	ret

00014f38 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
   14f38:	defffc04 	addi	sp,sp,-16
   14f3c:	dfc00315 	stw	ra,12(sp)
   14f40:	df000215 	stw	fp,8(sp)
   14f44:	df000204 	addi	fp,sp,8
   14f48:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
   14f4c:	d1600804 	addi	r5,gp,-32736
   14f50:	e13fff17 	ldw	r4,-4(fp)
   14f54:	00160d80 	call	160d8 <alt_find_dev>
   14f58:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   14f5c:	e0bffe17 	ldw	r2,-8(fp)
}
   14f60:	e037883a 	mov	sp,fp
   14f64:	dfc00117 	ldw	ra,4(sp)
   14f68:	df000017 	ldw	fp,0(sp)
   14f6c:	dec00204 	addi	sp,sp,8
   14f70:	f800283a 	ret

00014f74 <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
   14f74:	defffa04 	addi	sp,sp,-24
   14f78:	df000515 	stw	fp,20(sp)
   14f7c:	df000504 	addi	fp,sp,20
   14f80:	e13ffc15 	stw	r4,-16(fp)
   14f84:	e17ffd15 	stw	r5,-12(fp)
   14f88:	e1bffe15 	stw	r6,-8(fp)
   14f8c:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
   14f90:	e0bffc17 	ldw	r2,-16(fp)
   14f94:	10800f17 	ldw	r2,60(r2)
   14f98:	e0fffe17 	ldw	r3,-8(fp)
   14f9c:	1880042e 	bgeu	r3,r2,14fb0 <alt_up_pixel_buffer_dma_draw+0x3c>
   14fa0:	e0bffc17 	ldw	r2,-16(fp)
   14fa4:	10801017 	ldw	r2,64(r2)
   14fa8:	e0ffff17 	ldw	r3,-4(fp)
   14fac:	18800236 	bltu	r3,r2,14fb8 <alt_up_pixel_buffer_dma_draw+0x44>
		return -1;
   14fb0:	00bfffc4 	movi	r2,-1
   14fb4:	00005006 	br	150f8 <alt_up_pixel_buffer_dma_draw+0x184>

	unsigned int addr = 0;
   14fb8:	e03ffb15 	stw	zero,-20(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   14fbc:	e0bffc17 	ldw	r2,-16(fp)
   14fc0:	10800d17 	ldw	r2,52(r2)
   14fc4:	1000151e 	bne	r2,zero,1501c <alt_up_pixel_buffer_dma_draw+0xa8>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
   14fc8:	e0bffc17 	ldw	r2,-16(fp)
   14fcc:	10c01217 	ldw	r3,72(r2)
   14fd0:	e0bffe17 	ldw	r2,-8(fp)
   14fd4:	1886703a 	and	r3,r3,r2
   14fd8:	e0bffc17 	ldw	r2,-16(fp)
   14fdc:	10801117 	ldw	r2,68(r2)
   14fe0:	1884983a 	sll	r2,r3,r2
   14fe4:	e0fffb17 	ldw	r3,-20(fp)
   14fe8:	1885883a 	add	r2,r3,r2
   14fec:	e0bffb15 	stw	r2,-20(fp)
		addr += ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
   14ff0:	e0bffc17 	ldw	r2,-16(fp)
   14ff4:	10c01417 	ldw	r3,80(r2)
   14ff8:	e0bfff17 	ldw	r2,-4(fp)
   14ffc:	1886703a 	and	r3,r3,r2
   15000:	e0bffc17 	ldw	r2,-16(fp)
   15004:	10801317 	ldw	r2,76(r2)
   15008:	1884983a 	sll	r2,r3,r2
   1500c:	e0fffb17 	ldw	r3,-20(fp)
   15010:	1885883a 	add	r2,r3,r2
   15014:	e0bffb15 	stw	r2,-20(fp)
   15018:	00001706 	br	15078 <alt_up_pixel_buffer_dma_draw+0x104>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
   1501c:	e0bffc17 	ldw	r2,-16(fp)
   15020:	10c01217 	ldw	r3,72(r2)
   15024:	e0bffe17 	ldw	r2,-8(fp)
   15028:	1886703a 	and	r3,r3,r2
   1502c:	e0bffc17 	ldw	r2,-16(fp)
   15030:	10801117 	ldw	r2,68(r2)
   15034:	1884983a 	sll	r2,r3,r2
   15038:	e0fffb17 	ldw	r3,-20(fp)
   1503c:	1885883a 	add	r2,r3,r2
   15040:	e0bffb15 	stw	r2,-20(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
   15044:	e0bffc17 	ldw	r2,-16(fp)
   15048:	10c01417 	ldw	r3,80(r2)
   1504c:	e0bfff17 	ldw	r2,-4(fp)
   15050:	1886703a 	and	r3,r3,r2
   15054:	e0bffc17 	ldw	r2,-16(fp)
   15058:	10800f17 	ldw	r2,60(r2)
   1505c:	1887383a 	mul	r3,r3,r2
   15060:	e0bffc17 	ldw	r2,-16(fp)
   15064:	10801117 	ldw	r2,68(r2)
   15068:	1884983a 	sll	r2,r3,r2
   1506c:	e0fffb17 	ldw	r3,-20(fp)
   15070:	1885883a 	add	r2,r3,r2
   15074:	e0bffb15 	stw	r2,-20(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   15078:	e0bffc17 	ldw	r2,-16(fp)
   1507c:	10800e17 	ldw	r2,56(r2)
   15080:	10800058 	cmpnei	r2,r2,1
   15084:	1000081e 	bne	r2,zero,150a8 <alt_up_pixel_buffer_dma_draw+0x134>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
   15088:	e0bffc17 	ldw	r2,-16(fp)
   1508c:	10c00c17 	ldw	r3,48(r2)
   15090:	e0bffb17 	ldw	r2,-20(fp)
   15094:	1885883a 	add	r2,r3,r2
   15098:	1007883a 	mov	r3,r2
   1509c:	e0bffd17 	ldw	r2,-12(fp)
   150a0:	18800025 	stbio	r2,0(r3)
   150a4:	00001306 	br	150f4 <alt_up_pixel_buffer_dma_draw+0x180>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   150a8:	e0bffc17 	ldw	r2,-16(fp)
   150ac:	10800e17 	ldw	r2,56(r2)
   150b0:	10800098 	cmpnei	r2,r2,2
   150b4:	1000081e 	bne	r2,zero,150d8 <alt_up_pixel_buffer_dma_draw+0x164>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
   150b8:	e0bffc17 	ldw	r2,-16(fp)
   150bc:	10c00c17 	ldw	r3,48(r2)
   150c0:	e0bffb17 	ldw	r2,-20(fp)
   150c4:	1885883a 	add	r2,r3,r2
   150c8:	1007883a 	mov	r3,r2
   150cc:	e0bffd17 	ldw	r2,-12(fp)
   150d0:	1880002d 	sthio	r2,0(r3)
   150d4:	00000706 	br	150f4 <alt_up_pixel_buffer_dma_draw+0x180>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
   150d8:	e0bffc17 	ldw	r2,-16(fp)
   150dc:	10c00c17 	ldw	r3,48(r2)
   150e0:	e0bffb17 	ldw	r2,-20(fp)
   150e4:	1885883a 	add	r2,r3,r2
   150e8:	1007883a 	mov	r3,r2
   150ec:	e0bffd17 	ldw	r2,-12(fp)
   150f0:	18800035 	stwio	r2,0(r3)
	}

	return 0;
   150f4:	0005883a 	mov	r2,zero
}
   150f8:	e037883a 	mov	sp,fp
   150fc:	df000017 	ldw	fp,0(sp)
   15100:	dec00104 	addi	sp,sp,4
   15104:	f800283a 	ret

00015108 <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
   15108:	defffd04 	addi	sp,sp,-12
   1510c:	df000215 	stw	fp,8(sp)
   15110:	df000204 	addi	fp,sp,8
   15114:	e13ffe15 	stw	r4,-8(fp)
   15118:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
   1511c:	e0bffe17 	ldw	r2,-8(fp)
   15120:	10800a17 	ldw	r2,40(r2)
   15124:	10800104 	addi	r2,r2,4
   15128:	1007883a 	mov	r3,r2
   1512c:	e0bfff17 	ldw	r2,-4(fp)
   15130:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
   15134:	e0bffe17 	ldw	r2,-8(fp)
   15138:	10800a17 	ldw	r2,40(r2)
   1513c:	10800104 	addi	r2,r2,4
   15140:	10800037 	ldwio	r2,0(r2)
   15144:	1007883a 	mov	r3,r2
   15148:	e0bffe17 	ldw	r2,-8(fp)
   1514c:	10c00c15 	stw	r3,48(r2)
	return 0;
   15150:	0005883a 	mov	r2,zero
}
   15154:	e037883a 	mov	sp,fp
   15158:	df000017 	ldw	fp,0(sp)
   1515c:	dec00104 	addi	sp,sp,4
   15160:	f800283a 	ret

00015164 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
   15164:	defffd04 	addi	sp,sp,-12
   15168:	df000215 	stw	fp,8(sp)
   1516c:	dc000115 	stw	r16,4(sp)
   15170:	df000204 	addi	fp,sp,8
   15174:	e13ffe15 	stw	r4,-8(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
   15178:	e0bffe17 	ldw	r2,-8(fp)
   1517c:	14000c17 	ldw	r16,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
   15180:	e0bffe17 	ldw	r2,-8(fp)
   15184:	10800a17 	ldw	r2,40(r2)
   15188:	1007883a 	mov	r3,r2
   1518c:	00800044 	movi	r2,1
   15190:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
   15194:	e0bffe17 	ldw	r2,-8(fp)
   15198:	10c00b17 	ldw	r3,44(r2)
   1519c:	e0bffe17 	ldw	r2,-8(fp)
   151a0:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
   151a4:	e0bffe17 	ldw	r2,-8(fp)
   151a8:	14000b15 	stw	r16,44(r2)
	return 0;
   151ac:	0005883a 	mov	r2,zero
}
   151b0:	e6ffff04 	addi	sp,fp,-4
   151b4:	df000117 	ldw	fp,4(sp)
   151b8:	dc000017 	ldw	r16,0(sp)
   151bc:	dec00204 	addi	sp,sp,8
   151c0:	f800283a 	ret

000151c4 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
   151c4:	defffe04 	addi	sp,sp,-8
   151c8:	df000115 	stw	fp,4(sp)
   151cc:	df000104 	addi	fp,sp,4
   151d0:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
   151d4:	e0bfff17 	ldw	r2,-4(fp)
   151d8:	10800a17 	ldw	r2,40(r2)
   151dc:	10800304 	addi	r2,r2,12
   151e0:	10800037 	ldwio	r2,0(r2)
   151e4:	1080004c 	andi	r2,r2,1
}
   151e8:	e037883a 	mov	sp,fp
   151ec:	df000017 	ldw	fp,0(sp)
   151f0:	dec00104 	addi	sp,sp,4
   151f4:	f800283a 	ret

000151f8 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
   151f8:	defff704 	addi	sp,sp,-36
   151fc:	df000815 	stw	fp,32(sp)
   15200:	dd400715 	stw	r21,28(sp)
   15204:	dd000615 	stw	r20,24(sp)
   15208:	dcc00515 	stw	r19,20(sp)
   1520c:	dc800415 	stw	r18,16(sp)
   15210:	dc400315 	stw	r17,12(sp)
   15214:	dc000215 	stw	r16,8(sp)
   15218:	df000804 	addi	fp,sp,32
   1521c:	e13ff815 	stw	r4,-32(fp)
   15220:	e17ff915 	stw	r5,-28(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
   15224:	e0bff917 	ldw	r2,-28(fp)
   15228:	10800058 	cmpnei	r2,r2,1
   1522c:	1000031e 	bne	r2,zero,1523c <alt_up_pixel_buffer_dma_clear_screen+0x44>
		addr = pixel_buffer->back_buffer_start_address;
   15230:	e0bff817 	ldw	r2,-32(fp)
   15234:	14400c17 	ldw	r17,48(r2)
   15238:	00000206 	br	15244 <alt_up_pixel_buffer_dma_clear_screen+0x4c>
	else
		addr = pixel_buffer->buffer_start_address;
   1523c:	e0bff817 	ldw	r2,-32(fp)
   15240:	14400b17 	ldw	r17,44(r2)
	limit_x = pixel_buffer->x_resolution;
   15244:	e0bff817 	ldw	r2,-32(fp)
   15248:	14000f17 	ldw	r16,60(r2)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   1524c:	e0bff817 	ldw	r2,-32(fp)
   15250:	10800e17 	ldw	r2,56(r2)
   15254:	10800098 	cmpnei	r2,r2,2
   15258:	1000031e 	bne	r2,zero,15268 <alt_up_pixel_buffer_dma_clear_screen+0x70>
		limit_x = limit_x << 1;
   1525c:	8405883a 	add	r2,r16,r16
   15260:	1021883a 	mov	r16,r2
   15264:	00000306 	br	15274 <alt_up_pixel_buffer_dma_clear_screen+0x7c>
	} else {
		limit_x = limit_x << 2;
   15268:	8405883a 	add	r2,r16,r16
   1526c:	1085883a 	add	r2,r2,r2
   15270:	1021883a 	mov	r16,r2
	}	
	limit_y = pixel_buffer->y_resolution;
   15274:	e0bff817 	ldw	r2,-32(fp)
   15278:	14801017 	ldw	r18,64(r2)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   1527c:	e0bff817 	ldw	r2,-32(fp)
   15280:	10800d17 	ldw	r2,52(r2)
   15284:	1000111e 	bne	r2,zero,152cc <alt_up_pixel_buffer_dma_clear_screen+0xd4>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
   15288:	e0bff817 	ldw	r2,-32(fp)
   1528c:	15401317 	ldw	r21,76(r2)

		for (y = 0; y < limit_y; y++)
   15290:	0029883a 	mov	r20,zero
   15294:	00000b06 	br	152c4 <alt_up_pixel_buffer_dma_clear_screen+0xcc>
		{
			for (x = 0; x < limit_x; x = x + 4)
   15298:	0027883a 	mov	r19,zero
   1529c:	00000406 	br	152b0 <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
   152a0:	9c45883a 	add	r2,r19,r17
   152a4:	0007883a 	mov	r3,zero
   152a8:	10c00035 	stwio	r3,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
   152ac:	9cc00104 	addi	r19,r19,4
   152b0:	9c3ffb36 	bltu	r19,r16,152a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70152a0>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
   152b4:	00800044 	movi	r2,1
   152b8:	1544983a 	sll	r2,r2,r21
   152bc:	88a3883a 	add	r17,r17,r2
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
   152c0:	a5000044 	addi	r20,r20,1
   152c4:	a4bff436 	bltu	r20,r18,15298 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015298>
		for (x = 0; x < limit_y; x = x + 4)
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
   152c8:	00000a06 	br	152f4 <alt_up_pixel_buffer_dma_clear_screen+0xfc>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
   152cc:	9425383a 	mul	r18,r18,r16

		for (x = 0; x < limit_y; x = x + 4)
   152d0:	0021883a 	mov	r16,zero
   152d4:	00000506 	br	152ec <alt_up_pixel_buffer_dma_clear_screen+0xf4>
		{
			IOWR_32DIRECT(addr, x, 0);
   152d8:	8005883a 	mov	r2,r16
   152dc:	1445883a 	add	r2,r2,r17
   152e0:	0007883a 	mov	r3,zero
   152e4:	10c00035 	stwio	r3,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
   152e8:	84000104 	addi	r16,r16,4
   152ec:	8005883a 	mov	r2,r16
   152f0:	14bff936 	bltu	r2,r18,152d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70152d8>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
   152f4:	0001883a 	nop
   152f8:	e6fffa04 	addi	sp,fp,-24
   152fc:	df000617 	ldw	fp,24(sp)
   15300:	dd400517 	ldw	r21,20(sp)
   15304:	dd000417 	ldw	r20,16(sp)
   15308:	dcc00317 	ldw	r19,12(sp)
   1530c:	dc800217 	ldw	r18,8(sp)
   15310:	dc400117 	ldw	r17,4(sp)
   15314:	dc000017 	ldw	r16,0(sp)
   15318:	dec00704 	addi	sp,sp,28
   1531c:	f800283a 	ret

00015320 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
   15320:	defff304 	addi	sp,sp,-52
   15324:	df000c15 	stw	fp,48(sp)
   15328:	ddc00b15 	stw	r23,44(sp)
   1532c:	dd800a15 	stw	r22,40(sp)
   15330:	dd400915 	stw	r21,36(sp)
   15334:	dd000815 	stw	r20,32(sp)
   15338:	dcc00715 	stw	r19,28(sp)
   1533c:	dc800615 	stw	r18,24(sp)
   15340:	dc400515 	stw	r17,20(sp)
   15344:	dc000415 	stw	r16,16(sp)
   15348:	df000c04 	addi	fp,sp,48
   1534c:	e13ff415 	stw	r4,-48(fp)
   15350:	e17ff515 	stw	r5,-44(fp)
   15354:	e1bff615 	stw	r6,-40(fp)
   15358:	e1fff715 	stw	r7,-36(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
   1535c:	e0bff417 	ldw	r2,-48(fp)
   15360:	14800f17 	ldw	r18,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
   15364:	e0bff417 	ldw	r2,-48(fp)
   15368:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
   1536c:	e5bff517 	ldw	r22,-44(fp)
	register unsigned int r_x = x1;
   15370:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int t_y = y0;
   15374:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int b_y = y1;
   15378:	e4c00117 	ldw	r19,4(fp)
	register unsigned int local_color = color;
   1537c:	e5c00217 	ldw	r23,8(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
   15380:	a580032e 	bgeu	r20,r22,15390 <alt_up_pixel_buffer_dma_draw_box+0x70>
	{
		temp = l_x;
   15384:	b02b883a 	mov	r21,r22
		l_x = r_x;
   15388:	a02d883a 	mov	r22,r20
		r_x = temp;
   1538c:	a829883a 	mov	r20,r21
	}
	if (t_y > b_y)
   15390:	9c40032e 	bgeu	r19,r17,153a0 <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = t_y;
   15394:	882b883a 	mov	r21,r17
		t_y = b_y;
   15398:	9823883a 	mov	r17,r19
		b_y = temp;
   1539c:	a827883a 	mov	r19,r21
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
   153a0:	b480892e 	bgeu	r22,r18,155c8 <alt_up_pixel_buffer_dma_draw_box+0x2a8>
   153a4:	8c00882e 	bgeu	r17,r16,155c8 <alt_up_pixel_buffer_dma_draw_box+0x2a8>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
   153a8:	a4800136 	bltu	r20,r18,153b0 <alt_up_pixel_buffer_dma_draw_box+0x90>
	{
		r_x = limit_x - 1;
   153ac:	953fffc4 	addi	r20,r18,-1
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
   153b0:	9c000136 	bltu	r19,r16,153b8 <alt_up_pixel_buffer_dma_draw_box+0x98>
	{
		b_y = limit_y - 1;
   153b4:	84ffffc4 	addi	r19,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
   153b8:	e0800317 	ldw	r2,12(fp)
   153bc:	10800058 	cmpnei	r2,r2,1
   153c0:	1000031e 	bne	r2,zero,153d0 <alt_up_pixel_buffer_dma_draw_box+0xb0>
		addr = pixel_buffer->back_buffer_start_address;
   153c4:	e0bff417 	ldw	r2,-48(fp)
   153c8:	14000c17 	ldw	r16,48(r2)
   153cc:	00000206 	br	153d8 <alt_up_pixel_buffer_dma_draw_box+0xb8>
	else
		addr = pixel_buffer->buffer_start_address;
   153d0:	e0bff417 	ldw	r2,-48(fp)
   153d4:	14000b17 	ldw	r16,44(r2)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   153d8:	e0bff417 	ldw	r2,-48(fp)
   153dc:	10800d17 	ldw	r2,52(r2)
   153e0:	10003c1e 	bne	r2,zero,154d4 <alt_up_pixel_buffer_dma_draw_box+0x1b4>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
   153e4:	e0bff417 	ldw	r2,-48(fp)
   153e8:	15401317 	ldw	r21,76(r2)
		addr = addr + (t_y << offset_y);
   153ec:	8d44983a 	sll	r2,r17,r21
   153f0:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   153f4:	e0bff417 	ldw	r2,-48(fp)
   153f8:	10800e17 	ldw	r2,56(r2)
   153fc:	10800058 	cmpnei	r2,r2,1
   15400:	10000f1e 	bne	r2,zero,15440 <alt_up_pixel_buffer_dma_draw_box+0x120>
			for (y = t_y; y <= b_y; y++)
   15404:	8825883a 	mov	r18,r17
   15408:	00000b06 	br	15438 <alt_up_pixel_buffer_dma_draw_box+0x118>
			{
				for (x = l_x; x <= r_x; x++)
   1540c:	b023883a 	mov	r17,r22
   15410:	00000406 	br	15424 <alt_up_pixel_buffer_dma_draw_box+0x104>
				{
					IOWR_8DIRECT(addr, x, local_color);
   15414:	8c05883a 	add	r2,r17,r16
   15418:	b807883a 	mov	r3,r23
   1541c:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   15420:	8c400044 	addi	r17,r17,1
   15424:	a47ffb2e 	bgeu	r20,r17,15414 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015414>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
   15428:	00800044 	movi	r2,1
   1542c:	1544983a 	sll	r2,r2,r21
   15430:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
   15434:	94800044 	addi	r18,r18,1
   15438:	9cbff42e 	bgeu	r19,r18,1540c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701540c>
   1543c:	00006306 	br	155cc <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   15440:	e0bff417 	ldw	r2,-48(fp)
   15444:	10800e17 	ldw	r2,56(r2)
   15448:	10800098 	cmpnei	r2,r2,2
   1544c:	1000101e 	bne	r2,zero,15490 <alt_up_pixel_buffer_dma_draw_box+0x170>
			for (y = t_y; y <= b_y; y++)
   15450:	8825883a 	mov	r18,r17
   15454:	00000c06 	br	15488 <alt_up_pixel_buffer_dma_draw_box+0x168>
			{
				for (x = l_x; x <= r_x; x++)
   15458:	b023883a 	mov	r17,r22
   1545c:	00000506 	br	15474 <alt_up_pixel_buffer_dma_draw_box+0x154>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
   15460:	8c45883a 	add	r2,r17,r17
   15464:	1405883a 	add	r2,r2,r16
   15468:	b807883a 	mov	r3,r23
   1546c:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   15470:	8c400044 	addi	r17,r17,1
   15474:	a47ffa2e 	bgeu	r20,r17,15460 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015460>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
   15478:	00800044 	movi	r2,1
   1547c:	1544983a 	sll	r2,r2,r21
   15480:	80a1883a 	add	r16,r16,r2
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
   15484:	94800044 	addi	r18,r18,1
   15488:	9cbff32e 	bgeu	r19,r18,15458 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015458>
   1548c:	00004f06 	br	155cc <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
   15490:	8825883a 	mov	r18,r17
   15494:	00000d06 	br	154cc <alt_up_pixel_buffer_dma_draw_box+0x1ac>
			{
				for (x = l_x; x <= r_x; x++)
   15498:	b023883a 	mov	r17,r22
   1549c:	00000606 	br	154b8 <alt_up_pixel_buffer_dma_draw_box+0x198>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
   154a0:	8c45883a 	add	r2,r17,r17
   154a4:	1085883a 	add	r2,r2,r2
   154a8:	1405883a 	add	r2,r2,r16
   154ac:	b807883a 	mov	r3,r23
   154b0:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   154b4:	8c400044 	addi	r17,r17,1
   154b8:	a47ff92e 	bgeu	r20,r17,154a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70154a0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
   154bc:	00800044 	movi	r2,1
   154c0:	1544983a 	sll	r2,r2,r21
   154c4:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
   154c8:	94800044 	addi	r18,r18,1
   154cc:	9cbff22e 	bgeu	r19,r18,15498 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015498>
   154d0:	00003e06 	br	155cc <alt_up_pixel_buffer_dma_draw_box+0x2ac>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   154d4:	e0bff417 	ldw	r2,-48(fp)
   154d8:	10800e17 	ldw	r2,56(r2)
   154dc:	10800058 	cmpnei	r2,r2,1
   154e0:	10000f1e 	bne	r2,zero,15520 <alt_up_pixel_buffer_dma_draw_box+0x200>
			addr = addr + t_y * limit_x;
   154e4:	8c85383a 	mul	r2,r17,r18
   154e8:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
   154ec:	882b883a 	mov	r21,r17
   154f0:	00000906 	br	15518 <alt_up_pixel_buffer_dma_draw_box+0x1f8>
			{
				for (x = l_x; x <= r_x; x++)
   154f4:	b023883a 	mov	r17,r22
   154f8:	00000406 	br	1550c <alt_up_pixel_buffer_dma_draw_box+0x1ec>
				{
					IOWR_8DIRECT(addr, x, local_color);
   154fc:	8c05883a 	add	r2,r17,r16
   15500:	b807883a 	mov	r3,r23
   15504:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   15508:	8c400044 	addi	r17,r17,1
   1550c:	a47ffb2e 	bgeu	r20,r17,154fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70154fc>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
   15510:	84a1883a 	add	r16,r16,r18
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   15514:	ad400044 	addi	r21,r21,1
   15518:	9d7ff62e 	bgeu	r19,r21,154f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70154f4>
   1551c:	00002b06 	br	155cc <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   15520:	e0bff417 	ldw	r2,-48(fp)
   15524:	10800e17 	ldw	r2,56(r2)
   15528:	10800098 	cmpnei	r2,r2,2
   1552c:	1000121e 	bne	r2,zero,15578 <alt_up_pixel_buffer_dma_draw_box+0x258>
			limit_x = limit_x << 1;
   15530:	9485883a 	add	r2,r18,r18
   15534:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
   15538:	8c85383a 	mul	r2,r17,r18
   1553c:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
   15540:	882b883a 	mov	r21,r17
   15544:	00000a06 	br	15570 <alt_up_pixel_buffer_dma_draw_box+0x250>
			{
				for (x = l_x; x <= r_x; x++)
   15548:	b023883a 	mov	r17,r22
   1554c:	00000506 	br	15564 <alt_up_pixel_buffer_dma_draw_box+0x244>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
   15550:	8c45883a 	add	r2,r17,r17
   15554:	1405883a 	add	r2,r2,r16
   15558:	b807883a 	mov	r3,r23
   1555c:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   15560:	8c400044 	addi	r17,r17,1
   15564:	a47ffa2e 	bgeu	r20,r17,15550 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015550>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
   15568:	84a1883a 	add	r16,r16,r18
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   1556c:	ad400044 	addi	r21,r21,1
   15570:	9d7ff52e 	bgeu	r19,r21,15548 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015548>
   15574:	00001506 	br	155cc <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
   15578:	9485883a 	add	r2,r18,r18
   1557c:	1085883a 	add	r2,r2,r2
   15580:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
   15584:	8c85383a 	mul	r2,r17,r18
   15588:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
   1558c:	882b883a 	mov	r21,r17
   15590:	00000b06 	br	155c0 <alt_up_pixel_buffer_dma_draw_box+0x2a0>
			{
				for (x = l_x; x <= r_x; x++)
   15594:	b023883a 	mov	r17,r22
   15598:	00000606 	br	155b4 <alt_up_pixel_buffer_dma_draw_box+0x294>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
   1559c:	8c45883a 	add	r2,r17,r17
   155a0:	1085883a 	add	r2,r2,r2
   155a4:	1405883a 	add	r2,r2,r16
   155a8:	b807883a 	mov	r3,r23
   155ac:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   155b0:	8c400044 	addi	r17,r17,1
   155b4:	a47ff92e 	bgeu	r20,r17,1559c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701559c>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
   155b8:	84a1883a 	add	r16,r16,r18
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   155bc:	ad400044 	addi	r21,r21,1
   155c0:	9d7ff42e 	bgeu	r19,r21,15594 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015594>
   155c4:	00000106 	br	155cc <alt_up_pixel_buffer_dma_draw_box+0x2ac>
		b_y = temp;
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
   155c8:	0001883a 	nop
				}
				addr = addr + limit_x;
			}
		}
	}
}
   155cc:	e6fff804 	addi	sp,fp,-32
   155d0:	df000817 	ldw	fp,32(sp)
   155d4:	ddc00717 	ldw	r23,28(sp)
   155d8:	dd800617 	ldw	r22,24(sp)
   155dc:	dd400517 	ldw	r21,20(sp)
   155e0:	dd000417 	ldw	r20,16(sp)
   155e4:	dcc00317 	ldw	r19,12(sp)
   155e8:	dc800217 	ldw	r18,8(sp)
   155ec:	dc400117 	ldw	r17,4(sp)
   155f0:	dc000017 	ldw	r16,0(sp)
   155f4:	dec00904 	addi	sp,sp,36
   155f8:	f800283a 	ret

000155fc <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
   155fc:	defff404 	addi	sp,sp,-48
   15600:	df000b15 	stw	fp,44(sp)
   15604:	dd800a15 	stw	r22,40(sp)
   15608:	dd400915 	stw	r21,36(sp)
   1560c:	dd000815 	stw	r20,32(sp)
   15610:	dcc00715 	stw	r19,28(sp)
   15614:	dc800615 	stw	r18,24(sp)
   15618:	dc400515 	stw	r17,20(sp)
   1561c:	dc000415 	stw	r16,16(sp)
   15620:	df000b04 	addi	fp,sp,44
   15624:	e13ff515 	stw	r4,-44(fp)
   15628:	e17ff615 	stw	r5,-40(fp)
   1562c:	e1bff715 	stw	r6,-36(fp)
   15630:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
   15634:	e0bff517 	ldw	r2,-44(fp)
   15638:	14800f17 	ldw	r18,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
   1563c:	e0bff517 	ldw	r2,-44(fp)
   15640:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
   15644:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int r_x = x1;
   15648:	e4fff717 	ldw	r19,-36(fp)
	register unsigned int line_y = y;
   1564c:	e53ff817 	ldw	r20,-32(fp)
	register unsigned int local_color = color;
   15650:	e5400117 	ldw	r21,4(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
   15654:	9c40032e 	bgeu	r19,r17,15664 <alt_up_pixel_buffer_dma_draw_hline+0x68>
	{
		temp = l_x;
   15658:	882d883a 	mov	r22,r17
		l_x = r_x;
   1565c:	9823883a 	mov	r17,r19
		r_x = temp;
   15660:	b027883a 	mov	r19,r22
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
   15664:	8c805d2e 	bgeu	r17,r18,157dc <alt_up_pixel_buffer_dma_draw_hline+0x1e0>
   15668:	a4005c2e 	bgeu	r20,r16,157dc <alt_up_pixel_buffer_dma_draw_hline+0x1e0>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
   1566c:	9c800136 	bltu	r19,r18,15674 <alt_up_pixel_buffer_dma_draw_hline+0x78>
	{
		r_x = limit_x - 1;
   15670:	94ffffc4 	addi	r19,r18,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
   15674:	e0800217 	ldw	r2,8(fp)
   15678:	10800058 	cmpnei	r2,r2,1
   1567c:	1000031e 	bne	r2,zero,1568c <alt_up_pixel_buffer_dma_draw_hline+0x90>
		addr = pixel_buffer->back_buffer_start_address;
   15680:	e0bff517 	ldw	r2,-44(fp)
   15684:	14000c17 	ldw	r16,48(r2)
   15688:	00000206 	br	15694 <alt_up_pixel_buffer_dma_draw_hline+0x98>
	else
		addr = pixel_buffer->buffer_start_address;
   1568c:	e0bff517 	ldw	r2,-44(fp)
   15690:	14000b17 	ldw	r16,44(r2)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   15694:	e0bff517 	ldw	r2,-44(fp)
   15698:	10800d17 	ldw	r2,52(r2)
   1569c:	1000231e 	bne	r2,zero,1572c <alt_up_pixel_buffer_dma_draw_hline+0x130>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
   156a0:	e0bff517 	ldw	r2,-44(fp)
   156a4:	14801317 	ldw	r18,76(r2)
		addr = addr + (line_y << offset_y);
   156a8:	a484983a 	sll	r2,r20,r18
   156ac:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   156b0:	e0bff517 	ldw	r2,-44(fp)
   156b4:	10800e17 	ldw	r2,56(r2)
   156b8:	10800058 	cmpnei	r2,r2,1
   156bc:	1000071e 	bne	r2,zero,156dc <alt_up_pixel_buffer_dma_draw_hline+0xe0>
			for (x = l_x; x <= r_x; x++)
   156c0:	00000406 	br	156d4 <alt_up_pixel_buffer_dma_draw_hline+0xd8>
			{
				IOWR_8DIRECT(addr, x, local_color);
   156c4:	8c05883a 	add	r2,r17,r16
   156c8:	a807883a 	mov	r3,r21
   156cc:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
   156d0:	8c400044 	addi	r17,r17,1
   156d4:	9c7ffb2e 	bgeu	r19,r17,156c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70156c4>
   156d8:	00004106 	br	157e0 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   156dc:	e0bff517 	ldw	r2,-44(fp)
   156e0:	10800e17 	ldw	r2,56(r2)
   156e4:	10800098 	cmpnei	r2,r2,2
   156e8:	10000e1e 	bne	r2,zero,15724 <alt_up_pixel_buffer_dma_draw_hline+0x128>
			for (x = l_x; x <= r_x; x++)
   156ec:	00000506 	br	15704 <alt_up_pixel_buffer_dma_draw_hline+0x108>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
   156f0:	8c45883a 	add	r2,r17,r17
   156f4:	1405883a 	add	r2,r2,r16
   156f8:	a807883a 	mov	r3,r21
   156fc:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
   15700:	8c400044 	addi	r17,r17,1
   15704:	9c7ffa2e 	bgeu	r19,r17,156f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70156f0>
   15708:	00003506 	br	157e0 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
   1570c:	8c45883a 	add	r2,r17,r17
   15710:	1085883a 	add	r2,r2,r2
   15714:	1405883a 	add	r2,r2,r16
   15718:	a807883a 	mov	r3,r21
   1571c:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
   15720:	8c400044 	addi	r17,r17,1
   15724:	9c7ff92e 	bgeu	r19,r17,1570c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701570c>
   15728:	00002d06 	br	157e0 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   1572c:	e0bff517 	ldw	r2,-44(fp)
   15730:	10800e17 	ldw	r2,56(r2)
   15734:	10800058 	cmpnei	r2,r2,1
   15738:	1000091e 	bne	r2,zero,15760 <alt_up_pixel_buffer_dma_draw_hline+0x164>
			addr = addr + line_y * limit_x;
   1573c:	a485383a 	mul	r2,r20,r18
   15740:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
   15744:	00000406 	br	15758 <alt_up_pixel_buffer_dma_draw_hline+0x15c>
			{
				IOWR_8DIRECT(addr, x, local_color);
   15748:	8c05883a 	add	r2,r17,r16
   1574c:	a807883a 	mov	r3,r21
   15750:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
   15754:	8c400044 	addi	r17,r17,1
   15758:	9c7ffb2e 	bgeu	r19,r17,15748 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015748>
   1575c:	00002006 	br	157e0 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   15760:	e0bff517 	ldw	r2,-44(fp)
   15764:	10800e17 	ldw	r2,56(r2)
   15768:	10800098 	cmpnei	r2,r2,2
   1576c:	10000c1e 	bne	r2,zero,157a0 <alt_up_pixel_buffer_dma_draw_hline+0x1a4>
			limit_x = limit_x << 1;
   15770:	9485883a 	add	r2,r18,r18
   15774:	1025883a 	mov	r18,r2
			addr = addr + line_y * limit_x;
   15778:	a485383a 	mul	r2,r20,r18
   1577c:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
   15780:	00000506 	br	15798 <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
   15784:	8c45883a 	add	r2,r17,r17
   15788:	1405883a 	add	r2,r2,r16
   1578c:	a807883a 	mov	r3,r21
   15790:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
   15794:	8c400044 	addi	r17,r17,1
   15798:	9c7ffa2e 	bgeu	r19,r17,15784 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015784>
   1579c:	00001006 	br	157e0 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
   157a0:	9485883a 	add	r2,r18,r18
   157a4:	1085883a 	add	r2,r2,r2
   157a8:	1025883a 	mov	r18,r2
			addr = addr + line_y * limit_x;
   157ac:	a485383a 	mul	r2,r20,r18
   157b0:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
   157b4:	00000606 	br	157d0 <alt_up_pixel_buffer_dma_draw_hline+0x1d4>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
   157b8:	8c45883a 	add	r2,r17,r17
   157bc:	1085883a 	add	r2,r2,r2
   157c0:	1405883a 	add	r2,r2,r16
   157c4:	a807883a 	mov	r3,r21
   157c8:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
   157cc:	8c400044 	addi	r17,r17,1
   157d0:	9c7ff92e 	bgeu	r19,r17,157b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70157b8>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
   157d4:	84a1883a 	add	r16,r16,r18
   157d8:	00000106 	br	157e0 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
		r_x = temp;
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
   157dc:	0001883a 	nop
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
   157e0:	e6fff904 	addi	sp,fp,-28
   157e4:	df000717 	ldw	fp,28(sp)
   157e8:	dd800617 	ldw	r22,24(sp)
   157ec:	dd400517 	ldw	r21,20(sp)
   157f0:	dd000417 	ldw	r20,16(sp)
   157f4:	dcc00317 	ldw	r19,12(sp)
   157f8:	dc800217 	ldw	r18,8(sp)
   157fc:	dc400117 	ldw	r17,4(sp)
   15800:	dc000017 	ldw	r16,0(sp)
   15804:	dec00804 	addi	sp,sp,32
   15808:	f800283a 	ret

0001580c <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
   1580c:	defff404 	addi	sp,sp,-48
   15810:	df000b15 	stw	fp,44(sp)
   15814:	dd800a15 	stw	r22,40(sp)
   15818:	dd400915 	stw	r21,36(sp)
   1581c:	dd000815 	stw	r20,32(sp)
   15820:	dcc00715 	stw	r19,28(sp)
   15824:	dc800615 	stw	r18,24(sp)
   15828:	dc400515 	stw	r17,20(sp)
   1582c:	dc000415 	stw	r16,16(sp)
   15830:	df000b04 	addi	fp,sp,44
   15834:	e13ff515 	stw	r4,-44(fp)
   15838:	e17ff615 	stw	r5,-40(fp)
   1583c:	e1bff715 	stw	r6,-36(fp)
   15840:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
   15844:	e0bff517 	ldw	r2,-44(fp)
   15848:	14400f17 	ldw	r17,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
   1584c:	e0bff517 	ldw	r2,-44(fp)
   15850:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int line_x = x;
   15854:	e4bff617 	ldw	r18,-40(fp)
	register unsigned int t_y = y0;
   15858:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int b_y = y1;
   1585c:	e4fff817 	ldw	r19,-32(fp)
	register unsigned int local_color = color;
   15860:	e5800117 	ldw	r22,4(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
   15864:	9d00032e 	bgeu	r19,r20,15874 <alt_up_pixel_buffer_dma_draw_vline+0x68>
	{
		temp = t_y;
   15868:	a02b883a 	mov	r21,r20
		t_y = b_y;
   1586c:	9829883a 	mov	r20,r19
		b_y = temp;
   15870:	a827883a 	mov	r19,r21
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
   15874:	94406c2e 	bgeu	r18,r17,15a28 <alt_up_pixel_buffer_dma_draw_vline+0x21c>
   15878:	a4006b2e 	bgeu	r20,r16,15a28 <alt_up_pixel_buffer_dma_draw_vline+0x21c>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
   1587c:	9c000136 	bltu	r19,r16,15884 <alt_up_pixel_buffer_dma_draw_vline+0x78>
	{
		b_y = limit_y - 1;
   15880:	84ffffc4 	addi	r19,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
   15884:	e0800217 	ldw	r2,8(fp)
   15888:	10800058 	cmpnei	r2,r2,1
   1588c:	1000031e 	bne	r2,zero,1589c <alt_up_pixel_buffer_dma_draw_vline+0x90>
		addr = pixel_buffer->back_buffer_start_address;
   15890:	e0bff517 	ldw	r2,-44(fp)
   15894:	14000c17 	ldw	r16,48(r2)
   15898:	00000206 	br	158a4 <alt_up_pixel_buffer_dma_draw_vline+0x98>
	else
		addr = pixel_buffer->buffer_start_address;
   1589c:	e0bff517 	ldw	r2,-44(fp)
   158a0:	14000b17 	ldw	r16,44(r2)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   158a4:	e0bff517 	ldw	r2,-44(fp)
   158a8:	10800d17 	ldw	r2,52(r2)
   158ac:	1000301e 	bne	r2,zero,15970 <alt_up_pixel_buffer_dma_draw_vline+0x164>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
   158b0:	e0bff517 	ldw	r2,-44(fp)
   158b4:	15401317 	ldw	r21,76(r2)
		addr = addr + (t_y << offset_y);
   158b8:	a544983a 	sll	r2,r20,r21
   158bc:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   158c0:	e0bff517 	ldw	r2,-44(fp)
   158c4:	10800e17 	ldw	r2,56(r2)
   158c8:	10800058 	cmpnei	r2,r2,1
   158cc:	10000b1e 	bne	r2,zero,158fc <alt_up_pixel_buffer_dma_draw_vline+0xf0>
			for (y = t_y; y <= b_y; y++)
   158d0:	a023883a 	mov	r17,r20
   158d4:	00000706 	br	158f4 <alt_up_pixel_buffer_dma_draw_vline+0xe8>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
   158d8:	9405883a 	add	r2,r18,r16
   158dc:	b007883a 	mov	r3,r22
   158e0:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
   158e4:	00800044 	movi	r2,1
   158e8:	1544983a 	sll	r2,r2,r21
   158ec:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
   158f0:	8c400044 	addi	r17,r17,1
   158f4:	9c7ff82e 	bgeu	r19,r17,158d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70158d8>
   158f8:	00004c06 	br	15a2c <alt_up_pixel_buffer_dma_draw_vline+0x220>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   158fc:	e0bff517 	ldw	r2,-44(fp)
   15900:	10800e17 	ldw	r2,56(r2)
   15904:	10800098 	cmpnei	r2,r2,2
   15908:	10000c1e 	bne	r2,zero,1593c <alt_up_pixel_buffer_dma_draw_vline+0x130>
			for (y = t_y; y <= b_y; y++)
   1590c:	a023883a 	mov	r17,r20
   15910:	00000806 	br	15934 <alt_up_pixel_buffer_dma_draw_vline+0x128>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
   15914:	9485883a 	add	r2,r18,r18
   15918:	1405883a 	add	r2,r2,r16
   1591c:	b007883a 	mov	r3,r22
   15920:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
   15924:	00800044 	movi	r2,1
   15928:	1544983a 	sll	r2,r2,r21
   1592c:	80a1883a 	add	r16,r16,r2
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
   15930:	8c400044 	addi	r17,r17,1
   15934:	9c7ff72e 	bgeu	r19,r17,15914 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015914>
   15938:	00003c06 	br	15a2c <alt_up_pixel_buffer_dma_draw_vline+0x220>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
   1593c:	a023883a 	mov	r17,r20
   15940:	00000906 	br	15968 <alt_up_pixel_buffer_dma_draw_vline+0x15c>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
   15944:	9485883a 	add	r2,r18,r18
   15948:	1085883a 	add	r2,r2,r2
   1594c:	1405883a 	add	r2,r2,r16
   15950:	b007883a 	mov	r3,r22
   15954:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
   15958:	00800044 	movi	r2,1
   1595c:	1544983a 	sll	r2,r2,r21
   15960:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
   15964:	8c400044 	addi	r17,r17,1
   15968:	9c7ff62e 	bgeu	r19,r17,15944 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015944>
   1596c:	00002f06 	br	15a2c <alt_up_pixel_buffer_dma_draw_vline+0x220>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   15970:	e0bff517 	ldw	r2,-44(fp)
   15974:	10800e17 	ldw	r2,56(r2)
   15978:	10800058 	cmpnei	r2,r2,1
   1597c:	10000a1e 	bne	r2,zero,159a8 <alt_up_pixel_buffer_dma_draw_vline+0x19c>
			addr = addr + t_y * limit_x;
   15980:	a445383a 	mul	r2,r20,r17
   15984:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
   15988:	00000506 	br	159a0 <alt_up_pixel_buffer_dma_draw_vline+0x194>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
   1598c:	9405883a 	add	r2,r18,r16
   15990:	b007883a 	mov	r3,r22
   15994:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
   15998:	8461883a 	add	r16,r16,r17
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   1599c:	a5000044 	addi	r20,r20,1
   159a0:	9d3ffa2e 	bgeu	r19,r20,1598c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701598c>
   159a4:	00002106 	br	15a2c <alt_up_pixel_buffer_dma_draw_vline+0x220>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   159a8:	e0bff517 	ldw	r2,-44(fp)
   159ac:	10800e17 	ldw	r2,56(r2)
   159b0:	10800098 	cmpnei	r2,r2,2
   159b4:	10000d1e 	bne	r2,zero,159ec <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
			limit_x = limit_x << 1;
   159b8:	8c45883a 	add	r2,r17,r17
   159bc:	1023883a 	mov	r17,r2
			addr = addr + t_y * limit_x;
   159c0:	a445383a 	mul	r2,r20,r17
   159c4:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
   159c8:	00000606 	br	159e4 <alt_up_pixel_buffer_dma_draw_vline+0x1d8>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
   159cc:	9485883a 	add	r2,r18,r18
   159d0:	1405883a 	add	r2,r2,r16
   159d4:	b007883a 	mov	r3,r22
   159d8:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
   159dc:	8461883a 	add	r16,r16,r17
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   159e0:	a5000044 	addi	r20,r20,1
   159e4:	9d3ff92e 	bgeu	r19,r20,159cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70159cc>
   159e8:	00001006 	br	15a2c <alt_up_pixel_buffer_dma_draw_vline+0x220>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
   159ec:	8c45883a 	add	r2,r17,r17
   159f0:	1085883a 	add	r2,r2,r2
   159f4:	1023883a 	mov	r17,r2
			addr = addr + t_y * limit_x;
   159f8:	a445383a 	mul	r2,r20,r17
   159fc:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
   15a00:	00000706 	br	15a20 <alt_up_pixel_buffer_dma_draw_vline+0x214>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
   15a04:	9485883a 	add	r2,r18,r18
   15a08:	1085883a 	add	r2,r2,r2
   15a0c:	1405883a 	add	r2,r2,r16
   15a10:	b007883a 	mov	r3,r22
   15a14:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
   15a18:	8461883a 	add	r16,r16,r17
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   15a1c:	a5000044 	addi	r20,r20,1
   15a20:	9d3ff82e 	bgeu	r19,r20,15a04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015a04>
   15a24:	00000106 	br	15a2c <alt_up_pixel_buffer_dma_draw_vline+0x220>
		b_y = temp;
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
   15a28:	0001883a 	nop
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
   15a2c:	e6fff904 	addi	sp,fp,-28
   15a30:	df000717 	ldw	fp,28(sp)
   15a34:	dd800617 	ldw	r22,24(sp)
   15a38:	dd400517 	ldw	r21,20(sp)
   15a3c:	dd000417 	ldw	r20,16(sp)
   15a40:	dcc00317 	ldw	r19,12(sp)
   15a44:	dc800217 	ldw	r18,8(sp)
   15a48:	dc400117 	ldw	r17,4(sp)
   15a4c:	dc000017 	ldw	r16,0(sp)
   15a50:	dec00804 	addi	sp,sp,32
   15a54:	f800283a 	ret

00015a58 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
   15a58:	defff804 	addi	sp,sp,-32
   15a5c:	dfc00715 	stw	ra,28(sp)
   15a60:	df000615 	stw	fp,24(sp)
   15a64:	df000604 	addi	fp,sp,24
   15a68:	e13ffc15 	stw	r4,-16(fp)
   15a6c:	e17ffd15 	stw	r5,-12(fp)
   15a70:	e1bffe15 	stw	r6,-8(fp)
   15a74:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
   15a78:	e0800417 	ldw	r2,16(fp)
   15a7c:	d8800115 	stw	r2,4(sp)
   15a80:	e0800317 	ldw	r2,12(fp)
   15a84:	d8800015 	stw	r2,0(sp)
   15a88:	e1fffe17 	ldw	r7,-8(fp)
   15a8c:	e1bfff17 	ldw	r6,-4(fp)
   15a90:	e17ffd17 	ldw	r5,-12(fp)
   15a94:	e13ffc17 	ldw	r4,-16(fp)
   15a98:	00155fc0 	call	155fc <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
   15a9c:	e0800417 	ldw	r2,16(fp)
   15aa0:	d8800115 	stw	r2,4(sp)
   15aa4:	e0800317 	ldw	r2,12(fp)
   15aa8:	d8800015 	stw	r2,0(sp)
   15aac:	e1c00217 	ldw	r7,8(fp)
   15ab0:	e1bfff17 	ldw	r6,-4(fp)
   15ab4:	e17ffd17 	ldw	r5,-12(fp)
   15ab8:	e13ffc17 	ldw	r4,-16(fp)
   15abc:	00155fc0 	call	155fc <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
   15ac0:	e0800417 	ldw	r2,16(fp)
   15ac4:	d8800115 	stw	r2,4(sp)
   15ac8:	e0800317 	ldw	r2,12(fp)
   15acc:	d8800015 	stw	r2,0(sp)
   15ad0:	e1c00217 	ldw	r7,8(fp)
   15ad4:	e1bffe17 	ldw	r6,-8(fp)
   15ad8:	e17ffd17 	ldw	r5,-12(fp)
   15adc:	e13ffc17 	ldw	r4,-16(fp)
   15ae0:	001580c0 	call	1580c <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
   15ae4:	e0800417 	ldw	r2,16(fp)
   15ae8:	d8800115 	stw	r2,4(sp)
   15aec:	e0800317 	ldw	r2,12(fp)
   15af0:	d8800015 	stw	r2,0(sp)
   15af4:	e1c00217 	ldw	r7,8(fp)
   15af8:	e1bffe17 	ldw	r6,-8(fp)
   15afc:	e17fff17 	ldw	r5,-4(fp)
   15b00:	e13ffc17 	ldw	r4,-16(fp)
   15b04:	001580c0 	call	1580c <alt_up_pixel_buffer_dma_draw_vline>
}
   15b08:	0001883a 	nop
   15b0c:	e037883a 	mov	sp,fp
   15b10:	dfc00117 	ldw	ra,4(sp)
   15b14:	df000017 	ldw	fp,0(sp)
   15b18:	dec00204 	addi	sp,sp,8
   15b1c:	f800283a 	ret

00015b20 <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
   15b20:	deffff04 	addi	sp,sp,-4
   15b24:	df000015 	stw	fp,0(sp)
   15b28:	d839883a 	mov	fp,sp
   15b2c:	2005883a 	mov	r2,r4
   15b30:	3007883a 	mov	r3,r6
   15b34:	3809883a 	mov	r4,r7
   15b38:	e1800117 	ldw	r6,4(fp)
   15b3c:	e1c00217 	ldw	r7,8(fp)
	if (mode == 0)
   15b40:	3800051e 	bne	r7,zero,15b58 <helper_plot_pixel+0x38>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
   15b44:	2909383a 	mul	r4,r5,r4
   15b48:	20c7883a 	add	r3,r4,r3
   15b4c:	1885883a 	add	r2,r3,r2
   15b50:	11800025 	stbio	r6,0(r2)
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
   15b54:	00000e06 	br	15b90 <helper_plot_pixel+0x70>
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
   15b58:	39c00058 	cmpnei	r7,r7,1
   15b5c:	3800061e 	bne	r7,zero,15b78 <helper_plot_pixel+0x58>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
   15b60:	2909383a 	mul	r4,r5,r4
   15b64:	20c7883a 	add	r3,r4,r3
   15b68:	18c7883a 	add	r3,r3,r3
   15b6c:	1885883a 	add	r2,r3,r2
   15b70:	1180002d 	sthio	r6,0(r2)
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
   15b74:	00000606 	br	15b90 <helper_plot_pixel+0x70>
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
   15b78:	2909383a 	mul	r4,r5,r4
   15b7c:	20c7883a 	add	r3,r4,r3
   15b80:	18c7883a 	add	r3,r3,r3
   15b84:	18c7883a 	add	r3,r3,r3
   15b88:	1885883a 	add	r2,r3,r2
   15b8c:	11800035 	stwio	r6,0(r2)
}
   15b90:	0001883a 	nop
   15b94:	e037883a 	mov	sp,fp
   15b98:	df000017 	ldw	fp,0(sp)
   15b9c:	dec00104 	addi	sp,sp,4
   15ba0:	f800283a 	ret

00015ba4 <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
   15ba4:	deffeb04 	addi	sp,sp,-84
   15ba8:	dfc01415 	stw	ra,80(sp)
   15bac:	df001315 	stw	fp,76(sp)
   15bb0:	ddc01215 	stw	r23,72(sp)
   15bb4:	dd801115 	stw	r22,68(sp)
   15bb8:	dd401015 	stw	r21,64(sp)
   15bbc:	dd000f15 	stw	r20,60(sp)
   15bc0:	dcc00e15 	stw	r19,56(sp)
   15bc4:	dc800d15 	stw	r18,52(sp)
   15bc8:	dc400c15 	stw	r17,48(sp)
   15bcc:	dc000b15 	stw	r16,44(sp)
   15bd0:	df001304 	addi	fp,sp,76
   15bd4:	e13fef15 	stw	r4,-68(fp)
   15bd8:	e17ff015 	stw	r5,-64(fp)
   15bdc:	e1bff115 	stw	r6,-60(fp)
   15be0:	e1fff215 	stw	r7,-56(fp)
	register int x_0 = x0;
   15be4:	e47ff017 	ldw	r17,-64(fp)
	register int y_0 = y0;
   15be8:	e4fff117 	ldw	r19,-60(fp)
	register int x_1 = x1;
   15bec:	e4bff217 	ldw	r18,-56(fp)
	register int y_1 = y1;
   15bf0:	e5000217 	ldw	r20,8(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
   15bf4:	a4c5c83a 	sub	r2,r20,r19
   15bf8:	1000010e 	bge	r2,zero,15c00 <alt_up_pixel_buffer_dma_draw_line+0x5c>
   15bfc:	0085c83a 	sub	r2,zero,r2
   15c00:	1007883a 	mov	r3,r2
   15c04:	9445c83a 	sub	r2,r18,r17
   15c08:	1000010e 	bge	r2,zero,15c10 <alt_up_pixel_buffer_dma_draw_line+0x6c>
   15c0c:	0085c83a 	sub	r2,zero,r2
   15c10:	10c4803a 	cmplt	r2,r2,r3
   15c14:	e0bff305 	stb	r2,-52(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
   15c18:	e0bfef17 	ldw	r2,-68(fp)
   15c1c:	10800e17 	ldw	r2,56(r2)
   15c20:	10800060 	cmpeqi	r2,r2,1
   15c24:	1000081e 	bne	r2,zero,15c48 <alt_up_pixel_buffer_dma_draw_line+0xa4>
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
   15c28:	e0bfef17 	ldw	r2,-68(fp)
   15c2c:	10800e17 	ldw	r2,56(r2)
   15c30:	10800098 	cmpnei	r2,r2,2
   15c34:	1000021e 	bne	r2,zero,15c40 <alt_up_pixel_buffer_dma_draw_line+0x9c>
   15c38:	00800044 	movi	r2,1
   15c3c:	00000306 	br	15c4c <alt_up_pixel_buffer_dma_draw_line+0xa8>
   15c40:	00800084 	movi	r2,2
   15c44:	00000106 	br	15c4c <alt_up_pixel_buffer_dma_draw_line+0xa8>
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
   15c48:	0005883a 	mov	r2,zero
   15c4c:	e0bff415 	stw	r2,-48(fp)
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
	register int line_color = color;
   15c50:	e0800317 	ldw	r2,12(fp)
   15c54:	e0bff515 	stw	r2,-44(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
   15c58:	e0bfef17 	ldw	r2,-68(fp)
   15c5c:	10800d17 	ldw	r2,52(r2)
   15c60:	1000071e 	bne	r2,zero,15c80 <alt_up_pixel_buffer_dma_draw_line+0xdc>
   15c64:	e0bfef17 	ldw	r2,-68(fp)
   15c68:	10801317 	ldw	r2,76(r2)
   15c6c:	e0fff417 	ldw	r3,-48(fp)
   15c70:	10c5c83a 	sub	r2,r2,r3
   15c74:	00c00044 	movi	r3,1
   15c78:	1884983a 	sll	r2,r3,r2
   15c7c:	00000206 	br	15c88 <alt_up_pixel_buffer_dma_draw_line+0xe4>
   15c80:	e0bfef17 	ldw	r2,-68(fp)
   15c84:	10800f17 	ldw	r2,60(r2)
   15c88:	e0bff615 	stw	r2,-40(fp)

	if (backbuffer == 1)
   15c8c:	e0800417 	ldw	r2,16(fp)
   15c90:	10800058 	cmpnei	r2,r2,1
   15c94:	1000031e 	bne	r2,zero,15ca4 <alt_up_pixel_buffer_dma_draw_line+0x100>
		buffer_start = pixel_buffer->back_buffer_start_address;
   15c98:	e0bfef17 	ldw	r2,-68(fp)
   15c9c:	15c00c17 	ldw	r23,48(r2)
   15ca0:	00000206 	br	15cac <alt_up_pixel_buffer_dma_draw_line+0x108>
	else
		buffer_start = pixel_buffer->buffer_start_address;
   15ca4:	e0bfef17 	ldw	r2,-68(fp)
   15ca8:	15c00b17 	ldw	r23,44(r2)

	/* Preprocessing inputs */
	if (steep > 0) {
   15cac:	e0bff307 	ldb	r2,-52(fp)
   15cb0:	0080060e 	bge	zero,r2,15ccc <alt_up_pixel_buffer_dma_draw_line+0x128>
		// Swap x_0 and y_0
		error = x_0;
   15cb4:	8821883a 	mov	r16,r17
		x_0 = y_0;
   15cb8:	9823883a 	mov	r17,r19
		y_0 = error;
   15cbc:	8027883a 	mov	r19,r16
		// Swap x_1 and y_1
		error = x_1;
   15cc0:	9021883a 	mov	r16,r18
		x_1 = y_1;
   15cc4:	a025883a 	mov	r18,r20
		y_1 = error;
   15cc8:	8029883a 	mov	r20,r16
	}
	if (x_0 > x_1) {
   15ccc:	9440060e 	bge	r18,r17,15ce8 <alt_up_pixel_buffer_dma_draw_line+0x144>
		// Swap x_0 and x_1
		error = x_0;
   15cd0:	8821883a 	mov	r16,r17
		x_0 = x_1;
   15cd4:	9023883a 	mov	r17,r18
		x_1 = error;
   15cd8:	8025883a 	mov	r18,r16
		// Swap y_0 and y_1
		error = y_0;
   15cdc:	9821883a 	mov	r16,r19
		y_0 = y_1;
   15ce0:	a027883a 	mov	r19,r20
		y_1 = error;
   15ce4:	8029883a 	mov	r20,r16
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
   15ce8:	946bc83a 	sub	r21,r18,r17
	deltay = ABS(y_1 - y_0);
   15cec:	a4c5c83a 	sub	r2,r20,r19
   15cf0:	1000010e 	bge	r2,zero,15cf8 <alt_up_pixel_buffer_dma_draw_line+0x154>
   15cf4:	0085c83a 	sub	r2,zero,r2
   15cf8:	e0bff715 	stw	r2,-36(fp)
	error = -(deltax / 2); 
   15cfc:	a804d7fa 	srli	r2,r21,31
   15d00:	1545883a 	add	r2,r2,r21
   15d04:	1005d07a 	srai	r2,r2,1
   15d08:	00a1c83a 	sub	r16,zero,r2
	y = y_0;
   15d0c:	982d883a 	mov	r22,r19
	if (y_0 < y_1)
   15d10:	9d00020e 	bge	r19,r20,15d1c <alt_up_pixel_buffer_dma_draw_line+0x178>
		ystep = 1;
   15d14:	04c00044 	movi	r19,1
   15d18:	00000106 	br	15d20 <alt_up_pixel_buffer_dma_draw_line+0x17c>
	else
		ystep = -1;
   15d1c:	04ffffc4 	movi	r19,-1

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
   15d20:	e0bff307 	ldb	r2,-52(fp)
   15d24:	10800058 	cmpnei	r2,r2,1
   15d28:	1000211e 	bne	r2,zero,15db0 <alt_up_pixel_buffer_dma_draw_line+0x20c>
	{
		for (x=x_0; x <= x_1; x++) {
   15d2c:	00000f06 	br	15d6c <alt_up_pixel_buffer_dma_draw_line+0x1c8>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
   15d30:	e0bff417 	ldw	r2,-48(fp)
   15d34:	d8800115 	stw	r2,4(sp)
   15d38:	e0bff517 	ldw	r2,-44(fp)
   15d3c:	d8800015 	stw	r2,0(sp)
   15d40:	880f883a 	mov	r7,r17
   15d44:	b00d883a 	mov	r6,r22
   15d48:	e17ff617 	ldw	r5,-40(fp)
   15d4c:	b809883a 	mov	r4,r23
   15d50:	0015b200 	call	15b20 <helper_plot_pixel>
			error = error + deltay;
   15d54:	e0bff717 	ldw	r2,-36(fp)
   15d58:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
   15d5c:	0400020e 	bge	zero,r16,15d68 <alt_up_pixel_buffer_dma_draw_line+0x1c4>
				y = y + ystep;
   15d60:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
   15d64:	8561c83a 	sub	r16,r16,r21

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
   15d68:	8c400044 	addi	r17,r17,1
   15d6c:	947ff00e 	bge	r18,r17,15d30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015d30>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
   15d70:	00001006 	br	15db4 <alt_up_pixel_buffer_dma_draw_line+0x210>
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
   15d74:	e0bff417 	ldw	r2,-48(fp)
   15d78:	d8800115 	stw	r2,4(sp)
   15d7c:	e0bff517 	ldw	r2,-44(fp)
   15d80:	d8800015 	stw	r2,0(sp)
   15d84:	b00f883a 	mov	r7,r22
   15d88:	880d883a 	mov	r6,r17
   15d8c:	e17ff617 	ldw	r5,-40(fp)
   15d90:	b809883a 	mov	r4,r23
   15d94:	0015b200 	call	15b20 <helper_plot_pixel>
			error = error + deltay;
   15d98:	e0bff717 	ldw	r2,-36(fp)
   15d9c:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
   15da0:	0400020e 	bge	zero,r16,15dac <alt_up_pixel_buffer_dma_draw_line+0x208>
				y = y + ystep;
   15da4:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
   15da8:	8561c83a 	sub	r16,r16,r21
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
   15dac:	8c400044 	addi	r17,r17,1
   15db0:	947ff00e 	bge	r18,r17,15d74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015d74>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
   15db4:	0001883a 	nop
   15db8:	e6fff804 	addi	sp,fp,-32
   15dbc:	dfc00917 	ldw	ra,36(sp)
   15dc0:	df000817 	ldw	fp,32(sp)
   15dc4:	ddc00717 	ldw	r23,28(sp)
   15dc8:	dd800617 	ldw	r22,24(sp)
   15dcc:	dd400517 	ldw	r21,20(sp)
   15dd0:	dd000417 	ldw	r20,16(sp)
   15dd4:	dcc00317 	ldw	r19,12(sp)
   15dd8:	dc800217 	ldw	r18,8(sp)
   15ddc:	dc400117 	ldw	r17,4(sp)
   15de0:	dc000017 	ldw	r16,0(sp)
   15de4:	dec00a04 	addi	sp,sp,40
   15de8:	f800283a 	ret

00015dec <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   15dec:	defff504 	addi	sp,sp,-44
   15df0:	df000a15 	stw	fp,40(sp)
   15df4:	df000a04 	addi	fp,sp,40
   15df8:	e13ffc15 	stw	r4,-16(fp)
   15dfc:	e17ffd15 	stw	r5,-12(fp)
   15e00:	e1bffe15 	stw	r6,-8(fp)
   15e04:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   15e08:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   15e0c:	d0a7e017 	ldw	r2,-24704(gp)
  
  if (alt_ticks_per_second ())
   15e10:	10003c26 	beq	r2,zero,15f04 <alt_alarm_start+0x118>
  {
    if (alarm)
   15e14:	e0bffc17 	ldw	r2,-16(fp)
   15e18:	10003826 	beq	r2,zero,15efc <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   15e1c:	e0bffc17 	ldw	r2,-16(fp)
   15e20:	e0fffe17 	ldw	r3,-8(fp)
   15e24:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   15e28:	e0bffc17 	ldw	r2,-16(fp)
   15e2c:	e0ffff17 	ldw	r3,-4(fp)
   15e30:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15e34:	0005303a 	rdctl	r2,status
   15e38:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15e3c:	e0fff917 	ldw	r3,-28(fp)
   15e40:	00bfff84 	movi	r2,-2
   15e44:	1884703a 	and	r2,r3,r2
   15e48:	1001703a 	wrctl	status,r2
  
  return context;
   15e4c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   15e50:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   15e54:	d0a7e117 	ldw	r2,-24700(gp)
      
      current_nticks = alt_nticks();
   15e58:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   15e5c:	e0fffd17 	ldw	r3,-12(fp)
   15e60:	e0bff617 	ldw	r2,-40(fp)
   15e64:	1885883a 	add	r2,r3,r2
   15e68:	10c00044 	addi	r3,r2,1
   15e6c:	e0bffc17 	ldw	r2,-16(fp)
   15e70:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   15e74:	e0bffc17 	ldw	r2,-16(fp)
   15e78:	10c00217 	ldw	r3,8(r2)
   15e7c:	e0bff617 	ldw	r2,-40(fp)
   15e80:	1880042e 	bgeu	r3,r2,15e94 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   15e84:	e0bffc17 	ldw	r2,-16(fp)
   15e88:	00c00044 	movi	r3,1
   15e8c:	10c00405 	stb	r3,16(r2)
   15e90:	00000206 	br	15e9c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   15e94:	e0bffc17 	ldw	r2,-16(fp)
   15e98:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   15e9c:	e0bffc17 	ldw	r2,-16(fp)
   15ea0:	d0e00e04 	addi	r3,gp,-32712
   15ea4:	e0fffa15 	stw	r3,-24(fp)
   15ea8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   15eac:	e0bffb17 	ldw	r2,-20(fp)
   15eb0:	e0fffa17 	ldw	r3,-24(fp)
   15eb4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   15eb8:	e0bffa17 	ldw	r2,-24(fp)
   15ebc:	10c00017 	ldw	r3,0(r2)
   15ec0:	e0bffb17 	ldw	r2,-20(fp)
   15ec4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   15ec8:	e0bffa17 	ldw	r2,-24(fp)
   15ecc:	10800017 	ldw	r2,0(r2)
   15ed0:	e0fffb17 	ldw	r3,-20(fp)
   15ed4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   15ed8:	e0bffa17 	ldw	r2,-24(fp)
   15edc:	e0fffb17 	ldw	r3,-20(fp)
   15ee0:	10c00015 	stw	r3,0(r2)
   15ee4:	e0bff817 	ldw	r2,-32(fp)
   15ee8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15eec:	e0bff717 	ldw	r2,-36(fp)
   15ef0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   15ef4:	0005883a 	mov	r2,zero
   15ef8:	00000306 	br	15f08 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   15efc:	00bffa84 	movi	r2,-22
   15f00:	00000106 	br	15f08 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   15f04:	00bfde84 	movi	r2,-134
  }
}
   15f08:	e037883a 	mov	sp,fp
   15f0c:	df000017 	ldw	fp,0(sp)
   15f10:	dec00104 	addi	sp,sp,4
   15f14:	f800283a 	ret

00015f18 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   15f18:	deffff04 	addi	sp,sp,-4
   15f1c:	df000015 	stw	fp,0(sp)
   15f20:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   15f24:	0001883a 	nop
   15f28:	e037883a 	mov	sp,fp
   15f2c:	df000017 	ldw	fp,0(sp)
   15f30:	dec00104 	addi	sp,sp,4
   15f34:	f800283a 	ret

00015f38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   15f38:	defffe04 	addi	sp,sp,-8
   15f3c:	dfc00115 	stw	ra,4(sp)
   15f40:	df000015 	stw	fp,0(sp)
   15f44:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   15f48:	d0a00b17 	ldw	r2,-32724(gp)
   15f4c:	10000326 	beq	r2,zero,15f5c <alt_get_errno+0x24>
   15f50:	d0a00b17 	ldw	r2,-32724(gp)
   15f54:	103ee83a 	callr	r2
   15f58:	00000106 	br	15f60 <alt_get_errno+0x28>
   15f5c:	d0a7ce04 	addi	r2,gp,-24776
}
   15f60:	e037883a 	mov	sp,fp
   15f64:	dfc00117 	ldw	ra,4(sp)
   15f68:	df000017 	ldw	fp,0(sp)
   15f6c:	dec00204 	addi	sp,sp,8
   15f70:	f800283a 	ret

00015f74 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   15f74:	defffa04 	addi	sp,sp,-24
   15f78:	dfc00515 	stw	ra,20(sp)
   15f7c:	df000415 	stw	fp,16(sp)
   15f80:	df000404 	addi	fp,sp,16
   15f84:	e13ffe15 	stw	r4,-8(fp)
   15f88:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   15f8c:	e0bffe17 	ldw	r2,-8(fp)
   15f90:	10000326 	beq	r2,zero,15fa0 <alt_dev_llist_insert+0x2c>
   15f94:	e0bffe17 	ldw	r2,-8(fp)
   15f98:	10800217 	ldw	r2,8(r2)
   15f9c:	1000061e 	bne	r2,zero,15fb8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   15fa0:	0015f380 	call	15f38 <alt_get_errno>
   15fa4:	1007883a 	mov	r3,r2
   15fa8:	00800584 	movi	r2,22
   15fac:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   15fb0:	00bffa84 	movi	r2,-22
   15fb4:	00001306 	br	16004 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   15fb8:	e0bffe17 	ldw	r2,-8(fp)
   15fbc:	e0ffff17 	ldw	r3,-4(fp)
   15fc0:	e0fffc15 	stw	r3,-16(fp)
   15fc4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   15fc8:	e0bffd17 	ldw	r2,-12(fp)
   15fcc:	e0fffc17 	ldw	r3,-16(fp)
   15fd0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   15fd4:	e0bffc17 	ldw	r2,-16(fp)
   15fd8:	10c00017 	ldw	r3,0(r2)
   15fdc:	e0bffd17 	ldw	r2,-12(fp)
   15fe0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   15fe4:	e0bffc17 	ldw	r2,-16(fp)
   15fe8:	10800017 	ldw	r2,0(r2)
   15fec:	e0fffd17 	ldw	r3,-12(fp)
   15ff0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   15ff4:	e0bffc17 	ldw	r2,-16(fp)
   15ff8:	e0fffd17 	ldw	r3,-12(fp)
   15ffc:	10c00015 	stw	r3,0(r2)

  return 0;  
   16000:	0005883a 	mov	r2,zero
}
   16004:	e037883a 	mov	sp,fp
   16008:	dfc00117 	ldw	ra,4(sp)
   1600c:	df000017 	ldw	fp,0(sp)
   16010:	dec00204 	addi	sp,sp,8
   16014:	f800283a 	ret

00016018 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   16018:	defffd04 	addi	sp,sp,-12
   1601c:	dfc00215 	stw	ra,8(sp)
   16020:	df000115 	stw	fp,4(sp)
   16024:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   16028:	00800074 	movhi	r2,1
   1602c:	109c1204 	addi	r2,r2,28744
   16030:	e0bfff15 	stw	r2,-4(fp)
   16034:	00000606 	br	16050 <_do_ctors+0x38>
        (*ctor) (); 
   16038:	e0bfff17 	ldw	r2,-4(fp)
   1603c:	10800017 	ldw	r2,0(r2)
   16040:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   16044:	e0bfff17 	ldw	r2,-4(fp)
   16048:	10bfff04 	addi	r2,r2,-4
   1604c:	e0bfff15 	stw	r2,-4(fp)
   16050:	e0ffff17 	ldw	r3,-4(fp)
   16054:	00800074 	movhi	r2,1
   16058:	109c1304 	addi	r2,r2,28748
   1605c:	18bff62e 	bgeu	r3,r2,16038 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016038>
        (*ctor) (); 
}
   16060:	0001883a 	nop
   16064:	e037883a 	mov	sp,fp
   16068:	dfc00117 	ldw	ra,4(sp)
   1606c:	df000017 	ldw	fp,0(sp)
   16070:	dec00204 	addi	sp,sp,8
   16074:	f800283a 	ret

00016078 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   16078:	defffd04 	addi	sp,sp,-12
   1607c:	dfc00215 	stw	ra,8(sp)
   16080:	df000115 	stw	fp,4(sp)
   16084:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   16088:	00800074 	movhi	r2,1
   1608c:	109c1204 	addi	r2,r2,28744
   16090:	e0bfff15 	stw	r2,-4(fp)
   16094:	00000606 	br	160b0 <_do_dtors+0x38>
        (*dtor) (); 
   16098:	e0bfff17 	ldw	r2,-4(fp)
   1609c:	10800017 	ldw	r2,0(r2)
   160a0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   160a4:	e0bfff17 	ldw	r2,-4(fp)
   160a8:	10bfff04 	addi	r2,r2,-4
   160ac:	e0bfff15 	stw	r2,-4(fp)
   160b0:	e0ffff17 	ldw	r3,-4(fp)
   160b4:	00800074 	movhi	r2,1
   160b8:	109c1304 	addi	r2,r2,28748
   160bc:	18bff62e 	bgeu	r3,r2,16098 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016098>
        (*dtor) (); 
}
   160c0:	0001883a 	nop
   160c4:	e037883a 	mov	sp,fp
   160c8:	dfc00117 	ldw	ra,4(sp)
   160cc:	df000017 	ldw	fp,0(sp)
   160d0:	dec00204 	addi	sp,sp,8
   160d4:	f800283a 	ret

000160d8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   160d8:	defffa04 	addi	sp,sp,-24
   160dc:	dfc00515 	stw	ra,20(sp)
   160e0:	df000415 	stw	fp,16(sp)
   160e4:	df000404 	addi	fp,sp,16
   160e8:	e13ffe15 	stw	r4,-8(fp)
   160ec:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   160f0:	e0bfff17 	ldw	r2,-4(fp)
   160f4:	10800017 	ldw	r2,0(r2)
   160f8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   160fc:	e13ffe17 	ldw	r4,-8(fp)
   16100:	00012540 	call	1254 <strlen>
   16104:	10800044 	addi	r2,r2,1
   16108:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1610c:	00000d06 	br	16144 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   16110:	e0bffc17 	ldw	r2,-16(fp)
   16114:	10800217 	ldw	r2,8(r2)
   16118:	e0fffd17 	ldw	r3,-12(fp)
   1611c:	180d883a 	mov	r6,r3
   16120:	e17ffe17 	ldw	r5,-8(fp)
   16124:	1009883a 	mov	r4,r2
   16128:	0016b9c0 	call	16b9c <memcmp>
   1612c:	1000021e 	bne	r2,zero,16138 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   16130:	e0bffc17 	ldw	r2,-16(fp)
   16134:	00000706 	br	16154 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   16138:	e0bffc17 	ldw	r2,-16(fp)
   1613c:	10800017 	ldw	r2,0(r2)
   16140:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   16144:	e0fffc17 	ldw	r3,-16(fp)
   16148:	e0bfff17 	ldw	r2,-4(fp)
   1614c:	18bff01e 	bne	r3,r2,16110 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016110>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   16150:	0005883a 	mov	r2,zero
}
   16154:	e037883a 	mov	sp,fp
   16158:	dfc00117 	ldw	ra,4(sp)
   1615c:	df000017 	ldw	fp,0(sp)
   16160:	dec00204 	addi	sp,sp,8
   16164:	f800283a 	ret

00016168 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   16168:	defffe04 	addi	sp,sp,-8
   1616c:	dfc00115 	stw	ra,4(sp)
   16170:	df000015 	stw	fp,0(sp)
   16174:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   16178:	01440004 	movi	r5,4096
   1617c:	0009883a 	mov	r4,zero
   16180:	0016a240 	call	16a24 <alt_icache_flush>
#endif
}
   16184:	0001883a 	nop
   16188:	e037883a 	mov	sp,fp
   1618c:	dfc00117 	ldw	ra,4(sp)
   16190:	df000017 	ldw	fp,0(sp)
   16194:	dec00204 	addi	sp,sp,8
   16198:	f800283a 	ret

0001619c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1619c:	defff904 	addi	sp,sp,-28
   161a0:	dfc00615 	stw	ra,24(sp)
   161a4:	df000515 	stw	fp,20(sp)
   161a8:	df000504 	addi	fp,sp,20
   161ac:	e13ffc15 	stw	r4,-16(fp)
   161b0:	e17ffd15 	stw	r5,-12(fp)
   161b4:	e1bffe15 	stw	r6,-8(fp)
   161b8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   161bc:	e1bfff17 	ldw	r6,-4(fp)
   161c0:	e17ffe17 	ldw	r5,-8(fp)
   161c4:	e13ffd17 	ldw	r4,-12(fp)
   161c8:	001655c0 	call	1655c <open>
   161cc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   161d0:	e0bffb17 	ldw	r2,-20(fp)
   161d4:	10001c16 	blt	r2,zero,16248 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   161d8:	00800074 	movhi	r2,1
   161dc:	109fd304 	addi	r2,r2,32588
   161e0:	e0fffb17 	ldw	r3,-20(fp)
   161e4:	18c00324 	muli	r3,r3,12
   161e8:	10c5883a 	add	r2,r2,r3
   161ec:	10c00017 	ldw	r3,0(r2)
   161f0:	e0bffc17 	ldw	r2,-16(fp)
   161f4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   161f8:	00800074 	movhi	r2,1
   161fc:	109fd304 	addi	r2,r2,32588
   16200:	e0fffb17 	ldw	r3,-20(fp)
   16204:	18c00324 	muli	r3,r3,12
   16208:	10c5883a 	add	r2,r2,r3
   1620c:	10800104 	addi	r2,r2,4
   16210:	10c00017 	ldw	r3,0(r2)
   16214:	e0bffc17 	ldw	r2,-16(fp)
   16218:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1621c:	00800074 	movhi	r2,1
   16220:	109fd304 	addi	r2,r2,32588
   16224:	e0fffb17 	ldw	r3,-20(fp)
   16228:	18c00324 	muli	r3,r3,12
   1622c:	10c5883a 	add	r2,r2,r3
   16230:	10800204 	addi	r2,r2,8
   16234:	10c00017 	ldw	r3,0(r2)
   16238:	e0bffc17 	ldw	r2,-16(fp)
   1623c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   16240:	e13ffb17 	ldw	r4,-20(fp)
   16244:	000e3980 	call	e398 <alt_release_fd>
  }
} 
   16248:	0001883a 	nop
   1624c:	e037883a 	mov	sp,fp
   16250:	dfc00117 	ldw	ra,4(sp)
   16254:	df000017 	ldw	fp,0(sp)
   16258:	dec00204 	addi	sp,sp,8
   1625c:	f800283a 	ret

00016260 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   16260:	defffb04 	addi	sp,sp,-20
   16264:	dfc00415 	stw	ra,16(sp)
   16268:	df000315 	stw	fp,12(sp)
   1626c:	df000304 	addi	fp,sp,12
   16270:	e13ffd15 	stw	r4,-12(fp)
   16274:	e17ffe15 	stw	r5,-8(fp)
   16278:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   1627c:	01c07fc4 	movi	r7,511
   16280:	01800044 	movi	r6,1
   16284:	e17ffd17 	ldw	r5,-12(fp)
   16288:	01000074 	movhi	r4,1
   1628c:	211fd604 	addi	r4,r4,32600
   16290:	001619c0 	call	1619c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   16294:	01c07fc4 	movi	r7,511
   16298:	000d883a 	mov	r6,zero
   1629c:	e17ffe17 	ldw	r5,-8(fp)
   162a0:	01000074 	movhi	r4,1
   162a4:	211fd304 	addi	r4,r4,32588
   162a8:	001619c0 	call	1619c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   162ac:	01c07fc4 	movi	r7,511
   162b0:	01800044 	movi	r6,1
   162b4:	e17fff17 	ldw	r5,-4(fp)
   162b8:	01000074 	movhi	r4,1
   162bc:	211fd904 	addi	r4,r4,32612
   162c0:	001619c0 	call	1619c <alt_open_fd>
}  
   162c4:	0001883a 	nop
   162c8:	e037883a 	mov	sp,fp
   162cc:	dfc00117 	ldw	ra,4(sp)
   162d0:	df000017 	ldw	fp,0(sp)
   162d4:	dec00204 	addi	sp,sp,8
   162d8:	f800283a 	ret

000162dc <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   162dc:	defff004 	addi	sp,sp,-64
   162e0:	df000f15 	stw	fp,60(sp)
   162e4:	df000f04 	addi	fp,sp,60
   162e8:	e13ffd15 	stw	r4,-12(fp)
   162ec:	e17ffe15 	stw	r5,-8(fp)
   162f0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   162f4:	00bffa84 	movi	r2,-22
   162f8:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   162fc:	e0bffd17 	ldw	r2,-12(fp)
   16300:	10800828 	cmpgeui	r2,r2,32
   16304:	1000501e 	bne	r2,zero,16448 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16308:	0005303a 	rdctl	r2,status
   1630c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16310:	e0fff617 	ldw	r3,-40(fp)
   16314:	00bfff84 	movi	r2,-2
   16318:	1884703a 	and	r2,r3,r2
   1631c:	1001703a 	wrctl	status,r2
  
  return context;
   16320:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   16324:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
   16328:	008000b4 	movhi	r2,2
   1632c:	10ae8f04 	addi	r2,r2,-17860
   16330:	e0fffd17 	ldw	r3,-12(fp)
   16334:	180690fa 	slli	r3,r3,3
   16338:	10c5883a 	add	r2,r2,r3
   1633c:	e0ffff17 	ldw	r3,-4(fp)
   16340:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   16344:	008000b4 	movhi	r2,2
   16348:	10ae8f04 	addi	r2,r2,-17860
   1634c:	e0fffd17 	ldw	r3,-12(fp)
   16350:	180690fa 	slli	r3,r3,3
   16354:	10c5883a 	add	r2,r2,r3
   16358:	10800104 	addi	r2,r2,4
   1635c:	e0fffe17 	ldw	r3,-8(fp)
   16360:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   16364:	e0bfff17 	ldw	r2,-4(fp)
   16368:	10001926 	beq	r2,zero,163d0 <alt_irq_register+0xf4>
   1636c:	e0bffd17 	ldw	r2,-12(fp)
   16370:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16374:	0005303a 	rdctl	r2,status
   16378:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1637c:	e0fff717 	ldw	r3,-36(fp)
   16380:	00bfff84 	movi	r2,-2
   16384:	1884703a 	and	r2,r3,r2
   16388:	1001703a 	wrctl	status,r2
  
  return context;
   1638c:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   16390:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   16394:	00c00044 	movi	r3,1
   16398:	e0bff217 	ldw	r2,-56(fp)
   1639c:	1884983a 	sll	r2,r3,r2
   163a0:	1007883a 	mov	r3,r2
   163a4:	d0a7df17 	ldw	r2,-24708(gp)
   163a8:	1884b03a 	or	r2,r3,r2
   163ac:	d0a7df15 	stw	r2,-24708(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   163b0:	d0a7df17 	ldw	r2,-24708(gp)
   163b4:	100170fa 	wrctl	ienable,r2
   163b8:	e0bff817 	ldw	r2,-32(fp)
   163bc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   163c0:	e0bff917 	ldw	r2,-28(fp)
   163c4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   163c8:	0005883a 	mov	r2,zero
   163cc:	00001906 	br	16434 <alt_irq_register+0x158>
   163d0:	e0bffd17 	ldw	r2,-12(fp)
   163d4:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   163d8:	0005303a 	rdctl	r2,status
   163dc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   163e0:	e0fffa17 	ldw	r3,-24(fp)
   163e4:	00bfff84 	movi	r2,-2
   163e8:	1884703a 	and	r2,r3,r2
   163ec:	1001703a 	wrctl	status,r2
  
  return context;
   163f0:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   163f4:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
   163f8:	00c00044 	movi	r3,1
   163fc:	e0bff417 	ldw	r2,-48(fp)
   16400:	1884983a 	sll	r2,r3,r2
   16404:	0084303a 	nor	r2,zero,r2
   16408:	1007883a 	mov	r3,r2
   1640c:	d0a7df17 	ldw	r2,-24708(gp)
   16410:	1884703a 	and	r2,r3,r2
   16414:	d0a7df15 	stw	r2,-24708(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   16418:	d0a7df17 	ldw	r2,-24708(gp)
   1641c:	100170fa 	wrctl	ienable,r2
   16420:	e0bffb17 	ldw	r2,-20(fp)
   16424:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16428:	e0bffc17 	ldw	r2,-16(fp)
   1642c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   16430:	0005883a 	mov	r2,zero
   16434:	e0bff115 	stw	r2,-60(fp)
   16438:	e0bff317 	ldw	r2,-52(fp)
   1643c:	e0bff515 	stw	r2,-44(fp)
   16440:	e0bff517 	ldw	r2,-44(fp)
   16444:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   16448:	e0bff117 	ldw	r2,-60(fp)
}
   1644c:	e037883a 	mov	sp,fp
   16450:	df000017 	ldw	fp,0(sp)
   16454:	dec00104 	addi	sp,sp,4
   16458:	f800283a 	ret

0001645c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1645c:	defffe04 	addi	sp,sp,-8
   16460:	dfc00115 	stw	ra,4(sp)
   16464:	df000015 	stw	fp,0(sp)
   16468:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1646c:	d0a00b17 	ldw	r2,-32724(gp)
   16470:	10000326 	beq	r2,zero,16480 <alt_get_errno+0x24>
   16474:	d0a00b17 	ldw	r2,-32724(gp)
   16478:	103ee83a 	callr	r2
   1647c:	00000106 	br	16484 <alt_get_errno+0x28>
   16480:	d0a7ce04 	addi	r2,gp,-24776
}
   16484:	e037883a 	mov	sp,fp
   16488:	dfc00117 	ldw	ra,4(sp)
   1648c:	df000017 	ldw	fp,0(sp)
   16490:	dec00204 	addi	sp,sp,8
   16494:	f800283a 	ret

00016498 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   16498:	defffd04 	addi	sp,sp,-12
   1649c:	df000215 	stw	fp,8(sp)
   164a0:	df000204 	addi	fp,sp,8
   164a4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   164a8:	e0bfff17 	ldw	r2,-4(fp)
   164ac:	10800217 	ldw	r2,8(r2)
   164b0:	10d00034 	orhi	r3,r2,16384
   164b4:	e0bfff17 	ldw	r2,-4(fp)
   164b8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   164bc:	e03ffe15 	stw	zero,-8(fp)
   164c0:	00001d06 	br	16538 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   164c4:	00800074 	movhi	r2,1
   164c8:	109fd304 	addi	r2,r2,32588
   164cc:	e0fffe17 	ldw	r3,-8(fp)
   164d0:	18c00324 	muli	r3,r3,12
   164d4:	10c5883a 	add	r2,r2,r3
   164d8:	10c00017 	ldw	r3,0(r2)
   164dc:	e0bfff17 	ldw	r2,-4(fp)
   164e0:	10800017 	ldw	r2,0(r2)
   164e4:	1880111e 	bne	r3,r2,1652c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   164e8:	00800074 	movhi	r2,1
   164ec:	109fd304 	addi	r2,r2,32588
   164f0:	e0fffe17 	ldw	r3,-8(fp)
   164f4:	18c00324 	muli	r3,r3,12
   164f8:	10c5883a 	add	r2,r2,r3
   164fc:	10800204 	addi	r2,r2,8
   16500:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   16504:	1000090e 	bge	r2,zero,1652c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   16508:	e0bffe17 	ldw	r2,-8(fp)
   1650c:	10c00324 	muli	r3,r2,12
   16510:	00800074 	movhi	r2,1
   16514:	109fd304 	addi	r2,r2,32588
   16518:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1651c:	e0bfff17 	ldw	r2,-4(fp)
   16520:	18800226 	beq	r3,r2,1652c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   16524:	00bffcc4 	movi	r2,-13
   16528:	00000806 	br	1654c <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1652c:	e0bffe17 	ldw	r2,-8(fp)
   16530:	10800044 	addi	r2,r2,1
   16534:	e0bffe15 	stw	r2,-8(fp)
   16538:	d0a00a17 	ldw	r2,-32728(gp)
   1653c:	1007883a 	mov	r3,r2
   16540:	e0bffe17 	ldw	r2,-8(fp)
   16544:	18bfdf2e 	bgeu	r3,r2,164c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70164c4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   16548:	0005883a 	mov	r2,zero
}
   1654c:	e037883a 	mov	sp,fp
   16550:	df000017 	ldw	fp,0(sp)
   16554:	dec00104 	addi	sp,sp,4
   16558:	f800283a 	ret

0001655c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1655c:	defff604 	addi	sp,sp,-40
   16560:	dfc00915 	stw	ra,36(sp)
   16564:	df000815 	stw	fp,32(sp)
   16568:	df000804 	addi	fp,sp,32
   1656c:	e13ffd15 	stw	r4,-12(fp)
   16570:	e17ffe15 	stw	r5,-8(fp)
   16574:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   16578:	00bfffc4 	movi	r2,-1
   1657c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   16580:	00bffb44 	movi	r2,-19
   16584:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   16588:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1658c:	d1600804 	addi	r5,gp,-32736
   16590:	e13ffd17 	ldw	r4,-12(fp)
   16594:	00160d80 	call	160d8 <alt_find_dev>
   16598:	e0bff815 	stw	r2,-32(fp)
   1659c:	e0bff817 	ldw	r2,-32(fp)
   165a0:	1000051e 	bne	r2,zero,165b8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   165a4:	e13ffd17 	ldw	r4,-12(fp)
   165a8:	00168780 	call	16878 <alt_find_file>
   165ac:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   165b0:	00800044 	movi	r2,1
   165b4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   165b8:	e0bff817 	ldw	r2,-32(fp)
   165bc:	10002926 	beq	r2,zero,16664 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   165c0:	e13ff817 	ldw	r4,-32(fp)
   165c4:	00169800 	call	16980 <alt_get_fd>
   165c8:	e0bff915 	stw	r2,-28(fp)
   165cc:	e0bff917 	ldw	r2,-28(fp)
   165d0:	1000030e 	bge	r2,zero,165e0 <open+0x84>
    {
      status = index;
   165d4:	e0bff917 	ldw	r2,-28(fp)
   165d8:	e0bffa15 	stw	r2,-24(fp)
   165dc:	00002306 	br	1666c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   165e0:	e0bff917 	ldw	r2,-28(fp)
   165e4:	10c00324 	muli	r3,r2,12
   165e8:	00800074 	movhi	r2,1
   165ec:	109fd304 	addi	r2,r2,32588
   165f0:	1885883a 	add	r2,r3,r2
   165f4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   165f8:	e0fffe17 	ldw	r3,-8(fp)
   165fc:	00900034 	movhi	r2,16384
   16600:	10bfffc4 	addi	r2,r2,-1
   16604:	1886703a 	and	r3,r3,r2
   16608:	e0bffc17 	ldw	r2,-16(fp)
   1660c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   16610:	e0bffb17 	ldw	r2,-20(fp)
   16614:	1000051e 	bne	r2,zero,1662c <open+0xd0>
   16618:	e13ffc17 	ldw	r4,-16(fp)
   1661c:	00164980 	call	16498 <alt_file_locked>
   16620:	e0bffa15 	stw	r2,-24(fp)
   16624:	e0bffa17 	ldw	r2,-24(fp)
   16628:	10001016 	blt	r2,zero,1666c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1662c:	e0bff817 	ldw	r2,-32(fp)
   16630:	10800317 	ldw	r2,12(r2)
   16634:	10000826 	beq	r2,zero,16658 <open+0xfc>
   16638:	e0bff817 	ldw	r2,-32(fp)
   1663c:	10800317 	ldw	r2,12(r2)
   16640:	e1ffff17 	ldw	r7,-4(fp)
   16644:	e1bffe17 	ldw	r6,-8(fp)
   16648:	e17ffd17 	ldw	r5,-12(fp)
   1664c:	e13ffc17 	ldw	r4,-16(fp)
   16650:	103ee83a 	callr	r2
   16654:	00000106 	br	1665c <open+0x100>
   16658:	0005883a 	mov	r2,zero
   1665c:	e0bffa15 	stw	r2,-24(fp)
   16660:	00000206 	br	1666c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   16664:	00bffb44 	movi	r2,-19
   16668:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   1666c:	e0bffa17 	ldw	r2,-24(fp)
   16670:	1000090e 	bge	r2,zero,16698 <open+0x13c>
  {
    alt_release_fd (index);  
   16674:	e13ff917 	ldw	r4,-28(fp)
   16678:	000e3980 	call	e398 <alt_release_fd>
    ALT_ERRNO = -status;
   1667c:	001645c0 	call	1645c <alt_get_errno>
   16680:	1007883a 	mov	r3,r2
   16684:	e0bffa17 	ldw	r2,-24(fp)
   16688:	0085c83a 	sub	r2,zero,r2
   1668c:	18800015 	stw	r2,0(r3)
    return -1;
   16690:	00bfffc4 	movi	r2,-1
   16694:	00000106 	br	1669c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   16698:	e0bff917 	ldw	r2,-28(fp)
}
   1669c:	e037883a 	mov	sp,fp
   166a0:	dfc00117 	ldw	ra,4(sp)
   166a4:	df000017 	ldw	fp,0(sp)
   166a8:	dec00204 	addi	sp,sp,8
   166ac:	f800283a 	ret

000166b0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   166b0:	defffa04 	addi	sp,sp,-24
   166b4:	df000515 	stw	fp,20(sp)
   166b8:	df000504 	addi	fp,sp,20
   166bc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   166c0:	0005303a 	rdctl	r2,status
   166c4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   166c8:	e0fffc17 	ldw	r3,-16(fp)
   166cc:	00bfff84 	movi	r2,-2
   166d0:	1884703a 	and	r2,r3,r2
   166d4:	1001703a 	wrctl	status,r2
  
  return context;
   166d8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   166dc:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   166e0:	e0bfff17 	ldw	r2,-4(fp)
   166e4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   166e8:	e0bffd17 	ldw	r2,-12(fp)
   166ec:	10800017 	ldw	r2,0(r2)
   166f0:	e0fffd17 	ldw	r3,-12(fp)
   166f4:	18c00117 	ldw	r3,4(r3)
   166f8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   166fc:	e0bffd17 	ldw	r2,-12(fp)
   16700:	10800117 	ldw	r2,4(r2)
   16704:	e0fffd17 	ldw	r3,-12(fp)
   16708:	18c00017 	ldw	r3,0(r3)
   1670c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   16710:	e0bffd17 	ldw	r2,-12(fp)
   16714:	e0fffd17 	ldw	r3,-12(fp)
   16718:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   1671c:	e0bffd17 	ldw	r2,-12(fp)
   16720:	e0fffd17 	ldw	r3,-12(fp)
   16724:	10c00015 	stw	r3,0(r2)
   16728:	e0bffb17 	ldw	r2,-20(fp)
   1672c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16730:	e0bffe17 	ldw	r2,-8(fp)
   16734:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   16738:	0001883a 	nop
   1673c:	e037883a 	mov	sp,fp
   16740:	df000017 	ldw	fp,0(sp)
   16744:	dec00104 	addi	sp,sp,4
   16748:	f800283a 	ret

0001674c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1674c:	defffb04 	addi	sp,sp,-20
   16750:	dfc00415 	stw	ra,16(sp)
   16754:	df000315 	stw	fp,12(sp)
   16758:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   1675c:	d0a00e17 	ldw	r2,-32712(gp)
   16760:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   16764:	d0a7e117 	ldw	r2,-24700(gp)
   16768:	10800044 	addi	r2,r2,1
   1676c:	d0a7e115 	stw	r2,-24700(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   16770:	00002e06 	br	1682c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   16774:	e0bffd17 	ldw	r2,-12(fp)
   16778:	10800017 	ldw	r2,0(r2)
   1677c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   16780:	e0bffd17 	ldw	r2,-12(fp)
   16784:	10800403 	ldbu	r2,16(r2)
   16788:	10803fcc 	andi	r2,r2,255
   1678c:	10000426 	beq	r2,zero,167a0 <alt_tick+0x54>
   16790:	d0a7e117 	ldw	r2,-24700(gp)
   16794:	1000021e 	bne	r2,zero,167a0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   16798:	e0bffd17 	ldw	r2,-12(fp)
   1679c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   167a0:	e0bffd17 	ldw	r2,-12(fp)
   167a4:	10800217 	ldw	r2,8(r2)
   167a8:	d0e7e117 	ldw	r3,-24700(gp)
   167ac:	18801d36 	bltu	r3,r2,16824 <alt_tick+0xd8>
   167b0:	e0bffd17 	ldw	r2,-12(fp)
   167b4:	10800403 	ldbu	r2,16(r2)
   167b8:	10803fcc 	andi	r2,r2,255
   167bc:	1000191e 	bne	r2,zero,16824 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   167c0:	e0bffd17 	ldw	r2,-12(fp)
   167c4:	10800317 	ldw	r2,12(r2)
   167c8:	e0fffd17 	ldw	r3,-12(fp)
   167cc:	18c00517 	ldw	r3,20(r3)
   167d0:	1809883a 	mov	r4,r3
   167d4:	103ee83a 	callr	r2
   167d8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   167dc:	e0bfff17 	ldw	r2,-4(fp)
   167e0:	1000031e 	bne	r2,zero,167f0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   167e4:	e13ffd17 	ldw	r4,-12(fp)
   167e8:	00166b00 	call	166b0 <alt_alarm_stop>
   167ec:	00000d06 	br	16824 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   167f0:	e0bffd17 	ldw	r2,-12(fp)
   167f4:	10c00217 	ldw	r3,8(r2)
   167f8:	e0bfff17 	ldw	r2,-4(fp)
   167fc:	1887883a 	add	r3,r3,r2
   16800:	e0bffd17 	ldw	r2,-12(fp)
   16804:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   16808:	e0bffd17 	ldw	r2,-12(fp)
   1680c:	10c00217 	ldw	r3,8(r2)
   16810:	d0a7e117 	ldw	r2,-24700(gp)
   16814:	1880032e 	bgeu	r3,r2,16824 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   16818:	e0bffd17 	ldw	r2,-12(fp)
   1681c:	00c00044 	movi	r3,1
   16820:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   16824:	e0bffe17 	ldw	r2,-8(fp)
   16828:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1682c:	e0fffd17 	ldw	r3,-12(fp)
   16830:	d0a00e04 	addi	r2,gp,-32712
   16834:	18bfcf1e 	bne	r3,r2,16774 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016774>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   16838:	0001883a 	nop
}
   1683c:	0001883a 	nop
   16840:	e037883a 	mov	sp,fp
   16844:	dfc00117 	ldw	ra,4(sp)
   16848:	df000017 	ldw	fp,0(sp)
   1684c:	dec00204 	addi	sp,sp,8
   16850:	f800283a 	ret

00016854 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   16854:	deffff04 	addi	sp,sp,-4
   16858:	df000015 	stw	fp,0(sp)
   1685c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   16860:	000170fa 	wrctl	ienable,zero
}
   16864:	0001883a 	nop
   16868:	e037883a 	mov	sp,fp
   1686c:	df000017 	ldw	fp,0(sp)
   16870:	dec00104 	addi	sp,sp,4
   16874:	f800283a 	ret

00016878 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   16878:	defffb04 	addi	sp,sp,-20
   1687c:	dfc00415 	stw	ra,16(sp)
   16880:	df000315 	stw	fp,12(sp)
   16884:	df000304 	addi	fp,sp,12
   16888:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   1688c:	d0a00617 	ldw	r2,-32744(gp)
   16890:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   16894:	00003106 	br	1695c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   16898:	e0bffd17 	ldw	r2,-12(fp)
   1689c:	10800217 	ldw	r2,8(r2)
   168a0:	1009883a 	mov	r4,r2
   168a4:	00012540 	call	1254 <strlen>
   168a8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   168ac:	e0bffd17 	ldw	r2,-12(fp)
   168b0:	10c00217 	ldw	r3,8(r2)
   168b4:	e0bffe17 	ldw	r2,-8(fp)
   168b8:	10bfffc4 	addi	r2,r2,-1
   168bc:	1885883a 	add	r2,r3,r2
   168c0:	10800003 	ldbu	r2,0(r2)
   168c4:	10803fcc 	andi	r2,r2,255
   168c8:	1080201c 	xori	r2,r2,128
   168cc:	10bfe004 	addi	r2,r2,-128
   168d0:	10800bd8 	cmpnei	r2,r2,47
   168d4:	1000031e 	bne	r2,zero,168e4 <alt_find_file+0x6c>
    {
      len -= 1;
   168d8:	e0bffe17 	ldw	r2,-8(fp)
   168dc:	10bfffc4 	addi	r2,r2,-1
   168e0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   168e4:	e0bffe17 	ldw	r2,-8(fp)
   168e8:	e0ffff17 	ldw	r3,-4(fp)
   168ec:	1885883a 	add	r2,r3,r2
   168f0:	10800003 	ldbu	r2,0(r2)
   168f4:	10803fcc 	andi	r2,r2,255
   168f8:	1080201c 	xori	r2,r2,128
   168fc:	10bfe004 	addi	r2,r2,-128
   16900:	10800be0 	cmpeqi	r2,r2,47
   16904:	1000081e 	bne	r2,zero,16928 <alt_find_file+0xb0>
   16908:	e0bffe17 	ldw	r2,-8(fp)
   1690c:	e0ffff17 	ldw	r3,-4(fp)
   16910:	1885883a 	add	r2,r3,r2
   16914:	10800003 	ldbu	r2,0(r2)
   16918:	10803fcc 	andi	r2,r2,255
   1691c:	1080201c 	xori	r2,r2,128
   16920:	10bfe004 	addi	r2,r2,-128
   16924:	10000a1e 	bne	r2,zero,16950 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   16928:	e0bffd17 	ldw	r2,-12(fp)
   1692c:	10800217 	ldw	r2,8(r2)
   16930:	e0fffe17 	ldw	r3,-8(fp)
   16934:	180d883a 	mov	r6,r3
   16938:	e17fff17 	ldw	r5,-4(fp)
   1693c:	1009883a 	mov	r4,r2
   16940:	0016b9c0 	call	16b9c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   16944:	1000021e 	bne	r2,zero,16950 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   16948:	e0bffd17 	ldw	r2,-12(fp)
   1694c:	00000706 	br	1696c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   16950:	e0bffd17 	ldw	r2,-12(fp)
   16954:	10800017 	ldw	r2,0(r2)
   16958:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1695c:	e0fffd17 	ldw	r3,-12(fp)
   16960:	d0a00604 	addi	r2,gp,-32744
   16964:	18bfcc1e 	bne	r3,r2,16898 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016898>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   16968:	0005883a 	mov	r2,zero
}
   1696c:	e037883a 	mov	sp,fp
   16970:	dfc00117 	ldw	ra,4(sp)
   16974:	df000017 	ldw	fp,0(sp)
   16978:	dec00204 	addi	sp,sp,8
   1697c:	f800283a 	ret

00016980 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   16980:	defffc04 	addi	sp,sp,-16
   16984:	df000315 	stw	fp,12(sp)
   16988:	df000304 	addi	fp,sp,12
   1698c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   16990:	00bffa04 	movi	r2,-24
   16994:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   16998:	e03ffd15 	stw	zero,-12(fp)
   1699c:	00001906 	br	16a04 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   169a0:	00800074 	movhi	r2,1
   169a4:	109fd304 	addi	r2,r2,32588
   169a8:	e0fffd17 	ldw	r3,-12(fp)
   169ac:	18c00324 	muli	r3,r3,12
   169b0:	10c5883a 	add	r2,r2,r3
   169b4:	10800017 	ldw	r2,0(r2)
   169b8:	10000f1e 	bne	r2,zero,169f8 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   169bc:	00800074 	movhi	r2,1
   169c0:	109fd304 	addi	r2,r2,32588
   169c4:	e0fffd17 	ldw	r3,-12(fp)
   169c8:	18c00324 	muli	r3,r3,12
   169cc:	10c5883a 	add	r2,r2,r3
   169d0:	e0ffff17 	ldw	r3,-4(fp)
   169d4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   169d8:	d0e00a17 	ldw	r3,-32728(gp)
   169dc:	e0bffd17 	ldw	r2,-12(fp)
   169e0:	1880020e 	bge	r3,r2,169ec <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   169e4:	e0bffd17 	ldw	r2,-12(fp)
   169e8:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   169ec:	e0bffd17 	ldw	r2,-12(fp)
   169f0:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   169f4:	00000606 	br	16a10 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   169f8:	e0bffd17 	ldw	r2,-12(fp)
   169fc:	10800044 	addi	r2,r2,1
   16a00:	e0bffd15 	stw	r2,-12(fp)
   16a04:	e0bffd17 	ldw	r2,-12(fp)
   16a08:	10800810 	cmplti	r2,r2,32
   16a0c:	103fe41e 	bne	r2,zero,169a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70169a0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   16a10:	e0bffe17 	ldw	r2,-8(fp)
}
   16a14:	e037883a 	mov	sp,fp
   16a18:	df000017 	ldw	fp,0(sp)
   16a1c:	dec00104 	addi	sp,sp,4
   16a20:	f800283a 	ret

00016a24 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   16a24:	defffb04 	addi	sp,sp,-20
   16a28:	df000415 	stw	fp,16(sp)
   16a2c:	df000404 	addi	fp,sp,16
   16a30:	e13ffe15 	stw	r4,-8(fp)
   16a34:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   16a38:	e0bfff17 	ldw	r2,-4(fp)
   16a3c:	10840070 	cmpltui	r2,r2,4097
   16a40:	1000021e 	bne	r2,zero,16a4c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   16a44:	00840004 	movi	r2,4096
   16a48:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   16a4c:	e0fffe17 	ldw	r3,-8(fp)
   16a50:	e0bfff17 	ldw	r2,-4(fp)
   16a54:	1885883a 	add	r2,r3,r2
   16a58:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   16a5c:	e0bffe17 	ldw	r2,-8(fp)
   16a60:	e0bffc15 	stw	r2,-16(fp)
   16a64:	00000506 	br	16a7c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   16a68:	e0bffc17 	ldw	r2,-16(fp)
   16a6c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   16a70:	e0bffc17 	ldw	r2,-16(fp)
   16a74:	10800804 	addi	r2,r2,32
   16a78:	e0bffc15 	stw	r2,-16(fp)
   16a7c:	e0fffc17 	ldw	r3,-16(fp)
   16a80:	e0bffd17 	ldw	r2,-12(fp)
   16a84:	18bff836 	bltu	r3,r2,16a68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016a68>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   16a88:	e0bffe17 	ldw	r2,-8(fp)
   16a8c:	108007cc 	andi	r2,r2,31
   16a90:	10000226 	beq	r2,zero,16a9c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   16a94:	e0bffc17 	ldw	r2,-16(fp)
   16a98:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   16a9c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   16aa0:	0001883a 	nop
   16aa4:	e037883a 	mov	sp,fp
   16aa8:	df000017 	ldw	fp,0(sp)
   16aac:	dec00104 	addi	sp,sp,4
   16ab0:	f800283a 	ret

00016ab4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   16ab4:	defffe04 	addi	sp,sp,-8
   16ab8:	df000115 	stw	fp,4(sp)
   16abc:	df000104 	addi	fp,sp,4
   16ac0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   16ac4:	e0bfff17 	ldw	r2,-4(fp)
   16ac8:	10bffe84 	addi	r2,r2,-6
   16acc:	10c00428 	cmpgeui	r3,r2,16
   16ad0:	18001a1e 	bne	r3,zero,16b3c <alt_exception_cause_generated_bad_addr+0x88>
   16ad4:	100690ba 	slli	r3,r2,2
   16ad8:	00800074 	movhi	r2,1
   16adc:	109abb04 	addi	r2,r2,27372
   16ae0:	1885883a 	add	r2,r3,r2
   16ae4:	10800017 	ldw	r2,0(r2)
   16ae8:	1000683a 	jmp	r2
   16aec:	00016b2c 	andhi	zero,zero,1452
   16af0:	00016b2c 	andhi	zero,zero,1452
   16af4:	00016b3c 	xorhi	zero,zero,1452
   16af8:	00016b3c 	xorhi	zero,zero,1452
   16afc:	00016b3c 	xorhi	zero,zero,1452
   16b00:	00016b2c 	andhi	zero,zero,1452
   16b04:	00016b34 	movhi	zero,1452
   16b08:	00016b3c 	xorhi	zero,zero,1452
   16b0c:	00016b2c 	andhi	zero,zero,1452
   16b10:	00016b2c 	andhi	zero,zero,1452
   16b14:	00016b3c 	xorhi	zero,zero,1452
   16b18:	00016b2c 	andhi	zero,zero,1452
   16b1c:	00016b34 	movhi	zero,1452
   16b20:	00016b3c 	xorhi	zero,zero,1452
   16b24:	00016b3c 	xorhi	zero,zero,1452
   16b28:	00016b2c 	andhi	zero,zero,1452
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   16b2c:	00800044 	movi	r2,1
   16b30:	00000306 	br	16b40 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   16b34:	0005883a 	mov	r2,zero
   16b38:	00000106 	br	16b40 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   16b3c:	0005883a 	mov	r2,zero
  }
}
   16b40:	e037883a 	mov	sp,fp
   16b44:	df000017 	ldw	fp,0(sp)
   16b48:	dec00104 	addi	sp,sp,4
   16b4c:	f800283a 	ret

00016b50 <atexit>:
   16b50:	200b883a 	mov	r5,r4
   16b54:	000f883a 	mov	r7,zero
   16b58:	000d883a 	mov	r6,zero
   16b5c:	0009883a 	mov	r4,zero
   16b60:	0016d801 	jmpi	16d80 <__register_exitproc>

00016b64 <exit>:
   16b64:	defffe04 	addi	sp,sp,-8
   16b68:	000b883a 	mov	r5,zero
   16b6c:	dc000015 	stw	r16,0(sp)
   16b70:	dfc00115 	stw	ra,4(sp)
   16b74:	2021883a 	mov	r16,r4
   16b78:	0016e980 	call	16e98 <__call_exitprocs>
   16b7c:	008000b4 	movhi	r2,2
   16b80:	10a54804 	addi	r2,r2,-27360
   16b84:	11000017 	ldw	r4,0(r2)
   16b88:	20800f17 	ldw	r2,60(r4)
   16b8c:	10000126 	beq	r2,zero,16b94 <exit+0x30>
   16b90:	103ee83a 	callr	r2
   16b94:	8009883a 	mov	r4,r16
   16b98:	00170180 	call	17018 <_exit>

00016b9c <memcmp>:
   16b9c:	01c000c4 	movi	r7,3
   16ba0:	3980192e 	bgeu	r7,r6,16c08 <memcmp+0x6c>
   16ba4:	2144b03a 	or	r2,r4,r5
   16ba8:	11c4703a 	and	r2,r2,r7
   16bac:	10000f26 	beq	r2,zero,16bec <memcmp+0x50>
   16bb0:	20800003 	ldbu	r2,0(r4)
   16bb4:	28c00003 	ldbu	r3,0(r5)
   16bb8:	10c0151e 	bne	r2,r3,16c10 <memcmp+0x74>
   16bbc:	31bfff84 	addi	r6,r6,-2
   16bc0:	01ffffc4 	movi	r7,-1
   16bc4:	00000406 	br	16bd8 <memcmp+0x3c>
   16bc8:	20800003 	ldbu	r2,0(r4)
   16bcc:	28c00003 	ldbu	r3,0(r5)
   16bd0:	31bfffc4 	addi	r6,r6,-1
   16bd4:	10c00e1e 	bne	r2,r3,16c10 <memcmp+0x74>
   16bd8:	21000044 	addi	r4,r4,1
   16bdc:	29400044 	addi	r5,r5,1
   16be0:	31fff91e 	bne	r6,r7,16bc8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016bc8>
   16be4:	0005883a 	mov	r2,zero
   16be8:	f800283a 	ret
   16bec:	20c00017 	ldw	r3,0(r4)
   16bf0:	28800017 	ldw	r2,0(r5)
   16bf4:	18bfee1e 	bne	r3,r2,16bb0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016bb0>
   16bf8:	31bfff04 	addi	r6,r6,-4
   16bfc:	21000104 	addi	r4,r4,4
   16c00:	29400104 	addi	r5,r5,4
   16c04:	39bff936 	bltu	r7,r6,16bec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016bec>
   16c08:	303fe91e 	bne	r6,zero,16bb0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016bb0>
   16c0c:	003ff506 	br	16be4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016be4>
   16c10:	10c5c83a 	sub	r2,r2,r3
   16c14:	f800283a 	ret

00016c18 <_putc_r>:
   16c18:	defffc04 	addi	sp,sp,-16
   16c1c:	dc000215 	stw	r16,8(sp)
   16c20:	dfc00315 	stw	ra,12(sp)
   16c24:	2021883a 	mov	r16,r4
   16c28:	20000226 	beq	r4,zero,16c34 <_putc_r+0x1c>
   16c2c:	20800e17 	ldw	r2,56(r4)
   16c30:	10001b26 	beq	r2,zero,16ca0 <_putc_r+0x88>
   16c34:	30800217 	ldw	r2,8(r6)
   16c38:	10bfffc4 	addi	r2,r2,-1
   16c3c:	30800215 	stw	r2,8(r6)
   16c40:	10000a16 	blt	r2,zero,16c6c <_putc_r+0x54>
   16c44:	30800017 	ldw	r2,0(r6)
   16c48:	11400005 	stb	r5,0(r2)
   16c4c:	30800017 	ldw	r2,0(r6)
   16c50:	10c00044 	addi	r3,r2,1
   16c54:	30c00015 	stw	r3,0(r6)
   16c58:	10800003 	ldbu	r2,0(r2)
   16c5c:	dfc00317 	ldw	ra,12(sp)
   16c60:	dc000217 	ldw	r16,8(sp)
   16c64:	dec00404 	addi	sp,sp,16
   16c68:	f800283a 	ret
   16c6c:	30c00617 	ldw	r3,24(r6)
   16c70:	10c00616 	blt	r2,r3,16c8c <_putc_r+0x74>
   16c74:	30800017 	ldw	r2,0(r6)
   16c78:	00c00284 	movi	r3,10
   16c7c:	11400005 	stb	r5,0(r2)
   16c80:	30800017 	ldw	r2,0(r6)
   16c84:	11400003 	ldbu	r5,0(r2)
   16c88:	28fff11e 	bne	r5,r3,16c50 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016c50>
   16c8c:	8009883a 	mov	r4,r16
   16c90:	dfc00317 	ldw	ra,12(sp)
   16c94:	dc000217 	ldw	r16,8(sp)
   16c98:	dec00404 	addi	sp,sp,16
   16c9c:	000a4281 	jmpi	a428 <__swbuf_r>
   16ca0:	d9400015 	stw	r5,0(sp)
   16ca4:	d9800115 	stw	r6,4(sp)
   16ca8:	00055900 	call	5590 <__sinit>
   16cac:	d9800117 	ldw	r6,4(sp)
   16cb0:	d9400017 	ldw	r5,0(sp)
   16cb4:	003fdf06 	br	16c34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016c34>

00016cb8 <putc>:
   16cb8:	008000b4 	movhi	r2,2
   16cbc:	defffc04 	addi	sp,sp,-16
   16cc0:	10a54904 	addi	r2,r2,-27356
   16cc4:	dc000115 	stw	r16,4(sp)
   16cc8:	14000017 	ldw	r16,0(r2)
   16ccc:	dc400215 	stw	r17,8(sp)
   16cd0:	dfc00315 	stw	ra,12(sp)
   16cd4:	2023883a 	mov	r17,r4
   16cd8:	80000226 	beq	r16,zero,16ce4 <putc+0x2c>
   16cdc:	80800e17 	ldw	r2,56(r16)
   16ce0:	10001a26 	beq	r2,zero,16d4c <putc+0x94>
   16ce4:	28800217 	ldw	r2,8(r5)
   16ce8:	10bfffc4 	addi	r2,r2,-1
   16cec:	28800215 	stw	r2,8(r5)
   16cf0:	10000b16 	blt	r2,zero,16d20 <putc+0x68>
   16cf4:	28800017 	ldw	r2,0(r5)
   16cf8:	14400005 	stb	r17,0(r2)
   16cfc:	28800017 	ldw	r2,0(r5)
   16d00:	10c00044 	addi	r3,r2,1
   16d04:	28c00015 	stw	r3,0(r5)
   16d08:	10800003 	ldbu	r2,0(r2)
   16d0c:	dfc00317 	ldw	ra,12(sp)
   16d10:	dc400217 	ldw	r17,8(sp)
   16d14:	dc000117 	ldw	r16,4(sp)
   16d18:	dec00404 	addi	sp,sp,16
   16d1c:	f800283a 	ret
   16d20:	28c00617 	ldw	r3,24(r5)
   16d24:	10c00e16 	blt	r2,r3,16d60 <putc+0xa8>
   16d28:	28800017 	ldw	r2,0(r5)
   16d2c:	01000284 	movi	r4,10
   16d30:	14400005 	stb	r17,0(r2)
   16d34:	28800017 	ldw	r2,0(r5)
   16d38:	10c00003 	ldbu	r3,0(r2)
   16d3c:	193ff01e 	bne	r3,r4,16d00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016d00>
   16d40:	280d883a 	mov	r6,r5
   16d44:	180b883a 	mov	r5,r3
   16d48:	00000706 	br	16d68 <putc+0xb0>
   16d4c:	8009883a 	mov	r4,r16
   16d50:	d9400015 	stw	r5,0(sp)
   16d54:	00055900 	call	5590 <__sinit>
   16d58:	d9400017 	ldw	r5,0(sp)
   16d5c:	003fe106 	br	16ce4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016ce4>
   16d60:	280d883a 	mov	r6,r5
   16d64:	880b883a 	mov	r5,r17
   16d68:	8009883a 	mov	r4,r16
   16d6c:	dfc00317 	ldw	ra,12(sp)
   16d70:	dc400217 	ldw	r17,8(sp)
   16d74:	dc000117 	ldw	r16,4(sp)
   16d78:	dec00404 	addi	sp,sp,16
   16d7c:	000a4281 	jmpi	a428 <__swbuf_r>

00016d80 <__register_exitproc>:
   16d80:	defffa04 	addi	sp,sp,-24
   16d84:	dc000315 	stw	r16,12(sp)
   16d88:	040000b4 	movhi	r16,2
   16d8c:	84254804 	addi	r16,r16,-27360
   16d90:	80c00017 	ldw	r3,0(r16)
   16d94:	dc400415 	stw	r17,16(sp)
   16d98:	dfc00515 	stw	ra,20(sp)
   16d9c:	18805217 	ldw	r2,328(r3)
   16da0:	2023883a 	mov	r17,r4
   16da4:	10003726 	beq	r2,zero,16e84 <__register_exitproc+0x104>
   16da8:	10c00117 	ldw	r3,4(r2)
   16dac:	010007c4 	movi	r4,31
   16db0:	20c00e16 	blt	r4,r3,16dec <__register_exitproc+0x6c>
   16db4:	1a000044 	addi	r8,r3,1
   16db8:	8800221e 	bne	r17,zero,16e44 <__register_exitproc+0xc4>
   16dbc:	18c00084 	addi	r3,r3,2
   16dc0:	18c7883a 	add	r3,r3,r3
   16dc4:	18c7883a 	add	r3,r3,r3
   16dc8:	12000115 	stw	r8,4(r2)
   16dcc:	10c7883a 	add	r3,r2,r3
   16dd0:	19400015 	stw	r5,0(r3)
   16dd4:	0005883a 	mov	r2,zero
   16dd8:	dfc00517 	ldw	ra,20(sp)
   16ddc:	dc400417 	ldw	r17,16(sp)
   16de0:	dc000317 	ldw	r16,12(sp)
   16de4:	dec00604 	addi	sp,sp,24
   16de8:	f800283a 	ret
   16dec:	00800034 	movhi	r2,0
   16df0:	10800004 	addi	r2,r2,0
   16df4:	10002626 	beq	r2,zero,16e90 <__register_exitproc+0x110>
   16df8:	01006404 	movi	r4,400
   16dfc:	d9400015 	stw	r5,0(sp)
   16e00:	d9800115 	stw	r6,4(sp)
   16e04:	d9c00215 	stw	r7,8(sp)
   16e08:	00000000 	call	0 <__alt_mem_SDRAM>
   16e0c:	d9400017 	ldw	r5,0(sp)
   16e10:	d9800117 	ldw	r6,4(sp)
   16e14:	d9c00217 	ldw	r7,8(sp)
   16e18:	10001d26 	beq	r2,zero,16e90 <__register_exitproc+0x110>
   16e1c:	81000017 	ldw	r4,0(r16)
   16e20:	10000115 	stw	zero,4(r2)
   16e24:	02000044 	movi	r8,1
   16e28:	22405217 	ldw	r9,328(r4)
   16e2c:	0007883a 	mov	r3,zero
   16e30:	12400015 	stw	r9,0(r2)
   16e34:	20805215 	stw	r2,328(r4)
   16e38:	10006215 	stw	zero,392(r2)
   16e3c:	10006315 	stw	zero,396(r2)
   16e40:	883fde26 	beq	r17,zero,16dbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016dbc>
   16e44:	18c9883a 	add	r4,r3,r3
   16e48:	2109883a 	add	r4,r4,r4
   16e4c:	1109883a 	add	r4,r2,r4
   16e50:	21802215 	stw	r6,136(r4)
   16e54:	01800044 	movi	r6,1
   16e58:	12406217 	ldw	r9,392(r2)
   16e5c:	30cc983a 	sll	r6,r6,r3
   16e60:	4992b03a 	or	r9,r9,r6
   16e64:	12406215 	stw	r9,392(r2)
   16e68:	21c04215 	stw	r7,264(r4)
   16e6c:	01000084 	movi	r4,2
   16e70:	893fd21e 	bne	r17,r4,16dbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016dbc>
   16e74:	11006317 	ldw	r4,396(r2)
   16e78:	218cb03a 	or	r6,r4,r6
   16e7c:	11806315 	stw	r6,396(r2)
   16e80:	003fce06 	br	16dbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016dbc>
   16e84:	18805304 	addi	r2,r3,332
   16e88:	18805215 	stw	r2,328(r3)
   16e8c:	003fc606 	br	16da8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016da8>
   16e90:	00bfffc4 	movi	r2,-1
   16e94:	003fd006 	br	16dd8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016dd8>

00016e98 <__call_exitprocs>:
   16e98:	defff504 	addi	sp,sp,-44
   16e9c:	df000915 	stw	fp,36(sp)
   16ea0:	dd400615 	stw	r21,24(sp)
   16ea4:	dc800315 	stw	r18,12(sp)
   16ea8:	dfc00a15 	stw	ra,40(sp)
   16eac:	ddc00815 	stw	r23,32(sp)
   16eb0:	dd800715 	stw	r22,28(sp)
   16eb4:	dd000515 	stw	r20,20(sp)
   16eb8:	dcc00415 	stw	r19,16(sp)
   16ebc:	dc400215 	stw	r17,8(sp)
   16ec0:	dc000115 	stw	r16,4(sp)
   16ec4:	d9000015 	stw	r4,0(sp)
   16ec8:	2839883a 	mov	fp,r5
   16ecc:	04800044 	movi	r18,1
   16ed0:	057fffc4 	movi	r21,-1
   16ed4:	008000b4 	movhi	r2,2
   16ed8:	10a54804 	addi	r2,r2,-27360
   16edc:	12000017 	ldw	r8,0(r2)
   16ee0:	45005217 	ldw	r20,328(r8)
   16ee4:	44c05204 	addi	r19,r8,328
   16ee8:	a0001c26 	beq	r20,zero,16f5c <__call_exitprocs+0xc4>
   16eec:	a0800117 	ldw	r2,4(r20)
   16ef0:	15ffffc4 	addi	r23,r2,-1
   16ef4:	b8000d16 	blt	r23,zero,16f2c <__call_exitprocs+0x94>
   16ef8:	14000044 	addi	r16,r2,1
   16efc:	8421883a 	add	r16,r16,r16
   16f00:	8421883a 	add	r16,r16,r16
   16f04:	84402004 	addi	r17,r16,128
   16f08:	a463883a 	add	r17,r20,r17
   16f0c:	a421883a 	add	r16,r20,r16
   16f10:	e0001e26 	beq	fp,zero,16f8c <__call_exitprocs+0xf4>
   16f14:	80804017 	ldw	r2,256(r16)
   16f18:	e0801c26 	beq	fp,r2,16f8c <__call_exitprocs+0xf4>
   16f1c:	bdffffc4 	addi	r23,r23,-1
   16f20:	843fff04 	addi	r16,r16,-4
   16f24:	8c7fff04 	addi	r17,r17,-4
   16f28:	bd7ff91e 	bne	r23,r21,16f10 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016f10>
   16f2c:	00800034 	movhi	r2,0
   16f30:	10800004 	addi	r2,r2,0
   16f34:	10000926 	beq	r2,zero,16f5c <__call_exitprocs+0xc4>
   16f38:	a0800117 	ldw	r2,4(r20)
   16f3c:	1000301e 	bne	r2,zero,17000 <__call_exitprocs+0x168>
   16f40:	a0800017 	ldw	r2,0(r20)
   16f44:	10003226 	beq	r2,zero,17010 <__call_exitprocs+0x178>
   16f48:	a009883a 	mov	r4,r20
   16f4c:	98800015 	stw	r2,0(r19)
   16f50:	00000000 	call	0 <__alt_mem_SDRAM>
   16f54:	9d000017 	ldw	r20,0(r19)
   16f58:	a03fe41e 	bne	r20,zero,16eec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016eec>
   16f5c:	dfc00a17 	ldw	ra,40(sp)
   16f60:	df000917 	ldw	fp,36(sp)
   16f64:	ddc00817 	ldw	r23,32(sp)
   16f68:	dd800717 	ldw	r22,28(sp)
   16f6c:	dd400617 	ldw	r21,24(sp)
   16f70:	dd000517 	ldw	r20,20(sp)
   16f74:	dcc00417 	ldw	r19,16(sp)
   16f78:	dc800317 	ldw	r18,12(sp)
   16f7c:	dc400217 	ldw	r17,8(sp)
   16f80:	dc000117 	ldw	r16,4(sp)
   16f84:	dec00b04 	addi	sp,sp,44
   16f88:	f800283a 	ret
   16f8c:	a0800117 	ldw	r2,4(r20)
   16f90:	80c00017 	ldw	r3,0(r16)
   16f94:	10bfffc4 	addi	r2,r2,-1
   16f98:	15c01426 	beq	r2,r23,16fec <__call_exitprocs+0x154>
   16f9c:	80000015 	stw	zero,0(r16)
   16fa0:	183fde26 	beq	r3,zero,16f1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016f1c>
   16fa4:	95c8983a 	sll	r4,r18,r23
   16fa8:	a0806217 	ldw	r2,392(r20)
   16fac:	a5800117 	ldw	r22,4(r20)
   16fb0:	2084703a 	and	r2,r4,r2
   16fb4:	10000b26 	beq	r2,zero,16fe4 <__call_exitprocs+0x14c>
   16fb8:	a0806317 	ldw	r2,396(r20)
   16fbc:	2088703a 	and	r4,r4,r2
   16fc0:	20000c1e 	bne	r4,zero,16ff4 <__call_exitprocs+0x15c>
   16fc4:	89400017 	ldw	r5,0(r17)
   16fc8:	d9000017 	ldw	r4,0(sp)
   16fcc:	183ee83a 	callr	r3
   16fd0:	a0800117 	ldw	r2,4(r20)
   16fd4:	15bfbf1e 	bne	r2,r22,16ed4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016ed4>
   16fd8:	98800017 	ldw	r2,0(r19)
   16fdc:	153fcf26 	beq	r2,r20,16f1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016f1c>
   16fe0:	003fbc06 	br	16ed4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016ed4>
   16fe4:	183ee83a 	callr	r3
   16fe8:	003ff906 	br	16fd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016fd0>
   16fec:	a5c00115 	stw	r23,4(r20)
   16ff0:	003feb06 	br	16fa0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016fa0>
   16ff4:	89000017 	ldw	r4,0(r17)
   16ff8:	183ee83a 	callr	r3
   16ffc:	003ff406 	br	16fd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016fd0>
   17000:	a0800017 	ldw	r2,0(r20)
   17004:	a027883a 	mov	r19,r20
   17008:	1029883a 	mov	r20,r2
   1700c:	003fb606 	br	16ee8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016ee8>
   17010:	0005883a 	mov	r2,zero
   17014:	003ffb06 	br	17004 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017004>

00017018 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   17018:	defffd04 	addi	sp,sp,-12
   1701c:	df000215 	stw	fp,8(sp)
   17020:	df000204 	addi	fp,sp,8
   17024:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   17028:	0001883a 	nop
   1702c:	e0bfff17 	ldw	r2,-4(fp)
   17030:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   17034:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   17038:	10000226 	beq	r2,zero,17044 <_exit+0x2c>
    ALT_SIM_FAIL();
   1703c:	002af070 	cmpltui	zero,zero,43969
   17040:	00000106 	br	17048 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   17044:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   17048:	003fff06 	br	17048 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017048>
