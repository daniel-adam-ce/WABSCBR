
HC05_Config.elf:     file format elf32-littlenios2
HC05_Config.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020244

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00013290 memsz 0x00013290 flags r-x
    LOAD off    0x000142b0 vaddr 0x000332b0 paddr 0x00034e98 align 2**12
         filesz 0x00001be8 memsz 0x00001be8 flags rw-
    LOAD off    0x00016a80 vaddr 0x00036a80 paddr 0x00036a80 align 2**12
         filesz 0x00000000 memsz 0x0000017c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00012ad0  00020244  00020244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000059c  00032d14  00032d14  00013d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001be8  000332b0  00034e98  000142b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000017c  00036a80  00036a80  00016a80  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00036bfc  00036bfc  00015e98  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00015e98  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001448  00000000  00000000  00015ec0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002f993  00000000  00000000  00017308  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000ce4c  00000000  00000000  00046c9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000fbe0  00000000  00000000  00053ae7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000031bc  00000000  00000000  000636c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00006cbb  00000000  00000000  00066884  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001b9f7  00000000  00000000  0006d53f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  00088f38  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001fd0  00000000  00000000  00088f98  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0009001e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00090021  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0009002d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0009002e  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0009002f  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0009003a  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00090045  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000004  00000000  00000000  00090050  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000003b  00000000  00000000  00090054  2**0
                  CONTENTS, READONLY
 26 .jdi          00003d29  00000000  00000000  0009008f  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0003f335  00000000  00000000  00093db8  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020244 l    d  .text	00000000 .text
00032d14 l    d  .rodata	00000000 .rodata
000332b0 l    d  .rwdata	00000000 .rwdata
00036a80 l    d  .bss	00000000 .bss
00036bfc l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../HC05_Config_bsp//obj/HAL/src/crt0.o
0002028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 CUart.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 eh_personality.cc
00020890 l     F .text	000000a4 _ZL21size_of_encoded_valueh
00020934 l     F .text	0000020c _ZL28read_encoded_value_with_basehjPKhPj
00020b40 l     F .text	00000054 _ZL15get_ttype_entryP16lsda_header_infom
00020b94 l     F .text	0000008c _ZL21base_of_encoded_valuehP15_Unwind_Context
00020c20 l     F .text	00000134 _ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
00020d54 l     F .text	00000088 _ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3
00020ddc l     F .text	000001c0 _ZL28check_compact_exception_specPKSt9type_infoPvPKhij
00020f9c l     F .text	000000a8 _ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 eh_globals.cc
00036a80 l     O .bss	00000008 _ZL10eh_globals
00000000 l    df *ABS*	00000000 eh_alloc.cc
00021b64 l     F .text	000000b8 _ZN12_GLOBAL__N_14pool4freeEPv.constprop.4
00036ac4 l     O .bss	00000010 _ZN12_GLOBAL__N_114emergency_poolE
00021c1c l     F .text	000000a8 _ZN12_GLOBAL__N_14pool8allocateEj.constprop.5
00021dcc l     F .text	0000005c _GLOBAL__sub_I___cxa_allocate_exception
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 eh_throw.cc
00022128 l     F .text	00000044 _ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
00000000 l    df *ABS*	00000000 eh_call.cc
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 unwind-sjlj.c
00022638 l     F .text	00000118 _Unwind_ForcedUnwind_Phase2
00036a88 l     O .bss	00000004 fc_static
00022750 l     F .text	000000c0 _Unwind_RaiseException_Phase2
00022810 l     F .text	00000030 uw_install_context.isra.1
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00032fe6 l     O .rodata	00000010 zeroes.4404
00025cec l     F .text	000000bc __sbprintf
00032ff6 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00025efc l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00027a2c l     F .text	00000008 __fp_unlock
00027a40 l     F .text	0000019c __sinit.part.1
00027bdc l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000336b8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00033afc l     O .rwdata	00000020 lc_ctype_charset
00033adc l     O .rwdata	00000020 lc_message_charset
00033b1c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00033028 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
0002a574 l     F .text	000000fc __sprint_r.part.0
0003315c l     O .rodata	00000010 blanks.4348
0003314c l     O .rodata	00000010 zeroes.4349
0002bb00 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0002f7bc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0002f8c8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fcntl.c
0002f928 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_fstat.c
0002fa84 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0002fb90 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
0002fc70 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0002fddc l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0002fec8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0003009c l     F .text	0000003c alt_get_errno
000300d8 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
000302f0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00034e88 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00030710 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00030844 l     F .text	00000034 alt_dev_reg
00033cfc l     O .rwdata	00001060 jtag_uart_0
00034d5c l     O .rwdata	000000c4 hc_05_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00030b54 l     F .text	0000020c altera_avalon_jtag_uart_irq
00030d60 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00031398 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00031648 l     F .text	0000009c altera_avalon_uart_irq
000316e4 l     F .text	000000e4 altera_avalon_uart_rxirq
000317c8 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00031964 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00031b7c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00032030 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000326e0 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00036ac0 g     O .bss	00000004 alt_instruction_exception_handler
00021d24 g     F .text	00000028 __cxa_free_exception
000225a0 g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
00029ce8 g     F .text	00000074 _mprec_log10
00021aec g     F .text	00000018 _ZSt10unexpectedv
00029dd4 g     F .text	0000008c __any_on
0002c09c g     F .text	00000054 _isatty_r
00033034 g     O .rodata	00000028 __mprec_tinytens
0002ffd8 g     F .text	0000007c alt_main
00023538 g     F .text	000000c0 _puts_r
00036afc g     O .bss	00000100 alt_irq
00022118 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD1Ev
0002c0f0 g     F .text	00000060 _lseek_r
000228cc g     F .text	00000020 .hidden _Unwind_GetIPInfo
00034e98 g       *ABS*	00000000 __flash_rwdata_start
0002e2e8 g     F .text	00000088 .hidden __eqdf2
000221fc g     F .text	00000084 __cxa_rethrow
00022858 g     F .text	00000014 .hidden _Unwind_SjLj_Unregister
00021b28 g     F .text	00000014 _ZSt14set_unexpectedPFvvE
000228bc g     F .text	00000010 .hidden _Unwind_GetIP
00036bfc g       *ABS*	00000000 __alt_heap_start
00023904 g     F .text	0000005c _kill_r
000234fc g     F .text	0000003c printf
0002c308 g     F .text	0000009c _wcrtomb_r
000236cc g     F .text	00000084 _signal_r
0002a510 g     F .text	0000005c __sseek
00027d7c g     F .text	00000010 __sinit
0002c1b0 g     F .text	00000140 __swbuf_r
00021da0 g     F .text	0000002c __cxa_free_dependent_exception
000222d8 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
00028844 g     F .text	0000007c _setlocale_r
00032ed4  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
00027be4 g     F .text	00000068 __sfmoreglue
00030078 g     F .text	00000024 __malloc_unlock
00022118 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD2Ev
000219e4 g     F .text	00000020 _ZSt18uncaught_exceptionv
00022618 g     F .text	00000020 __cxa_deleted_virtual
00028d08 g     F .text	0000015c memmove
000220f0 g     F .text	00000004 _ZNSt9exceptionD2Ev
00027d64 g     F .text	00000018 _cleanup
00028e64 g     F .text	000000a8 _Balloc
000202cc g     F .text	00000048 _ZN5CUartD2Ev
0002034c g     F .text	00000048 _ZN5CUart4OpenEPc
0002e370 g     F .text	000000dc .hidden __gtdf2
00032e98  w    O .rodata	00000014 _ZTVSt13bad_exception
00032820 g     F .text	00000024 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000001c __reset
00022908 g     F .text	00000008 .hidden _Unwind_GetRegionStart
00020020 g       *ABS*	00000000 __flash_exceptions_start
0002c040 g     F .text	0000005c _fstat_r
00036a98 g     O .bss	00000004 errno
0002a48c g     F .text	00000008 __seofread
00022ae4 g     F .text	00000074 .hidden _Unwind_Backtrace
00036aac g     O .bss	00000004 alt_argv
0003ce20 g       *ABS*	00000000 _gp
000306e0 g     F .text	00000030 usleep
0002fb70 g     F .text	00000020 getpid
00021644 g     F .text	00000230 __cxa_call_unexpected
00021874 g     F .text	00000008 __cxa_get_exception_ptr
00033b7c g     O .rwdata	00000180 alt_fd_list
000229f8 g     F .text	00000044 .hidden _Unwind_SjLj_ForcedUnwind
00022888 g     F .text	00000018 .hidden _Unwind_GetCFA
00021b04 g     F .text	00000014 _ZSt13set_terminatePFvvE
000321d0 g     F .text	00000090 alt_find_dev
00028bc0 g     F .text	00000148 memcpy
00021d4c g     F .text	00000054 __cxa_allocate_dependent_exception
00027a34 g     F .text	0000000c _cleanup_r
00021ea0 g     F .text	00000018 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_
0002f5d4 g     F .text	000000dc .hidden __floatsidf
000327a4 g     F .text	0000007c alt_io_redirect
0002e44c g     F .text	000000f4 .hidden __ltdf2
00032d14 g       *ABS*	00000000 __DTOR_END__
00021eb8 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
000235f8 g     F .text	00000014 puts
000328d4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0002a3c4 g     F .text	00000074 __fpclassifyd
00029c44 g     F .text	000000a4 __ratio
0002bae4 g     F .text	0000001c __vfiprintf_internal
00030f58 g     F .text	0000021c altera_avalon_jtag_uart_read
00022b70 g     F .text	00000014 malloc
000234cc g     F .text	00000030 _printf_r
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0002d098 g     F .text	00000064 .hidden __udivsi3
0002fbcc g     F .text	000000a4 isatty
00023750 g     F .text	000000bc _raise_r
00033084 g     O .rodata	000000c8 __mprec_tens
000288c0 g     F .text	0000000c __locale_charset
00032844 g     F .text	00000090 alt_icache_flush
00036a94 g     O .bss	00000004 __malloc_top_pad
00023960 g     F .text	00000004 _getpid_r
00034e68 g     O .rwdata	00000004 __mb_cur_max
000288f0 g     F .text	0000000c _localeconv_r
00029270 g     F .text	0000003c __i2b
00028200 g     F .text	000004bc __sfvwrite_r
00022038 g     F .text	000000b8 _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
0002380c g     F .text	000000a8 __sigtramp_r
0002360c g     F .text	00000054 _sbrk_r
00032f44  w    O .rodata	00000020 _ZTVSt9type_info
0002c150 g     F .text	00000060 _read_r
000220f8 g     F .text	0000000c _ZNKSt9exception4whatEv
00020460 g     F .text	00000098 _ZN5CUart5WriteEPci
00034e80 g     O .rwdata	00000004 alt_max_fd
0002bd34 g     F .text	000000f0 _fclose_r
000279fc g     F .text	00000030 fflush
00020290 g     F .text	0000003c _ZN5CUartC1Ev
00036a90 g     O .bss	00000004 __malloc_max_sbrked_mem
000205cc g     F .text	00000108 _ZN5CUart15ReadWithTimeoutEPhtPtm
0002d154 g     F .text	000008ac .hidden __adddf3
00032f08  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
000299ec g     F .text	0000010c __b2d
0002ca68 g     F .text	00000538 .hidden __umoddi3
0002ff04 g     F .text	000000d4 lseek
00021efc g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
0002088c g     F .text	00000004 _ZdlPv
00034e60 g     O .rwdata	00000004 _global_impure_ptr
00029e60 g     F .text	00000564 _realloc_r
00036bfc g       *ABS*	00000000 __bss_end
000325f0 g     F .text	000000f0 alt_iic_isr_register
000305d8 g     F .text	00000108 alt_tick
00022840 g     F .text	00000018 .hidden _Unwind_SjLj_Register
0002c4f0 g     F .text	00000578 .hidden __udivdi3
0002bf9c g     F .text	00000024 _fputwc_r
0003305c g     O .rodata	00000028 __mprec_bigtens
00029054 g     F .text	00000104 __s2b
00022b58 g     F .text	00000018 abort
0002f6b0 g     F .text	000000a8 .hidden __floatunsidf
0002972c g     F .text	00000060 __mcmp
0003159c g     F .text	000000ac altera_avalon_uart_init
00021930 g     F .text	000000b4 __cxa_end_catch
00027d9c g     F .text	00000018 __fp_lock_all
000325a4 g     F .text	0000004c alt_ic_irq_enabled
000220f4 g     F .text	00000004 _ZNSt13bad_exceptionD2Ev
0003053c g     F .text	0000009c alt_alarm_stop
00020314 g     F .text	00000038 _ZN5CUartD0Ev
00036abc g     O .bss	00000004 alt_irq_active
00021ac4 g     F .text	00000018 _ZSt9terminatev
000200fc g     F .exceptions	000000d4 alt_irq_handler
00033b54 g     O .rwdata	00000028 alt_dev_null
00022120 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD2Ev
00032d90  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
00031fe8 g     F .text	00000048 alt_dcache_flush_all
00029158 g     F .text	00000068 __hi0bits
00034e30  w    O .rwdata	00000008 _ZTISt9exception
0002f554 g     F .text	00000080 .hidden __fixdfsi
00034e98 g       *ABS*	00000000 __ram_rwdata_end
0002259c g     F .text	00000004 _ZNSt9type_infoD1Ev
00034e78 g     O .rwdata	00000008 alt_dev_list
00022120 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD1Ev
0003074c g     F .text	000000f8 write
000225b0 g     F .text	00000004 _ZNSt9type_infoD0Ev
000332b0 g       *ABS*	00000000 __ram_rodata_end
0002fac0 g     F .text	000000b0 fstat
0002fcac g     F .text	00000130 kill
0002e44c g     F .text	000000f4 .hidden __ledf2
000294a4 g     F .text	00000140 __pow5mult
0002a688 g     F .text	0000145c ___vfiprintf_internal_r
00036aa4 g     O .bss	00000004 __nlocale_changed
0002d0fc g     F .text	00000058 .hidden __umodsi3
000225a8 g     F .text	00000008 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
00021b18 g     F .text	00000010 _ZSt13get_terminatev
00036bfc g       *ABS*	00000000 end
00031bb8 g     F .text	000001ac altera_avalon_uart_write
00022acc g     F .text	00000018 .hidden _Unwind_DeleteException
00030a94 g     F .text	000000c0 altera_avalon_jtag_uart_init
000201d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00021f68 g     F .text	000000d0 _ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
00032d0d g       *ABS*	00000000 __CTOR_LIST__
000386a0 g       *ABS*	00000000 __alt_stack_pointer
00031410 g     F .text	0000007c alt_avalon_timer_sc_init
000314ec g     F .text	00000060 altera_avalon_uart_write_fd
0002f758 g     F .text	00000064 .hidden __clzsi2
0003154c g     F .text	00000050 altera_avalon_uart_close_fd
00021e28 g     F .text	00000078 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
00031174 g     F .text	00000224 altera_avalon_jtag_uart_write
00027d8c g     F .text	00000004 __sfp_lock_acquire
00032e20  w    O .rodata	00000012 _ZTSSt13bad_exception
00028adc g     F .text	000000e4 memchr
00023ad8 g     F .text	000021f8 ___vfprintf_internal_r
00020290 g     F .text	0000003c _ZN5CUartC2Ev
00027ef0 g     F .text	00000310 _free_r
000288cc g     F .text	00000010 __locale_mb_cur_max
00032b50 g     F .text	00000180 __call_exitprocs
00036aa0 g     O .bss	00000004 __mlocale_changed
00034e58 g     O .rwdata	00000004 __malloc_sbrk_base
00020244 g     F .text	0000004c _start
00036ab4 g     O .bss	00000004 _alt_tick_rate
00032f34  w    O .rodata	0000000d _ZTSSt9type_info
000225f8 g     F .text	00000020 __cxa_pure_virtual
000295e4 g     F .text	00000148 __lshift
00036ab8 g     O .bss	00000004 _alt_nticks
000238c8 g     F .text	00000018 signal
0003032c g     F .text	000000fc read
000308b0 g     F .text	00000080 alt_sys_init
00032a38 g     F .text	00000118 __register_exitproc
0002231c g     F .text	00000160 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
000292ac g     F .text	000001f8 __multiply
00030e00 g     F .text	00000068 altera_avalon_jtag_uart_close
000332b0 g       *ABS*	00000000 __ram_rwdata_start
00022928 g     F .text	000000d0 .hidden _Unwind_SjLj_RaiseException
00032d14 g       *ABS*	00000000 __ram_rodata_start
00036ad4 g     O .bss	00000028 __malloc_current_mallinfo
00022a3c g     F .text	00000044 .hidden _Unwind_SjLj_Resume
00029af8 g     F .text	0000014c __d2b
00032ec0  w    O .rodata	00000014 _ZTVN10__cxxabiv119__foreign_exceptionE
0002259c g     F .text	00000004 _ZNSt9type_infoD2Ev
00022124 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD0Ev
00022518 g     F .text	00000084 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
00030930 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00032368 g     F .text	000000a4 alt_get_fd
00031e90 g     F .text	00000158 alt_busy_sleep
00034e40  w    O .rwdata	00000008 _ZTIN10__cxxabiv119__foreign_exceptionE
0002bc1c g     F .text	00000054 _close_r
00034e28  w    O .rwdata	00000007 _ZTS5CUart
000329bc g     F .text	0000007c memcmp
000309f0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00036bfc g       *ABS*	00000000 __alt_stack_base
00030a40 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000222d8 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
00025da8 g     F .text	00000154 __swsetup_r
00022a80 g     F .text	0000004c .hidden _Unwind_SjLj_Resume_or_Rethrow
0002da00 g     F .text	000008e8 .hidden __divdf3
00027c4c g     F .text	00000118 __sfp
00029d5c g     F .text	00000078 __copybits
000225a0 g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
000332b0 g     O .rwdata	00000408 __malloc_av_
00027d98 g     F .text	00000004 __sinit_lock_release
0002e540 g     F .text	00000718 .hidden __muldf3
0002a438 g     F .text	00000054 __sread
00032e84  w    O .rodata	00000014 _ZTVSt9exception
0002211c g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD0Ev
00032260 g     F .text	00000108 alt_find_file
0003206c g     F .text	000000a4 alt_dev_llist_insert
00030054 g     F .text	00000024 __malloc_lock
0003048c g     F .text	000000b0 sbrk
00032dc0  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
0002216c g     F .text	00000090 __cxa_throw
000279a0 g     F .text	0000005c _fflush_r
000228ec g     F .text	00000010 .hidden _Unwind_SetIP
0002bc70 g     F .text	000000c4 _calloc_r
00036a80 g       *ABS*	00000000 __bss_start
000233a4 g     F .text	00000128 memset
000206d4 g     F .text	000001b8 main
00036ab0 g     O .bss	00000004 alt_envp
00036a8c g     O .bss	00000004 __malloc_max_total_mem
00030990 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0002c2f0 g     F .text	00000018 __swbuf
00021b4c g     F .text	0000000c __cxa_get_globals_fast
0002a56c g     F .text	00000008 __sclose
000386a0 g       *ABS*	00000000 __alt_heap_limit
0002be24 g     F .text	00000014 fclose
000260fc g     F .text	00001688 _dtoa_r
00022b98 g     F .text	0000080c _malloc_r
0002c464 g     F .text	00000030 __ascii_wctomb
00022104 g     F .text	0000000c _ZNKSt13bad_exception4whatEv
00034e84 g     O .rwdata	00000004 alt_errno
000238e0 g     F .text	00000010 _init_signal
00032db4  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
000286bc g     F .text	000000c4 _fwalk
000220f4 g     F .text	00000004 _ZNSt13bad_exceptionD1Ev
0002cfa0 g     F .text	00000084 .hidden __divsi3
00027dcc g     F .text	00000124 _malloc_trim_r
00032d14 g       *ABS*	00000000 __CTOR_END__
00023964 g     F .text	000000dc strcmp
0002054c g     F .text	00000080 _ZN5CUart16NoneBlockingReadEPciPi
00032d14 g       *ABS*	00000000 __flash_rodata_start
00032eac  w    O .rodata	00000014 _ZTVN10__cxxabiv115__forced_unwindE
00032d14 g       *ABS*	00000000 __DTOR_LIST__
0002e2e8 g     F .text	00000088 .hidden __nedf2
00030878 g     F .text	00000038 alt_irq_init
00030428 g     F .text	00000064 alt_release_fd
000222e8 g     F .text	00000034 _ZN10__cxxabiv120__si_class_type_infoD0Ev
000202cc g     F .text	00000048 _ZN5CUartD1Ev
0003316c g     O .rodata	00000100 .hidden __clz_tab
00036a9c g     O .bss	00000004 _PathLocale
00020394 g     F .text	00000048 _ZN5CUart5CloseEv
00032970 g     F .text	00000014 atexit
0002bbbc g     F .text	00000060 _write_r
000288fc g     F .text	00000018 setlocale
00022920 g     F .text	00000008 .hidden _Unwind_GetTextRelBase
00022280 g     F .text	00000058 __cxa_call_terminate
00034e64 g     O .rwdata	00000004 _impure_ptr
00034e38  w    O .rwdata	00000008 _ZTIN10__cxxabiv115__forced_unwindE
00036aa8 g     O .bss	00000004 alt_argc
00027784 g     F .text	0000021c __sflush_r
00032170 g     F .text	00000060 _do_dtors
000288e8 g     F .text	00000008 __locale_cjk_lang
00034e20  w    O .rwdata	00000008 _ZTI5CUart
00021b3c g     F .text	00000010 _ZSt14get_unexpectedv
00020020 g       .exceptions	00000000 alt_irq_entry
00029988 g     F .text	00000064 __ulp
00022910 g     F .text	00000008 .hidden _Unwind_FindEnclosingFunction
00027db4 g     F .text	00000018 __fp_unlock_all
00034e70 g     O .rwdata	00000008 alt_fs_list
00032e60  w    O .rodata	00000024 _ZTSN10__cxxabiv119__foreign_exceptionE
000228fc g     F .text	0000000c .hidden _Unwind_GetLanguageSpecificData
0002187c g     F .text	000000b4 __cxa_begin_catch
00021eb8 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
00021adc g     F .text	00000010 _ZN10__cxxabiv112__unexpectedEPFvvE
00020020 g       *ABS*	00000000 __ram_exceptions_start
00028914 g     F .text	0000000c localeconv
00022114 g     F .text	00000004 _ZNSt13bad_exceptionD0Ev
00034e50 g     O .rwdata	00000004 _ZN10__cxxabiv119__terminate_handlerE
000204f8 g     F .text	00000054 _ZN5CUart11WriteStringEPc
00032440 g     F .text	00000050 alt_ic_isr_register
00021cc4 g     F .text	00000060 __cxa_allocate_exception
00032efc  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
00034e98 g       *ABS*	00000000 _edata
0003148c g     F .text	00000060 altera_avalon_uart_read_fd
00036bfc g       *ABS*	00000000 _end
00021044 g     F .text	00000600 __gxx_personality_sj0
0002be38 g     F .text	00000164 __fputwc
00020244 g       *ABS*	00000000 __ram_exceptions_end
00030e68 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000203dc g     F .text	00000084 _ZN5CUart4ReadEPciPi
000220f0 g     F .text	00000004 _ZNSt9exceptionD1Ev
00032518 g     F .text	0000008c alt_ic_irq_disable
0002a494 g     F .text	0000007c __swrite
00034e5c g     O .rwdata	00000004 __malloc_trim_threshold
000288dc g     F .text	0000000c __locale_msgcharset
00032984 g     F .text	00000038 exit
000228a0 g     F .text	0000001c .hidden _Unwind_SetGR
00028780 g     F .text	000000c4 _fwalk_reent
0002247c g     F .text	0000009c _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
0002978c g     F .text	000001fc __mdiff
00021a04 g     F .text	000000c0 _ZN10__cxxabiv111__terminateEPFvvE
0002d024 g     F .text	00000074 .hidden __modsi3
000386a0 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
00027d90 g     F .text	00000004 __sfp_lock_release
00032e34  w    O .rodata	0000000c _ZTISt13bad_exception
00031910 g     F .text	00000054 altera_avalon_uart_close
0002f8f4 g     F .text	00000034 _exit
00031d64 g     F .text	0000012c alt_alarm_start
0002286c g     F .text	0000001c .hidden _Unwind_GetGR
00021b58 g     F .text	0000000c __cxa_get_globals
00028920 g     F .text	000001bc __smakebuf_r
00034e54 g     O .rwdata	00000004 _ZN10__cxxabiv120__unexpected_handlerE
00023a40 g     F .text	00000098 strlen
00023660 g     F .text	0000006c _init_signal_r
00034e48  w    O .rwdata	00000008 _ZTISt9type_info
0003019c g     F .text	00000154 open
0002e370 g     F .text	000000dc .hidden __gedf2
00032e10  w    O .rodata	0000000d _ZTSSt9exception
00034e6c g     O .rwdata	00000004 __wctomb
00022110 g     F .text	00000004 _ZNSt9exceptionD0Ev
0002a670 g     F .text	00000018 __sprint_r
0003240c g     F .text	00000034 alt_icache_flush_all
00032d20  w    O .rodata	00000010 _ZTV5CUart
00022918 g     F .text	00000008 .hidden _Unwind_GetDataRelBase
00034e94 g     O .rwdata	00000004 alt_priority_mask
00032490 g     F .text	00000088 alt_ic_irq_enable
00025cd0 g     F .text	0000001c __vfprintf_internal
000319a0 g     F .text	000001dc altera_avalon_uart_read
0002c494 g     F .text	0000005c _wctomb_r
0002ec58 g     F .text	000008fc .hidden __subdf3
0002f964 g     F .text	00000120 fcntl
000291c0 g     F .text	000000b0 __lo0bits
00034e8c g     O .rwdata	00000008 alt_alarm_list
00032110 g     F .text	00000060 _do_ctors
000238f0 g     F .text	00000014 __sigtramp
0002c3a4 g     F .text	000000c0 wcrtomb
0002f7f8 g     F .text	000000d0 close
00032e40  w    O .rodata	00000020 _ZTSN10__cxxabiv115__forced_unwindE
0002fe44 g     F .text	00000084 alt_load
000225b4 g     F .text	00000044 _ZNKSt9type_info10__do_catchEPKS_PPvj
0002bfc0 g     F .text	00000080 fputwc
000238b4 g     F .text	00000014 raise
00022b84 g     F .text	00000014 free
00027d94 g     F .text	00000004 __sinit_lock_acquire
00028f34 g     F .text	00000120 __multadd
00021ec8 g     F .text	00000034 _ZN10__cxxabiv117__class_type_infoD0Ev
00028f0c g     F .text	00000028 _Bfree



Disassembly of section .entry:

00020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   20000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   20004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   20008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   2000c:	00bffd16 	blt	zero,r2,20004 <_gp+0xfffe31e4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20010:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20014:	08409114 	ori	at,at,580
    jmp r1
   20018:	0800683a 	jmp	at
   2001c:	00000000 	call	0 <__reset-0x20000>

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201d00 	call	201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001426 	beq	r2,zero,2018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	008000f4 	movhi	r2,3
   20140:	109abf04 	addi	r2,r2,27388
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	008000f4 	movhi	r2,3
   20158:	109abf04 	addi	r2,r2,27388
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	1009883a 	mov	r4,r2
   20174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2017c:	0005313a 	rdctl	r2,ipending
   20180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20184:	e0bfff17 	ldw	r2,-4(fp)
   20188:	00000706 	br	201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   2018c:	e0bffc17 	ldw	r2,-16(fp)
   20190:	1085883a 	add	r2,r2,r2
   20194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20198:	e0bffd17 	ldw	r2,-12(fp)
   2019c:	10800044 	addi	r2,r2,1
   201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a4:	003fe106 	br	2012c <_gp+0xfffe330c>

    active = alt_irq_pending ();
   201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201ac:	e0bffb17 	ldw	r2,-20(fp)
   201b0:	103fdb1e 	bne	r2,zero,20120 <_gp+0xfffe3300>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b4:	0001883a 	nop
}
   201b8:	0001883a 	nop
   201bc:	e037883a 	mov	sp,fp
   201c0:	dfc00117 	ldw	ra,4(sp)
   201c4:	df000017 	ldw	fp,0(sp)
   201c8:	dec00204 	addi	sp,sp,8
   201cc:	f800283a 	ret

000201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201d0:	defffb04 	addi	sp,sp,-20
   201d4:	dfc00415 	stw	ra,16(sp)
   201d8:	df000315 	stw	fp,12(sp)
   201dc:	df000304 	addi	fp,sp,12
   201e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   201e4:	000531fa 	rdctl	r2,exception
   201e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   201ec:	e0bffd17 	ldw	r2,-12(fp)
   201f0:	10801f0c 	andi	r2,r2,124
   201f4:	1004d0ba 	srli	r2,r2,2
   201f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   201fc:	0005333a 	rdctl	r2,badaddr
   20200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   20204:	d0a72817 	ldw	r2,-25440(gp)
   20208:	10000726 	beq	r2,zero,20228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   2020c:	d0a72817 	ldw	r2,-25440(gp)
   20210:	e0fffd17 	ldw	r3,-12(fp)
   20214:	e1bffe17 	ldw	r6,-8(fp)
   20218:	e17fff17 	ldw	r5,-4(fp)
   2021c:	1809883a 	mov	r4,r3
   20220:	103ee83a 	callr	r2
   20224:	00000206 	br	20230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   2022c:	0005883a 	mov	r2,zero
}
   20230:	e037883a 	mov	sp,fp
   20234:	dfc00117 	ldw	ra,4(sp)
   20238:	df000017 	ldw	fp,0(sp)
   2023c:	dec00204 	addi	sp,sp,8
   20240:	f800283a 	ret

Disassembly of section .text:

00020244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   20244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   20248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   2024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   20250:	00bffd16 	blt	zero,r2,20248 <_gp+0xfffe3428>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20254:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   20258:	dee1a814 	ori	sp,sp,34464
    movhi gp, %hi(_gp)
   2025c:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
   20260:	d6b38814 	ori	gp,gp,52768
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20264:	008000f4 	movhi	r2,3
    ori r2, r2, %lo(__bss_start)
   20268:	109aa014 	ori	r2,r2,27264

    movhi r3, %hi(__bss_end)
   2026c:	00c000f4 	movhi	r3,3
    ori r3, r3, %lo(__bss_end)
   20270:	18daff14 	ori	r3,r3,27644

    beq r2, r3, 1f
   20274:	10c00326 	beq	r2,r3,20284 <_start+0x40>

0:
    stw zero, (r2)
   20278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   2027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   20280:	10fffd36 	bltu	r2,r3,20278 <_gp+0xfffe3458>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20284:	002fe440 	call	2fe44 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20288:	002ffd80 	call	2ffd8 <alt_main>

0002028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   2028c:	003fff06 	br	2028c <_gp+0xfffe346c>

00020290 <_ZN5CUartC1Ev>:
 */
#include "CUart.h"
#include "sys/alt_dev.h"
#include "altera_avalon_uart.h"

CUart::CUart():
   20290:	defffe04 	addi	sp,sp,-8
   20294:	df000115 	stw	fp,4(sp)
   20298:	df000104 	addi	fp,sp,4
   2029c:	e13fff15 	stw	r4,-4(fp)
	// TODO Auto-generated constructor stub
	UartHandle(0)
   202a0:	008000f4 	movhi	r2,3
   202a4:	108b4a04 	addi	r2,r2,11560
   202a8:	e0ffff17 	ldw	r3,-4(fp)
   202ac:	18800015 	stw	r2,0(r3)
   202b0:	e0bfff17 	ldw	r2,-4(fp)
   202b4:	10000115 	stw	zero,4(r2)
{

}
   202b8:	0001883a 	nop
   202bc:	e037883a 	mov	sp,fp
   202c0:	df000017 	ldw	fp,0(sp)
   202c4:	dec00104 	addi	sp,sp,4
   202c8:	f800283a 	ret

000202cc <_ZN5CUartD1Ev>:

CUart::~CUart() {
   202cc:	defffd04 	addi	sp,sp,-12
   202d0:	dfc00215 	stw	ra,8(sp)
   202d4:	df000115 	stw	fp,4(sp)
   202d8:	df000104 	addi	fp,sp,4
   202dc:	e13fff15 	stw	r4,-4(fp)
   202e0:	008000f4 	movhi	r2,3
   202e4:	108b4a04 	addi	r2,r2,11560
   202e8:	e0ffff17 	ldw	r3,-4(fp)
   202ec:	18800015 	stw	r2,0(r3)
	// TODO Auto-generated destructor stub


}
   202f0:	0005883a 	mov	r2,zero
   202f4:	10000226 	beq	r2,zero,20300 <_ZN5CUartD1Ev+0x34>
   202f8:	e13fff17 	ldw	r4,-4(fp)
   202fc:	002088c0 	call	2088c <_ZdlPv>
   20300:	e037883a 	mov	sp,fp
   20304:	dfc00117 	ldw	ra,4(sp)
   20308:	df000017 	ldw	fp,0(sp)
   2030c:	dec00204 	addi	sp,sp,8
   20310:	f800283a 	ret

00020314 <_ZN5CUartD0Ev>:
	UartHandle(0)
{

}

CUart::~CUart() {
   20314:	defffd04 	addi	sp,sp,-12
   20318:	dfc00215 	stw	ra,8(sp)
   2031c:	df000115 	stw	fp,4(sp)
   20320:	df000104 	addi	fp,sp,4
   20324:	e13fff15 	stw	r4,-4(fp)
	// TODO Auto-generated destructor stub


}
   20328:	e13fff17 	ldw	r4,-4(fp)
   2032c:	00202cc0 	call	202cc <_ZN5CUartD1Ev>
   20330:	e13fff17 	ldw	r4,-4(fp)
   20334:	002088c0 	call	2088c <_ZdlPv>
   20338:	e037883a 	mov	sp,fp
   2033c:	dfc00117 	ldw	ra,4(sp)
   20340:	df000017 	ldw	fp,0(sp)
   20344:	dec00204 	addi	sp,sp,8
   20348:	f800283a 	ret

0002034c <_ZN5CUart4OpenEPc>:

void CUart::Open(char *pDeviceName)
{
   2034c:	defffc04 	addi	sp,sp,-16
   20350:	dfc00315 	stw	ra,12(sp)
   20354:	df000215 	stw	fp,8(sp)
   20358:	df000204 	addi	fp,sp,8
   2035c:	e13ffe15 	stw	r4,-8(fp)
   20360:	e17fff15 	stw	r5,-4(fp)
	UartHandle = open(pDeviceName, O_ACCMODE); // open file for reading and writing
   20364:	014000c4 	movi	r5,3
   20368:	e13fff17 	ldw	r4,-4(fp)
   2036c:	003019c0 	call	3019c <open>
   20370:	1007883a 	mov	r3,r2
   20374:	e0bffe17 	ldw	r2,-8(fp)
   20378:	10c00115 	stw	r3,4(r2)
}
   2037c:	0001883a 	nop
   20380:	e037883a 	mov	sp,fp
   20384:	dfc00117 	ldw	ra,4(sp)
   20388:	df000017 	ldw	fp,0(sp)
   2038c:	dec00204 	addi	sp,sp,8
   20390:	f800283a 	ret

00020394 <_ZN5CUart5CloseEv>:

void  CUart::Close()
{
   20394:	defffd04 	addi	sp,sp,-12
   20398:	dfc00215 	stw	ra,8(sp)
   2039c:	df000115 	stw	fp,4(sp)
   203a0:	df000104 	addi	fp,sp,4
   203a4:	e13fff15 	stw	r4,-4(fp)
    if (UartHandle)
   203a8:	e0bfff17 	ldw	r2,-4(fp)
   203ac:	10800117 	ldw	r2,4(r2)
   203b0:	10000426 	beq	r2,zero,203c4 <_ZN5CUart5CloseEv+0x30>
      close(UartHandle);
   203b4:	e0bfff17 	ldw	r2,-4(fp)
   203b8:	10800117 	ldw	r2,4(r2)
   203bc:	1009883a 	mov	r4,r2
   203c0:	002f7f80 	call	2f7f8 <close>
}
   203c4:	0001883a 	nop
   203c8:	e037883a 	mov	sp,fp
   203cc:	dfc00117 	ldw	ra,4(sp)
   203d0:	df000017 	ldw	fp,0(sp)
   203d4:	dec00204 	addi	sp,sp,8
   203d8:	f800283a 	ret

000203dc <_ZN5CUart4ReadEPciPi>:

bool CUart::Read(char *pBuffer, int nBufferSize, int *prx_len){
   203dc:	defff804 	addi	sp,sp,-32
   203e0:	dfc00715 	stw	ra,28(sp)
   203e4:	df000615 	stw	fp,24(sp)
   203e8:	df000604 	addi	fp,sp,24
   203ec:	e13ffc15 	stw	r4,-16(fp)
   203f0:	e17ffd15 	stw	r5,-12(fp)
   203f4:	e1bffe15 	stw	r6,-8(fp)
   203f8:	e1ffff15 	stw	r7,-4(fp)
	int nResult;
    bool bSuccess = FALSE;
   203fc:	e03ffa05 	stb	zero,-24(fp)
    if (UartHandle){
   20400:	e0bffc17 	ldw	r2,-16(fp)
   20404:	10800117 	ldw	r2,4(r2)
   20408:	10000f26 	beq	r2,zero,20448 <_ZN5CUart4ReadEPciPi+0x6c>
        nResult = read(UartHandle, pBuffer, nBufferSize);
   2040c:	e0bffc17 	ldw	r2,-16(fp)
   20410:	10800117 	ldw	r2,4(r2)
   20414:	e0fffe17 	ldw	r3,-8(fp)
   20418:	180d883a 	mov	r6,r3
   2041c:	e17ffd17 	ldw	r5,-12(fp)
   20420:	1009883a 	mov	r4,r2
   20424:	003032c0 	call	3032c <read>
   20428:	e0bffb15 	stw	r2,-20(fp)
        if (nResult >= 0){
   2042c:	e0bffb17 	ldw	r2,-20(fp)
   20430:	10000516 	blt	r2,zero,20448 <_ZN5CUart4ReadEPciPi+0x6c>
            *prx_len = nResult;
   20434:	e0bfff17 	ldw	r2,-4(fp)
   20438:	e0fffb17 	ldw	r3,-20(fp)
   2043c:	10c00015 	stw	r3,0(r2)
            bSuccess = TRUE;
   20440:	00800044 	movi	r2,1
   20444:	e0bffa05 	stb	r2,-24(fp)
            //if (*prx_len == nBufferSize)
            //    bSuccess = TRUE;
        }
    }
    return bSuccess;
   20448:	e0bffa03 	ldbu	r2,-24(fp)
}
   2044c:	e037883a 	mov	sp,fp
   20450:	dfc00117 	ldw	ra,4(sp)
   20454:	df000017 	ldw	fp,0(sp)
   20458:	dec00204 	addi	sp,sp,8
   2045c:	f800283a 	ret

00020460 <_ZN5CUart5WriteEPci>:




bool  CUart::Write(char *pData, int nDataSize)
{
   20460:	defffa04 	addi	sp,sp,-24
   20464:	dfc00515 	stw	ra,20(sp)
   20468:	df000415 	stw	fp,16(sp)
   2046c:	df000404 	addi	fp,sp,16
   20470:	e13ffd15 	stw	r4,-12(fp)
   20474:	e17ffe15 	stw	r5,-8(fp)
   20478:	e1bfff15 	stw	r6,-4(fp)
    bool bSuccess = FALSE;
   2047c:	e03ffc05 	stb	zero,-16(fp)
    if (UartHandle){
   20480:	e0bffd17 	ldw	r2,-12(fp)
   20484:	10800117 	ldw	r2,4(r2)
   20488:	10001526 	beq	r2,zero,204e0 <_ZN5CUart5WriteEPci+0x80>
    	write(UartHandle, pData, nDataSize);
   2048c:	e0bffd17 	ldw	r2,-12(fp)
   20490:	10800117 	ldw	r2,4(r2)
   20494:	e0ffff17 	ldw	r3,-4(fp)
   20498:	180d883a 	mov	r6,r3
   2049c:	e17ffe17 	ldw	r5,-8(fp)
   204a0:	1009883a 	mov	r4,r2
   204a4:	003074c0 	call	3074c <write>
        if (write(UartHandle, pData, nDataSize) == nDataSize)
   204a8:	e0bffd17 	ldw	r2,-12(fp)
   204ac:	10800117 	ldw	r2,4(r2)
   204b0:	e0ffff17 	ldw	r3,-4(fp)
   204b4:	180d883a 	mov	r6,r3
   204b8:	e17ffe17 	ldw	r5,-8(fp)
   204bc:	1009883a 	mov	r4,r2
   204c0:	003074c0 	call	3074c <write>
   204c4:	1007883a 	mov	r3,r2
   204c8:	e0bfff17 	ldw	r2,-4(fp)
   204cc:	1885003a 	cmpeq	r2,r3,r2
   204d0:	10803fcc 	andi	r2,r2,255
   204d4:	10000226 	beq	r2,zero,204e0 <_ZN5CUart5WriteEPci+0x80>
            bSuccess = TRUE;
   204d8:	00800044 	movi	r2,1
   204dc:	e0bffc05 	stb	r2,-16(fp)
    }
    return bSuccess;
   204e0:	e0bffc03 	ldbu	r2,-16(fp)
}
   204e4:	e037883a 	mov	sp,fp
   204e8:	dfc00117 	ldw	ra,4(sp)
   204ec:	df000017 	ldw	fp,0(sp)
   204f0:	dec00204 	addi	sp,sp,8
   204f4:	f800283a 	ret

000204f8 <_ZN5CUart11WriteStringEPc>:


bool CUart::WriteString(char *pString)
{
   204f8:	defffc04 	addi	sp,sp,-16
   204fc:	dfc00315 	stw	ra,12(sp)
   20500:	df000215 	stw	fp,8(sp)
   20504:	df000204 	addi	fp,sp,8
   20508:	e13ffe15 	stw	r4,-8(fp)
   2050c:	e17fff15 	stw	r5,-4(fp)
	printf("TX--> %s\n",pString);
   20510:	e17fff17 	ldw	r5,-4(fp)
   20514:	010000f4 	movhi	r4,3
   20518:	210b4504 	addi	r4,r4,11540
   2051c:	00234fc0 	call	234fc <printf>
	return CUart::Write(pString, strlen(pString));
   20520:	e13fff17 	ldw	r4,-4(fp)
   20524:	0023a400 	call	23a40 <strlen>
   20528:	100d883a 	mov	r6,r2
   2052c:	e17fff17 	ldw	r5,-4(fp)
   20530:	e13ffe17 	ldw	r4,-8(fp)
   20534:	00204600 	call	20460 <_ZN5CUart5WriteEPci>
}
   20538:	e037883a 	mov	sp,fp
   2053c:	dfc00117 	ldw	ra,4(sp)
   20540:	df000017 	ldw	fp,0(sp)
   20544:	dec00204 	addi	sp,sp,8
   20548:	f800283a 	ret

0002054c <_ZN5CUart16NoneBlockingReadEPciPi>:

bool CUart::NoneBlockingRead(char *pBuffer, int nBufferSize, int *prx_len){
   2054c:	defff904 	addi	sp,sp,-28
   20550:	dfc00615 	stw	ra,24(sp)
   20554:	df000515 	stw	fp,20(sp)
   20558:	df000504 	addi	fp,sp,20
   2055c:	e13ffc15 	stw	r4,-16(fp)
   20560:	e17ffd15 	stw	r5,-12(fp)
   20564:	e1bffe15 	stw	r6,-8(fp)
   20568:	e1ffff15 	stw	r7,-4(fp)
    bool bSuccess;
    fcntl(UartHandle, F_SETFL, O_ACCMODE | O_NONBLOCK);
   2056c:	e0bffc17 	ldw	r2,-16(fp)
   20570:	10800117 	ldw	r2,4(r2)
   20574:	019000c4 	movi	r6,16387
   20578:	01400104 	movi	r5,4
   2057c:	1009883a 	mov	r4,r2
   20580:	002f9640 	call	2f964 <fcntl>
    bSuccess = CUart::Read(pBuffer, nBufferSize, prx_len);
   20584:	e1ffff17 	ldw	r7,-4(fp)
   20588:	e1bffe17 	ldw	r6,-8(fp)
   2058c:	e17ffd17 	ldw	r5,-12(fp)
   20590:	e13ffc17 	ldw	r4,-16(fp)
   20594:	00203dc0 	call	203dc <_ZN5CUart4ReadEPciPi>
   20598:	e0bffb05 	stb	r2,-20(fp)
    fcntl(UartHandle, F_SETFL, O_ACCMODE);
   2059c:	e0bffc17 	ldw	r2,-16(fp)
   205a0:	10800117 	ldw	r2,4(r2)
   205a4:	018000c4 	movi	r6,3
   205a8:	01400104 	movi	r5,4
   205ac:	1009883a 	mov	r4,r2
   205b0:	002f9640 	call	2f964 <fcntl>
    return bSuccess;
   205b4:	e0bffb03 	ldbu	r2,-20(fp)
}
   205b8:	e037883a 	mov	sp,fp
   205bc:	dfc00117 	ldw	ra,4(sp)
   205c0:	df000017 	ldw	fp,0(sp)
   205c4:	dec00204 	addi	sp,sp,8
   205c8:	f800283a 	ret

000205cc <_ZN5CUart15ReadWithTimeoutEPhtPtm>:


bool CUart::ReadWithTimeout(alt_u8 *pBuffer, alt_u16 nBufferSize, alt_u16 *prx_len, alt_u32 timeout){
   205cc:	defff504 	addi	sp,sp,-44
   205d0:	dfc00a15 	stw	ra,40(sp)
   205d4:	df000915 	stw	fp,36(sp)
   205d8:	df000904 	addi	fp,sp,36
   205dc:	e13ffc15 	stw	r4,-16(fp)
   205e0:	e17ffd15 	stw	r5,-12(fp)
   205e4:	3005883a 	mov	r2,r6
   205e8:	e1ffff15 	stw	r7,-4(fp)
   205ec:	e0bffe0d 	sth	r2,-8(fp)
    bool bSuccess = FALSE;
   205f0:	e03ff705 	stb	zero,-36(fp)
    if (UartHandle){
   205f4:	e0bffc17 	ldw	r2,-16(fp)
   205f8:	10800117 	ldw	r2,4(r2)
   205fc:	10002f26 	beq	r2,zero,206bc <_ZN5CUart15ReadWithTimeoutEPhtPtm+0xf0>
        int rx_total_cnt = 0, rx_cnt;
   20600:	e03ff815 	stw	zero,-32(fp)
        alt_u32 time_start;
        bool bTimeout = FALSE;
   20604:	e03ff905 	stb	zero,-28(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   20608:	d0a72617 	ldw	r2,-25448(gp)
        time_start = alt_nticks();
   2060c:	e0bffa15 	stw	r2,-24(fp)
        while(!bSuccess && !bTimeout){
   20610:	e0bff703 	ldbu	r2,-36(fp)
   20614:	1000251e 	bne	r2,zero,206ac <_ZN5CUart15ReadWithTimeoutEPhtPtm+0xe0>
   20618:	e0bff903 	ldbu	r2,-28(fp)
   2061c:	1000231e 	bne	r2,zero,206ac <_ZN5CUart15ReadWithTimeoutEPhtPtm+0xe0>
        	NoneBlockingRead((char *)pBuffer+rx_total_cnt, nBufferSize-rx_total_cnt, &rx_cnt);
   20620:	e0bff817 	ldw	r2,-32(fp)
   20624:	e0fffd17 	ldw	r3,-12(fp)
   20628:	1889883a 	add	r4,r3,r2
   2062c:	e0fffe0b 	ldhu	r3,-8(fp)
   20630:	e0bff817 	ldw	r2,-32(fp)
   20634:	1885c83a 	sub	r2,r3,r2
   20638:	e0fffb04 	addi	r3,fp,-20
   2063c:	180f883a 	mov	r7,r3
   20640:	100d883a 	mov	r6,r2
   20644:	200b883a 	mov	r5,r4
   20648:	e13ffc17 	ldw	r4,-16(fp)
   2064c:	002054c0 	call	2054c <_ZN5CUart16NoneBlockingReadEPciPi>
            //rx_cnt = read(pUart, pBuffer+rx_total_cnt, nBufferSize-rx_total_cnt);
            rx_total_cnt += rx_cnt;
   20650:	e0bffb17 	ldw	r2,-20(fp)
   20654:	e0fff817 	ldw	r3,-32(fp)
   20658:	1885883a 	add	r2,r3,r2
   2065c:	e0bff815 	stw	r2,-32(fp)
            if (rx_total_cnt == nBufferSize)
   20660:	e0fffe0b 	ldhu	r3,-8(fp)
   20664:	e0bff817 	ldw	r2,-32(fp)
   20668:	1880031e 	bne	r3,r2,20678 <_ZN5CUart15ReadWithTimeoutEPhtPtm+0xac>
                bSuccess = TRUE;
   2066c:	00800044 	movi	r2,1
   20670:	e0bff705 	stb	r2,-36(fp)
   20674:	003fe606 	br	20610 <_gp+0xfffe37f0>
   20678:	d0e72617 	ldw	r3,-25448(gp)
            else if ((alt_nticks() - time_start) > timeout)
   2067c:	e0bffa17 	ldw	r2,-24(fp)
   20680:	1885c83a 	sub	r2,r3,r2
   20684:	e0c00217 	ldw	r3,8(fp)
   20688:	1885803a 	cmpltu	r2,r3,r2
   2068c:	10803fcc 	andi	r2,r2,255
   20690:	10000326 	beq	r2,zero,206a0 <_ZN5CUart15ReadWithTimeoutEPhtPtm+0xd4>
                bTimeout = TRUE;
   20694:	00800044 	movi	r2,1
   20698:	e0bff905 	stb	r2,-28(fp)
   2069c:	003fdc06 	br	20610 <_gp+0xfffe37f0>
            else
                usleep(1);
   206a0:	01000044 	movi	r4,1
   206a4:	00306e00 	call	306e0 <usleep>
    if (UartHandle){
        int rx_total_cnt = 0, rx_cnt;
        alt_u32 time_start;
        bool bTimeout = FALSE;
        time_start = alt_nticks();
        while(!bSuccess && !bTimeout){
   206a8:	003fd906 	br	20610 <_gp+0xfffe37f0>
            else if ((alt_nticks() - time_start) > timeout)
                bTimeout = TRUE;
            else
                usleep(1);
        }
        *prx_len = rx_total_cnt;
   206ac:	e0bff817 	ldw	r2,-32(fp)
   206b0:	1007883a 	mov	r3,r2
   206b4:	e0bfff17 	ldw	r2,-4(fp)
   206b8:	10c0000d 	sth	r3,0(r2)
    }
    return bSuccess;
   206bc:	e0bff703 	ldbu	r2,-36(fp)
}
   206c0:	e037883a 	mov	sp,fp
   206c4:	dfc00117 	ldw	ra,4(sp)
   206c8:	df000017 	ldw	fp,0(sp)
   206cc:	dec00204 	addi	sp,sp,8
   206d0:	f800283a 	ret

000206d4 <main>:
#include "CUart.h"



int main()
{
   206d4:	deffe404 	addi	sp,sp,-112
   206d8:	dfc01b15 	stw	ra,108(sp)
   206dc:	df001a15 	stw	fp,104(sp)
   206e0:	ddc01915 	stw	r23,100(sp)
   206e4:	dd801815 	stw	r22,96(sp)
   206e8:	dd401715 	stw	r21,92(sp)
   206ec:	dd001615 	stw	r20,88(sp)
   206f0:	dcc01515 	stw	r19,84(sp)
   206f4:	dc801415 	stw	r18,80(sp)
   206f8:	dc401315 	stw	r17,76(sp)
   206fc:	dc001215 	stw	r16,72(sp)
   20700:	df001a04 	addi	fp,sp,104
   20704:	008000b4 	movhi	r2,2
   20708:	10841104 	addi	r2,r2,4164
   2070c:	e0bfee15 	stw	r2,-72(fp)
   20710:	008000f4 	movhi	r2,3
   20714:	108b3404 	addi	r2,r2,11472
   20718:	e0bfef15 	stw	r2,-68(fp)
   2071c:	e0bff004 	addi	r2,fp,-64
   20720:	e0ffe604 	addi	r3,fp,-104
   20724:	10c00015 	stw	r3,0(r2)
   20728:	00c000b4 	movhi	r3,2
   2072c:	18c20704 	addi	r3,r3,2076
   20730:	10c00115 	stw	r3,4(r2)
   20734:	16c00215 	stw	sp,8(r2)
   20738:	e0bfe804 	addi	r2,fp,-96
   2073c:	1009883a 	mov	r4,r2
   20740:	00228400 	call	22840 <_Unwind_SjLj_Register>
  CUart Uart;
   20744:	00bfffc4 	movi	r2,-1
   20748:	e0bfe915 	stw	r2,-92(fp)
   2074c:	e13fe604 	addi	r4,fp,-104
   20750:	00202900 	call	20290 <_ZN5CUartC1Ev>
  Uart.Open(HC_05_UART_NAME);
   20754:	014000f4 	movhi	r5,3
   20758:	00800044 	movi	r2,1
   2075c:	e0bfe915 	stw	r2,-92(fp)
   20760:	294b4c04 	addi	r5,r5,11568
   20764:	e13fe604 	addi	r4,fp,-104
   20768:	002034c0 	call	2034c <_ZN5CUart4OpenEPc>
  printf("Press KEY1 to Config HC-05\r\n");
   2076c:	010000f4 	movhi	r4,3
   20770:	210b5004 	addi	r4,r4,11584
   20774:	00235f80 	call	235f8 <puts>
  while(IORD(PIO_KEY_BASE,0));
   20778:	00800134 	movhi	r2,4
   2077c:	10841004 	addi	r2,r2,4160
   20780:	10800037 	ldwio	r2,0(r2)
   20784:	1004c03a 	cmpne	r2,r2,zero
   20788:	10803fcc 	andi	r2,r2,255
   2078c:	10000126 	beq	r2,zero,20794 <main+0xc0>
   20790:	003ff906 	br	20778 <_gp+0xfffe3958>

  //AT
  Uart.WriteString("AT\r\n");
   20794:	014000f4 	movhi	r5,3
   20798:	00800044 	movi	r2,1
   2079c:	e0bfe915 	stw	r2,-92(fp)
   207a0:	294b5704 	addi	r5,r5,11612
   207a4:	e13fe604 	addi	r4,fp,-104
   207a8:	00204f80 	call	204f8 <_ZN5CUart11WriteStringEPc>
  usleep(1000000);
   207ac:	010003f4 	movhi	r4,15
   207b0:	21109004 	addi	r4,r4,16960
   207b4:	00306e00 	call	306e0 <usleep>
  //Restore original
  Uart.WriteString("AT+ORGL\r\n");
   207b8:	014000f4 	movhi	r5,3
   207bc:	294b5904 	addi	r5,r5,11620
   207c0:	e13fe604 	addi	r4,fp,-104
   207c4:	00204f80 	call	204f8 <_ZN5CUart11WriteStringEPc>
  usleep(1000000);
   207c8:	010003f4 	movhi	r4,15
   207cc:	21109004 	addi	r4,r4,16960
   207d0:	00306e00 	call	306e0 <usleep>
  //Set Baud Rate
  Uart.WriteString("AT+UART=115200,0,0\r\n");
   207d4:	014000f4 	movhi	r5,3
   207d8:	294b5c04 	addi	r5,r5,11632
   207dc:	e13fe604 	addi	r4,fp,-104
   207e0:	00204f80 	call	204f8 <_ZN5CUart11WriteStringEPc>
  usleep(1000000);
   207e4:	010003f4 	movhi	r4,15
   207e8:	21109004 	addi	r4,r4,16960
   207ec:	00306e00 	call	306e0 <usleep>


  printf("Finish\n");
   207f0:	010000f4 	movhi	r4,3
   207f4:	210b6204 	addi	r4,r4,11656
   207f8:	00235f80 	call	235f8 <puts>

  return 0;
   207fc:	e03ff515 	stw	zero,-44(fp)



int main()
{
  CUart Uart;
   20800:	00bfffc4 	movi	r2,-1
   20804:	e0bfe915 	stw	r2,-92(fp)
   20808:	e13fe604 	addi	r4,fp,-104
   2080c:	00202cc0 	call	202cc <_ZN5CUartD1Ev>
   20810:	e0bff517 	ldw	r2,-44(fp)
   20814:	e0bff615 	stw	r2,-40(fp)
   20818:	00000b06 	br	20848 <main+0x174>
   2081c:	e7001a04 	addi	fp,fp,104
   20820:	e0bfea17 	ldw	r2,-88(fp)
   20824:	e0bff715 	stw	r2,-36(fp)
   20828:	e03fe915 	stw	zero,-92(fp)
   2082c:	e13fe604 	addi	r4,fp,-104
   20830:	00202cc0 	call	202cc <_ZN5CUartD1Ev>
   20834:	e0fff717 	ldw	r3,-36(fp)
   20838:	00bfffc4 	movi	r2,-1
   2083c:	e0bfe915 	stw	r2,-92(fp)
   20840:	1809883a 	mov	r4,r3
   20844:	0022a3c0 	call	22a3c <_Unwind_SjLj_Resume>
   20848:	e0bfe804 	addi	r2,fp,-96
   2084c:	1009883a 	mov	r4,r2
   20850:	00228580 	call	22858 <_Unwind_SjLj_Unregister>


  printf("Finish\n");

  return 0;
}
   20854:	e0bff617 	ldw	r2,-40(fp)
   20858:	e6fff804 	addi	sp,fp,-32
   2085c:	dfc00917 	ldw	ra,36(sp)
   20860:	df000817 	ldw	fp,32(sp)
   20864:	ddc00717 	ldw	r23,28(sp)
   20868:	dd800617 	ldw	r22,24(sp)
   2086c:	dd400517 	ldw	r21,20(sp)
   20870:	dd000417 	ldw	r20,16(sp)
   20874:	dcc00317 	ldw	r19,12(sp)
   20878:	dc800217 	ldw	r18,8(sp)
   2087c:	dc400117 	ldw	r17,4(sp)
   20880:	dc000017 	ldw	r16,0(sp)
   20884:	dec00a04 	addi	sp,sp,40
   20888:	f800283a 	ret

0002088c <_ZdlPv>:
   2088c:	0022b841 	jmpi	22b84 <free>

00020890 <_ZL21size_of_encoded_valueh>:
   20890:	deffff04 	addi	sp,sp,-4
   20894:	dfc00015 	stw	ra,0(sp)
   20898:	20c03fcc 	andi	r3,r4,255
   2089c:	00803fc4 	movi	r2,255
   208a0:	18802026 	beq	r3,r2,20924 <_ZL21size_of_encoded_valueh+0x94>
   208a4:	210001cc 	andi	r4,r4,7
   208a8:	00800144 	movi	r2,5
   208ac:	11001c36 	bltu	r2,r4,20920 <_ZL21size_of_encoded_valueh+0x90>
   208b0:	200890ba 	slli	r4,r4,2
   208b4:	008000b4 	movhi	r2,2
   208b8:	10823204 	addi	r2,r2,2248
   208bc:	2089883a 	add	r4,r4,r2
   208c0:	20800017 	ldw	r2,0(r4)
   208c4:	1000683a 	jmp	r2
   208c8:	000208e0 	cmpeqi	zero,zero,2083
   208cc:	00020920 	cmpeqi	zero,zero,2084
   208d0:	000208f0 	cmpltui	zero,zero,2083
   208d4:	000208e0 	cmpeqi	zero,zero,2083
   208d8:	00020910 	cmplti	zero,zero,2084
   208dc:	00020900 	call	2090 <__reset-0x1df70>
   208e0:	00800104 	movi	r2,4
   208e4:	dfc00017 	ldw	ra,0(sp)
   208e8:	dec00104 	addi	sp,sp,4
   208ec:	f800283a 	ret
   208f0:	00800084 	movi	r2,2
   208f4:	dfc00017 	ldw	ra,0(sp)
   208f8:	dec00104 	addi	sp,sp,4
   208fc:	f800283a 	ret
   20900:	00800044 	movi	r2,1
   20904:	dfc00017 	ldw	ra,0(sp)
   20908:	dec00104 	addi	sp,sp,4
   2090c:	f800283a 	ret
   20910:	00800204 	movi	r2,8
   20914:	dfc00017 	ldw	ra,0(sp)
   20918:	dec00104 	addi	sp,sp,4
   2091c:	f800283a 	ret
   20920:	0022b580 	call	22b58 <abort>
   20924:	0005883a 	mov	r2,zero
   20928:	dfc00017 	ldw	ra,0(sp)
   2092c:	dec00104 	addi	sp,sp,4
   20930:	f800283a 	ret

00020934 <_ZL28read_encoded_value_with_basehjPKhPj>:
   20934:	deffff04 	addi	sp,sp,-4
   20938:	dfc00015 	stw	ra,0(sp)
   2093c:	20c03fcc 	andi	r3,r4,255
   20940:	00801404 	movi	r2,80
   20944:	18807326 	beq	r3,r2,20b14 <_ZL28read_encoded_value_with_basehjPKhPj+0x1e0>
   20948:	20c003cc 	andi	r3,r4,15
   2094c:	00800304 	movi	r2,12
   20950:	10c06f36 	bltu	r2,r3,20b10 <_ZL28read_encoded_value_with_basehjPKhPj+0x1dc>
   20954:	180690ba 	slli	r3,r3,2
   20958:	020000b4 	movhi	r8,2
   2095c:	42025b04 	addi	r8,r8,2412
   20960:	1a07883a 	add	r3,r3,r8
   20964:	18800017 	ldw	r2,0(r3)
   20968:	1000683a 	jmp	r2
   2096c:	000209a0 	cmpeqi	zero,zero,2086
   20970:	00020abc 	xorhi	zero,zero,2090
   20974:	00020af8 	rdprs	zero,zero,2091
   20978:	000209a0 	cmpeqi	zero,zero,2086
   2097c:	00020a04 	movi	zero,2088
   20980:	00020a58 	cmpnei	zero,zero,2089
   20984:	00020b10 	cmplti	zero,zero,2092
   20988:	00020b10 	cmplti	zero,zero,2092
   2098c:	00020b10 	cmplti	zero,zero,2092
   20990:	00020a64 	muli	zero,zero,2089
   20994:	00020a34 	movhi	zero,2088
   20998:	000209a0 	cmpeqi	zero,zero,2086
   2099c:	00020a04 	movi	zero,2088
   209a0:	30800043 	ldbu	r2,1(r6)
   209a4:	30c00083 	ldbu	r3,2(r6)
   209a8:	324000c3 	ldbu	r9,3(r6)
   209ac:	32000003 	ldbu	r8,0(r6)
   209b0:	1004923a 	slli	r2,r2,8
   209b4:	1806943a 	slli	r3,r3,16
   209b8:	4812963a 	slli	r9,r9,24
   209bc:	1204b03a 	or	r2,r2,r8
   209c0:	1884b03a 	or	r2,r3,r2
   209c4:	4886b03a 	or	r3,r9,r2
   209c8:	30800104 	addi	r2,r6,4
   209cc:	18000926 	beq	r3,zero,209f4 <_ZL28read_encoded_value_with_basehjPKhPj+0xc0>
   209d0:	22001c0c 	andi	r8,r4,112
   209d4:	02400404 	movi	r9,16
   209d8:	42405726 	beq	r8,r9,20b38 <_ZL28read_encoded_value_with_basehjPKhPj+0x204>
   209dc:	21003fcc 	andi	r4,r4,255
   209e0:	2100201c 	xori	r4,r4,128
   209e4:	213fe004 	addi	r4,r4,-128
   209e8:	1947883a 	add	r3,r3,r5
   209ec:	2000010e 	bge	r4,zero,209f4 <_ZL28read_encoded_value_with_basehjPKhPj+0xc0>
   209f0:	18c00017 	ldw	r3,0(r3)
   209f4:	38c00015 	stw	r3,0(r7)
   209f8:	dfc00017 	ldw	ra,0(sp)
   209fc:	dec00104 	addi	sp,sp,4
   20a00:	f800283a 	ret
   20a04:	30800043 	ldbu	r2,1(r6)
   20a08:	30c00083 	ldbu	r3,2(r6)
   20a0c:	324000c3 	ldbu	r9,3(r6)
   20a10:	32000003 	ldbu	r8,0(r6)
   20a14:	1004923a 	slli	r2,r2,8
   20a18:	1806943a 	slli	r3,r3,16
   20a1c:	4812963a 	slli	r9,r9,24
   20a20:	1204b03a 	or	r2,r2,r8
   20a24:	1884b03a 	or	r2,r3,r2
   20a28:	4886b03a 	or	r3,r9,r2
   20a2c:	30800204 	addi	r2,r6,8
   20a30:	003fe606 	br	209cc <_gp+0xfffe3bac>
   20a34:	30c00043 	ldbu	r3,1(r6)
   20a38:	32000003 	ldbu	r8,0(r6)
   20a3c:	30800084 	addi	r2,r6,2
   20a40:	1806923a 	slli	r3,r3,8
   20a44:	1a06b03a 	or	r3,r3,r8
   20a48:	18ffffcc 	andi	r3,r3,65535
   20a4c:	18e0001c 	xori	r3,r3,32768
   20a50:	18e00004 	addi	r3,r3,-32768
   20a54:	003fdd06 	br	209cc <_gp+0xfffe3bac>
   20a58:	30c00003 	ldbu	r3,0(r6)
   20a5c:	30800044 	addi	r2,r6,1
   20a60:	003fda06 	br	209cc <_gp+0xfffe3bac>
   20a64:	3017883a 	mov	r11,r6
   20a68:	0007883a 	mov	r3,zero
   20a6c:	0013883a 	mov	r9,zero
   20a70:	5a800003 	ldbu	r10,0(r11)
   20a74:	58800044 	addi	r2,r11,1
   20a78:	1017883a 	mov	r11,r2
   20a7c:	52001fcc 	andi	r8,r10,127
   20a80:	4250983a 	sll	r8,r8,r9
   20a84:	53003fcc 	andi	r12,r10,255
   20a88:	6300201c 	xori	r12,r12,128
   20a8c:	633fe004 	addi	r12,r12,-128
   20a90:	1a06b03a 	or	r3,r3,r8
   20a94:	4a4001c4 	addi	r9,r9,7
   20a98:	603ff516 	blt	r12,zero,20a70 <_gp+0xfffe3c50>
   20a9c:	020007c4 	movi	r8,31
   20aa0:	427fca36 	bltu	r8,r9,209cc <_gp+0xfffe3bac>
   20aa4:	5280100c 	andi	r10,r10,64
   20aa8:	503fc826 	beq	r10,zero,209cc <_gp+0xfffe3bac>
   20aac:	023fffc4 	movi	r8,-1
   20ab0:	4252983a 	sll	r9,r8,r9
   20ab4:	1a46b03a 	or	r3,r3,r9
   20ab8:	003fc506 	br	209d0 <_gp+0xfffe3bb0>
   20abc:	3017883a 	mov	r11,r6
   20ac0:	0007883a 	mov	r3,zero
   20ac4:	0015883a 	mov	r10,zero
   20ac8:	5a000003 	ldbu	r8,0(r11)
   20acc:	58800044 	addi	r2,r11,1
   20ad0:	1017883a 	mov	r11,r2
   20ad4:	42401fcc 	andi	r9,r8,127
   20ad8:	4a92983a 	sll	r9,r9,r10
   20adc:	42003fcc 	andi	r8,r8,255
   20ae0:	4200201c 	xori	r8,r8,128
   20ae4:	423fe004 	addi	r8,r8,-128
   20ae8:	1a46b03a 	or	r3,r3,r9
   20aec:	528001c4 	addi	r10,r10,7
   20af0:	403ff516 	blt	r8,zero,20ac8 <_gp+0xfffe3ca8>
   20af4:	003fb506 	br	209cc <_gp+0xfffe3bac>
   20af8:	30c00043 	ldbu	r3,1(r6)
   20afc:	32000003 	ldbu	r8,0(r6)
   20b00:	30800084 	addi	r2,r6,2
   20b04:	1806923a 	slli	r3,r3,8
   20b08:	1a06b03a 	or	r3,r3,r8
   20b0c:	003faf06 	br	209cc <_gp+0xfffe3bac>
   20b10:	0022b580 	call	22b58 <abort>
   20b14:	308000c4 	addi	r2,r6,3
   20b18:	00ffff04 	movi	r3,-4
   20b1c:	10c4703a 	and	r2,r2,r3
   20b20:	10c00017 	ldw	r3,0(r2)
   20b24:	10800104 	addi	r2,r2,4
   20b28:	38c00015 	stw	r3,0(r7)
   20b2c:	dfc00017 	ldw	ra,0(sp)
   20b30:	dec00104 	addi	sp,sp,4
   20b34:	f800283a 	ret
   20b38:	300b883a 	mov	r5,r6
   20b3c:	003fa706 	br	209dc <_gp+0xfffe3bbc>

00020b40 <_ZL15get_ttype_entryP16lsda_header_infom>:
   20b40:	defffc04 	addi	sp,sp,-16
   20b44:	dfc00315 	stw	ra,12(sp)
   20b48:	dc400215 	stw	r17,8(sp)
   20b4c:	dc000115 	stw	r16,4(sp)
   20b50:	2021883a 	mov	r16,r4
   20b54:	21000503 	ldbu	r4,20(r4)
   20b58:	2823883a 	mov	r17,r5
   20b5c:	00208900 	call	20890 <_ZL21size_of_encoded_valueh>
   20b60:	1445383a 	mul	r2,r2,r17
   20b64:	81800317 	ldw	r6,12(r16)
   20b68:	81400217 	ldw	r5,8(r16)
   20b6c:	81000503 	ldbu	r4,20(r16)
   20b70:	d80f883a 	mov	r7,sp
   20b74:	308dc83a 	sub	r6,r6,r2
   20b78:	00209340 	call	20934 <_ZL28read_encoded_value_with_basehjPKhPj>
   20b7c:	d8800017 	ldw	r2,0(sp)
   20b80:	dfc00317 	ldw	ra,12(sp)
   20b84:	dc400217 	ldw	r17,8(sp)
   20b88:	dc000117 	ldw	r16,4(sp)
   20b8c:	dec00404 	addi	sp,sp,16
   20b90:	f800283a 	ret

00020b94 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
   20b94:	deffff04 	addi	sp,sp,-4
   20b98:	dfc00015 	stw	ra,0(sp)
   20b9c:	20c03fcc 	andi	r3,r4,255
   20ba0:	00803fc4 	movi	r2,255
   20ba4:	18800e26 	beq	r3,r2,20be0 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4c>
   20ba8:	20801c0c 	andi	r2,r4,112
   20bac:	00c00804 	movi	r3,32
   20bb0:	10c01726 	beq	r2,r3,20c10 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x7c>
   20bb4:	18800e2e 	bgeu	r3,r2,20bf0 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x5c>
   20bb8:	00c01004 	movi	r3,64
   20bbc:	10c01026 	beq	r2,r3,20c00 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x6c>
   20bc0:	00c01404 	movi	r3,80
   20bc4:	10c00626 	beq	r2,r3,20be0 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4c>
   20bc8:	00c00c04 	movi	r3,48
   20bcc:	10c00b1e 	bne	r2,r3,20bfc <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x68>
   20bd0:	2809883a 	mov	r4,r5
   20bd4:	dfc00017 	ldw	ra,0(sp)
   20bd8:	dec00104 	addi	sp,sp,4
   20bdc:	00229181 	jmpi	22918 <_Unwind_GetDataRelBase>
   20be0:	0005883a 	mov	r2,zero
   20be4:	dfc00017 	ldw	ra,0(sp)
   20be8:	dec00104 	addi	sp,sp,4
   20bec:	f800283a 	ret
   20bf0:	103ffb26 	beq	r2,zero,20be0 <_gp+0xfffe3dc0>
   20bf4:	00c00404 	movi	r3,16
   20bf8:	10fff926 	beq	r2,r3,20be0 <_gp+0xfffe3dc0>
   20bfc:	0022b580 	call	22b58 <abort>
   20c00:	2809883a 	mov	r4,r5
   20c04:	dfc00017 	ldw	ra,0(sp)
   20c08:	dec00104 	addi	sp,sp,4
   20c0c:	00229081 	jmpi	22908 <_Unwind_GetRegionStart>
   20c10:	2809883a 	mov	r4,r5
   20c14:	dfc00017 	ldw	ra,0(sp)
   20c18:	dec00104 	addi	sp,sp,4
   20c1c:	00229201 	jmpi	22920 <_Unwind_GetTextRelBase>

00020c20 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
   20c20:	defffb04 	addi	sp,sp,-20
   20c24:	dcc00315 	stw	r19,12(sp)
   20c28:	dc400115 	stw	r17,4(sp)
   20c2c:	dc000015 	stw	r16,0(sp)
   20c30:	dfc00415 	stw	ra,16(sp)
   20c34:	dc800215 	stw	r18,8(sp)
   20c38:	2027883a 	mov	r19,r4
   20c3c:	2821883a 	mov	r16,r5
   20c40:	3023883a 	mov	r17,r6
   20c44:	20003f26 	beq	r4,zero,20d44 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x124>
   20c48:	00229080 	call	22908 <_Unwind_GetRegionStart>
   20c4c:	88800015 	stw	r2,0(r17)
   20c50:	84800003 	ldbu	r18,0(r16)
   20c54:	00c03fc4 	movi	r3,255
   20c58:	84000044 	addi	r16,r16,1
   20c5c:	90c03726 	beq	r18,r3,20d3c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x11c>
   20c60:	980b883a 	mov	r5,r19
   20c64:	9009883a 	mov	r4,r18
   20c68:	0020b940 	call	20b94 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   20c6c:	800d883a 	mov	r6,r16
   20c70:	89c00104 	addi	r7,r17,4
   20c74:	100b883a 	mov	r5,r2
   20c78:	9009883a 	mov	r4,r18
   20c7c:	00209340 	call	20934 <_ZL28read_encoded_value_with_basehjPKhPj>
   20c80:	1021883a 	mov	r16,r2
   20c84:	80c00003 	ldbu	r3,0(r16)
   20c88:	01003fc4 	movi	r4,255
   20c8c:	80800044 	addi	r2,r16,1
   20c90:	88c00505 	stb	r3,20(r17)
   20c94:	18c03fcc 	andi	r3,r3,255
   20c98:	19002c26 	beq	r3,r4,20d4c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x12c>
   20c9c:	100f883a 	mov	r7,r2
   20ca0:	000d883a 	mov	r6,zero
   20ca4:	000b883a 	mov	r5,zero
   20ca8:	38c00003 	ldbu	r3,0(r7)
   20cac:	10800044 	addi	r2,r2,1
   20cb0:	100f883a 	mov	r7,r2
   20cb4:	19001fcc 	andi	r4,r3,127
   20cb8:	2148983a 	sll	r4,r4,r5
   20cbc:	18c03fcc 	andi	r3,r3,255
   20cc0:	18c0201c 	xori	r3,r3,128
   20cc4:	18ffe004 	addi	r3,r3,-128
   20cc8:	310cb03a 	or	r6,r6,r4
   20ccc:	294001c4 	addi	r5,r5,7
   20cd0:	183ff516 	blt	r3,zero,20ca8 <_gp+0xfffe3e88>
   20cd4:	118d883a 	add	r6,r2,r6
   20cd8:	89800315 	stw	r6,12(r17)
   20cdc:	10c00003 	ldbu	r3,0(r2)
   20ce0:	000d883a 	mov	r6,zero
   20ce4:	10800044 	addi	r2,r2,1
   20ce8:	88c00545 	stb	r3,21(r17)
   20cec:	000b883a 	mov	r5,zero
   20cf0:	10c00003 	ldbu	r3,0(r2)
   20cf4:	10800044 	addi	r2,r2,1
   20cf8:	19001fcc 	andi	r4,r3,127
   20cfc:	2148983a 	sll	r4,r4,r5
   20d00:	18c03fcc 	andi	r3,r3,255
   20d04:	18c0201c 	xori	r3,r3,128
   20d08:	18ffe004 	addi	r3,r3,-128
   20d0c:	310cb03a 	or	r6,r6,r4
   20d10:	294001c4 	addi	r5,r5,7
   20d14:	183ff616 	blt	r3,zero,20cf0 <_gp+0xfffe3ed0>
   20d18:	118d883a 	add	r6,r2,r6
   20d1c:	89800415 	stw	r6,16(r17)
   20d20:	dfc00417 	ldw	ra,16(sp)
   20d24:	dcc00317 	ldw	r19,12(sp)
   20d28:	dc800217 	ldw	r18,8(sp)
   20d2c:	dc400117 	ldw	r17,4(sp)
   20d30:	dc000017 	ldw	r16,0(sp)
   20d34:	dec00504 	addi	sp,sp,20
   20d38:	f800283a 	ret
   20d3c:	88800115 	stw	r2,4(r17)
   20d40:	003fd006 	br	20c84 <_gp+0xfffe3e64>
   20d44:	0005883a 	mov	r2,zero
   20d48:	003fc006 	br	20c4c <_gp+0xfffe3e2c>
   20d4c:	88000315 	stw	zero,12(r17)
   20d50:	003fe206 	br	20cdc <_gp+0xfffe3ebc>

00020d54 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>:
   20d54:	28800017 	ldw	r2,0(r5)
   20d58:	30c00017 	ldw	r3,0(r6)
   20d5c:	defffb04 	addi	sp,sp,-20
   20d60:	10800217 	ldw	r2,8(r2)
   20d64:	dc400315 	stw	r17,12(sp)
   20d68:	dc000215 	stw	r16,8(sp)
   20d6c:	d9400115 	stw	r5,4(sp)
   20d70:	dfc00415 	stw	ra,16(sp)
   20d74:	2021883a 	mov	r16,r4
   20d78:	d8c00015 	stw	r3,0(sp)
   20d7c:	2809883a 	mov	r4,r5
   20d80:	3023883a 	mov	r17,r6
   20d84:	103ee83a 	callr	r2
   20d88:	10803fcc 	andi	r2,r2,255
   20d8c:	d9400117 	ldw	r5,4(sp)
   20d90:	10000326 	beq	r2,zero,20da0 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x4c>
   20d94:	d8800017 	ldw	r2,0(sp)
   20d98:	10800017 	ldw	r2,0(r2)
   20d9c:	d8800015 	stw	r2,0(sp)
   20da0:	80800017 	ldw	r2,0(r16)
   20da4:	01c00044 	movi	r7,1
   20da8:	d80d883a 	mov	r6,sp
   20dac:	10800417 	ldw	r2,16(r2)
   20db0:	8009883a 	mov	r4,r16
   20db4:	103ee83a 	callr	r2
   20db8:	10c03fcc 	andi	r3,r2,255
   20dbc:	18000226 	beq	r3,zero,20dc8 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x74>
   20dc0:	d8c00017 	ldw	r3,0(sp)
   20dc4:	88c00015 	stw	r3,0(r17)
   20dc8:	dfc00417 	ldw	ra,16(sp)
   20dcc:	dc400317 	ldw	r17,12(sp)
   20dd0:	dc000217 	ldw	r16,8(sp)
   20dd4:	dec00504 	addi	sp,sp,20
   20dd8:	f800283a 	ret

00020ddc <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>:
   20ddc:	defff604 	addi	sp,sp,-40
   20de0:	dc000415 	stw	r16,16(sp)
   20de4:	3821d23a 	srai	r16,r7,8
   20de8:	dc800615 	stw	r18,24(sp)
   20dec:	dc400515 	stw	r17,20(sp)
   20df0:	dfc00915 	stw	ra,36(sp)
   20df4:	dd000815 	stw	r20,32(sp)
   20df8:	dcc00715 	stw	r19,28(sp)
   20dfc:	d9400215 	stw	r5,8(sp)
   20e00:	3825883a 	mov	r18,r7
   20e04:	2023883a 	mov	r17,r4
   20e08:	8000010e 	bge	r16,zero,20e10 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x34>
   20e0c:	0421c83a 	sub	r16,zero,r16
   20e10:	000b883a 	mov	r5,zero
   20e14:	01000144 	movi	r4,5
   20e18:	d9800315 	stw	r6,12(sp)
   20e1c:	0020b940 	call	20b94 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   20e20:	d9800317 	ldw	r6,12(sp)
   20e24:	d9c00104 	addi	r7,sp,4
   20e28:	100b883a 	mov	r5,r2
   20e2c:	01000144 	movi	r4,5
   20e30:	00209340 	call	20934 <_ZL28read_encoded_value_with_basehjPKhPj>
   20e34:	11fffe64 	muli	r7,r2,-7
   20e38:	0007883a 	mov	r3,zero
   20e3c:	11400003 	ldbu	r5,0(r2)
   20e40:	110001e4 	muli	r4,r2,7
   20e44:	10800044 	addi	r2,r2,1
   20e48:	29801fcc 	andi	r6,r5,127
   20e4c:	21c9883a 	add	r4,r4,r7
   20e50:	3108983a 	sll	r4,r6,r4
   20e54:	29403fcc 	andi	r5,r5,255
   20e58:	2940201c 	xori	r5,r5,128
   20e5c:	297fe004 	addi	r5,r5,-128
   20e60:	1906b03a 	or	r3,r3,r4
   20e64:	283ff516 	blt	r5,zero,20e3c <_gp+0xfffe401c>
   20e68:	10c5883a 	add	r2,r2,r3
   20e6c:	11fffe64 	muli	r7,r2,-7
   20e70:	0009883a 	mov	r4,zero
   20e74:	11400003 	ldbu	r5,0(r2)
   20e78:	10c001e4 	muli	r3,r2,7
   20e7c:	10800044 	addi	r2,r2,1
   20e80:	29801fcc 	andi	r6,r5,127
   20e84:	19c7883a 	add	r3,r3,r7
   20e88:	30c6983a 	sll	r3,r6,r3
   20e8c:	29403fcc 	andi	r5,r5,255
   20e90:	2940201c 	xori	r5,r5,128
   20e94:	297fe004 	addi	r5,r5,-128
   20e98:	20c8b03a 	or	r4,r4,r3
   20e9c:	283ff516 	blt	r5,zero,20e74 <_gp+0xfffe4054>
   20ea0:	80c03fcc 	andi	r3,r16,255
   20ea4:	18ffffc4 	addi	r3,r3,-1
   20ea8:	10c7883a 	add	r3,r2,r3
   20eac:	210000c4 	addi	r4,r4,3
   20eb0:	197ffe64 	muli	r5,r3,-7
   20eb4:	2085883a 	add	r2,r4,r2
   20eb8:	04ffff04 	movi	r19,-4
   20ebc:	14e6703a 	and	r19,r2,r19
   20ec0:	0021883a 	mov	r16,zero
   20ec4:	18800003 	ldbu	r2,0(r3)
   20ec8:	190001e4 	muli	r4,r3,7
   20ecc:	1d000044 	addi	r20,r3,1
   20ed0:	10c01fcc 	andi	r3,r2,127
   20ed4:	2149883a 	add	r4,r4,r5
   20ed8:	1908983a 	sll	r4,r3,r4
   20edc:	10803fcc 	andi	r2,r2,255
   20ee0:	1080201c 	xori	r2,r2,128
   20ee4:	10bfe004 	addi	r2,r2,-128
   20ee8:	a007883a 	mov	r3,r20
   20eec:	8120b03a 	or	r16,r16,r4
   20ef0:	103ff416 	blt	r2,zero,20ec4 <_gp+0xfffe40a4>
   20ef4:	94803fcc 	andi	r18,r18,255
   20ef8:	80001f26 	beq	r16,zero,20f78 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x19c>
   20efc:	9009883a 	mov	r4,r18
   20f00:	00208900 	call	20890 <_ZL21size_of_encoded_valueh>
   20f04:	81bfffc4 	addi	r6,r16,-1
   20f08:	308d383a 	mul	r6,r6,r2
   20f0c:	d9400a17 	ldw	r5,40(sp)
   20f10:	d80f883a 	mov	r7,sp
   20f14:	9009883a 	mov	r4,r18
   20f18:	34cd883a 	add	r6,r6,r19
   20f1c:	00209340 	call	20934 <_ZL28read_encoded_value_with_basehjPKhPj>
   20f20:	d9000017 	ldw	r4,0(sp)
   20f24:	d9800204 	addi	r6,sp,8
   20f28:	880b883a 	mov	r5,r17
   20f2c:	0020d540 	call	20d54 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
   20f30:	10c03fcc 	andi	r3,r2,255
   20f34:	1800111e 	bne	r3,zero,20f7c <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x1a0>
   20f38:	a17ffe64 	muli	r5,r20,-7
   20f3c:	a007883a 	mov	r3,r20
   20f40:	0021883a 	mov	r16,zero
   20f44:	19000003 	ldbu	r4,0(r3)
   20f48:	18c001e4 	muli	r3,r3,7
   20f4c:	a5000044 	addi	r20,r20,1
   20f50:	20801fcc 	andi	r2,r4,127
   20f54:	1947883a 	add	r3,r3,r5
   20f58:	10c4983a 	sll	r2,r2,r3
   20f5c:	21003fcc 	andi	r4,r4,255
   20f60:	2100201c 	xori	r4,r4,128
   20f64:	213fe004 	addi	r4,r4,-128
   20f68:	a007883a 	mov	r3,r20
   20f6c:	80a0b03a 	or	r16,r16,r2
   20f70:	203ff416 	blt	r4,zero,20f44 <_gp+0xfffe4124>
   20f74:	003fe006 	br	20ef8 <_gp+0xfffe40d8>
   20f78:	0005883a 	mov	r2,zero
   20f7c:	dfc00917 	ldw	ra,36(sp)
   20f80:	dd000817 	ldw	r20,32(sp)
   20f84:	dcc00717 	ldw	r19,28(sp)
   20f88:	dc800617 	ldw	r18,24(sp)
   20f8c:	dc400517 	ldw	r17,20(sp)
   20f90:	dc000417 	ldw	r16,16(sp)
   20f94:	dec00a04 	addi	sp,sp,40
   20f98:	f800283a 	ret

00020f9c <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>:
   20f9c:	defffb04 	addi	sp,sp,-20
   20fa0:	dc000115 	stw	r16,4(sp)
   20fa4:	24000317 	ldw	r16,12(r4)
   20fa8:	01ce303a 	nor	r7,zero,r7
   20fac:	dc800315 	stw	r18,12(sp)
   20fb0:	dc400215 	stw	r17,8(sp)
   20fb4:	dfc00415 	stw	ra,16(sp)
   20fb8:	2023883a 	mov	r17,r4
   20fbc:	2825883a 	mov	r18,r5
   20fc0:	d9800015 	stw	r6,0(sp)
   20fc4:	81e1883a 	add	r16,r16,r7
   20fc8:	800d883a 	mov	r6,r16
   20fcc:	000b883a 	mov	r5,zero
   20fd0:	0009883a 	mov	r4,zero
   20fd4:	30800003 	ldbu	r2,0(r6)
   20fd8:	84000044 	addi	r16,r16,1
   20fdc:	800d883a 	mov	r6,r16
   20fe0:	10c01fcc 	andi	r3,r2,127
   20fe4:	1906983a 	sll	r3,r3,r4
   20fe8:	10803fcc 	andi	r2,r2,255
   20fec:	1080201c 	xori	r2,r2,128
   20ff0:	10bfe004 	addi	r2,r2,-128
   20ff4:	28cab03a 	or	r5,r5,r3
   20ff8:	210001c4 	addi	r4,r4,7
   20ffc:	103ff516 	blt	r2,zero,20fd4 <_gp+0xfffe41b4>
   21000:	28000e26 	beq	r5,zero,2103c <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xa0>
   21004:	8809883a 	mov	r4,r17
   21008:	0020b400 	call	20b40 <_ZL15get_ttype_entryP16lsda_header_infom>
   2100c:	d80d883a 	mov	r6,sp
   21010:	900b883a 	mov	r5,r18
   21014:	1009883a 	mov	r4,r2
   21018:	0020d540 	call	20d54 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
   2101c:	10c03fcc 	andi	r3,r2,255
   21020:	183fe926 	beq	r3,zero,20fc8 <_gp+0xfffe41a8>
   21024:	dfc00417 	ldw	ra,16(sp)
   21028:	dc800317 	ldw	r18,12(sp)
   2102c:	dc400217 	ldw	r17,8(sp)
   21030:	dc000117 	ldw	r16,4(sp)
   21034:	dec00504 	addi	sp,sp,20
   21038:	f800283a 	ret
   2103c:	0005883a 	mov	r2,zero
   21040:	003ff806 	br	21024 <_gp+0xfffe4204>

00021044 <__gxx_personality_sj0>:
   21044:	008000b4 	movhi	r2,2
   21048:	deffdd04 	addi	sp,sp,-140
   2104c:	10841104 	addi	r2,r2,4164
   21050:	d8800e15 	stw	r2,56(sp)
   21054:	008000f4 	movhi	r2,3
   21058:	108b3604 	addi	r2,r2,11480
   2105c:	d8800f15 	stw	r2,60(sp)
   21060:	008000b4 	movhi	r2,2
   21064:	10858704 	addi	r2,r2,5660
   21068:	d9001515 	stw	r4,84(sp)
   2106c:	d9000804 	addi	r4,sp,32
   21070:	d8801115 	stw	r2,68(sp)
   21074:	dfc02215 	stw	ra,136(sp)
   21078:	df002115 	stw	fp,132(sp)
   2107c:	dec01015 	stw	sp,64(sp)
   21080:	dec01215 	stw	sp,72(sp)
   21084:	d9401915 	stw	r5,100(sp)
   21088:	d9801615 	stw	r6,88(sp)
   2108c:	d9c01715 	stw	r7,92(sp)
   21090:	00228400 	call	22840 <_Unwind_SjLj_Register>
   21094:	d8c01517 	ldw	r3,84(sp)
   21098:	d8000715 	stw	zero,28(sp)
   2109c:	d8000615 	stw	zero,24(sp)
   210a0:	00800044 	movi	r2,1
   210a4:	18800926 	beq	r3,r2,210cc <__gxx_personality_sj0+0x88>
   210a8:	01c000c4 	movi	r7,3
   210ac:	d9c01515 	stw	r7,84(sp)
   210b0:	d9000804 	addi	r4,sp,32
   210b4:	00228580 	call	22858 <_Unwind_SjLj_Unregister>
   210b8:	d8801517 	ldw	r2,84(sp)
   210bc:	dfc02217 	ldw	ra,136(sp)
   210c0:	df002117 	ldw	fp,132(sp)
   210c4:	dec02304 	addi	sp,sp,140
   210c8:	f800283a 	ret
   210cc:	d9001617 	ldw	r4,88(sp)
   210d0:	00af3574 	movhi	r2,48341
   210d4:	d9c01717 	ldw	r7,92(sp)
   210d8:	10b54004 	addi	r2,r2,-11008
   210dc:	00ee2cb4 	movhi	r3,47282
   210e0:	2085883a 	add	r2,r4,r2
   210e4:	18eaaf04 	addi	r3,r3,-21828
   210e8:	d8801b15 	stw	r2,108(sp)
   210ec:	38c7883a 	add	r3,r7,r3
   210f0:	1105803a 	cmpltu	r2,r2,r4
   210f4:	10c7883a 	add	r3,r2,r3
   210f8:	d8c01c15 	stw	r3,112(sp)
   210fc:	d8c01917 	ldw	r3,100(sp)
   21100:	00800184 	movi	r2,6
   21104:	18805426 	beq	r3,r2,21258 <__gxx_personality_sj0+0x214>
   21108:	d9002417 	ldw	r4,144(sp)
   2110c:	00bfffc4 	movi	r2,-1
   21110:	d8800915 	stw	r2,36(sp)
   21114:	00228fc0 	call	228fc <_Unwind_GetLanguageSpecificData>
   21118:	d8801a15 	stw	r2,104(sp)
   2111c:	1000c926 	beq	r2,zero,21444 <__gxx_personality_sj0+0x400>
   21120:	d9002417 	ldw	r4,144(sp)
   21124:	d80d883a 	mov	r6,sp
   21128:	100b883a 	mov	r5,r2
   2112c:	0020c200 	call	20c20 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   21130:	d9402417 	ldw	r5,144(sp)
   21134:	d9000503 	ldbu	r4,20(sp)
   21138:	d8801515 	stw	r2,84(sp)
   2113c:	0020b940 	call	20b94 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   21140:	d9002417 	ldw	r4,144(sp)
   21144:	d9400604 	addi	r5,sp,24
   21148:	d8800215 	stw	r2,8(sp)
   2114c:	00228cc0 	call	228cc <_Unwind_GetIPInfo>
   21150:	d8c00617 	ldw	r3,24(sp)
   21154:	18006126 	beq	r3,zero,212dc <__gxx_personality_sj0+0x298>
   21158:	1000ba16 	blt	r2,zero,21444 <__gxx_personality_sj0+0x400>
   2115c:	10002f1e 	bne	r2,zero,2121c <__gxx_personality_sj0+0x1d8>
   21160:	d8001515 	stw	zero,84(sp)
   21164:	d8001f15 	stw	zero,124(sp)
   21168:	d8001815 	stw	zero,96(sp)
   2116c:	00c00044 	movi	r3,1
   21170:	d9001917 	ldw	r4,100(sp)
   21174:	2080004c 	andi	r2,r4,1
   21178:	1000b51e 	bne	r2,zero,21450 <__gxx_personality_sj0+0x40c>
   2117c:	d9001917 	ldw	r4,100(sp)
   21180:	2080020c 	andi	r2,r4,8
   21184:	1000b71e 	bne	r2,zero,21464 <__gxx_personality_sj0+0x420>
   21188:	d9c01c17 	ldw	r7,112(sp)
   2118c:	3800b826 	beq	r7,zero,21470 <__gxx_personality_sj0+0x42c>
   21190:	00800044 	movi	r2,1
   21194:	1880b526 	beq	r3,r2,2146c <__gxx_personality_sj0+0x428>
   21198:	d9c01517 	ldw	r7,84(sp)
   2119c:	3800f516 	blt	r7,zero,21574 <__gxx_personality_sj0+0x530>
   211a0:	d9002417 	ldw	r4,144(sp)
   211a4:	d9802317 	ldw	r6,140(sp)
   211a8:	00bfffc4 	movi	r2,-1
   211ac:	000b883a 	mov	r5,zero
   211b0:	d8800915 	stw	r2,36(sp)
   211b4:	00228a00 	call	228a0 <_Unwind_SetGR>
   211b8:	d9801517 	ldw	r6,84(sp)
   211bc:	d9002417 	ldw	r4,144(sp)
   211c0:	01400044 	movi	r5,1
   211c4:	00228a00 	call	228a0 <_Unwind_SetGR>
   211c8:	d9002417 	ldw	r4,144(sp)
   211cc:	d9401f17 	ldw	r5,124(sp)
   211d0:	00228ec0 	call	228ec <_Unwind_SetIP>
   211d4:	010001c4 	movi	r4,7
   211d8:	d9001515 	stw	r4,84(sp)
   211dc:	003fb406 	br	210b0 <_gp+0xfffe4290>
   211e0:	000f883a 	mov	r7,zero
   211e4:	000d883a 	mov	r6,zero
   211e8:	19000003 	ldbu	r4,0(r3)
   211ec:	18c00044 	addi	r3,r3,1
   211f0:	d8c01515 	stw	r3,84(sp)
   211f4:	21401fcc 	andi	r5,r4,127
   211f8:	298a983a 	sll	r5,r5,r6
   211fc:	21003fcc 	andi	r4,r4,255
   21200:	2100201c 	xori	r4,r4,128
   21204:	213fe004 	addi	r4,r4,-128
   21208:	394eb03a 	or	r7,r7,r5
   2120c:	318001c4 	addi	r6,r6,7
   21210:	203ff516 	blt	r4,zero,211e8 <_gp+0xfffe43c8>
   21214:	10bfffc4 	addi	r2,r2,-1
   21218:	10003226 	beq	r2,zero,212e4 <__gxx_personality_sj0+0x2a0>
   2121c:	d9c01517 	ldw	r7,84(sp)
   21220:	0011883a 	mov	r8,zero
   21224:	000d883a 	mov	r6,zero
   21228:	39000003 	ldbu	r4,0(r7)
   2122c:	38c00044 	addi	r3,r7,1
   21230:	180f883a 	mov	r7,r3
   21234:	21401fcc 	andi	r5,r4,127
   21238:	298a983a 	sll	r5,r5,r6
   2123c:	21003fcc 	andi	r4,r4,255
   21240:	2100201c 	xori	r4,r4,128
   21244:	213fe004 	addi	r4,r4,-128
   21248:	4150b03a 	or	r8,r8,r5
   2124c:	318001c4 	addi	r6,r6,7
   21250:	203ff516 	blt	r4,zero,21228 <_gp+0xfffe4408>
   21254:	003fe206 	br	211e0 <_gp+0xfffe43c0>
   21258:	d9001c17 	ldw	r4,112(sp)
   2125c:	203faa1e 	bne	r4,zero,21108 <_gp+0xfffe42e8>
   21260:	d9c01517 	ldw	r7,84(sp)
   21264:	d8801b17 	ldw	r2,108(sp)
   21268:	38bfa736 	bltu	r7,r2,21108 <_gp+0xfffe42e8>
   2126c:	d8c02317 	ldw	r3,140(sp)
   21270:	18fffe17 	ldw	r3,-8(r3)
   21274:	d8c01f15 	stw	r3,124(sp)
   21278:	18008226 	beq	r3,zero,21484 <__gxx_personality_sj0+0x440>
   2127c:	d9002317 	ldw	r4,140(sp)
   21280:	d9c02317 	ldw	r7,140(sp)
   21284:	213ffb17 	ldw	r4,-20(r4)
   21288:	39fffd17 	ldw	r7,-12(r7)
   2128c:	d9001515 	stw	r4,84(sp)
   21290:	d9c01a15 	stw	r7,104(sp)
   21294:	d8801517 	ldw	r2,84(sp)
   21298:	103fc10e 	bge	r2,zero,211a0 <_gp+0xfffe4380>
   2129c:	d9002417 	ldw	r4,144(sp)
   212a0:	d9401a17 	ldw	r5,104(sp)
   212a4:	d80d883a 	mov	r6,sp
   212a8:	00bfffc4 	movi	r2,-1
   212ac:	d8800915 	stw	r2,36(sp)
   212b0:	0020c200 	call	20c20 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   212b4:	d9402417 	ldw	r5,144(sp)
   212b8:	d9000503 	ldbu	r4,20(sp)
   212bc:	0020b940 	call	20b94 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   212c0:	d9000503 	ldbu	r4,20(sp)
   212c4:	d9402417 	ldw	r5,144(sp)
   212c8:	d8800215 	stw	r2,8(sp)
   212cc:	0020b940 	call	20b94 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   212d0:	d8c02317 	ldw	r3,140(sp)
   212d4:	18bffe15 	stw	r2,-8(r3)
   212d8:	003fb106 	br	211a0 <_gp+0xfffe4380>
   212dc:	10bfffc4 	addi	r2,r2,-1
   212e0:	003f9d06 	br	21158 <_gp+0xfffe4338>
   212e4:	42000044 	addi	r8,r8,1
   212e8:	da001f15 	stw	r8,124(sp)
   212ec:	38005326 	beq	r7,zero,2143c <__gxx_personality_sj0+0x3f8>
   212f0:	d8800417 	ldw	r2,16(sp)
   212f4:	39ffffc4 	addi	r7,r7,-1
   212f8:	11c5883a 	add	r2,r2,r7
   212fc:	d8801815 	stw	r2,96(sp)
   21300:	40005026 	beq	r8,zero,21444 <__gxx_personality_sj0+0x400>
   21304:	10007426 	beq	r2,zero,214d8 <__gxx_personality_sj0+0x494>
   21308:	d8801917 	ldw	r2,100(sp)
   2130c:	1080020c 	andi	r2,r2,8
   21310:	d8802015 	stw	r2,128(sp)
   21314:	1000a21e 	bne	r2,zero,215a0 <__gxx_personality_sj0+0x55c>
   21318:	d8c01c17 	ldw	r3,112(sp)
   2131c:	1800b026 	beq	r3,zero,215e0 <__gxx_personality_sj0+0x59c>
   21320:	01c000f4 	movhi	r7,3
   21324:	39d39004 	addi	r7,r7,20032
   21328:	d9c01e15 	stw	r7,120(sp)
   2132c:	d8001d05 	stb	zero,116(sp)
   21330:	d8c01817 	ldw	r3,96(sp)
   21334:	d8001515 	stw	zero,84(sp)
   21338:	0009883a 	mov	r4,zero
   2133c:	19400003 	ldbu	r5,0(r3)
   21340:	18800044 	addi	r2,r3,1
   21344:	d9c01517 	ldw	r7,84(sp)
   21348:	28c01fcc 	andi	r3,r5,127
   2134c:	1906983a 	sll	r3,r3,r4
   21350:	29803fcc 	andi	r6,r5,255
   21354:	3180201c 	xori	r6,r6,128
   21358:	38ceb03a 	or	r7,r7,r3
   2135c:	d8801715 	stw	r2,92(sp)
   21360:	31bfe004 	addi	r6,r6,-128
   21364:	d9c01515 	stw	r7,84(sp)
   21368:	210001c4 	addi	r4,r4,7
   2136c:	1007883a 	mov	r3,r2
   21370:	303ff216 	blt	r6,zero,2133c <_gp+0xfffe451c>
   21374:	00c007c4 	movi	r3,31
   21378:	19000836 	bltu	r3,r4,2139c <__gxx_personality_sj0+0x358>
   2137c:	2940100c 	andi	r5,r5,64
   21380:	28000626 	beq	r5,zero,2139c <__gxx_personality_sj0+0x358>
   21384:	01c00044 	movi	r7,1
   21388:	3908983a 	sll	r4,r7,r4
   2138c:	d8c01517 	ldw	r3,84(sp)
   21390:	0109c83a 	sub	r4,zero,r4
   21394:	1906b03a 	or	r3,r3,r4
   21398:	d8c01515 	stw	r3,84(sp)
   2139c:	d8001615 	stw	zero,88(sp)
   213a0:	0009883a 	mov	r4,zero
   213a4:	11400003 	ldbu	r5,0(r2)
   213a8:	d9c01617 	ldw	r7,88(sp)
   213ac:	10800044 	addi	r2,r2,1
   213b0:	28c01fcc 	andi	r3,r5,127
   213b4:	1906983a 	sll	r3,r3,r4
   213b8:	29803fcc 	andi	r6,r5,255
   213bc:	3180201c 	xori	r6,r6,128
   213c0:	38ceb03a 	or	r7,r7,r3
   213c4:	31bfe004 	addi	r6,r6,-128
   213c8:	d9c01615 	stw	r7,88(sp)
   213cc:	210001c4 	addi	r4,r4,7
   213d0:	303ff416 	blt	r6,zero,213a4 <_gp+0xfffe4584>
   213d4:	008007c4 	movi	r2,31
   213d8:	11000736 	bltu	r2,r4,213f8 <__gxx_personality_sj0+0x3b4>
   213dc:	2940100c 	andi	r5,r5,64
   213e0:	28000526 	beq	r5,zero,213f8 <__gxx_personality_sj0+0x3b4>
   213e4:	00c00044 	movi	r3,1
   213e8:	1908983a 	sll	r4,r3,r4
   213ec:	0109c83a 	sub	r4,zero,r4
   213f0:	390eb03a 	or	r7,r7,r4
   213f4:	d9c01615 	stw	r7,88(sp)
   213f8:	d9001517 	ldw	r4,84(sp)
   213fc:	20003c26 	beq	r4,zero,214f0 <__gxx_personality_sj0+0x4ac>
   21400:	01003e0e 	bge	zero,r4,214fc <__gxx_personality_sj0+0x4b8>
   21404:	01ffffc4 	movi	r7,-1
   21408:	200b883a 	mov	r5,r4
   2140c:	d809883a 	mov	r4,sp
   21410:	d9c00915 	stw	r7,36(sp)
   21414:	0020b400 	call	20b40 <_ZL15get_ttype_entryP16lsda_header_infom>
   21418:	10005f26 	beq	r2,zero,21598 <__gxx_personality_sj0+0x554>
   2141c:	d8c01e17 	ldw	r3,120(sp)
   21420:	1800571e 	bne	r3,zero,21580 <__gxx_personality_sj0+0x53c>
   21424:	d9001617 	ldw	r4,88(sp)
   21428:	20002926 	beq	r4,zero,214d0 <__gxx_personality_sj0+0x48c>
   2142c:	d9c01717 	ldw	r7,92(sp)
   21430:	390f883a 	add	r7,r7,r4
   21434:	d9c01815 	stw	r7,96(sp)
   21438:	003fbd06 	br	21330 <_gp+0xfffe4510>
   2143c:	d8c01f17 	ldw	r3,124(sp)
   21440:	1800251e 	bne	r3,zero,214d8 <__gxx_personality_sj0+0x494>
   21444:	01000204 	movi	r4,8
   21448:	d9001515 	stw	r4,84(sp)
   2144c:	003f1806 	br	210b0 <_gp+0xfffe4290>
   21450:	d8801c17 	ldw	r2,112(sp)
   21454:	10000d26 	beq	r2,zero,2148c <__gxx_personality_sj0+0x448>
   21458:	00800184 	movi	r2,6
   2145c:	d8801515 	stw	r2,84(sp)
   21460:	003f1306 	br	210b0 <_gp+0xfffe4290>
   21464:	00800044 	movi	r2,1
   21468:	18bf4d1e 	bne	r3,r2,211a0 <_gp+0xfffe4380>
   2146c:	0021ac40 	call	21ac4 <_ZSt9terminatev>
   21470:	d9001b17 	ldw	r4,108(sp)
   21474:	00800044 	movi	r2,1
   21478:	113f4536 	bltu	r2,r4,21190 <_gp+0xfffe4370>
   2147c:	00800044 	movi	r2,1
   21480:	18bf841e 	bne	r3,r2,21294 <_gp+0xfffe4474>
   21484:	d9002317 	ldw	r4,140(sp)
   21488:	00222800 	call	22280 <__cxa_call_terminate>
   2148c:	d8c01b17 	ldw	r3,108(sp)
   21490:	00800044 	movi	r2,1
   21494:	10fff036 	bltu	r2,r3,21458 <_gp+0xfffe4638>
   21498:	d9002317 	ldw	r4,140(sp)
   2149c:	d8801817 	ldw	r2,96(sp)
   214a0:	d9c01517 	ldw	r7,84(sp)
   214a4:	d8c01a17 	ldw	r3,104(sp)
   214a8:	20bffc15 	stw	r2,-16(r4)
   214ac:	d8800717 	ldw	r2,28(sp)
   214b0:	21fffb15 	stw	r7,-20(r4)
   214b4:	d9c01f17 	ldw	r7,124(sp)
   214b8:	20bfff15 	stw	r2,-4(r4)
   214bc:	00800184 	movi	r2,6
   214c0:	20fffd15 	stw	r3,-12(r4)
   214c4:	21fffe15 	stw	r7,-8(r4)
   214c8:	d8801515 	stw	r2,84(sp)
   214cc:	003ef806 	br	210b0 <_gp+0xfffe4290>
   214d0:	d8801d03 	ldbu	r2,116(sp)
   214d4:	103fdb26 	beq	r2,zero,21444 <_gp+0xfffe4624>
   214d8:	d8c01917 	ldw	r3,100(sp)
   214dc:	1880004c 	andi	r2,r3,1
   214e0:	103fd81e 	bne	r2,zero,21444 <_gp+0xfffe4624>
   214e4:	d8001515 	stw	zero,84(sp)
   214e8:	00c00084 	movi	r3,2
   214ec:	003f2306 	br	2117c <_gp+0xfffe435c>
   214f0:	00c00044 	movi	r3,1
   214f4:	d8c01d05 	stb	r3,116(sp)
   214f8:	003fca06 	br	21424 <_gp+0xfffe4604>
   214fc:	d9001e17 	ldw	r4,120(sp)
   21500:	20000426 	beq	r4,zero,21514 <__gxx_personality_sj0+0x4d0>
   21504:	d9c02017 	ldw	r7,128(sp)
   21508:	3800021e 	bne	r7,zero,21514 <__gxx_personality_sj0+0x4d0>
   2150c:	d8801c17 	ldw	r2,112(sp)
   21510:	10002726 	beq	r2,zero,215b0 <__gxx_personality_sj0+0x56c>
   21514:	d8801517 	ldw	r2,84(sp)
   21518:	000d883a 	mov	r6,zero
   2151c:	000b883a 	mov	r5,zero
   21520:	0088303a 	nor	r4,zero,r2
   21524:	d8800317 	ldw	r2,12(sp)
   21528:	1109883a 	add	r4,r2,r4
   2152c:	20800003 	ldbu	r2,0(r4)
   21530:	21000044 	addi	r4,r4,1
   21534:	10c01fcc 	andi	r3,r2,127
   21538:	1946983a 	sll	r3,r3,r5
   2153c:	10803fcc 	andi	r2,r2,255
   21540:	1080201c 	xori	r2,r2,128
   21544:	10bfe004 	addi	r2,r2,-128
   21548:	30ccb03a 	or	r6,r6,r3
   2154c:	294001c4 	addi	r5,r5,7
   21550:	103ff616 	blt	r2,zero,2152c <_gp+0xfffe470c>
   21554:	3005003a 	cmpeq	r2,r6,zero
   21558:	10803fcc 	andi	r2,r2,255
   2155c:	103fb126 	beq	r2,zero,21424 <_gp+0xfffe4604>
   21560:	d9c01917 	ldw	r7,100(sp)
   21564:	3880004c 	andi	r2,r7,1
   21568:	103fb91e 	bne	r2,zero,21450 <_gp+0xfffe4630>
   2156c:	d8802017 	ldw	r2,128(sp)
   21570:	10002d26 	beq	r2,zero,21628 <__gxx_personality_sj0+0x5e4>
   21574:	00800044 	movi	r2,1
   21578:	d8800915 	stw	r2,36(sp)
   2157c:	0021aec0 	call	21aec <_ZSt10unexpectedv>
   21580:	d9800704 	addi	r6,sp,28
   21584:	180b883a 	mov	r5,r3
   21588:	1009883a 	mov	r4,r2
   2158c:	0020d540 	call	20d54 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
   21590:	10803fcc 	andi	r2,r2,255
   21594:	103fa326 	beq	r2,zero,21424 <_gp+0xfffe4604>
   21598:	00c000c4 	movi	r3,3
   2159c:	003ef406 	br	21170 <_gp+0xfffe4350>
   215a0:	010000f4 	movhi	r4,3
   215a4:	21138e04 	addi	r4,r4,20024
   215a8:	d9001e15 	stw	r4,120(sp)
   215ac:	003f5f06 	br	2132c <_gp+0xfffe450c>
   215b0:	d9001b17 	ldw	r4,108(sp)
   215b4:	00c00044 	movi	r3,1
   215b8:	193fd636 	bltu	r3,r4,21514 <_gp+0xfffe46f4>
   215bc:	01ffffc4 	movi	r7,-1
   215c0:	d9c00915 	stw	r7,36(sp)
   215c4:	d9800717 	ldw	r6,28(sp)
   215c8:	d9c01517 	ldw	r7,84(sp)
   215cc:	d9401e17 	ldw	r5,120(sp)
   215d0:	d809883a 	mov	r4,sp
   215d4:	0020f9c0 	call	20f9c <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
   215d8:	1080005c 	xori	r2,r2,1
   215dc:	003fde06 	br	21558 <_gp+0xfffe4738>
   215e0:	d9001b17 	ldw	r4,108(sp)
   215e4:	00800044 	movi	r2,1
   215e8:	113f4d36 	bltu	r2,r4,21320 <_gp+0xfffe4500>
   215ec:	d9c02317 	ldw	r7,140(sp)
   215f0:	38800017 	ldw	r2,0(r7)
   215f4:	1080004c 	andi	r2,r2,1
   215f8:	1000061e 	bne	r2,zero,21614 <__gxx_personality_sj0+0x5d0>
   215fc:	d8c02317 	ldw	r3,140(sp)
   21600:	18800504 	addi	r2,r3,20
   21604:	d8800715 	stw	r2,28(sp)
   21608:	10bff017 	ldw	r2,-64(r2)
   2160c:	d8801e15 	stw	r2,120(sp)
   21610:	003f4606 	br	2132c <_gp+0xfffe450c>
   21614:	38bff517 	ldw	r2,-44(r7)
   21618:	003ffa06 	br	21604 <_gp+0xfffe47e4>
   2161c:	d9000a17 	ldw	r4,40(sp)
   21620:	002187c0 	call	2187c <__cxa_begin_catch>
   21624:	003f9106 	br	2146c <_gp+0xfffe464c>
   21628:	d9c01c17 	ldw	r7,112(sp)
   2162c:	383eda1e 	bne	r7,zero,21198 <_gp+0xfffe4378>
   21630:	d8c01b17 	ldw	r3,108(sp)
   21634:	00800044 	movi	r2,1
   21638:	10fed736 	bltu	r2,r3,21198 <_gp+0xfffe4378>
   2163c:	00c000c4 	movi	r3,3
   21640:	003f8e06 	br	2147c <_gp+0xfffe465c>

00021644 <__cxa_call_unexpected>:
   21644:	008000b4 	movhi	r2,2
   21648:	deffe604 	addi	sp,sp,-104
   2164c:	10841104 	addi	r2,r2,4164
   21650:	d8800d15 	stw	r2,52(sp)
   21654:	008000f4 	movhi	r2,3
   21658:	108b3a04 	addi	r2,r2,11496
   2165c:	d8800e15 	stw	r2,56(sp)
   21660:	d8800104 	addi	r2,sp,4
   21664:	d8800f15 	stw	r2,60(sp)
   21668:	008000b4 	movhi	r2,2
   2166c:	1085b404 	addi	r2,r2,5840
   21670:	d9001415 	stw	r4,80(sp)
   21674:	d9000704 	addi	r4,sp,28
   21678:	dfc01915 	stw	ra,100(sp)
   2167c:	d8801015 	stw	r2,64(sp)
   21680:	df001815 	stw	fp,96(sp)
   21684:	dec01115 	stw	sp,68(sp)
   21688:	00228400 	call	22840 <_Unwind_SjLj_Register>
   2168c:	d9001417 	ldw	r4,80(sp)
   21690:	002187c0 	call	2187c <__cxa_begin_catch>
   21694:	d8c01417 	ldw	r3,80(sp)
   21698:	18bffe17 	ldw	r2,-8(r3)
   2169c:	193ff717 	ldw	r4,-36(r3)
   216a0:	18fffd17 	ldw	r3,-12(r3)
   216a4:	d8800315 	stw	r2,12(sp)
   216a8:	d8c01615 	stw	r3,88(sp)
   216ac:	d8c01417 	ldw	r3,80(sp)
   216b0:	18fffb17 	ldw	r3,-20(r3)
   216b4:	d8c01515 	stw	r3,84(sp)
   216b8:	d8c01417 	ldw	r3,80(sp)
   216bc:	18fff817 	ldw	r3,-32(r3)
   216c0:	d8c01415 	stw	r3,80(sp)
   216c4:	00c00044 	movi	r3,1
   216c8:	d8c00815 	stw	r3,32(sp)
   216cc:	0021adc0 	call	21adc <_ZN10__cxxabiv112__unexpectedEPFvvE>
   216d0:	d8c00917 	ldw	r3,36(sp)
   216d4:	d8800817 	ldw	r2,32(sp)
   216d8:	d8c01715 	stw	r3,92(sp)
   216dc:	10000a26 	beq	r2,zero,21708 <__cxa_call_unexpected+0xc4>
   216e0:	10bfffc4 	addi	r2,r2,-1
   216e4:	10000126 	beq	r2,zero,216ec <__cxa_call_unexpected+0xa8>
   216e8:	003b68fa 	trap	3
   216ec:	d8000815 	stw	zero,32(sp)
   216f0:	00219300 	call	21930 <__cxa_end_catch>
   216f4:	00219300 	call	21930 <__cxa_end_catch>
   216f8:	d9001717 	ldw	r4,92(sp)
   216fc:	00bfffc4 	movi	r2,-1
   21700:	d8800815 	stw	r2,32(sp)
   21704:	0022a3c0 	call	22a3c <_Unwind_SjLj_Resume>
   21708:	d9001717 	ldw	r4,92(sp)
   2170c:	002187c0 	call	2187c <__cxa_begin_catch>
   21710:	0021b4c0 	call	21b4c <__cxa_get_globals_fast>
   21714:	10800017 	ldw	r2,0(r2)
   21718:	10c00b17 	ldw	r3,44(r2)
   2171c:	18c0004c 	andi	r3,r3,1
   21720:	18001e26 	beq	r3,zero,2179c <__cxa_call_unexpected+0x158>
   21724:	10800017 	ldw	r2,0(r2)
   21728:	d8801715 	stw	r2,92(sp)
   2172c:	d8801517 	ldw	r2,84(sp)
   21730:	00802b0e 	bge	zero,r2,217e0 <__cxa_call_unexpected+0x19c>
   21734:	d8c01717 	ldw	r3,92(sp)
   21738:	d8800317 	ldw	r2,12(sp)
   2173c:	d9c01517 	ldw	r7,84(sp)
   21740:	193ff017 	ldw	r4,-64(r3)
   21744:	d9801617 	ldw	r6,88(sp)
   21748:	d8800015 	stw	r2,0(sp)
   2174c:	180b883a 	mov	r5,r3
   21750:	00800084 	movi	r2,2
   21754:	d8800815 	stw	r2,32(sp)
   21758:	0020ddc0 	call	20ddc <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
   2175c:	10803fcc 	andi	r2,r2,255
   21760:	10001e1e 	bne	r2,zero,217dc <__cxa_call_unexpected+0x198>
   21764:	d8800317 	ldw	r2,12(sp)
   21768:	d9c01517 	ldw	r7,84(sp)
   2176c:	d9801617 	ldw	r6,88(sp)
   21770:	010000f4 	movhi	r4,3
   21774:	d8800015 	stw	r2,0(sp)
   21778:	210b8d04 	addi	r4,r4,11828
   2177c:	00800084 	movi	r2,2
   21780:	000b883a 	mov	r5,zero
   21784:	d8800815 	stw	r2,32(sp)
   21788:	0020ddc0 	call	20ddc <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
   2178c:	10803fcc 	andi	r2,r2,255
   21790:	1000051e 	bne	r2,zero,217a8 <__cxa_call_unexpected+0x164>
   21794:	d9001417 	ldw	r4,80(sp)
   21798:	0021a040 	call	21a04 <_ZN10__cxxabiv111__terminateEPFvvE>
   2179c:	10801004 	addi	r2,r2,64
   217a0:	d8801715 	stw	r2,92(sp)
   217a4:	003fe106 	br	2172c <_gp+0xfffe490c>
   217a8:	01000104 	movi	r4,4
   217ac:	0021cc40 	call	21cc4 <__cxa_allocate_exception>
   217b0:	00c000f4 	movhi	r3,3
   217b4:	18cba804 	addi	r3,r3,11936
   217b8:	018000b4 	movhi	r6,2
   217bc:	014000f4 	movhi	r5,3
   217c0:	10c00015 	stw	r3,0(r2)
   217c4:	31883d04 	addi	r6,r6,8436
   217c8:	00c00084 	movi	r3,2
   217cc:	294b8d04 	addi	r5,r5,11828
   217d0:	1009883a 	mov	r4,r2
   217d4:	d8c00815 	stw	r3,32(sp)
   217d8:	002216c0 	call	2216c <__cxa_throw>
   217dc:	00221fc0 	call	221fc <__cxa_rethrow>
   217e0:	d9401617 	ldw	r5,88(sp)
   217e4:	00800084 	movi	r2,2
   217e8:	d9800104 	addi	r6,sp,4
   217ec:	0009883a 	mov	r4,zero
   217f0:	d8800815 	stw	r2,32(sp)
   217f4:	0020c200 	call	20c20 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   217f8:	d9801717 	ldw	r6,92(sp)
   217fc:	d9c01517 	ldw	r7,84(sp)
   21800:	d9000104 	addi	r4,sp,4
   21804:	317ff017 	ldw	r5,-64(r6)
   21808:	0020f9c0 	call	20f9c <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
   2180c:	10803fcc 	andi	r2,r2,255
   21810:	1000171e 	bne	r2,zero,21870 <__cxa_call_unexpected+0x22c>
   21814:	d9c01517 	ldw	r7,84(sp)
   21818:	014000f4 	movhi	r5,3
   2181c:	00800084 	movi	r2,2
   21820:	294b8d04 	addi	r5,r5,11828
   21824:	000d883a 	mov	r6,zero
   21828:	d9000104 	addi	r4,sp,4
   2182c:	d8800815 	stw	r2,32(sp)
   21830:	0020f9c0 	call	20f9c <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
   21834:	10803fcc 	andi	r2,r2,255
   21838:	103fd626 	beq	r2,zero,21794 <_gp+0xfffe4974>
   2183c:	01000104 	movi	r4,4
   21840:	0021cc40 	call	21cc4 <__cxa_allocate_exception>
   21844:	00c000f4 	movhi	r3,3
   21848:	18cba804 	addi	r3,r3,11936
   2184c:	018000b4 	movhi	r6,2
   21850:	014000f4 	movhi	r5,3
   21854:	10c00015 	stw	r3,0(r2)
   21858:	31883d04 	addi	r6,r6,8436
   2185c:	00c00084 	movi	r3,2
   21860:	294b8d04 	addi	r5,r5,11828
   21864:	1009883a 	mov	r4,r2
   21868:	d8c00815 	stw	r3,32(sp)
   2186c:	002216c0 	call	2216c <__cxa_throw>
   21870:	00221fc0 	call	221fc <__cxa_rethrow>

00021874 <__cxa_get_exception_ptr>:
   21874:	20bfff17 	ldw	r2,-4(r4)
   21878:	f800283a 	ret

0002187c <__cxa_begin_catch>:
   2187c:	defffe04 	addi	sp,sp,-8
   21880:	dc000015 	stw	r16,0(sp)
   21884:	dfc00115 	stw	ra,4(sp)
   21888:	2021883a 	mov	r16,r4
   2188c:	0021b580 	call	21b58 <__cxa_get_globals>
   21890:	81000017 	ldw	r4,0(r16)
   21894:	80c00117 	ldw	r3,4(r16)
   21898:	01af3574 	movhi	r6,48341
   2189c:	31b54004 	addi	r6,r6,-11008
   218a0:	016e2cb4 	movhi	r5,47282
   218a4:	296aaf04 	addi	r5,r5,-21828
   218a8:	218d883a 	add	r6,r4,r6
   218ac:	3109803a 	cmpltu	r4,r6,r4
   218b0:	1947883a 	add	r3,r3,r5
   218b4:	20c7883a 	add	r3,r4,r3
   218b8:	817ff504 	addi	r5,r16,-44
   218bc:	11000017 	ldw	r4,0(r2)
   218c0:	18000726 	beq	r3,zero,218e0 <__cxa_begin_catch+0x64>
   218c4:	2000191e 	bne	r4,zero,2192c <__cxa_begin_catch+0xb0>
   218c8:	11400015 	stw	r5,0(r2)
   218cc:	0005883a 	mov	r2,zero
   218d0:	dfc00117 	ldw	ra,4(sp)
   218d4:	dc000017 	ldw	r16,0(sp)
   218d8:	dec00204 	addi	sp,sp,8
   218dc:	f800283a 	ret
   218e0:	01c00044 	movi	r7,1
   218e4:	39bff736 	bltu	r7,r6,218c4 <_gp+0xfffe4aa4>
   218e8:	80fffa17 	ldw	r3,-24(r16)
   218ec:	18000d16 	blt	r3,zero,21924 <__cxa_begin_catch+0xa8>
   218f0:	18c00044 	addi	r3,r3,1
   218f4:	11800117 	ldw	r6,4(r2)
   218f8:	80fffa15 	stw	r3,-24(r16)
   218fc:	30ffffc4 	addi	r3,r6,-1
   21900:	10c00115 	stw	r3,4(r2)
   21904:	21400226 	beq	r4,r5,21910 <__cxa_begin_catch+0x94>
   21908:	813ff915 	stw	r4,-28(r16)
   2190c:	11400015 	stw	r5,0(r2)
   21910:	80bfff17 	ldw	r2,-4(r16)
   21914:	dfc00117 	ldw	ra,4(sp)
   21918:	dc000017 	ldw	r16,0(sp)
   2191c:	dec00204 	addi	sp,sp,8
   21920:	f800283a 	ret
   21924:	38c7c83a 	sub	r3,r7,r3
   21928:	003ff206 	br	218f4 <_gp+0xfffe4ad4>
   2192c:	0021ac40 	call	21ac4 <_ZSt9terminatev>

00021930 <__cxa_end_catch>:
   21930:	deffff04 	addi	sp,sp,-4
   21934:	dfc00015 	stw	ra,0(sp)
   21938:	0021b4c0 	call	21b4c <__cxa_get_globals_fast>
   2193c:	11000017 	ldw	r4,0(r2)
   21940:	20001426 	beq	r4,zero,21994 <__cxa_end_catch+0x64>
   21944:	21400b17 	ldw	r5,44(r4)
   21948:	01ef3574 	movhi	r7,48341
   2194c:	39f54004 	addi	r7,r7,-11008
   21950:	29cf883a 	add	r7,r5,r7
   21954:	20c00c17 	ldw	r3,48(r4)
   21958:	394d803a 	cmpltu	r6,r7,r5
   2195c:	016e2cb4 	movhi	r5,47282
   21960:	296aaf04 	addi	r5,r5,-21828
   21964:	1947883a 	add	r3,r3,r5
   21968:	30c7883a 	add	r3,r6,r3
   2196c:	18000c1e 	bne	r3,zero,219a0 <__cxa_end_catch+0x70>
   21970:	00c00044 	movi	r3,1
   21974:	19c00a36 	bltu	r3,r7,219a0 <__cxa_end_catch+0x70>
   21978:	20c00517 	ldw	r3,20(r4)
   2197c:	18000d16 	blt	r3,zero,219b4 <__cxa_end_catch+0x84>
   21980:	18ffffc4 	addi	r3,r3,-1
   21984:	18001026 	beq	r3,zero,219c8 <__cxa_end_catch+0x98>
   21988:	00bfffc4 	movi	r2,-1
   2198c:	18801426 	beq	r3,r2,219e0 <__cxa_end_catch+0xb0>
   21990:	20c00515 	stw	r3,20(r4)
   21994:	dfc00017 	ldw	ra,0(sp)
   21998:	dec00104 	addi	sp,sp,4
   2199c:	f800283a 	ret
   219a0:	21000b04 	addi	r4,r4,44
   219a4:	10000015 	stw	zero,0(r2)
   219a8:	dfc00017 	ldw	ra,0(sp)
   219ac:	dec00104 	addi	sp,sp,4
   219b0:	0022acc1 	jmpi	22acc <_Unwind_DeleteException>
   219b4:	18c00044 	addi	r3,r3,1
   219b8:	183ff51e 	bne	r3,zero,21990 <_gp+0xfffe4b70>
   219bc:	21400417 	ldw	r5,16(r4)
   219c0:	11400015 	stw	r5,0(r2)
   219c4:	003ff206 	br	21990 <_gp+0xfffe4b70>
   219c8:	20c00417 	ldw	r3,16(r4)
   219cc:	21000b04 	addi	r4,r4,44
   219d0:	10c00015 	stw	r3,0(r2)
   219d4:	dfc00017 	ldw	ra,0(sp)
   219d8:	dec00104 	addi	sp,sp,4
   219dc:	0022acc1 	jmpi	22acc <_Unwind_DeleteException>
   219e0:	0021ac40 	call	21ac4 <_ZSt9terminatev>

000219e4 <_ZSt18uncaught_exceptionv>:
   219e4:	deffff04 	addi	sp,sp,-4
   219e8:	dfc00015 	stw	ra,0(sp)
   219ec:	0021b580 	call	21b58 <__cxa_get_globals>
   219f0:	10800117 	ldw	r2,4(r2)
   219f4:	1004c03a 	cmpne	r2,r2,zero
   219f8:	dfc00017 	ldw	ra,0(sp)
   219fc:	dec00104 	addi	sp,sp,4
   21a00:	f800283a 	ret

00021a04 <_ZN10__cxxabiv111__terminateEPFvvE>:
   21a04:	008000b4 	movhi	r2,2
   21a08:	deffef04 	addi	sp,sp,-68
   21a0c:	10841104 	addi	r2,r2,4164
   21a10:	d8800615 	stw	r2,24(sp)
   21a14:	008000f4 	movhi	r2,3
   21a18:	108b3e04 	addi	r2,r2,11512
   21a1c:	d8800715 	stw	r2,28(sp)
   21a20:	008000b4 	movhi	r2,2
   21a24:	10869704 	addi	r2,r2,6748
   21a28:	d9000d15 	stw	r4,52(sp)
   21a2c:	d809883a 	mov	r4,sp
   21a30:	d8800915 	stw	r2,36(sp)
   21a34:	dfc01015 	stw	ra,64(sp)
   21a38:	df000f15 	stw	fp,60(sp)
   21a3c:	dec00815 	stw	sp,32(sp)
   21a40:	dec00a15 	stw	sp,40(sp)
   21a44:	00228400 	call	22840 <_Unwind_SjLj_Register>
   21a48:	00800044 	movi	r2,1
   21a4c:	d8800115 	stw	r2,4(sp)
   21a50:	d8800d17 	ldw	r2,52(sp)
   21a54:	103ee83a 	callr	r2
   21a58:	0022b580 	call	22b58 <abort>
   21a5c:	d8c00217 	ldw	r3,8(sp)
   21a60:	d8800117 	ldw	r2,4(sp)
   21a64:	d8c00d15 	stw	r3,52(sp)
   21a68:	d8c00317 	ldw	r3,12(sp)
   21a6c:	d8c00e15 	stw	r3,56(sp)
   21a70:	10000b26 	beq	r2,zero,21aa0 <_ZN10__cxxabiv111__terminateEPFvvE+0x9c>
   21a74:	10bfffc4 	addi	r2,r2,-1
   21a78:	10000126 	beq	r2,zero,21a80 <_ZN10__cxxabiv111__terminateEPFvvE+0x7c>
   21a7c:	003b68fa 	trap	3
   21a80:	d8000115 	stw	zero,4(sp)
   21a84:	00219300 	call	21930 <__cxa_end_catch>
   21a88:	d8c00e17 	ldw	r3,56(sp)
   21a8c:	00bfffc4 	movi	r2,-1
   21a90:	18800826 	beq	r3,r2,21ab4 <_ZN10__cxxabiv111__terminateEPFvvE+0xb0>
   21a94:	d9000d17 	ldw	r4,52(sp)
   21a98:	d8800115 	stw	r2,4(sp)
   21a9c:	0022a3c0 	call	22a3c <_Unwind_SjLj_Resume>
   21aa0:	d9000d17 	ldw	r4,52(sp)
   21aa4:	002187c0 	call	2187c <__cxa_begin_catch>
   21aa8:	00800084 	movi	r2,2
   21aac:	d8800115 	stw	r2,4(sp)
   21ab0:	0022b580 	call	22b58 <abort>
   21ab4:	d8800e17 	ldw	r2,56(sp)
   21ab8:	d9000d17 	ldw	r4,52(sp)
   21abc:	d8800115 	stw	r2,4(sp)
   21ac0:	00216440 	call	21644 <__cxa_call_unexpected>

00021ac4 <_ZSt9terminatev>:
   21ac4:	008000f4 	movhi	r2,3
   21ac8:	10939404 	addi	r2,r2,20048
   21acc:	11000017 	ldw	r4,0(r2)
   21ad0:	deffff04 	addi	sp,sp,-4
   21ad4:	dfc00015 	stw	ra,0(sp)
   21ad8:	0021a040 	call	21a04 <_ZN10__cxxabiv111__terminateEPFvvE>

00021adc <_ZN10__cxxabiv112__unexpectedEPFvvE>:
   21adc:	deffff04 	addi	sp,sp,-4
   21ae0:	dfc00015 	stw	ra,0(sp)
   21ae4:	203ee83a 	callr	r4
   21ae8:	0021ac40 	call	21ac4 <_ZSt9terminatev>

00021aec <_ZSt10unexpectedv>:
   21aec:	008000f4 	movhi	r2,3
   21af0:	10939504 	addi	r2,r2,20052
   21af4:	11000017 	ldw	r4,0(r2)
   21af8:	deffff04 	addi	sp,sp,-4
   21afc:	dfc00015 	stw	ra,0(sp)
   21b00:	0021adc0 	call	21adc <_ZN10__cxxabiv112__unexpectedEPFvvE>

00021b04 <_ZSt13set_terminatePFvvE>:
   21b04:	00c000f4 	movhi	r3,3
   21b08:	18d39404 	addi	r3,r3,20048
   21b0c:	18800017 	ldw	r2,0(r3)
   21b10:	19000015 	stw	r4,0(r3)
   21b14:	f800283a 	ret

00021b18 <_ZSt13get_terminatev>:
   21b18:	008000f4 	movhi	r2,3
   21b1c:	10939404 	addi	r2,r2,20048
   21b20:	10800017 	ldw	r2,0(r2)
   21b24:	f800283a 	ret

00021b28 <_ZSt14set_unexpectedPFvvE>:
   21b28:	00c000f4 	movhi	r3,3
   21b2c:	18d39504 	addi	r3,r3,20052
   21b30:	18800017 	ldw	r2,0(r3)
   21b34:	19000015 	stw	r4,0(r3)
   21b38:	f800283a 	ret

00021b3c <_ZSt14get_unexpectedv>:
   21b3c:	008000f4 	movhi	r2,3
   21b40:	10939504 	addi	r2,r2,20052
   21b44:	10800017 	ldw	r2,0(r2)
   21b48:	f800283a 	ret

00021b4c <__cxa_get_globals_fast>:
   21b4c:	008000f4 	movhi	r2,3
   21b50:	109aa004 	addi	r2,r2,27264
   21b54:	f800283a 	ret

00021b58 <__cxa_get_globals>:
   21b58:	008000f4 	movhi	r2,3
   21b5c:	109aa004 	addi	r2,r2,27264
   21b60:	f800283a 	ret

00021b64 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
   21b64:	018000f4 	movhi	r6,3
   21b68:	319ab104 	addi	r6,r6,27332
   21b6c:	31400117 	ldw	r5,4(r6)
   21b70:	223fff04 	addi	r8,r4,-4
   21b74:	227fff17 	ldw	r9,-4(r4)
   21b78:	28001326 	beq	r5,zero,21bc8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x64>
   21b7c:	424f883a 	add	r7,r8,r9
   21b80:	29c01426 	beq	r5,r7,21bd4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x70>
   21b84:	28c00117 	ldw	r3,4(r5)
   21b88:	18001c26 	beq	r3,zero,21bfc <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x98>
   21b8c:	38c00336 	bltu	r7,r3,21b9c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x38>
   21b90:	00001e06 	br	21c0c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0xa8>
   21b94:	3880052e 	bgeu	r7,r2,21bac <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x48>
   21b98:	1007883a 	mov	r3,r2
   21b9c:	18800117 	ldw	r2,4(r3)
   21ba0:	29800104 	addi	r6,r5,4
   21ba4:	180b883a 	mov	r5,r3
   21ba8:	103ffa1e 	bne	r2,zero,21b94 <_gp+0xfffe4d74>
   21bac:	19400017 	ldw	r5,0(r3)
   21bb0:	194f883a 	add	r7,r3,r5
   21bb4:	41c00e26 	beq	r8,r7,21bf0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x8c>
   21bb8:	20800015 	stw	r2,0(r4)
   21bbc:	30800017 	ldw	r2,0(r6)
   21bc0:	12000115 	stw	r8,4(r2)
   21bc4:	f800283a 	ret
   21bc8:	20000015 	stw	zero,0(r4)
   21bcc:	32000115 	stw	r8,4(r6)
   21bd0:	f800283a 	ret
   21bd4:	28c00017 	ldw	r3,0(r5)
   21bd8:	28800117 	ldw	r2,4(r5)
   21bdc:	1a53883a 	add	r9,r3,r9
   21be0:	227fff15 	stw	r9,-4(r4)
   21be4:	20800015 	stw	r2,0(r4)
   21be8:	32000115 	stw	r8,4(r6)
   21bec:	f800283a 	ret
   21bf0:	494b883a 	add	r5,r9,r5
   21bf4:	19400015 	stw	r5,0(r3)
   21bf8:	f800283a 	ret
   21bfc:	0005883a 	mov	r2,zero
   21c00:	2807883a 	mov	r3,r5
   21c04:	31800104 	addi	r6,r6,4
   21c08:	003fe806 	br	21bac <_gp+0xfffe4d8c>
   21c0c:	1805883a 	mov	r2,r3
   21c10:	31800104 	addi	r6,r6,4
   21c14:	2807883a 	mov	r3,r5
   21c18:	003fe406 	br	21bac <_gp+0xfffe4d8c>

00021c1c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
   21c1c:	20800104 	addi	r2,r4,4
   21c20:	00c001c4 	movi	r3,7
   21c24:	1880112e 	bgeu	r3,r2,21c6c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x50>
   21c28:	20c9883a 	add	r4,r4,r3
   21c2c:	00bfff04 	movi	r2,-4
   21c30:	208a703a 	and	r5,r4,r2
   21c34:	018000f4 	movhi	r6,3
   21c38:	319ab104 	addi	r6,r6,27332
   21c3c:	30c00117 	ldw	r3,4(r6)
   21c40:	18000826 	beq	r3,zero,21c64 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x48>
   21c44:	19000017 	ldw	r4,0(r3)
   21c48:	21400436 	bltu	r4,r5,21c5c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x40>
   21c4c:	00001a06 	br	21cb8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x9c>
   21c50:	11000017 	ldw	r4,0(r2)
   21c54:	2140072e 	bgeu	r4,r5,21c74 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x58>
   21c58:	1007883a 	mov	r3,r2
   21c5c:	18800117 	ldw	r2,4(r3)
   21c60:	103ffb1e 	bne	r2,zero,21c50 <_gp+0xfffe4e30>
   21c64:	0005883a 	mov	r2,zero
   21c68:	f800283a 	ret
   21c6c:	01400204 	movi	r5,8
   21c70:	003ff006 	br	21c34 <_gp+0xfffe4e14>
   21c74:	18c00104 	addi	r3,r3,4
   21c78:	2149c83a 	sub	r4,r4,r5
   21c7c:	018001c4 	movi	r6,7
   21c80:	3100092e 	bgeu	r6,r4,21ca8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x8c>
   21c84:	11c00117 	ldw	r7,4(r2)
   21c88:	114d883a 	add	r6,r2,r5
   21c8c:	31000015 	stw	r4,0(r6)
   21c90:	31c00115 	stw	r7,4(r6)
   21c94:	18800017 	ldw	r2,0(r3)
   21c98:	11400015 	stw	r5,0(r2)
   21c9c:	19800015 	stw	r6,0(r3)
   21ca0:	10800104 	addi	r2,r2,4
   21ca4:	f800283a 	ret
   21ca8:	11000117 	ldw	r4,4(r2)
   21cac:	10800104 	addi	r2,r2,4
   21cb0:	19000015 	stw	r4,0(r3)
   21cb4:	f800283a 	ret
   21cb8:	1805883a 	mov	r2,r3
   21cbc:	30c00104 	addi	r3,r6,4
   21cc0:	003fed06 	br	21c78 <_gp+0xfffe4e58>

00021cc4 <__cxa_allocate_exception>:
   21cc4:	defffd04 	addi	sp,sp,-12
   21cc8:	dc400115 	stw	r17,4(sp)
   21ccc:	24401104 	addi	r17,r4,68
   21cd0:	8809883a 	mov	r4,r17
   21cd4:	dc000015 	stw	r16,0(sp)
   21cd8:	dfc00215 	stw	ra,8(sp)
   21cdc:	0022b700 	call	22b70 <malloc>
   21ce0:	1021883a 	mov	r16,r2
   21ce4:	10000a26 	beq	r2,zero,21d10 <__cxa_allocate_exception+0x4c>
   21ce8:	01801104 	movi	r6,68
   21cec:	000b883a 	mov	r5,zero
   21cf0:	8009883a 	mov	r4,r16
   21cf4:	00233a40 	call	233a4 <memset>
   21cf8:	80801104 	addi	r2,r16,68
   21cfc:	dfc00217 	ldw	ra,8(sp)
   21d00:	dc400117 	ldw	r17,4(sp)
   21d04:	dc000017 	ldw	r16,0(sp)
   21d08:	dec00304 	addi	sp,sp,12
   21d0c:	f800283a 	ret
   21d10:	8809883a 	mov	r4,r17
   21d14:	0021c1c0 	call	21c1c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
   21d18:	1021883a 	mov	r16,r2
   21d1c:	103ff21e 	bne	r2,zero,21ce8 <_gp+0xfffe4ec8>
   21d20:	0021ac40 	call	21ac4 <_ZSt9terminatev>

00021d24 <__cxa_free_exception>:
   21d24:	00c000f4 	movhi	r3,3
   21d28:	18dab104 	addi	r3,r3,27332
   21d2c:	18800217 	ldw	r2,8(r3)
   21d30:	213fef04 	addi	r4,r4,-68
   21d34:	1100042e 	bgeu	r2,r4,21d48 <__cxa_free_exception+0x24>
   21d38:	18c00317 	ldw	r3,12(r3)
   21d3c:	10c5883a 	add	r2,r2,r3
   21d40:	2080012e 	bgeu	r4,r2,21d48 <__cxa_free_exception+0x24>
   21d44:	0021b641 	jmpi	21b64 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
   21d48:	0022b841 	jmpi	22b84 <free>

00021d4c <__cxa_allocate_dependent_exception>:
   21d4c:	defffe04 	addi	sp,sp,-8
   21d50:	01001004 	movi	r4,64
   21d54:	dc000015 	stw	r16,0(sp)
   21d58:	dfc00115 	stw	ra,4(sp)
   21d5c:	0022b700 	call	22b70 <malloc>
   21d60:	1021883a 	mov	r16,r2
   21d64:	10000926 	beq	r2,zero,21d8c <__cxa_allocate_dependent_exception+0x40>
   21d68:	01801004 	movi	r6,64
   21d6c:	000b883a 	mov	r5,zero
   21d70:	8009883a 	mov	r4,r16
   21d74:	00233a40 	call	233a4 <memset>
   21d78:	8005883a 	mov	r2,r16
   21d7c:	dfc00117 	ldw	ra,4(sp)
   21d80:	dc000017 	ldw	r16,0(sp)
   21d84:	dec00204 	addi	sp,sp,8
   21d88:	f800283a 	ret
   21d8c:	01001004 	movi	r4,64
   21d90:	0021c1c0 	call	21c1c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
   21d94:	1021883a 	mov	r16,r2
   21d98:	103ff31e 	bne	r2,zero,21d68 <_gp+0xfffe4f48>
   21d9c:	0021ac40 	call	21ac4 <_ZSt9terminatev>

00021da0 <__cxa_free_dependent_exception>:
   21da0:	014000f4 	movhi	r5,3
   21da4:	295ab104 	addi	r5,r5,27332
   21da8:	28c00217 	ldw	r3,8(r5)
   21dac:	2005883a 	mov	r2,r4
   21db0:	1900042e 	bgeu	r3,r4,21dc4 <__cxa_free_dependent_exception+0x24>
   21db4:	29400317 	ldw	r5,12(r5)
   21db8:	1947883a 	add	r3,r3,r5
   21dbc:	20c0012e 	bgeu	r4,r3,21dc4 <__cxa_free_dependent_exception+0x24>
   21dc0:	0021b641 	jmpi	21b64 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
   21dc4:	1009883a 	mov	r4,r2
   21dc8:	0022b841 	jmpi	22b84 <free>

00021dcc <_GLOBAL__sub_I___cxa_allocate_exception>:
   21dcc:	defffd04 	addi	sp,sp,-12
   21dd0:	dc400115 	stw	r17,4(sp)
   21dd4:	dc000015 	stw	r16,0(sp)
   21dd8:	04424004 	movi	r17,2304
   21ddc:	040000f4 	movhi	r16,3
   21de0:	841ab104 	addi	r16,r16,27332
   21de4:	8809883a 	mov	r4,r17
   21de8:	dfc00215 	stw	ra,8(sp)
   21dec:	84400315 	stw	r17,12(r16)
   21df0:	0022b700 	call	22b70 <malloc>
   21df4:	80800215 	stw	r2,8(r16)
   21df8:	10000826 	beq	r2,zero,21e1c <_GLOBAL__sub_I___cxa_allocate_exception+0x50>
   21dfc:	80800115 	stw	r2,4(r16)
   21e00:	14400015 	stw	r17,0(r2)
   21e04:	10000115 	stw	zero,4(r2)
   21e08:	dfc00217 	ldw	ra,8(sp)
   21e0c:	dc400117 	ldw	r17,4(sp)
   21e10:	dc000017 	ldw	r16,0(sp)
   21e14:	dec00304 	addi	sp,sp,12
   21e18:	f800283a 	ret
   21e1c:	80000315 	stw	zero,12(r16)
   21e20:	80000115 	stw	zero,4(r16)
   21e24:	003ff806 	br	21e08 <_gp+0xfffe4fe8>

00021e28 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   21e28:	20800017 	ldw	r2,0(r4)
   21e2c:	defffa04 	addi	sp,sp,-24
   21e30:	dc000415 	stw	r16,16(sp)
   21e34:	10800617 	ldw	r2,24(r2)
   21e38:	3021883a 	mov	r16,r6
   21e3c:	31800017 	ldw	r6,0(r6)
   21e40:	00c00404 	movi	r3,16
   21e44:	d8c00215 	stw	r3,8(sp)
   21e48:	dfc00515 	stw	ra,20(sp)
   21e4c:	d8000015 	stw	zero,0(sp)
   21e50:	d8000115 	stw	zero,4(sp)
   21e54:	d8000315 	stw	zero,12(sp)
   21e58:	d80f883a 	mov	r7,sp
   21e5c:	103ee83a 	callr	r2
   21e60:	d8800117 	ldw	r2,4(sp)
   21e64:	00c00184 	movi	r3,6
   21e68:	1080018c 	andi	r2,r2,6
   21e6c:	10c00526 	beq	r2,r3,21e84 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x5c>
   21e70:	0005883a 	mov	r2,zero
   21e74:	dfc00517 	ldw	ra,20(sp)
   21e78:	dc000417 	ldw	r16,16(sp)
   21e7c:	dec00604 	addi	sp,sp,24
   21e80:	f800283a 	ret
   21e84:	d8c00017 	ldw	r3,0(sp)
   21e88:	00800044 	movi	r2,1
   21e8c:	80c00015 	stw	r3,0(r16)
   21e90:	dfc00517 	ldw	ra,20(sp)
   21e94:	dc000417 	ldw	r16,16(sp)
   21e98:	dec00604 	addi	sp,sp,24
   21e9c:	f800283a 	ret

00021ea0 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   21ea0:	d8800017 	ldw	r2,0(sp)
   21ea4:	11800226 	beq	r2,r6,21eb0 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_+0x10>
   21ea8:	00800044 	movi	r2,1
   21eac:	f800283a 	ret
   21eb0:	00800184 	movi	r2,6
   21eb4:	f800283a 	ret

00021eb8 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   21eb8:	008000f4 	movhi	r2,3
   21ebc:	108b7204 	addi	r2,r2,11720
   21ec0:	20800015 	stw	r2,0(r4)
   21ec4:	002259c1 	jmpi	2259c <_ZNSt9type_infoD1Ev>

00021ec8 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   21ec8:	defffe04 	addi	sp,sp,-8
   21ecc:	008000f4 	movhi	r2,3
   21ed0:	dc000015 	stw	r16,0(sp)
   21ed4:	dfc00115 	stw	ra,4(sp)
   21ed8:	108b7204 	addi	r2,r2,11720
   21edc:	20800015 	stw	r2,0(r4)
   21ee0:	2021883a 	mov	r16,r4
   21ee4:	002259c0 	call	2259c <_ZNSt9type_infoD1Ev>
   21ee8:	8009883a 	mov	r4,r16
   21eec:	dfc00117 	ldw	ra,4(sp)
   21ef0:	dc000017 	ldw	r16,0(sp)
   21ef4:	dec00204 	addi	sp,sp,8
   21ef8:	002088c1 	jmpi	2088c <_ZdlPv>

00021efc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   21efc:	21000117 	ldw	r4,4(r4)
   21f00:	29400117 	ldw	r5,4(r5)
   21f04:	defffd04 	addi	sp,sp,-12
   21f08:	dc400115 	stw	r17,4(sp)
   21f0c:	dc000015 	stw	r16,0(sp)
   21f10:	dfc00215 	stw	ra,8(sp)
   21f14:	3023883a 	mov	r17,r6
   21f18:	3821883a 	mov	r16,r7
   21f1c:	21400526 	beq	r4,r5,21f34 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x38>
   21f20:	20c00007 	ldb	r3,0(r4)
   21f24:	00800a84 	movi	r2,42
   21f28:	18800d26 	beq	r3,r2,21f60 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
   21f2c:	00239640 	call	23964 <strcmp>
   21f30:	10000b1e 	bne	r2,zero,21f60 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
   21f34:	00800204 	movi	r2,8
   21f38:	80800315 	stw	r2,12(r16)
   21f3c:	00800184 	movi	r2,6
   21f40:	80800115 	stw	r2,4(r16)
   21f44:	84400015 	stw	r17,0(r16)
   21f48:	00800044 	movi	r2,1
   21f4c:	dfc00217 	ldw	ra,8(sp)
   21f50:	dc400117 	ldw	r17,4(sp)
   21f54:	dc000017 	ldw	r16,0(sp)
   21f58:	dec00304 	addi	sp,sp,12
   21f5c:	f800283a 	ret
   21f60:	0005883a 	mov	r2,zero
   21f64:	003ff906 	br	21f4c <_gp+0xfffe512c>

00021f68 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   21f68:	defffa04 	addi	sp,sp,-24
   21f6c:	dc800415 	stw	r18,16(sp)
   21f70:	d8800817 	ldw	r2,32(sp)
   21f74:	dc800617 	ldw	r18,24(sp)
   21f78:	dc400315 	stw	r17,12(sp)
   21f7c:	dc000215 	stw	r16,8(sp)
   21f80:	dfc00515 	stw	ra,20(sp)
   21f84:	dc400917 	ldw	r17,36(sp)
   21f88:	24000117 	ldw	r16,4(r4)
   21f8c:	90801526 	beq	r18,r2,21fe4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x7c>
   21f90:	39400117 	ldw	r5,4(r7)
   21f94:	2c000826 	beq	r5,r16,21fb8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x50>
   21f98:	80c00007 	ldb	r3,0(r16)
   21f9c:	00800a84 	movi	r2,42
   21fa0:	18800926 	beq	r3,r2,21fc8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
   21fa4:	8009883a 	mov	r4,r16
   21fa8:	d9800115 	stw	r6,4(sp)
   21fac:	00239640 	call	23964 <strcmp>
   21fb0:	d9800117 	ldw	r6,4(sp)
   21fb4:	1000041e 	bne	r2,zero,21fc8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
   21fb8:	00800044 	movi	r2,1
   21fbc:	8c800015 	stw	r18,0(r17)
   21fc0:	89800115 	stw	r6,4(r17)
   21fc4:	88800315 	stw	r2,12(r17)
   21fc8:	0005883a 	mov	r2,zero
   21fcc:	dfc00517 	ldw	ra,20(sp)
   21fd0:	dc800417 	ldw	r18,16(sp)
   21fd4:	dc400317 	ldw	r17,12(sp)
   21fd8:	dc000217 	ldw	r16,8(sp)
   21fdc:	dec00604 	addi	sp,sp,24
   21fe0:	f800283a 	ret
   21fe4:	d8800717 	ldw	r2,28(sp)
   21fe8:	11400117 	ldw	r5,4(r2)
   21fec:	81400a26 	beq	r16,r5,22018 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb0>
   21ff0:	80c00007 	ldb	r3,0(r16)
   21ff4:	00800a84 	movi	r2,42
   21ff8:	18800c26 	beq	r3,r2,2202c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xc4>
   21ffc:	8009883a 	mov	r4,r16
   22000:	d9800115 	stw	r6,4(sp)
   22004:	d9c00015 	stw	r7,0(sp)
   22008:	00239640 	call	23964 <strcmp>
   2200c:	d9800117 	ldw	r6,4(sp)
   22010:	d9c00017 	ldw	r7,0(sp)
   22014:	1000021e 	bne	r2,zero,22020 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb8>
   22018:	89800215 	stw	r6,8(r17)
   2201c:	003fea06 	br	21fc8 <_gp+0xfffe51a8>
   22020:	39400117 	ldw	r5,4(r7)
   22024:	817fdf1e 	bne	r16,r5,21fa4 <_gp+0xfffe5184>
   22028:	003fe306 	br	21fb8 <_gp+0xfffe5198>
   2202c:	38800117 	ldw	r2,4(r7)
   22030:	80bfe51e 	bne	r16,r2,21fc8 <_gp+0xfffe51a8>
   22034:	003fe006 	br	21fb8 <_gp+0xfffe5198>

00022038 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   22038:	20800117 	ldw	r2,4(r4)
   2203c:	28c00117 	ldw	r3,4(r5)
   22040:	10c02926 	beq	r2,r3,220e8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0xb0>
   22044:	defffb04 	addi	sp,sp,-20
   22048:	dcc00315 	stw	r19,12(sp)
   2204c:	dc800215 	stw	r18,8(sp)
   22050:	dc400115 	stw	r17,4(sp)
   22054:	dc000015 	stw	r16,0(sp)
   22058:	dfc00415 	stw	ra,16(sp)
   2205c:	2821883a 	mov	r16,r5
   22060:	11400007 	ldb	r5,0(r2)
   22064:	2025883a 	mov	r18,r4
   22068:	01000a84 	movi	r4,42
   2206c:	3823883a 	mov	r17,r7
   22070:	3027883a 	mov	r19,r6
   22074:	29000626 	beq	r5,r4,22090 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
   22078:	180b883a 	mov	r5,r3
   2207c:	1009883a 	mov	r4,r2
   22080:	00239640 	call	23964 <strcmp>
   22084:	1000021e 	bne	r2,zero,22090 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
   22088:	00800044 	movi	r2,1
   2208c:	00000306 	br	2209c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x64>
   22090:	008000c4 	movi	r2,3
   22094:	1440082e 	bgeu	r2,r17,220b8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x80>
   22098:	0005883a 	mov	r2,zero
   2209c:	dfc00417 	ldw	ra,16(sp)
   220a0:	dcc00317 	ldw	r19,12(sp)
   220a4:	dc800217 	ldw	r18,8(sp)
   220a8:	dc400117 	ldw	r17,4(sp)
   220ac:	dc000017 	ldw	r16,0(sp)
   220b0:	dec00504 	addi	sp,sp,20
   220b4:	f800283a 	ret
   220b8:	80800017 	ldw	r2,0(r16)
   220bc:	980d883a 	mov	r6,r19
   220c0:	900b883a 	mov	r5,r18
   220c4:	10800517 	ldw	r2,20(r2)
   220c8:	8009883a 	mov	r4,r16
   220cc:	dfc00417 	ldw	ra,16(sp)
   220d0:	dcc00317 	ldw	r19,12(sp)
   220d4:	dc800217 	ldw	r18,8(sp)
   220d8:	dc400117 	ldw	r17,4(sp)
   220dc:	dc000017 	ldw	r16,0(sp)
   220e0:	dec00504 	addi	sp,sp,20
   220e4:	1000683a 	jmp	r2
   220e8:	00800044 	movi	r2,1
   220ec:	f800283a 	ret

000220f0 <_ZNSt9exceptionD1Ev>:
   220f0:	f800283a 	ret

000220f4 <_ZNSt13bad_exceptionD1Ev>:
   220f4:	f800283a 	ret

000220f8 <_ZNKSt9exception4whatEv>:
   220f8:	008000f4 	movhi	r2,3
   220fc:	108b7b04 	addi	r2,r2,11756
   22100:	f800283a 	ret

00022104 <_ZNKSt13bad_exception4whatEv>:
   22104:	008000f4 	movhi	r2,3
   22108:	108b7f04 	addi	r2,r2,11772
   2210c:	f800283a 	ret

00022110 <_ZNSt9exceptionD0Ev>:
   22110:	002088c1 	jmpi	2088c <_ZdlPv>

00022114 <_ZNSt13bad_exceptionD0Ev>:
   22114:	002088c1 	jmpi	2088c <_ZdlPv>

00022118 <_ZN10__cxxabiv115__forced_unwindD1Ev>:
   22118:	f800283a 	ret

0002211c <_ZN10__cxxabiv115__forced_unwindD0Ev>:
   2211c:	002088c1 	jmpi	2088c <_ZdlPv>

00022120 <_ZN10__cxxabiv119__foreign_exceptionD1Ev>:
   22120:	f800283a 	ret

00022124 <_ZN10__cxxabiv119__foreign_exceptionD0Ev>:
   22124:	002088c1 	jmpi	2088c <_ZdlPv>

00022128 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
   22128:	defffe04 	addi	sp,sp,-8
   2212c:	dfc00115 	stw	ra,4(sp)
   22130:	dc000015 	stw	r16,0(sp)
   22134:	00800044 	movi	r2,1
   22138:	11000a36 	bltu	r2,r4,22164 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x3c>
   2213c:	28bff617 	ldw	r2,-40(r5)
   22140:	2c000504 	addi	r16,r5,20
   22144:	10000226 	beq	r2,zero,22150 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x28>
   22148:	8009883a 	mov	r4,r16
   2214c:	103ee83a 	callr	r2
   22150:	8009883a 	mov	r4,r16
   22154:	dfc00117 	ldw	ra,4(sp)
   22158:	dc000017 	ldw	r16,0(sp)
   2215c:	dec00204 	addi	sp,sp,8
   22160:	0021d241 	jmpi	21d24 <__cxa_free_exception>
   22164:	293ff817 	ldw	r4,-32(r5)
   22168:	0021a040 	call	21a04 <_ZN10__cxxabiv111__terminateEPFvvE>

0002216c <__cxa_throw>:
   2216c:	defffb04 	addi	sp,sp,-20
   22170:	dfc00415 	stw	ra,16(sp)
   22174:	dcc00315 	stw	r19,12(sp)
   22178:	dc800215 	stw	r18,8(sp)
   2217c:	2827883a 	mov	r19,r5
   22180:	3025883a 	mov	r18,r6
   22184:	dc400115 	stw	r17,4(sp)
   22188:	dc000015 	stw	r16,0(sp)
   2218c:	2021883a 	mov	r16,r4
   22190:	0021b580 	call	21b58 <__cxa_get_globals>
   22194:	10c00117 	ldw	r3,4(r2)
   22198:	847ffb04 	addi	r17,r16,-20
   2219c:	18c00044 	addi	r3,r3,1
   221a0:	10c00115 	stw	r3,4(r2)
   221a4:	00800044 	movi	r2,1
   221a8:	80bfef15 	stw	r2,-68(r16)
   221ac:	84fff015 	stw	r19,-64(r16)
   221b0:	84bff115 	stw	r18,-60(r16)
   221b4:	0021b3c0 	call	21b3c <_ZSt14get_unexpectedv>
   221b8:	80bff215 	stw	r2,-56(r16)
   221bc:	0021b180 	call	21b18 <_ZSt13get_terminatev>
   221c0:	80bff315 	stw	r2,-52(r16)
   221c4:	0090caf4 	movhi	r2,17195
   221c8:	108ac004 	addi	r2,r2,11008
   221cc:	80bffb15 	stw	r2,-20(r16)
   221d0:	0091d3b4 	movhi	r2,18254
   221d4:	109550c4 	addi	r2,r2,21827
   221d8:	80bffc15 	stw	r2,-16(r16)
   221dc:	008000b4 	movhi	r2,2
   221e0:	10884a04 	addi	r2,r2,8488
   221e4:	8809883a 	mov	r4,r17
   221e8:	80bffd15 	stw	r2,-12(r16)
   221ec:	00229280 	call	22928 <_Unwind_SjLj_RaiseException>
   221f0:	8809883a 	mov	r4,r17
   221f4:	002187c0 	call	2187c <__cxa_begin_catch>
   221f8:	0021ac40 	call	21ac4 <_ZSt9terminatev>

000221fc <__cxa_rethrow>:
   221fc:	defffe04 	addi	sp,sp,-8
   22200:	dfc00115 	stw	ra,4(sp)
   22204:	dc000015 	stw	r16,0(sp)
   22208:	0021b580 	call	21b58 <__cxa_get_globals>
   2220c:	10c00117 	ldw	r3,4(r2)
   22210:	11000017 	ldw	r4,0(r2)
   22214:	18c00044 	addi	r3,r3,1
   22218:	10c00115 	stw	r3,4(r2)
   2221c:	20001126 	beq	r4,zero,22264 <__cxa_rethrow+0x68>
   22220:	21400b17 	ldw	r5,44(r4)
   22224:	01ef3574 	movhi	r7,48341
   22228:	39f54004 	addi	r7,r7,-11008
   2222c:	29cf883a 	add	r7,r5,r7
   22230:	20c00c17 	ldw	r3,48(r4)
   22234:	394d803a 	cmpltu	r6,r7,r5
   22238:	016e2cb4 	movhi	r5,47282
   2223c:	296aaf04 	addi	r5,r5,-21828
   22240:	1947883a 	add	r3,r3,r5
   22244:	30c7883a 	add	r3,r6,r3
   22248:	18000726 	beq	r3,zero,22268 <__cxa_rethrow+0x6c>
   2224c:	10000015 	stw	zero,0(r2)
   22250:	24000b04 	addi	r16,r4,44
   22254:	8009883a 	mov	r4,r16
   22258:	0022a800 	call	22a80 <_Unwind_SjLj_Resume_or_Rethrow>
   2225c:	8009883a 	mov	r4,r16
   22260:	002187c0 	call	2187c <__cxa_begin_catch>
   22264:	0021ac40 	call	21ac4 <_ZSt9terminatev>
   22268:	00c00044 	movi	r3,1
   2226c:	19fff736 	bltu	r3,r7,2224c <_gp+0xfffe542c>
   22270:	20800517 	ldw	r2,20(r4)
   22274:	0085c83a 	sub	r2,zero,r2
   22278:	20800515 	stw	r2,20(r4)
   2227c:	003ff406 	br	22250 <_gp+0xfffe5430>

00022280 <__cxa_call_terminate>:
   22280:	defffe04 	addi	sp,sp,-8
   22284:	dfc00115 	stw	ra,4(sp)
   22288:	dc000015 	stw	r16,0(sp)
   2228c:	20000d26 	beq	r4,zero,222c4 <__cxa_call_terminate+0x44>
   22290:	2021883a 	mov	r16,r4
   22294:	002187c0 	call	2187c <__cxa_begin_catch>
   22298:	80c00017 	ldw	r3,0(r16)
   2229c:	016f3574 	movhi	r5,48341
   222a0:	29754004 	addi	r5,r5,-11008
   222a4:	194b883a 	add	r5,r3,r5
   222a8:	80800117 	ldw	r2,4(r16)
   222ac:	28c9803a 	cmpltu	r4,r5,r3
   222b0:	00ee2cb4 	movhi	r3,47282
   222b4:	18eaaf04 	addi	r3,r3,-21828
   222b8:	10c5883a 	add	r2,r2,r3
   222bc:	2085883a 	add	r2,r4,r2
   222c0:	10000126 	beq	r2,zero,222c8 <__cxa_call_terminate+0x48>
   222c4:	0021ac40 	call	21ac4 <_ZSt9terminatev>
   222c8:	00800044 	movi	r2,1
   222cc:	117ffd36 	bltu	r2,r5,222c4 <_gp+0xfffe54a4>
   222d0:	813ff817 	ldw	r4,-32(r16)
   222d4:	0021a040 	call	21a04 <_ZN10__cxxabiv111__terminateEPFvvE>

000222d8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   222d8:	008000f4 	movhi	r2,3
   222dc:	108bc404 	addi	r2,r2,12048
   222e0:	20800015 	stw	r2,0(r4)
   222e4:	0021eb81 	jmpi	21eb8 <_ZN10__cxxabiv117__class_type_infoD1Ev>

000222e8 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   222e8:	defffe04 	addi	sp,sp,-8
   222ec:	008000f4 	movhi	r2,3
   222f0:	dc000015 	stw	r16,0(sp)
   222f4:	dfc00115 	stw	ra,4(sp)
   222f8:	108bc404 	addi	r2,r2,12048
   222fc:	20800015 	stw	r2,0(r4)
   22300:	2021883a 	mov	r16,r4
   22304:	0021eb80 	call	21eb8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   22308:	8009883a 	mov	r4,r16
   2230c:	dfc00117 	ldw	ra,4(sp)
   22310:	dc000017 	ldw	r16,0(sp)
   22314:	dec00204 	addi	sp,sp,8
   22318:	002088c1 	jmpi	2088c <_ZdlPv>

0002231c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   2231c:	defff504 	addi	sp,sp,-44
   22320:	dc000115 	stw	r16,4(sp)
   22324:	38800117 	ldw	r2,4(r7)
   22328:	24000117 	ldw	r16,4(r4)
   2232c:	df000915 	stw	fp,36(sp)
   22330:	ddc00815 	stw	r23,32(sp)
   22334:	dd800715 	stw	r22,28(sp)
   22338:	dcc00415 	stw	r19,16(sp)
   2233c:	dc800315 	stw	r18,12(sp)
   22340:	dc400215 	stw	r17,8(sp)
   22344:	dfc00a15 	stw	ra,40(sp)
   22348:	dd400615 	stw	r21,24(sp)
   2234c:	dd000515 	stw	r20,20(sp)
   22350:	2823883a 	mov	r17,r5
   22354:	3039883a 	mov	fp,r6
   22358:	dcc00b17 	ldw	r19,44(sp)
   2235c:	ddc00c17 	ldw	r23,48(sp)
   22360:	dd800d17 	ldw	r22,52(sp)
   22364:	dc800e17 	ldw	r18,56(sp)
   22368:	80800b26 	beq	r16,r2,22398 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x7c>
   2236c:	80c00007 	ldb	r3,0(r16)
   22370:	2029883a 	mov	r20,r4
   22374:	01000a84 	movi	r4,42
   22378:	382b883a 	mov	r21,r7
   2237c:	19001a26 	beq	r3,r4,223e8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
   22380:	100b883a 	mov	r5,r2
   22384:	8009883a 	mov	r4,r16
   22388:	d8c00015 	stw	r3,0(sp)
   2238c:	00239640 	call	23964 <strcmp>
   22390:	d8c00017 	ldw	r3,0(sp)
   22394:	1000141e 	bne	r2,zero,223e8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
   22398:	94c00015 	stw	r19,0(r18)
   2239c:	97000115 	stw	fp,4(r18)
   223a0:	88002816 	blt	r17,zero,22444 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x128>
   223a4:	9c63883a 	add	r17,r19,r17
   223a8:	b4403226 	beq	r22,r17,22474 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x158>
   223ac:	00800044 	movi	r2,1
   223b0:	90800315 	stw	r2,12(r18)
   223b4:	0005883a 	mov	r2,zero
   223b8:	dfc00a17 	ldw	ra,40(sp)
   223bc:	df000917 	ldw	fp,36(sp)
   223c0:	ddc00817 	ldw	r23,32(sp)
   223c4:	dd800717 	ldw	r22,28(sp)
   223c8:	dd400617 	ldw	r21,24(sp)
   223cc:	dd000517 	ldw	r20,20(sp)
   223d0:	dcc00417 	ldw	r19,16(sp)
   223d4:	dc800317 	ldw	r18,12(sp)
   223d8:	dc400217 	ldw	r17,8(sp)
   223dc:	dc000117 	ldw	r16,4(sp)
   223e0:	dec00b04 	addi	sp,sp,44
   223e4:	f800283a 	ret
   223e8:	9d801926 	beq	r19,r22,22450 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x134>
   223ec:	a1000217 	ldw	r4,8(r20)
   223f0:	a80f883a 	mov	r7,r21
   223f4:	e00d883a 	mov	r6,fp
   223f8:	20800017 	ldw	r2,0(r4)
   223fc:	dc800e15 	stw	r18,56(sp)
   22400:	dd800d15 	stw	r22,52(sp)
   22404:	ddc00c15 	stw	r23,48(sp)
   22408:	dcc00b15 	stw	r19,44(sp)
   2240c:	10800717 	ldw	r2,28(r2)
   22410:	880b883a 	mov	r5,r17
   22414:	dfc00a17 	ldw	ra,40(sp)
   22418:	df000917 	ldw	fp,36(sp)
   2241c:	ddc00817 	ldw	r23,32(sp)
   22420:	dd800717 	ldw	r22,28(sp)
   22424:	dd400617 	ldw	r21,24(sp)
   22428:	dd000517 	ldw	r20,20(sp)
   2242c:	dcc00417 	ldw	r19,16(sp)
   22430:	dc800317 	ldw	r18,12(sp)
   22434:	dc400217 	ldw	r17,8(sp)
   22438:	dc000117 	ldw	r16,4(sp)
   2243c:	dec00b04 	addi	sp,sp,44
   22440:	1000683a 	jmp	r2
   22444:	00bfff84 	movi	r2,-2
   22448:	88bfda1e 	bne	r17,r2,223b4 <_gp+0xfffe5594>
   2244c:	003fd706 	br	223ac <_gp+0xfffe558c>
   22450:	b9400117 	ldw	r5,4(r23)
   22454:	81400526 	beq	r16,r5,2246c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x150>
   22458:	00800a84 	movi	r2,42
   2245c:	18bfe326 	beq	r3,r2,223ec <_gp+0xfffe55cc>
   22460:	8009883a 	mov	r4,r16
   22464:	00239640 	call	23964 <strcmp>
   22468:	103fe01e 	bne	r2,zero,223ec <_gp+0xfffe55cc>
   2246c:	97000215 	stw	fp,8(r18)
   22470:	003fd006 	br	223b4 <_gp+0xfffe5594>
   22474:	00800184 	movi	r2,6
   22478:	003fcd06 	br	223b0 <_gp+0xfffe5590>

0002247c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   2247c:	defffa04 	addi	sp,sp,-24
   22480:	dc000215 	stw	r16,8(sp)
   22484:	dc000617 	ldw	r16,24(sp)
   22488:	dc800415 	stw	r18,16(sp)
   2248c:	dc400315 	stw	r17,12(sp)
   22490:	dfc00515 	stw	ra,20(sp)
   22494:	2023883a 	mov	r17,r4
   22498:	2825883a 	mov	r18,r5
   2249c:	81800b26 	beq	r16,r6,224cc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x50>
   224a0:	89000217 	ldw	r4,8(r17)
   224a4:	900b883a 	mov	r5,r18
   224a8:	20800017 	ldw	r2,0(r4)
   224ac:	dc000615 	stw	r16,24(sp)
   224b0:	10800817 	ldw	r2,32(r2)
   224b4:	dfc00517 	ldw	ra,20(sp)
   224b8:	dc800417 	ldw	r18,16(sp)
   224bc:	dc400317 	ldw	r17,12(sp)
   224c0:	dc000217 	ldw	r16,8(sp)
   224c4:	dec00604 	addi	sp,sp,24
   224c8:	1000683a 	jmp	r2
   224cc:	21000117 	ldw	r4,4(r4)
   224d0:	39400117 	ldw	r5,4(r7)
   224d4:	21400926 	beq	r4,r5,224fc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x80>
   224d8:	20c00007 	ldb	r3,0(r4)
   224dc:	00800a84 	movi	r2,42
   224e0:	18bfef26 	beq	r3,r2,224a0 <_gp+0xfffe5680>
   224e4:	d9800015 	stw	r6,0(sp)
   224e8:	d9c00115 	stw	r7,4(sp)
   224ec:	00239640 	call	23964 <strcmp>
   224f0:	d9800017 	ldw	r6,0(sp)
   224f4:	d9c00117 	ldw	r7,4(sp)
   224f8:	103fe91e 	bne	r2,zero,224a0 <_gp+0xfffe5680>
   224fc:	00800184 	movi	r2,6
   22500:	dfc00517 	ldw	ra,20(sp)
   22504:	dc800417 	ldw	r18,16(sp)
   22508:	dc400317 	ldw	r17,12(sp)
   2250c:	dc000217 	ldw	r16,8(sp)
   22510:	dec00604 	addi	sp,sp,24
   22514:	f800283a 	ret

00022518 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   22518:	defffb04 	addi	sp,sp,-20
   2251c:	dcc00315 	stw	r19,12(sp)
   22520:	dc800215 	stw	r18,8(sp)
   22524:	dc400115 	stw	r17,4(sp)
   22528:	dc000015 	stw	r16,0(sp)
   2252c:	dfc00415 	stw	ra,16(sp)
   22530:	2027883a 	mov	r19,r4
   22534:	2821883a 	mov	r16,r5
   22538:	3023883a 	mov	r17,r6
   2253c:	3825883a 	mov	r18,r7
   22540:	0021efc0 	call	21efc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   22544:	10c03fcc 	andi	r3,r2,255
   22548:	18000726 	beq	r3,zero,22568 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x50>
   2254c:	dfc00417 	ldw	ra,16(sp)
   22550:	dcc00317 	ldw	r19,12(sp)
   22554:	dc800217 	ldw	r18,8(sp)
   22558:	dc400117 	ldw	r17,4(sp)
   2255c:	dc000017 	ldw	r16,0(sp)
   22560:	dec00504 	addi	sp,sp,20
   22564:	f800283a 	ret
   22568:	99000217 	ldw	r4,8(r19)
   2256c:	900f883a 	mov	r7,r18
   22570:	880d883a 	mov	r6,r17
   22574:	20800017 	ldw	r2,0(r4)
   22578:	800b883a 	mov	r5,r16
   2257c:	10800617 	ldw	r2,24(r2)
   22580:	dfc00417 	ldw	ra,16(sp)
   22584:	dcc00317 	ldw	r19,12(sp)
   22588:	dc800217 	ldw	r18,8(sp)
   2258c:	dc400117 	ldw	r17,4(sp)
   22590:	dc000017 	ldw	r16,0(sp)
   22594:	dec00504 	addi	sp,sp,20
   22598:	1000683a 	jmp	r2

0002259c <_ZNSt9type_infoD1Ev>:
   2259c:	f800283a 	ret

000225a0 <_ZNKSt9type_info14__is_pointer_pEv>:
   225a0:	0005883a 	mov	r2,zero
   225a4:	f800283a 	ret

000225a8 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
   225a8:	0005883a 	mov	r2,zero
   225ac:	f800283a 	ret

000225b0 <_ZNSt9type_infoD0Ev>:
   225b0:	002088c1 	jmpi	2088c <_ZdlPv>

000225b4 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
   225b4:	21000117 	ldw	r4,4(r4)
   225b8:	29400117 	ldw	r5,4(r5)
   225bc:	21400c26 	beq	r4,r5,225f0 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x3c>
   225c0:	20c00007 	ldb	r3,0(r4)
   225c4:	00800a84 	movi	r2,42
   225c8:	18800726 	beq	r3,r2,225e8 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x34>
   225cc:	deffff04 	addi	sp,sp,-4
   225d0:	dfc00015 	stw	ra,0(sp)
   225d4:	00239640 	call	23964 <strcmp>
   225d8:	1005003a 	cmpeq	r2,r2,zero
   225dc:	dfc00017 	ldw	ra,0(sp)
   225e0:	dec00104 	addi	sp,sp,4
   225e4:	f800283a 	ret
   225e8:	0005883a 	mov	r2,zero
   225ec:	f800283a 	ret
   225f0:	00800044 	movi	r2,1
   225f4:	f800283a 	ret

000225f8 <__cxa_pure_virtual>:
   225f8:	014000f4 	movhi	r5,3
   225fc:	deffff04 	addi	sp,sp,-4
   22600:	294bd904 	addi	r5,r5,12132
   22604:	018006c4 	movi	r6,27
   22608:	01000084 	movi	r4,2
   2260c:	dfc00015 	stw	ra,0(sp)
   22610:	003074c0 	call	3074c <write>
   22614:	0021ac40 	call	21ac4 <_ZSt9terminatev>

00022618 <__cxa_deleted_virtual>:
   22618:	014000f4 	movhi	r5,3
   2261c:	deffff04 	addi	sp,sp,-4
   22620:	294be004 	addi	r5,r5,12160
   22624:	01800784 	movi	r6,30
   22628:	01000084 	movi	r4,2
   2262c:	dfc00015 	stw	ra,0(sp)
   22630:	003074c0 	call	3074c <write>
   22634:	0021ac40 	call	21ac4 <_ZSt9terminatev>

00022638 <_Unwind_ForcedUnwind_Phase2>:
   22638:	defff404 	addi	sp,sp,-48
   2263c:	dd800915 	stw	r22,36(sp)
   22640:	058000f4 	movhi	r22,3
   22644:	ddc00a15 	stw	r23,40(sp)
   22648:	dd400815 	stw	r21,32(sp)
   2264c:	dd000715 	stw	r20,28(sp)
   22650:	dcc00615 	stw	r19,24(sp)
   22654:	dc400415 	stw	r17,16(sp)
   22658:	dc000315 	stw	r16,12(sp)
   2265c:	dfc00b15 	stw	ra,44(sp)
   22660:	dc800515 	stw	r18,20(sp)
   22664:	2021883a 	mov	r16,r4
   22668:	2823883a 	mov	r17,r5
   2266c:	24c00317 	ldw	r19,12(r4)
   22670:	25000417 	ldw	r20,16(r4)
   22674:	28c00017 	ldw	r3,0(r5)
   22678:	b59aa204 	addi	r22,r22,27272
   2267c:	054001c4 	movi	r21,7
   22680:	05c00204 	movi	r23,8
   22684:	00001606 	br	226e0 <_Unwind_ForcedUnwind_Phase2+0xa8>
   22688:	81800017 	ldw	r6,0(r16)
   2268c:	81c00117 	ldw	r7,4(r16)
   22690:	1c800617 	ldw	r18,24(r3)
   22694:	dd000215 	stw	r20,8(sp)
   22698:	dc400115 	stw	r17,4(sp)
   2269c:	dc000015 	stw	r16,0(sp)
   226a0:	983ee83a 	callr	r19
   226a4:	01400284 	movi	r5,10
   226a8:	01000044 	movi	r4,1
   226ac:	1000241e 	bne	r2,zero,22740 <_Unwind_ForcedUnwind_Phase2+0x108>
   226b0:	90000726 	beq	r18,zero,226d0 <_Unwind_ForcedUnwind_Phase2+0x98>
   226b4:	81800017 	ldw	r6,0(r16)
   226b8:	81c00117 	ldw	r7,4(r16)
   226bc:	dc400115 	stw	r17,4(sp)
   226c0:	dc000015 	stw	r16,0(sp)
   226c4:	903ee83a 	callr	r18
   226c8:	15401f26 	beq	r2,r21,22748 <_Unwind_ForcedUnwind_Phase2+0x110>
   226cc:	15c01c1e 	bne	r2,r23,22740 <_Unwind_ForcedUnwind_Phase2+0x108>
   226d0:	88800017 	ldw	r2,0(r17)
   226d4:	10c00017 	ldw	r3,0(r2)
   226d8:	b0c00015 	stw	r3,0(r22)
   226dc:	88c00015 	stw	r3,0(r17)
   226e0:	01400284 	movi	r5,10
   226e4:	01000044 	movi	r4,1
   226e8:	183fe71e 	bne	r3,zero,22688 <_gp+0xfffe5868>
   226ec:	81800017 	ldw	r6,0(r16)
   226f0:	81c00117 	ldw	r7,4(r16)
   226f4:	01400684 	movi	r5,26
   226f8:	dd000215 	stw	r20,8(sp)
   226fc:	dc400115 	stw	r17,4(sp)
   22700:	dc000015 	stw	r16,0(sp)
   22704:	01000044 	movi	r4,1
   22708:	983ee83a 	callr	r19
   2270c:	10000c1e 	bne	r2,zero,22740 <_Unwind_ForcedUnwind_Phase2+0x108>
   22710:	00800144 	movi	r2,5
   22714:	dfc00b17 	ldw	ra,44(sp)
   22718:	ddc00a17 	ldw	r23,40(sp)
   2271c:	dd800917 	ldw	r22,36(sp)
   22720:	dd400817 	ldw	r21,32(sp)
   22724:	dd000717 	ldw	r20,28(sp)
   22728:	dcc00617 	ldw	r19,24(sp)
   2272c:	dc800517 	ldw	r18,20(sp)
   22730:	dc400417 	ldw	r17,16(sp)
   22734:	dc000317 	ldw	r16,12(sp)
   22738:	dec00c04 	addi	sp,sp,48
   2273c:	f800283a 	ret
   22740:	00800084 	movi	r2,2
   22744:	003ff306 	br	22714 <_gp+0xfffe58f4>
   22748:	a805883a 	mov	r2,r21
   2274c:	003ff106 	br	22714 <_gp+0xfffe58f4>

00022750 <_Unwind_RaiseException_Phase2>:
   22750:	28c00017 	ldw	r3,0(r5)
   22754:	defff804 	addi	sp,sp,-32
   22758:	dcc00515 	stw	r19,20(sp)
   2275c:	dc800415 	stw	r18,16(sp)
   22760:	dc400315 	stw	r17,12(sp)
   22764:	dc000215 	stw	r16,8(sp)
   22768:	dfc00715 	stw	ra,28(sp)
   2276c:	dd000615 	stw	r20,24(sp)
   22770:	2823883a 	mov	r17,r5
   22774:	2021883a 	mov	r16,r4
   22778:	048001c4 	movi	r18,7
   2277c:	04c00204 	movi	r19,8
   22780:	18001326 	beq	r3,zero,227d0 <_Unwind_RaiseException_Phase2+0x80>
   22784:	81000417 	ldw	r4,16(r16)
   22788:	1a000617 	ldw	r8,24(r3)
   2278c:	19001926 	beq	r3,r4,227f4 <_Unwind_RaiseException_Phase2+0xa4>
   22790:	40000c26 	beq	r8,zero,227c4 <_Unwind_RaiseException_Phase2+0x74>
   22794:	01400084 	movi	r5,2
   22798:	0029883a 	mov	r20,zero
   2279c:	81800017 	ldw	r6,0(r16)
   227a0:	81c00117 	ldw	r7,4(r16)
   227a4:	01000044 	movi	r4,1
   227a8:	dc400115 	stw	r17,4(sp)
   227ac:	dc000015 	stw	r16,0(sp)
   227b0:	403ee83a 	callr	r8
   227b4:	14801326 	beq	r2,r18,22804 <_Unwind_RaiseException_Phase2+0xb4>
   227b8:	14c0051e 	bne	r2,r19,227d0 <_Unwind_RaiseException_Phase2+0x80>
   227bc:	a000131e 	bne	r20,zero,2280c <_Unwind_RaiseException_Phase2+0xbc>
   227c0:	88c00017 	ldw	r3,0(r17)
   227c4:	18c00017 	ldw	r3,0(r3)
   227c8:	88c00015 	stw	r3,0(r17)
   227cc:	183fed1e 	bne	r3,zero,22784 <_gp+0xfffe5964>
   227d0:	00800084 	movi	r2,2
   227d4:	dfc00717 	ldw	ra,28(sp)
   227d8:	dd000617 	ldw	r20,24(sp)
   227dc:	dcc00517 	ldw	r19,20(sp)
   227e0:	dc800417 	ldw	r18,16(sp)
   227e4:	dc400317 	ldw	r17,12(sp)
   227e8:	dc000217 	ldw	r16,8(sp)
   227ec:	dec00804 	addi	sp,sp,32
   227f0:	f800283a 	ret
   227f4:	40000526 	beq	r8,zero,2280c <_Unwind_RaiseException_Phase2+0xbc>
   227f8:	01400184 	movi	r5,6
   227fc:	05000104 	movi	r20,4
   22800:	003fe606 	br	2279c <_gp+0xfffe597c>
   22804:	9005883a 	mov	r2,r18
   22808:	003ff206 	br	227d4 <_gp+0xfffe59b4>
   2280c:	0022b580 	call	22b58 <abort>

00022810 <uw_install_context.isra.1>:
   22810:	20c00017 	ldw	r3,0(r4)
   22814:	deffff04 	addi	sp,sp,-4
   22818:	014000f4 	movhi	r5,3
   2281c:	19000917 	ldw	r4,36(r3)
   22820:	df000015 	stw	fp,0(sp)
   22824:	18800804 	addi	r2,r3,32
   22828:	d839883a 	mov	fp,sp
   2282c:	295aa204 	addi	r5,r5,27272
   22830:	28c00015 	stw	r3,0(r5)
   22834:	17000017 	ldw	fp,0(r2)
   22838:	1ec00a17 	ldw	sp,40(r3)
   2283c:	2000683a 	jmp	r4

00022840 <_Unwind_SjLj_Register>:
   22840:	008000f4 	movhi	r2,3
   22844:	109aa204 	addi	r2,r2,27272
   22848:	10c00017 	ldw	r3,0(r2)
   2284c:	11000015 	stw	r4,0(r2)
   22850:	20c00015 	stw	r3,0(r4)
   22854:	f800283a 	ret

00022858 <_Unwind_SjLj_Unregister>:
   22858:	20c00017 	ldw	r3,0(r4)
   2285c:	008000f4 	movhi	r2,3
   22860:	109aa204 	addi	r2,r2,27272
   22864:	10c00015 	stw	r3,0(r2)
   22868:	f800283a 	ret

0002286c <_Unwind_GetGR>:
   2286c:	20800017 	ldw	r2,0(r4)
   22870:	29400084 	addi	r5,r5,2
   22874:	294b883a 	add	r5,r5,r5
   22878:	294b883a 	add	r5,r5,r5
   2287c:	114b883a 	add	r5,r2,r5
   22880:	28800017 	ldw	r2,0(r5)
   22884:	f800283a 	ret

00022888 <_Unwind_GetCFA>:
   22888:	20800017 	ldw	r2,0(r4)
   2288c:	10000226 	beq	r2,zero,22898 <_Unwind_GetCFA+0x10>
   22890:	10800a17 	ldw	r2,40(r2)
   22894:	f800283a 	ret
   22898:	0005883a 	mov	r2,zero
   2289c:	f800283a 	ret

000228a0 <_Unwind_SetGR>:
   228a0:	20800017 	ldw	r2,0(r4)
   228a4:	29400084 	addi	r5,r5,2
   228a8:	294b883a 	add	r5,r5,r5
   228ac:	294b883a 	add	r5,r5,r5
   228b0:	114b883a 	add	r5,r2,r5
   228b4:	29800015 	stw	r6,0(r5)
   228b8:	f800283a 	ret

000228bc <_Unwind_GetIP>:
   228bc:	20800017 	ldw	r2,0(r4)
   228c0:	10800117 	ldw	r2,4(r2)
   228c4:	10800044 	addi	r2,r2,1
   228c8:	f800283a 	ret

000228cc <_Unwind_GetIPInfo>:
   228cc:	20800017 	ldw	r2,0(r4)
   228d0:	28000015 	stw	zero,0(r5)
   228d4:	10000326 	beq	r2,zero,228e4 <_Unwind_GetIPInfo+0x18>
   228d8:	10800117 	ldw	r2,4(r2)
   228dc:	10800044 	addi	r2,r2,1
   228e0:	f800283a 	ret
   228e4:	0005883a 	mov	r2,zero
   228e8:	f800283a 	ret

000228ec <_Unwind_SetIP>:
   228ec:	20800017 	ldw	r2,0(r4)
   228f0:	297fffc4 	addi	r5,r5,-1
   228f4:	11400115 	stw	r5,4(r2)
   228f8:	f800283a 	ret

000228fc <_Unwind_GetLanguageSpecificData>:
   228fc:	20800017 	ldw	r2,0(r4)
   22900:	10800717 	ldw	r2,28(r2)
   22904:	f800283a 	ret

00022908 <_Unwind_GetRegionStart>:
   22908:	0005883a 	mov	r2,zero
   2290c:	f800283a 	ret

00022910 <_Unwind_FindEnclosingFunction>:
   22910:	0005883a 	mov	r2,zero
   22914:	f800283a 	ret

00022918 <_Unwind_GetDataRelBase>:
   22918:	0005883a 	mov	r2,zero
   2291c:	f800283a 	ret

00022920 <_Unwind_GetTextRelBase>:
   22920:	0005883a 	mov	r2,zero
   22924:	f800283a 	ret

00022928 <_Unwind_SjLj_RaiseException>:
   22928:	008000f4 	movhi	r2,3
   2292c:	defff804 	addi	sp,sp,-32
   22930:	109aa204 	addi	r2,r2,27272
   22934:	dc800515 	stw	r18,20(sp)
   22938:	14800017 	ldw	r18,0(r2)
   2293c:	dfc00715 	stw	ra,28(sp)
   22940:	dcc00615 	stw	r19,24(sp)
   22944:	dc400415 	stw	r17,16(sp)
   22948:	dc000315 	stw	r16,12(sp)
   2294c:	dc800215 	stw	r18,8(sp)
   22950:	90001426 	beq	r18,zero,229a4 <_Unwind_SjLj_RaiseException+0x7c>
   22954:	2021883a 	mov	r16,r4
   22958:	9005883a 	mov	r2,r18
   2295c:	04400184 	movi	r17,6
   22960:	04c00204 	movi	r19,8
   22964:	10800617 	ldw	r2,24(r2)
   22968:	10000a26 	beq	r2,zero,22994 <_Unwind_SjLj_RaiseException+0x6c>
   2296c:	81800017 	ldw	r6,0(r16)
   22970:	81c00117 	ldw	r7,4(r16)
   22974:	01400044 	movi	r5,1
   22978:	d8c00204 	addi	r3,sp,8
   2297c:	d8c00115 	stw	r3,4(sp)
   22980:	dc000015 	stw	r16,0(sp)
   22984:	2809883a 	mov	r4,r5
   22988:	103ee83a 	callr	r2
   2298c:	14400d26 	beq	r2,r17,229c4 <_Unwind_SjLj_RaiseException+0x9c>
   22990:	14c0171e 	bne	r2,r19,229f0 <_Unwind_SjLj_RaiseException+0xc8>
   22994:	d8800217 	ldw	r2,8(sp)
   22998:	10800017 	ldw	r2,0(r2)
   2299c:	d8800215 	stw	r2,8(sp)
   229a0:	103ff01e 	bne	r2,zero,22964 <_gp+0xfffe5b44>
   229a4:	00800144 	movi	r2,5
   229a8:	dfc00717 	ldw	ra,28(sp)
   229ac:	dcc00617 	ldw	r19,24(sp)
   229b0:	dc800517 	ldw	r18,20(sp)
   229b4:	dc400417 	ldw	r17,16(sp)
   229b8:	dc000317 	ldw	r16,12(sp)
   229bc:	dec00804 	addi	sp,sp,32
   229c0:	f800283a 	ret
   229c4:	d8800217 	ldw	r2,8(sp)
   229c8:	80000315 	stw	zero,12(r16)
   229cc:	d9400204 	addi	r5,sp,8
   229d0:	80800415 	stw	r2,16(r16)
   229d4:	8009883a 	mov	r4,r16
   229d8:	dc800215 	stw	r18,8(sp)
   229dc:	00227500 	call	22750 <_Unwind_RaiseException_Phase2>
   229e0:	00c001c4 	movi	r3,7
   229e4:	10fff01e 	bne	r2,r3,229a8 <_gp+0xfffe5b88>
   229e8:	d9000204 	addi	r4,sp,8
   229ec:	00228100 	call	22810 <uw_install_context.isra.1>
   229f0:	008000c4 	movi	r2,3
   229f4:	003fec06 	br	229a8 <_gp+0xfffe5b88>

000229f8 <_Unwind_SjLj_ForcedUnwind>:
   229f8:	00c000f4 	movhi	r3,3
   229fc:	18daa204 	addi	r3,r3,27272
   22a00:	defffe04 	addi	sp,sp,-8
   22a04:	18c00017 	ldw	r3,0(r3)
   22a08:	dfc00115 	stw	ra,4(sp)
   22a0c:	21400315 	stw	r5,12(r4)
   22a10:	21800415 	stw	r6,16(r4)
   22a14:	d80b883a 	mov	r5,sp
   22a18:	d8c00015 	stw	r3,0(sp)
   22a1c:	00226380 	call	22638 <_Unwind_ForcedUnwind_Phase2>
   22a20:	00c001c4 	movi	r3,7
   22a24:	10c00326 	beq	r2,r3,22a34 <_Unwind_SjLj_ForcedUnwind+0x3c>
   22a28:	dfc00117 	ldw	ra,4(sp)
   22a2c:	dec00204 	addi	sp,sp,8
   22a30:	f800283a 	ret
   22a34:	d809883a 	mov	r4,sp
   22a38:	00228100 	call	22810 <uw_install_context.isra.1>

00022a3c <_Unwind_SjLj_Resume>:
   22a3c:	00c000f4 	movhi	r3,3
   22a40:	18daa204 	addi	r3,r3,27272
   22a44:	18c00017 	ldw	r3,0(r3)
   22a48:	20800317 	ldw	r2,12(r4)
   22a4c:	defffe04 	addi	sp,sp,-8
   22a50:	dfc00115 	stw	ra,4(sp)
   22a54:	d8c00015 	stw	r3,0(sp)
   22a58:	d80b883a 	mov	r5,sp
   22a5c:	1000041e 	bne	r2,zero,22a70 <_Unwind_SjLj_Resume+0x34>
   22a60:	00227500 	call	22750 <_Unwind_RaiseException_Phase2>
   22a64:	00c001c4 	movi	r3,7
   22a68:	10c00326 	beq	r2,r3,22a78 <_Unwind_SjLj_Resume+0x3c>
   22a6c:	0022b580 	call	22b58 <abort>
   22a70:	00226380 	call	22638 <_Unwind_ForcedUnwind_Phase2>
   22a74:	003ffb06 	br	22a64 <_gp+0xfffe5c44>
   22a78:	d809883a 	mov	r4,sp
   22a7c:	00228100 	call	22810 <uw_install_context.isra.1>

00022a80 <_Unwind_SjLj_Resume_or_Rethrow>:
   22a80:	20800317 	ldw	r2,12(r4)
   22a84:	defffe04 	addi	sp,sp,-8
   22a88:	dfc00115 	stw	ra,4(sp)
   22a8c:	1000041e 	bne	r2,zero,22aa0 <_Unwind_SjLj_Resume_or_Rethrow+0x20>
   22a90:	00229280 	call	22928 <_Unwind_SjLj_RaiseException>
   22a94:	dfc00117 	ldw	ra,4(sp)
   22a98:	dec00204 	addi	sp,sp,8
   22a9c:	f800283a 	ret
   22aa0:	008000f4 	movhi	r2,3
   22aa4:	109aa204 	addi	r2,r2,27272
   22aa8:	10800017 	ldw	r2,0(r2)
   22aac:	d80b883a 	mov	r5,sp
   22ab0:	d8800015 	stw	r2,0(sp)
   22ab4:	00226380 	call	22638 <_Unwind_ForcedUnwind_Phase2>
   22ab8:	00c001c4 	movi	r3,7
   22abc:	10c00126 	beq	r2,r3,22ac4 <_Unwind_SjLj_Resume_or_Rethrow+0x44>
   22ac0:	0022b580 	call	22b58 <abort>
   22ac4:	d809883a 	mov	r4,sp
   22ac8:	00228100 	call	22810 <uw_install_context.isra.1>

00022acc <_Unwind_DeleteException>:
   22acc:	20800217 	ldw	r2,8(r4)
   22ad0:	10000326 	beq	r2,zero,22ae0 <_Unwind_DeleteException+0x14>
   22ad4:	200b883a 	mov	r5,r4
   22ad8:	01000044 	movi	r4,1
   22adc:	1000683a 	jmp	r2
   22ae0:	f800283a 	ret

00022ae4 <_Unwind_Backtrace>:
   22ae4:	008000f4 	movhi	r2,3
   22ae8:	109aa204 	addi	r2,r2,27272
   22aec:	10800017 	ldw	r2,0(r2)
   22af0:	defffc04 	addi	sp,sp,-16
   22af4:	dc400215 	stw	r17,8(sp)
   22af8:	dc000115 	stw	r16,4(sp)
   22afc:	dfc00315 	stw	ra,12(sp)
   22b00:	2023883a 	mov	r17,r4
   22b04:	2821883a 	mov	r16,r5
   22b08:	d8800015 	stw	r2,0(sp)
   22b0c:	00000506 	br	22b24 <_Unwind_Backtrace+0x40>
   22b10:	883ee83a 	callr	r17
   22b14:	10000e1e 	bne	r2,zero,22b50 <_Unwind_Backtrace+0x6c>
   22b18:	d8800017 	ldw	r2,0(sp)
   22b1c:	10800017 	ldw	r2,0(r2)
   22b20:	d8800015 	stw	r2,0(sp)
   22b24:	800b883a 	mov	r5,r16
   22b28:	d809883a 	mov	r4,sp
   22b2c:	103ff81e 	bne	r2,zero,22b10 <_gp+0xfffe5cf0>
   22b30:	883ee83a 	callr	r17
   22b34:	1000061e 	bne	r2,zero,22b50 <_Unwind_Backtrace+0x6c>
   22b38:	00800144 	movi	r2,5
   22b3c:	dfc00317 	ldw	ra,12(sp)
   22b40:	dc400217 	ldw	r17,8(sp)
   22b44:	dc000117 	ldw	r16,4(sp)
   22b48:	dec00404 	addi	sp,sp,16
   22b4c:	f800283a 	ret
   22b50:	008000c4 	movi	r2,3
   22b54:	003ff906 	br	22b3c <_gp+0xfffe5d1c>

00022b58 <abort>:
   22b58:	deffff04 	addi	sp,sp,-4
   22b5c:	01000184 	movi	r4,6
   22b60:	dfc00015 	stw	ra,0(sp)
   22b64:	00238b40 	call	238b4 <raise>
   22b68:	01000044 	movi	r4,1
   22b6c:	002f8f40 	call	2f8f4 <_exit>

00022b70 <malloc>:
   22b70:	008000f4 	movhi	r2,3
   22b74:	10939904 	addi	r2,r2,20068
   22b78:	200b883a 	mov	r5,r4
   22b7c:	11000017 	ldw	r4,0(r2)
   22b80:	0022b981 	jmpi	22b98 <_malloc_r>

00022b84 <free>:
   22b84:	008000f4 	movhi	r2,3
   22b88:	10939904 	addi	r2,r2,20068
   22b8c:	200b883a 	mov	r5,r4
   22b90:	11000017 	ldw	r4,0(r2)
   22b94:	0027ef01 	jmpi	27ef0 <_free_r>

00022b98 <_malloc_r>:
   22b98:	defff504 	addi	sp,sp,-44
   22b9c:	dc800315 	stw	r18,12(sp)
   22ba0:	dfc00a15 	stw	ra,40(sp)
   22ba4:	df000915 	stw	fp,36(sp)
   22ba8:	ddc00815 	stw	r23,32(sp)
   22bac:	dd800715 	stw	r22,28(sp)
   22bb0:	dd400615 	stw	r21,24(sp)
   22bb4:	dd000515 	stw	r20,20(sp)
   22bb8:	dcc00415 	stw	r19,16(sp)
   22bbc:	dc400215 	stw	r17,8(sp)
   22bc0:	dc000115 	stw	r16,4(sp)
   22bc4:	288002c4 	addi	r2,r5,11
   22bc8:	00c00584 	movi	r3,22
   22bcc:	2025883a 	mov	r18,r4
   22bd0:	18807f2e 	bgeu	r3,r2,22dd0 <_malloc_r+0x238>
   22bd4:	047ffe04 	movi	r17,-8
   22bd8:	1462703a 	and	r17,r2,r17
   22bdc:	8800a316 	blt	r17,zero,22e6c <_malloc_r+0x2d4>
   22be0:	8940a236 	bltu	r17,r5,22e6c <_malloc_r+0x2d4>
   22be4:	00300540 	call	30054 <__malloc_lock>
   22be8:	00807dc4 	movi	r2,503
   22bec:	1441e92e 	bgeu	r2,r17,23394 <_malloc_r+0x7fc>
   22bf0:	8804d27a 	srli	r2,r17,9
   22bf4:	1000a126 	beq	r2,zero,22e7c <_malloc_r+0x2e4>
   22bf8:	00c00104 	movi	r3,4
   22bfc:	18811e36 	bltu	r3,r2,23078 <_malloc_r+0x4e0>
   22c00:	8804d1ba 	srli	r2,r17,6
   22c04:	12000e44 	addi	r8,r2,57
   22c08:	11c00e04 	addi	r7,r2,56
   22c0c:	4209883a 	add	r4,r8,r8
   22c10:	04c000f4 	movhi	r19,3
   22c14:	2109883a 	add	r4,r4,r4
   22c18:	9cccac04 	addi	r19,r19,12976
   22c1c:	2109883a 	add	r4,r4,r4
   22c20:	9909883a 	add	r4,r19,r4
   22c24:	24000117 	ldw	r16,4(r4)
   22c28:	213ffe04 	addi	r4,r4,-8
   22c2c:	24009726 	beq	r4,r16,22e8c <_malloc_r+0x2f4>
   22c30:	80800117 	ldw	r2,4(r16)
   22c34:	01bfff04 	movi	r6,-4
   22c38:	014003c4 	movi	r5,15
   22c3c:	1184703a 	and	r2,r2,r6
   22c40:	1447c83a 	sub	r3,r2,r17
   22c44:	28c00716 	blt	r5,r3,22c64 <_malloc_r+0xcc>
   22c48:	1800920e 	bge	r3,zero,22e94 <_malloc_r+0x2fc>
   22c4c:	84000317 	ldw	r16,12(r16)
   22c50:	24008e26 	beq	r4,r16,22e8c <_malloc_r+0x2f4>
   22c54:	80800117 	ldw	r2,4(r16)
   22c58:	1184703a 	and	r2,r2,r6
   22c5c:	1447c83a 	sub	r3,r2,r17
   22c60:	28fff90e 	bge	r5,r3,22c48 <_gp+0xfffe5e28>
   22c64:	3809883a 	mov	r4,r7
   22c68:	018000f4 	movhi	r6,3
   22c6c:	9c000417 	ldw	r16,16(r19)
   22c70:	318cac04 	addi	r6,r6,12976
   22c74:	32000204 	addi	r8,r6,8
   22c78:	82013426 	beq	r16,r8,2314c <_malloc_r+0x5b4>
   22c7c:	80c00117 	ldw	r3,4(r16)
   22c80:	00bfff04 	movi	r2,-4
   22c84:	188e703a 	and	r7,r3,r2
   22c88:	3c45c83a 	sub	r2,r7,r17
   22c8c:	00c003c4 	movi	r3,15
   22c90:	18811f16 	blt	r3,r2,23110 <_malloc_r+0x578>
   22c94:	32000515 	stw	r8,20(r6)
   22c98:	32000415 	stw	r8,16(r6)
   22c9c:	10007f0e 	bge	r2,zero,22e9c <_malloc_r+0x304>
   22ca0:	00807fc4 	movi	r2,511
   22ca4:	11c0fd36 	bltu	r2,r7,2309c <_malloc_r+0x504>
   22ca8:	3806d0fa 	srli	r3,r7,3
   22cac:	01c00044 	movi	r7,1
   22cb0:	30800117 	ldw	r2,4(r6)
   22cb4:	19400044 	addi	r5,r3,1
   22cb8:	294b883a 	add	r5,r5,r5
   22cbc:	1807d0ba 	srai	r3,r3,2
   22cc0:	294b883a 	add	r5,r5,r5
   22cc4:	294b883a 	add	r5,r5,r5
   22cc8:	298b883a 	add	r5,r5,r6
   22ccc:	38c6983a 	sll	r3,r7,r3
   22cd0:	29c00017 	ldw	r7,0(r5)
   22cd4:	2a7ffe04 	addi	r9,r5,-8
   22cd8:	1886b03a 	or	r3,r3,r2
   22cdc:	82400315 	stw	r9,12(r16)
   22ce0:	81c00215 	stw	r7,8(r16)
   22ce4:	30c00115 	stw	r3,4(r6)
   22ce8:	2c000015 	stw	r16,0(r5)
   22cec:	3c000315 	stw	r16,12(r7)
   22cf0:	2005d0ba 	srai	r2,r4,2
   22cf4:	01400044 	movi	r5,1
   22cf8:	288a983a 	sll	r5,r5,r2
   22cfc:	19406f36 	bltu	r3,r5,22ebc <_malloc_r+0x324>
   22d00:	28c4703a 	and	r2,r5,r3
   22d04:	10000a1e 	bne	r2,zero,22d30 <_malloc_r+0x198>
   22d08:	00bfff04 	movi	r2,-4
   22d0c:	294b883a 	add	r5,r5,r5
   22d10:	2088703a 	and	r4,r4,r2
   22d14:	28c4703a 	and	r2,r5,r3
   22d18:	21000104 	addi	r4,r4,4
   22d1c:	1000041e 	bne	r2,zero,22d30 <_malloc_r+0x198>
   22d20:	294b883a 	add	r5,r5,r5
   22d24:	28c4703a 	and	r2,r5,r3
   22d28:	21000104 	addi	r4,r4,4
   22d2c:	103ffc26 	beq	r2,zero,22d20 <_gp+0xfffe5f00>
   22d30:	02bfff04 	movi	r10,-4
   22d34:	024003c4 	movi	r9,15
   22d38:	21800044 	addi	r6,r4,1
   22d3c:	318d883a 	add	r6,r6,r6
   22d40:	318d883a 	add	r6,r6,r6
   22d44:	318d883a 	add	r6,r6,r6
   22d48:	998d883a 	add	r6,r19,r6
   22d4c:	333ffe04 	addi	r12,r6,-8
   22d50:	2017883a 	mov	r11,r4
   22d54:	31800104 	addi	r6,r6,4
   22d58:	34000017 	ldw	r16,0(r6)
   22d5c:	31fffd04 	addi	r7,r6,-12
   22d60:	81c0041e 	bne	r16,r7,22d74 <_malloc_r+0x1dc>
   22d64:	0000fb06 	br	23154 <_malloc_r+0x5bc>
   22d68:	1801030e 	bge	r3,zero,23178 <_malloc_r+0x5e0>
   22d6c:	84000317 	ldw	r16,12(r16)
   22d70:	81c0f826 	beq	r16,r7,23154 <_malloc_r+0x5bc>
   22d74:	80800117 	ldw	r2,4(r16)
   22d78:	1284703a 	and	r2,r2,r10
   22d7c:	1447c83a 	sub	r3,r2,r17
   22d80:	48fff90e 	bge	r9,r3,22d68 <_gp+0xfffe5f48>
   22d84:	80800317 	ldw	r2,12(r16)
   22d88:	81000217 	ldw	r4,8(r16)
   22d8c:	89400054 	ori	r5,r17,1
   22d90:	81400115 	stw	r5,4(r16)
   22d94:	20800315 	stw	r2,12(r4)
   22d98:	11000215 	stw	r4,8(r2)
   22d9c:	8463883a 	add	r17,r16,r17
   22da0:	9c400515 	stw	r17,20(r19)
   22da4:	9c400415 	stw	r17,16(r19)
   22da8:	18800054 	ori	r2,r3,1
   22dac:	88800115 	stw	r2,4(r17)
   22db0:	8a000315 	stw	r8,12(r17)
   22db4:	8a000215 	stw	r8,8(r17)
   22db8:	88e3883a 	add	r17,r17,r3
   22dbc:	88c00015 	stw	r3,0(r17)
   22dc0:	9009883a 	mov	r4,r18
   22dc4:	00300780 	call	30078 <__malloc_unlock>
   22dc8:	80800204 	addi	r2,r16,8
   22dcc:	00001b06 	br	22e3c <_malloc_r+0x2a4>
   22dd0:	04400404 	movi	r17,16
   22dd4:	89402536 	bltu	r17,r5,22e6c <_malloc_r+0x2d4>
   22dd8:	00300540 	call	30054 <__malloc_lock>
   22ddc:	00800184 	movi	r2,6
   22de0:	01000084 	movi	r4,2
   22de4:	04c000f4 	movhi	r19,3
   22de8:	1085883a 	add	r2,r2,r2
   22dec:	9cccac04 	addi	r19,r19,12976
   22df0:	1085883a 	add	r2,r2,r2
   22df4:	9885883a 	add	r2,r19,r2
   22df8:	14000117 	ldw	r16,4(r2)
   22dfc:	10fffe04 	addi	r3,r2,-8
   22e00:	80c0d926 	beq	r16,r3,23168 <_malloc_r+0x5d0>
   22e04:	80c00117 	ldw	r3,4(r16)
   22e08:	81000317 	ldw	r4,12(r16)
   22e0c:	00bfff04 	movi	r2,-4
   22e10:	1884703a 	and	r2,r3,r2
   22e14:	81400217 	ldw	r5,8(r16)
   22e18:	8085883a 	add	r2,r16,r2
   22e1c:	10c00117 	ldw	r3,4(r2)
   22e20:	29000315 	stw	r4,12(r5)
   22e24:	21400215 	stw	r5,8(r4)
   22e28:	18c00054 	ori	r3,r3,1
   22e2c:	10c00115 	stw	r3,4(r2)
   22e30:	9009883a 	mov	r4,r18
   22e34:	00300780 	call	30078 <__malloc_unlock>
   22e38:	80800204 	addi	r2,r16,8
   22e3c:	dfc00a17 	ldw	ra,40(sp)
   22e40:	df000917 	ldw	fp,36(sp)
   22e44:	ddc00817 	ldw	r23,32(sp)
   22e48:	dd800717 	ldw	r22,28(sp)
   22e4c:	dd400617 	ldw	r21,24(sp)
   22e50:	dd000517 	ldw	r20,20(sp)
   22e54:	dcc00417 	ldw	r19,16(sp)
   22e58:	dc800317 	ldw	r18,12(sp)
   22e5c:	dc400217 	ldw	r17,8(sp)
   22e60:	dc000117 	ldw	r16,4(sp)
   22e64:	dec00b04 	addi	sp,sp,44
   22e68:	f800283a 	ret
   22e6c:	00800304 	movi	r2,12
   22e70:	90800015 	stw	r2,0(r18)
   22e74:	0005883a 	mov	r2,zero
   22e78:	003ff006 	br	22e3c <_gp+0xfffe601c>
   22e7c:	01002004 	movi	r4,128
   22e80:	02001004 	movi	r8,64
   22e84:	01c00fc4 	movi	r7,63
   22e88:	003f6106 	br	22c10 <_gp+0xfffe5df0>
   22e8c:	4009883a 	mov	r4,r8
   22e90:	003f7506 	br	22c68 <_gp+0xfffe5e48>
   22e94:	81000317 	ldw	r4,12(r16)
   22e98:	003fde06 	br	22e14 <_gp+0xfffe5ff4>
   22e9c:	81c5883a 	add	r2,r16,r7
   22ea0:	11400117 	ldw	r5,4(r2)
   22ea4:	9009883a 	mov	r4,r18
   22ea8:	29400054 	ori	r5,r5,1
   22eac:	11400115 	stw	r5,4(r2)
   22eb0:	00300780 	call	30078 <__malloc_unlock>
   22eb4:	80800204 	addi	r2,r16,8
   22eb8:	003fe006 	br	22e3c <_gp+0xfffe601c>
   22ebc:	9c000217 	ldw	r16,8(r19)
   22ec0:	00bfff04 	movi	r2,-4
   22ec4:	85800117 	ldw	r22,4(r16)
   22ec8:	b0ac703a 	and	r22,r22,r2
   22ecc:	b4400336 	bltu	r22,r17,22edc <_malloc_r+0x344>
   22ed0:	b445c83a 	sub	r2,r22,r17
   22ed4:	00c003c4 	movi	r3,15
   22ed8:	18805d16 	blt	r3,r2,23050 <_malloc_r+0x4b8>
   22edc:	05c000f4 	movhi	r23,3
   22ee0:	008000f4 	movhi	r2,3
   22ee4:	109aa504 	addi	r2,r2,27284
   22ee8:	bdd39604 	addi	r23,r23,20056
   22eec:	15400017 	ldw	r21,0(r2)
   22ef0:	b8c00017 	ldw	r3,0(r23)
   22ef4:	00bfffc4 	movi	r2,-1
   22ef8:	858d883a 	add	r6,r16,r22
   22efc:	8d6b883a 	add	r21,r17,r21
   22f00:	1880ea26 	beq	r3,r2,232ac <_malloc_r+0x714>
   22f04:	ad4403c4 	addi	r21,r21,4111
   22f08:	00bc0004 	movi	r2,-4096
   22f0c:	a8aa703a 	and	r21,r21,r2
   22f10:	a80b883a 	mov	r5,r21
   22f14:	9009883a 	mov	r4,r18
   22f18:	d9800015 	stw	r6,0(sp)
   22f1c:	002360c0 	call	2360c <_sbrk_r>
   22f20:	1029883a 	mov	r20,r2
   22f24:	00bfffc4 	movi	r2,-1
   22f28:	d9800017 	ldw	r6,0(sp)
   22f2c:	a080e826 	beq	r20,r2,232d0 <_malloc_r+0x738>
   22f30:	a180a636 	bltu	r20,r6,231cc <_malloc_r+0x634>
   22f34:	070000f4 	movhi	fp,3
   22f38:	e71ab504 	addi	fp,fp,27348
   22f3c:	e0800017 	ldw	r2,0(fp)
   22f40:	a887883a 	add	r3,r21,r2
   22f44:	e0c00015 	stw	r3,0(fp)
   22f48:	3500e626 	beq	r6,r20,232e4 <_malloc_r+0x74c>
   22f4c:	b9000017 	ldw	r4,0(r23)
   22f50:	00bfffc4 	movi	r2,-1
   22f54:	2080ee26 	beq	r4,r2,23310 <_malloc_r+0x778>
   22f58:	a185c83a 	sub	r2,r20,r6
   22f5c:	10c5883a 	add	r2,r2,r3
   22f60:	e0800015 	stw	r2,0(fp)
   22f64:	a0c001cc 	andi	r3,r20,7
   22f68:	1800bc26 	beq	r3,zero,2325c <_malloc_r+0x6c4>
   22f6c:	a0e9c83a 	sub	r20,r20,r3
   22f70:	00840204 	movi	r2,4104
   22f74:	a5000204 	addi	r20,r20,8
   22f78:	10c7c83a 	sub	r3,r2,r3
   22f7c:	a545883a 	add	r2,r20,r21
   22f80:	1083ffcc 	andi	r2,r2,4095
   22f84:	18abc83a 	sub	r21,r3,r2
   22f88:	a80b883a 	mov	r5,r21
   22f8c:	9009883a 	mov	r4,r18
   22f90:	002360c0 	call	2360c <_sbrk_r>
   22f94:	00ffffc4 	movi	r3,-1
   22f98:	10c0e126 	beq	r2,r3,23320 <_malloc_r+0x788>
   22f9c:	1505c83a 	sub	r2,r2,r20
   22fa0:	1545883a 	add	r2,r2,r21
   22fa4:	10800054 	ori	r2,r2,1
   22fa8:	e0c00017 	ldw	r3,0(fp)
   22fac:	9d000215 	stw	r20,8(r19)
   22fb0:	a0800115 	stw	r2,4(r20)
   22fb4:	a8c7883a 	add	r3,r21,r3
   22fb8:	e0c00015 	stw	r3,0(fp)
   22fbc:	84c00e26 	beq	r16,r19,22ff8 <_malloc_r+0x460>
   22fc0:	018003c4 	movi	r6,15
   22fc4:	3580a72e 	bgeu	r6,r22,23264 <_malloc_r+0x6cc>
   22fc8:	81400117 	ldw	r5,4(r16)
   22fcc:	013ffe04 	movi	r4,-8
   22fd0:	b0bffd04 	addi	r2,r22,-12
   22fd4:	1104703a 	and	r2,r2,r4
   22fd8:	2900004c 	andi	r4,r5,1
   22fdc:	2088b03a 	or	r4,r4,r2
   22fe0:	81000115 	stw	r4,4(r16)
   22fe4:	01400144 	movi	r5,5
   22fe8:	8089883a 	add	r4,r16,r2
   22fec:	21400115 	stw	r5,4(r4)
   22ff0:	21400215 	stw	r5,8(r4)
   22ff4:	3080cd36 	bltu	r6,r2,2332c <_malloc_r+0x794>
   22ff8:	008000f4 	movhi	r2,3
   22ffc:	109aa404 	addi	r2,r2,27280
   23000:	11000017 	ldw	r4,0(r2)
   23004:	20c0012e 	bgeu	r4,r3,2300c <_malloc_r+0x474>
   23008:	10c00015 	stw	r3,0(r2)
   2300c:	008000f4 	movhi	r2,3
   23010:	109aa304 	addi	r2,r2,27276
   23014:	11000017 	ldw	r4,0(r2)
   23018:	9c000217 	ldw	r16,8(r19)
   2301c:	20c0012e 	bgeu	r4,r3,23024 <_malloc_r+0x48c>
   23020:	10c00015 	stw	r3,0(r2)
   23024:	80c00117 	ldw	r3,4(r16)
   23028:	00bfff04 	movi	r2,-4
   2302c:	1886703a 	and	r3,r3,r2
   23030:	1c45c83a 	sub	r2,r3,r17
   23034:	1c400236 	bltu	r3,r17,23040 <_malloc_r+0x4a8>
   23038:	00c003c4 	movi	r3,15
   2303c:	18800416 	blt	r3,r2,23050 <_malloc_r+0x4b8>
   23040:	9009883a 	mov	r4,r18
   23044:	00300780 	call	30078 <__malloc_unlock>
   23048:	0005883a 	mov	r2,zero
   2304c:	003f7b06 	br	22e3c <_gp+0xfffe601c>
   23050:	88c00054 	ori	r3,r17,1
   23054:	80c00115 	stw	r3,4(r16)
   23058:	8463883a 	add	r17,r16,r17
   2305c:	10800054 	ori	r2,r2,1
   23060:	9c400215 	stw	r17,8(r19)
   23064:	88800115 	stw	r2,4(r17)
   23068:	9009883a 	mov	r4,r18
   2306c:	00300780 	call	30078 <__malloc_unlock>
   23070:	80800204 	addi	r2,r16,8
   23074:	003f7106 	br	22e3c <_gp+0xfffe601c>
   23078:	00c00504 	movi	r3,20
   2307c:	18804a2e 	bgeu	r3,r2,231a8 <_malloc_r+0x610>
   23080:	00c01504 	movi	r3,84
   23084:	18806e36 	bltu	r3,r2,23240 <_malloc_r+0x6a8>
   23088:	8804d33a 	srli	r2,r17,12
   2308c:	12001bc4 	addi	r8,r2,111
   23090:	11c01b84 	addi	r7,r2,110
   23094:	4209883a 	add	r4,r8,r8
   23098:	003edd06 	br	22c10 <_gp+0xfffe5df0>
   2309c:	3804d27a 	srli	r2,r7,9
   230a0:	00c00104 	movi	r3,4
   230a4:	1880442e 	bgeu	r3,r2,231b8 <_malloc_r+0x620>
   230a8:	00c00504 	movi	r3,20
   230ac:	18808136 	bltu	r3,r2,232b4 <_malloc_r+0x71c>
   230b0:	11401704 	addi	r5,r2,92
   230b4:	10c016c4 	addi	r3,r2,91
   230b8:	294b883a 	add	r5,r5,r5
   230bc:	294b883a 	add	r5,r5,r5
   230c0:	294b883a 	add	r5,r5,r5
   230c4:	994b883a 	add	r5,r19,r5
   230c8:	28800017 	ldw	r2,0(r5)
   230cc:	018000f4 	movhi	r6,3
   230d0:	297ffe04 	addi	r5,r5,-8
   230d4:	318cac04 	addi	r6,r6,12976
   230d8:	28806526 	beq	r5,r2,23270 <_malloc_r+0x6d8>
   230dc:	01bfff04 	movi	r6,-4
   230e0:	10c00117 	ldw	r3,4(r2)
   230e4:	1986703a 	and	r3,r3,r6
   230e8:	38c0022e 	bgeu	r7,r3,230f4 <_malloc_r+0x55c>
   230ec:	10800217 	ldw	r2,8(r2)
   230f0:	28bffb1e 	bne	r5,r2,230e0 <_gp+0xfffe62c0>
   230f4:	11400317 	ldw	r5,12(r2)
   230f8:	98c00117 	ldw	r3,4(r19)
   230fc:	81400315 	stw	r5,12(r16)
   23100:	80800215 	stw	r2,8(r16)
   23104:	2c000215 	stw	r16,8(r5)
   23108:	14000315 	stw	r16,12(r2)
   2310c:	003ef806 	br	22cf0 <_gp+0xfffe5ed0>
   23110:	88c00054 	ori	r3,r17,1
   23114:	80c00115 	stw	r3,4(r16)
   23118:	8463883a 	add	r17,r16,r17
   2311c:	34400515 	stw	r17,20(r6)
   23120:	34400415 	stw	r17,16(r6)
   23124:	10c00054 	ori	r3,r2,1
   23128:	8a000315 	stw	r8,12(r17)
   2312c:	8a000215 	stw	r8,8(r17)
   23130:	88c00115 	stw	r3,4(r17)
   23134:	88a3883a 	add	r17,r17,r2
   23138:	88800015 	stw	r2,0(r17)
   2313c:	9009883a 	mov	r4,r18
   23140:	00300780 	call	30078 <__malloc_unlock>
   23144:	80800204 	addi	r2,r16,8
   23148:	003f3c06 	br	22e3c <_gp+0xfffe601c>
   2314c:	30c00117 	ldw	r3,4(r6)
   23150:	003ee706 	br	22cf0 <_gp+0xfffe5ed0>
   23154:	5ac00044 	addi	r11,r11,1
   23158:	588000cc 	andi	r2,r11,3
   2315c:	31800204 	addi	r6,r6,8
   23160:	103efd1e 	bne	r2,zero,22d58 <_gp+0xfffe5f38>
   23164:	00002406 	br	231f8 <_malloc_r+0x660>
   23168:	14000317 	ldw	r16,12(r2)
   2316c:	143f251e 	bne	r2,r16,22e04 <_gp+0xfffe5fe4>
   23170:	21000084 	addi	r4,r4,2
   23174:	003ebc06 	br	22c68 <_gp+0xfffe5e48>
   23178:	8085883a 	add	r2,r16,r2
   2317c:	10c00117 	ldw	r3,4(r2)
   23180:	81000317 	ldw	r4,12(r16)
   23184:	81400217 	ldw	r5,8(r16)
   23188:	18c00054 	ori	r3,r3,1
   2318c:	10c00115 	stw	r3,4(r2)
   23190:	29000315 	stw	r4,12(r5)
   23194:	21400215 	stw	r5,8(r4)
   23198:	9009883a 	mov	r4,r18
   2319c:	00300780 	call	30078 <__malloc_unlock>
   231a0:	80800204 	addi	r2,r16,8
   231a4:	003f2506 	br	22e3c <_gp+0xfffe601c>
   231a8:	12001704 	addi	r8,r2,92
   231ac:	11c016c4 	addi	r7,r2,91
   231b0:	4209883a 	add	r4,r8,r8
   231b4:	003e9606 	br	22c10 <_gp+0xfffe5df0>
   231b8:	3804d1ba 	srli	r2,r7,6
   231bc:	11400e44 	addi	r5,r2,57
   231c0:	10c00e04 	addi	r3,r2,56
   231c4:	294b883a 	add	r5,r5,r5
   231c8:	003fbc06 	br	230bc <_gp+0xfffe629c>
   231cc:	84ff5926 	beq	r16,r19,22f34 <_gp+0xfffe6114>
   231d0:	008000f4 	movhi	r2,3
   231d4:	108cac04 	addi	r2,r2,12976
   231d8:	14000217 	ldw	r16,8(r2)
   231dc:	00bfff04 	movi	r2,-4
   231e0:	80c00117 	ldw	r3,4(r16)
   231e4:	1886703a 	and	r3,r3,r2
   231e8:	003f9106 	br	23030 <_gp+0xfffe6210>
   231ec:	60800217 	ldw	r2,8(r12)
   231f0:	213fffc4 	addi	r4,r4,-1
   231f4:	1300651e 	bne	r2,r12,2338c <_malloc_r+0x7f4>
   231f8:	208000cc 	andi	r2,r4,3
   231fc:	633ffe04 	addi	r12,r12,-8
   23200:	103ffa1e 	bne	r2,zero,231ec <_gp+0xfffe63cc>
   23204:	98800117 	ldw	r2,4(r19)
   23208:	0146303a 	nor	r3,zero,r5
   2320c:	1884703a 	and	r2,r3,r2
   23210:	98800115 	stw	r2,4(r19)
   23214:	294b883a 	add	r5,r5,r5
   23218:	117f2836 	bltu	r2,r5,22ebc <_gp+0xfffe609c>
   2321c:	283f2726 	beq	r5,zero,22ebc <_gp+0xfffe609c>
   23220:	2886703a 	and	r3,r5,r2
   23224:	5809883a 	mov	r4,r11
   23228:	183ec31e 	bne	r3,zero,22d38 <_gp+0xfffe5f18>
   2322c:	294b883a 	add	r5,r5,r5
   23230:	2886703a 	and	r3,r5,r2
   23234:	21000104 	addi	r4,r4,4
   23238:	183ffc26 	beq	r3,zero,2322c <_gp+0xfffe640c>
   2323c:	003ebe06 	br	22d38 <_gp+0xfffe5f18>
   23240:	00c05504 	movi	r3,340
   23244:	18801236 	bltu	r3,r2,23290 <_malloc_r+0x6f8>
   23248:	8804d3fa 	srli	r2,r17,15
   2324c:	12001e04 	addi	r8,r2,120
   23250:	11c01dc4 	addi	r7,r2,119
   23254:	4209883a 	add	r4,r8,r8
   23258:	003e6d06 	br	22c10 <_gp+0xfffe5df0>
   2325c:	00c40004 	movi	r3,4096
   23260:	003f4606 	br	22f7c <_gp+0xfffe615c>
   23264:	00800044 	movi	r2,1
   23268:	a0800115 	stw	r2,4(r20)
   2326c:	003f7406 	br	23040 <_gp+0xfffe6220>
   23270:	1805d0ba 	srai	r2,r3,2
   23274:	01c00044 	movi	r7,1
   23278:	30c00117 	ldw	r3,4(r6)
   2327c:	388e983a 	sll	r7,r7,r2
   23280:	2805883a 	mov	r2,r5
   23284:	38c6b03a 	or	r3,r7,r3
   23288:	30c00115 	stw	r3,4(r6)
   2328c:	003f9b06 	br	230fc <_gp+0xfffe62dc>
   23290:	00c15504 	movi	r3,1364
   23294:	18801a36 	bltu	r3,r2,23300 <_malloc_r+0x768>
   23298:	8804d4ba 	srli	r2,r17,18
   2329c:	12001f44 	addi	r8,r2,125
   232a0:	11c01f04 	addi	r7,r2,124
   232a4:	4209883a 	add	r4,r8,r8
   232a8:	003e5906 	br	22c10 <_gp+0xfffe5df0>
   232ac:	ad400404 	addi	r21,r21,16
   232b0:	003f1706 	br	22f10 <_gp+0xfffe60f0>
   232b4:	00c01504 	movi	r3,84
   232b8:	18802336 	bltu	r3,r2,23348 <_malloc_r+0x7b0>
   232bc:	3804d33a 	srli	r2,r7,12
   232c0:	11401bc4 	addi	r5,r2,111
   232c4:	10c01b84 	addi	r3,r2,110
   232c8:	294b883a 	add	r5,r5,r5
   232cc:	003f7b06 	br	230bc <_gp+0xfffe629c>
   232d0:	9c000217 	ldw	r16,8(r19)
   232d4:	00bfff04 	movi	r2,-4
   232d8:	80c00117 	ldw	r3,4(r16)
   232dc:	1886703a 	and	r3,r3,r2
   232e0:	003f5306 	br	23030 <_gp+0xfffe6210>
   232e4:	3083ffcc 	andi	r2,r6,4095
   232e8:	103f181e 	bne	r2,zero,22f4c <_gp+0xfffe612c>
   232ec:	99000217 	ldw	r4,8(r19)
   232f0:	b545883a 	add	r2,r22,r21
   232f4:	10800054 	ori	r2,r2,1
   232f8:	20800115 	stw	r2,4(r4)
   232fc:	003f3e06 	br	22ff8 <_gp+0xfffe61d8>
   23300:	01003f84 	movi	r4,254
   23304:	02001fc4 	movi	r8,127
   23308:	01c01f84 	movi	r7,126
   2330c:	003e4006 	br	22c10 <_gp+0xfffe5df0>
   23310:	008000f4 	movhi	r2,3
   23314:	10939604 	addi	r2,r2,20056
   23318:	15000015 	stw	r20,0(r2)
   2331c:	003f1106 	br	22f64 <_gp+0xfffe6144>
   23320:	00800044 	movi	r2,1
   23324:	002b883a 	mov	r21,zero
   23328:	003f1f06 	br	22fa8 <_gp+0xfffe6188>
   2332c:	81400204 	addi	r5,r16,8
   23330:	9009883a 	mov	r4,r18
   23334:	0027ef00 	call	27ef0 <_free_r>
   23338:	008000f4 	movhi	r2,3
   2333c:	109ab504 	addi	r2,r2,27348
   23340:	10c00017 	ldw	r3,0(r2)
   23344:	003f2c06 	br	22ff8 <_gp+0xfffe61d8>
   23348:	00c05504 	movi	r3,340
   2334c:	18800536 	bltu	r3,r2,23364 <_malloc_r+0x7cc>
   23350:	3804d3fa 	srli	r2,r7,15
   23354:	11401e04 	addi	r5,r2,120
   23358:	10c01dc4 	addi	r3,r2,119
   2335c:	294b883a 	add	r5,r5,r5
   23360:	003f5606 	br	230bc <_gp+0xfffe629c>
   23364:	00c15504 	movi	r3,1364
   23368:	18800536 	bltu	r3,r2,23380 <_malloc_r+0x7e8>
   2336c:	3804d4ba 	srli	r2,r7,18
   23370:	11401f44 	addi	r5,r2,125
   23374:	10c01f04 	addi	r3,r2,124
   23378:	294b883a 	add	r5,r5,r5
   2337c:	003f4f06 	br	230bc <_gp+0xfffe629c>
   23380:	01403f84 	movi	r5,254
   23384:	00c01f84 	movi	r3,126
   23388:	003f4c06 	br	230bc <_gp+0xfffe629c>
   2338c:	98800117 	ldw	r2,4(r19)
   23390:	003fa006 	br	23214 <_gp+0xfffe63f4>
   23394:	8808d0fa 	srli	r4,r17,3
   23398:	20800044 	addi	r2,r4,1
   2339c:	1085883a 	add	r2,r2,r2
   233a0:	003e9006 	br	22de4 <_gp+0xfffe5fc4>

000233a4 <memset>:
   233a4:	20c000cc 	andi	r3,r4,3
   233a8:	2005883a 	mov	r2,r4
   233ac:	18004426 	beq	r3,zero,234c0 <memset+0x11c>
   233b0:	31ffffc4 	addi	r7,r6,-1
   233b4:	30004026 	beq	r6,zero,234b8 <memset+0x114>
   233b8:	2813883a 	mov	r9,r5
   233bc:	200d883a 	mov	r6,r4
   233c0:	2007883a 	mov	r3,r4
   233c4:	00000406 	br	233d8 <memset+0x34>
   233c8:	3a3fffc4 	addi	r8,r7,-1
   233cc:	31800044 	addi	r6,r6,1
   233d0:	38003926 	beq	r7,zero,234b8 <memset+0x114>
   233d4:	400f883a 	mov	r7,r8
   233d8:	18c00044 	addi	r3,r3,1
   233dc:	32400005 	stb	r9,0(r6)
   233e0:	1a0000cc 	andi	r8,r3,3
   233e4:	403ff81e 	bne	r8,zero,233c8 <_gp+0xfffe65a8>
   233e8:	010000c4 	movi	r4,3
   233ec:	21c02d2e 	bgeu	r4,r7,234a4 <memset+0x100>
   233f0:	29003fcc 	andi	r4,r5,255
   233f4:	200c923a 	slli	r6,r4,8
   233f8:	3108b03a 	or	r4,r6,r4
   233fc:	200c943a 	slli	r6,r4,16
   23400:	218cb03a 	or	r6,r4,r6
   23404:	010003c4 	movi	r4,15
   23408:	21c0182e 	bgeu	r4,r7,2346c <memset+0xc8>
   2340c:	3b3ffc04 	addi	r12,r7,-16
   23410:	6018d13a 	srli	r12,r12,4
   23414:	1a000104 	addi	r8,r3,4
   23418:	1ac00204 	addi	r11,r3,8
   2341c:	6008913a 	slli	r4,r12,4
   23420:	1a800304 	addi	r10,r3,12
   23424:	1813883a 	mov	r9,r3
   23428:	21000504 	addi	r4,r4,20
   2342c:	1909883a 	add	r4,r3,r4
   23430:	49800015 	stw	r6,0(r9)
   23434:	41800015 	stw	r6,0(r8)
   23438:	59800015 	stw	r6,0(r11)
   2343c:	51800015 	stw	r6,0(r10)
   23440:	42000404 	addi	r8,r8,16
   23444:	4a400404 	addi	r9,r9,16
   23448:	5ac00404 	addi	r11,r11,16
   2344c:	52800404 	addi	r10,r10,16
   23450:	413ff71e 	bne	r8,r4,23430 <_gp+0xfffe6610>
   23454:	63000044 	addi	r12,r12,1
   23458:	6018913a 	slli	r12,r12,4
   2345c:	39c003cc 	andi	r7,r7,15
   23460:	010000c4 	movi	r4,3
   23464:	1b07883a 	add	r3,r3,r12
   23468:	21c00e2e 	bgeu	r4,r7,234a4 <memset+0x100>
   2346c:	1813883a 	mov	r9,r3
   23470:	3811883a 	mov	r8,r7
   23474:	010000c4 	movi	r4,3
   23478:	49800015 	stw	r6,0(r9)
   2347c:	423fff04 	addi	r8,r8,-4
   23480:	4a400104 	addi	r9,r9,4
   23484:	223ffc36 	bltu	r4,r8,23478 <_gp+0xfffe6658>
   23488:	393fff04 	addi	r4,r7,-4
   2348c:	2008d0ba 	srli	r4,r4,2
   23490:	39c000cc 	andi	r7,r7,3
   23494:	21000044 	addi	r4,r4,1
   23498:	2109883a 	add	r4,r4,r4
   2349c:	2109883a 	add	r4,r4,r4
   234a0:	1907883a 	add	r3,r3,r4
   234a4:	38000526 	beq	r7,zero,234bc <memset+0x118>
   234a8:	19cf883a 	add	r7,r3,r7
   234ac:	19400005 	stb	r5,0(r3)
   234b0:	18c00044 	addi	r3,r3,1
   234b4:	38fffd1e 	bne	r7,r3,234ac <_gp+0xfffe668c>
   234b8:	f800283a 	ret
   234bc:	f800283a 	ret
   234c0:	2007883a 	mov	r3,r4
   234c4:	300f883a 	mov	r7,r6
   234c8:	003fc706 	br	233e8 <_gp+0xfffe65c8>

000234cc <_printf_r>:
   234cc:	defffd04 	addi	sp,sp,-12
   234d0:	2805883a 	mov	r2,r5
   234d4:	dfc00015 	stw	ra,0(sp)
   234d8:	d9800115 	stw	r6,4(sp)
   234dc:	d9c00215 	stw	r7,8(sp)
   234e0:	21400217 	ldw	r5,8(r4)
   234e4:	d9c00104 	addi	r7,sp,4
   234e8:	100d883a 	mov	r6,r2
   234ec:	0023ad80 	call	23ad8 <___vfprintf_internal_r>
   234f0:	dfc00017 	ldw	ra,0(sp)
   234f4:	dec00304 	addi	sp,sp,12
   234f8:	f800283a 	ret

000234fc <printf>:
   234fc:	defffc04 	addi	sp,sp,-16
   23500:	dfc00015 	stw	ra,0(sp)
   23504:	d9400115 	stw	r5,4(sp)
   23508:	d9800215 	stw	r6,8(sp)
   2350c:	d9c00315 	stw	r7,12(sp)
   23510:	008000f4 	movhi	r2,3
   23514:	10939904 	addi	r2,r2,20068
   23518:	10800017 	ldw	r2,0(r2)
   2351c:	200b883a 	mov	r5,r4
   23520:	d9800104 	addi	r6,sp,4
   23524:	11000217 	ldw	r4,8(r2)
   23528:	0025cd00 	call	25cd0 <__vfprintf_internal>
   2352c:	dfc00017 	ldw	ra,0(sp)
   23530:	dec00404 	addi	sp,sp,16
   23534:	f800283a 	ret

00023538 <_puts_r>:
   23538:	defff604 	addi	sp,sp,-40
   2353c:	dc000715 	stw	r16,28(sp)
   23540:	2021883a 	mov	r16,r4
   23544:	2809883a 	mov	r4,r5
   23548:	dc400815 	stw	r17,32(sp)
   2354c:	dfc00915 	stw	ra,36(sp)
   23550:	2823883a 	mov	r17,r5
   23554:	0023a400 	call	23a40 <strlen>
   23558:	10c00044 	addi	r3,r2,1
   2355c:	d8800115 	stw	r2,4(sp)
   23560:	008000f4 	movhi	r2,3
   23564:	108be804 	addi	r2,r2,12192
   23568:	d8800215 	stw	r2,8(sp)
   2356c:	00800044 	movi	r2,1
   23570:	d8800315 	stw	r2,12(sp)
   23574:	00800084 	movi	r2,2
   23578:	dc400015 	stw	r17,0(sp)
   2357c:	d8c00615 	stw	r3,24(sp)
   23580:	dec00415 	stw	sp,16(sp)
   23584:	d8800515 	stw	r2,20(sp)
   23588:	80000226 	beq	r16,zero,23594 <_puts_r+0x5c>
   2358c:	80800e17 	ldw	r2,56(r16)
   23590:	10001426 	beq	r2,zero,235e4 <_puts_r+0xac>
   23594:	81400217 	ldw	r5,8(r16)
   23598:	2880030b 	ldhu	r2,12(r5)
   2359c:	10c8000c 	andi	r3,r2,8192
   235a0:	1800061e 	bne	r3,zero,235bc <_puts_r+0x84>
   235a4:	29001917 	ldw	r4,100(r5)
   235a8:	00f7ffc4 	movi	r3,-8193
   235ac:	10880014 	ori	r2,r2,8192
   235b0:	20c6703a 	and	r3,r4,r3
   235b4:	2880030d 	sth	r2,12(r5)
   235b8:	28c01915 	stw	r3,100(r5)
   235bc:	d9800404 	addi	r6,sp,16
   235c0:	8009883a 	mov	r4,r16
   235c4:	00282000 	call	28200 <__sfvwrite_r>
   235c8:	1000091e 	bne	r2,zero,235f0 <_puts_r+0xb8>
   235cc:	00800284 	movi	r2,10
   235d0:	dfc00917 	ldw	ra,36(sp)
   235d4:	dc400817 	ldw	r17,32(sp)
   235d8:	dc000717 	ldw	r16,28(sp)
   235dc:	dec00a04 	addi	sp,sp,40
   235e0:	f800283a 	ret
   235e4:	8009883a 	mov	r4,r16
   235e8:	0027d7c0 	call	27d7c <__sinit>
   235ec:	003fe906 	br	23594 <_gp+0xfffe6774>
   235f0:	00bfffc4 	movi	r2,-1
   235f4:	003ff606 	br	235d0 <_gp+0xfffe67b0>

000235f8 <puts>:
   235f8:	008000f4 	movhi	r2,3
   235fc:	10939904 	addi	r2,r2,20068
   23600:	200b883a 	mov	r5,r4
   23604:	11000017 	ldw	r4,0(r2)
   23608:	00235381 	jmpi	23538 <_puts_r>

0002360c <_sbrk_r>:
   2360c:	defffd04 	addi	sp,sp,-12
   23610:	dc000015 	stw	r16,0(sp)
   23614:	040000f4 	movhi	r16,3
   23618:	dc400115 	stw	r17,4(sp)
   2361c:	841aa604 	addi	r16,r16,27288
   23620:	2023883a 	mov	r17,r4
   23624:	2809883a 	mov	r4,r5
   23628:	dfc00215 	stw	ra,8(sp)
   2362c:	80000015 	stw	zero,0(r16)
   23630:	003048c0 	call	3048c <sbrk>
   23634:	00ffffc4 	movi	r3,-1
   23638:	10c00526 	beq	r2,r3,23650 <_sbrk_r+0x44>
   2363c:	dfc00217 	ldw	ra,8(sp)
   23640:	dc400117 	ldw	r17,4(sp)
   23644:	dc000017 	ldw	r16,0(sp)
   23648:	dec00304 	addi	sp,sp,12
   2364c:	f800283a 	ret
   23650:	80c00017 	ldw	r3,0(r16)
   23654:	183ff926 	beq	r3,zero,2363c <_gp+0xfffe681c>
   23658:	88c00015 	stw	r3,0(r17)
   2365c:	003ff706 	br	2363c <_gp+0xfffe681c>

00023660 <_init_signal_r>:
   23660:	2080b717 	ldw	r2,732(r4)
   23664:	10000226 	beq	r2,zero,23670 <_init_signal_r+0x10>
   23668:	0005883a 	mov	r2,zero
   2366c:	f800283a 	ret
   23670:	defffe04 	addi	sp,sp,-8
   23674:	01402004 	movi	r5,128
   23678:	dc000015 	stw	r16,0(sp)
   2367c:	dfc00115 	stw	ra,4(sp)
   23680:	2021883a 	mov	r16,r4
   23684:	0022b980 	call	22b98 <_malloc_r>
   23688:	8080b715 	stw	r2,732(r16)
   2368c:	10000d26 	beq	r2,zero,236c4 <_init_signal_r+0x64>
   23690:	0007883a 	mov	r3,zero
   23694:	01002004 	movi	r4,128
   23698:	00000106 	br	236a0 <_init_signal_r+0x40>
   2369c:	8080b717 	ldw	r2,732(r16)
   236a0:	10c5883a 	add	r2,r2,r3
   236a4:	10000015 	stw	zero,0(r2)
   236a8:	18c00104 	addi	r3,r3,4
   236ac:	193ffb1e 	bne	r3,r4,2369c <_gp+0xfffe687c>
   236b0:	0005883a 	mov	r2,zero
   236b4:	dfc00117 	ldw	ra,4(sp)
   236b8:	dc000017 	ldw	r16,0(sp)
   236bc:	dec00204 	addi	sp,sp,8
   236c0:	f800283a 	ret
   236c4:	00bfffc4 	movi	r2,-1
   236c8:	003ffa06 	br	236b4 <_gp+0xfffe6894>

000236cc <_signal_r>:
   236cc:	00c007c4 	movi	r3,31
   236d0:	19401536 	bltu	r3,r5,23728 <_signal_r+0x5c>
   236d4:	2080b717 	ldw	r2,732(r4)
   236d8:	defffc04 	addi	sp,sp,-16
   236dc:	dc800215 	stw	r18,8(sp)
   236e0:	dc400115 	stw	r17,4(sp)
   236e4:	dc000015 	stw	r16,0(sp)
   236e8:	dfc00315 	stw	ra,12(sp)
   236ec:	3023883a 	mov	r17,r6
   236f0:	2021883a 	mov	r16,r4
   236f4:	2825883a 	mov	r18,r5
   236f8:	10000f26 	beq	r2,zero,23738 <_signal_r+0x6c>
   236fc:	948b883a 	add	r5,r18,r18
   23700:	294b883a 	add	r5,r5,r5
   23704:	114b883a 	add	r5,r2,r5
   23708:	28800017 	ldw	r2,0(r5)
   2370c:	2c400015 	stw	r17,0(r5)
   23710:	dfc00317 	ldw	ra,12(sp)
   23714:	dc800217 	ldw	r18,8(sp)
   23718:	dc400117 	ldw	r17,4(sp)
   2371c:	dc000017 	ldw	r16,0(sp)
   23720:	dec00404 	addi	sp,sp,16
   23724:	f800283a 	ret
   23728:	00c00584 	movi	r3,22
   2372c:	20c00015 	stw	r3,0(r4)
   23730:	00bfffc4 	movi	r2,-1
   23734:	f800283a 	ret
   23738:	00236600 	call	23660 <_init_signal_r>
   2373c:	1000021e 	bne	r2,zero,23748 <_signal_r+0x7c>
   23740:	8080b717 	ldw	r2,732(r16)
   23744:	003fed06 	br	236fc <_gp+0xfffe68dc>
   23748:	00bfffc4 	movi	r2,-1
   2374c:	003ff006 	br	23710 <_gp+0xfffe68f0>

00023750 <_raise_r>:
   23750:	008007c4 	movi	r2,31
   23754:	11402936 	bltu	r2,r5,237fc <_raise_r+0xac>
   23758:	20c0b717 	ldw	r3,732(r4)
   2375c:	defffd04 	addi	sp,sp,-12
   23760:	dc400115 	stw	r17,4(sp)
   23764:	dc000015 	stw	r16,0(sp)
   23768:	dfc00215 	stw	ra,8(sp)
   2376c:	2021883a 	mov	r16,r4
   23770:	2823883a 	mov	r17,r5
   23774:	18001726 	beq	r3,zero,237d4 <_raise_r+0x84>
   23778:	2945883a 	add	r2,r5,r5
   2377c:	1085883a 	add	r2,r2,r2
   23780:	1887883a 	add	r3,r3,r2
   23784:	19800017 	ldw	r6,0(r3)
   23788:	30001226 	beq	r6,zero,237d4 <_raise_r+0x84>
   2378c:	00800044 	movi	r2,1
   23790:	30800e26 	beq	r6,r2,237cc <_raise_r+0x7c>
   23794:	013fffc4 	movi	r4,-1
   23798:	31000926 	beq	r6,r4,237c0 <_raise_r+0x70>
   2379c:	18000015 	stw	zero,0(r3)
   237a0:	2809883a 	mov	r4,r5
   237a4:	303ee83a 	callr	r6
   237a8:	0005883a 	mov	r2,zero
   237ac:	dfc00217 	ldw	ra,8(sp)
   237b0:	dc400117 	ldw	r17,4(sp)
   237b4:	dc000017 	ldw	r16,0(sp)
   237b8:	dec00304 	addi	sp,sp,12
   237bc:	f800283a 	ret
   237c0:	00c00584 	movi	r3,22
   237c4:	80c00015 	stw	r3,0(r16)
   237c8:	003ff806 	br	237ac <_gp+0xfffe698c>
   237cc:	0005883a 	mov	r2,zero
   237d0:	003ff606 	br	237ac <_gp+0xfffe698c>
   237d4:	8009883a 	mov	r4,r16
   237d8:	00239600 	call	23960 <_getpid_r>
   237dc:	880d883a 	mov	r6,r17
   237e0:	100b883a 	mov	r5,r2
   237e4:	8009883a 	mov	r4,r16
   237e8:	dfc00217 	ldw	ra,8(sp)
   237ec:	dc400117 	ldw	r17,4(sp)
   237f0:	dc000017 	ldw	r16,0(sp)
   237f4:	dec00304 	addi	sp,sp,12
   237f8:	00239041 	jmpi	23904 <_kill_r>
   237fc:	00800584 	movi	r2,22
   23800:	20800015 	stw	r2,0(r4)
   23804:	00bfffc4 	movi	r2,-1
   23808:	f800283a 	ret

0002380c <__sigtramp_r>:
   2380c:	008007c4 	movi	r2,31
   23810:	11402436 	bltu	r2,r5,238a4 <__sigtramp_r+0x98>
   23814:	20c0b717 	ldw	r3,732(r4)
   23818:	defffd04 	addi	sp,sp,-12
   2381c:	dc400115 	stw	r17,4(sp)
   23820:	dc000015 	stw	r16,0(sp)
   23824:	dfc00215 	stw	ra,8(sp)
   23828:	2021883a 	mov	r16,r4
   2382c:	2823883a 	mov	r17,r5
   23830:	18001826 	beq	r3,zero,23894 <__sigtramp_r+0x88>
   23834:	8c45883a 	add	r2,r17,r17
   23838:	1085883a 	add	r2,r2,r2
   2383c:	1885883a 	add	r2,r3,r2
   23840:	10c00017 	ldw	r3,0(r2)
   23844:	18001126 	beq	r3,zero,2388c <__sigtramp_r+0x80>
   23848:	013fffc4 	movi	r4,-1
   2384c:	19000d26 	beq	r3,r4,23884 <__sigtramp_r+0x78>
   23850:	01000044 	movi	r4,1
   23854:	19000926 	beq	r3,r4,2387c <__sigtramp_r+0x70>
   23858:	10000015 	stw	zero,0(r2)
   2385c:	8809883a 	mov	r4,r17
   23860:	183ee83a 	callr	r3
   23864:	0005883a 	mov	r2,zero
   23868:	dfc00217 	ldw	ra,8(sp)
   2386c:	dc400117 	ldw	r17,4(sp)
   23870:	dc000017 	ldw	r16,0(sp)
   23874:	dec00304 	addi	sp,sp,12
   23878:	f800283a 	ret
   2387c:	008000c4 	movi	r2,3
   23880:	003ff906 	br	23868 <_gp+0xfffe6a48>
   23884:	00800084 	movi	r2,2
   23888:	003ff706 	br	23868 <_gp+0xfffe6a48>
   2388c:	00800044 	movi	r2,1
   23890:	003ff506 	br	23868 <_gp+0xfffe6a48>
   23894:	00236600 	call	23660 <_init_signal_r>
   23898:	1000041e 	bne	r2,zero,238ac <__sigtramp_r+0xa0>
   2389c:	80c0b717 	ldw	r3,732(r16)
   238a0:	003fe406 	br	23834 <_gp+0xfffe6a14>
   238a4:	00bfffc4 	movi	r2,-1
   238a8:	f800283a 	ret
   238ac:	00bfffc4 	movi	r2,-1
   238b0:	003fed06 	br	23868 <_gp+0xfffe6a48>

000238b4 <raise>:
   238b4:	008000f4 	movhi	r2,3
   238b8:	10939904 	addi	r2,r2,20068
   238bc:	200b883a 	mov	r5,r4
   238c0:	11000017 	ldw	r4,0(r2)
   238c4:	00237501 	jmpi	23750 <_raise_r>

000238c8 <signal>:
   238c8:	008000f4 	movhi	r2,3
   238cc:	10939904 	addi	r2,r2,20068
   238d0:	280d883a 	mov	r6,r5
   238d4:	200b883a 	mov	r5,r4
   238d8:	11000017 	ldw	r4,0(r2)
   238dc:	00236cc1 	jmpi	236cc <_signal_r>

000238e0 <_init_signal>:
   238e0:	008000f4 	movhi	r2,3
   238e4:	10939904 	addi	r2,r2,20068
   238e8:	11000017 	ldw	r4,0(r2)
   238ec:	00236601 	jmpi	23660 <_init_signal_r>

000238f0 <__sigtramp>:
   238f0:	008000f4 	movhi	r2,3
   238f4:	10939904 	addi	r2,r2,20068
   238f8:	200b883a 	mov	r5,r4
   238fc:	11000017 	ldw	r4,0(r2)
   23900:	002380c1 	jmpi	2380c <__sigtramp_r>

00023904 <_kill_r>:
   23904:	defffd04 	addi	sp,sp,-12
   23908:	2805883a 	mov	r2,r5
   2390c:	dc000015 	stw	r16,0(sp)
   23910:	040000f4 	movhi	r16,3
   23914:	dc400115 	stw	r17,4(sp)
   23918:	841aa604 	addi	r16,r16,27288
   2391c:	2023883a 	mov	r17,r4
   23920:	300b883a 	mov	r5,r6
   23924:	1009883a 	mov	r4,r2
   23928:	dfc00215 	stw	ra,8(sp)
   2392c:	80000015 	stw	zero,0(r16)
   23930:	002fcac0 	call	2fcac <kill>
   23934:	00ffffc4 	movi	r3,-1
   23938:	10c00526 	beq	r2,r3,23950 <_kill_r+0x4c>
   2393c:	dfc00217 	ldw	ra,8(sp)
   23940:	dc400117 	ldw	r17,4(sp)
   23944:	dc000017 	ldw	r16,0(sp)
   23948:	dec00304 	addi	sp,sp,12
   2394c:	f800283a 	ret
   23950:	80c00017 	ldw	r3,0(r16)
   23954:	183ff926 	beq	r3,zero,2393c <_gp+0xfffe6b1c>
   23958:	88c00015 	stw	r3,0(r17)
   2395c:	003ff706 	br	2393c <_gp+0xfffe6b1c>

00023960 <_getpid_r>:
   23960:	002fb701 	jmpi	2fb70 <getpid>

00023964 <strcmp>:
   23964:	2144b03a 	or	r2,r4,r5
   23968:	108000cc 	andi	r2,r2,3
   2396c:	1000171e 	bne	r2,zero,239cc <strcmp+0x68>
   23970:	20800017 	ldw	r2,0(r4)
   23974:	28c00017 	ldw	r3,0(r5)
   23978:	10c0141e 	bne	r2,r3,239cc <strcmp+0x68>
   2397c:	027fbff4 	movhi	r9,65279
   23980:	4a7fbfc4 	addi	r9,r9,-257
   23984:	0086303a 	nor	r3,zero,r2
   23988:	02202074 	movhi	r8,32897
   2398c:	1245883a 	add	r2,r2,r9
   23990:	42202004 	addi	r8,r8,-32640
   23994:	10c4703a 	and	r2,r2,r3
   23998:	1204703a 	and	r2,r2,r8
   2399c:	10000226 	beq	r2,zero,239a8 <strcmp+0x44>
   239a0:	00002306 	br	23a30 <strcmp+0xcc>
   239a4:	1000221e 	bne	r2,zero,23a30 <strcmp+0xcc>
   239a8:	21000104 	addi	r4,r4,4
   239ac:	20c00017 	ldw	r3,0(r4)
   239b0:	29400104 	addi	r5,r5,4
   239b4:	29800017 	ldw	r6,0(r5)
   239b8:	1a4f883a 	add	r7,r3,r9
   239bc:	00c4303a 	nor	r2,zero,r3
   239c0:	3884703a 	and	r2,r7,r2
   239c4:	1204703a 	and	r2,r2,r8
   239c8:	19bff626 	beq	r3,r6,239a4 <_gp+0xfffe6b84>
   239cc:	20800003 	ldbu	r2,0(r4)
   239d0:	10c03fcc 	andi	r3,r2,255
   239d4:	18c0201c 	xori	r3,r3,128
   239d8:	18ffe004 	addi	r3,r3,-128
   239dc:	18000c26 	beq	r3,zero,23a10 <strcmp+0xac>
   239e0:	29800007 	ldb	r6,0(r5)
   239e4:	19800326 	beq	r3,r6,239f4 <strcmp+0x90>
   239e8:	00001306 	br	23a38 <strcmp+0xd4>
   239ec:	29800007 	ldb	r6,0(r5)
   239f0:	11800b1e 	bne	r2,r6,23a20 <strcmp+0xbc>
   239f4:	21000044 	addi	r4,r4,1
   239f8:	20c00003 	ldbu	r3,0(r4)
   239fc:	29400044 	addi	r5,r5,1
   23a00:	18803fcc 	andi	r2,r3,255
   23a04:	1080201c 	xori	r2,r2,128
   23a08:	10bfe004 	addi	r2,r2,-128
   23a0c:	103ff71e 	bne	r2,zero,239ec <_gp+0xfffe6bcc>
   23a10:	0007883a 	mov	r3,zero
   23a14:	28800003 	ldbu	r2,0(r5)
   23a18:	1885c83a 	sub	r2,r3,r2
   23a1c:	f800283a 	ret
   23a20:	28800003 	ldbu	r2,0(r5)
   23a24:	18c03fcc 	andi	r3,r3,255
   23a28:	1885c83a 	sub	r2,r3,r2
   23a2c:	f800283a 	ret
   23a30:	0005883a 	mov	r2,zero
   23a34:	f800283a 	ret
   23a38:	10c03fcc 	andi	r3,r2,255
   23a3c:	003ff506 	br	23a14 <_gp+0xfffe6bf4>

00023a40 <strlen>:
   23a40:	208000cc 	andi	r2,r4,3
   23a44:	10002026 	beq	r2,zero,23ac8 <strlen+0x88>
   23a48:	20800007 	ldb	r2,0(r4)
   23a4c:	10002026 	beq	r2,zero,23ad0 <strlen+0x90>
   23a50:	2005883a 	mov	r2,r4
   23a54:	00000206 	br	23a60 <strlen+0x20>
   23a58:	10c00007 	ldb	r3,0(r2)
   23a5c:	18001826 	beq	r3,zero,23ac0 <strlen+0x80>
   23a60:	10800044 	addi	r2,r2,1
   23a64:	10c000cc 	andi	r3,r2,3
   23a68:	183ffb1e 	bne	r3,zero,23a58 <_gp+0xfffe6c38>
   23a6c:	10c00017 	ldw	r3,0(r2)
   23a70:	01ffbff4 	movhi	r7,65279
   23a74:	39ffbfc4 	addi	r7,r7,-257
   23a78:	00ca303a 	nor	r5,zero,r3
   23a7c:	01a02074 	movhi	r6,32897
   23a80:	19c7883a 	add	r3,r3,r7
   23a84:	31a02004 	addi	r6,r6,-32640
   23a88:	1946703a 	and	r3,r3,r5
   23a8c:	1986703a 	and	r3,r3,r6
   23a90:	1800091e 	bne	r3,zero,23ab8 <strlen+0x78>
   23a94:	10800104 	addi	r2,r2,4
   23a98:	10c00017 	ldw	r3,0(r2)
   23a9c:	19cb883a 	add	r5,r3,r7
   23aa0:	00c6303a 	nor	r3,zero,r3
   23aa4:	28c6703a 	and	r3,r5,r3
   23aa8:	1986703a 	and	r3,r3,r6
   23aac:	183ff926 	beq	r3,zero,23a94 <_gp+0xfffe6c74>
   23ab0:	00000106 	br	23ab8 <strlen+0x78>
   23ab4:	10800044 	addi	r2,r2,1
   23ab8:	10c00007 	ldb	r3,0(r2)
   23abc:	183ffd1e 	bne	r3,zero,23ab4 <_gp+0xfffe6c94>
   23ac0:	1105c83a 	sub	r2,r2,r4
   23ac4:	f800283a 	ret
   23ac8:	2005883a 	mov	r2,r4
   23acc:	003fe706 	br	23a6c <_gp+0xfffe6c4c>
   23ad0:	0005883a 	mov	r2,zero
   23ad4:	f800283a 	ret

00023ad8 <___vfprintf_internal_r>:
   23ad8:	deffb804 	addi	sp,sp,-288
   23adc:	dfc04715 	stw	ra,284(sp)
   23ae0:	ddc04515 	stw	r23,276(sp)
   23ae4:	dd404315 	stw	r21,268(sp)
   23ae8:	d9002c15 	stw	r4,176(sp)
   23aec:	282f883a 	mov	r23,r5
   23af0:	302b883a 	mov	r21,r6
   23af4:	d9c02d15 	stw	r7,180(sp)
   23af8:	df004615 	stw	fp,280(sp)
   23afc:	dd804415 	stw	r22,272(sp)
   23b00:	dd004215 	stw	r20,264(sp)
   23b04:	dcc04115 	stw	r19,260(sp)
   23b08:	dc804015 	stw	r18,256(sp)
   23b0c:	dc403f15 	stw	r17,252(sp)
   23b10:	dc003e15 	stw	r16,248(sp)
   23b14:	00288f00 	call	288f0 <_localeconv_r>
   23b18:	10800017 	ldw	r2,0(r2)
   23b1c:	1009883a 	mov	r4,r2
   23b20:	d8803415 	stw	r2,208(sp)
   23b24:	0023a400 	call	23a40 <strlen>
   23b28:	d8803715 	stw	r2,220(sp)
   23b2c:	d8802c17 	ldw	r2,176(sp)
   23b30:	10000226 	beq	r2,zero,23b3c <___vfprintf_internal_r+0x64>
   23b34:	10800e17 	ldw	r2,56(r2)
   23b38:	1000f926 	beq	r2,zero,23f20 <___vfprintf_internal_r+0x448>
   23b3c:	b880030b 	ldhu	r2,12(r23)
   23b40:	10c8000c 	andi	r3,r2,8192
   23b44:	1800061e 	bne	r3,zero,23b60 <___vfprintf_internal_r+0x88>
   23b48:	b9001917 	ldw	r4,100(r23)
   23b4c:	00f7ffc4 	movi	r3,-8193
   23b50:	10880014 	ori	r2,r2,8192
   23b54:	20c6703a 	and	r3,r4,r3
   23b58:	b880030d 	sth	r2,12(r23)
   23b5c:	b8c01915 	stw	r3,100(r23)
   23b60:	10c0020c 	andi	r3,r2,8
   23b64:	1800c126 	beq	r3,zero,23e6c <___vfprintf_internal_r+0x394>
   23b68:	b8c00417 	ldw	r3,16(r23)
   23b6c:	1800bf26 	beq	r3,zero,23e6c <___vfprintf_internal_r+0x394>
   23b70:	1080068c 	andi	r2,r2,26
   23b74:	00c00284 	movi	r3,10
   23b78:	10c0c426 	beq	r2,r3,23e8c <___vfprintf_internal_r+0x3b4>
   23b7c:	d8c00404 	addi	r3,sp,16
   23b80:	050000f4 	movhi	r20,3
   23b84:	d9001e04 	addi	r4,sp,120
   23b88:	a50bf984 	addi	r20,r20,12262
   23b8c:	d8c01e15 	stw	r3,120(sp)
   23b90:	d8002015 	stw	zero,128(sp)
   23b94:	d8001f15 	stw	zero,124(sp)
   23b98:	d8003315 	stw	zero,204(sp)
   23b9c:	d8003615 	stw	zero,216(sp)
   23ba0:	d8003815 	stw	zero,224(sp)
   23ba4:	1811883a 	mov	r8,r3
   23ba8:	d8003915 	stw	zero,228(sp)
   23bac:	d8003a15 	stw	zero,232(sp)
   23bb0:	d8002f15 	stw	zero,188(sp)
   23bb4:	d9002815 	stw	r4,160(sp)
   23bb8:	a8800007 	ldb	r2,0(r21)
   23bbc:	10027b26 	beq	r2,zero,245ac <___vfprintf_internal_r+0xad4>
   23bc0:	00c00944 	movi	r3,37
   23bc4:	a821883a 	mov	r16,r21
   23bc8:	10c0021e 	bne	r2,r3,23bd4 <___vfprintf_internal_r+0xfc>
   23bcc:	00001406 	br	23c20 <___vfprintf_internal_r+0x148>
   23bd0:	10c00326 	beq	r2,r3,23be0 <___vfprintf_internal_r+0x108>
   23bd4:	84000044 	addi	r16,r16,1
   23bd8:	80800007 	ldb	r2,0(r16)
   23bdc:	103ffc1e 	bne	r2,zero,23bd0 <_gp+0xfffe6db0>
   23be0:	8563c83a 	sub	r17,r16,r21
   23be4:	88000e26 	beq	r17,zero,23c20 <___vfprintf_internal_r+0x148>
   23be8:	d8c02017 	ldw	r3,128(sp)
   23bec:	d8801f17 	ldw	r2,124(sp)
   23bf0:	45400015 	stw	r21,0(r8)
   23bf4:	1c47883a 	add	r3,r3,r17
   23bf8:	10800044 	addi	r2,r2,1
   23bfc:	d8c02015 	stw	r3,128(sp)
   23c00:	44400115 	stw	r17,4(r8)
   23c04:	d8801f15 	stw	r2,124(sp)
   23c08:	00c001c4 	movi	r3,7
   23c0c:	1880a716 	blt	r3,r2,23eac <___vfprintf_internal_r+0x3d4>
   23c10:	42000204 	addi	r8,r8,8
   23c14:	d9402f17 	ldw	r5,188(sp)
   23c18:	2c4b883a 	add	r5,r5,r17
   23c1c:	d9402f15 	stw	r5,188(sp)
   23c20:	80800007 	ldb	r2,0(r16)
   23c24:	1000a826 	beq	r2,zero,23ec8 <___vfprintf_internal_r+0x3f0>
   23c28:	84400047 	ldb	r17,1(r16)
   23c2c:	00bfffc4 	movi	r2,-1
   23c30:	85400044 	addi	r21,r16,1
   23c34:	d8002785 	stb	zero,158(sp)
   23c38:	0007883a 	mov	r3,zero
   23c3c:	000f883a 	mov	r7,zero
   23c40:	d8802915 	stw	r2,164(sp)
   23c44:	d8003115 	stw	zero,196(sp)
   23c48:	0025883a 	mov	r18,zero
   23c4c:	01401604 	movi	r5,88
   23c50:	01800244 	movi	r6,9
   23c54:	02800a84 	movi	r10,42
   23c58:	02401b04 	movi	r9,108
   23c5c:	ad400044 	addi	r21,r21,1
   23c60:	88bff804 	addi	r2,r17,-32
   23c64:	28830436 	bltu	r5,r2,24878 <___vfprintf_internal_r+0xda0>
   23c68:	100490ba 	slli	r2,r2,2
   23c6c:	010000b4 	movhi	r4,2
   23c70:	210f2004 	addi	r4,r4,15488
   23c74:	1105883a 	add	r2,r2,r4
   23c78:	10800017 	ldw	r2,0(r2)
   23c7c:	1000683a 	jmp	r2
   23c80:	00024798 	cmpnei	zero,zero,2334
   23c84:	00024878 	rdprs	zero,zero,2337
   23c88:	00024878 	rdprs	zero,zero,2337
   23c8c:	000247b8 	rdprs	zero,zero,2334
   23c90:	00024878 	rdprs	zero,zero,2337
   23c94:	00024878 	rdprs	zero,zero,2337
   23c98:	00024878 	rdprs	zero,zero,2337
   23c9c:	00024878 	rdprs	zero,zero,2337
   23ca0:	00024878 	rdprs	zero,zero,2337
   23ca4:	00024878 	rdprs	zero,zero,2337
   23ca8:	00023f2c 	andhi	zero,zero,2300
   23cac:	000246d4 	movui	zero,2331
   23cb0:	00024878 	rdprs	zero,zero,2337
   23cb4:	00023df4 	movhi	zero,2295
   23cb8:	00023f54 	movui	zero,2301
   23cbc:	00024878 	rdprs	zero,zero,2337
   23cc0:	00023f94 	movui	zero,2302
   23cc4:	00023fa0 	cmpeqi	zero,zero,2302
   23cc8:	00023fa0 	cmpeqi	zero,zero,2302
   23ccc:	00023fa0 	cmpeqi	zero,zero,2302
   23cd0:	00023fa0 	cmpeqi	zero,zero,2302
   23cd4:	00023fa0 	cmpeqi	zero,zero,2302
   23cd8:	00023fa0 	cmpeqi	zero,zero,2302
   23cdc:	00023fa0 	cmpeqi	zero,zero,2302
   23ce0:	00023fa0 	cmpeqi	zero,zero,2302
   23ce4:	00023fa0 	cmpeqi	zero,zero,2302
   23ce8:	00024878 	rdprs	zero,zero,2337
   23cec:	00024878 	rdprs	zero,zero,2337
   23cf0:	00024878 	rdprs	zero,zero,2337
   23cf4:	00024878 	rdprs	zero,zero,2337
   23cf8:	00024878 	rdprs	zero,zero,2337
   23cfc:	00024878 	rdprs	zero,zero,2337
   23d00:	00024878 	rdprs	zero,zero,2337
   23d04:	00024878 	rdprs	zero,zero,2337
   23d08:	00024878 	rdprs	zero,zero,2337
   23d0c:	00024878 	rdprs	zero,zero,2337
   23d10:	00023fd4 	movui	zero,2303
   23d14:	00024090 	cmplti	zero,zero,2306
   23d18:	00024878 	rdprs	zero,zero,2337
   23d1c:	00024090 	cmplti	zero,zero,2306
   23d20:	00024878 	rdprs	zero,zero,2337
   23d24:	00024878 	rdprs	zero,zero,2337
   23d28:	00024878 	rdprs	zero,zero,2337
   23d2c:	00024878 	rdprs	zero,zero,2337
   23d30:	00024130 	cmpltui	zero,zero,2308
   23d34:	00024878 	rdprs	zero,zero,2337
   23d38:	00024878 	rdprs	zero,zero,2337
   23d3c:	0002413c 	xorhi	zero,zero,2308
   23d40:	00024878 	rdprs	zero,zero,2337
   23d44:	00024878 	rdprs	zero,zero,2337
   23d48:	00024878 	rdprs	zero,zero,2337
   23d4c:	00024878 	rdprs	zero,zero,2337
   23d50:	00024878 	rdprs	zero,zero,2337
   23d54:	000245b4 	movhi	zero,2326
   23d58:	00024878 	rdprs	zero,zero,2337
   23d5c:	00024878 	rdprs	zero,zero,2337
   23d60:	00024614 	movui	zero,2328
   23d64:	00024878 	rdprs	zero,zero,2337
   23d68:	00024878 	rdprs	zero,zero,2337
   23d6c:	00024878 	rdprs	zero,zero,2337
   23d70:	00024878 	rdprs	zero,zero,2337
   23d74:	00024878 	rdprs	zero,zero,2337
   23d78:	00024878 	rdprs	zero,zero,2337
   23d7c:	00024878 	rdprs	zero,zero,2337
   23d80:	00024878 	rdprs	zero,zero,2337
   23d84:	00024878 	rdprs	zero,zero,2337
   23d88:	00024878 	rdprs	zero,zero,2337
   23d8c:	00024824 	muli	zero,zero,2336
   23d90:	000247c4 	movi	zero,2335
   23d94:	00024090 	cmplti	zero,zero,2306
   23d98:	00024090 	cmplti	zero,zero,2306
   23d9c:	00024090 	cmplti	zero,zero,2306
   23da0:	000247d4 	movui	zero,2335
   23da4:	000247c4 	movi	zero,2335
   23da8:	00024878 	rdprs	zero,zero,2337
   23dac:	00024878 	rdprs	zero,zero,2337
   23db0:	000247e0 	cmpeqi	zero,zero,2335
   23db4:	00024878 	rdprs	zero,zero,2337
   23db8:	000247f0 	cmpltui	zero,zero,2335
   23dbc:	000246c4 	movi	zero,2331
   23dc0:	00023e00 	call	23e0 <__reset-0x1dc20>
   23dc4:	000246e4 	muli	zero,zero,2331
   23dc8:	00024878 	rdprs	zero,zero,2337
   23dcc:	000246f0 	cmpltui	zero,zero,2331
   23dd0:	00024878 	rdprs	zero,zero,2337
   23dd4:	0002474c 	andi	zero,zero,2333
   23dd8:	00024878 	rdprs	zero,zero,2337
   23ddc:	00024878 	rdprs	zero,zero,2337
   23de0:	0002475c 	xori	zero,zero,2333
   23de4:	d9003117 	ldw	r4,196(sp)
   23de8:	d8802d15 	stw	r2,180(sp)
   23dec:	0109c83a 	sub	r4,zero,r4
   23df0:	d9003115 	stw	r4,196(sp)
   23df4:	94800114 	ori	r18,r18,4
   23df8:	ac400007 	ldb	r17,0(r21)
   23dfc:	003f9706 	br	23c5c <_gp+0xfffe6e3c>
   23e00:	00800c04 	movi	r2,48
   23e04:	d9002d17 	ldw	r4,180(sp)
   23e08:	d9402917 	ldw	r5,164(sp)
   23e0c:	d8802705 	stb	r2,156(sp)
   23e10:	00801e04 	movi	r2,120
   23e14:	d8802745 	stb	r2,157(sp)
   23e18:	d8002785 	stb	zero,158(sp)
   23e1c:	20c00104 	addi	r3,r4,4
   23e20:	24c00017 	ldw	r19,0(r4)
   23e24:	002d883a 	mov	r22,zero
   23e28:	90800094 	ori	r2,r18,2
   23e2c:	28029a16 	blt	r5,zero,24898 <___vfprintf_internal_r+0xdc0>
   23e30:	00bfdfc4 	movi	r2,-129
   23e34:	90a4703a 	and	r18,r18,r2
   23e38:	d8c02d15 	stw	r3,180(sp)
   23e3c:	94800094 	ori	r18,r18,2
   23e40:	9802871e 	bne	r19,zero,24860 <___vfprintf_internal_r+0xd88>
   23e44:	008000f4 	movhi	r2,3
   23e48:	108bf204 	addi	r2,r2,12232
   23e4c:	d8803915 	stw	r2,228(sp)
   23e50:	04401e04 	movi	r17,120
   23e54:	d8802917 	ldw	r2,164(sp)
   23e58:	0039883a 	mov	fp,zero
   23e5c:	1001e926 	beq	r2,zero,24604 <___vfprintf_internal_r+0xb2c>
   23e60:	0027883a 	mov	r19,zero
   23e64:	002d883a 	mov	r22,zero
   23e68:	00020506 	br	24680 <___vfprintf_internal_r+0xba8>
   23e6c:	d9002c17 	ldw	r4,176(sp)
   23e70:	b80b883a 	mov	r5,r23
   23e74:	0025da80 	call	25da8 <__swsetup_r>
   23e78:	1005ac1e 	bne	r2,zero,2552c <___vfprintf_internal_r+0x1a54>
   23e7c:	b880030b 	ldhu	r2,12(r23)
   23e80:	00c00284 	movi	r3,10
   23e84:	1080068c 	andi	r2,r2,26
   23e88:	10ff3c1e 	bne	r2,r3,23b7c <_gp+0xfffe6d5c>
   23e8c:	b880038f 	ldh	r2,14(r23)
   23e90:	103f3a16 	blt	r2,zero,23b7c <_gp+0xfffe6d5c>
   23e94:	d9c02d17 	ldw	r7,180(sp)
   23e98:	d9002c17 	ldw	r4,176(sp)
   23e9c:	a80d883a 	mov	r6,r21
   23ea0:	b80b883a 	mov	r5,r23
   23ea4:	0025cec0 	call	25cec <__sbprintf>
   23ea8:	00001106 	br	23ef0 <___vfprintf_internal_r+0x418>
   23eac:	d9002c17 	ldw	r4,176(sp)
   23eb0:	d9801e04 	addi	r6,sp,120
   23eb4:	b80b883a 	mov	r5,r23
   23eb8:	002a6700 	call	2a670 <__sprint_r>
   23ebc:	1000081e 	bne	r2,zero,23ee0 <___vfprintf_internal_r+0x408>
   23ec0:	da000404 	addi	r8,sp,16
   23ec4:	003f5306 	br	23c14 <_gp+0xfffe6df4>
   23ec8:	d8802017 	ldw	r2,128(sp)
   23ecc:	10000426 	beq	r2,zero,23ee0 <___vfprintf_internal_r+0x408>
   23ed0:	d9002c17 	ldw	r4,176(sp)
   23ed4:	d9801e04 	addi	r6,sp,120
   23ed8:	b80b883a 	mov	r5,r23
   23edc:	002a6700 	call	2a670 <__sprint_r>
   23ee0:	b880030b 	ldhu	r2,12(r23)
   23ee4:	1080100c 	andi	r2,r2,64
   23ee8:	1005901e 	bne	r2,zero,2552c <___vfprintf_internal_r+0x1a54>
   23eec:	d8802f17 	ldw	r2,188(sp)
   23ef0:	dfc04717 	ldw	ra,284(sp)
   23ef4:	df004617 	ldw	fp,280(sp)
   23ef8:	ddc04517 	ldw	r23,276(sp)
   23efc:	dd804417 	ldw	r22,272(sp)
   23f00:	dd404317 	ldw	r21,268(sp)
   23f04:	dd004217 	ldw	r20,264(sp)
   23f08:	dcc04117 	ldw	r19,260(sp)
   23f0c:	dc804017 	ldw	r18,256(sp)
   23f10:	dc403f17 	ldw	r17,252(sp)
   23f14:	dc003e17 	ldw	r16,248(sp)
   23f18:	dec04804 	addi	sp,sp,288
   23f1c:	f800283a 	ret
   23f20:	d9002c17 	ldw	r4,176(sp)
   23f24:	0027d7c0 	call	27d7c <__sinit>
   23f28:	003f0406 	br	23b3c <_gp+0xfffe6d1c>
   23f2c:	d8802d17 	ldw	r2,180(sp)
   23f30:	d9002d17 	ldw	r4,180(sp)
   23f34:	10800017 	ldw	r2,0(r2)
   23f38:	d8803115 	stw	r2,196(sp)
   23f3c:	20800104 	addi	r2,r4,4
   23f40:	d9003117 	ldw	r4,196(sp)
   23f44:	203fa716 	blt	r4,zero,23de4 <_gp+0xfffe6fc4>
   23f48:	d8802d15 	stw	r2,180(sp)
   23f4c:	ac400007 	ldb	r17,0(r21)
   23f50:	003f4206 	br	23c5c <_gp+0xfffe6e3c>
   23f54:	ac400007 	ldb	r17,0(r21)
   23f58:	aac00044 	addi	r11,r21,1
   23f5c:	8a872826 	beq	r17,r10,25c00 <___vfprintf_internal_r+0x2128>
   23f60:	88bff404 	addi	r2,r17,-48
   23f64:	0009883a 	mov	r4,zero
   23f68:	30867d36 	bltu	r6,r2,25960 <___vfprintf_internal_r+0x1e88>
   23f6c:	5c400007 	ldb	r17,0(r11)
   23f70:	210002a4 	muli	r4,r4,10
   23f74:	5d400044 	addi	r21,r11,1
   23f78:	a817883a 	mov	r11,r21
   23f7c:	2089883a 	add	r4,r4,r2
   23f80:	88bff404 	addi	r2,r17,-48
   23f84:	30bff92e 	bgeu	r6,r2,23f6c <_gp+0xfffe714c>
   23f88:	2005c916 	blt	r4,zero,256b0 <___vfprintf_internal_r+0x1bd8>
   23f8c:	d9002915 	stw	r4,164(sp)
   23f90:	003f3306 	br	23c60 <_gp+0xfffe6e40>
   23f94:	94802014 	ori	r18,r18,128
   23f98:	ac400007 	ldb	r17,0(r21)
   23f9c:	003f2f06 	br	23c5c <_gp+0xfffe6e3c>
   23fa0:	a809883a 	mov	r4,r21
   23fa4:	d8003115 	stw	zero,196(sp)
   23fa8:	88bff404 	addi	r2,r17,-48
   23fac:	0017883a 	mov	r11,zero
   23fb0:	24400007 	ldb	r17,0(r4)
   23fb4:	5ac002a4 	muli	r11,r11,10
   23fb8:	ad400044 	addi	r21,r21,1
   23fbc:	a809883a 	mov	r4,r21
   23fc0:	12d7883a 	add	r11,r2,r11
   23fc4:	88bff404 	addi	r2,r17,-48
   23fc8:	30bff92e 	bgeu	r6,r2,23fb0 <_gp+0xfffe7190>
   23fcc:	dac03115 	stw	r11,196(sp)
   23fd0:	003f2306 	br	23c60 <_gp+0xfffe6e40>
   23fd4:	18c03fcc 	andi	r3,r3,255
   23fd8:	18072b1e 	bne	r3,zero,25c88 <___vfprintf_internal_r+0x21b0>
   23fdc:	94800414 	ori	r18,r18,16
   23fe0:	9080080c 	andi	r2,r18,32
   23fe4:	10037b26 	beq	r2,zero,24dd4 <___vfprintf_internal_r+0x12fc>
   23fe8:	d9402d17 	ldw	r5,180(sp)
   23fec:	28800117 	ldw	r2,4(r5)
   23ff0:	2cc00017 	ldw	r19,0(r5)
   23ff4:	29400204 	addi	r5,r5,8
   23ff8:	d9402d15 	stw	r5,180(sp)
   23ffc:	102d883a 	mov	r22,r2
   24000:	10044b16 	blt	r2,zero,25130 <___vfprintf_internal_r+0x1658>
   24004:	d9402917 	ldw	r5,164(sp)
   24008:	df002783 	ldbu	fp,158(sp)
   2400c:	2803bc16 	blt	r5,zero,24f00 <___vfprintf_internal_r+0x1428>
   24010:	00ffdfc4 	movi	r3,-129
   24014:	9d84b03a 	or	r2,r19,r22
   24018:	90e4703a 	and	r18,r18,r3
   2401c:	10017726 	beq	r2,zero,245fc <___vfprintf_internal_r+0xb24>
   24020:	b0038326 	beq	r22,zero,24e30 <___vfprintf_internal_r+0x1358>
   24024:	dc402a15 	stw	r17,168(sp)
   24028:	dc001e04 	addi	r16,sp,120
   2402c:	b023883a 	mov	r17,r22
   24030:	402d883a 	mov	r22,r8
   24034:	9809883a 	mov	r4,r19
   24038:	880b883a 	mov	r5,r17
   2403c:	01800284 	movi	r6,10
   24040:	000f883a 	mov	r7,zero
   24044:	002ca680 	call	2ca68 <__umoddi3>
   24048:	10800c04 	addi	r2,r2,48
   2404c:	843fffc4 	addi	r16,r16,-1
   24050:	9809883a 	mov	r4,r19
   24054:	880b883a 	mov	r5,r17
   24058:	80800005 	stb	r2,0(r16)
   2405c:	01800284 	movi	r6,10
   24060:	000f883a 	mov	r7,zero
   24064:	002c4f00 	call	2c4f0 <__udivdi3>
   24068:	1027883a 	mov	r19,r2
   2406c:	10c4b03a 	or	r2,r2,r3
   24070:	1823883a 	mov	r17,r3
   24074:	103fef1e 	bne	r2,zero,24034 <_gp+0xfffe7214>
   24078:	d8c02817 	ldw	r3,160(sp)
   2407c:	dc402a17 	ldw	r17,168(sp)
   24080:	b011883a 	mov	r8,r22
   24084:	1c07c83a 	sub	r3,r3,r16
   24088:	d8c02e15 	stw	r3,184(sp)
   2408c:	00005906 	br	241f4 <___vfprintf_internal_r+0x71c>
   24090:	18c03fcc 	andi	r3,r3,255
   24094:	1806fa1e 	bne	r3,zero,25c80 <___vfprintf_internal_r+0x21a8>
   24098:	9080020c 	andi	r2,r18,8
   2409c:	10048a26 	beq	r2,zero,252c8 <___vfprintf_internal_r+0x17f0>
   240a0:	d8c02d17 	ldw	r3,180(sp)
   240a4:	d9002d17 	ldw	r4,180(sp)
   240a8:	d9402d17 	ldw	r5,180(sp)
   240ac:	18c00017 	ldw	r3,0(r3)
   240b0:	21000117 	ldw	r4,4(r4)
   240b4:	29400204 	addi	r5,r5,8
   240b8:	d8c03615 	stw	r3,216(sp)
   240bc:	d9003815 	stw	r4,224(sp)
   240c0:	d9402d15 	stw	r5,180(sp)
   240c4:	d9003617 	ldw	r4,216(sp)
   240c8:	d9403817 	ldw	r5,224(sp)
   240cc:	da003d15 	stw	r8,244(sp)
   240d0:	04000044 	movi	r16,1
   240d4:	002a3c40 	call	2a3c4 <__fpclassifyd>
   240d8:	da003d17 	ldw	r8,244(sp)
   240dc:	14041f1e 	bne	r2,r16,2515c <___vfprintf_internal_r+0x1684>
   240e0:	d9003617 	ldw	r4,216(sp)
   240e4:	d9403817 	ldw	r5,224(sp)
   240e8:	000d883a 	mov	r6,zero
   240ec:	000f883a 	mov	r7,zero
   240f0:	002e44c0 	call	2e44c <__ledf2>
   240f4:	da003d17 	ldw	r8,244(sp)
   240f8:	1005be16 	blt	r2,zero,257f4 <___vfprintf_internal_r+0x1d1c>
   240fc:	df002783 	ldbu	fp,158(sp)
   24100:	008011c4 	movi	r2,71
   24104:	1445330e 	bge	r2,r17,255d4 <___vfprintf_internal_r+0x1afc>
   24108:	040000f4 	movhi	r16,3
   2410c:	840bea04 	addi	r16,r16,12200
   24110:	00c000c4 	movi	r3,3
   24114:	00bfdfc4 	movi	r2,-129
   24118:	d8c02a15 	stw	r3,168(sp)
   2411c:	90a4703a 	and	r18,r18,r2
   24120:	d8c02e15 	stw	r3,184(sp)
   24124:	d8002915 	stw	zero,164(sp)
   24128:	d8003215 	stw	zero,200(sp)
   2412c:	00003706 	br	2420c <___vfprintf_internal_r+0x734>
   24130:	94800214 	ori	r18,r18,8
   24134:	ac400007 	ldb	r17,0(r21)
   24138:	003ec806 	br	23c5c <_gp+0xfffe6e3c>
   2413c:	18c03fcc 	andi	r3,r3,255
   24140:	1806db1e 	bne	r3,zero,25cb0 <___vfprintf_internal_r+0x21d8>
   24144:	94800414 	ori	r18,r18,16
   24148:	9080080c 	andi	r2,r18,32
   2414c:	1002d826 	beq	r2,zero,24cb0 <___vfprintf_internal_r+0x11d8>
   24150:	d9402d17 	ldw	r5,180(sp)
   24154:	d8c02917 	ldw	r3,164(sp)
   24158:	d8002785 	stb	zero,158(sp)
   2415c:	28800204 	addi	r2,r5,8
   24160:	2cc00017 	ldw	r19,0(r5)
   24164:	2d800117 	ldw	r22,4(r5)
   24168:	18048f16 	blt	r3,zero,253a8 <___vfprintf_internal_r+0x18d0>
   2416c:	013fdfc4 	movi	r4,-129
   24170:	9d86b03a 	or	r3,r19,r22
   24174:	d8802d15 	stw	r2,180(sp)
   24178:	9124703a 	and	r18,r18,r4
   2417c:	1802d91e 	bne	r3,zero,24ce4 <___vfprintf_internal_r+0x120c>
   24180:	d8c02917 	ldw	r3,164(sp)
   24184:	0039883a 	mov	fp,zero
   24188:	1805c326 	beq	r3,zero,25898 <___vfprintf_internal_r+0x1dc0>
   2418c:	0027883a 	mov	r19,zero
   24190:	002d883a 	mov	r22,zero
   24194:	dc001e04 	addi	r16,sp,120
   24198:	9806d0fa 	srli	r3,r19,3
   2419c:	b008977a 	slli	r4,r22,29
   241a0:	b02cd0fa 	srli	r22,r22,3
   241a4:	9cc001cc 	andi	r19,r19,7
   241a8:	98800c04 	addi	r2,r19,48
   241ac:	843fffc4 	addi	r16,r16,-1
   241b0:	20e6b03a 	or	r19,r4,r3
   241b4:	80800005 	stb	r2,0(r16)
   241b8:	9d86b03a 	or	r3,r19,r22
   241bc:	183ff61e 	bne	r3,zero,24198 <_gp+0xfffe7378>
   241c0:	90c0004c 	andi	r3,r18,1
   241c4:	18013b26 	beq	r3,zero,246b4 <___vfprintf_internal_r+0xbdc>
   241c8:	10803fcc 	andi	r2,r2,255
   241cc:	1080201c 	xori	r2,r2,128
   241d0:	10bfe004 	addi	r2,r2,-128
   241d4:	00c00c04 	movi	r3,48
   241d8:	10c13626 	beq	r2,r3,246b4 <___vfprintf_internal_r+0xbdc>
   241dc:	80ffffc5 	stb	r3,-1(r16)
   241e0:	d8c02817 	ldw	r3,160(sp)
   241e4:	80bfffc4 	addi	r2,r16,-1
   241e8:	1021883a 	mov	r16,r2
   241ec:	1887c83a 	sub	r3,r3,r2
   241f0:	d8c02e15 	stw	r3,184(sp)
   241f4:	d8802e17 	ldw	r2,184(sp)
   241f8:	d9002917 	ldw	r4,164(sp)
   241fc:	1100010e 	bge	r2,r4,24204 <___vfprintf_internal_r+0x72c>
   24200:	2005883a 	mov	r2,r4
   24204:	d8802a15 	stw	r2,168(sp)
   24208:	d8003215 	stw	zero,200(sp)
   2420c:	e7003fcc 	andi	fp,fp,255
   24210:	e700201c 	xori	fp,fp,128
   24214:	e73fe004 	addi	fp,fp,-128
   24218:	e0000326 	beq	fp,zero,24228 <___vfprintf_internal_r+0x750>
   2421c:	d8c02a17 	ldw	r3,168(sp)
   24220:	18c00044 	addi	r3,r3,1
   24224:	d8c02a15 	stw	r3,168(sp)
   24228:	90c0008c 	andi	r3,r18,2
   2422c:	d8c02b15 	stw	r3,172(sp)
   24230:	18000326 	beq	r3,zero,24240 <___vfprintf_internal_r+0x768>
   24234:	d8c02a17 	ldw	r3,168(sp)
   24238:	18c00084 	addi	r3,r3,2
   2423c:	d8c02a15 	stw	r3,168(sp)
   24240:	90c0210c 	andi	r3,r18,132
   24244:	d8c03015 	stw	r3,192(sp)
   24248:	1801a31e 	bne	r3,zero,248d8 <___vfprintf_internal_r+0xe00>
   2424c:	d9003117 	ldw	r4,196(sp)
   24250:	d8c02a17 	ldw	r3,168(sp)
   24254:	20e7c83a 	sub	r19,r4,r3
   24258:	04c19f0e 	bge	zero,r19,248d8 <___vfprintf_internal_r+0xe00>
   2425c:	02400404 	movi	r9,16
   24260:	d8c02017 	ldw	r3,128(sp)
   24264:	d8801f17 	ldw	r2,124(sp)
   24268:	4cc50d0e 	bge	r9,r19,256a0 <___vfprintf_internal_r+0x1bc8>
   2426c:	014000f4 	movhi	r5,3
   24270:	294bfd84 	addi	r5,r5,12278
   24274:	dc403b15 	stw	r17,236(sp)
   24278:	d9403515 	stw	r5,212(sp)
   2427c:	9823883a 	mov	r17,r19
   24280:	482d883a 	mov	r22,r9
   24284:	9027883a 	mov	r19,r18
   24288:	070001c4 	movi	fp,7
   2428c:	8025883a 	mov	r18,r16
   24290:	dc002c17 	ldw	r16,176(sp)
   24294:	00000306 	br	242a4 <___vfprintf_internal_r+0x7cc>
   24298:	8c7ffc04 	addi	r17,r17,-16
   2429c:	42000204 	addi	r8,r8,8
   242a0:	b440130e 	bge	r22,r17,242f0 <___vfprintf_internal_r+0x818>
   242a4:	010000f4 	movhi	r4,3
   242a8:	18c00404 	addi	r3,r3,16
   242ac:	10800044 	addi	r2,r2,1
   242b0:	210bfd84 	addi	r4,r4,12278
   242b4:	41000015 	stw	r4,0(r8)
   242b8:	45800115 	stw	r22,4(r8)
   242bc:	d8c02015 	stw	r3,128(sp)
   242c0:	d8801f15 	stw	r2,124(sp)
   242c4:	e0bff40e 	bge	fp,r2,24298 <_gp+0xfffe7478>
   242c8:	d9801e04 	addi	r6,sp,120
   242cc:	b80b883a 	mov	r5,r23
   242d0:	8009883a 	mov	r4,r16
   242d4:	002a6700 	call	2a670 <__sprint_r>
   242d8:	103f011e 	bne	r2,zero,23ee0 <_gp+0xfffe70c0>
   242dc:	8c7ffc04 	addi	r17,r17,-16
   242e0:	d8c02017 	ldw	r3,128(sp)
   242e4:	d8801f17 	ldw	r2,124(sp)
   242e8:	da000404 	addi	r8,sp,16
   242ec:	b47fed16 	blt	r22,r17,242a4 <_gp+0xfffe7484>
   242f0:	9021883a 	mov	r16,r18
   242f4:	9825883a 	mov	r18,r19
   242f8:	8827883a 	mov	r19,r17
   242fc:	dc403b17 	ldw	r17,236(sp)
   24300:	d9403517 	ldw	r5,212(sp)
   24304:	98c7883a 	add	r3,r19,r3
   24308:	10800044 	addi	r2,r2,1
   2430c:	41400015 	stw	r5,0(r8)
   24310:	44c00115 	stw	r19,4(r8)
   24314:	d8c02015 	stw	r3,128(sp)
   24318:	d8801f15 	stw	r2,124(sp)
   2431c:	010001c4 	movi	r4,7
   24320:	2082a316 	blt	r4,r2,24db0 <___vfprintf_internal_r+0x12d8>
   24324:	df002787 	ldb	fp,158(sp)
   24328:	42000204 	addi	r8,r8,8
   2432c:	e0000c26 	beq	fp,zero,24360 <___vfprintf_internal_r+0x888>
   24330:	d8801f17 	ldw	r2,124(sp)
   24334:	d9002784 	addi	r4,sp,158
   24338:	18c00044 	addi	r3,r3,1
   2433c:	10800044 	addi	r2,r2,1
   24340:	41000015 	stw	r4,0(r8)
   24344:	01000044 	movi	r4,1
   24348:	41000115 	stw	r4,4(r8)
   2434c:	d8c02015 	stw	r3,128(sp)
   24350:	d8801f15 	stw	r2,124(sp)
   24354:	010001c4 	movi	r4,7
   24358:	20823c16 	blt	r4,r2,24c4c <___vfprintf_internal_r+0x1174>
   2435c:	42000204 	addi	r8,r8,8
   24360:	d8802b17 	ldw	r2,172(sp)
   24364:	10000c26 	beq	r2,zero,24398 <___vfprintf_internal_r+0x8c0>
   24368:	d8801f17 	ldw	r2,124(sp)
   2436c:	d9002704 	addi	r4,sp,156
   24370:	18c00084 	addi	r3,r3,2
   24374:	10800044 	addi	r2,r2,1
   24378:	41000015 	stw	r4,0(r8)
   2437c:	01000084 	movi	r4,2
   24380:	41000115 	stw	r4,4(r8)
   24384:	d8c02015 	stw	r3,128(sp)
   24388:	d8801f15 	stw	r2,124(sp)
   2438c:	010001c4 	movi	r4,7
   24390:	20823616 	blt	r4,r2,24c6c <___vfprintf_internal_r+0x1194>
   24394:	42000204 	addi	r8,r8,8
   24398:	d9003017 	ldw	r4,192(sp)
   2439c:	00802004 	movi	r2,128
   243a0:	20819926 	beq	r4,r2,24a08 <___vfprintf_internal_r+0xf30>
   243a4:	d9402917 	ldw	r5,164(sp)
   243a8:	d8802e17 	ldw	r2,184(sp)
   243ac:	28adc83a 	sub	r22,r5,r2
   243b0:	0580310e 	bge	zero,r22,24478 <___vfprintf_internal_r+0x9a0>
   243b4:	07000404 	movi	fp,16
   243b8:	d8801f17 	ldw	r2,124(sp)
   243bc:	e584140e 	bge	fp,r22,25410 <___vfprintf_internal_r+0x1938>
   243c0:	014000f4 	movhi	r5,3
   243c4:	294bf984 	addi	r5,r5,12262
   243c8:	dc402915 	stw	r17,164(sp)
   243cc:	d9402b15 	stw	r5,172(sp)
   243d0:	b023883a 	mov	r17,r22
   243d4:	04c001c4 	movi	r19,7
   243d8:	a82d883a 	mov	r22,r21
   243dc:	902b883a 	mov	r21,r18
   243e0:	8025883a 	mov	r18,r16
   243e4:	dc002c17 	ldw	r16,176(sp)
   243e8:	00000306 	br	243f8 <___vfprintf_internal_r+0x920>
   243ec:	8c7ffc04 	addi	r17,r17,-16
   243f0:	42000204 	addi	r8,r8,8
   243f4:	e440110e 	bge	fp,r17,2443c <___vfprintf_internal_r+0x964>
   243f8:	18c00404 	addi	r3,r3,16
   243fc:	10800044 	addi	r2,r2,1
   24400:	45000015 	stw	r20,0(r8)
   24404:	47000115 	stw	fp,4(r8)
   24408:	d8c02015 	stw	r3,128(sp)
   2440c:	d8801f15 	stw	r2,124(sp)
   24410:	98bff60e 	bge	r19,r2,243ec <_gp+0xfffe75cc>
   24414:	d9801e04 	addi	r6,sp,120
   24418:	b80b883a 	mov	r5,r23
   2441c:	8009883a 	mov	r4,r16
   24420:	002a6700 	call	2a670 <__sprint_r>
   24424:	103eae1e 	bne	r2,zero,23ee0 <_gp+0xfffe70c0>
   24428:	8c7ffc04 	addi	r17,r17,-16
   2442c:	d8c02017 	ldw	r3,128(sp)
   24430:	d8801f17 	ldw	r2,124(sp)
   24434:	da000404 	addi	r8,sp,16
   24438:	e47fef16 	blt	fp,r17,243f8 <_gp+0xfffe75d8>
   2443c:	9021883a 	mov	r16,r18
   24440:	a825883a 	mov	r18,r21
   24444:	b02b883a 	mov	r21,r22
   24448:	882d883a 	mov	r22,r17
   2444c:	dc402917 	ldw	r17,164(sp)
   24450:	d9002b17 	ldw	r4,172(sp)
   24454:	1d87883a 	add	r3,r3,r22
   24458:	10800044 	addi	r2,r2,1
   2445c:	41000015 	stw	r4,0(r8)
   24460:	45800115 	stw	r22,4(r8)
   24464:	d8c02015 	stw	r3,128(sp)
   24468:	d8801f15 	stw	r2,124(sp)
   2446c:	010001c4 	movi	r4,7
   24470:	2081ee16 	blt	r4,r2,24c2c <___vfprintf_internal_r+0x1154>
   24474:	42000204 	addi	r8,r8,8
   24478:	9080400c 	andi	r2,r18,256
   2447c:	1001181e 	bne	r2,zero,248e0 <___vfprintf_internal_r+0xe08>
   24480:	d9402e17 	ldw	r5,184(sp)
   24484:	d8801f17 	ldw	r2,124(sp)
   24488:	44000015 	stw	r16,0(r8)
   2448c:	1947883a 	add	r3,r3,r5
   24490:	10800044 	addi	r2,r2,1
   24494:	41400115 	stw	r5,4(r8)
   24498:	d8c02015 	stw	r3,128(sp)
   2449c:	d8801f15 	stw	r2,124(sp)
   244a0:	010001c4 	movi	r4,7
   244a4:	2081d316 	blt	r4,r2,24bf4 <___vfprintf_internal_r+0x111c>
   244a8:	42000204 	addi	r8,r8,8
   244ac:	9480010c 	andi	r18,r18,4
   244b0:	90003226 	beq	r18,zero,2457c <___vfprintf_internal_r+0xaa4>
   244b4:	d9403117 	ldw	r5,196(sp)
   244b8:	d8802a17 	ldw	r2,168(sp)
   244bc:	28a1c83a 	sub	r16,r5,r2
   244c0:	04002e0e 	bge	zero,r16,2457c <___vfprintf_internal_r+0xaa4>
   244c4:	04400404 	movi	r17,16
   244c8:	d8801f17 	ldw	r2,124(sp)
   244cc:	8c04a20e 	bge	r17,r16,25758 <___vfprintf_internal_r+0x1c80>
   244d0:	014000f4 	movhi	r5,3
   244d4:	294bfd84 	addi	r5,r5,12278
   244d8:	d9403515 	stw	r5,212(sp)
   244dc:	048001c4 	movi	r18,7
   244e0:	dcc02c17 	ldw	r19,176(sp)
   244e4:	00000306 	br	244f4 <___vfprintf_internal_r+0xa1c>
   244e8:	843ffc04 	addi	r16,r16,-16
   244ec:	42000204 	addi	r8,r8,8
   244f0:	8c00130e 	bge	r17,r16,24540 <___vfprintf_internal_r+0xa68>
   244f4:	010000f4 	movhi	r4,3
   244f8:	18c00404 	addi	r3,r3,16
   244fc:	10800044 	addi	r2,r2,1
   24500:	210bfd84 	addi	r4,r4,12278
   24504:	41000015 	stw	r4,0(r8)
   24508:	44400115 	stw	r17,4(r8)
   2450c:	d8c02015 	stw	r3,128(sp)
   24510:	d8801f15 	stw	r2,124(sp)
   24514:	90bff40e 	bge	r18,r2,244e8 <_gp+0xfffe76c8>
   24518:	d9801e04 	addi	r6,sp,120
   2451c:	b80b883a 	mov	r5,r23
   24520:	9809883a 	mov	r4,r19
   24524:	002a6700 	call	2a670 <__sprint_r>
   24528:	103e6d1e 	bne	r2,zero,23ee0 <_gp+0xfffe70c0>
   2452c:	843ffc04 	addi	r16,r16,-16
   24530:	d8c02017 	ldw	r3,128(sp)
   24534:	d8801f17 	ldw	r2,124(sp)
   24538:	da000404 	addi	r8,sp,16
   2453c:	8c3fed16 	blt	r17,r16,244f4 <_gp+0xfffe76d4>
   24540:	d9403517 	ldw	r5,212(sp)
   24544:	1c07883a 	add	r3,r3,r16
   24548:	10800044 	addi	r2,r2,1
   2454c:	41400015 	stw	r5,0(r8)
   24550:	44000115 	stw	r16,4(r8)
   24554:	d8c02015 	stw	r3,128(sp)
   24558:	d8801f15 	stw	r2,124(sp)
   2455c:	010001c4 	movi	r4,7
   24560:	2080060e 	bge	r4,r2,2457c <___vfprintf_internal_r+0xaa4>
   24564:	d9002c17 	ldw	r4,176(sp)
   24568:	d9801e04 	addi	r6,sp,120
   2456c:	b80b883a 	mov	r5,r23
   24570:	002a6700 	call	2a670 <__sprint_r>
   24574:	103e5a1e 	bne	r2,zero,23ee0 <_gp+0xfffe70c0>
   24578:	d8c02017 	ldw	r3,128(sp)
   2457c:	d8803117 	ldw	r2,196(sp)
   24580:	d9002a17 	ldw	r4,168(sp)
   24584:	1100010e 	bge	r2,r4,2458c <___vfprintf_internal_r+0xab4>
   24588:	2005883a 	mov	r2,r4
   2458c:	d9402f17 	ldw	r5,188(sp)
   24590:	288b883a 	add	r5,r5,r2
   24594:	d9402f15 	stw	r5,188(sp)
   24598:	18019e1e 	bne	r3,zero,24c14 <___vfprintf_internal_r+0x113c>
   2459c:	a8800007 	ldb	r2,0(r21)
   245a0:	d8001f15 	stw	zero,124(sp)
   245a4:	da000404 	addi	r8,sp,16
   245a8:	103d851e 	bne	r2,zero,23bc0 <_gp+0xfffe6da0>
   245ac:	a821883a 	mov	r16,r21
   245b0:	003d9b06 	br	23c20 <_gp+0xfffe6e00>
   245b4:	18c03fcc 	andi	r3,r3,255
   245b8:	1805c11e 	bne	r3,zero,25cc0 <___vfprintf_internal_r+0x21e8>
   245bc:	94800414 	ori	r18,r18,16
   245c0:	9080080c 	andi	r2,r18,32
   245c4:	10020c26 	beq	r2,zero,24df8 <___vfprintf_internal_r+0x1320>
   245c8:	d8802d17 	ldw	r2,180(sp)
   245cc:	d9002917 	ldw	r4,164(sp)
   245d0:	d8002785 	stb	zero,158(sp)
   245d4:	10c00204 	addi	r3,r2,8
   245d8:	14c00017 	ldw	r19,0(r2)
   245dc:	15800117 	ldw	r22,4(r2)
   245e0:	20040f16 	blt	r4,zero,25620 <___vfprintf_internal_r+0x1b48>
   245e4:	013fdfc4 	movi	r4,-129
   245e8:	9d84b03a 	or	r2,r19,r22
   245ec:	d8c02d15 	stw	r3,180(sp)
   245f0:	9124703a 	and	r18,r18,r4
   245f4:	0039883a 	mov	fp,zero
   245f8:	103e891e 	bne	r2,zero,24020 <_gp+0xfffe7200>
   245fc:	d9002917 	ldw	r4,164(sp)
   24600:	2002c11e 	bne	r4,zero,25108 <___vfprintf_internal_r+0x1630>
   24604:	d8002915 	stw	zero,164(sp)
   24608:	d8002e15 	stw	zero,184(sp)
   2460c:	dc001e04 	addi	r16,sp,120
   24610:	003ef806 	br	241f4 <_gp+0xfffe73d4>
   24614:	18c03fcc 	andi	r3,r3,255
   24618:	18059d1e 	bne	r3,zero,25c90 <___vfprintf_internal_r+0x21b8>
   2461c:	014000f4 	movhi	r5,3
   24620:	294bed04 	addi	r5,r5,12212
   24624:	d9403915 	stw	r5,228(sp)
   24628:	9080080c 	andi	r2,r18,32
   2462c:	10005226 	beq	r2,zero,24778 <___vfprintf_internal_r+0xca0>
   24630:	d8802d17 	ldw	r2,180(sp)
   24634:	14c00017 	ldw	r19,0(r2)
   24638:	15800117 	ldw	r22,4(r2)
   2463c:	10800204 	addi	r2,r2,8
   24640:	d8802d15 	stw	r2,180(sp)
   24644:	9080004c 	andi	r2,r18,1
   24648:	10019026 	beq	r2,zero,24c8c <___vfprintf_internal_r+0x11b4>
   2464c:	9d84b03a 	or	r2,r19,r22
   24650:	10036926 	beq	r2,zero,253f8 <___vfprintf_internal_r+0x1920>
   24654:	d8c02917 	ldw	r3,164(sp)
   24658:	00800c04 	movi	r2,48
   2465c:	d8802705 	stb	r2,156(sp)
   24660:	dc402745 	stb	r17,157(sp)
   24664:	d8002785 	stb	zero,158(sp)
   24668:	90800094 	ori	r2,r18,2
   2466c:	18045d16 	blt	r3,zero,257e4 <___vfprintf_internal_r+0x1d0c>
   24670:	00bfdfc4 	movi	r2,-129
   24674:	90a4703a 	and	r18,r18,r2
   24678:	94800094 	ori	r18,r18,2
   2467c:	0039883a 	mov	fp,zero
   24680:	d9003917 	ldw	r4,228(sp)
   24684:	dc001e04 	addi	r16,sp,120
   24688:	988003cc 	andi	r2,r19,15
   2468c:	b006973a 	slli	r3,r22,28
   24690:	2085883a 	add	r2,r4,r2
   24694:	9826d13a 	srli	r19,r19,4
   24698:	10800003 	ldbu	r2,0(r2)
   2469c:	b02cd13a 	srli	r22,r22,4
   246a0:	843fffc4 	addi	r16,r16,-1
   246a4:	1ce6b03a 	or	r19,r3,r19
   246a8:	80800005 	stb	r2,0(r16)
   246ac:	9d84b03a 	or	r2,r19,r22
   246b0:	103ff51e 	bne	r2,zero,24688 <_gp+0xfffe7868>
   246b4:	d8c02817 	ldw	r3,160(sp)
   246b8:	1c07c83a 	sub	r3,r3,r16
   246bc:	d8c02e15 	stw	r3,184(sp)
   246c0:	003ecc06 	br	241f4 <_gp+0xfffe73d4>
   246c4:	18c03fcc 	andi	r3,r3,255
   246c8:	183e9f26 	beq	r3,zero,24148 <_gp+0xfffe7328>
   246cc:	d9c02785 	stb	r7,158(sp)
   246d0:	003e9d06 	br	24148 <_gp+0xfffe7328>
   246d4:	00c00044 	movi	r3,1
   246d8:	01c00ac4 	movi	r7,43
   246dc:	ac400007 	ldb	r17,0(r21)
   246e0:	003d5e06 	br	23c5c <_gp+0xfffe6e3c>
   246e4:	94800814 	ori	r18,r18,32
   246e8:	ac400007 	ldb	r17,0(r21)
   246ec:	003d5b06 	br	23c5c <_gp+0xfffe6e3c>
   246f0:	d8c02d17 	ldw	r3,180(sp)
   246f4:	d8002785 	stb	zero,158(sp)
   246f8:	1c000017 	ldw	r16,0(r3)
   246fc:	1cc00104 	addi	r19,r3,4
   24700:	80041926 	beq	r16,zero,25768 <___vfprintf_internal_r+0x1c90>
   24704:	d9002917 	ldw	r4,164(sp)
   24708:	2003d016 	blt	r4,zero,2564c <___vfprintf_internal_r+0x1b74>
   2470c:	200d883a 	mov	r6,r4
   24710:	000b883a 	mov	r5,zero
   24714:	8009883a 	mov	r4,r16
   24718:	da003d15 	stw	r8,244(sp)
   2471c:	0028adc0 	call	28adc <memchr>
   24720:	da003d17 	ldw	r8,244(sp)
   24724:	10045426 	beq	r2,zero,25878 <___vfprintf_internal_r+0x1da0>
   24728:	1405c83a 	sub	r2,r2,r16
   2472c:	d8802e15 	stw	r2,184(sp)
   24730:	1003cc16 	blt	r2,zero,25664 <___vfprintf_internal_r+0x1b8c>
   24734:	df002783 	ldbu	fp,158(sp)
   24738:	d8802a15 	stw	r2,168(sp)
   2473c:	dcc02d15 	stw	r19,180(sp)
   24740:	d8002915 	stw	zero,164(sp)
   24744:	d8003215 	stw	zero,200(sp)
   24748:	003eb006 	br	2420c <_gp+0xfffe73ec>
   2474c:	18c03fcc 	andi	r3,r3,255
   24750:	183f9b26 	beq	r3,zero,245c0 <_gp+0xfffe77a0>
   24754:	d9c02785 	stb	r7,158(sp)
   24758:	003f9906 	br	245c0 <_gp+0xfffe77a0>
   2475c:	18c03fcc 	andi	r3,r3,255
   24760:	1805551e 	bne	r3,zero,25cb8 <___vfprintf_internal_r+0x21e0>
   24764:	014000f4 	movhi	r5,3
   24768:	294bf204 	addi	r5,r5,12232
   2476c:	d9403915 	stw	r5,228(sp)
   24770:	9080080c 	andi	r2,r18,32
   24774:	103fae1e 	bne	r2,zero,24630 <_gp+0xfffe7810>
   24778:	9080040c 	andi	r2,r18,16
   2477c:	1002de26 	beq	r2,zero,252f8 <___vfprintf_internal_r+0x1820>
   24780:	d8c02d17 	ldw	r3,180(sp)
   24784:	002d883a 	mov	r22,zero
   24788:	1cc00017 	ldw	r19,0(r3)
   2478c:	18c00104 	addi	r3,r3,4
   24790:	d8c02d15 	stw	r3,180(sp)
   24794:	003fab06 	br	24644 <_gp+0xfffe7824>
   24798:	38803fcc 	andi	r2,r7,255
   2479c:	1080201c 	xori	r2,r2,128
   247a0:	10bfe004 	addi	r2,r2,-128
   247a4:	1002d21e 	bne	r2,zero,252f0 <___vfprintf_internal_r+0x1818>
   247a8:	00c00044 	movi	r3,1
   247ac:	01c00804 	movi	r7,32
   247b0:	ac400007 	ldb	r17,0(r21)
   247b4:	003d2906 	br	23c5c <_gp+0xfffe6e3c>
   247b8:	94800054 	ori	r18,r18,1
   247bc:	ac400007 	ldb	r17,0(r21)
   247c0:	003d2606 	br	23c5c <_gp+0xfffe6e3c>
   247c4:	18c03fcc 	andi	r3,r3,255
   247c8:	183e0526 	beq	r3,zero,23fe0 <_gp+0xfffe71c0>
   247cc:	d9c02785 	stb	r7,158(sp)
   247d0:	003e0306 	br	23fe0 <_gp+0xfffe71c0>
   247d4:	94801014 	ori	r18,r18,64
   247d8:	ac400007 	ldb	r17,0(r21)
   247dc:	003d1f06 	br	23c5c <_gp+0xfffe6e3c>
   247e0:	ac400007 	ldb	r17,0(r21)
   247e4:	8a438726 	beq	r17,r9,25604 <___vfprintf_internal_r+0x1b2c>
   247e8:	94800414 	ori	r18,r18,16
   247ec:	003d1b06 	br	23c5c <_gp+0xfffe6e3c>
   247f0:	18c03fcc 	andi	r3,r3,255
   247f4:	1805341e 	bne	r3,zero,25cc8 <___vfprintf_internal_r+0x21f0>
   247f8:	9080080c 	andi	r2,r18,32
   247fc:	1002cd26 	beq	r2,zero,25334 <___vfprintf_internal_r+0x185c>
   24800:	d9402d17 	ldw	r5,180(sp)
   24804:	d9002f17 	ldw	r4,188(sp)
   24808:	28800017 	ldw	r2,0(r5)
   2480c:	2007d7fa 	srai	r3,r4,31
   24810:	29400104 	addi	r5,r5,4
   24814:	d9402d15 	stw	r5,180(sp)
   24818:	11000015 	stw	r4,0(r2)
   2481c:	10c00115 	stw	r3,4(r2)
   24820:	003ce506 	br	23bb8 <_gp+0xfffe6d98>
   24824:	d8c02d17 	ldw	r3,180(sp)
   24828:	d9002d17 	ldw	r4,180(sp)
   2482c:	d8002785 	stb	zero,158(sp)
   24830:	18800017 	ldw	r2,0(r3)
   24834:	21000104 	addi	r4,r4,4
   24838:	00c00044 	movi	r3,1
   2483c:	d8c02a15 	stw	r3,168(sp)
   24840:	d8801405 	stb	r2,80(sp)
   24844:	d9002d15 	stw	r4,180(sp)
   24848:	d8c02e15 	stw	r3,184(sp)
   2484c:	d8002915 	stw	zero,164(sp)
   24850:	d8003215 	stw	zero,200(sp)
   24854:	dc001404 	addi	r16,sp,80
   24858:	0039883a 	mov	fp,zero
   2485c:	003e7206 	br	24228 <_gp+0xfffe7408>
   24860:	010000f4 	movhi	r4,3
   24864:	210bf204 	addi	r4,r4,12232
   24868:	0039883a 	mov	fp,zero
   2486c:	d9003915 	stw	r4,228(sp)
   24870:	04401e04 	movi	r17,120
   24874:	003f8206 	br	24680 <_gp+0xfffe7860>
   24878:	18c03fcc 	andi	r3,r3,255
   2487c:	1805061e 	bne	r3,zero,25c98 <___vfprintf_internal_r+0x21c0>
   24880:	883d9126 	beq	r17,zero,23ec8 <_gp+0xfffe70a8>
   24884:	00c00044 	movi	r3,1
   24888:	d8c02a15 	stw	r3,168(sp)
   2488c:	dc401405 	stb	r17,80(sp)
   24890:	d8002785 	stb	zero,158(sp)
   24894:	003fec06 	br	24848 <_gp+0xfffe7a28>
   24898:	014000f4 	movhi	r5,3
   2489c:	294bf204 	addi	r5,r5,12232
   248a0:	d9403915 	stw	r5,228(sp)
   248a4:	d8c02d15 	stw	r3,180(sp)
   248a8:	1025883a 	mov	r18,r2
   248ac:	04401e04 	movi	r17,120
   248b0:	9d84b03a 	or	r2,r19,r22
   248b4:	1000fc1e 	bne	r2,zero,24ca8 <___vfprintf_internal_r+0x11d0>
   248b8:	0039883a 	mov	fp,zero
   248bc:	00800084 	movi	r2,2
   248c0:	10803fcc 	andi	r2,r2,255
   248c4:	00c00044 	movi	r3,1
   248c8:	10c20f26 	beq	r2,r3,25108 <___vfprintf_internal_r+0x1630>
   248cc:	00c00084 	movi	r3,2
   248d0:	10fd6326 	beq	r2,r3,23e60 <_gp+0xfffe7040>
   248d4:	003e2d06 	br	2418c <_gp+0xfffe736c>
   248d8:	d8c02017 	ldw	r3,128(sp)
   248dc:	003e9306 	br	2432c <_gp+0xfffe750c>
   248e0:	00801944 	movi	r2,101
   248e4:	14407e0e 	bge	r2,r17,24ae0 <___vfprintf_internal_r+0x1008>
   248e8:	d9003617 	ldw	r4,216(sp)
   248ec:	d9403817 	ldw	r5,224(sp)
   248f0:	000d883a 	mov	r6,zero
   248f4:	000f883a 	mov	r7,zero
   248f8:	d8c03c15 	stw	r3,240(sp)
   248fc:	da003d15 	stw	r8,244(sp)
   24900:	002e2e80 	call	2e2e8 <__eqdf2>
   24904:	d8c03c17 	ldw	r3,240(sp)
   24908:	da003d17 	ldw	r8,244(sp)
   2490c:	1000f71e 	bne	r2,zero,24cec <___vfprintf_internal_r+0x1214>
   24910:	d8801f17 	ldw	r2,124(sp)
   24914:	010000f4 	movhi	r4,3
   24918:	210bf904 	addi	r4,r4,12260
   2491c:	18c00044 	addi	r3,r3,1
   24920:	10800044 	addi	r2,r2,1
   24924:	41000015 	stw	r4,0(r8)
   24928:	01000044 	movi	r4,1
   2492c:	41000115 	stw	r4,4(r8)
   24930:	d8c02015 	stw	r3,128(sp)
   24934:	d8801f15 	stw	r2,124(sp)
   24938:	010001c4 	movi	r4,7
   2493c:	2082b816 	blt	r4,r2,25420 <___vfprintf_internal_r+0x1948>
   24940:	42000204 	addi	r8,r8,8
   24944:	d8802617 	ldw	r2,152(sp)
   24948:	d9403317 	ldw	r5,204(sp)
   2494c:	11400216 	blt	r2,r5,24958 <___vfprintf_internal_r+0xe80>
   24950:	9080004c 	andi	r2,r18,1
   24954:	103ed526 	beq	r2,zero,244ac <_gp+0xfffe768c>
   24958:	d8803717 	ldw	r2,220(sp)
   2495c:	d9003417 	ldw	r4,208(sp)
   24960:	d9403717 	ldw	r5,220(sp)
   24964:	1887883a 	add	r3,r3,r2
   24968:	d8801f17 	ldw	r2,124(sp)
   2496c:	41000015 	stw	r4,0(r8)
   24970:	41400115 	stw	r5,4(r8)
   24974:	10800044 	addi	r2,r2,1
   24978:	d8c02015 	stw	r3,128(sp)
   2497c:	d8801f15 	stw	r2,124(sp)
   24980:	010001c4 	movi	r4,7
   24984:	20832916 	blt	r4,r2,2562c <___vfprintf_internal_r+0x1b54>
   24988:	42000204 	addi	r8,r8,8
   2498c:	d8803317 	ldw	r2,204(sp)
   24990:	143fffc4 	addi	r16,r2,-1
   24994:	043ec50e 	bge	zero,r16,244ac <_gp+0xfffe768c>
   24998:	04400404 	movi	r17,16
   2499c:	d8801f17 	ldw	r2,124(sp)
   249a0:	8c00880e 	bge	r17,r16,24bc4 <___vfprintf_internal_r+0x10ec>
   249a4:	014000f4 	movhi	r5,3
   249a8:	294bf984 	addi	r5,r5,12262
   249ac:	d9402b15 	stw	r5,172(sp)
   249b0:	058001c4 	movi	r22,7
   249b4:	dcc02c17 	ldw	r19,176(sp)
   249b8:	00000306 	br	249c8 <___vfprintf_internal_r+0xef0>
   249bc:	42000204 	addi	r8,r8,8
   249c0:	843ffc04 	addi	r16,r16,-16
   249c4:	8c00820e 	bge	r17,r16,24bd0 <___vfprintf_internal_r+0x10f8>
   249c8:	18c00404 	addi	r3,r3,16
   249cc:	10800044 	addi	r2,r2,1
   249d0:	45000015 	stw	r20,0(r8)
   249d4:	44400115 	stw	r17,4(r8)
   249d8:	d8c02015 	stw	r3,128(sp)
   249dc:	d8801f15 	stw	r2,124(sp)
   249e0:	b0bff60e 	bge	r22,r2,249bc <_gp+0xfffe7b9c>
   249e4:	d9801e04 	addi	r6,sp,120
   249e8:	b80b883a 	mov	r5,r23
   249ec:	9809883a 	mov	r4,r19
   249f0:	002a6700 	call	2a670 <__sprint_r>
   249f4:	103d3a1e 	bne	r2,zero,23ee0 <_gp+0xfffe70c0>
   249f8:	d8c02017 	ldw	r3,128(sp)
   249fc:	d8801f17 	ldw	r2,124(sp)
   24a00:	da000404 	addi	r8,sp,16
   24a04:	003fee06 	br	249c0 <_gp+0xfffe7ba0>
   24a08:	d9403117 	ldw	r5,196(sp)
   24a0c:	d8802a17 	ldw	r2,168(sp)
   24a10:	28adc83a 	sub	r22,r5,r2
   24a14:	05be630e 	bge	zero,r22,243a4 <_gp+0xfffe7584>
   24a18:	07000404 	movi	fp,16
   24a1c:	d8801f17 	ldw	r2,124(sp)
   24a20:	e5838f0e 	bge	fp,r22,25860 <___vfprintf_internal_r+0x1d88>
   24a24:	014000f4 	movhi	r5,3
   24a28:	294bf984 	addi	r5,r5,12262
   24a2c:	dc403015 	stw	r17,192(sp)
   24a30:	d9402b15 	stw	r5,172(sp)
   24a34:	b023883a 	mov	r17,r22
   24a38:	04c001c4 	movi	r19,7
   24a3c:	a82d883a 	mov	r22,r21
   24a40:	902b883a 	mov	r21,r18
   24a44:	8025883a 	mov	r18,r16
   24a48:	dc002c17 	ldw	r16,176(sp)
   24a4c:	00000306 	br	24a5c <___vfprintf_internal_r+0xf84>
   24a50:	8c7ffc04 	addi	r17,r17,-16
   24a54:	42000204 	addi	r8,r8,8
   24a58:	e440110e 	bge	fp,r17,24aa0 <___vfprintf_internal_r+0xfc8>
   24a5c:	18c00404 	addi	r3,r3,16
   24a60:	10800044 	addi	r2,r2,1
   24a64:	45000015 	stw	r20,0(r8)
   24a68:	47000115 	stw	fp,4(r8)
   24a6c:	d8c02015 	stw	r3,128(sp)
   24a70:	d8801f15 	stw	r2,124(sp)
   24a74:	98bff60e 	bge	r19,r2,24a50 <_gp+0xfffe7c30>
   24a78:	d9801e04 	addi	r6,sp,120
   24a7c:	b80b883a 	mov	r5,r23
   24a80:	8009883a 	mov	r4,r16
   24a84:	002a6700 	call	2a670 <__sprint_r>
   24a88:	103d151e 	bne	r2,zero,23ee0 <_gp+0xfffe70c0>
   24a8c:	8c7ffc04 	addi	r17,r17,-16
   24a90:	d8c02017 	ldw	r3,128(sp)
   24a94:	d8801f17 	ldw	r2,124(sp)
   24a98:	da000404 	addi	r8,sp,16
   24a9c:	e47fef16 	blt	fp,r17,24a5c <_gp+0xfffe7c3c>
   24aa0:	9021883a 	mov	r16,r18
   24aa4:	a825883a 	mov	r18,r21
   24aa8:	b02b883a 	mov	r21,r22
   24aac:	882d883a 	mov	r22,r17
   24ab0:	dc403017 	ldw	r17,192(sp)
   24ab4:	d9002b17 	ldw	r4,172(sp)
   24ab8:	1d87883a 	add	r3,r3,r22
   24abc:	10800044 	addi	r2,r2,1
   24ac0:	41000015 	stw	r4,0(r8)
   24ac4:	45800115 	stw	r22,4(r8)
   24ac8:	d8c02015 	stw	r3,128(sp)
   24acc:	d8801f15 	stw	r2,124(sp)
   24ad0:	010001c4 	movi	r4,7
   24ad4:	20818e16 	blt	r4,r2,25110 <___vfprintf_internal_r+0x1638>
   24ad8:	42000204 	addi	r8,r8,8
   24adc:	003e3106 	br	243a4 <_gp+0xfffe7584>
   24ae0:	d9403317 	ldw	r5,204(sp)
   24ae4:	00800044 	movi	r2,1
   24ae8:	18c00044 	addi	r3,r3,1
   24aec:	1141530e 	bge	r2,r5,2503c <___vfprintf_internal_r+0x1564>
   24af0:	dc401f17 	ldw	r17,124(sp)
   24af4:	00800044 	movi	r2,1
   24af8:	40800115 	stw	r2,4(r8)
   24afc:	8c400044 	addi	r17,r17,1
   24b00:	44000015 	stw	r16,0(r8)
   24b04:	d8c02015 	stw	r3,128(sp)
   24b08:	dc401f15 	stw	r17,124(sp)
   24b0c:	008001c4 	movi	r2,7
   24b10:	14416b16 	blt	r2,r17,250c0 <___vfprintf_internal_r+0x15e8>
   24b14:	42000204 	addi	r8,r8,8
   24b18:	d8803717 	ldw	r2,220(sp)
   24b1c:	d9003417 	ldw	r4,208(sp)
   24b20:	8c400044 	addi	r17,r17,1
   24b24:	10c7883a 	add	r3,r2,r3
   24b28:	40800115 	stw	r2,4(r8)
   24b2c:	41000015 	stw	r4,0(r8)
   24b30:	d8c02015 	stw	r3,128(sp)
   24b34:	dc401f15 	stw	r17,124(sp)
   24b38:	008001c4 	movi	r2,7
   24b3c:	14416916 	blt	r2,r17,250e4 <___vfprintf_internal_r+0x160c>
   24b40:	45800204 	addi	r22,r8,8
   24b44:	d9003617 	ldw	r4,216(sp)
   24b48:	d9403817 	ldw	r5,224(sp)
   24b4c:	000d883a 	mov	r6,zero
   24b50:	000f883a 	mov	r7,zero
   24b54:	d8c03c15 	stw	r3,240(sp)
   24b58:	002e2e80 	call	2e2e8 <__eqdf2>
   24b5c:	d8c03c17 	ldw	r3,240(sp)
   24b60:	1000bc26 	beq	r2,zero,24e54 <___vfprintf_internal_r+0x137c>
   24b64:	d9403317 	ldw	r5,204(sp)
   24b68:	84000044 	addi	r16,r16,1
   24b6c:	8c400044 	addi	r17,r17,1
   24b70:	28bfffc4 	addi	r2,r5,-1
   24b74:	1887883a 	add	r3,r3,r2
   24b78:	b0800115 	stw	r2,4(r22)
   24b7c:	b4000015 	stw	r16,0(r22)
   24b80:	d8c02015 	stw	r3,128(sp)
   24b84:	dc401f15 	stw	r17,124(sp)
   24b88:	008001c4 	movi	r2,7
   24b8c:	14414316 	blt	r2,r17,2509c <___vfprintf_internal_r+0x15c4>
   24b90:	b5800204 	addi	r22,r22,8
   24b94:	d9003a17 	ldw	r4,232(sp)
   24b98:	df0022c4 	addi	fp,sp,139
   24b9c:	8c400044 	addi	r17,r17,1
   24ba0:	20c7883a 	add	r3,r4,r3
   24ba4:	b7000015 	stw	fp,0(r22)
   24ba8:	b1000115 	stw	r4,4(r22)
   24bac:	d8c02015 	stw	r3,128(sp)
   24bb0:	dc401f15 	stw	r17,124(sp)
   24bb4:	008001c4 	movi	r2,7
   24bb8:	14400e16 	blt	r2,r17,24bf4 <___vfprintf_internal_r+0x111c>
   24bbc:	b2000204 	addi	r8,r22,8
   24bc0:	003e3a06 	br	244ac <_gp+0xfffe768c>
   24bc4:	010000f4 	movhi	r4,3
   24bc8:	210bf984 	addi	r4,r4,12262
   24bcc:	d9002b15 	stw	r4,172(sp)
   24bd0:	d9002b17 	ldw	r4,172(sp)
   24bd4:	1c07883a 	add	r3,r3,r16
   24bd8:	44000115 	stw	r16,4(r8)
   24bdc:	41000015 	stw	r4,0(r8)
   24be0:	10800044 	addi	r2,r2,1
   24be4:	d8c02015 	stw	r3,128(sp)
   24be8:	d8801f15 	stw	r2,124(sp)
   24bec:	010001c4 	movi	r4,7
   24bf0:	20be2d0e 	bge	r4,r2,244a8 <_gp+0xfffe7688>
   24bf4:	d9002c17 	ldw	r4,176(sp)
   24bf8:	d9801e04 	addi	r6,sp,120
   24bfc:	b80b883a 	mov	r5,r23
   24c00:	002a6700 	call	2a670 <__sprint_r>
   24c04:	103cb61e 	bne	r2,zero,23ee0 <_gp+0xfffe70c0>
   24c08:	d8c02017 	ldw	r3,128(sp)
   24c0c:	da000404 	addi	r8,sp,16
   24c10:	003e2606 	br	244ac <_gp+0xfffe768c>
   24c14:	d9002c17 	ldw	r4,176(sp)
   24c18:	d9801e04 	addi	r6,sp,120
   24c1c:	b80b883a 	mov	r5,r23
   24c20:	002a6700 	call	2a670 <__sprint_r>
   24c24:	103e5d26 	beq	r2,zero,2459c <_gp+0xfffe777c>
   24c28:	003cad06 	br	23ee0 <_gp+0xfffe70c0>
   24c2c:	d9002c17 	ldw	r4,176(sp)
   24c30:	d9801e04 	addi	r6,sp,120
   24c34:	b80b883a 	mov	r5,r23
   24c38:	002a6700 	call	2a670 <__sprint_r>
   24c3c:	103ca81e 	bne	r2,zero,23ee0 <_gp+0xfffe70c0>
   24c40:	d8c02017 	ldw	r3,128(sp)
   24c44:	da000404 	addi	r8,sp,16
   24c48:	003e0b06 	br	24478 <_gp+0xfffe7658>
   24c4c:	d9002c17 	ldw	r4,176(sp)
   24c50:	d9801e04 	addi	r6,sp,120
   24c54:	b80b883a 	mov	r5,r23
   24c58:	002a6700 	call	2a670 <__sprint_r>
   24c5c:	103ca01e 	bne	r2,zero,23ee0 <_gp+0xfffe70c0>
   24c60:	d8c02017 	ldw	r3,128(sp)
   24c64:	da000404 	addi	r8,sp,16
   24c68:	003dbd06 	br	24360 <_gp+0xfffe7540>
   24c6c:	d9002c17 	ldw	r4,176(sp)
   24c70:	d9801e04 	addi	r6,sp,120
   24c74:	b80b883a 	mov	r5,r23
   24c78:	002a6700 	call	2a670 <__sprint_r>
   24c7c:	103c981e 	bne	r2,zero,23ee0 <_gp+0xfffe70c0>
   24c80:	d8c02017 	ldw	r3,128(sp)
   24c84:	da000404 	addi	r8,sp,16
   24c88:	003dc306 	br	24398 <_gp+0xfffe7578>
   24c8c:	d8802917 	ldw	r2,164(sp)
   24c90:	d8002785 	stb	zero,158(sp)
   24c94:	103f0616 	blt	r2,zero,248b0 <_gp+0xfffe7a90>
   24c98:	00ffdfc4 	movi	r3,-129
   24c9c:	9d84b03a 	or	r2,r19,r22
   24ca0:	90e4703a 	and	r18,r18,r3
   24ca4:	103c6b26 	beq	r2,zero,23e54 <_gp+0xfffe7034>
   24ca8:	0039883a 	mov	fp,zero
   24cac:	003e7406 	br	24680 <_gp+0xfffe7860>
   24cb0:	9080040c 	andi	r2,r18,16
   24cb4:	1001b326 	beq	r2,zero,25384 <___vfprintf_internal_r+0x18ac>
   24cb8:	d9002d17 	ldw	r4,180(sp)
   24cbc:	d9402917 	ldw	r5,164(sp)
   24cc0:	d8002785 	stb	zero,158(sp)
   24cc4:	20800104 	addi	r2,r4,4
   24cc8:	24c00017 	ldw	r19,0(r4)
   24ccc:	002d883a 	mov	r22,zero
   24cd0:	2801b516 	blt	r5,zero,253a8 <___vfprintf_internal_r+0x18d0>
   24cd4:	00ffdfc4 	movi	r3,-129
   24cd8:	d8802d15 	stw	r2,180(sp)
   24cdc:	90e4703a 	and	r18,r18,r3
   24ce0:	983d2726 	beq	r19,zero,24180 <_gp+0xfffe7360>
   24ce4:	0039883a 	mov	fp,zero
   24ce8:	003d2a06 	br	24194 <_gp+0xfffe7374>
   24cec:	dc402617 	ldw	r17,152(sp)
   24cf0:	0441d30e 	bge	zero,r17,25440 <___vfprintf_internal_r+0x1968>
   24cf4:	dc403217 	ldw	r17,200(sp)
   24cf8:	d8803317 	ldw	r2,204(sp)
   24cfc:	1440010e 	bge	r2,r17,24d04 <___vfprintf_internal_r+0x122c>
   24d00:	1023883a 	mov	r17,r2
   24d04:	04400a0e 	bge	zero,r17,24d30 <___vfprintf_internal_r+0x1258>
   24d08:	d8801f17 	ldw	r2,124(sp)
   24d0c:	1c47883a 	add	r3,r3,r17
   24d10:	44000015 	stw	r16,0(r8)
   24d14:	10800044 	addi	r2,r2,1
   24d18:	44400115 	stw	r17,4(r8)
   24d1c:	d8c02015 	stw	r3,128(sp)
   24d20:	d8801f15 	stw	r2,124(sp)
   24d24:	010001c4 	movi	r4,7
   24d28:	20826516 	blt	r4,r2,256c0 <___vfprintf_internal_r+0x1be8>
   24d2c:	42000204 	addi	r8,r8,8
   24d30:	88026116 	blt	r17,zero,256b8 <___vfprintf_internal_r+0x1be0>
   24d34:	d9003217 	ldw	r4,200(sp)
   24d38:	2463c83a 	sub	r17,r4,r17
   24d3c:	04407b0e 	bge	zero,r17,24f2c <___vfprintf_internal_r+0x1454>
   24d40:	05800404 	movi	r22,16
   24d44:	d8801f17 	ldw	r2,124(sp)
   24d48:	b4419d0e 	bge	r22,r17,253c0 <___vfprintf_internal_r+0x18e8>
   24d4c:	010000f4 	movhi	r4,3
   24d50:	210bf984 	addi	r4,r4,12262
   24d54:	d9002b15 	stw	r4,172(sp)
   24d58:	070001c4 	movi	fp,7
   24d5c:	dcc02c17 	ldw	r19,176(sp)
   24d60:	00000306 	br	24d70 <___vfprintf_internal_r+0x1298>
   24d64:	42000204 	addi	r8,r8,8
   24d68:	8c7ffc04 	addi	r17,r17,-16
   24d6c:	b441970e 	bge	r22,r17,253cc <___vfprintf_internal_r+0x18f4>
   24d70:	18c00404 	addi	r3,r3,16
   24d74:	10800044 	addi	r2,r2,1
   24d78:	45000015 	stw	r20,0(r8)
   24d7c:	45800115 	stw	r22,4(r8)
   24d80:	d8c02015 	stw	r3,128(sp)
   24d84:	d8801f15 	stw	r2,124(sp)
   24d88:	e0bff60e 	bge	fp,r2,24d64 <_gp+0xfffe7f44>
   24d8c:	d9801e04 	addi	r6,sp,120
   24d90:	b80b883a 	mov	r5,r23
   24d94:	9809883a 	mov	r4,r19
   24d98:	002a6700 	call	2a670 <__sprint_r>
   24d9c:	103c501e 	bne	r2,zero,23ee0 <_gp+0xfffe70c0>
   24da0:	d8c02017 	ldw	r3,128(sp)
   24da4:	d8801f17 	ldw	r2,124(sp)
   24da8:	da000404 	addi	r8,sp,16
   24dac:	003fee06 	br	24d68 <_gp+0xfffe7f48>
   24db0:	d9002c17 	ldw	r4,176(sp)
   24db4:	d9801e04 	addi	r6,sp,120
   24db8:	b80b883a 	mov	r5,r23
   24dbc:	002a6700 	call	2a670 <__sprint_r>
   24dc0:	103c471e 	bne	r2,zero,23ee0 <_gp+0xfffe70c0>
   24dc4:	d8c02017 	ldw	r3,128(sp)
   24dc8:	df002787 	ldb	fp,158(sp)
   24dcc:	da000404 	addi	r8,sp,16
   24dd0:	003d5606 	br	2432c <_gp+0xfffe750c>
   24dd4:	9080040c 	andi	r2,r18,16
   24dd8:	10016126 	beq	r2,zero,25360 <___vfprintf_internal_r+0x1888>
   24ddc:	d8802d17 	ldw	r2,180(sp)
   24de0:	14c00017 	ldw	r19,0(r2)
   24de4:	10800104 	addi	r2,r2,4
   24de8:	d8802d15 	stw	r2,180(sp)
   24dec:	982dd7fa 	srai	r22,r19,31
   24df0:	b005883a 	mov	r2,r22
   24df4:	003c8206 	br	24000 <_gp+0xfffe71e0>
   24df8:	9080040c 	andi	r2,r18,16
   24dfc:	10003526 	beq	r2,zero,24ed4 <___vfprintf_internal_r+0x13fc>
   24e00:	d9402d17 	ldw	r5,180(sp)
   24e04:	d8c02917 	ldw	r3,164(sp)
   24e08:	d8002785 	stb	zero,158(sp)
   24e0c:	28800104 	addi	r2,r5,4
   24e10:	2cc00017 	ldw	r19,0(r5)
   24e14:	002d883a 	mov	r22,zero
   24e18:	18003716 	blt	r3,zero,24ef8 <___vfprintf_internal_r+0x1420>
   24e1c:	00ffdfc4 	movi	r3,-129
   24e20:	d8802d15 	stw	r2,180(sp)
   24e24:	90e4703a 	and	r18,r18,r3
   24e28:	0039883a 	mov	fp,zero
   24e2c:	983df326 	beq	r19,zero,245fc <_gp+0xfffe77dc>
   24e30:	00800244 	movi	r2,9
   24e34:	14fc7b36 	bltu	r2,r19,24024 <_gp+0xfffe7204>
   24e38:	d8c02817 	ldw	r3,160(sp)
   24e3c:	dc001dc4 	addi	r16,sp,119
   24e40:	9cc00c04 	addi	r19,r19,48
   24e44:	1c07c83a 	sub	r3,r3,r16
   24e48:	dcc01dc5 	stb	r19,119(sp)
   24e4c:	d8c02e15 	stw	r3,184(sp)
   24e50:	003ce806 	br	241f4 <_gp+0xfffe73d4>
   24e54:	d8803317 	ldw	r2,204(sp)
   24e58:	143fffc4 	addi	r16,r2,-1
   24e5c:	043f4d0e 	bge	zero,r16,24b94 <_gp+0xfffe7d74>
   24e60:	07000404 	movi	fp,16
   24e64:	e400810e 	bge	fp,r16,2506c <___vfprintf_internal_r+0x1594>
   24e68:	014000f4 	movhi	r5,3
   24e6c:	294bf984 	addi	r5,r5,12262
   24e70:	d9402b15 	stw	r5,172(sp)
   24e74:	01c001c4 	movi	r7,7
   24e78:	dcc02c17 	ldw	r19,176(sp)
   24e7c:	00000306 	br	24e8c <___vfprintf_internal_r+0x13b4>
   24e80:	b5800204 	addi	r22,r22,8
   24e84:	843ffc04 	addi	r16,r16,-16
   24e88:	e4007b0e 	bge	fp,r16,25078 <___vfprintf_internal_r+0x15a0>
   24e8c:	18c00404 	addi	r3,r3,16
   24e90:	8c400044 	addi	r17,r17,1
   24e94:	b5000015 	stw	r20,0(r22)
   24e98:	b7000115 	stw	fp,4(r22)
   24e9c:	d8c02015 	stw	r3,128(sp)
   24ea0:	dc401f15 	stw	r17,124(sp)
   24ea4:	3c7ff60e 	bge	r7,r17,24e80 <_gp+0xfffe8060>
   24ea8:	d9801e04 	addi	r6,sp,120
   24eac:	b80b883a 	mov	r5,r23
   24eb0:	9809883a 	mov	r4,r19
   24eb4:	d9c03c15 	stw	r7,240(sp)
   24eb8:	002a6700 	call	2a670 <__sprint_r>
   24ebc:	d9c03c17 	ldw	r7,240(sp)
   24ec0:	103c071e 	bne	r2,zero,23ee0 <_gp+0xfffe70c0>
   24ec4:	d8c02017 	ldw	r3,128(sp)
   24ec8:	dc401f17 	ldw	r17,124(sp)
   24ecc:	dd800404 	addi	r22,sp,16
   24ed0:	003fec06 	br	24e84 <_gp+0xfffe8064>
   24ed4:	9080100c 	andi	r2,r18,64
   24ed8:	d8002785 	stb	zero,158(sp)
   24edc:	10010e26 	beq	r2,zero,25318 <___vfprintf_internal_r+0x1840>
   24ee0:	d9002d17 	ldw	r4,180(sp)
   24ee4:	d9402917 	ldw	r5,164(sp)
   24ee8:	002d883a 	mov	r22,zero
   24eec:	20800104 	addi	r2,r4,4
   24ef0:	24c0000b 	ldhu	r19,0(r4)
   24ef4:	283fc90e 	bge	r5,zero,24e1c <_gp+0xfffe7ffc>
   24ef8:	d8802d15 	stw	r2,180(sp)
   24efc:	0039883a 	mov	fp,zero
   24f00:	9d84b03a 	or	r2,r19,r22
   24f04:	103c461e 	bne	r2,zero,24020 <_gp+0xfffe7200>
   24f08:	00800044 	movi	r2,1
   24f0c:	003e6c06 	br	248c0 <_gp+0xfffe7aa0>
   24f10:	d9002c17 	ldw	r4,176(sp)
   24f14:	d9801e04 	addi	r6,sp,120
   24f18:	b80b883a 	mov	r5,r23
   24f1c:	002a6700 	call	2a670 <__sprint_r>
   24f20:	103bef1e 	bne	r2,zero,23ee0 <_gp+0xfffe70c0>
   24f24:	d8c02017 	ldw	r3,128(sp)
   24f28:	da000404 	addi	r8,sp,16
   24f2c:	d9003217 	ldw	r4,200(sp)
   24f30:	d8802617 	ldw	r2,152(sp)
   24f34:	d9403317 	ldw	r5,204(sp)
   24f38:	8123883a 	add	r17,r16,r4
   24f3c:	11400216 	blt	r2,r5,24f48 <___vfprintf_internal_r+0x1470>
   24f40:	9100004c 	andi	r4,r18,1
   24f44:	20000d26 	beq	r4,zero,24f7c <___vfprintf_internal_r+0x14a4>
   24f48:	d9003717 	ldw	r4,220(sp)
   24f4c:	d9403417 	ldw	r5,208(sp)
   24f50:	1907883a 	add	r3,r3,r4
   24f54:	d9001f17 	ldw	r4,124(sp)
   24f58:	41400015 	stw	r5,0(r8)
   24f5c:	d9403717 	ldw	r5,220(sp)
   24f60:	21000044 	addi	r4,r4,1
   24f64:	d8c02015 	stw	r3,128(sp)
   24f68:	41400115 	stw	r5,4(r8)
   24f6c:	d9001f15 	stw	r4,124(sp)
   24f70:	014001c4 	movi	r5,7
   24f74:	2901e816 	blt	r5,r4,25718 <___vfprintf_internal_r+0x1c40>
   24f78:	42000204 	addi	r8,r8,8
   24f7c:	d9003317 	ldw	r4,204(sp)
   24f80:	8121883a 	add	r16,r16,r4
   24f84:	2085c83a 	sub	r2,r4,r2
   24f88:	8461c83a 	sub	r16,r16,r17
   24f8c:	1400010e 	bge	r2,r16,24f94 <___vfprintf_internal_r+0x14bc>
   24f90:	1021883a 	mov	r16,r2
   24f94:	04000a0e 	bge	zero,r16,24fc0 <___vfprintf_internal_r+0x14e8>
   24f98:	d9001f17 	ldw	r4,124(sp)
   24f9c:	1c07883a 	add	r3,r3,r16
   24fa0:	44400015 	stw	r17,0(r8)
   24fa4:	21000044 	addi	r4,r4,1
   24fa8:	44000115 	stw	r16,4(r8)
   24fac:	d8c02015 	stw	r3,128(sp)
   24fb0:	d9001f15 	stw	r4,124(sp)
   24fb4:	014001c4 	movi	r5,7
   24fb8:	2901fb16 	blt	r5,r4,257a8 <___vfprintf_internal_r+0x1cd0>
   24fbc:	42000204 	addi	r8,r8,8
   24fc0:	8001f716 	blt	r16,zero,257a0 <___vfprintf_internal_r+0x1cc8>
   24fc4:	1421c83a 	sub	r16,r2,r16
   24fc8:	043d380e 	bge	zero,r16,244ac <_gp+0xfffe768c>
   24fcc:	04400404 	movi	r17,16
   24fd0:	d8801f17 	ldw	r2,124(sp)
   24fd4:	8c3efb0e 	bge	r17,r16,24bc4 <_gp+0xfffe7da4>
   24fd8:	014000f4 	movhi	r5,3
   24fdc:	294bf984 	addi	r5,r5,12262
   24fe0:	d9402b15 	stw	r5,172(sp)
   24fe4:	058001c4 	movi	r22,7
   24fe8:	dcc02c17 	ldw	r19,176(sp)
   24fec:	00000306 	br	24ffc <___vfprintf_internal_r+0x1524>
   24ff0:	42000204 	addi	r8,r8,8
   24ff4:	843ffc04 	addi	r16,r16,-16
   24ff8:	8c3ef50e 	bge	r17,r16,24bd0 <_gp+0xfffe7db0>
   24ffc:	18c00404 	addi	r3,r3,16
   25000:	10800044 	addi	r2,r2,1
   25004:	45000015 	stw	r20,0(r8)
   25008:	44400115 	stw	r17,4(r8)
   2500c:	d8c02015 	stw	r3,128(sp)
   25010:	d8801f15 	stw	r2,124(sp)
   25014:	b0bff60e 	bge	r22,r2,24ff0 <_gp+0xfffe81d0>
   25018:	d9801e04 	addi	r6,sp,120
   2501c:	b80b883a 	mov	r5,r23
   25020:	9809883a 	mov	r4,r19
   25024:	002a6700 	call	2a670 <__sprint_r>
   25028:	103bad1e 	bne	r2,zero,23ee0 <_gp+0xfffe70c0>
   2502c:	d8c02017 	ldw	r3,128(sp)
   25030:	d8801f17 	ldw	r2,124(sp)
   25034:	da000404 	addi	r8,sp,16
   25038:	003fee06 	br	24ff4 <_gp+0xfffe81d4>
   2503c:	9088703a 	and	r4,r18,r2
   25040:	203eab1e 	bne	r4,zero,24af0 <_gp+0xfffe7cd0>
   25044:	dc401f17 	ldw	r17,124(sp)
   25048:	40800115 	stw	r2,4(r8)
   2504c:	44000015 	stw	r16,0(r8)
   25050:	8c400044 	addi	r17,r17,1
   25054:	d8c02015 	stw	r3,128(sp)
   25058:	dc401f15 	stw	r17,124(sp)
   2505c:	008001c4 	movi	r2,7
   25060:	14400e16 	blt	r2,r17,2509c <___vfprintf_internal_r+0x15c4>
   25064:	45800204 	addi	r22,r8,8
   25068:	003eca06 	br	24b94 <_gp+0xfffe7d74>
   2506c:	010000f4 	movhi	r4,3
   25070:	210bf984 	addi	r4,r4,12262
   25074:	d9002b15 	stw	r4,172(sp)
   25078:	d8802b17 	ldw	r2,172(sp)
   2507c:	1c07883a 	add	r3,r3,r16
   25080:	8c400044 	addi	r17,r17,1
   25084:	b0800015 	stw	r2,0(r22)
   25088:	b4000115 	stw	r16,4(r22)
   2508c:	d8c02015 	stw	r3,128(sp)
   25090:	dc401f15 	stw	r17,124(sp)
   25094:	008001c4 	movi	r2,7
   25098:	147ebd0e 	bge	r2,r17,24b90 <_gp+0xfffe7d70>
   2509c:	d9002c17 	ldw	r4,176(sp)
   250a0:	d9801e04 	addi	r6,sp,120
   250a4:	b80b883a 	mov	r5,r23
   250a8:	002a6700 	call	2a670 <__sprint_r>
   250ac:	103b8c1e 	bne	r2,zero,23ee0 <_gp+0xfffe70c0>
   250b0:	d8c02017 	ldw	r3,128(sp)
   250b4:	dc401f17 	ldw	r17,124(sp)
   250b8:	dd800404 	addi	r22,sp,16
   250bc:	003eb506 	br	24b94 <_gp+0xfffe7d74>
   250c0:	d9002c17 	ldw	r4,176(sp)
   250c4:	d9801e04 	addi	r6,sp,120
   250c8:	b80b883a 	mov	r5,r23
   250cc:	002a6700 	call	2a670 <__sprint_r>
   250d0:	103b831e 	bne	r2,zero,23ee0 <_gp+0xfffe70c0>
   250d4:	d8c02017 	ldw	r3,128(sp)
   250d8:	dc401f17 	ldw	r17,124(sp)
   250dc:	da000404 	addi	r8,sp,16
   250e0:	003e8d06 	br	24b18 <_gp+0xfffe7cf8>
   250e4:	d9002c17 	ldw	r4,176(sp)
   250e8:	d9801e04 	addi	r6,sp,120
   250ec:	b80b883a 	mov	r5,r23
   250f0:	002a6700 	call	2a670 <__sprint_r>
   250f4:	103b7a1e 	bne	r2,zero,23ee0 <_gp+0xfffe70c0>
   250f8:	d8c02017 	ldw	r3,128(sp)
   250fc:	dc401f17 	ldw	r17,124(sp)
   25100:	dd800404 	addi	r22,sp,16
   25104:	003e8f06 	br	24b44 <_gp+0xfffe7d24>
   25108:	0027883a 	mov	r19,zero
   2510c:	003f4a06 	br	24e38 <_gp+0xfffe8018>
   25110:	d9002c17 	ldw	r4,176(sp)
   25114:	d9801e04 	addi	r6,sp,120
   25118:	b80b883a 	mov	r5,r23
   2511c:	002a6700 	call	2a670 <__sprint_r>
   25120:	103b6f1e 	bne	r2,zero,23ee0 <_gp+0xfffe70c0>
   25124:	d8c02017 	ldw	r3,128(sp)
   25128:	da000404 	addi	r8,sp,16
   2512c:	003c9d06 	br	243a4 <_gp+0xfffe7584>
   25130:	04e7c83a 	sub	r19,zero,r19
   25134:	9804c03a 	cmpne	r2,r19,zero
   25138:	05adc83a 	sub	r22,zero,r22
   2513c:	b0adc83a 	sub	r22,r22,r2
   25140:	d8802917 	ldw	r2,164(sp)
   25144:	07000b44 	movi	fp,45
   25148:	df002785 	stb	fp,158(sp)
   2514c:	10017b16 	blt	r2,zero,2573c <___vfprintf_internal_r+0x1c64>
   25150:	00bfdfc4 	movi	r2,-129
   25154:	90a4703a 	and	r18,r18,r2
   25158:	003bb106 	br	24020 <_gp+0xfffe7200>
   2515c:	d9003617 	ldw	r4,216(sp)
   25160:	d9403817 	ldw	r5,224(sp)
   25164:	da003d15 	stw	r8,244(sp)
   25168:	002a3c40 	call	2a3c4 <__fpclassifyd>
   2516c:	da003d17 	ldw	r8,244(sp)
   25170:	1000f026 	beq	r2,zero,25534 <___vfprintf_internal_r+0x1a5c>
   25174:	d9002917 	ldw	r4,164(sp)
   25178:	05bff7c4 	movi	r22,-33
   2517c:	00bfffc4 	movi	r2,-1
   25180:	8dac703a 	and	r22,r17,r22
   25184:	20820026 	beq	r4,r2,25988 <___vfprintf_internal_r+0x1eb0>
   25188:	008011c4 	movi	r2,71
   2518c:	b081f726 	beq	r22,r2,2596c <___vfprintf_internal_r+0x1e94>
   25190:	d9003817 	ldw	r4,224(sp)
   25194:	90c04014 	ori	r3,r18,256
   25198:	d8c02b15 	stw	r3,172(sp)
   2519c:	20021516 	blt	r4,zero,259f4 <___vfprintf_internal_r+0x1f1c>
   251a0:	dcc03817 	ldw	r19,224(sp)
   251a4:	d8002a05 	stb	zero,168(sp)
   251a8:	00801984 	movi	r2,102
   251ac:	8881f926 	beq	r17,r2,25994 <___vfprintf_internal_r+0x1ebc>
   251b0:	00801184 	movi	r2,70
   251b4:	88821c26 	beq	r17,r2,25a28 <___vfprintf_internal_r+0x1f50>
   251b8:	00801144 	movi	r2,69
   251bc:	b081ef26 	beq	r22,r2,2597c <___vfprintf_internal_r+0x1ea4>
   251c0:	d8c02917 	ldw	r3,164(sp)
   251c4:	d8802104 	addi	r2,sp,132
   251c8:	d8800315 	stw	r2,12(sp)
   251cc:	d9403617 	ldw	r5,216(sp)
   251d0:	d8802504 	addi	r2,sp,148
   251d4:	d9002c17 	ldw	r4,176(sp)
   251d8:	d8800215 	stw	r2,8(sp)
   251dc:	d8802604 	addi	r2,sp,152
   251e0:	d8c00015 	stw	r3,0(sp)
   251e4:	d8800115 	stw	r2,4(sp)
   251e8:	01c00084 	movi	r7,2
   251ec:	980d883a 	mov	r6,r19
   251f0:	d8c03c15 	stw	r3,240(sp)
   251f4:	da003d15 	stw	r8,244(sp)
   251f8:	00260fc0 	call	260fc <_dtoa_r>
   251fc:	1021883a 	mov	r16,r2
   25200:	008019c4 	movi	r2,103
   25204:	d8c03c17 	ldw	r3,240(sp)
   25208:	da003d17 	ldw	r8,244(sp)
   2520c:	88817126 	beq	r17,r2,257d4 <___vfprintf_internal_r+0x1cfc>
   25210:	008011c4 	movi	r2,71
   25214:	88829226 	beq	r17,r2,25c60 <___vfprintf_internal_r+0x2188>
   25218:	80f9883a 	add	fp,r16,r3
   2521c:	d9003617 	ldw	r4,216(sp)
   25220:	000d883a 	mov	r6,zero
   25224:	000f883a 	mov	r7,zero
   25228:	980b883a 	mov	r5,r19
   2522c:	da003d15 	stw	r8,244(sp)
   25230:	002e2e80 	call	2e2e8 <__eqdf2>
   25234:	da003d17 	ldw	r8,244(sp)
   25238:	10018d26 	beq	r2,zero,25870 <___vfprintf_internal_r+0x1d98>
   2523c:	d8802117 	ldw	r2,132(sp)
   25240:	1700062e 	bgeu	r2,fp,2525c <___vfprintf_internal_r+0x1784>
   25244:	01000c04 	movi	r4,48
   25248:	10c00044 	addi	r3,r2,1
   2524c:	d8c02115 	stw	r3,132(sp)
   25250:	11000005 	stb	r4,0(r2)
   25254:	d8802117 	ldw	r2,132(sp)
   25258:	173ffb36 	bltu	r2,fp,25248 <_gp+0xfffe8428>
   2525c:	1405c83a 	sub	r2,r2,r16
   25260:	d8803315 	stw	r2,204(sp)
   25264:	008011c4 	movi	r2,71
   25268:	b0817626 	beq	r22,r2,25844 <___vfprintf_internal_r+0x1d6c>
   2526c:	00801944 	movi	r2,101
   25270:	1442810e 	bge	r2,r17,25c78 <___vfprintf_internal_r+0x21a0>
   25274:	d8c02617 	ldw	r3,152(sp)
   25278:	00801984 	movi	r2,102
   2527c:	d8c03215 	stw	r3,200(sp)
   25280:	8881fe26 	beq	r17,r2,25a7c <___vfprintf_internal_r+0x1fa4>
   25284:	d8c03217 	ldw	r3,200(sp)
   25288:	d9003317 	ldw	r4,204(sp)
   2528c:	1901dd16 	blt	r3,r4,25a04 <___vfprintf_internal_r+0x1f2c>
   25290:	9480004c 	andi	r18,r18,1
   25294:	90022b1e 	bne	r18,zero,25b44 <___vfprintf_internal_r+0x206c>
   25298:	1805883a 	mov	r2,r3
   2529c:	18028016 	blt	r3,zero,25ca0 <___vfprintf_internal_r+0x21c8>
   252a0:	d8c03217 	ldw	r3,200(sp)
   252a4:	044019c4 	movi	r17,103
   252a8:	d8c02e15 	stw	r3,184(sp)
   252ac:	df002a07 	ldb	fp,168(sp)
   252b0:	e001531e 	bne	fp,zero,25800 <___vfprintf_internal_r+0x1d28>
   252b4:	df002783 	ldbu	fp,158(sp)
   252b8:	d8802a15 	stw	r2,168(sp)
   252bc:	dc802b17 	ldw	r18,172(sp)
   252c0:	d8002915 	stw	zero,164(sp)
   252c4:	003bd106 	br	2420c <_gp+0xfffe73ec>
   252c8:	d8802d17 	ldw	r2,180(sp)
   252cc:	d8c02d17 	ldw	r3,180(sp)
   252d0:	d9002d17 	ldw	r4,180(sp)
   252d4:	10800017 	ldw	r2,0(r2)
   252d8:	18c00117 	ldw	r3,4(r3)
   252dc:	21000204 	addi	r4,r4,8
   252e0:	d8803615 	stw	r2,216(sp)
   252e4:	d8c03815 	stw	r3,224(sp)
   252e8:	d9002d15 	stw	r4,180(sp)
   252ec:	003b7506 	br	240c4 <_gp+0xfffe72a4>
   252f0:	ac400007 	ldb	r17,0(r21)
   252f4:	003a5906 	br	23c5c <_gp+0xfffe6e3c>
   252f8:	9080100c 	andi	r2,r18,64
   252fc:	1000a826 	beq	r2,zero,255a0 <___vfprintf_internal_r+0x1ac8>
   25300:	d9002d17 	ldw	r4,180(sp)
   25304:	002d883a 	mov	r22,zero
   25308:	24c0000b 	ldhu	r19,0(r4)
   2530c:	21000104 	addi	r4,r4,4
   25310:	d9002d15 	stw	r4,180(sp)
   25314:	003ccb06 	br	24644 <_gp+0xfffe7824>
   25318:	d8c02d17 	ldw	r3,180(sp)
   2531c:	d9002917 	ldw	r4,164(sp)
   25320:	002d883a 	mov	r22,zero
   25324:	18800104 	addi	r2,r3,4
   25328:	1cc00017 	ldw	r19,0(r3)
   2532c:	203ebb0e 	bge	r4,zero,24e1c <_gp+0xfffe7ffc>
   25330:	003ef106 	br	24ef8 <_gp+0xfffe80d8>
   25334:	9080040c 	andi	r2,r18,16
   25338:	1000921e 	bne	r2,zero,25584 <___vfprintf_internal_r+0x1aac>
   2533c:	9480100c 	andi	r18,r18,64
   25340:	90013926 	beq	r18,zero,25828 <___vfprintf_internal_r+0x1d50>
   25344:	d9002d17 	ldw	r4,180(sp)
   25348:	d9402f17 	ldw	r5,188(sp)
   2534c:	20800017 	ldw	r2,0(r4)
   25350:	21000104 	addi	r4,r4,4
   25354:	d9002d15 	stw	r4,180(sp)
   25358:	1140000d 	sth	r5,0(r2)
   2535c:	003a1606 	br	23bb8 <_gp+0xfffe6d98>
   25360:	9080100c 	andi	r2,r18,64
   25364:	10008026 	beq	r2,zero,25568 <___vfprintf_internal_r+0x1a90>
   25368:	d8c02d17 	ldw	r3,180(sp)
   2536c:	1cc0000f 	ldh	r19,0(r3)
   25370:	18c00104 	addi	r3,r3,4
   25374:	d8c02d15 	stw	r3,180(sp)
   25378:	982dd7fa 	srai	r22,r19,31
   2537c:	b005883a 	mov	r2,r22
   25380:	003b1f06 	br	24000 <_gp+0xfffe71e0>
   25384:	9080100c 	andi	r2,r18,64
   25388:	d8002785 	stb	zero,158(sp)
   2538c:	10008a1e 	bne	r2,zero,255b8 <___vfprintf_internal_r+0x1ae0>
   25390:	d9402d17 	ldw	r5,180(sp)
   25394:	d8c02917 	ldw	r3,164(sp)
   25398:	002d883a 	mov	r22,zero
   2539c:	28800104 	addi	r2,r5,4
   253a0:	2cc00017 	ldw	r19,0(r5)
   253a4:	183e4b0e 	bge	r3,zero,24cd4 <_gp+0xfffe7eb4>
   253a8:	9d86b03a 	or	r3,r19,r22
   253ac:	d8802d15 	stw	r2,180(sp)
   253b0:	183e4c1e 	bne	r3,zero,24ce4 <_gp+0xfffe7ec4>
   253b4:	0039883a 	mov	fp,zero
   253b8:	0005883a 	mov	r2,zero
   253bc:	003d4006 	br	248c0 <_gp+0xfffe7aa0>
   253c0:	014000f4 	movhi	r5,3
   253c4:	294bf984 	addi	r5,r5,12262
   253c8:	d9402b15 	stw	r5,172(sp)
   253cc:	d9402b17 	ldw	r5,172(sp)
   253d0:	1c47883a 	add	r3,r3,r17
   253d4:	10800044 	addi	r2,r2,1
   253d8:	41400015 	stw	r5,0(r8)
   253dc:	44400115 	stw	r17,4(r8)
   253e0:	d8c02015 	stw	r3,128(sp)
   253e4:	d8801f15 	stw	r2,124(sp)
   253e8:	010001c4 	movi	r4,7
   253ec:	20bec816 	blt	r4,r2,24f10 <_gp+0xfffe80f0>
   253f0:	42000204 	addi	r8,r8,8
   253f4:	003ecd06 	br	24f2c <_gp+0xfffe810c>
   253f8:	d9002917 	ldw	r4,164(sp)
   253fc:	d8002785 	stb	zero,158(sp)
   25400:	203d2d16 	blt	r4,zero,248b8 <_gp+0xfffe7a98>
   25404:	00bfdfc4 	movi	r2,-129
   25408:	90a4703a 	and	r18,r18,r2
   2540c:	003a9106 	br	23e54 <_gp+0xfffe7034>
   25410:	010000f4 	movhi	r4,3
   25414:	210bf984 	addi	r4,r4,12262
   25418:	d9002b15 	stw	r4,172(sp)
   2541c:	003c0c06 	br	24450 <_gp+0xfffe7630>
   25420:	d9002c17 	ldw	r4,176(sp)
   25424:	d9801e04 	addi	r6,sp,120
   25428:	b80b883a 	mov	r5,r23
   2542c:	002a6700 	call	2a670 <__sprint_r>
   25430:	103aab1e 	bne	r2,zero,23ee0 <_gp+0xfffe70c0>
   25434:	d8c02017 	ldw	r3,128(sp)
   25438:	da000404 	addi	r8,sp,16
   2543c:	003d4106 	br	24944 <_gp+0xfffe7b24>
   25440:	d8801f17 	ldw	r2,124(sp)
   25444:	014000f4 	movhi	r5,3
   25448:	01000044 	movi	r4,1
   2544c:	18c00044 	addi	r3,r3,1
   25450:	10800044 	addi	r2,r2,1
   25454:	294bf904 	addi	r5,r5,12260
   25458:	41000115 	stw	r4,4(r8)
   2545c:	41400015 	stw	r5,0(r8)
   25460:	d8c02015 	stw	r3,128(sp)
   25464:	d8801f15 	stw	r2,124(sp)
   25468:	010001c4 	movi	r4,7
   2546c:	20805c16 	blt	r4,r2,255e0 <___vfprintf_internal_r+0x1b08>
   25470:	42000204 	addi	r8,r8,8
   25474:	8800041e 	bne	r17,zero,25488 <___vfprintf_internal_r+0x19b0>
   25478:	d8803317 	ldw	r2,204(sp)
   2547c:	1000021e 	bne	r2,zero,25488 <___vfprintf_internal_r+0x19b0>
   25480:	9080004c 	andi	r2,r18,1
   25484:	103c0926 	beq	r2,zero,244ac <_gp+0xfffe768c>
   25488:	d9003717 	ldw	r4,220(sp)
   2548c:	d8801f17 	ldw	r2,124(sp)
   25490:	d9403417 	ldw	r5,208(sp)
   25494:	20c7883a 	add	r3,r4,r3
   25498:	10800044 	addi	r2,r2,1
   2549c:	41000115 	stw	r4,4(r8)
   254a0:	41400015 	stw	r5,0(r8)
   254a4:	d8c02015 	stw	r3,128(sp)
   254a8:	d8801f15 	stw	r2,124(sp)
   254ac:	010001c4 	movi	r4,7
   254b0:	20812116 	blt	r4,r2,25938 <___vfprintf_internal_r+0x1e60>
   254b4:	42000204 	addi	r8,r8,8
   254b8:	0463c83a 	sub	r17,zero,r17
   254bc:	0440730e 	bge	zero,r17,2568c <___vfprintf_internal_r+0x1bb4>
   254c0:	05800404 	movi	r22,16
   254c4:	b440860e 	bge	r22,r17,256e0 <___vfprintf_internal_r+0x1c08>
   254c8:	014000f4 	movhi	r5,3
   254cc:	294bf984 	addi	r5,r5,12262
   254d0:	d9402b15 	stw	r5,172(sp)
   254d4:	070001c4 	movi	fp,7
   254d8:	dcc02c17 	ldw	r19,176(sp)
   254dc:	00000306 	br	254ec <___vfprintf_internal_r+0x1a14>
   254e0:	42000204 	addi	r8,r8,8
   254e4:	8c7ffc04 	addi	r17,r17,-16
   254e8:	b440800e 	bge	r22,r17,256ec <___vfprintf_internal_r+0x1c14>
   254ec:	18c00404 	addi	r3,r3,16
   254f0:	10800044 	addi	r2,r2,1
   254f4:	45000015 	stw	r20,0(r8)
   254f8:	45800115 	stw	r22,4(r8)
   254fc:	d8c02015 	stw	r3,128(sp)
   25500:	d8801f15 	stw	r2,124(sp)
   25504:	e0bff60e 	bge	fp,r2,254e0 <_gp+0xfffe86c0>
   25508:	d9801e04 	addi	r6,sp,120
   2550c:	b80b883a 	mov	r5,r23
   25510:	9809883a 	mov	r4,r19
   25514:	002a6700 	call	2a670 <__sprint_r>
   25518:	103a711e 	bne	r2,zero,23ee0 <_gp+0xfffe70c0>
   2551c:	d8c02017 	ldw	r3,128(sp)
   25520:	d8801f17 	ldw	r2,124(sp)
   25524:	da000404 	addi	r8,sp,16
   25528:	003fee06 	br	254e4 <_gp+0xfffe86c4>
   2552c:	00bfffc4 	movi	r2,-1
   25530:	003a6f06 	br	23ef0 <_gp+0xfffe70d0>
   25534:	008011c4 	movi	r2,71
   25538:	1440b816 	blt	r2,r17,2581c <___vfprintf_internal_r+0x1d44>
   2553c:	040000f4 	movhi	r16,3
   25540:	840beb04 	addi	r16,r16,12204
   25544:	00c000c4 	movi	r3,3
   25548:	00bfdfc4 	movi	r2,-129
   2554c:	d8c02a15 	stw	r3,168(sp)
   25550:	90a4703a 	and	r18,r18,r2
   25554:	df002783 	ldbu	fp,158(sp)
   25558:	d8c02e15 	stw	r3,184(sp)
   2555c:	d8002915 	stw	zero,164(sp)
   25560:	d8003215 	stw	zero,200(sp)
   25564:	003b2906 	br	2420c <_gp+0xfffe73ec>
   25568:	d9002d17 	ldw	r4,180(sp)
   2556c:	24c00017 	ldw	r19,0(r4)
   25570:	21000104 	addi	r4,r4,4
   25574:	d9002d15 	stw	r4,180(sp)
   25578:	982dd7fa 	srai	r22,r19,31
   2557c:	b005883a 	mov	r2,r22
   25580:	003a9f06 	br	24000 <_gp+0xfffe71e0>
   25584:	d9402d17 	ldw	r5,180(sp)
   25588:	d8c02f17 	ldw	r3,188(sp)
   2558c:	28800017 	ldw	r2,0(r5)
   25590:	29400104 	addi	r5,r5,4
   25594:	d9402d15 	stw	r5,180(sp)
   25598:	10c00015 	stw	r3,0(r2)
   2559c:	00398606 	br	23bb8 <_gp+0xfffe6d98>
   255a0:	d9402d17 	ldw	r5,180(sp)
   255a4:	002d883a 	mov	r22,zero
   255a8:	2cc00017 	ldw	r19,0(r5)
   255ac:	29400104 	addi	r5,r5,4
   255b0:	d9402d15 	stw	r5,180(sp)
   255b4:	003c2306 	br	24644 <_gp+0xfffe7824>
   255b8:	d8c02d17 	ldw	r3,180(sp)
   255bc:	d9002917 	ldw	r4,164(sp)
   255c0:	002d883a 	mov	r22,zero
   255c4:	18800104 	addi	r2,r3,4
   255c8:	1cc0000b 	ldhu	r19,0(r3)
   255cc:	203dc10e 	bge	r4,zero,24cd4 <_gp+0xfffe7eb4>
   255d0:	003f7506 	br	253a8 <_gp+0xfffe8588>
   255d4:	040000f4 	movhi	r16,3
   255d8:	840be904 	addi	r16,r16,12196
   255dc:	003acc06 	br	24110 <_gp+0xfffe72f0>
   255e0:	d9002c17 	ldw	r4,176(sp)
   255e4:	d9801e04 	addi	r6,sp,120
   255e8:	b80b883a 	mov	r5,r23
   255ec:	002a6700 	call	2a670 <__sprint_r>
   255f0:	103a3b1e 	bne	r2,zero,23ee0 <_gp+0xfffe70c0>
   255f4:	dc402617 	ldw	r17,152(sp)
   255f8:	d8c02017 	ldw	r3,128(sp)
   255fc:	da000404 	addi	r8,sp,16
   25600:	003f9c06 	br	25474 <_gp+0xfffe8654>
   25604:	ac400043 	ldbu	r17,1(r21)
   25608:	94800814 	ori	r18,r18,32
   2560c:	ad400044 	addi	r21,r21,1
   25610:	8c403fcc 	andi	r17,r17,255
   25614:	8c40201c 	xori	r17,r17,128
   25618:	8c7fe004 	addi	r17,r17,-128
   2561c:	00398f06 	br	23c5c <_gp+0xfffe6e3c>
   25620:	d8c02d15 	stw	r3,180(sp)
   25624:	0039883a 	mov	fp,zero
   25628:	003e3506 	br	24f00 <_gp+0xfffe80e0>
   2562c:	d9002c17 	ldw	r4,176(sp)
   25630:	d9801e04 	addi	r6,sp,120
   25634:	b80b883a 	mov	r5,r23
   25638:	002a6700 	call	2a670 <__sprint_r>
   2563c:	103a281e 	bne	r2,zero,23ee0 <_gp+0xfffe70c0>
   25640:	d8c02017 	ldw	r3,128(sp)
   25644:	da000404 	addi	r8,sp,16
   25648:	003cd006 	br	2498c <_gp+0xfffe7b6c>
   2564c:	8009883a 	mov	r4,r16
   25650:	da003d15 	stw	r8,244(sp)
   25654:	0023a400 	call	23a40 <strlen>
   25658:	d8802e15 	stw	r2,184(sp)
   2565c:	da003d17 	ldw	r8,244(sp)
   25660:	103c340e 	bge	r2,zero,24734 <_gp+0xfffe7914>
   25664:	0005883a 	mov	r2,zero
   25668:	003c3206 	br	24734 <_gp+0xfffe7914>
   2566c:	d9002c17 	ldw	r4,176(sp)
   25670:	d9801e04 	addi	r6,sp,120
   25674:	b80b883a 	mov	r5,r23
   25678:	002a6700 	call	2a670 <__sprint_r>
   2567c:	103a181e 	bne	r2,zero,23ee0 <_gp+0xfffe70c0>
   25680:	d8c02017 	ldw	r3,128(sp)
   25684:	d8801f17 	ldw	r2,124(sp)
   25688:	da000404 	addi	r8,sp,16
   2568c:	d9403317 	ldw	r5,204(sp)
   25690:	10800044 	addi	r2,r2,1
   25694:	44000015 	stw	r16,0(r8)
   25698:	28c7883a 	add	r3,r5,r3
   2569c:	003b7d06 	br	24494 <_gp+0xfffe7674>
   256a0:	010000f4 	movhi	r4,3
   256a4:	210bfd84 	addi	r4,r4,12278
   256a8:	d9003515 	stw	r4,212(sp)
   256ac:	003b1406 	br	24300 <_gp+0xfffe74e0>
   256b0:	013fffc4 	movi	r4,-1
   256b4:	003a3506 	br	23f8c <_gp+0xfffe716c>
   256b8:	0023883a 	mov	r17,zero
   256bc:	003d9d06 	br	24d34 <_gp+0xfffe7f14>
   256c0:	d9002c17 	ldw	r4,176(sp)
   256c4:	d9801e04 	addi	r6,sp,120
   256c8:	b80b883a 	mov	r5,r23
   256cc:	002a6700 	call	2a670 <__sprint_r>
   256d0:	103a031e 	bne	r2,zero,23ee0 <_gp+0xfffe70c0>
   256d4:	d8c02017 	ldw	r3,128(sp)
   256d8:	da000404 	addi	r8,sp,16
   256dc:	003d9406 	br	24d30 <_gp+0xfffe7f10>
   256e0:	010000f4 	movhi	r4,3
   256e4:	210bf984 	addi	r4,r4,12262
   256e8:	d9002b15 	stw	r4,172(sp)
   256ec:	d9002b17 	ldw	r4,172(sp)
   256f0:	1c47883a 	add	r3,r3,r17
   256f4:	10800044 	addi	r2,r2,1
   256f8:	41000015 	stw	r4,0(r8)
   256fc:	44400115 	stw	r17,4(r8)
   25700:	d8c02015 	stw	r3,128(sp)
   25704:	d8801f15 	stw	r2,124(sp)
   25708:	010001c4 	movi	r4,7
   2570c:	20bfd716 	blt	r4,r2,2566c <_gp+0xfffe884c>
   25710:	42000204 	addi	r8,r8,8
   25714:	003fdd06 	br	2568c <_gp+0xfffe886c>
   25718:	d9002c17 	ldw	r4,176(sp)
   2571c:	d9801e04 	addi	r6,sp,120
   25720:	b80b883a 	mov	r5,r23
   25724:	002a6700 	call	2a670 <__sprint_r>
   25728:	1039ed1e 	bne	r2,zero,23ee0 <_gp+0xfffe70c0>
   2572c:	d8802617 	ldw	r2,152(sp)
   25730:	d8c02017 	ldw	r3,128(sp)
   25734:	da000404 	addi	r8,sp,16
   25738:	003e1006 	br	24f7c <_gp+0xfffe815c>
   2573c:	00800044 	movi	r2,1
   25740:	10803fcc 	andi	r2,r2,255
   25744:	00c00044 	movi	r3,1
   25748:	10fa3526 	beq	r2,r3,24020 <_gp+0xfffe7200>
   2574c:	00c00084 	movi	r3,2
   25750:	10fbcb26 	beq	r2,r3,24680 <_gp+0xfffe7860>
   25754:	003a8f06 	br	24194 <_gp+0xfffe7374>
   25758:	010000f4 	movhi	r4,3
   2575c:	210bfd84 	addi	r4,r4,12278
   25760:	d9003515 	stw	r4,212(sp)
   25764:	003b7606 	br	24540 <_gp+0xfffe7720>
   25768:	d8802917 	ldw	r2,164(sp)
   2576c:	00c00184 	movi	r3,6
   25770:	1880012e 	bgeu	r3,r2,25778 <___vfprintf_internal_r+0x1ca0>
   25774:	1805883a 	mov	r2,r3
   25778:	d8802e15 	stw	r2,184(sp)
   2577c:	1000ef16 	blt	r2,zero,25b3c <___vfprintf_internal_r+0x2064>
   25780:	040000f4 	movhi	r16,3
   25784:	d8802a15 	stw	r2,168(sp)
   25788:	dcc02d15 	stw	r19,180(sp)
   2578c:	d8002915 	stw	zero,164(sp)
   25790:	d8003215 	stw	zero,200(sp)
   25794:	840bf704 	addi	r16,r16,12252
   25798:	0039883a 	mov	fp,zero
   2579c:	003aa206 	br	24228 <_gp+0xfffe7408>
   257a0:	0021883a 	mov	r16,zero
   257a4:	003e0706 	br	24fc4 <_gp+0xfffe81a4>
   257a8:	d9002c17 	ldw	r4,176(sp)
   257ac:	d9801e04 	addi	r6,sp,120
   257b0:	b80b883a 	mov	r5,r23
   257b4:	002a6700 	call	2a670 <__sprint_r>
   257b8:	1039c91e 	bne	r2,zero,23ee0 <_gp+0xfffe70c0>
   257bc:	d8802617 	ldw	r2,152(sp)
   257c0:	d9403317 	ldw	r5,204(sp)
   257c4:	d8c02017 	ldw	r3,128(sp)
   257c8:	da000404 	addi	r8,sp,16
   257cc:	2885c83a 	sub	r2,r5,r2
   257d0:	003dfb06 	br	24fc0 <_gp+0xfffe81a0>
   257d4:	9080004c 	andi	r2,r18,1
   257d8:	103e8f1e 	bne	r2,zero,25218 <_gp+0xfffe83f8>
   257dc:	d8802117 	ldw	r2,132(sp)
   257e0:	003e9e06 	br	2525c <_gp+0xfffe843c>
   257e4:	1025883a 	mov	r18,r2
   257e8:	0039883a 	mov	fp,zero
   257ec:	00800084 	movi	r2,2
   257f0:	003fd306 	br	25740 <_gp+0xfffe8920>
   257f4:	07000b44 	movi	fp,45
   257f8:	df002785 	stb	fp,158(sp)
   257fc:	003a4006 	br	24100 <_gp+0xfffe72e0>
   25800:	00c00b44 	movi	r3,45
   25804:	d8c02785 	stb	r3,158(sp)
   25808:	d8802a15 	stw	r2,168(sp)
   2580c:	dc802b17 	ldw	r18,172(sp)
   25810:	d8002915 	stw	zero,164(sp)
   25814:	07000b44 	movi	fp,45
   25818:	003a8006 	br	2421c <_gp+0xfffe73fc>
   2581c:	040000f4 	movhi	r16,3
   25820:	840bec04 	addi	r16,r16,12208
   25824:	003f4706 	br	25544 <_gp+0xfffe8724>
   25828:	d8c02d17 	ldw	r3,180(sp)
   2582c:	d9002f17 	ldw	r4,188(sp)
   25830:	18800017 	ldw	r2,0(r3)
   25834:	18c00104 	addi	r3,r3,4
   25838:	d8c02d15 	stw	r3,180(sp)
   2583c:	11000015 	stw	r4,0(r2)
   25840:	0038dd06 	br	23bb8 <_gp+0xfffe6d98>
   25844:	dd802617 	ldw	r22,152(sp)
   25848:	00bfff44 	movi	r2,-3
   2584c:	b0801c16 	blt	r22,r2,258c0 <___vfprintf_internal_r+0x1de8>
   25850:	d9402917 	ldw	r5,164(sp)
   25854:	2d801a16 	blt	r5,r22,258c0 <___vfprintf_internal_r+0x1de8>
   25858:	dd803215 	stw	r22,200(sp)
   2585c:	003e8906 	br	25284 <_gp+0xfffe8464>
   25860:	010000f4 	movhi	r4,3
   25864:	210bf984 	addi	r4,r4,12262
   25868:	d9002b15 	stw	r4,172(sp)
   2586c:	003c9106 	br	24ab4 <_gp+0xfffe7c94>
   25870:	e005883a 	mov	r2,fp
   25874:	003e7906 	br	2525c <_gp+0xfffe843c>
   25878:	d9402917 	ldw	r5,164(sp)
   2587c:	df002783 	ldbu	fp,158(sp)
   25880:	dcc02d15 	stw	r19,180(sp)
   25884:	d9402a15 	stw	r5,168(sp)
   25888:	d9402e15 	stw	r5,184(sp)
   2588c:	d8002915 	stw	zero,164(sp)
   25890:	d8003215 	stw	zero,200(sp)
   25894:	003a5d06 	br	2420c <_gp+0xfffe73ec>
   25898:	9080004c 	andi	r2,r18,1
   2589c:	0039883a 	mov	fp,zero
   258a0:	10000426 	beq	r2,zero,258b4 <___vfprintf_internal_r+0x1ddc>
   258a4:	00800c04 	movi	r2,48
   258a8:	dc001dc4 	addi	r16,sp,119
   258ac:	d8801dc5 	stb	r2,119(sp)
   258b0:	003b8006 	br	246b4 <_gp+0xfffe7894>
   258b4:	d8002e15 	stw	zero,184(sp)
   258b8:	dc001e04 	addi	r16,sp,120
   258bc:	003a4d06 	br	241f4 <_gp+0xfffe73d4>
   258c0:	8c7fff84 	addi	r17,r17,-2
   258c4:	b5bfffc4 	addi	r22,r22,-1
   258c8:	dd802615 	stw	r22,152(sp)
   258cc:	dc4022c5 	stb	r17,139(sp)
   258d0:	b000bf16 	blt	r22,zero,25bd0 <___vfprintf_internal_r+0x20f8>
   258d4:	00800ac4 	movi	r2,43
   258d8:	d8802305 	stb	r2,140(sp)
   258dc:	00800244 	movi	r2,9
   258e0:	15807016 	blt	r2,r22,25aa4 <___vfprintf_internal_r+0x1fcc>
   258e4:	00800c04 	movi	r2,48
   258e8:	b5800c04 	addi	r22,r22,48
   258ec:	d8802345 	stb	r2,141(sp)
   258f0:	dd802385 	stb	r22,142(sp)
   258f4:	d88023c4 	addi	r2,sp,143
   258f8:	df0022c4 	addi	fp,sp,139
   258fc:	d8c03317 	ldw	r3,204(sp)
   25900:	1739c83a 	sub	fp,r2,fp
   25904:	d9003317 	ldw	r4,204(sp)
   25908:	e0c7883a 	add	r3,fp,r3
   2590c:	df003a15 	stw	fp,232(sp)
   25910:	d8c02e15 	stw	r3,184(sp)
   25914:	00800044 	movi	r2,1
   25918:	1100b30e 	bge	r2,r4,25be8 <___vfprintf_internal_r+0x2110>
   2591c:	d8c02e17 	ldw	r3,184(sp)
   25920:	18c00044 	addi	r3,r3,1
   25924:	d8c02e15 	stw	r3,184(sp)
   25928:	1805883a 	mov	r2,r3
   2592c:	1800ac16 	blt	r3,zero,25be0 <___vfprintf_internal_r+0x2108>
   25930:	d8003215 	stw	zero,200(sp)
   25934:	003e5d06 	br	252ac <_gp+0xfffe848c>
   25938:	d9002c17 	ldw	r4,176(sp)
   2593c:	d9801e04 	addi	r6,sp,120
   25940:	b80b883a 	mov	r5,r23
   25944:	002a6700 	call	2a670 <__sprint_r>
   25948:	1039651e 	bne	r2,zero,23ee0 <_gp+0xfffe70c0>
   2594c:	dc402617 	ldw	r17,152(sp)
   25950:	d8c02017 	ldw	r3,128(sp)
   25954:	d8801f17 	ldw	r2,124(sp)
   25958:	da000404 	addi	r8,sp,16
   2595c:	003ed606 	br	254b8 <_gp+0xfffe8698>
   25960:	582b883a 	mov	r21,r11
   25964:	d8002915 	stw	zero,164(sp)
   25968:	0038bd06 	br	23c60 <_gp+0xfffe6e40>
   2596c:	d8802917 	ldw	r2,164(sp)
   25970:	103e071e 	bne	r2,zero,25190 <_gp+0xfffe8370>
   25974:	dc002915 	stw	r16,164(sp)
   25978:	003e0506 	br	25190 <_gp+0xfffe8370>
   2597c:	d9002917 	ldw	r4,164(sp)
   25980:	20c00044 	addi	r3,r4,1
   25984:	003e0f06 	br	251c4 <_gp+0xfffe83a4>
   25988:	01400184 	movi	r5,6
   2598c:	d9402915 	stw	r5,164(sp)
   25990:	003dff06 	br	25190 <_gp+0xfffe8370>
   25994:	d8802104 	addi	r2,sp,132
   25998:	d8800315 	stw	r2,12(sp)
   2599c:	d8802504 	addi	r2,sp,148
   259a0:	d8800215 	stw	r2,8(sp)
   259a4:	d8802604 	addi	r2,sp,152
   259a8:	d8800115 	stw	r2,4(sp)
   259ac:	d8802917 	ldw	r2,164(sp)
   259b0:	d9403617 	ldw	r5,216(sp)
   259b4:	d9002c17 	ldw	r4,176(sp)
   259b8:	d8800015 	stw	r2,0(sp)
   259bc:	01c000c4 	movi	r7,3
   259c0:	980d883a 	mov	r6,r19
   259c4:	da003d15 	stw	r8,244(sp)
   259c8:	00260fc0 	call	260fc <_dtoa_r>
   259cc:	d8c02917 	ldw	r3,164(sp)
   259d0:	da003d17 	ldw	r8,244(sp)
   259d4:	1021883a 	mov	r16,r2
   259d8:	10f9883a 	add	fp,r2,r3
   259dc:	81000007 	ldb	r4,0(r16)
   259e0:	00800c04 	movi	r2,48
   259e4:	20805e26 	beq	r4,r2,25b60 <___vfprintf_internal_r+0x2088>
   259e8:	d8c02617 	ldw	r3,152(sp)
   259ec:	e0f9883a 	add	fp,fp,r3
   259f0:	003e0a06 	br	2521c <_gp+0xfffe83fc>
   259f4:	00c00b44 	movi	r3,45
   259f8:	24e0003c 	xorhi	r19,r4,32768
   259fc:	d8c02a05 	stb	r3,168(sp)
   25a00:	003de906 	br	251a8 <_gp+0xfffe8388>
   25a04:	d8c03217 	ldw	r3,200(sp)
   25a08:	00c07a0e 	bge	zero,r3,25bf4 <___vfprintf_internal_r+0x211c>
   25a0c:	00800044 	movi	r2,1
   25a10:	d9003317 	ldw	r4,204(sp)
   25a14:	1105883a 	add	r2,r2,r4
   25a18:	d8802e15 	stw	r2,184(sp)
   25a1c:	10004e16 	blt	r2,zero,25b58 <___vfprintf_internal_r+0x2080>
   25a20:	044019c4 	movi	r17,103
   25a24:	003e2106 	br	252ac <_gp+0xfffe848c>
   25a28:	d9002917 	ldw	r4,164(sp)
   25a2c:	d8802104 	addi	r2,sp,132
   25a30:	d8800315 	stw	r2,12(sp)
   25a34:	d9000015 	stw	r4,0(sp)
   25a38:	d8802504 	addi	r2,sp,148
   25a3c:	d9403617 	ldw	r5,216(sp)
   25a40:	d9002c17 	ldw	r4,176(sp)
   25a44:	d8800215 	stw	r2,8(sp)
   25a48:	d8802604 	addi	r2,sp,152
   25a4c:	d8800115 	stw	r2,4(sp)
   25a50:	01c000c4 	movi	r7,3
   25a54:	980d883a 	mov	r6,r19
   25a58:	da003d15 	stw	r8,244(sp)
   25a5c:	00260fc0 	call	260fc <_dtoa_r>
   25a60:	d8c02917 	ldw	r3,164(sp)
   25a64:	da003d17 	ldw	r8,244(sp)
   25a68:	1021883a 	mov	r16,r2
   25a6c:	00801184 	movi	r2,70
   25a70:	80f9883a 	add	fp,r16,r3
   25a74:	88bfd926 	beq	r17,r2,259dc <_gp+0xfffe8bbc>
   25a78:	003de806 	br	2521c <_gp+0xfffe83fc>
   25a7c:	d9002917 	ldw	r4,164(sp)
   25a80:	00c04d0e 	bge	zero,r3,25bb8 <___vfprintf_internal_r+0x20e0>
   25a84:	2000441e 	bne	r4,zero,25b98 <___vfprintf_internal_r+0x20c0>
   25a88:	9480004c 	andi	r18,r18,1
   25a8c:	9000421e 	bne	r18,zero,25b98 <___vfprintf_internal_r+0x20c0>
   25a90:	1805883a 	mov	r2,r3
   25a94:	18007016 	blt	r3,zero,25c58 <___vfprintf_internal_r+0x2180>
   25a98:	d8c03217 	ldw	r3,200(sp)
   25a9c:	d8c02e15 	stw	r3,184(sp)
   25aa0:	003e0206 	br	252ac <_gp+0xfffe848c>
   25aa4:	df0022c4 	addi	fp,sp,139
   25aa8:	dc002915 	stw	r16,164(sp)
   25aac:	4027883a 	mov	r19,r8
   25ab0:	e021883a 	mov	r16,fp
   25ab4:	b009883a 	mov	r4,r22
   25ab8:	01400284 	movi	r5,10
   25abc:	002d0240 	call	2d024 <__modsi3>
   25ac0:	10800c04 	addi	r2,r2,48
   25ac4:	843fffc4 	addi	r16,r16,-1
   25ac8:	b009883a 	mov	r4,r22
   25acc:	01400284 	movi	r5,10
   25ad0:	80800005 	stb	r2,0(r16)
   25ad4:	002cfa00 	call	2cfa0 <__divsi3>
   25ad8:	102d883a 	mov	r22,r2
   25adc:	00800244 	movi	r2,9
   25ae0:	15bff416 	blt	r2,r22,25ab4 <_gp+0xfffe8c94>
   25ae4:	9811883a 	mov	r8,r19
   25ae8:	b0800c04 	addi	r2,r22,48
   25aec:	8027883a 	mov	r19,r16
   25af0:	997fffc4 	addi	r5,r19,-1
   25af4:	98bfffc5 	stb	r2,-1(r19)
   25af8:	dc002917 	ldw	r16,164(sp)
   25afc:	2f006a2e 	bgeu	r5,fp,25ca8 <___vfprintf_internal_r+0x21d0>
   25b00:	d9c02384 	addi	r7,sp,142
   25b04:	3ccfc83a 	sub	r7,r7,r19
   25b08:	d9002344 	addi	r4,sp,141
   25b0c:	e1cf883a 	add	r7,fp,r7
   25b10:	00000106 	br	25b18 <___vfprintf_internal_r+0x2040>
   25b14:	28800003 	ldbu	r2,0(r5)
   25b18:	20800005 	stb	r2,0(r4)
   25b1c:	21000044 	addi	r4,r4,1
   25b20:	29400044 	addi	r5,r5,1
   25b24:	393ffb1e 	bne	r7,r4,25b14 <_gp+0xfffe8cf4>
   25b28:	d8802304 	addi	r2,sp,140
   25b2c:	14c5c83a 	sub	r2,r2,r19
   25b30:	d8c02344 	addi	r3,sp,141
   25b34:	1885883a 	add	r2,r3,r2
   25b38:	003f7006 	br	258fc <_gp+0xfffe8adc>
   25b3c:	0005883a 	mov	r2,zero
   25b40:	003f0f06 	br	25780 <_gp+0xfffe8960>
   25b44:	d8c03217 	ldw	r3,200(sp)
   25b48:	18c00044 	addi	r3,r3,1
   25b4c:	d8c02e15 	stw	r3,184(sp)
   25b50:	1805883a 	mov	r2,r3
   25b54:	183fb20e 	bge	r3,zero,25a20 <_gp+0xfffe8c00>
   25b58:	0005883a 	mov	r2,zero
   25b5c:	003fb006 	br	25a20 <_gp+0xfffe8c00>
   25b60:	d9003617 	ldw	r4,216(sp)
   25b64:	000d883a 	mov	r6,zero
   25b68:	000f883a 	mov	r7,zero
   25b6c:	980b883a 	mov	r5,r19
   25b70:	d8c03c15 	stw	r3,240(sp)
   25b74:	da003d15 	stw	r8,244(sp)
   25b78:	002e2e80 	call	2e2e8 <__eqdf2>
   25b7c:	d8c03c17 	ldw	r3,240(sp)
   25b80:	da003d17 	ldw	r8,244(sp)
   25b84:	103f9826 	beq	r2,zero,259e8 <_gp+0xfffe8bc8>
   25b88:	00800044 	movi	r2,1
   25b8c:	10c7c83a 	sub	r3,r2,r3
   25b90:	d8c02615 	stw	r3,152(sp)
   25b94:	003f9506 	br	259ec <_gp+0xfffe8bcc>
   25b98:	d9002917 	ldw	r4,164(sp)
   25b9c:	d8c03217 	ldw	r3,200(sp)
   25ba0:	20800044 	addi	r2,r4,1
   25ba4:	1885883a 	add	r2,r3,r2
   25ba8:	d8802e15 	stw	r2,184(sp)
   25bac:	103dbf0e 	bge	r2,zero,252ac <_gp+0xfffe848c>
   25bb0:	0005883a 	mov	r2,zero
   25bb4:	003dbd06 	br	252ac <_gp+0xfffe848c>
   25bb8:	2000211e 	bne	r4,zero,25c40 <___vfprintf_internal_r+0x2168>
   25bbc:	9480004c 	andi	r18,r18,1
   25bc0:	90001f1e 	bne	r18,zero,25c40 <___vfprintf_internal_r+0x2168>
   25bc4:	00800044 	movi	r2,1
   25bc8:	d8802e15 	stw	r2,184(sp)
   25bcc:	003db706 	br	252ac <_gp+0xfffe848c>
   25bd0:	00800b44 	movi	r2,45
   25bd4:	05adc83a 	sub	r22,zero,r22
   25bd8:	d8802305 	stb	r2,140(sp)
   25bdc:	003f3f06 	br	258dc <_gp+0xfffe8abc>
   25be0:	0005883a 	mov	r2,zero
   25be4:	003f5206 	br	25930 <_gp+0xfffe8b10>
   25be8:	90a4703a 	and	r18,r18,r2
   25bec:	903f4e26 	beq	r18,zero,25928 <_gp+0xfffe8b08>
   25bf0:	003f4a06 	br	2591c <_gp+0xfffe8afc>
   25bf4:	00800084 	movi	r2,2
   25bf8:	10c5c83a 	sub	r2,r2,r3
   25bfc:	003f8406 	br	25a10 <_gp+0xfffe8bf0>
   25c00:	d8802d17 	ldw	r2,180(sp)
   25c04:	d9002d17 	ldw	r4,180(sp)
   25c08:	ac400043 	ldbu	r17,1(r21)
   25c0c:	10800017 	ldw	r2,0(r2)
   25c10:	582b883a 	mov	r21,r11
   25c14:	d8802915 	stw	r2,164(sp)
   25c18:	20800104 	addi	r2,r4,4
   25c1c:	d9002917 	ldw	r4,164(sp)
   25c20:	d8802d15 	stw	r2,180(sp)
   25c24:	203e7a0e 	bge	r4,zero,25610 <_gp+0xfffe87f0>
   25c28:	8c403fcc 	andi	r17,r17,255
   25c2c:	00bfffc4 	movi	r2,-1
   25c30:	8c40201c 	xori	r17,r17,128
   25c34:	d8802915 	stw	r2,164(sp)
   25c38:	8c7fe004 	addi	r17,r17,-128
   25c3c:	00380706 	br	23c5c <_gp+0xfffe6e3c>
   25c40:	d8c02917 	ldw	r3,164(sp)
   25c44:	18c00084 	addi	r3,r3,2
   25c48:	d8c02e15 	stw	r3,184(sp)
   25c4c:	1805883a 	mov	r2,r3
   25c50:	183d960e 	bge	r3,zero,252ac <_gp+0xfffe848c>
   25c54:	003fd606 	br	25bb0 <_gp+0xfffe8d90>
   25c58:	0005883a 	mov	r2,zero
   25c5c:	003f8e06 	br	25a98 <_gp+0xfffe8c78>
   25c60:	9080004c 	andi	r2,r18,1
   25c64:	103f811e 	bne	r2,zero,25a6c <_gp+0xfffe8c4c>
   25c68:	d8802117 	ldw	r2,132(sp)
   25c6c:	1405c83a 	sub	r2,r2,r16
   25c70:	d8803315 	stw	r2,204(sp)
   25c74:	b47ef326 	beq	r22,r17,25844 <_gp+0xfffe8a24>
   25c78:	dd802617 	ldw	r22,152(sp)
   25c7c:	003f1106 	br	258c4 <_gp+0xfffe8aa4>
   25c80:	d9c02785 	stb	r7,158(sp)
   25c84:	00390406 	br	24098 <_gp+0xfffe7278>
   25c88:	d9c02785 	stb	r7,158(sp)
   25c8c:	0038d306 	br	23fdc <_gp+0xfffe71bc>
   25c90:	d9c02785 	stb	r7,158(sp)
   25c94:	003a6106 	br	2461c <_gp+0xfffe77fc>
   25c98:	d9c02785 	stb	r7,158(sp)
   25c9c:	003af806 	br	24880 <_gp+0xfffe7a60>
   25ca0:	0005883a 	mov	r2,zero
   25ca4:	003d7e06 	br	252a0 <_gp+0xfffe8480>
   25ca8:	d8802344 	addi	r2,sp,141
   25cac:	003f1306 	br	258fc <_gp+0xfffe8adc>
   25cb0:	d9c02785 	stb	r7,158(sp)
   25cb4:	00392306 	br	24144 <_gp+0xfffe7324>
   25cb8:	d9c02785 	stb	r7,158(sp)
   25cbc:	003aa906 	br	24764 <_gp+0xfffe7944>
   25cc0:	d9c02785 	stb	r7,158(sp)
   25cc4:	003a3d06 	br	245bc <_gp+0xfffe779c>
   25cc8:	d9c02785 	stb	r7,158(sp)
   25ccc:	003aca06 	br	247f8 <_gp+0xfffe79d8>

00025cd0 <__vfprintf_internal>:
   25cd0:	008000f4 	movhi	r2,3
   25cd4:	10939904 	addi	r2,r2,20068
   25cd8:	300f883a 	mov	r7,r6
   25cdc:	280d883a 	mov	r6,r5
   25ce0:	200b883a 	mov	r5,r4
   25ce4:	11000017 	ldw	r4,0(r2)
   25ce8:	0023ad81 	jmpi	23ad8 <___vfprintf_internal_r>

00025cec <__sbprintf>:
   25cec:	2880030b 	ldhu	r2,12(r5)
   25cf0:	2ac01917 	ldw	r11,100(r5)
   25cf4:	2a80038b 	ldhu	r10,14(r5)
   25cf8:	2a400717 	ldw	r9,28(r5)
   25cfc:	2a000917 	ldw	r8,36(r5)
   25d00:	defee204 	addi	sp,sp,-1144
   25d04:	00c10004 	movi	r3,1024
   25d08:	dc011a15 	stw	r16,1128(sp)
   25d0c:	10bfff4c 	andi	r2,r2,65533
   25d10:	2821883a 	mov	r16,r5
   25d14:	d8cb883a 	add	r5,sp,r3
   25d18:	dc811c15 	stw	r18,1136(sp)
   25d1c:	dc411b15 	stw	r17,1132(sp)
   25d20:	dfc11d15 	stw	ra,1140(sp)
   25d24:	2025883a 	mov	r18,r4
   25d28:	d881030d 	sth	r2,1036(sp)
   25d2c:	dac11915 	stw	r11,1124(sp)
   25d30:	da81038d 	sth	r10,1038(sp)
   25d34:	da410715 	stw	r9,1052(sp)
   25d38:	da010915 	stw	r8,1060(sp)
   25d3c:	dec10015 	stw	sp,1024(sp)
   25d40:	dec10415 	stw	sp,1040(sp)
   25d44:	d8c10215 	stw	r3,1032(sp)
   25d48:	d8c10515 	stw	r3,1044(sp)
   25d4c:	d8010615 	stw	zero,1048(sp)
   25d50:	0023ad80 	call	23ad8 <___vfprintf_internal_r>
   25d54:	1023883a 	mov	r17,r2
   25d58:	10000416 	blt	r2,zero,25d6c <__sbprintf+0x80>
   25d5c:	d9410004 	addi	r5,sp,1024
   25d60:	9009883a 	mov	r4,r18
   25d64:	00279a00 	call	279a0 <_fflush_r>
   25d68:	10000d1e 	bne	r2,zero,25da0 <__sbprintf+0xb4>
   25d6c:	d881030b 	ldhu	r2,1036(sp)
   25d70:	1080100c 	andi	r2,r2,64
   25d74:	10000326 	beq	r2,zero,25d84 <__sbprintf+0x98>
   25d78:	8080030b 	ldhu	r2,12(r16)
   25d7c:	10801014 	ori	r2,r2,64
   25d80:	8080030d 	sth	r2,12(r16)
   25d84:	8805883a 	mov	r2,r17
   25d88:	dfc11d17 	ldw	ra,1140(sp)
   25d8c:	dc811c17 	ldw	r18,1136(sp)
   25d90:	dc411b17 	ldw	r17,1132(sp)
   25d94:	dc011a17 	ldw	r16,1128(sp)
   25d98:	dec11e04 	addi	sp,sp,1144
   25d9c:	f800283a 	ret
   25da0:	047fffc4 	movi	r17,-1
   25da4:	003ff106 	br	25d6c <_gp+0xfffe8f4c>

00025da8 <__swsetup_r>:
   25da8:	008000f4 	movhi	r2,3
   25dac:	defffd04 	addi	sp,sp,-12
   25db0:	10939904 	addi	r2,r2,20068
   25db4:	dc400115 	stw	r17,4(sp)
   25db8:	2023883a 	mov	r17,r4
   25dbc:	11000017 	ldw	r4,0(r2)
   25dc0:	dc000015 	stw	r16,0(sp)
   25dc4:	dfc00215 	stw	ra,8(sp)
   25dc8:	2821883a 	mov	r16,r5
   25dcc:	20000226 	beq	r4,zero,25dd8 <__swsetup_r+0x30>
   25dd0:	20800e17 	ldw	r2,56(r4)
   25dd4:	10003126 	beq	r2,zero,25e9c <__swsetup_r+0xf4>
   25dd8:	8080030b 	ldhu	r2,12(r16)
   25ddc:	10c0020c 	andi	r3,r2,8
   25de0:	1009883a 	mov	r4,r2
   25de4:	18000f26 	beq	r3,zero,25e24 <__swsetup_r+0x7c>
   25de8:	80c00417 	ldw	r3,16(r16)
   25dec:	18001526 	beq	r3,zero,25e44 <__swsetup_r+0x9c>
   25df0:	1100004c 	andi	r4,r2,1
   25df4:	20001c1e 	bne	r4,zero,25e68 <__swsetup_r+0xc0>
   25df8:	1080008c 	andi	r2,r2,2
   25dfc:	1000291e 	bne	r2,zero,25ea4 <__swsetup_r+0xfc>
   25e00:	80800517 	ldw	r2,20(r16)
   25e04:	80800215 	stw	r2,8(r16)
   25e08:	18001c26 	beq	r3,zero,25e7c <__swsetup_r+0xd4>
   25e0c:	0005883a 	mov	r2,zero
   25e10:	dfc00217 	ldw	ra,8(sp)
   25e14:	dc400117 	ldw	r17,4(sp)
   25e18:	dc000017 	ldw	r16,0(sp)
   25e1c:	dec00304 	addi	sp,sp,12
   25e20:	f800283a 	ret
   25e24:	2080040c 	andi	r2,r4,16
   25e28:	10002e26 	beq	r2,zero,25ee4 <__swsetup_r+0x13c>
   25e2c:	2080010c 	andi	r2,r4,4
   25e30:	10001e1e 	bne	r2,zero,25eac <__swsetup_r+0x104>
   25e34:	80c00417 	ldw	r3,16(r16)
   25e38:	20800214 	ori	r2,r4,8
   25e3c:	8080030d 	sth	r2,12(r16)
   25e40:	183feb1e 	bne	r3,zero,25df0 <_gp+0xfffe8fd0>
   25e44:	1100a00c 	andi	r4,r2,640
   25e48:	01408004 	movi	r5,512
   25e4c:	217fe826 	beq	r4,r5,25df0 <_gp+0xfffe8fd0>
   25e50:	800b883a 	mov	r5,r16
   25e54:	8809883a 	mov	r4,r17
   25e58:	00289200 	call	28920 <__smakebuf_r>
   25e5c:	8080030b 	ldhu	r2,12(r16)
   25e60:	80c00417 	ldw	r3,16(r16)
   25e64:	003fe206 	br	25df0 <_gp+0xfffe8fd0>
   25e68:	80800517 	ldw	r2,20(r16)
   25e6c:	80000215 	stw	zero,8(r16)
   25e70:	0085c83a 	sub	r2,zero,r2
   25e74:	80800615 	stw	r2,24(r16)
   25e78:	183fe41e 	bne	r3,zero,25e0c <_gp+0xfffe8fec>
   25e7c:	80c0030b 	ldhu	r3,12(r16)
   25e80:	0005883a 	mov	r2,zero
   25e84:	1900200c 	andi	r4,r3,128
   25e88:	203fe126 	beq	r4,zero,25e10 <_gp+0xfffe8ff0>
   25e8c:	18c01014 	ori	r3,r3,64
   25e90:	80c0030d 	sth	r3,12(r16)
   25e94:	00bfffc4 	movi	r2,-1
   25e98:	003fdd06 	br	25e10 <_gp+0xfffe8ff0>
   25e9c:	0027d7c0 	call	27d7c <__sinit>
   25ea0:	003fcd06 	br	25dd8 <_gp+0xfffe8fb8>
   25ea4:	0005883a 	mov	r2,zero
   25ea8:	003fd606 	br	25e04 <_gp+0xfffe8fe4>
   25eac:	81400c17 	ldw	r5,48(r16)
   25eb0:	28000626 	beq	r5,zero,25ecc <__swsetup_r+0x124>
   25eb4:	80801004 	addi	r2,r16,64
   25eb8:	28800326 	beq	r5,r2,25ec8 <__swsetup_r+0x120>
   25ebc:	8809883a 	mov	r4,r17
   25ec0:	0027ef00 	call	27ef0 <_free_r>
   25ec4:	8100030b 	ldhu	r4,12(r16)
   25ec8:	80000c15 	stw	zero,48(r16)
   25ecc:	80c00417 	ldw	r3,16(r16)
   25ed0:	00bff6c4 	movi	r2,-37
   25ed4:	1108703a 	and	r4,r2,r4
   25ed8:	80000115 	stw	zero,4(r16)
   25edc:	80c00015 	stw	r3,0(r16)
   25ee0:	003fd506 	br	25e38 <_gp+0xfffe9018>
   25ee4:	00800244 	movi	r2,9
   25ee8:	88800015 	stw	r2,0(r17)
   25eec:	20801014 	ori	r2,r4,64
   25ef0:	8080030d 	sth	r2,12(r16)
   25ef4:	00bfffc4 	movi	r2,-1
   25ef8:	003fc506 	br	25e10 <_gp+0xfffe8ff0>

00025efc <quorem>:
   25efc:	defff704 	addi	sp,sp,-36
   25f00:	dc800215 	stw	r18,8(sp)
   25f04:	20800417 	ldw	r2,16(r4)
   25f08:	2c800417 	ldw	r18,16(r5)
   25f0c:	dfc00815 	stw	ra,32(sp)
   25f10:	ddc00715 	stw	r23,28(sp)
   25f14:	dd800615 	stw	r22,24(sp)
   25f18:	dd400515 	stw	r21,20(sp)
   25f1c:	dd000415 	stw	r20,16(sp)
   25f20:	dcc00315 	stw	r19,12(sp)
   25f24:	dc400115 	stw	r17,4(sp)
   25f28:	dc000015 	stw	r16,0(sp)
   25f2c:	14807116 	blt	r2,r18,260f4 <quorem+0x1f8>
   25f30:	94bfffc4 	addi	r18,r18,-1
   25f34:	94ad883a 	add	r22,r18,r18
   25f38:	b5ad883a 	add	r22,r22,r22
   25f3c:	2c400504 	addi	r17,r5,20
   25f40:	8da9883a 	add	r20,r17,r22
   25f44:	25400504 	addi	r21,r4,20
   25f48:	282f883a 	mov	r23,r5
   25f4c:	adad883a 	add	r22,r21,r22
   25f50:	a1400017 	ldw	r5,0(r20)
   25f54:	2021883a 	mov	r16,r4
   25f58:	b1000017 	ldw	r4,0(r22)
   25f5c:	29400044 	addi	r5,r5,1
   25f60:	002d0980 	call	2d098 <__udivsi3>
   25f64:	1027883a 	mov	r19,r2
   25f68:	10002c26 	beq	r2,zero,2601c <quorem+0x120>
   25f6c:	a813883a 	mov	r9,r21
   25f70:	880b883a 	mov	r5,r17
   25f74:	0009883a 	mov	r4,zero
   25f78:	000d883a 	mov	r6,zero
   25f7c:	2a000017 	ldw	r8,0(r5)
   25f80:	49c00017 	ldw	r7,0(r9)
   25f84:	29400104 	addi	r5,r5,4
   25f88:	40bfffcc 	andi	r2,r8,65535
   25f8c:	14c5383a 	mul	r2,r2,r19
   25f90:	4010d43a 	srli	r8,r8,16
   25f94:	38ffffcc 	andi	r3,r7,65535
   25f98:	1105883a 	add	r2,r2,r4
   25f9c:	1008d43a 	srli	r4,r2,16
   25fa0:	44d1383a 	mul	r8,r8,r19
   25fa4:	198d883a 	add	r6,r3,r6
   25fa8:	10ffffcc 	andi	r3,r2,65535
   25fac:	30c7c83a 	sub	r3,r6,r3
   25fb0:	380ed43a 	srli	r7,r7,16
   25fb4:	4105883a 	add	r2,r8,r4
   25fb8:	180dd43a 	srai	r6,r3,16
   25fbc:	113fffcc 	andi	r4,r2,65535
   25fc0:	390fc83a 	sub	r7,r7,r4
   25fc4:	398d883a 	add	r6,r7,r6
   25fc8:	300e943a 	slli	r7,r6,16
   25fcc:	18ffffcc 	andi	r3,r3,65535
   25fd0:	1008d43a 	srli	r4,r2,16
   25fd4:	38ceb03a 	or	r7,r7,r3
   25fd8:	49c00015 	stw	r7,0(r9)
   25fdc:	300dd43a 	srai	r6,r6,16
   25fe0:	4a400104 	addi	r9,r9,4
   25fe4:	a17fe52e 	bgeu	r20,r5,25f7c <_gp+0xfffe915c>
   25fe8:	b0800017 	ldw	r2,0(r22)
   25fec:	10000b1e 	bne	r2,zero,2601c <quorem+0x120>
   25ff0:	b0bfff04 	addi	r2,r22,-4
   25ff4:	a880082e 	bgeu	r21,r2,26018 <quorem+0x11c>
   25ff8:	b0ffff17 	ldw	r3,-4(r22)
   25ffc:	18000326 	beq	r3,zero,2600c <quorem+0x110>
   26000:	00000506 	br	26018 <quorem+0x11c>
   26004:	10c00017 	ldw	r3,0(r2)
   26008:	1800031e 	bne	r3,zero,26018 <quorem+0x11c>
   2600c:	10bfff04 	addi	r2,r2,-4
   26010:	94bfffc4 	addi	r18,r18,-1
   26014:	a8bffb36 	bltu	r21,r2,26004 <_gp+0xfffe91e4>
   26018:	84800415 	stw	r18,16(r16)
   2601c:	b80b883a 	mov	r5,r23
   26020:	8009883a 	mov	r4,r16
   26024:	002972c0 	call	2972c <__mcmp>
   26028:	10002616 	blt	r2,zero,260c4 <quorem+0x1c8>
   2602c:	9cc00044 	addi	r19,r19,1
   26030:	a805883a 	mov	r2,r21
   26034:	000b883a 	mov	r5,zero
   26038:	11000017 	ldw	r4,0(r2)
   2603c:	89800017 	ldw	r6,0(r17)
   26040:	10800104 	addi	r2,r2,4
   26044:	20ffffcc 	andi	r3,r4,65535
   26048:	194b883a 	add	r5,r3,r5
   2604c:	30ffffcc 	andi	r3,r6,65535
   26050:	28c7c83a 	sub	r3,r5,r3
   26054:	300cd43a 	srli	r6,r6,16
   26058:	2008d43a 	srli	r4,r4,16
   2605c:	180bd43a 	srai	r5,r3,16
   26060:	18ffffcc 	andi	r3,r3,65535
   26064:	2189c83a 	sub	r4,r4,r6
   26068:	2149883a 	add	r4,r4,r5
   2606c:	200c943a 	slli	r6,r4,16
   26070:	8c400104 	addi	r17,r17,4
   26074:	200bd43a 	srai	r5,r4,16
   26078:	30c6b03a 	or	r3,r6,r3
   2607c:	10ffff15 	stw	r3,-4(r2)
   26080:	a47fed2e 	bgeu	r20,r17,26038 <_gp+0xfffe9218>
   26084:	9485883a 	add	r2,r18,r18
   26088:	1085883a 	add	r2,r2,r2
   2608c:	a887883a 	add	r3,r21,r2
   26090:	18800017 	ldw	r2,0(r3)
   26094:	10000b1e 	bne	r2,zero,260c4 <quorem+0x1c8>
   26098:	18bfff04 	addi	r2,r3,-4
   2609c:	a880082e 	bgeu	r21,r2,260c0 <quorem+0x1c4>
   260a0:	18ffff17 	ldw	r3,-4(r3)
   260a4:	18000326 	beq	r3,zero,260b4 <quorem+0x1b8>
   260a8:	00000506 	br	260c0 <quorem+0x1c4>
   260ac:	10c00017 	ldw	r3,0(r2)
   260b0:	1800031e 	bne	r3,zero,260c0 <quorem+0x1c4>
   260b4:	10bfff04 	addi	r2,r2,-4
   260b8:	94bfffc4 	addi	r18,r18,-1
   260bc:	a8bffb36 	bltu	r21,r2,260ac <_gp+0xfffe928c>
   260c0:	84800415 	stw	r18,16(r16)
   260c4:	9805883a 	mov	r2,r19
   260c8:	dfc00817 	ldw	ra,32(sp)
   260cc:	ddc00717 	ldw	r23,28(sp)
   260d0:	dd800617 	ldw	r22,24(sp)
   260d4:	dd400517 	ldw	r21,20(sp)
   260d8:	dd000417 	ldw	r20,16(sp)
   260dc:	dcc00317 	ldw	r19,12(sp)
   260e0:	dc800217 	ldw	r18,8(sp)
   260e4:	dc400117 	ldw	r17,4(sp)
   260e8:	dc000017 	ldw	r16,0(sp)
   260ec:	dec00904 	addi	sp,sp,36
   260f0:	f800283a 	ret
   260f4:	0005883a 	mov	r2,zero
   260f8:	003ff306 	br	260c8 <_gp+0xfffe92a8>

000260fc <_dtoa_r>:
   260fc:	20801017 	ldw	r2,64(r4)
   26100:	deffde04 	addi	sp,sp,-136
   26104:	df002015 	stw	fp,128(sp)
   26108:	dcc01b15 	stw	r19,108(sp)
   2610c:	dc801a15 	stw	r18,104(sp)
   26110:	dc401915 	stw	r17,100(sp)
   26114:	dc001815 	stw	r16,96(sp)
   26118:	dfc02115 	stw	ra,132(sp)
   2611c:	ddc01f15 	stw	r23,124(sp)
   26120:	dd801e15 	stw	r22,120(sp)
   26124:	dd401d15 	stw	r21,116(sp)
   26128:	dd001c15 	stw	r20,112(sp)
   2612c:	d9c00315 	stw	r7,12(sp)
   26130:	2039883a 	mov	fp,r4
   26134:	3023883a 	mov	r17,r6
   26138:	2825883a 	mov	r18,r5
   2613c:	dc002417 	ldw	r16,144(sp)
   26140:	3027883a 	mov	r19,r6
   26144:	10000826 	beq	r2,zero,26168 <_dtoa_r+0x6c>
   26148:	21801117 	ldw	r6,68(r4)
   2614c:	00c00044 	movi	r3,1
   26150:	100b883a 	mov	r5,r2
   26154:	1986983a 	sll	r3,r3,r6
   26158:	11800115 	stw	r6,4(r2)
   2615c:	10c00215 	stw	r3,8(r2)
   26160:	0028f0c0 	call	28f0c <_Bfree>
   26164:	e0001015 	stw	zero,64(fp)
   26168:	88002e16 	blt	r17,zero,26224 <_dtoa_r+0x128>
   2616c:	80000015 	stw	zero,0(r16)
   26170:	889ffc2c 	andhi	r2,r17,32752
   26174:	00dffc34 	movhi	r3,32752
   26178:	10c01c26 	beq	r2,r3,261ec <_dtoa_r+0xf0>
   2617c:	000d883a 	mov	r6,zero
   26180:	000f883a 	mov	r7,zero
   26184:	9009883a 	mov	r4,r18
   26188:	980b883a 	mov	r5,r19
   2618c:	002e2e80 	call	2e2e8 <__eqdf2>
   26190:	10002b1e 	bne	r2,zero,26240 <_dtoa_r+0x144>
   26194:	d9c02317 	ldw	r7,140(sp)
   26198:	00800044 	movi	r2,1
   2619c:	38800015 	stw	r2,0(r7)
   261a0:	d8802517 	ldw	r2,148(sp)
   261a4:	10019e26 	beq	r2,zero,26820 <_dtoa_r+0x724>
   261a8:	d8c02517 	ldw	r3,148(sp)
   261ac:	008000f4 	movhi	r2,3
   261b0:	108bf944 	addi	r2,r2,12261
   261b4:	18800015 	stw	r2,0(r3)
   261b8:	10bfffc4 	addi	r2,r2,-1
   261bc:	dfc02117 	ldw	ra,132(sp)
   261c0:	df002017 	ldw	fp,128(sp)
   261c4:	ddc01f17 	ldw	r23,124(sp)
   261c8:	dd801e17 	ldw	r22,120(sp)
   261cc:	dd401d17 	ldw	r21,116(sp)
   261d0:	dd001c17 	ldw	r20,112(sp)
   261d4:	dcc01b17 	ldw	r19,108(sp)
   261d8:	dc801a17 	ldw	r18,104(sp)
   261dc:	dc401917 	ldw	r17,100(sp)
   261e0:	dc001817 	ldw	r16,96(sp)
   261e4:	dec02204 	addi	sp,sp,136
   261e8:	f800283a 	ret
   261ec:	d8c02317 	ldw	r3,140(sp)
   261f0:	0089c3c4 	movi	r2,9999
   261f4:	18800015 	stw	r2,0(r3)
   261f8:	90017726 	beq	r18,zero,267d8 <_dtoa_r+0x6dc>
   261fc:	008000f4 	movhi	r2,3
   26200:	108c0504 	addi	r2,r2,12308
   26204:	d9002517 	ldw	r4,148(sp)
   26208:	203fec26 	beq	r4,zero,261bc <_gp+0xfffe939c>
   2620c:	10c000c7 	ldb	r3,3(r2)
   26210:	1801781e 	bne	r3,zero,267f4 <_dtoa_r+0x6f8>
   26214:	10c000c4 	addi	r3,r2,3
   26218:	d9802517 	ldw	r6,148(sp)
   2621c:	30c00015 	stw	r3,0(r6)
   26220:	003fe606 	br	261bc <_gp+0xfffe939c>
   26224:	04e00034 	movhi	r19,32768
   26228:	9cffffc4 	addi	r19,r19,-1
   2622c:	00800044 	movi	r2,1
   26230:	8ce6703a 	and	r19,r17,r19
   26234:	80800015 	stw	r2,0(r16)
   26238:	9823883a 	mov	r17,r19
   2623c:	003fcc06 	br	26170 <_gp+0xfffe9350>
   26240:	d8800204 	addi	r2,sp,8
   26244:	d8800015 	stw	r2,0(sp)
   26248:	d9c00104 	addi	r7,sp,4
   2624c:	900b883a 	mov	r5,r18
   26250:	980d883a 	mov	r6,r19
   26254:	e009883a 	mov	r4,fp
   26258:	8820d53a 	srli	r16,r17,20
   2625c:	0029af80 	call	29af8 <__d2b>
   26260:	d8800915 	stw	r2,36(sp)
   26264:	8001651e 	bne	r16,zero,267fc <_dtoa_r+0x700>
   26268:	dd800217 	ldw	r22,8(sp)
   2626c:	dc000117 	ldw	r16,4(sp)
   26270:	00800804 	movi	r2,32
   26274:	b421883a 	add	r16,r22,r16
   26278:	80c10c84 	addi	r3,r16,1074
   2627c:	10c2d10e 	bge	r2,r3,26dc4 <_dtoa_r+0xcc8>
   26280:	00801004 	movi	r2,64
   26284:	81010484 	addi	r4,r16,1042
   26288:	10c7c83a 	sub	r3,r2,r3
   2628c:	9108d83a 	srl	r4,r18,r4
   26290:	88e2983a 	sll	r17,r17,r3
   26294:	2448b03a 	or	r4,r4,r17
   26298:	002f6b00 	call	2f6b0 <__floatunsidf>
   2629c:	017f8434 	movhi	r5,65040
   262a0:	01800044 	movi	r6,1
   262a4:	1009883a 	mov	r4,r2
   262a8:	194b883a 	add	r5,r3,r5
   262ac:	843fffc4 	addi	r16,r16,-1
   262b0:	d9801115 	stw	r6,68(sp)
   262b4:	000d883a 	mov	r6,zero
   262b8:	01cffe34 	movhi	r7,16376
   262bc:	002ec580 	call	2ec58 <__subdf3>
   262c0:	0198dbf4 	movhi	r6,25455
   262c4:	01cff4f4 	movhi	r7,16339
   262c8:	3190d844 	addi	r6,r6,17249
   262cc:	39e1e9c4 	addi	r7,r7,-30809
   262d0:	1009883a 	mov	r4,r2
   262d4:	180b883a 	mov	r5,r3
   262d8:	002e5400 	call	2e540 <__muldf3>
   262dc:	01a2d874 	movhi	r6,35681
   262e0:	01cff1f4 	movhi	r7,16327
   262e4:	31b22cc4 	addi	r6,r6,-14157
   262e8:	39e28a04 	addi	r7,r7,-30168
   262ec:	180b883a 	mov	r5,r3
   262f0:	1009883a 	mov	r4,r2
   262f4:	002d1540 	call	2d154 <__adddf3>
   262f8:	8009883a 	mov	r4,r16
   262fc:	1029883a 	mov	r20,r2
   26300:	1823883a 	mov	r17,r3
   26304:	002f5d40 	call	2f5d4 <__floatsidf>
   26308:	019427f4 	movhi	r6,20639
   2630c:	01cff4f4 	movhi	r7,16339
   26310:	319e7ec4 	addi	r6,r6,31227
   26314:	39d104c4 	addi	r7,r7,17427
   26318:	1009883a 	mov	r4,r2
   2631c:	180b883a 	mov	r5,r3
   26320:	002e5400 	call	2e540 <__muldf3>
   26324:	100d883a 	mov	r6,r2
   26328:	180f883a 	mov	r7,r3
   2632c:	a009883a 	mov	r4,r20
   26330:	880b883a 	mov	r5,r17
   26334:	002d1540 	call	2d154 <__adddf3>
   26338:	1009883a 	mov	r4,r2
   2633c:	180b883a 	mov	r5,r3
   26340:	1029883a 	mov	r20,r2
   26344:	1823883a 	mov	r17,r3
   26348:	002f5540 	call	2f554 <__fixdfsi>
   2634c:	000d883a 	mov	r6,zero
   26350:	000f883a 	mov	r7,zero
   26354:	a009883a 	mov	r4,r20
   26358:	880b883a 	mov	r5,r17
   2635c:	d8800515 	stw	r2,20(sp)
   26360:	002e44c0 	call	2e44c <__ledf2>
   26364:	10028716 	blt	r2,zero,26d84 <_dtoa_r+0xc88>
   26368:	d8c00517 	ldw	r3,20(sp)
   2636c:	00800584 	movi	r2,22
   26370:	10c27536 	bltu	r2,r3,26d48 <_dtoa_r+0xc4c>
   26374:	180490fa 	slli	r2,r3,3
   26378:	00c000f4 	movhi	r3,3
   2637c:	18cc2104 	addi	r3,r3,12420
   26380:	1885883a 	add	r2,r3,r2
   26384:	11000017 	ldw	r4,0(r2)
   26388:	11400117 	ldw	r5,4(r2)
   2638c:	900d883a 	mov	r6,r18
   26390:	980f883a 	mov	r7,r19
   26394:	002e3700 	call	2e370 <__gedf2>
   26398:	00828d0e 	bge	zero,r2,26dd0 <_dtoa_r+0xcd4>
   2639c:	d9000517 	ldw	r4,20(sp)
   263a0:	d8000e15 	stw	zero,56(sp)
   263a4:	213fffc4 	addi	r4,r4,-1
   263a8:	d9000515 	stw	r4,20(sp)
   263ac:	b42dc83a 	sub	r22,r22,r16
   263b0:	b5bfffc4 	addi	r22,r22,-1
   263b4:	b0026f16 	blt	r22,zero,26d74 <_dtoa_r+0xc78>
   263b8:	d8000815 	stw	zero,32(sp)
   263bc:	d9c00517 	ldw	r7,20(sp)
   263c0:	38026416 	blt	r7,zero,26d54 <_dtoa_r+0xc58>
   263c4:	b1ed883a 	add	r22,r22,r7
   263c8:	d9c00d15 	stw	r7,52(sp)
   263cc:	d8000a15 	stw	zero,40(sp)
   263d0:	d9800317 	ldw	r6,12(sp)
   263d4:	00800244 	movi	r2,9
   263d8:	11811436 	bltu	r2,r6,2682c <_dtoa_r+0x730>
   263dc:	00800144 	movi	r2,5
   263e0:	1184e10e 	bge	r2,r6,27768 <_dtoa_r+0x166c>
   263e4:	31bfff04 	addi	r6,r6,-4
   263e8:	d9800315 	stw	r6,12(sp)
   263ec:	0023883a 	mov	r17,zero
   263f0:	d9800317 	ldw	r6,12(sp)
   263f4:	008000c4 	movi	r2,3
   263f8:	30836726 	beq	r6,r2,27198 <_dtoa_r+0x109c>
   263fc:	1183410e 	bge	r2,r6,27104 <_dtoa_r+0x1008>
   26400:	d9c00317 	ldw	r7,12(sp)
   26404:	00800104 	movi	r2,4
   26408:	38827c26 	beq	r7,r2,26dfc <_dtoa_r+0xd00>
   2640c:	00800144 	movi	r2,5
   26410:	3884c41e 	bne	r7,r2,27724 <_dtoa_r+0x1628>
   26414:	00800044 	movi	r2,1
   26418:	d8800b15 	stw	r2,44(sp)
   2641c:	d8c00517 	ldw	r3,20(sp)
   26420:	d9002217 	ldw	r4,136(sp)
   26424:	1907883a 	add	r3,r3,r4
   26428:	19800044 	addi	r6,r3,1
   2642c:	d8c00c15 	stw	r3,48(sp)
   26430:	d9800615 	stw	r6,24(sp)
   26434:	0183a40e 	bge	zero,r6,272c8 <_dtoa_r+0x11cc>
   26438:	d9800617 	ldw	r6,24(sp)
   2643c:	3021883a 	mov	r16,r6
   26440:	e0001115 	stw	zero,68(fp)
   26444:	008005c4 	movi	r2,23
   26448:	1184c92e 	bgeu	r2,r6,27770 <_dtoa_r+0x1674>
   2644c:	00c00044 	movi	r3,1
   26450:	00800104 	movi	r2,4
   26454:	1085883a 	add	r2,r2,r2
   26458:	11000504 	addi	r4,r2,20
   2645c:	180b883a 	mov	r5,r3
   26460:	18c00044 	addi	r3,r3,1
   26464:	313ffb2e 	bgeu	r6,r4,26454 <_gp+0xfffe9634>
   26468:	e1401115 	stw	r5,68(fp)
   2646c:	e009883a 	mov	r4,fp
   26470:	0028e640 	call	28e64 <_Balloc>
   26474:	d8800715 	stw	r2,28(sp)
   26478:	e0801015 	stw	r2,64(fp)
   2647c:	00800384 	movi	r2,14
   26480:	1400f736 	bltu	r2,r16,26860 <_dtoa_r+0x764>
   26484:	8800f626 	beq	r17,zero,26860 <_dtoa_r+0x764>
   26488:	d9c00517 	ldw	r7,20(sp)
   2648c:	01c39a0e 	bge	zero,r7,272f8 <_dtoa_r+0x11fc>
   26490:	388003cc 	andi	r2,r7,15
   26494:	100490fa 	slli	r2,r2,3
   26498:	382bd13a 	srai	r21,r7,4
   2649c:	00c000f4 	movhi	r3,3
   264a0:	18cc2104 	addi	r3,r3,12420
   264a4:	1885883a 	add	r2,r3,r2
   264a8:	a8c0040c 	andi	r3,r21,16
   264ac:	12400017 	ldw	r9,0(r2)
   264b0:	12000117 	ldw	r8,4(r2)
   264b4:	18037926 	beq	r3,zero,2729c <_dtoa_r+0x11a0>
   264b8:	008000f4 	movhi	r2,3
   264bc:	108c1704 	addi	r2,r2,12380
   264c0:	11800817 	ldw	r6,32(r2)
   264c4:	11c00917 	ldw	r7,36(r2)
   264c8:	9009883a 	mov	r4,r18
   264cc:	980b883a 	mov	r5,r19
   264d0:	da001715 	stw	r8,92(sp)
   264d4:	da401615 	stw	r9,88(sp)
   264d8:	002da000 	call	2da00 <__divdf3>
   264dc:	da001717 	ldw	r8,92(sp)
   264e0:	da401617 	ldw	r9,88(sp)
   264e4:	ad4003cc 	andi	r21,r21,15
   264e8:	040000c4 	movi	r16,3
   264ec:	1023883a 	mov	r17,r2
   264f0:	1829883a 	mov	r20,r3
   264f4:	a8001126 	beq	r21,zero,2653c <_dtoa_r+0x440>
   264f8:	05c000f4 	movhi	r23,3
   264fc:	bdcc1704 	addi	r23,r23,12380
   26500:	4805883a 	mov	r2,r9
   26504:	4007883a 	mov	r3,r8
   26508:	a980004c 	andi	r6,r21,1
   2650c:	1009883a 	mov	r4,r2
   26510:	a82bd07a 	srai	r21,r21,1
   26514:	180b883a 	mov	r5,r3
   26518:	30000426 	beq	r6,zero,2652c <_dtoa_r+0x430>
   2651c:	b9800017 	ldw	r6,0(r23)
   26520:	b9c00117 	ldw	r7,4(r23)
   26524:	84000044 	addi	r16,r16,1
   26528:	002e5400 	call	2e540 <__muldf3>
   2652c:	bdc00204 	addi	r23,r23,8
   26530:	a83ff51e 	bne	r21,zero,26508 <_gp+0xfffe96e8>
   26534:	1013883a 	mov	r9,r2
   26538:	1811883a 	mov	r8,r3
   2653c:	480d883a 	mov	r6,r9
   26540:	400f883a 	mov	r7,r8
   26544:	8809883a 	mov	r4,r17
   26548:	a00b883a 	mov	r5,r20
   2654c:	002da000 	call	2da00 <__divdf3>
   26550:	d8800f15 	stw	r2,60(sp)
   26554:	d8c01015 	stw	r3,64(sp)
   26558:	d8c00e17 	ldw	r3,56(sp)
   2655c:	18000626 	beq	r3,zero,26578 <_dtoa_r+0x47c>
   26560:	d9000f17 	ldw	r4,60(sp)
   26564:	d9401017 	ldw	r5,64(sp)
   26568:	000d883a 	mov	r6,zero
   2656c:	01cffc34 	movhi	r7,16368
   26570:	002e44c0 	call	2e44c <__ledf2>
   26574:	10040b16 	blt	r2,zero,275a4 <_dtoa_r+0x14a8>
   26578:	8009883a 	mov	r4,r16
   2657c:	002f5d40 	call	2f5d4 <__floatsidf>
   26580:	d9800f17 	ldw	r6,60(sp)
   26584:	d9c01017 	ldw	r7,64(sp)
   26588:	1009883a 	mov	r4,r2
   2658c:	180b883a 	mov	r5,r3
   26590:	002e5400 	call	2e540 <__muldf3>
   26594:	000d883a 	mov	r6,zero
   26598:	01d00734 	movhi	r7,16412
   2659c:	1009883a 	mov	r4,r2
   265a0:	180b883a 	mov	r5,r3
   265a4:	002d1540 	call	2d154 <__adddf3>
   265a8:	1021883a 	mov	r16,r2
   265ac:	d8800617 	ldw	r2,24(sp)
   265b0:	047f3034 	movhi	r17,64704
   265b4:	1c63883a 	add	r17,r3,r17
   265b8:	10031826 	beq	r2,zero,2721c <_dtoa_r+0x1120>
   265bc:	d8c00517 	ldw	r3,20(sp)
   265c0:	db000617 	ldw	r12,24(sp)
   265c4:	d8c01315 	stw	r3,76(sp)
   265c8:	d9000b17 	ldw	r4,44(sp)
   265cc:	20038f26 	beq	r4,zero,2740c <_dtoa_r+0x1310>
   265d0:	60bfffc4 	addi	r2,r12,-1
   265d4:	100490fa 	slli	r2,r2,3
   265d8:	00c000f4 	movhi	r3,3
   265dc:	18cc2104 	addi	r3,r3,12420
   265e0:	1885883a 	add	r2,r3,r2
   265e4:	11800017 	ldw	r6,0(r2)
   265e8:	11c00117 	ldw	r7,4(r2)
   265ec:	d8800717 	ldw	r2,28(sp)
   265f0:	0009883a 	mov	r4,zero
   265f4:	014ff834 	movhi	r5,16352
   265f8:	db001615 	stw	r12,88(sp)
   265fc:	15c00044 	addi	r23,r2,1
   26600:	002da000 	call	2da00 <__divdf3>
   26604:	800d883a 	mov	r6,r16
   26608:	880f883a 	mov	r7,r17
   2660c:	1009883a 	mov	r4,r2
   26610:	180b883a 	mov	r5,r3
   26614:	002ec580 	call	2ec58 <__subdf3>
   26618:	d9401017 	ldw	r5,64(sp)
   2661c:	d9000f17 	ldw	r4,60(sp)
   26620:	102b883a 	mov	r21,r2
   26624:	d8c01215 	stw	r3,72(sp)
   26628:	002f5540 	call	2f554 <__fixdfsi>
   2662c:	1009883a 	mov	r4,r2
   26630:	1029883a 	mov	r20,r2
   26634:	002f5d40 	call	2f5d4 <__floatsidf>
   26638:	d9000f17 	ldw	r4,60(sp)
   2663c:	d9401017 	ldw	r5,64(sp)
   26640:	100d883a 	mov	r6,r2
   26644:	180f883a 	mov	r7,r3
   26648:	002ec580 	call	2ec58 <__subdf3>
   2664c:	1823883a 	mov	r17,r3
   26650:	d8c00717 	ldw	r3,28(sp)
   26654:	d9401217 	ldw	r5,72(sp)
   26658:	a2000c04 	addi	r8,r20,48
   2665c:	1021883a 	mov	r16,r2
   26660:	1a000005 	stb	r8,0(r3)
   26664:	800d883a 	mov	r6,r16
   26668:	880f883a 	mov	r7,r17
   2666c:	a809883a 	mov	r4,r21
   26670:	4029883a 	mov	r20,r8
   26674:	002e3700 	call	2e370 <__gedf2>
   26678:	00841d16 	blt	zero,r2,276f0 <_dtoa_r+0x15f4>
   2667c:	800d883a 	mov	r6,r16
   26680:	880f883a 	mov	r7,r17
   26684:	0009883a 	mov	r4,zero
   26688:	014ffc34 	movhi	r5,16368
   2668c:	002ec580 	call	2ec58 <__subdf3>
   26690:	d9401217 	ldw	r5,72(sp)
   26694:	100d883a 	mov	r6,r2
   26698:	180f883a 	mov	r7,r3
   2669c:	a809883a 	mov	r4,r21
   266a0:	002e3700 	call	2e370 <__gedf2>
   266a4:	db001617 	ldw	r12,88(sp)
   266a8:	00840e16 	blt	zero,r2,276e4 <_dtoa_r+0x15e8>
   266ac:	00800044 	movi	r2,1
   266b0:	13006b0e 	bge	r2,r12,26860 <_dtoa_r+0x764>
   266b4:	d9000717 	ldw	r4,28(sp)
   266b8:	dd800f15 	stw	r22,60(sp)
   266bc:	dcc01015 	stw	r19,64(sp)
   266c0:	2319883a 	add	r12,r4,r12
   266c4:	dcc01217 	ldw	r19,72(sp)
   266c8:	602d883a 	mov	r22,r12
   266cc:	dc801215 	stw	r18,72(sp)
   266d0:	b825883a 	mov	r18,r23
   266d4:	00000906 	br	266fc <_dtoa_r+0x600>
   266d8:	002ec580 	call	2ec58 <__subdf3>
   266dc:	a80d883a 	mov	r6,r21
   266e0:	980f883a 	mov	r7,r19
   266e4:	1009883a 	mov	r4,r2
   266e8:	180b883a 	mov	r5,r3
   266ec:	002e44c0 	call	2e44c <__ledf2>
   266f0:	1003e816 	blt	r2,zero,27694 <_dtoa_r+0x1598>
   266f4:	b825883a 	mov	r18,r23
   266f8:	bd83e926 	beq	r23,r22,276a0 <_dtoa_r+0x15a4>
   266fc:	a809883a 	mov	r4,r21
   26700:	980b883a 	mov	r5,r19
   26704:	000d883a 	mov	r6,zero
   26708:	01d00934 	movhi	r7,16420
   2670c:	002e5400 	call	2e540 <__muldf3>
   26710:	000d883a 	mov	r6,zero
   26714:	01d00934 	movhi	r7,16420
   26718:	8009883a 	mov	r4,r16
   2671c:	880b883a 	mov	r5,r17
   26720:	102b883a 	mov	r21,r2
   26724:	1827883a 	mov	r19,r3
   26728:	002e5400 	call	2e540 <__muldf3>
   2672c:	180b883a 	mov	r5,r3
   26730:	1009883a 	mov	r4,r2
   26734:	1821883a 	mov	r16,r3
   26738:	1023883a 	mov	r17,r2
   2673c:	002f5540 	call	2f554 <__fixdfsi>
   26740:	1009883a 	mov	r4,r2
   26744:	1029883a 	mov	r20,r2
   26748:	002f5d40 	call	2f5d4 <__floatsidf>
   2674c:	8809883a 	mov	r4,r17
   26750:	800b883a 	mov	r5,r16
   26754:	100d883a 	mov	r6,r2
   26758:	180f883a 	mov	r7,r3
   2675c:	002ec580 	call	2ec58 <__subdf3>
   26760:	a5000c04 	addi	r20,r20,48
   26764:	a80d883a 	mov	r6,r21
   26768:	980f883a 	mov	r7,r19
   2676c:	1009883a 	mov	r4,r2
   26770:	180b883a 	mov	r5,r3
   26774:	95000005 	stb	r20,0(r18)
   26778:	1021883a 	mov	r16,r2
   2677c:	1823883a 	mov	r17,r3
   26780:	002e44c0 	call	2e44c <__ledf2>
   26784:	bdc00044 	addi	r23,r23,1
   26788:	800d883a 	mov	r6,r16
   2678c:	880f883a 	mov	r7,r17
   26790:	0009883a 	mov	r4,zero
   26794:	014ffc34 	movhi	r5,16368
   26798:	103fcf0e 	bge	r2,zero,266d8 <_gp+0xfffe98b8>
   2679c:	d8c01317 	ldw	r3,76(sp)
   267a0:	d8c00515 	stw	r3,20(sp)
   267a4:	d9400917 	ldw	r5,36(sp)
   267a8:	e009883a 	mov	r4,fp
   267ac:	0028f0c0 	call	28f0c <_Bfree>
   267b0:	d9000517 	ldw	r4,20(sp)
   267b4:	d9802317 	ldw	r6,140(sp)
   267b8:	d9c02517 	ldw	r7,148(sp)
   267bc:	b8000005 	stb	zero,0(r23)
   267c0:	20800044 	addi	r2,r4,1
   267c4:	30800015 	stw	r2,0(r6)
   267c8:	3802aa26 	beq	r7,zero,27274 <_dtoa_r+0x1178>
   267cc:	3dc00015 	stw	r23,0(r7)
   267d0:	d8800717 	ldw	r2,28(sp)
   267d4:	003e7906 	br	261bc <_gp+0xfffe939c>
   267d8:	00800434 	movhi	r2,16
   267dc:	10bfffc4 	addi	r2,r2,-1
   267e0:	88a2703a 	and	r17,r17,r2
   267e4:	883e851e 	bne	r17,zero,261fc <_gp+0xfffe93dc>
   267e8:	008000f4 	movhi	r2,3
   267ec:	108c0204 	addi	r2,r2,12296
   267f0:	003e8406 	br	26204 <_gp+0xfffe93e4>
   267f4:	10c00204 	addi	r3,r2,8
   267f8:	003e8706 	br	26218 <_gp+0xfffe93f8>
   267fc:	01400434 	movhi	r5,16
   26800:	297fffc4 	addi	r5,r5,-1
   26804:	994a703a 	and	r5,r19,r5
   26808:	9009883a 	mov	r4,r18
   2680c:	843f0044 	addi	r16,r16,-1023
   26810:	294ffc34 	orhi	r5,r5,16368
   26814:	dd800217 	ldw	r22,8(sp)
   26818:	d8001115 	stw	zero,68(sp)
   2681c:	003ea506 	br	262b4 <_gp+0xfffe9494>
   26820:	008000f4 	movhi	r2,3
   26824:	108bf904 	addi	r2,r2,12260
   26828:	003e6406 	br	261bc <_gp+0xfffe939c>
   2682c:	e0001115 	stw	zero,68(fp)
   26830:	000b883a 	mov	r5,zero
   26834:	e009883a 	mov	r4,fp
   26838:	0028e640 	call	28e64 <_Balloc>
   2683c:	01bfffc4 	movi	r6,-1
   26840:	01c00044 	movi	r7,1
   26844:	d8800715 	stw	r2,28(sp)
   26848:	d9800c15 	stw	r6,48(sp)
   2684c:	e0801015 	stw	r2,64(fp)
   26850:	d8000315 	stw	zero,12(sp)
   26854:	d9c00b15 	stw	r7,44(sp)
   26858:	d9800615 	stw	r6,24(sp)
   2685c:	d8002215 	stw	zero,136(sp)
   26860:	d8800117 	ldw	r2,4(sp)
   26864:	10008916 	blt	r2,zero,26a8c <_dtoa_r+0x990>
   26868:	d9000517 	ldw	r4,20(sp)
   2686c:	00c00384 	movi	r3,14
   26870:	19008616 	blt	r3,r4,26a8c <_dtoa_r+0x990>
   26874:	200490fa 	slli	r2,r4,3
   26878:	00c000f4 	movhi	r3,3
   2687c:	d9802217 	ldw	r6,136(sp)
   26880:	18cc2104 	addi	r3,r3,12420
   26884:	1885883a 	add	r2,r3,r2
   26888:	14000017 	ldw	r16,0(r2)
   2688c:	14400117 	ldw	r17,4(r2)
   26890:	30016316 	blt	r6,zero,26e20 <_dtoa_r+0xd24>
   26894:	800d883a 	mov	r6,r16
   26898:	880f883a 	mov	r7,r17
   2689c:	9009883a 	mov	r4,r18
   268a0:	980b883a 	mov	r5,r19
   268a4:	002da000 	call	2da00 <__divdf3>
   268a8:	180b883a 	mov	r5,r3
   268ac:	1009883a 	mov	r4,r2
   268b0:	002f5540 	call	2f554 <__fixdfsi>
   268b4:	1009883a 	mov	r4,r2
   268b8:	102b883a 	mov	r21,r2
   268bc:	002f5d40 	call	2f5d4 <__floatsidf>
   268c0:	800d883a 	mov	r6,r16
   268c4:	880f883a 	mov	r7,r17
   268c8:	1009883a 	mov	r4,r2
   268cc:	180b883a 	mov	r5,r3
   268d0:	002e5400 	call	2e540 <__muldf3>
   268d4:	100d883a 	mov	r6,r2
   268d8:	180f883a 	mov	r7,r3
   268dc:	9009883a 	mov	r4,r18
   268e0:	980b883a 	mov	r5,r19
   268e4:	002ec580 	call	2ec58 <__subdf3>
   268e8:	d9c00717 	ldw	r7,28(sp)
   268ec:	1009883a 	mov	r4,r2
   268f0:	a8800c04 	addi	r2,r21,48
   268f4:	38800005 	stb	r2,0(r7)
   268f8:	3dc00044 	addi	r23,r7,1
   268fc:	d9c00617 	ldw	r7,24(sp)
   26900:	01800044 	movi	r6,1
   26904:	180b883a 	mov	r5,r3
   26908:	2005883a 	mov	r2,r4
   2690c:	39803826 	beq	r7,r6,269f0 <_dtoa_r+0x8f4>
   26910:	000d883a 	mov	r6,zero
   26914:	01d00934 	movhi	r7,16420
   26918:	002e5400 	call	2e540 <__muldf3>
   2691c:	000d883a 	mov	r6,zero
   26920:	000f883a 	mov	r7,zero
   26924:	1009883a 	mov	r4,r2
   26928:	180b883a 	mov	r5,r3
   2692c:	1025883a 	mov	r18,r2
   26930:	1827883a 	mov	r19,r3
   26934:	002e2e80 	call	2e2e8 <__eqdf2>
   26938:	103f9a26 	beq	r2,zero,267a4 <_gp+0xfffe9984>
   2693c:	d9c00617 	ldw	r7,24(sp)
   26940:	d8c00717 	ldw	r3,28(sp)
   26944:	b829883a 	mov	r20,r23
   26948:	38bfffc4 	addi	r2,r7,-1
   2694c:	18ad883a 	add	r22,r3,r2
   26950:	00000a06 	br	2697c <_dtoa_r+0x880>
   26954:	002e5400 	call	2e540 <__muldf3>
   26958:	000d883a 	mov	r6,zero
   2695c:	000f883a 	mov	r7,zero
   26960:	1009883a 	mov	r4,r2
   26964:	180b883a 	mov	r5,r3
   26968:	1025883a 	mov	r18,r2
   2696c:	1827883a 	mov	r19,r3
   26970:	b829883a 	mov	r20,r23
   26974:	002e2e80 	call	2e2e8 <__eqdf2>
   26978:	103f8a26 	beq	r2,zero,267a4 <_gp+0xfffe9984>
   2697c:	800d883a 	mov	r6,r16
   26980:	880f883a 	mov	r7,r17
   26984:	9009883a 	mov	r4,r18
   26988:	980b883a 	mov	r5,r19
   2698c:	002da000 	call	2da00 <__divdf3>
   26990:	180b883a 	mov	r5,r3
   26994:	1009883a 	mov	r4,r2
   26998:	002f5540 	call	2f554 <__fixdfsi>
   2699c:	1009883a 	mov	r4,r2
   269a0:	102b883a 	mov	r21,r2
   269a4:	002f5d40 	call	2f5d4 <__floatsidf>
   269a8:	800d883a 	mov	r6,r16
   269ac:	880f883a 	mov	r7,r17
   269b0:	1009883a 	mov	r4,r2
   269b4:	180b883a 	mov	r5,r3
   269b8:	002e5400 	call	2e540 <__muldf3>
   269bc:	100d883a 	mov	r6,r2
   269c0:	180f883a 	mov	r7,r3
   269c4:	9009883a 	mov	r4,r18
   269c8:	980b883a 	mov	r5,r19
   269cc:	002ec580 	call	2ec58 <__subdf3>
   269d0:	aa000c04 	addi	r8,r21,48
   269d4:	a2000005 	stb	r8,0(r20)
   269d8:	000d883a 	mov	r6,zero
   269dc:	01d00934 	movhi	r7,16420
   269e0:	1009883a 	mov	r4,r2
   269e4:	180b883a 	mov	r5,r3
   269e8:	a5c00044 	addi	r23,r20,1
   269ec:	b53fd91e 	bne	r22,r20,26954 <_gp+0xfffe9b34>
   269f0:	100d883a 	mov	r6,r2
   269f4:	180f883a 	mov	r7,r3
   269f8:	1009883a 	mov	r4,r2
   269fc:	180b883a 	mov	r5,r3
   26a00:	002d1540 	call	2d154 <__adddf3>
   26a04:	100d883a 	mov	r6,r2
   26a08:	180f883a 	mov	r7,r3
   26a0c:	8009883a 	mov	r4,r16
   26a10:	880b883a 	mov	r5,r17
   26a14:	1027883a 	mov	r19,r2
   26a18:	1825883a 	mov	r18,r3
   26a1c:	002e44c0 	call	2e44c <__ledf2>
   26a20:	10000816 	blt	r2,zero,26a44 <_dtoa_r+0x948>
   26a24:	980d883a 	mov	r6,r19
   26a28:	900f883a 	mov	r7,r18
   26a2c:	8009883a 	mov	r4,r16
   26a30:	880b883a 	mov	r5,r17
   26a34:	002e2e80 	call	2e2e8 <__eqdf2>
   26a38:	103f5a1e 	bne	r2,zero,267a4 <_gp+0xfffe9984>
   26a3c:	ad40004c 	andi	r21,r21,1
   26a40:	a83f5826 	beq	r21,zero,267a4 <_gp+0xfffe9984>
   26a44:	bd3fffc3 	ldbu	r20,-1(r23)
   26a48:	b8bfffc4 	addi	r2,r23,-1
   26a4c:	1007883a 	mov	r3,r2
   26a50:	01400e44 	movi	r5,57
   26a54:	d9800717 	ldw	r6,28(sp)
   26a58:	00000506 	br	26a70 <_dtoa_r+0x974>
   26a5c:	18ffffc4 	addi	r3,r3,-1
   26a60:	11824726 	beq	r2,r6,27380 <_dtoa_r+0x1284>
   26a64:	1d000003 	ldbu	r20,0(r3)
   26a68:	102f883a 	mov	r23,r2
   26a6c:	10bfffc4 	addi	r2,r2,-1
   26a70:	a1003fcc 	andi	r4,r20,255
   26a74:	2100201c 	xori	r4,r4,128
   26a78:	213fe004 	addi	r4,r4,-128
   26a7c:	217ff726 	beq	r4,r5,26a5c <_gp+0xfffe9c3c>
   26a80:	a2000044 	addi	r8,r20,1
   26a84:	12000005 	stb	r8,0(r2)
   26a88:	003f4606 	br	267a4 <_gp+0xfffe9984>
   26a8c:	d9000b17 	ldw	r4,44(sp)
   26a90:	2000c826 	beq	r4,zero,26db4 <_dtoa_r+0xcb8>
   26a94:	d9800317 	ldw	r6,12(sp)
   26a98:	00c00044 	movi	r3,1
   26a9c:	1980f90e 	bge	r3,r6,26e84 <_dtoa_r+0xd88>
   26aa0:	d8800617 	ldw	r2,24(sp)
   26aa4:	d8c00a17 	ldw	r3,40(sp)
   26aa8:	157fffc4 	addi	r21,r2,-1
   26aac:	1d41f316 	blt	r3,r21,2727c <_dtoa_r+0x1180>
   26ab0:	1d6bc83a 	sub	r21,r3,r21
   26ab4:	d9c00617 	ldw	r7,24(sp)
   26ab8:	3802aa16 	blt	r7,zero,27564 <_dtoa_r+0x1468>
   26abc:	dd000817 	ldw	r20,32(sp)
   26ac0:	d8800617 	ldw	r2,24(sp)
   26ac4:	d8c00817 	ldw	r3,32(sp)
   26ac8:	01400044 	movi	r5,1
   26acc:	e009883a 	mov	r4,fp
   26ad0:	1887883a 	add	r3,r3,r2
   26ad4:	d8c00815 	stw	r3,32(sp)
   26ad8:	b0ad883a 	add	r22,r22,r2
   26adc:	00292700 	call	29270 <__i2b>
   26ae0:	1023883a 	mov	r17,r2
   26ae4:	a0000826 	beq	r20,zero,26b08 <_dtoa_r+0xa0c>
   26ae8:	0580070e 	bge	zero,r22,26b08 <_dtoa_r+0xa0c>
   26aec:	a005883a 	mov	r2,r20
   26af0:	b500b916 	blt	r22,r20,26dd8 <_dtoa_r+0xcdc>
   26af4:	d9000817 	ldw	r4,32(sp)
   26af8:	a0a9c83a 	sub	r20,r20,r2
   26afc:	b0adc83a 	sub	r22,r22,r2
   26b00:	2089c83a 	sub	r4,r4,r2
   26b04:	d9000815 	stw	r4,32(sp)
   26b08:	d9800a17 	ldw	r6,40(sp)
   26b0c:	0181810e 	bge	zero,r6,27114 <_dtoa_r+0x1018>
   26b10:	d9c00b17 	ldw	r7,44(sp)
   26b14:	3800b326 	beq	r7,zero,26de4 <_dtoa_r+0xce8>
   26b18:	a800b226 	beq	r21,zero,26de4 <_dtoa_r+0xce8>
   26b1c:	880b883a 	mov	r5,r17
   26b20:	a80d883a 	mov	r6,r21
   26b24:	e009883a 	mov	r4,fp
   26b28:	00294a40 	call	294a4 <__pow5mult>
   26b2c:	d9800917 	ldw	r6,36(sp)
   26b30:	100b883a 	mov	r5,r2
   26b34:	e009883a 	mov	r4,fp
   26b38:	1023883a 	mov	r17,r2
   26b3c:	00292ac0 	call	292ac <__multiply>
   26b40:	1021883a 	mov	r16,r2
   26b44:	d8800a17 	ldw	r2,40(sp)
   26b48:	d9400917 	ldw	r5,36(sp)
   26b4c:	e009883a 	mov	r4,fp
   26b50:	1545c83a 	sub	r2,r2,r21
   26b54:	d8800a15 	stw	r2,40(sp)
   26b58:	0028f0c0 	call	28f0c <_Bfree>
   26b5c:	d8c00a17 	ldw	r3,40(sp)
   26b60:	18009f1e 	bne	r3,zero,26de0 <_dtoa_r+0xce4>
   26b64:	05c00044 	movi	r23,1
   26b68:	e009883a 	mov	r4,fp
   26b6c:	b80b883a 	mov	r5,r23
   26b70:	00292700 	call	29270 <__i2b>
   26b74:	d9000d17 	ldw	r4,52(sp)
   26b78:	102b883a 	mov	r21,r2
   26b7c:	2000ce26 	beq	r4,zero,26eb8 <_dtoa_r+0xdbc>
   26b80:	200d883a 	mov	r6,r4
   26b84:	100b883a 	mov	r5,r2
   26b88:	e009883a 	mov	r4,fp
   26b8c:	00294a40 	call	294a4 <__pow5mult>
   26b90:	d9800317 	ldw	r6,12(sp)
   26b94:	102b883a 	mov	r21,r2
   26b98:	b981810e 	bge	r23,r6,271a0 <_dtoa_r+0x10a4>
   26b9c:	0027883a 	mov	r19,zero
   26ba0:	a8800417 	ldw	r2,16(r21)
   26ba4:	05c00804 	movi	r23,32
   26ba8:	10800104 	addi	r2,r2,4
   26bac:	1085883a 	add	r2,r2,r2
   26bb0:	1085883a 	add	r2,r2,r2
   26bb4:	a885883a 	add	r2,r21,r2
   26bb8:	11000017 	ldw	r4,0(r2)
   26bbc:	00291580 	call	29158 <__hi0bits>
   26bc0:	b885c83a 	sub	r2,r23,r2
   26bc4:	1585883a 	add	r2,r2,r22
   26bc8:	108007cc 	andi	r2,r2,31
   26bcc:	1000b326 	beq	r2,zero,26e9c <_dtoa_r+0xda0>
   26bd0:	00c00804 	movi	r3,32
   26bd4:	1887c83a 	sub	r3,r3,r2
   26bd8:	01000104 	movi	r4,4
   26bdc:	20c2cd0e 	bge	r4,r3,27714 <_dtoa_r+0x1618>
   26be0:	00c00704 	movi	r3,28
   26be4:	1885c83a 	sub	r2,r3,r2
   26be8:	d8c00817 	ldw	r3,32(sp)
   26bec:	a0a9883a 	add	r20,r20,r2
   26bf0:	b0ad883a 	add	r22,r22,r2
   26bf4:	1887883a 	add	r3,r3,r2
   26bf8:	d8c00815 	stw	r3,32(sp)
   26bfc:	d9800817 	ldw	r6,32(sp)
   26c00:	0180040e 	bge	zero,r6,26c14 <_dtoa_r+0xb18>
   26c04:	800b883a 	mov	r5,r16
   26c08:	e009883a 	mov	r4,fp
   26c0c:	00295e40 	call	295e4 <__lshift>
   26c10:	1021883a 	mov	r16,r2
   26c14:	0580050e 	bge	zero,r22,26c2c <_dtoa_r+0xb30>
   26c18:	a80b883a 	mov	r5,r21
   26c1c:	b00d883a 	mov	r6,r22
   26c20:	e009883a 	mov	r4,fp
   26c24:	00295e40 	call	295e4 <__lshift>
   26c28:	102b883a 	mov	r21,r2
   26c2c:	d9c00e17 	ldw	r7,56(sp)
   26c30:	3801211e 	bne	r7,zero,270b8 <_dtoa_r+0xfbc>
   26c34:	d9800617 	ldw	r6,24(sp)
   26c38:	0181380e 	bge	zero,r6,2711c <_dtoa_r+0x1020>
   26c3c:	d8c00b17 	ldw	r3,44(sp)
   26c40:	1800ab1e 	bne	r3,zero,26ef0 <_dtoa_r+0xdf4>
   26c44:	dc800717 	ldw	r18,28(sp)
   26c48:	dcc00617 	ldw	r19,24(sp)
   26c4c:	9029883a 	mov	r20,r18
   26c50:	00000206 	br	26c5c <_dtoa_r+0xb60>
   26c54:	0028f340 	call	28f34 <__multadd>
   26c58:	1021883a 	mov	r16,r2
   26c5c:	a80b883a 	mov	r5,r21
   26c60:	8009883a 	mov	r4,r16
   26c64:	0025efc0 	call	25efc <quorem>
   26c68:	10800c04 	addi	r2,r2,48
   26c6c:	90800005 	stb	r2,0(r18)
   26c70:	94800044 	addi	r18,r18,1
   26c74:	9507c83a 	sub	r3,r18,r20
   26c78:	000f883a 	mov	r7,zero
   26c7c:	01800284 	movi	r6,10
   26c80:	800b883a 	mov	r5,r16
   26c84:	e009883a 	mov	r4,fp
   26c88:	1cfff216 	blt	r3,r19,26c54 <_gp+0xfffe9e34>
   26c8c:	1011883a 	mov	r8,r2
   26c90:	d8800617 	ldw	r2,24(sp)
   26c94:	0082370e 	bge	zero,r2,27574 <_dtoa_r+0x1478>
   26c98:	d9000717 	ldw	r4,28(sp)
   26c9c:	0025883a 	mov	r18,zero
   26ca0:	20af883a 	add	r23,r4,r2
   26ca4:	01800044 	movi	r6,1
   26ca8:	800b883a 	mov	r5,r16
   26cac:	e009883a 	mov	r4,fp
   26cb0:	da001715 	stw	r8,92(sp)
   26cb4:	00295e40 	call	295e4 <__lshift>
   26cb8:	a80b883a 	mov	r5,r21
   26cbc:	1009883a 	mov	r4,r2
   26cc0:	d8800915 	stw	r2,36(sp)
   26cc4:	002972c0 	call	2972c <__mcmp>
   26cc8:	da001717 	ldw	r8,92(sp)
   26ccc:	0081800e 	bge	zero,r2,272d0 <_dtoa_r+0x11d4>
   26cd0:	b93fffc3 	ldbu	r4,-1(r23)
   26cd4:	b8bfffc4 	addi	r2,r23,-1
   26cd8:	1007883a 	mov	r3,r2
   26cdc:	01800e44 	movi	r6,57
   26ce0:	d9c00717 	ldw	r7,28(sp)
   26ce4:	00000506 	br	26cfc <_dtoa_r+0xc00>
   26ce8:	18ffffc4 	addi	r3,r3,-1
   26cec:	11c12326 	beq	r2,r7,2717c <_dtoa_r+0x1080>
   26cf0:	19000003 	ldbu	r4,0(r3)
   26cf4:	102f883a 	mov	r23,r2
   26cf8:	10bfffc4 	addi	r2,r2,-1
   26cfc:	21403fcc 	andi	r5,r4,255
   26d00:	2940201c 	xori	r5,r5,128
   26d04:	297fe004 	addi	r5,r5,-128
   26d08:	29bff726 	beq	r5,r6,26ce8 <_gp+0xfffe9ec8>
   26d0c:	21000044 	addi	r4,r4,1
   26d10:	11000005 	stb	r4,0(r2)
   26d14:	a80b883a 	mov	r5,r21
   26d18:	e009883a 	mov	r4,fp
   26d1c:	0028f0c0 	call	28f0c <_Bfree>
   26d20:	883ea026 	beq	r17,zero,267a4 <_gp+0xfffe9984>
   26d24:	90000426 	beq	r18,zero,26d38 <_dtoa_r+0xc3c>
   26d28:	94400326 	beq	r18,r17,26d38 <_dtoa_r+0xc3c>
   26d2c:	900b883a 	mov	r5,r18
   26d30:	e009883a 	mov	r4,fp
   26d34:	0028f0c0 	call	28f0c <_Bfree>
   26d38:	880b883a 	mov	r5,r17
   26d3c:	e009883a 	mov	r4,fp
   26d40:	0028f0c0 	call	28f0c <_Bfree>
   26d44:	003e9706 	br	267a4 <_gp+0xfffe9984>
   26d48:	01800044 	movi	r6,1
   26d4c:	d9800e15 	stw	r6,56(sp)
   26d50:	003d9606 	br	263ac <_gp+0xfffe958c>
   26d54:	d8800817 	ldw	r2,32(sp)
   26d58:	d8c00517 	ldw	r3,20(sp)
   26d5c:	d8000d15 	stw	zero,52(sp)
   26d60:	10c5c83a 	sub	r2,r2,r3
   26d64:	00c9c83a 	sub	r4,zero,r3
   26d68:	d8800815 	stw	r2,32(sp)
   26d6c:	d9000a15 	stw	r4,40(sp)
   26d70:	003d9706 	br	263d0 <_gp+0xfffe95b0>
   26d74:	05adc83a 	sub	r22,zero,r22
   26d78:	dd800815 	stw	r22,32(sp)
   26d7c:	002d883a 	mov	r22,zero
   26d80:	003d8e06 	br	263bc <_gp+0xfffe959c>
   26d84:	d9000517 	ldw	r4,20(sp)
   26d88:	002f5d40 	call	2f5d4 <__floatsidf>
   26d8c:	100d883a 	mov	r6,r2
   26d90:	180f883a 	mov	r7,r3
   26d94:	a009883a 	mov	r4,r20
   26d98:	880b883a 	mov	r5,r17
   26d9c:	002e2e80 	call	2e2e8 <__eqdf2>
   26da0:	103d7126 	beq	r2,zero,26368 <_gp+0xfffe9548>
   26da4:	d9c00517 	ldw	r7,20(sp)
   26da8:	39ffffc4 	addi	r7,r7,-1
   26dac:	d9c00515 	stw	r7,20(sp)
   26db0:	003d6d06 	br	26368 <_gp+0xfffe9548>
   26db4:	dd400a17 	ldw	r21,40(sp)
   26db8:	dd000817 	ldw	r20,32(sp)
   26dbc:	0023883a 	mov	r17,zero
   26dc0:	003f4806 	br	26ae4 <_gp+0xfffe9cc4>
   26dc4:	10e3c83a 	sub	r17,r2,r3
   26dc8:	9448983a 	sll	r4,r18,r17
   26dcc:	003d3206 	br	26298 <_gp+0xfffe9478>
   26dd0:	d8000e15 	stw	zero,56(sp)
   26dd4:	003d7506 	br	263ac <_gp+0xfffe958c>
   26dd8:	b005883a 	mov	r2,r22
   26ddc:	003f4506 	br	26af4 <_gp+0xfffe9cd4>
   26de0:	dc000915 	stw	r16,36(sp)
   26de4:	d9800a17 	ldw	r6,40(sp)
   26de8:	d9400917 	ldw	r5,36(sp)
   26dec:	e009883a 	mov	r4,fp
   26df0:	00294a40 	call	294a4 <__pow5mult>
   26df4:	1021883a 	mov	r16,r2
   26df8:	003f5a06 	br	26b64 <_gp+0xfffe9d44>
   26dfc:	01c00044 	movi	r7,1
   26e00:	d9c00b15 	stw	r7,44(sp)
   26e04:	d8802217 	ldw	r2,136(sp)
   26e08:	0081280e 	bge	zero,r2,272ac <_dtoa_r+0x11b0>
   26e0c:	100d883a 	mov	r6,r2
   26e10:	1021883a 	mov	r16,r2
   26e14:	d8800c15 	stw	r2,48(sp)
   26e18:	d8800615 	stw	r2,24(sp)
   26e1c:	003d8806 	br	26440 <_gp+0xfffe9620>
   26e20:	d8800617 	ldw	r2,24(sp)
   26e24:	00be9b16 	blt	zero,r2,26894 <_gp+0xfffe9a74>
   26e28:	10010f1e 	bne	r2,zero,27268 <_dtoa_r+0x116c>
   26e2c:	880b883a 	mov	r5,r17
   26e30:	000d883a 	mov	r6,zero
   26e34:	01d00534 	movhi	r7,16404
   26e38:	8009883a 	mov	r4,r16
   26e3c:	002e5400 	call	2e540 <__muldf3>
   26e40:	900d883a 	mov	r6,r18
   26e44:	980f883a 	mov	r7,r19
   26e48:	1009883a 	mov	r4,r2
   26e4c:	180b883a 	mov	r5,r3
   26e50:	002e3700 	call	2e370 <__gedf2>
   26e54:	002b883a 	mov	r21,zero
   26e58:	0023883a 	mov	r17,zero
   26e5c:	1000bf16 	blt	r2,zero,2715c <_dtoa_r+0x1060>
   26e60:	d9802217 	ldw	r6,136(sp)
   26e64:	ddc00717 	ldw	r23,28(sp)
   26e68:	018c303a 	nor	r6,zero,r6
   26e6c:	d9800515 	stw	r6,20(sp)
   26e70:	a80b883a 	mov	r5,r21
   26e74:	e009883a 	mov	r4,fp
   26e78:	0028f0c0 	call	28f0c <_Bfree>
   26e7c:	883e4926 	beq	r17,zero,267a4 <_gp+0xfffe9984>
   26e80:	003fad06 	br	26d38 <_gp+0xfffe9f18>
   26e84:	d9c01117 	ldw	r7,68(sp)
   26e88:	3801bc26 	beq	r7,zero,2757c <_dtoa_r+0x1480>
   26e8c:	10810cc4 	addi	r2,r2,1075
   26e90:	dd400a17 	ldw	r21,40(sp)
   26e94:	dd000817 	ldw	r20,32(sp)
   26e98:	003f0a06 	br	26ac4 <_gp+0xfffe9ca4>
   26e9c:	00800704 	movi	r2,28
   26ea0:	d9000817 	ldw	r4,32(sp)
   26ea4:	a0a9883a 	add	r20,r20,r2
   26ea8:	b0ad883a 	add	r22,r22,r2
   26eac:	2089883a 	add	r4,r4,r2
   26eb0:	d9000815 	stw	r4,32(sp)
   26eb4:	003f5106 	br	26bfc <_gp+0xfffe9ddc>
   26eb8:	d8c00317 	ldw	r3,12(sp)
   26ebc:	b8c1fc0e 	bge	r23,r3,276b0 <_dtoa_r+0x15b4>
   26ec0:	0027883a 	mov	r19,zero
   26ec4:	b805883a 	mov	r2,r23
   26ec8:	003f3e06 	br	26bc4 <_gp+0xfffe9da4>
   26ecc:	880b883a 	mov	r5,r17
   26ed0:	e009883a 	mov	r4,fp
   26ed4:	000f883a 	mov	r7,zero
   26ed8:	01800284 	movi	r6,10
   26edc:	0028f340 	call	28f34 <__multadd>
   26ee0:	d9000c17 	ldw	r4,48(sp)
   26ee4:	1023883a 	mov	r17,r2
   26ee8:	0102040e 	bge	zero,r4,276fc <_dtoa_r+0x1600>
   26eec:	d9000615 	stw	r4,24(sp)
   26ef0:	0500050e 	bge	zero,r20,26f08 <_dtoa_r+0xe0c>
   26ef4:	880b883a 	mov	r5,r17
   26ef8:	a00d883a 	mov	r6,r20
   26efc:	e009883a 	mov	r4,fp
   26f00:	00295e40 	call	295e4 <__lshift>
   26f04:	1023883a 	mov	r17,r2
   26f08:	9801241e 	bne	r19,zero,2739c <_dtoa_r+0x12a0>
   26f0c:	8829883a 	mov	r20,r17
   26f10:	d9000617 	ldw	r4,24(sp)
   26f14:	dcc00717 	ldw	r19,28(sp)
   26f18:	9480004c 	andi	r18,r18,1
   26f1c:	20bfffc4 	addi	r2,r4,-1
   26f20:	9885883a 	add	r2,r19,r2
   26f24:	d8800415 	stw	r2,16(sp)
   26f28:	dc800615 	stw	r18,24(sp)
   26f2c:	a80b883a 	mov	r5,r21
   26f30:	8009883a 	mov	r4,r16
   26f34:	0025efc0 	call	25efc <quorem>
   26f38:	880b883a 	mov	r5,r17
   26f3c:	8009883a 	mov	r4,r16
   26f40:	102f883a 	mov	r23,r2
   26f44:	002972c0 	call	2972c <__mcmp>
   26f48:	a80b883a 	mov	r5,r21
   26f4c:	a00d883a 	mov	r6,r20
   26f50:	e009883a 	mov	r4,fp
   26f54:	102d883a 	mov	r22,r2
   26f58:	002978c0 	call	2978c <__mdiff>
   26f5c:	1007883a 	mov	r3,r2
   26f60:	10800317 	ldw	r2,12(r2)
   26f64:	bc800c04 	addi	r18,r23,48
   26f68:	180b883a 	mov	r5,r3
   26f6c:	10004e1e 	bne	r2,zero,270a8 <_dtoa_r+0xfac>
   26f70:	8009883a 	mov	r4,r16
   26f74:	d8c01615 	stw	r3,88(sp)
   26f78:	002972c0 	call	2972c <__mcmp>
   26f7c:	d8c01617 	ldw	r3,88(sp)
   26f80:	e009883a 	mov	r4,fp
   26f84:	d8801615 	stw	r2,88(sp)
   26f88:	180b883a 	mov	r5,r3
   26f8c:	0028f0c0 	call	28f0c <_Bfree>
   26f90:	d8801617 	ldw	r2,88(sp)
   26f94:	1000041e 	bne	r2,zero,26fa8 <_dtoa_r+0xeac>
   26f98:	d9800317 	ldw	r6,12(sp)
   26f9c:	3000021e 	bne	r6,zero,26fa8 <_dtoa_r+0xeac>
   26fa0:	d8c00617 	ldw	r3,24(sp)
   26fa4:	18003726 	beq	r3,zero,27084 <_dtoa_r+0xf88>
   26fa8:	b0002016 	blt	r22,zero,2702c <_dtoa_r+0xf30>
   26fac:	b000041e 	bne	r22,zero,26fc0 <_dtoa_r+0xec4>
   26fb0:	d9000317 	ldw	r4,12(sp)
   26fb4:	2000021e 	bne	r4,zero,26fc0 <_dtoa_r+0xec4>
   26fb8:	d8c00617 	ldw	r3,24(sp)
   26fbc:	18001b26 	beq	r3,zero,2702c <_dtoa_r+0xf30>
   26fc0:	00810716 	blt	zero,r2,273e0 <_dtoa_r+0x12e4>
   26fc4:	d8c00417 	ldw	r3,16(sp)
   26fc8:	9d800044 	addi	r22,r19,1
   26fcc:	9c800005 	stb	r18,0(r19)
   26fd0:	b02f883a 	mov	r23,r22
   26fd4:	98c10626 	beq	r19,r3,273f0 <_dtoa_r+0x12f4>
   26fd8:	800b883a 	mov	r5,r16
   26fdc:	000f883a 	mov	r7,zero
   26fe0:	01800284 	movi	r6,10
   26fe4:	e009883a 	mov	r4,fp
   26fe8:	0028f340 	call	28f34 <__multadd>
   26fec:	1021883a 	mov	r16,r2
   26ff0:	000f883a 	mov	r7,zero
   26ff4:	01800284 	movi	r6,10
   26ff8:	880b883a 	mov	r5,r17
   26ffc:	e009883a 	mov	r4,fp
   27000:	8d002526 	beq	r17,r20,27098 <_dtoa_r+0xf9c>
   27004:	0028f340 	call	28f34 <__multadd>
   27008:	a00b883a 	mov	r5,r20
   2700c:	000f883a 	mov	r7,zero
   27010:	01800284 	movi	r6,10
   27014:	e009883a 	mov	r4,fp
   27018:	1023883a 	mov	r17,r2
   2701c:	0028f340 	call	28f34 <__multadd>
   27020:	1029883a 	mov	r20,r2
   27024:	b027883a 	mov	r19,r22
   27028:	003fc006 	br	26f2c <_gp+0xfffea10c>
   2702c:	9011883a 	mov	r8,r18
   27030:	00800e0e 	bge	zero,r2,2706c <_dtoa_r+0xf70>
   27034:	800b883a 	mov	r5,r16
   27038:	01800044 	movi	r6,1
   2703c:	e009883a 	mov	r4,fp
   27040:	da001715 	stw	r8,92(sp)
   27044:	00295e40 	call	295e4 <__lshift>
   27048:	a80b883a 	mov	r5,r21
   2704c:	1009883a 	mov	r4,r2
   27050:	1021883a 	mov	r16,r2
   27054:	002972c0 	call	2972c <__mcmp>
   27058:	da001717 	ldw	r8,92(sp)
   2705c:	0081960e 	bge	zero,r2,276b8 <_dtoa_r+0x15bc>
   27060:	00800e44 	movi	r2,57
   27064:	40817026 	beq	r8,r2,27628 <_dtoa_r+0x152c>
   27068:	ba000c44 	addi	r8,r23,49
   2706c:	8825883a 	mov	r18,r17
   27070:	9dc00044 	addi	r23,r19,1
   27074:	9a000005 	stb	r8,0(r19)
   27078:	a023883a 	mov	r17,r20
   2707c:	dc000915 	stw	r16,36(sp)
   27080:	003f2406 	br	26d14 <_gp+0xfffe9ef4>
   27084:	00800e44 	movi	r2,57
   27088:	9011883a 	mov	r8,r18
   2708c:	90816626 	beq	r18,r2,27628 <_dtoa_r+0x152c>
   27090:	05bff516 	blt	zero,r22,27068 <_gp+0xfffea248>
   27094:	003ff506 	br	2706c <_gp+0xfffea24c>
   27098:	0028f340 	call	28f34 <__multadd>
   2709c:	1023883a 	mov	r17,r2
   270a0:	1029883a 	mov	r20,r2
   270a4:	003fdf06 	br	27024 <_gp+0xfffea204>
   270a8:	e009883a 	mov	r4,fp
   270ac:	0028f0c0 	call	28f0c <_Bfree>
   270b0:	00800044 	movi	r2,1
   270b4:	003fbc06 	br	26fa8 <_gp+0xfffea188>
   270b8:	a80b883a 	mov	r5,r21
   270bc:	8009883a 	mov	r4,r16
   270c0:	002972c0 	call	2972c <__mcmp>
   270c4:	103edb0e 	bge	r2,zero,26c34 <_gp+0xfffe9e14>
   270c8:	800b883a 	mov	r5,r16
   270cc:	000f883a 	mov	r7,zero
   270d0:	01800284 	movi	r6,10
   270d4:	e009883a 	mov	r4,fp
   270d8:	0028f340 	call	28f34 <__multadd>
   270dc:	1021883a 	mov	r16,r2
   270e0:	d8800517 	ldw	r2,20(sp)
   270e4:	d8c00b17 	ldw	r3,44(sp)
   270e8:	10bfffc4 	addi	r2,r2,-1
   270ec:	d8800515 	stw	r2,20(sp)
   270f0:	183f761e 	bne	r3,zero,26ecc <_gp+0xfffea0ac>
   270f4:	d9000c17 	ldw	r4,48(sp)
   270f8:	0101730e 	bge	zero,r4,276c8 <_dtoa_r+0x15cc>
   270fc:	d9000615 	stw	r4,24(sp)
   27100:	003ed006 	br	26c44 <_gp+0xfffe9e24>
   27104:	00800084 	movi	r2,2
   27108:	3081861e 	bne	r6,r2,27724 <_dtoa_r+0x1628>
   2710c:	d8000b15 	stw	zero,44(sp)
   27110:	003f3c06 	br	26e04 <_gp+0xfffe9fe4>
   27114:	dc000917 	ldw	r16,36(sp)
   27118:	003e9206 	br	26b64 <_gp+0xfffe9d44>
   2711c:	d9c00317 	ldw	r7,12(sp)
   27120:	00800084 	movi	r2,2
   27124:	11fec50e 	bge	r2,r7,26c3c <_gp+0xfffe9e1c>
   27128:	d9000617 	ldw	r4,24(sp)
   2712c:	20013c1e 	bne	r4,zero,27620 <_dtoa_r+0x1524>
   27130:	a80b883a 	mov	r5,r21
   27134:	000f883a 	mov	r7,zero
   27138:	01800144 	movi	r6,5
   2713c:	e009883a 	mov	r4,fp
   27140:	0028f340 	call	28f34 <__multadd>
   27144:	100b883a 	mov	r5,r2
   27148:	8009883a 	mov	r4,r16
   2714c:	102b883a 	mov	r21,r2
   27150:	002972c0 	call	2972c <__mcmp>
   27154:	dc000915 	stw	r16,36(sp)
   27158:	00bf410e 	bge	zero,r2,26e60 <_gp+0xfffea040>
   2715c:	d9c00717 	ldw	r7,28(sp)
   27160:	00800c44 	movi	r2,49
   27164:	38800005 	stb	r2,0(r7)
   27168:	d8800517 	ldw	r2,20(sp)
   2716c:	3dc00044 	addi	r23,r7,1
   27170:	10800044 	addi	r2,r2,1
   27174:	d8800515 	stw	r2,20(sp)
   27178:	003f3d06 	br	26e70 <_gp+0xfffea050>
   2717c:	d9800517 	ldw	r6,20(sp)
   27180:	d9c00717 	ldw	r7,28(sp)
   27184:	00800c44 	movi	r2,49
   27188:	31800044 	addi	r6,r6,1
   2718c:	d9800515 	stw	r6,20(sp)
   27190:	38800005 	stb	r2,0(r7)
   27194:	003edf06 	br	26d14 <_gp+0xfffe9ef4>
   27198:	d8000b15 	stw	zero,44(sp)
   2719c:	003c9f06 	br	2641c <_gp+0xfffe95fc>
   271a0:	903e7e1e 	bne	r18,zero,26b9c <_gp+0xfffe9d7c>
   271a4:	00800434 	movhi	r2,16
   271a8:	10bfffc4 	addi	r2,r2,-1
   271ac:	9884703a 	and	r2,r19,r2
   271b0:	1000ea1e 	bne	r2,zero,2755c <_dtoa_r+0x1460>
   271b4:	9cdffc2c 	andhi	r19,r19,32752
   271b8:	9800e826 	beq	r19,zero,2755c <_dtoa_r+0x1460>
   271bc:	d9c00817 	ldw	r7,32(sp)
   271c0:	b5800044 	addi	r22,r22,1
   271c4:	04c00044 	movi	r19,1
   271c8:	39c00044 	addi	r7,r7,1
   271cc:	d9c00815 	stw	r7,32(sp)
   271d0:	d8800d17 	ldw	r2,52(sp)
   271d4:	103e721e 	bne	r2,zero,26ba0 <_gp+0xfffe9d80>
   271d8:	00800044 	movi	r2,1
   271dc:	003e7906 	br	26bc4 <_gp+0xfffe9da4>
   271e0:	8009883a 	mov	r4,r16
   271e4:	002f5d40 	call	2f5d4 <__floatsidf>
   271e8:	d9800f17 	ldw	r6,60(sp)
   271ec:	d9c01017 	ldw	r7,64(sp)
   271f0:	1009883a 	mov	r4,r2
   271f4:	180b883a 	mov	r5,r3
   271f8:	002e5400 	call	2e540 <__muldf3>
   271fc:	000d883a 	mov	r6,zero
   27200:	01d00734 	movhi	r7,16412
   27204:	1009883a 	mov	r4,r2
   27208:	180b883a 	mov	r5,r3
   2720c:	002d1540 	call	2d154 <__adddf3>
   27210:	047f3034 	movhi	r17,64704
   27214:	1021883a 	mov	r16,r2
   27218:	1c63883a 	add	r17,r3,r17
   2721c:	d9000f17 	ldw	r4,60(sp)
   27220:	d9401017 	ldw	r5,64(sp)
   27224:	000d883a 	mov	r6,zero
   27228:	01d00534 	movhi	r7,16404
   2722c:	002ec580 	call	2ec58 <__subdf3>
   27230:	800d883a 	mov	r6,r16
   27234:	880f883a 	mov	r7,r17
   27238:	1009883a 	mov	r4,r2
   2723c:	180b883a 	mov	r5,r3
   27240:	102b883a 	mov	r21,r2
   27244:	1829883a 	mov	r20,r3
   27248:	002e3700 	call	2e370 <__gedf2>
   2724c:	00806c16 	blt	zero,r2,27400 <_dtoa_r+0x1304>
   27250:	89e0003c 	xorhi	r7,r17,32768
   27254:	800d883a 	mov	r6,r16
   27258:	a809883a 	mov	r4,r21
   2725c:	a00b883a 	mov	r5,r20
   27260:	002e44c0 	call	2e44c <__ledf2>
   27264:	103d7e0e 	bge	r2,zero,26860 <_gp+0xfffe9a40>
   27268:	002b883a 	mov	r21,zero
   2726c:	0023883a 	mov	r17,zero
   27270:	003efb06 	br	26e60 <_gp+0xfffea040>
   27274:	d8800717 	ldw	r2,28(sp)
   27278:	003bd006 	br	261bc <_gp+0xfffe939c>
   2727c:	d9000a17 	ldw	r4,40(sp)
   27280:	d9800d17 	ldw	r6,52(sp)
   27284:	dd400a15 	stw	r21,40(sp)
   27288:	a905c83a 	sub	r2,r21,r4
   2728c:	308d883a 	add	r6,r6,r2
   27290:	d9800d15 	stw	r6,52(sp)
   27294:	002b883a 	mov	r21,zero
   27298:	003e0606 	br	26ab4 <_gp+0xfffe9c94>
   2729c:	9023883a 	mov	r17,r18
   272a0:	9829883a 	mov	r20,r19
   272a4:	04000084 	movi	r16,2
   272a8:	003c9206 	br	264f4 <_gp+0xfffe96d4>
   272ac:	04000044 	movi	r16,1
   272b0:	dc000c15 	stw	r16,48(sp)
   272b4:	dc000615 	stw	r16,24(sp)
   272b8:	dc002215 	stw	r16,136(sp)
   272bc:	e0001115 	stw	zero,68(fp)
   272c0:	000b883a 	mov	r5,zero
   272c4:	003c6906 	br	2646c <_gp+0xfffe964c>
   272c8:	3021883a 	mov	r16,r6
   272cc:	003ffb06 	br	272bc <_gp+0xfffea49c>
   272d0:	1000021e 	bne	r2,zero,272dc <_dtoa_r+0x11e0>
   272d4:	4200004c 	andi	r8,r8,1
   272d8:	403e7d1e 	bne	r8,zero,26cd0 <_gp+0xfffe9eb0>
   272dc:	01000c04 	movi	r4,48
   272e0:	00000106 	br	272e8 <_dtoa_r+0x11ec>
   272e4:	102f883a 	mov	r23,r2
   272e8:	b8bfffc4 	addi	r2,r23,-1
   272ec:	10c00007 	ldb	r3,0(r2)
   272f0:	193ffc26 	beq	r3,r4,272e4 <_gp+0xfffea4c4>
   272f4:	003e8706 	br	26d14 <_gp+0xfffe9ef4>
   272f8:	d8800517 	ldw	r2,20(sp)
   272fc:	00a3c83a 	sub	r17,zero,r2
   27300:	8800a426 	beq	r17,zero,27594 <_dtoa_r+0x1498>
   27304:	888003cc 	andi	r2,r17,15
   27308:	100490fa 	slli	r2,r2,3
   2730c:	00c000f4 	movhi	r3,3
   27310:	18cc2104 	addi	r3,r3,12420
   27314:	1885883a 	add	r2,r3,r2
   27318:	11800017 	ldw	r6,0(r2)
   2731c:	11c00117 	ldw	r7,4(r2)
   27320:	9009883a 	mov	r4,r18
   27324:	980b883a 	mov	r5,r19
   27328:	8823d13a 	srai	r17,r17,4
   2732c:	002e5400 	call	2e540 <__muldf3>
   27330:	d8800f15 	stw	r2,60(sp)
   27334:	d8c01015 	stw	r3,64(sp)
   27338:	8800e826 	beq	r17,zero,276dc <_dtoa_r+0x15e0>
   2733c:	050000f4 	movhi	r20,3
   27340:	a50c1704 	addi	r20,r20,12380
   27344:	04000084 	movi	r16,2
   27348:	8980004c 	andi	r6,r17,1
   2734c:	1009883a 	mov	r4,r2
   27350:	8823d07a 	srai	r17,r17,1
   27354:	180b883a 	mov	r5,r3
   27358:	30000426 	beq	r6,zero,2736c <_dtoa_r+0x1270>
   2735c:	a1800017 	ldw	r6,0(r20)
   27360:	a1c00117 	ldw	r7,4(r20)
   27364:	84000044 	addi	r16,r16,1
   27368:	002e5400 	call	2e540 <__muldf3>
   2736c:	a5000204 	addi	r20,r20,8
   27370:	883ff51e 	bne	r17,zero,27348 <_gp+0xfffea528>
   27374:	d8800f15 	stw	r2,60(sp)
   27378:	d8c01015 	stw	r3,64(sp)
   2737c:	003c7606 	br	26558 <_gp+0xfffe9738>
   27380:	00c00c04 	movi	r3,48
   27384:	10c00005 	stb	r3,0(r2)
   27388:	d8c00517 	ldw	r3,20(sp)
   2738c:	bd3fffc3 	ldbu	r20,-1(r23)
   27390:	18c00044 	addi	r3,r3,1
   27394:	d8c00515 	stw	r3,20(sp)
   27398:	003db906 	br	26a80 <_gp+0xfffe9c60>
   2739c:	89400117 	ldw	r5,4(r17)
   273a0:	e009883a 	mov	r4,fp
   273a4:	0028e640 	call	28e64 <_Balloc>
   273a8:	89800417 	ldw	r6,16(r17)
   273ac:	89400304 	addi	r5,r17,12
   273b0:	11000304 	addi	r4,r2,12
   273b4:	31800084 	addi	r6,r6,2
   273b8:	318d883a 	add	r6,r6,r6
   273bc:	318d883a 	add	r6,r6,r6
   273c0:	1027883a 	mov	r19,r2
   273c4:	0028bc00 	call	28bc0 <memcpy>
   273c8:	01800044 	movi	r6,1
   273cc:	980b883a 	mov	r5,r19
   273d0:	e009883a 	mov	r4,fp
   273d4:	00295e40 	call	295e4 <__lshift>
   273d8:	1029883a 	mov	r20,r2
   273dc:	003ecc06 	br	26f10 <_gp+0xfffea0f0>
   273e0:	00800e44 	movi	r2,57
   273e4:	90809026 	beq	r18,r2,27628 <_dtoa_r+0x152c>
   273e8:	92000044 	addi	r8,r18,1
   273ec:	003f1f06 	br	2706c <_gp+0xfffea24c>
   273f0:	9011883a 	mov	r8,r18
   273f4:	8825883a 	mov	r18,r17
   273f8:	a023883a 	mov	r17,r20
   273fc:	003e2906 	br	26ca4 <_gp+0xfffe9e84>
   27400:	002b883a 	mov	r21,zero
   27404:	0023883a 	mov	r17,zero
   27408:	003f5406 	br	2715c <_gp+0xfffea33c>
   2740c:	61bfffc4 	addi	r6,r12,-1
   27410:	300490fa 	slli	r2,r6,3
   27414:	00c000f4 	movhi	r3,3
   27418:	18cc2104 	addi	r3,r3,12420
   2741c:	1885883a 	add	r2,r3,r2
   27420:	11000017 	ldw	r4,0(r2)
   27424:	11400117 	ldw	r5,4(r2)
   27428:	d8800717 	ldw	r2,28(sp)
   2742c:	880f883a 	mov	r7,r17
   27430:	d9801215 	stw	r6,72(sp)
   27434:	800d883a 	mov	r6,r16
   27438:	db001615 	stw	r12,88(sp)
   2743c:	15c00044 	addi	r23,r2,1
   27440:	002e5400 	call	2e540 <__muldf3>
   27444:	d9401017 	ldw	r5,64(sp)
   27448:	d9000f17 	ldw	r4,60(sp)
   2744c:	d8c01515 	stw	r3,84(sp)
   27450:	d8801415 	stw	r2,80(sp)
   27454:	002f5540 	call	2f554 <__fixdfsi>
   27458:	1009883a 	mov	r4,r2
   2745c:	1021883a 	mov	r16,r2
   27460:	002f5d40 	call	2f5d4 <__floatsidf>
   27464:	d9000f17 	ldw	r4,60(sp)
   27468:	d9401017 	ldw	r5,64(sp)
   2746c:	100d883a 	mov	r6,r2
   27470:	180f883a 	mov	r7,r3
   27474:	002ec580 	call	2ec58 <__subdf3>
   27478:	1829883a 	mov	r20,r3
   2747c:	d8c00717 	ldw	r3,28(sp)
   27480:	84000c04 	addi	r16,r16,48
   27484:	1023883a 	mov	r17,r2
   27488:	1c000005 	stb	r16,0(r3)
   2748c:	db001617 	ldw	r12,88(sp)
   27490:	00800044 	movi	r2,1
   27494:	60802226 	beq	r12,r2,27520 <_dtoa_r+0x1424>
   27498:	d9c00717 	ldw	r7,28(sp)
   2749c:	8805883a 	mov	r2,r17
   274a0:	b82b883a 	mov	r21,r23
   274a4:	3b19883a 	add	r12,r7,r12
   274a8:	6023883a 	mov	r17,r12
   274ac:	a007883a 	mov	r3,r20
   274b0:	dc800f15 	stw	r18,60(sp)
   274b4:	000d883a 	mov	r6,zero
   274b8:	01d00934 	movhi	r7,16420
   274bc:	1009883a 	mov	r4,r2
   274c0:	180b883a 	mov	r5,r3
   274c4:	002e5400 	call	2e540 <__muldf3>
   274c8:	180b883a 	mov	r5,r3
   274cc:	1009883a 	mov	r4,r2
   274d0:	1829883a 	mov	r20,r3
   274d4:	1025883a 	mov	r18,r2
   274d8:	002f5540 	call	2f554 <__fixdfsi>
   274dc:	1009883a 	mov	r4,r2
   274e0:	1021883a 	mov	r16,r2
   274e4:	002f5d40 	call	2f5d4 <__floatsidf>
   274e8:	100d883a 	mov	r6,r2
   274ec:	180f883a 	mov	r7,r3
   274f0:	9009883a 	mov	r4,r18
   274f4:	a00b883a 	mov	r5,r20
   274f8:	84000c04 	addi	r16,r16,48
   274fc:	002ec580 	call	2ec58 <__subdf3>
   27500:	ad400044 	addi	r21,r21,1
   27504:	ac3fffc5 	stb	r16,-1(r21)
   27508:	ac7fea1e 	bne	r21,r17,274b4 <_gp+0xfffea694>
   2750c:	1023883a 	mov	r17,r2
   27510:	d8801217 	ldw	r2,72(sp)
   27514:	dc800f17 	ldw	r18,60(sp)
   27518:	1829883a 	mov	r20,r3
   2751c:	b8af883a 	add	r23,r23,r2
   27520:	d9001417 	ldw	r4,80(sp)
   27524:	d9401517 	ldw	r5,84(sp)
   27528:	000d883a 	mov	r6,zero
   2752c:	01cff834 	movhi	r7,16352
   27530:	002d1540 	call	2d154 <__adddf3>
   27534:	880d883a 	mov	r6,r17
   27538:	a00f883a 	mov	r7,r20
   2753c:	1009883a 	mov	r4,r2
   27540:	180b883a 	mov	r5,r3
   27544:	002e44c0 	call	2e44c <__ledf2>
   27548:	10003e0e 	bge	r2,zero,27644 <_dtoa_r+0x1548>
   2754c:	d9001317 	ldw	r4,76(sp)
   27550:	bd3fffc3 	ldbu	r20,-1(r23)
   27554:	d9000515 	stw	r4,20(sp)
   27558:	003d3b06 	br	26a48 <_gp+0xfffe9c28>
   2755c:	0027883a 	mov	r19,zero
   27560:	003f1b06 	br	271d0 <_gp+0xfffea3b0>
   27564:	d8800817 	ldw	r2,32(sp)
   27568:	11e9c83a 	sub	r20,r2,r7
   2756c:	0005883a 	mov	r2,zero
   27570:	003d5406 	br	26ac4 <_gp+0xfffe9ca4>
   27574:	00800044 	movi	r2,1
   27578:	003dc706 	br	26c98 <_gp+0xfffe9e78>
   2757c:	d8c00217 	ldw	r3,8(sp)
   27580:	00800d84 	movi	r2,54
   27584:	dd400a17 	ldw	r21,40(sp)
   27588:	10c5c83a 	sub	r2,r2,r3
   2758c:	dd000817 	ldw	r20,32(sp)
   27590:	003d4c06 	br	26ac4 <_gp+0xfffe9ca4>
   27594:	dc800f15 	stw	r18,60(sp)
   27598:	dcc01015 	stw	r19,64(sp)
   2759c:	04000084 	movi	r16,2
   275a0:	003bed06 	br	26558 <_gp+0xfffe9738>
   275a4:	d9000617 	ldw	r4,24(sp)
   275a8:	203f0d26 	beq	r4,zero,271e0 <_gp+0xfffea3c0>
   275ac:	d9800c17 	ldw	r6,48(sp)
   275b0:	01bcab0e 	bge	zero,r6,26860 <_gp+0xfffe9a40>
   275b4:	d9401017 	ldw	r5,64(sp)
   275b8:	d9000f17 	ldw	r4,60(sp)
   275bc:	000d883a 	mov	r6,zero
   275c0:	01d00934 	movhi	r7,16420
   275c4:	002e5400 	call	2e540 <__muldf3>
   275c8:	81000044 	addi	r4,r16,1
   275cc:	d8800f15 	stw	r2,60(sp)
   275d0:	d8c01015 	stw	r3,64(sp)
   275d4:	002f5d40 	call	2f5d4 <__floatsidf>
   275d8:	d9800f17 	ldw	r6,60(sp)
   275dc:	d9c01017 	ldw	r7,64(sp)
   275e0:	1009883a 	mov	r4,r2
   275e4:	180b883a 	mov	r5,r3
   275e8:	002e5400 	call	2e540 <__muldf3>
   275ec:	01d00734 	movhi	r7,16412
   275f0:	000d883a 	mov	r6,zero
   275f4:	1009883a 	mov	r4,r2
   275f8:	180b883a 	mov	r5,r3
   275fc:	002d1540 	call	2d154 <__adddf3>
   27600:	d9c00517 	ldw	r7,20(sp)
   27604:	047f3034 	movhi	r17,64704
   27608:	1021883a 	mov	r16,r2
   2760c:	39ffffc4 	addi	r7,r7,-1
   27610:	d9c01315 	stw	r7,76(sp)
   27614:	1c63883a 	add	r17,r3,r17
   27618:	db000c17 	ldw	r12,48(sp)
   2761c:	003bea06 	br	265c8 <_gp+0xfffe97a8>
   27620:	dc000915 	stw	r16,36(sp)
   27624:	003e0e06 	br	26e60 <_gp+0xfffea040>
   27628:	01000e44 	movi	r4,57
   2762c:	8825883a 	mov	r18,r17
   27630:	9dc00044 	addi	r23,r19,1
   27634:	99000005 	stb	r4,0(r19)
   27638:	a023883a 	mov	r17,r20
   2763c:	dc000915 	stw	r16,36(sp)
   27640:	003da406 	br	26cd4 <_gp+0xfffe9eb4>
   27644:	d9801417 	ldw	r6,80(sp)
   27648:	d9c01517 	ldw	r7,84(sp)
   2764c:	0009883a 	mov	r4,zero
   27650:	014ff834 	movhi	r5,16352
   27654:	002ec580 	call	2ec58 <__subdf3>
   27658:	880d883a 	mov	r6,r17
   2765c:	a00f883a 	mov	r7,r20
   27660:	1009883a 	mov	r4,r2
   27664:	180b883a 	mov	r5,r3
   27668:	002e3700 	call	2e370 <__gedf2>
   2766c:	00bc7c0e 	bge	zero,r2,26860 <_gp+0xfffe9a40>
   27670:	01000c04 	movi	r4,48
   27674:	00000106 	br	2767c <_dtoa_r+0x1580>
   27678:	102f883a 	mov	r23,r2
   2767c:	b8bfffc4 	addi	r2,r23,-1
   27680:	10c00007 	ldb	r3,0(r2)
   27684:	193ffc26 	beq	r3,r4,27678 <_gp+0xfffea858>
   27688:	d9801317 	ldw	r6,76(sp)
   2768c:	d9800515 	stw	r6,20(sp)
   27690:	003c4406 	br	267a4 <_gp+0xfffe9984>
   27694:	d9801317 	ldw	r6,76(sp)
   27698:	d9800515 	stw	r6,20(sp)
   2769c:	003cea06 	br	26a48 <_gp+0xfffe9c28>
   276a0:	dd800f17 	ldw	r22,60(sp)
   276a4:	dcc01017 	ldw	r19,64(sp)
   276a8:	dc801217 	ldw	r18,72(sp)
   276ac:	003c6c06 	br	26860 <_gp+0xfffe9a40>
   276b0:	903e031e 	bne	r18,zero,26ec0 <_gp+0xfffea0a0>
   276b4:	003ebb06 	br	271a4 <_gp+0xfffea384>
   276b8:	103e6c1e 	bne	r2,zero,2706c <_gp+0xfffea24c>
   276bc:	4080004c 	andi	r2,r8,1
   276c0:	103e6a26 	beq	r2,zero,2706c <_gp+0xfffea24c>
   276c4:	003e6606 	br	27060 <_gp+0xfffea240>
   276c8:	d8c00317 	ldw	r3,12(sp)
   276cc:	00800084 	movi	r2,2
   276d0:	10c02916 	blt	r2,r3,27778 <_dtoa_r+0x167c>
   276d4:	d9000c17 	ldw	r4,48(sp)
   276d8:	003e8806 	br	270fc <_gp+0xfffea2dc>
   276dc:	04000084 	movi	r16,2
   276e0:	003b9d06 	br	26558 <_gp+0xfffe9738>
   276e4:	d9001317 	ldw	r4,76(sp)
   276e8:	d9000515 	stw	r4,20(sp)
   276ec:	003cd606 	br	26a48 <_gp+0xfffe9c28>
   276f0:	d8801317 	ldw	r2,76(sp)
   276f4:	d8800515 	stw	r2,20(sp)
   276f8:	003c2a06 	br	267a4 <_gp+0xfffe9984>
   276fc:	d9800317 	ldw	r6,12(sp)
   27700:	00800084 	movi	r2,2
   27704:	11801516 	blt	r2,r6,2775c <_dtoa_r+0x1660>
   27708:	d9c00c17 	ldw	r7,48(sp)
   2770c:	d9c00615 	stw	r7,24(sp)
   27710:	003df706 	br	26ef0 <_gp+0xfffea0d0>
   27714:	193d3926 	beq	r3,r4,26bfc <_gp+0xfffe9ddc>
   27718:	00c00f04 	movi	r3,60
   2771c:	1885c83a 	sub	r2,r3,r2
   27720:	003ddf06 	br	26ea0 <_gp+0xfffea080>
   27724:	e009883a 	mov	r4,fp
   27728:	e0001115 	stw	zero,68(fp)
   2772c:	000b883a 	mov	r5,zero
   27730:	0028e640 	call	28e64 <_Balloc>
   27734:	d8800715 	stw	r2,28(sp)
   27738:	d8c00717 	ldw	r3,28(sp)
   2773c:	00bfffc4 	movi	r2,-1
   27740:	01000044 	movi	r4,1
   27744:	d8800c15 	stw	r2,48(sp)
   27748:	e0c01015 	stw	r3,64(fp)
   2774c:	d9000b15 	stw	r4,44(sp)
   27750:	d8800615 	stw	r2,24(sp)
   27754:	d8002215 	stw	zero,136(sp)
   27758:	003c4106 	br	26860 <_gp+0xfffe9a40>
   2775c:	d8c00c17 	ldw	r3,48(sp)
   27760:	d8c00615 	stw	r3,24(sp)
   27764:	003e7006 	br	27128 <_gp+0xfffea308>
   27768:	04400044 	movi	r17,1
   2776c:	003b2006 	br	263f0 <_gp+0xfffe95d0>
   27770:	000b883a 	mov	r5,zero
   27774:	003b3d06 	br	2646c <_gp+0xfffe964c>
   27778:	d8800c17 	ldw	r2,48(sp)
   2777c:	d8800615 	stw	r2,24(sp)
   27780:	003e6906 	br	27128 <_gp+0xfffea308>

00027784 <__sflush_r>:
   27784:	2880030b 	ldhu	r2,12(r5)
   27788:	defffb04 	addi	sp,sp,-20
   2778c:	dcc00315 	stw	r19,12(sp)
   27790:	dc400115 	stw	r17,4(sp)
   27794:	dfc00415 	stw	ra,16(sp)
   27798:	dc800215 	stw	r18,8(sp)
   2779c:	dc000015 	stw	r16,0(sp)
   277a0:	10c0020c 	andi	r3,r2,8
   277a4:	2823883a 	mov	r17,r5
   277a8:	2027883a 	mov	r19,r4
   277ac:	1800311e 	bne	r3,zero,27874 <__sflush_r+0xf0>
   277b0:	28c00117 	ldw	r3,4(r5)
   277b4:	10820014 	ori	r2,r2,2048
   277b8:	2880030d 	sth	r2,12(r5)
   277bc:	00c04b0e 	bge	zero,r3,278ec <__sflush_r+0x168>
   277c0:	8a000a17 	ldw	r8,40(r17)
   277c4:	40002326 	beq	r8,zero,27854 <__sflush_r+0xd0>
   277c8:	9c000017 	ldw	r16,0(r19)
   277cc:	10c4000c 	andi	r3,r2,4096
   277d0:	98000015 	stw	zero,0(r19)
   277d4:	18004826 	beq	r3,zero,278f8 <__sflush_r+0x174>
   277d8:	89801417 	ldw	r6,80(r17)
   277dc:	10c0010c 	andi	r3,r2,4
   277e0:	18000626 	beq	r3,zero,277fc <__sflush_r+0x78>
   277e4:	88c00117 	ldw	r3,4(r17)
   277e8:	88800c17 	ldw	r2,48(r17)
   277ec:	30cdc83a 	sub	r6,r6,r3
   277f0:	10000226 	beq	r2,zero,277fc <__sflush_r+0x78>
   277f4:	88800f17 	ldw	r2,60(r17)
   277f8:	308dc83a 	sub	r6,r6,r2
   277fc:	89400717 	ldw	r5,28(r17)
   27800:	000f883a 	mov	r7,zero
   27804:	9809883a 	mov	r4,r19
   27808:	403ee83a 	callr	r8
   2780c:	00ffffc4 	movi	r3,-1
   27810:	10c04426 	beq	r2,r3,27924 <__sflush_r+0x1a0>
   27814:	88c0030b 	ldhu	r3,12(r17)
   27818:	89000417 	ldw	r4,16(r17)
   2781c:	88000115 	stw	zero,4(r17)
   27820:	197dffcc 	andi	r5,r3,63487
   27824:	8940030d 	sth	r5,12(r17)
   27828:	89000015 	stw	r4,0(r17)
   2782c:	18c4000c 	andi	r3,r3,4096
   27830:	18002c1e 	bne	r3,zero,278e4 <__sflush_r+0x160>
   27834:	89400c17 	ldw	r5,48(r17)
   27838:	9c000015 	stw	r16,0(r19)
   2783c:	28000526 	beq	r5,zero,27854 <__sflush_r+0xd0>
   27840:	88801004 	addi	r2,r17,64
   27844:	28800226 	beq	r5,r2,27850 <__sflush_r+0xcc>
   27848:	9809883a 	mov	r4,r19
   2784c:	0027ef00 	call	27ef0 <_free_r>
   27850:	88000c15 	stw	zero,48(r17)
   27854:	0005883a 	mov	r2,zero
   27858:	dfc00417 	ldw	ra,16(sp)
   2785c:	dcc00317 	ldw	r19,12(sp)
   27860:	dc800217 	ldw	r18,8(sp)
   27864:	dc400117 	ldw	r17,4(sp)
   27868:	dc000017 	ldw	r16,0(sp)
   2786c:	dec00504 	addi	sp,sp,20
   27870:	f800283a 	ret
   27874:	2c800417 	ldw	r18,16(r5)
   27878:	903ff626 	beq	r18,zero,27854 <_gp+0xfffeaa34>
   2787c:	2c000017 	ldw	r16,0(r5)
   27880:	108000cc 	andi	r2,r2,3
   27884:	2c800015 	stw	r18,0(r5)
   27888:	84a1c83a 	sub	r16,r16,r18
   2788c:	1000131e 	bne	r2,zero,278dc <__sflush_r+0x158>
   27890:	28800517 	ldw	r2,20(r5)
   27894:	88800215 	stw	r2,8(r17)
   27898:	04000316 	blt	zero,r16,278a8 <__sflush_r+0x124>
   2789c:	003fed06 	br	27854 <_gp+0xfffeaa34>
   278a0:	90a5883a 	add	r18,r18,r2
   278a4:	043feb0e 	bge	zero,r16,27854 <_gp+0xfffeaa34>
   278a8:	88800917 	ldw	r2,36(r17)
   278ac:	89400717 	ldw	r5,28(r17)
   278b0:	800f883a 	mov	r7,r16
   278b4:	900d883a 	mov	r6,r18
   278b8:	9809883a 	mov	r4,r19
   278bc:	103ee83a 	callr	r2
   278c0:	80a1c83a 	sub	r16,r16,r2
   278c4:	00bff616 	blt	zero,r2,278a0 <_gp+0xfffeaa80>
   278c8:	88c0030b 	ldhu	r3,12(r17)
   278cc:	00bfffc4 	movi	r2,-1
   278d0:	18c01014 	ori	r3,r3,64
   278d4:	88c0030d 	sth	r3,12(r17)
   278d8:	003fdf06 	br	27858 <_gp+0xfffeaa38>
   278dc:	0005883a 	mov	r2,zero
   278e0:	003fec06 	br	27894 <_gp+0xfffeaa74>
   278e4:	88801415 	stw	r2,80(r17)
   278e8:	003fd206 	br	27834 <_gp+0xfffeaa14>
   278ec:	28c00f17 	ldw	r3,60(r5)
   278f0:	00ffb316 	blt	zero,r3,277c0 <_gp+0xfffea9a0>
   278f4:	003fd706 	br	27854 <_gp+0xfffeaa34>
   278f8:	89400717 	ldw	r5,28(r17)
   278fc:	000d883a 	mov	r6,zero
   27900:	01c00044 	movi	r7,1
   27904:	9809883a 	mov	r4,r19
   27908:	403ee83a 	callr	r8
   2790c:	100d883a 	mov	r6,r2
   27910:	00bfffc4 	movi	r2,-1
   27914:	30801426 	beq	r6,r2,27968 <__sflush_r+0x1e4>
   27918:	8880030b 	ldhu	r2,12(r17)
   2791c:	8a000a17 	ldw	r8,40(r17)
   27920:	003fae06 	br	277dc <_gp+0xfffea9bc>
   27924:	98c00017 	ldw	r3,0(r19)
   27928:	183fba26 	beq	r3,zero,27814 <_gp+0xfffea9f4>
   2792c:	01000744 	movi	r4,29
   27930:	19000626 	beq	r3,r4,2794c <__sflush_r+0x1c8>
   27934:	01000584 	movi	r4,22
   27938:	19000426 	beq	r3,r4,2794c <__sflush_r+0x1c8>
   2793c:	88c0030b 	ldhu	r3,12(r17)
   27940:	18c01014 	ori	r3,r3,64
   27944:	88c0030d 	sth	r3,12(r17)
   27948:	003fc306 	br	27858 <_gp+0xfffeaa38>
   2794c:	8880030b 	ldhu	r2,12(r17)
   27950:	88c00417 	ldw	r3,16(r17)
   27954:	88000115 	stw	zero,4(r17)
   27958:	10bdffcc 	andi	r2,r2,63487
   2795c:	8880030d 	sth	r2,12(r17)
   27960:	88c00015 	stw	r3,0(r17)
   27964:	003fb306 	br	27834 <_gp+0xfffeaa14>
   27968:	98800017 	ldw	r2,0(r19)
   2796c:	103fea26 	beq	r2,zero,27918 <_gp+0xfffeaaf8>
   27970:	00c00744 	movi	r3,29
   27974:	10c00226 	beq	r2,r3,27980 <__sflush_r+0x1fc>
   27978:	00c00584 	movi	r3,22
   2797c:	10c0031e 	bne	r2,r3,2798c <__sflush_r+0x208>
   27980:	9c000015 	stw	r16,0(r19)
   27984:	0005883a 	mov	r2,zero
   27988:	003fb306 	br	27858 <_gp+0xfffeaa38>
   2798c:	88c0030b 	ldhu	r3,12(r17)
   27990:	3005883a 	mov	r2,r6
   27994:	18c01014 	ori	r3,r3,64
   27998:	88c0030d 	sth	r3,12(r17)
   2799c:	003fae06 	br	27858 <_gp+0xfffeaa38>

000279a0 <_fflush_r>:
   279a0:	defffd04 	addi	sp,sp,-12
   279a4:	dc000115 	stw	r16,4(sp)
   279a8:	dfc00215 	stw	ra,8(sp)
   279ac:	2021883a 	mov	r16,r4
   279b0:	20000226 	beq	r4,zero,279bc <_fflush_r+0x1c>
   279b4:	20800e17 	ldw	r2,56(r4)
   279b8:	10000c26 	beq	r2,zero,279ec <_fflush_r+0x4c>
   279bc:	2880030f 	ldh	r2,12(r5)
   279c0:	1000051e 	bne	r2,zero,279d8 <_fflush_r+0x38>
   279c4:	0005883a 	mov	r2,zero
   279c8:	dfc00217 	ldw	ra,8(sp)
   279cc:	dc000117 	ldw	r16,4(sp)
   279d0:	dec00304 	addi	sp,sp,12
   279d4:	f800283a 	ret
   279d8:	8009883a 	mov	r4,r16
   279dc:	dfc00217 	ldw	ra,8(sp)
   279e0:	dc000117 	ldw	r16,4(sp)
   279e4:	dec00304 	addi	sp,sp,12
   279e8:	00277841 	jmpi	27784 <__sflush_r>
   279ec:	d9400015 	stw	r5,0(sp)
   279f0:	0027d7c0 	call	27d7c <__sinit>
   279f4:	d9400017 	ldw	r5,0(sp)
   279f8:	003ff006 	br	279bc <_gp+0xfffeab9c>

000279fc <fflush>:
   279fc:	20000526 	beq	r4,zero,27a14 <fflush+0x18>
   27a00:	008000f4 	movhi	r2,3
   27a04:	10939904 	addi	r2,r2,20068
   27a08:	200b883a 	mov	r5,r4
   27a0c:	11000017 	ldw	r4,0(r2)
   27a10:	00279a01 	jmpi	279a0 <_fflush_r>
   27a14:	008000f4 	movhi	r2,3
   27a18:	10939804 	addi	r2,r2,20064
   27a1c:	11000017 	ldw	r4,0(r2)
   27a20:	014000b4 	movhi	r5,2
   27a24:	295e6804 	addi	r5,r5,31136
   27a28:	00287801 	jmpi	28780 <_fwalk_reent>

00027a2c <__fp_unlock>:
   27a2c:	0005883a 	mov	r2,zero
   27a30:	f800283a 	ret

00027a34 <_cleanup_r>:
   27a34:	014000f4 	movhi	r5,3
   27a38:	296f4d04 	addi	r5,r5,-17100
   27a3c:	00287801 	jmpi	28780 <_fwalk_reent>

00027a40 <__sinit.part.1>:
   27a40:	defff704 	addi	sp,sp,-36
   27a44:	00c000b4 	movhi	r3,2
   27a48:	dfc00815 	stw	ra,32(sp)
   27a4c:	ddc00715 	stw	r23,28(sp)
   27a50:	dd800615 	stw	r22,24(sp)
   27a54:	dd400515 	stw	r21,20(sp)
   27a58:	dd000415 	stw	r20,16(sp)
   27a5c:	dcc00315 	stw	r19,12(sp)
   27a60:	dc800215 	stw	r18,8(sp)
   27a64:	dc400115 	stw	r17,4(sp)
   27a68:	dc000015 	stw	r16,0(sp)
   27a6c:	18de8d04 	addi	r3,r3,31284
   27a70:	24000117 	ldw	r16,4(r4)
   27a74:	20c00f15 	stw	r3,60(r4)
   27a78:	2080bb04 	addi	r2,r4,748
   27a7c:	00c000c4 	movi	r3,3
   27a80:	20c0b915 	stw	r3,740(r4)
   27a84:	2080ba15 	stw	r2,744(r4)
   27a88:	2000b815 	stw	zero,736(r4)
   27a8c:	05c00204 	movi	r23,8
   27a90:	00800104 	movi	r2,4
   27a94:	2025883a 	mov	r18,r4
   27a98:	b80d883a 	mov	r6,r23
   27a9c:	81001704 	addi	r4,r16,92
   27aa0:	000b883a 	mov	r5,zero
   27aa4:	80000015 	stw	zero,0(r16)
   27aa8:	80000115 	stw	zero,4(r16)
   27aac:	80000215 	stw	zero,8(r16)
   27ab0:	8080030d 	sth	r2,12(r16)
   27ab4:	80001915 	stw	zero,100(r16)
   27ab8:	8000038d 	sth	zero,14(r16)
   27abc:	80000415 	stw	zero,16(r16)
   27ac0:	80000515 	stw	zero,20(r16)
   27ac4:	80000615 	stw	zero,24(r16)
   27ac8:	00233a40 	call	233a4 <memset>
   27acc:	058000f4 	movhi	r22,3
   27ad0:	94400217 	ldw	r17,8(r18)
   27ad4:	054000f4 	movhi	r21,3
   27ad8:	050000f4 	movhi	r20,3
   27adc:	04c000f4 	movhi	r19,3
   27ae0:	b5a90e04 	addi	r22,r22,-23496
   27ae4:	ad692504 	addi	r21,r21,-23404
   27ae8:	a5294404 	addi	r20,r20,-23280
   27aec:	9ce95b04 	addi	r19,r19,-23188
   27af0:	85800815 	stw	r22,32(r16)
   27af4:	85400915 	stw	r21,36(r16)
   27af8:	85000a15 	stw	r20,40(r16)
   27afc:	84c00b15 	stw	r19,44(r16)
   27b00:	84000715 	stw	r16,28(r16)
   27b04:	00800284 	movi	r2,10
   27b08:	8880030d 	sth	r2,12(r17)
   27b0c:	00800044 	movi	r2,1
   27b10:	b80d883a 	mov	r6,r23
   27b14:	89001704 	addi	r4,r17,92
   27b18:	000b883a 	mov	r5,zero
   27b1c:	88000015 	stw	zero,0(r17)
   27b20:	88000115 	stw	zero,4(r17)
   27b24:	88000215 	stw	zero,8(r17)
   27b28:	88001915 	stw	zero,100(r17)
   27b2c:	8880038d 	sth	r2,14(r17)
   27b30:	88000415 	stw	zero,16(r17)
   27b34:	88000515 	stw	zero,20(r17)
   27b38:	88000615 	stw	zero,24(r17)
   27b3c:	00233a40 	call	233a4 <memset>
   27b40:	94000317 	ldw	r16,12(r18)
   27b44:	00800484 	movi	r2,18
   27b48:	8c400715 	stw	r17,28(r17)
   27b4c:	8d800815 	stw	r22,32(r17)
   27b50:	8d400915 	stw	r21,36(r17)
   27b54:	8d000a15 	stw	r20,40(r17)
   27b58:	8cc00b15 	stw	r19,44(r17)
   27b5c:	8080030d 	sth	r2,12(r16)
   27b60:	00800084 	movi	r2,2
   27b64:	80000015 	stw	zero,0(r16)
   27b68:	80000115 	stw	zero,4(r16)
   27b6c:	80000215 	stw	zero,8(r16)
   27b70:	80001915 	stw	zero,100(r16)
   27b74:	8080038d 	sth	r2,14(r16)
   27b78:	80000415 	stw	zero,16(r16)
   27b7c:	80000515 	stw	zero,20(r16)
   27b80:	80000615 	stw	zero,24(r16)
   27b84:	b80d883a 	mov	r6,r23
   27b88:	000b883a 	mov	r5,zero
   27b8c:	81001704 	addi	r4,r16,92
   27b90:	00233a40 	call	233a4 <memset>
   27b94:	00800044 	movi	r2,1
   27b98:	84000715 	stw	r16,28(r16)
   27b9c:	85800815 	stw	r22,32(r16)
   27ba0:	85400915 	stw	r21,36(r16)
   27ba4:	85000a15 	stw	r20,40(r16)
   27ba8:	84c00b15 	stw	r19,44(r16)
   27bac:	90800e15 	stw	r2,56(r18)
   27bb0:	dfc00817 	ldw	ra,32(sp)
   27bb4:	ddc00717 	ldw	r23,28(sp)
   27bb8:	dd800617 	ldw	r22,24(sp)
   27bbc:	dd400517 	ldw	r21,20(sp)
   27bc0:	dd000417 	ldw	r20,16(sp)
   27bc4:	dcc00317 	ldw	r19,12(sp)
   27bc8:	dc800217 	ldw	r18,8(sp)
   27bcc:	dc400117 	ldw	r17,4(sp)
   27bd0:	dc000017 	ldw	r16,0(sp)
   27bd4:	dec00904 	addi	sp,sp,36
   27bd8:	f800283a 	ret

00027bdc <__fp_lock>:
   27bdc:	0005883a 	mov	r2,zero
   27be0:	f800283a 	ret

00027be4 <__sfmoreglue>:
   27be4:	defffc04 	addi	sp,sp,-16
   27be8:	dc400115 	stw	r17,4(sp)
   27bec:	2c7fffc4 	addi	r17,r5,-1
   27bf0:	8c401a24 	muli	r17,r17,104
   27bf4:	dc800215 	stw	r18,8(sp)
   27bf8:	2825883a 	mov	r18,r5
   27bfc:	89401d04 	addi	r5,r17,116
   27c00:	dc000015 	stw	r16,0(sp)
   27c04:	dfc00315 	stw	ra,12(sp)
   27c08:	0022b980 	call	22b98 <_malloc_r>
   27c0c:	1021883a 	mov	r16,r2
   27c10:	10000726 	beq	r2,zero,27c30 <__sfmoreglue+0x4c>
   27c14:	11000304 	addi	r4,r2,12
   27c18:	10000015 	stw	zero,0(r2)
   27c1c:	14800115 	stw	r18,4(r2)
   27c20:	11000215 	stw	r4,8(r2)
   27c24:	89801a04 	addi	r6,r17,104
   27c28:	000b883a 	mov	r5,zero
   27c2c:	00233a40 	call	233a4 <memset>
   27c30:	8005883a 	mov	r2,r16
   27c34:	dfc00317 	ldw	ra,12(sp)
   27c38:	dc800217 	ldw	r18,8(sp)
   27c3c:	dc400117 	ldw	r17,4(sp)
   27c40:	dc000017 	ldw	r16,0(sp)
   27c44:	dec00404 	addi	sp,sp,16
   27c48:	f800283a 	ret

00027c4c <__sfp>:
   27c4c:	defffb04 	addi	sp,sp,-20
   27c50:	dc000015 	stw	r16,0(sp)
   27c54:	040000f4 	movhi	r16,3
   27c58:	84139804 	addi	r16,r16,20064
   27c5c:	dcc00315 	stw	r19,12(sp)
   27c60:	2027883a 	mov	r19,r4
   27c64:	81000017 	ldw	r4,0(r16)
   27c68:	dfc00415 	stw	ra,16(sp)
   27c6c:	dc800215 	stw	r18,8(sp)
   27c70:	20800e17 	ldw	r2,56(r4)
   27c74:	dc400115 	stw	r17,4(sp)
   27c78:	1000021e 	bne	r2,zero,27c84 <__sfp+0x38>
   27c7c:	0027a400 	call	27a40 <__sinit.part.1>
   27c80:	81000017 	ldw	r4,0(r16)
   27c84:	2480b804 	addi	r18,r4,736
   27c88:	047fffc4 	movi	r17,-1
   27c8c:	91000117 	ldw	r4,4(r18)
   27c90:	94000217 	ldw	r16,8(r18)
   27c94:	213fffc4 	addi	r4,r4,-1
   27c98:	20000a16 	blt	r4,zero,27cc4 <__sfp+0x78>
   27c9c:	8080030f 	ldh	r2,12(r16)
   27ca0:	10000c26 	beq	r2,zero,27cd4 <__sfp+0x88>
   27ca4:	80c01d04 	addi	r3,r16,116
   27ca8:	00000206 	br	27cb4 <__sfp+0x68>
   27cac:	18bfe60f 	ldh	r2,-104(r3)
   27cb0:	10000826 	beq	r2,zero,27cd4 <__sfp+0x88>
   27cb4:	213fffc4 	addi	r4,r4,-1
   27cb8:	1c3ffd04 	addi	r16,r3,-12
   27cbc:	18c01a04 	addi	r3,r3,104
   27cc0:	247ffa1e 	bne	r4,r17,27cac <_gp+0xfffeae8c>
   27cc4:	90800017 	ldw	r2,0(r18)
   27cc8:	10001d26 	beq	r2,zero,27d40 <__sfp+0xf4>
   27ccc:	1025883a 	mov	r18,r2
   27cd0:	003fee06 	br	27c8c <_gp+0xfffeae6c>
   27cd4:	00bfffc4 	movi	r2,-1
   27cd8:	8080038d 	sth	r2,14(r16)
   27cdc:	00800044 	movi	r2,1
   27ce0:	8080030d 	sth	r2,12(r16)
   27ce4:	80001915 	stw	zero,100(r16)
   27ce8:	80000015 	stw	zero,0(r16)
   27cec:	80000215 	stw	zero,8(r16)
   27cf0:	80000115 	stw	zero,4(r16)
   27cf4:	80000415 	stw	zero,16(r16)
   27cf8:	80000515 	stw	zero,20(r16)
   27cfc:	80000615 	stw	zero,24(r16)
   27d00:	01800204 	movi	r6,8
   27d04:	000b883a 	mov	r5,zero
   27d08:	81001704 	addi	r4,r16,92
   27d0c:	00233a40 	call	233a4 <memset>
   27d10:	8005883a 	mov	r2,r16
   27d14:	80000c15 	stw	zero,48(r16)
   27d18:	80000d15 	stw	zero,52(r16)
   27d1c:	80001115 	stw	zero,68(r16)
   27d20:	80001215 	stw	zero,72(r16)
   27d24:	dfc00417 	ldw	ra,16(sp)
   27d28:	dcc00317 	ldw	r19,12(sp)
   27d2c:	dc800217 	ldw	r18,8(sp)
   27d30:	dc400117 	ldw	r17,4(sp)
   27d34:	dc000017 	ldw	r16,0(sp)
   27d38:	dec00504 	addi	sp,sp,20
   27d3c:	f800283a 	ret
   27d40:	01400104 	movi	r5,4
   27d44:	9809883a 	mov	r4,r19
   27d48:	0027be40 	call	27be4 <__sfmoreglue>
   27d4c:	90800015 	stw	r2,0(r18)
   27d50:	103fde1e 	bne	r2,zero,27ccc <_gp+0xfffeaeac>
   27d54:	00800304 	movi	r2,12
   27d58:	98800015 	stw	r2,0(r19)
   27d5c:	0005883a 	mov	r2,zero
   27d60:	003ff006 	br	27d24 <_gp+0xfffeaf04>

00027d64 <_cleanup>:
   27d64:	008000f4 	movhi	r2,3
   27d68:	10939804 	addi	r2,r2,20064
   27d6c:	11000017 	ldw	r4,0(r2)
   27d70:	014000f4 	movhi	r5,3
   27d74:	296f4d04 	addi	r5,r5,-17100
   27d78:	00287801 	jmpi	28780 <_fwalk_reent>

00027d7c <__sinit>:
   27d7c:	20800e17 	ldw	r2,56(r4)
   27d80:	10000126 	beq	r2,zero,27d88 <__sinit+0xc>
   27d84:	f800283a 	ret
   27d88:	0027a401 	jmpi	27a40 <__sinit.part.1>

00027d8c <__sfp_lock_acquire>:
   27d8c:	f800283a 	ret

00027d90 <__sfp_lock_release>:
   27d90:	f800283a 	ret

00027d94 <__sinit_lock_acquire>:
   27d94:	f800283a 	ret

00027d98 <__sinit_lock_release>:
   27d98:	f800283a 	ret

00027d9c <__fp_lock_all>:
   27d9c:	008000f4 	movhi	r2,3
   27da0:	10939904 	addi	r2,r2,20068
   27da4:	11000017 	ldw	r4,0(r2)
   27da8:	014000b4 	movhi	r5,2
   27dac:	295ef704 	addi	r5,r5,31708
   27db0:	00286bc1 	jmpi	286bc <_fwalk>

00027db4 <__fp_unlock_all>:
   27db4:	008000f4 	movhi	r2,3
   27db8:	10939904 	addi	r2,r2,20068
   27dbc:	11000017 	ldw	r4,0(r2)
   27dc0:	014000b4 	movhi	r5,2
   27dc4:	295e8b04 	addi	r5,r5,31276
   27dc8:	00286bc1 	jmpi	286bc <_fwalk>

00027dcc <_malloc_trim_r>:
   27dcc:	defffb04 	addi	sp,sp,-20
   27dd0:	dcc00315 	stw	r19,12(sp)
   27dd4:	04c000f4 	movhi	r19,3
   27dd8:	dc800215 	stw	r18,8(sp)
   27ddc:	dc400115 	stw	r17,4(sp)
   27de0:	dc000015 	stw	r16,0(sp)
   27de4:	dfc00415 	stw	ra,16(sp)
   27de8:	2821883a 	mov	r16,r5
   27dec:	9cccac04 	addi	r19,r19,12976
   27df0:	2025883a 	mov	r18,r4
   27df4:	00300540 	call	30054 <__malloc_lock>
   27df8:	98800217 	ldw	r2,8(r19)
   27dfc:	14400117 	ldw	r17,4(r2)
   27e00:	00bfff04 	movi	r2,-4
   27e04:	88a2703a 	and	r17,r17,r2
   27e08:	8c21c83a 	sub	r16,r17,r16
   27e0c:	8403fbc4 	addi	r16,r16,4079
   27e10:	8020d33a 	srli	r16,r16,12
   27e14:	0083ffc4 	movi	r2,4095
   27e18:	843fffc4 	addi	r16,r16,-1
   27e1c:	8020933a 	slli	r16,r16,12
   27e20:	1400060e 	bge	r2,r16,27e3c <_malloc_trim_r+0x70>
   27e24:	000b883a 	mov	r5,zero
   27e28:	9009883a 	mov	r4,r18
   27e2c:	002360c0 	call	2360c <_sbrk_r>
   27e30:	98c00217 	ldw	r3,8(r19)
   27e34:	1c47883a 	add	r3,r3,r17
   27e38:	10c00a26 	beq	r2,r3,27e64 <_malloc_trim_r+0x98>
   27e3c:	9009883a 	mov	r4,r18
   27e40:	00300780 	call	30078 <__malloc_unlock>
   27e44:	0005883a 	mov	r2,zero
   27e48:	dfc00417 	ldw	ra,16(sp)
   27e4c:	dcc00317 	ldw	r19,12(sp)
   27e50:	dc800217 	ldw	r18,8(sp)
   27e54:	dc400117 	ldw	r17,4(sp)
   27e58:	dc000017 	ldw	r16,0(sp)
   27e5c:	dec00504 	addi	sp,sp,20
   27e60:	f800283a 	ret
   27e64:	040bc83a 	sub	r5,zero,r16
   27e68:	9009883a 	mov	r4,r18
   27e6c:	002360c0 	call	2360c <_sbrk_r>
   27e70:	00ffffc4 	movi	r3,-1
   27e74:	10c00d26 	beq	r2,r3,27eac <_malloc_trim_r+0xe0>
   27e78:	00c000f4 	movhi	r3,3
   27e7c:	18dab504 	addi	r3,r3,27348
   27e80:	18800017 	ldw	r2,0(r3)
   27e84:	99000217 	ldw	r4,8(r19)
   27e88:	8c23c83a 	sub	r17,r17,r16
   27e8c:	8c400054 	ori	r17,r17,1
   27e90:	1421c83a 	sub	r16,r2,r16
   27e94:	24400115 	stw	r17,4(r4)
   27e98:	9009883a 	mov	r4,r18
   27e9c:	1c000015 	stw	r16,0(r3)
   27ea0:	00300780 	call	30078 <__malloc_unlock>
   27ea4:	00800044 	movi	r2,1
   27ea8:	003fe706 	br	27e48 <_gp+0xfffeb028>
   27eac:	000b883a 	mov	r5,zero
   27eb0:	9009883a 	mov	r4,r18
   27eb4:	002360c0 	call	2360c <_sbrk_r>
   27eb8:	99000217 	ldw	r4,8(r19)
   27ebc:	014003c4 	movi	r5,15
   27ec0:	1107c83a 	sub	r3,r2,r4
   27ec4:	28ffdd0e 	bge	r5,r3,27e3c <_gp+0xfffeb01c>
   27ec8:	014000f4 	movhi	r5,3
   27ecc:	29539604 	addi	r5,r5,20056
   27ed0:	29400017 	ldw	r5,0(r5)
   27ed4:	18c00054 	ori	r3,r3,1
   27ed8:	20c00115 	stw	r3,4(r4)
   27edc:	00c000f4 	movhi	r3,3
   27ee0:	1145c83a 	sub	r2,r2,r5
   27ee4:	18dab504 	addi	r3,r3,27348
   27ee8:	18800015 	stw	r2,0(r3)
   27eec:	003fd306 	br	27e3c <_gp+0xfffeb01c>

00027ef0 <_free_r>:
   27ef0:	28004126 	beq	r5,zero,27ff8 <_free_r+0x108>
   27ef4:	defffd04 	addi	sp,sp,-12
   27ef8:	dc400115 	stw	r17,4(sp)
   27efc:	dc000015 	stw	r16,0(sp)
   27f00:	2023883a 	mov	r17,r4
   27f04:	2821883a 	mov	r16,r5
   27f08:	dfc00215 	stw	ra,8(sp)
   27f0c:	00300540 	call	30054 <__malloc_lock>
   27f10:	81ffff17 	ldw	r7,-4(r16)
   27f14:	00bfff84 	movi	r2,-2
   27f18:	010000f4 	movhi	r4,3
   27f1c:	81bffe04 	addi	r6,r16,-8
   27f20:	3884703a 	and	r2,r7,r2
   27f24:	210cac04 	addi	r4,r4,12976
   27f28:	308b883a 	add	r5,r6,r2
   27f2c:	2a400117 	ldw	r9,4(r5)
   27f30:	22000217 	ldw	r8,8(r4)
   27f34:	00ffff04 	movi	r3,-4
   27f38:	48c6703a 	and	r3,r9,r3
   27f3c:	2a005726 	beq	r5,r8,2809c <_free_r+0x1ac>
   27f40:	28c00115 	stw	r3,4(r5)
   27f44:	39c0004c 	andi	r7,r7,1
   27f48:	3800091e 	bne	r7,zero,27f70 <_free_r+0x80>
   27f4c:	823ffe17 	ldw	r8,-8(r16)
   27f50:	22400204 	addi	r9,r4,8
   27f54:	320dc83a 	sub	r6,r6,r8
   27f58:	31c00217 	ldw	r7,8(r6)
   27f5c:	1205883a 	add	r2,r2,r8
   27f60:	3a406526 	beq	r7,r9,280f8 <_free_r+0x208>
   27f64:	32000317 	ldw	r8,12(r6)
   27f68:	3a000315 	stw	r8,12(r7)
   27f6c:	41c00215 	stw	r7,8(r8)
   27f70:	28cf883a 	add	r7,r5,r3
   27f74:	39c00117 	ldw	r7,4(r7)
   27f78:	39c0004c 	andi	r7,r7,1
   27f7c:	38003a26 	beq	r7,zero,28068 <_free_r+0x178>
   27f80:	10c00054 	ori	r3,r2,1
   27f84:	30c00115 	stw	r3,4(r6)
   27f88:	3087883a 	add	r3,r6,r2
   27f8c:	18800015 	stw	r2,0(r3)
   27f90:	00c07fc4 	movi	r3,511
   27f94:	18801936 	bltu	r3,r2,27ffc <_free_r+0x10c>
   27f98:	1004d0fa 	srli	r2,r2,3
   27f9c:	01c00044 	movi	r7,1
   27fa0:	21400117 	ldw	r5,4(r4)
   27fa4:	10c00044 	addi	r3,r2,1
   27fa8:	18c7883a 	add	r3,r3,r3
   27fac:	1005d0ba 	srai	r2,r2,2
   27fb0:	18c7883a 	add	r3,r3,r3
   27fb4:	18c7883a 	add	r3,r3,r3
   27fb8:	1907883a 	add	r3,r3,r4
   27fbc:	3884983a 	sll	r2,r7,r2
   27fc0:	19c00017 	ldw	r7,0(r3)
   27fc4:	1a3ffe04 	addi	r8,r3,-8
   27fc8:	1144b03a 	or	r2,r2,r5
   27fcc:	32000315 	stw	r8,12(r6)
   27fd0:	31c00215 	stw	r7,8(r6)
   27fd4:	20800115 	stw	r2,4(r4)
   27fd8:	19800015 	stw	r6,0(r3)
   27fdc:	39800315 	stw	r6,12(r7)
   27fe0:	8809883a 	mov	r4,r17
   27fe4:	dfc00217 	ldw	ra,8(sp)
   27fe8:	dc400117 	ldw	r17,4(sp)
   27fec:	dc000017 	ldw	r16,0(sp)
   27ff0:	dec00304 	addi	sp,sp,12
   27ff4:	00300781 	jmpi	30078 <__malloc_unlock>
   27ff8:	f800283a 	ret
   27ffc:	100ad27a 	srli	r5,r2,9
   28000:	00c00104 	movi	r3,4
   28004:	19404a36 	bltu	r3,r5,28130 <_free_r+0x240>
   28008:	100ad1ba 	srli	r5,r2,6
   2800c:	28c00e44 	addi	r3,r5,57
   28010:	18c7883a 	add	r3,r3,r3
   28014:	29400e04 	addi	r5,r5,56
   28018:	18c7883a 	add	r3,r3,r3
   2801c:	18c7883a 	add	r3,r3,r3
   28020:	1909883a 	add	r4,r3,r4
   28024:	20c00017 	ldw	r3,0(r4)
   28028:	01c000f4 	movhi	r7,3
   2802c:	213ffe04 	addi	r4,r4,-8
   28030:	39ccac04 	addi	r7,r7,12976
   28034:	20c04426 	beq	r4,r3,28148 <_free_r+0x258>
   28038:	01ffff04 	movi	r7,-4
   2803c:	19400117 	ldw	r5,4(r3)
   28040:	29ca703a 	and	r5,r5,r7
   28044:	1140022e 	bgeu	r2,r5,28050 <_free_r+0x160>
   28048:	18c00217 	ldw	r3,8(r3)
   2804c:	20fffb1e 	bne	r4,r3,2803c <_gp+0xfffeb21c>
   28050:	19000317 	ldw	r4,12(r3)
   28054:	31000315 	stw	r4,12(r6)
   28058:	30c00215 	stw	r3,8(r6)
   2805c:	21800215 	stw	r6,8(r4)
   28060:	19800315 	stw	r6,12(r3)
   28064:	003fde06 	br	27fe0 <_gp+0xfffeb1c0>
   28068:	29c00217 	ldw	r7,8(r5)
   2806c:	10c5883a 	add	r2,r2,r3
   28070:	00c000f4 	movhi	r3,3
   28074:	18ccae04 	addi	r3,r3,12984
   28078:	38c03b26 	beq	r7,r3,28168 <_free_r+0x278>
   2807c:	2a000317 	ldw	r8,12(r5)
   28080:	11400054 	ori	r5,r2,1
   28084:	3087883a 	add	r3,r6,r2
   28088:	3a000315 	stw	r8,12(r7)
   2808c:	41c00215 	stw	r7,8(r8)
   28090:	31400115 	stw	r5,4(r6)
   28094:	18800015 	stw	r2,0(r3)
   28098:	003fbd06 	br	27f90 <_gp+0xfffeb170>
   2809c:	39c0004c 	andi	r7,r7,1
   280a0:	10c5883a 	add	r2,r2,r3
   280a4:	3800071e 	bne	r7,zero,280c4 <_free_r+0x1d4>
   280a8:	81fffe17 	ldw	r7,-8(r16)
   280ac:	31cdc83a 	sub	r6,r6,r7
   280b0:	30c00317 	ldw	r3,12(r6)
   280b4:	31400217 	ldw	r5,8(r6)
   280b8:	11c5883a 	add	r2,r2,r7
   280bc:	28c00315 	stw	r3,12(r5)
   280c0:	19400215 	stw	r5,8(r3)
   280c4:	10c00054 	ori	r3,r2,1
   280c8:	30c00115 	stw	r3,4(r6)
   280cc:	00c000f4 	movhi	r3,3
   280d0:	18d39704 	addi	r3,r3,20060
   280d4:	18c00017 	ldw	r3,0(r3)
   280d8:	21800215 	stw	r6,8(r4)
   280dc:	10ffc036 	bltu	r2,r3,27fe0 <_gp+0xfffeb1c0>
   280e0:	008000f4 	movhi	r2,3
   280e4:	109aa504 	addi	r2,r2,27284
   280e8:	11400017 	ldw	r5,0(r2)
   280ec:	8809883a 	mov	r4,r17
   280f0:	0027dcc0 	call	27dcc <_malloc_trim_r>
   280f4:	003fba06 	br	27fe0 <_gp+0xfffeb1c0>
   280f8:	28c9883a 	add	r4,r5,r3
   280fc:	21000117 	ldw	r4,4(r4)
   28100:	2100004c 	andi	r4,r4,1
   28104:	2000391e 	bne	r4,zero,281ec <_free_r+0x2fc>
   28108:	29c00217 	ldw	r7,8(r5)
   2810c:	29000317 	ldw	r4,12(r5)
   28110:	1885883a 	add	r2,r3,r2
   28114:	10c00054 	ori	r3,r2,1
   28118:	39000315 	stw	r4,12(r7)
   2811c:	21c00215 	stw	r7,8(r4)
   28120:	30c00115 	stw	r3,4(r6)
   28124:	308d883a 	add	r6,r6,r2
   28128:	30800015 	stw	r2,0(r6)
   2812c:	003fac06 	br	27fe0 <_gp+0xfffeb1c0>
   28130:	00c00504 	movi	r3,20
   28134:	19401536 	bltu	r3,r5,2818c <_free_r+0x29c>
   28138:	28c01704 	addi	r3,r5,92
   2813c:	18c7883a 	add	r3,r3,r3
   28140:	294016c4 	addi	r5,r5,91
   28144:	003fb406 	br	28018 <_gp+0xfffeb1f8>
   28148:	280bd0ba 	srai	r5,r5,2
   2814c:	00c00044 	movi	r3,1
   28150:	38800117 	ldw	r2,4(r7)
   28154:	194a983a 	sll	r5,r3,r5
   28158:	2007883a 	mov	r3,r4
   2815c:	2884b03a 	or	r2,r5,r2
   28160:	38800115 	stw	r2,4(r7)
   28164:	003fbb06 	br	28054 <_gp+0xfffeb234>
   28168:	21800515 	stw	r6,20(r4)
   2816c:	21800415 	stw	r6,16(r4)
   28170:	10c00054 	ori	r3,r2,1
   28174:	31c00315 	stw	r7,12(r6)
   28178:	31c00215 	stw	r7,8(r6)
   2817c:	30c00115 	stw	r3,4(r6)
   28180:	308d883a 	add	r6,r6,r2
   28184:	30800015 	stw	r2,0(r6)
   28188:	003f9506 	br	27fe0 <_gp+0xfffeb1c0>
   2818c:	00c01504 	movi	r3,84
   28190:	19400536 	bltu	r3,r5,281a8 <_free_r+0x2b8>
   28194:	100ad33a 	srli	r5,r2,12
   28198:	28c01bc4 	addi	r3,r5,111
   2819c:	18c7883a 	add	r3,r3,r3
   281a0:	29401b84 	addi	r5,r5,110
   281a4:	003f9c06 	br	28018 <_gp+0xfffeb1f8>
   281a8:	00c05504 	movi	r3,340
   281ac:	19400536 	bltu	r3,r5,281c4 <_free_r+0x2d4>
   281b0:	100ad3fa 	srli	r5,r2,15
   281b4:	28c01e04 	addi	r3,r5,120
   281b8:	18c7883a 	add	r3,r3,r3
   281bc:	29401dc4 	addi	r5,r5,119
   281c0:	003f9506 	br	28018 <_gp+0xfffeb1f8>
   281c4:	00c15504 	movi	r3,1364
   281c8:	19400536 	bltu	r3,r5,281e0 <_free_r+0x2f0>
   281cc:	100ad4ba 	srli	r5,r2,18
   281d0:	28c01f44 	addi	r3,r5,125
   281d4:	18c7883a 	add	r3,r3,r3
   281d8:	29401f04 	addi	r5,r5,124
   281dc:	003f8e06 	br	28018 <_gp+0xfffeb1f8>
   281e0:	00c03f84 	movi	r3,254
   281e4:	01401f84 	movi	r5,126
   281e8:	003f8b06 	br	28018 <_gp+0xfffeb1f8>
   281ec:	10c00054 	ori	r3,r2,1
   281f0:	30c00115 	stw	r3,4(r6)
   281f4:	308d883a 	add	r6,r6,r2
   281f8:	30800015 	stw	r2,0(r6)
   281fc:	003f7806 	br	27fe0 <_gp+0xfffeb1c0>

00028200 <__sfvwrite_r>:
   28200:	30800217 	ldw	r2,8(r6)
   28204:	10006726 	beq	r2,zero,283a4 <__sfvwrite_r+0x1a4>
   28208:	28c0030b 	ldhu	r3,12(r5)
   2820c:	defff404 	addi	sp,sp,-48
   28210:	dd400715 	stw	r21,28(sp)
   28214:	dd000615 	stw	r20,24(sp)
   28218:	dc000215 	stw	r16,8(sp)
   2821c:	dfc00b15 	stw	ra,44(sp)
   28220:	df000a15 	stw	fp,40(sp)
   28224:	ddc00915 	stw	r23,36(sp)
   28228:	dd800815 	stw	r22,32(sp)
   2822c:	dcc00515 	stw	r19,20(sp)
   28230:	dc800415 	stw	r18,16(sp)
   28234:	dc400315 	stw	r17,12(sp)
   28238:	1880020c 	andi	r2,r3,8
   2823c:	2821883a 	mov	r16,r5
   28240:	202b883a 	mov	r21,r4
   28244:	3029883a 	mov	r20,r6
   28248:	10002726 	beq	r2,zero,282e8 <__sfvwrite_r+0xe8>
   2824c:	28800417 	ldw	r2,16(r5)
   28250:	10002526 	beq	r2,zero,282e8 <__sfvwrite_r+0xe8>
   28254:	1880008c 	andi	r2,r3,2
   28258:	a4400017 	ldw	r17,0(r20)
   2825c:	10002a26 	beq	r2,zero,28308 <__sfvwrite_r+0x108>
   28260:	05a00034 	movhi	r22,32768
   28264:	0027883a 	mov	r19,zero
   28268:	0025883a 	mov	r18,zero
   2826c:	b5bf0004 	addi	r22,r22,-1024
   28270:	980d883a 	mov	r6,r19
   28274:	a809883a 	mov	r4,r21
   28278:	90004626 	beq	r18,zero,28394 <__sfvwrite_r+0x194>
   2827c:	900f883a 	mov	r7,r18
   28280:	b480022e 	bgeu	r22,r18,2828c <__sfvwrite_r+0x8c>
   28284:	01e00034 	movhi	r7,32768
   28288:	39ff0004 	addi	r7,r7,-1024
   2828c:	80800917 	ldw	r2,36(r16)
   28290:	81400717 	ldw	r5,28(r16)
   28294:	103ee83a 	callr	r2
   28298:	0080570e 	bge	zero,r2,283f8 <__sfvwrite_r+0x1f8>
   2829c:	a0c00217 	ldw	r3,8(r20)
   282a0:	98a7883a 	add	r19,r19,r2
   282a4:	90a5c83a 	sub	r18,r18,r2
   282a8:	1885c83a 	sub	r2,r3,r2
   282ac:	a0800215 	stw	r2,8(r20)
   282b0:	103fef1e 	bne	r2,zero,28270 <_gp+0xfffeb450>
   282b4:	0005883a 	mov	r2,zero
   282b8:	dfc00b17 	ldw	ra,44(sp)
   282bc:	df000a17 	ldw	fp,40(sp)
   282c0:	ddc00917 	ldw	r23,36(sp)
   282c4:	dd800817 	ldw	r22,32(sp)
   282c8:	dd400717 	ldw	r21,28(sp)
   282cc:	dd000617 	ldw	r20,24(sp)
   282d0:	dcc00517 	ldw	r19,20(sp)
   282d4:	dc800417 	ldw	r18,16(sp)
   282d8:	dc400317 	ldw	r17,12(sp)
   282dc:	dc000217 	ldw	r16,8(sp)
   282e0:	dec00c04 	addi	sp,sp,48
   282e4:	f800283a 	ret
   282e8:	800b883a 	mov	r5,r16
   282ec:	a809883a 	mov	r4,r21
   282f0:	0025da80 	call	25da8 <__swsetup_r>
   282f4:	1000eb1e 	bne	r2,zero,286a4 <__sfvwrite_r+0x4a4>
   282f8:	80c0030b 	ldhu	r3,12(r16)
   282fc:	a4400017 	ldw	r17,0(r20)
   28300:	1880008c 	andi	r2,r3,2
   28304:	103fd61e 	bne	r2,zero,28260 <_gp+0xfffeb440>
   28308:	1880004c 	andi	r2,r3,1
   2830c:	10003f1e 	bne	r2,zero,2840c <__sfvwrite_r+0x20c>
   28310:	0039883a 	mov	fp,zero
   28314:	0025883a 	mov	r18,zero
   28318:	90001a26 	beq	r18,zero,28384 <__sfvwrite_r+0x184>
   2831c:	1880800c 	andi	r2,r3,512
   28320:	84c00217 	ldw	r19,8(r16)
   28324:	10002126 	beq	r2,zero,283ac <__sfvwrite_r+0x1ac>
   28328:	982f883a 	mov	r23,r19
   2832c:	94c09336 	bltu	r18,r19,2857c <__sfvwrite_r+0x37c>
   28330:	1881200c 	andi	r2,r3,1152
   28334:	10009e1e 	bne	r2,zero,285b0 <__sfvwrite_r+0x3b0>
   28338:	81000017 	ldw	r4,0(r16)
   2833c:	b80d883a 	mov	r6,r23
   28340:	e00b883a 	mov	r5,fp
   28344:	0028d080 	call	28d08 <memmove>
   28348:	80c00217 	ldw	r3,8(r16)
   2834c:	81000017 	ldw	r4,0(r16)
   28350:	9005883a 	mov	r2,r18
   28354:	1ce7c83a 	sub	r19,r3,r19
   28358:	25cf883a 	add	r7,r4,r23
   2835c:	84c00215 	stw	r19,8(r16)
   28360:	81c00015 	stw	r7,0(r16)
   28364:	a0c00217 	ldw	r3,8(r20)
   28368:	e0b9883a 	add	fp,fp,r2
   2836c:	90a5c83a 	sub	r18,r18,r2
   28370:	18a7c83a 	sub	r19,r3,r2
   28374:	a4c00215 	stw	r19,8(r20)
   28378:	983fce26 	beq	r19,zero,282b4 <_gp+0xfffeb494>
   2837c:	80c0030b 	ldhu	r3,12(r16)
   28380:	903fe61e 	bne	r18,zero,2831c <_gp+0xfffeb4fc>
   28384:	8f000017 	ldw	fp,0(r17)
   28388:	8c800117 	ldw	r18,4(r17)
   2838c:	8c400204 	addi	r17,r17,8
   28390:	003fe106 	br	28318 <_gp+0xfffeb4f8>
   28394:	8cc00017 	ldw	r19,0(r17)
   28398:	8c800117 	ldw	r18,4(r17)
   2839c:	8c400204 	addi	r17,r17,8
   283a0:	003fb306 	br	28270 <_gp+0xfffeb450>
   283a4:	0005883a 	mov	r2,zero
   283a8:	f800283a 	ret
   283ac:	81000017 	ldw	r4,0(r16)
   283b0:	80800417 	ldw	r2,16(r16)
   283b4:	11005736 	bltu	r2,r4,28514 <__sfvwrite_r+0x314>
   283b8:	85c00517 	ldw	r23,20(r16)
   283bc:	95c05536 	bltu	r18,r23,28514 <__sfvwrite_r+0x314>
   283c0:	00a00034 	movhi	r2,32768
   283c4:	10bfffc4 	addi	r2,r2,-1
   283c8:	9009883a 	mov	r4,r18
   283cc:	1480012e 	bgeu	r2,r18,283d4 <__sfvwrite_r+0x1d4>
   283d0:	1009883a 	mov	r4,r2
   283d4:	b80b883a 	mov	r5,r23
   283d8:	002cfa00 	call	2cfa0 <__divsi3>
   283dc:	15cf383a 	mul	r7,r2,r23
   283e0:	81400717 	ldw	r5,28(r16)
   283e4:	80800917 	ldw	r2,36(r16)
   283e8:	e00d883a 	mov	r6,fp
   283ec:	a809883a 	mov	r4,r21
   283f0:	103ee83a 	callr	r2
   283f4:	00bfdb16 	blt	zero,r2,28364 <_gp+0xfffeb544>
   283f8:	8080030b 	ldhu	r2,12(r16)
   283fc:	10801014 	ori	r2,r2,64
   28400:	8080030d 	sth	r2,12(r16)
   28404:	00bfffc4 	movi	r2,-1
   28408:	003fab06 	br	282b8 <_gp+0xfffeb498>
   2840c:	0027883a 	mov	r19,zero
   28410:	0011883a 	mov	r8,zero
   28414:	0039883a 	mov	fp,zero
   28418:	0025883a 	mov	r18,zero
   2841c:	90001f26 	beq	r18,zero,2849c <__sfvwrite_r+0x29c>
   28420:	40005a26 	beq	r8,zero,2858c <__sfvwrite_r+0x38c>
   28424:	982d883a 	mov	r22,r19
   28428:	94c0012e 	bgeu	r18,r19,28430 <__sfvwrite_r+0x230>
   2842c:	902d883a 	mov	r22,r18
   28430:	81000017 	ldw	r4,0(r16)
   28434:	80800417 	ldw	r2,16(r16)
   28438:	b02f883a 	mov	r23,r22
   2843c:	81c00517 	ldw	r7,20(r16)
   28440:	1100032e 	bgeu	r2,r4,28450 <__sfvwrite_r+0x250>
   28444:	80c00217 	ldw	r3,8(r16)
   28448:	38c7883a 	add	r3,r7,r3
   2844c:	1d801816 	blt	r3,r22,284b0 <__sfvwrite_r+0x2b0>
   28450:	b1c03e16 	blt	r22,r7,2854c <__sfvwrite_r+0x34c>
   28454:	80800917 	ldw	r2,36(r16)
   28458:	81400717 	ldw	r5,28(r16)
   2845c:	e00d883a 	mov	r6,fp
   28460:	da000115 	stw	r8,4(sp)
   28464:	a809883a 	mov	r4,r21
   28468:	103ee83a 	callr	r2
   2846c:	102f883a 	mov	r23,r2
   28470:	da000117 	ldw	r8,4(sp)
   28474:	00bfe00e 	bge	zero,r2,283f8 <_gp+0xfffeb5d8>
   28478:	9de7c83a 	sub	r19,r19,r23
   2847c:	98001f26 	beq	r19,zero,284fc <__sfvwrite_r+0x2fc>
   28480:	a0800217 	ldw	r2,8(r20)
   28484:	e5f9883a 	add	fp,fp,r23
   28488:	95e5c83a 	sub	r18,r18,r23
   2848c:	15efc83a 	sub	r23,r2,r23
   28490:	a5c00215 	stw	r23,8(r20)
   28494:	b83f8726 	beq	r23,zero,282b4 <_gp+0xfffeb494>
   28498:	903fe11e 	bne	r18,zero,28420 <_gp+0xfffeb600>
   2849c:	8f000017 	ldw	fp,0(r17)
   284a0:	8c800117 	ldw	r18,4(r17)
   284a4:	0011883a 	mov	r8,zero
   284a8:	8c400204 	addi	r17,r17,8
   284ac:	003fdb06 	br	2841c <_gp+0xfffeb5fc>
   284b0:	180d883a 	mov	r6,r3
   284b4:	e00b883a 	mov	r5,fp
   284b8:	da000115 	stw	r8,4(sp)
   284bc:	d8c00015 	stw	r3,0(sp)
   284c0:	0028d080 	call	28d08 <memmove>
   284c4:	d8c00017 	ldw	r3,0(sp)
   284c8:	80800017 	ldw	r2,0(r16)
   284cc:	800b883a 	mov	r5,r16
   284d0:	a809883a 	mov	r4,r21
   284d4:	10c5883a 	add	r2,r2,r3
   284d8:	80800015 	stw	r2,0(r16)
   284dc:	d8c00015 	stw	r3,0(sp)
   284e0:	00279a00 	call	279a0 <_fflush_r>
   284e4:	d8c00017 	ldw	r3,0(sp)
   284e8:	da000117 	ldw	r8,4(sp)
   284ec:	103fc21e 	bne	r2,zero,283f8 <_gp+0xfffeb5d8>
   284f0:	182f883a 	mov	r23,r3
   284f4:	9de7c83a 	sub	r19,r19,r23
   284f8:	983fe11e 	bne	r19,zero,28480 <_gp+0xfffeb660>
   284fc:	800b883a 	mov	r5,r16
   28500:	a809883a 	mov	r4,r21
   28504:	00279a00 	call	279a0 <_fflush_r>
   28508:	103fbb1e 	bne	r2,zero,283f8 <_gp+0xfffeb5d8>
   2850c:	0011883a 	mov	r8,zero
   28510:	003fdb06 	br	28480 <_gp+0xfffeb660>
   28514:	94c0012e 	bgeu	r18,r19,2851c <__sfvwrite_r+0x31c>
   28518:	9027883a 	mov	r19,r18
   2851c:	980d883a 	mov	r6,r19
   28520:	e00b883a 	mov	r5,fp
   28524:	0028d080 	call	28d08 <memmove>
   28528:	80800217 	ldw	r2,8(r16)
   2852c:	80c00017 	ldw	r3,0(r16)
   28530:	14c5c83a 	sub	r2,r2,r19
   28534:	1cc7883a 	add	r3,r3,r19
   28538:	80800215 	stw	r2,8(r16)
   2853c:	80c00015 	stw	r3,0(r16)
   28540:	10004326 	beq	r2,zero,28650 <__sfvwrite_r+0x450>
   28544:	9805883a 	mov	r2,r19
   28548:	003f8606 	br	28364 <_gp+0xfffeb544>
   2854c:	b00d883a 	mov	r6,r22
   28550:	e00b883a 	mov	r5,fp
   28554:	da000115 	stw	r8,4(sp)
   28558:	0028d080 	call	28d08 <memmove>
   2855c:	80800217 	ldw	r2,8(r16)
   28560:	80c00017 	ldw	r3,0(r16)
   28564:	da000117 	ldw	r8,4(sp)
   28568:	1585c83a 	sub	r2,r2,r22
   2856c:	1dad883a 	add	r22,r3,r22
   28570:	80800215 	stw	r2,8(r16)
   28574:	85800015 	stw	r22,0(r16)
   28578:	003fbf06 	br	28478 <_gp+0xfffeb658>
   2857c:	81000017 	ldw	r4,0(r16)
   28580:	9027883a 	mov	r19,r18
   28584:	902f883a 	mov	r23,r18
   28588:	003f6c06 	br	2833c <_gp+0xfffeb51c>
   2858c:	900d883a 	mov	r6,r18
   28590:	01400284 	movi	r5,10
   28594:	e009883a 	mov	r4,fp
   28598:	0028adc0 	call	28adc <memchr>
   2859c:	10003e26 	beq	r2,zero,28698 <__sfvwrite_r+0x498>
   285a0:	10800044 	addi	r2,r2,1
   285a4:	1727c83a 	sub	r19,r2,fp
   285a8:	02000044 	movi	r8,1
   285ac:	003f9d06 	br	28424 <_gp+0xfffeb604>
   285b0:	80800517 	ldw	r2,20(r16)
   285b4:	81400417 	ldw	r5,16(r16)
   285b8:	81c00017 	ldw	r7,0(r16)
   285bc:	10a7883a 	add	r19,r2,r2
   285c0:	9885883a 	add	r2,r19,r2
   285c4:	1026d7fa 	srli	r19,r2,31
   285c8:	396dc83a 	sub	r22,r7,r5
   285cc:	b1000044 	addi	r4,r22,1
   285d0:	9885883a 	add	r2,r19,r2
   285d4:	1027d07a 	srai	r19,r2,1
   285d8:	2485883a 	add	r2,r4,r18
   285dc:	980d883a 	mov	r6,r19
   285e0:	9880022e 	bgeu	r19,r2,285ec <__sfvwrite_r+0x3ec>
   285e4:	1027883a 	mov	r19,r2
   285e8:	100d883a 	mov	r6,r2
   285ec:	18c1000c 	andi	r3,r3,1024
   285f0:	18001c26 	beq	r3,zero,28664 <__sfvwrite_r+0x464>
   285f4:	300b883a 	mov	r5,r6
   285f8:	a809883a 	mov	r4,r21
   285fc:	0022b980 	call	22b98 <_malloc_r>
   28600:	102f883a 	mov	r23,r2
   28604:	10002926 	beq	r2,zero,286ac <__sfvwrite_r+0x4ac>
   28608:	81400417 	ldw	r5,16(r16)
   2860c:	b00d883a 	mov	r6,r22
   28610:	1009883a 	mov	r4,r2
   28614:	0028bc00 	call	28bc0 <memcpy>
   28618:	8080030b 	ldhu	r2,12(r16)
   2861c:	00fedfc4 	movi	r3,-1153
   28620:	10c4703a 	and	r2,r2,r3
   28624:	10802014 	ori	r2,r2,128
   28628:	8080030d 	sth	r2,12(r16)
   2862c:	bd89883a 	add	r4,r23,r22
   28630:	9d8fc83a 	sub	r7,r19,r22
   28634:	85c00415 	stw	r23,16(r16)
   28638:	84c00515 	stw	r19,20(r16)
   2863c:	81000015 	stw	r4,0(r16)
   28640:	9027883a 	mov	r19,r18
   28644:	81c00215 	stw	r7,8(r16)
   28648:	902f883a 	mov	r23,r18
   2864c:	003f3b06 	br	2833c <_gp+0xfffeb51c>
   28650:	800b883a 	mov	r5,r16
   28654:	a809883a 	mov	r4,r21
   28658:	00279a00 	call	279a0 <_fflush_r>
   2865c:	103fb926 	beq	r2,zero,28544 <_gp+0xfffeb724>
   28660:	003f6506 	br	283f8 <_gp+0xfffeb5d8>
   28664:	a809883a 	mov	r4,r21
   28668:	0029e600 	call	29e60 <_realloc_r>
   2866c:	102f883a 	mov	r23,r2
   28670:	103fee1e 	bne	r2,zero,2862c <_gp+0xfffeb80c>
   28674:	81400417 	ldw	r5,16(r16)
   28678:	a809883a 	mov	r4,r21
   2867c:	0027ef00 	call	27ef0 <_free_r>
   28680:	8080030b 	ldhu	r2,12(r16)
   28684:	00ffdfc4 	movi	r3,-129
   28688:	1884703a 	and	r2,r3,r2
   2868c:	00c00304 	movi	r3,12
   28690:	a8c00015 	stw	r3,0(r21)
   28694:	003f5906 	br	283fc <_gp+0xfffeb5dc>
   28698:	94c00044 	addi	r19,r18,1
   2869c:	02000044 	movi	r8,1
   286a0:	003f6006 	br	28424 <_gp+0xfffeb604>
   286a4:	00bfffc4 	movi	r2,-1
   286a8:	003f0306 	br	282b8 <_gp+0xfffeb498>
   286ac:	00800304 	movi	r2,12
   286b0:	a8800015 	stw	r2,0(r21)
   286b4:	8080030b 	ldhu	r2,12(r16)
   286b8:	003f5006 	br	283fc <_gp+0xfffeb5dc>

000286bc <_fwalk>:
   286bc:	defff704 	addi	sp,sp,-36
   286c0:	dd000415 	stw	r20,16(sp)
   286c4:	dfc00815 	stw	ra,32(sp)
   286c8:	ddc00715 	stw	r23,28(sp)
   286cc:	dd800615 	stw	r22,24(sp)
   286d0:	dd400515 	stw	r21,20(sp)
   286d4:	dcc00315 	stw	r19,12(sp)
   286d8:	dc800215 	stw	r18,8(sp)
   286dc:	dc400115 	stw	r17,4(sp)
   286e0:	dc000015 	stw	r16,0(sp)
   286e4:	2500b804 	addi	r20,r4,736
   286e8:	a0002326 	beq	r20,zero,28778 <_fwalk+0xbc>
   286ec:	282b883a 	mov	r21,r5
   286f0:	002f883a 	mov	r23,zero
   286f4:	05800044 	movi	r22,1
   286f8:	04ffffc4 	movi	r19,-1
   286fc:	a4400117 	ldw	r17,4(r20)
   28700:	a4800217 	ldw	r18,8(r20)
   28704:	8c7fffc4 	addi	r17,r17,-1
   28708:	88000d16 	blt	r17,zero,28740 <_fwalk+0x84>
   2870c:	94000304 	addi	r16,r18,12
   28710:	94800384 	addi	r18,r18,14
   28714:	8080000b 	ldhu	r2,0(r16)
   28718:	8c7fffc4 	addi	r17,r17,-1
   2871c:	813ffd04 	addi	r4,r16,-12
   28720:	b080042e 	bgeu	r22,r2,28734 <_fwalk+0x78>
   28724:	9080000f 	ldh	r2,0(r18)
   28728:	14c00226 	beq	r2,r19,28734 <_fwalk+0x78>
   2872c:	a83ee83a 	callr	r21
   28730:	b8aeb03a 	or	r23,r23,r2
   28734:	84001a04 	addi	r16,r16,104
   28738:	94801a04 	addi	r18,r18,104
   2873c:	8cfff51e 	bne	r17,r19,28714 <_gp+0xfffeb8f4>
   28740:	a5000017 	ldw	r20,0(r20)
   28744:	a03fed1e 	bne	r20,zero,286fc <_gp+0xfffeb8dc>
   28748:	b805883a 	mov	r2,r23
   2874c:	dfc00817 	ldw	ra,32(sp)
   28750:	ddc00717 	ldw	r23,28(sp)
   28754:	dd800617 	ldw	r22,24(sp)
   28758:	dd400517 	ldw	r21,20(sp)
   2875c:	dd000417 	ldw	r20,16(sp)
   28760:	dcc00317 	ldw	r19,12(sp)
   28764:	dc800217 	ldw	r18,8(sp)
   28768:	dc400117 	ldw	r17,4(sp)
   2876c:	dc000017 	ldw	r16,0(sp)
   28770:	dec00904 	addi	sp,sp,36
   28774:	f800283a 	ret
   28778:	002f883a 	mov	r23,zero
   2877c:	003ff206 	br	28748 <_gp+0xfffeb928>

00028780 <_fwalk_reent>:
   28780:	defff704 	addi	sp,sp,-36
   28784:	dd000415 	stw	r20,16(sp)
   28788:	dfc00815 	stw	ra,32(sp)
   2878c:	ddc00715 	stw	r23,28(sp)
   28790:	dd800615 	stw	r22,24(sp)
   28794:	dd400515 	stw	r21,20(sp)
   28798:	dcc00315 	stw	r19,12(sp)
   2879c:	dc800215 	stw	r18,8(sp)
   287a0:	dc400115 	stw	r17,4(sp)
   287a4:	dc000015 	stw	r16,0(sp)
   287a8:	2500b804 	addi	r20,r4,736
   287ac:	a0002326 	beq	r20,zero,2883c <_fwalk_reent+0xbc>
   287b0:	282b883a 	mov	r21,r5
   287b4:	2027883a 	mov	r19,r4
   287b8:	002f883a 	mov	r23,zero
   287bc:	05800044 	movi	r22,1
   287c0:	04bfffc4 	movi	r18,-1
   287c4:	a4400117 	ldw	r17,4(r20)
   287c8:	a4000217 	ldw	r16,8(r20)
   287cc:	8c7fffc4 	addi	r17,r17,-1
   287d0:	88000c16 	blt	r17,zero,28804 <_fwalk_reent+0x84>
   287d4:	84000304 	addi	r16,r16,12
   287d8:	8080000b 	ldhu	r2,0(r16)
   287dc:	8c7fffc4 	addi	r17,r17,-1
   287e0:	817ffd04 	addi	r5,r16,-12
   287e4:	b080052e 	bgeu	r22,r2,287fc <_fwalk_reent+0x7c>
   287e8:	8080008f 	ldh	r2,2(r16)
   287ec:	9809883a 	mov	r4,r19
   287f0:	14800226 	beq	r2,r18,287fc <_fwalk_reent+0x7c>
   287f4:	a83ee83a 	callr	r21
   287f8:	b8aeb03a 	or	r23,r23,r2
   287fc:	84001a04 	addi	r16,r16,104
   28800:	8cbff51e 	bne	r17,r18,287d8 <_gp+0xfffeb9b8>
   28804:	a5000017 	ldw	r20,0(r20)
   28808:	a03fee1e 	bne	r20,zero,287c4 <_gp+0xfffeb9a4>
   2880c:	b805883a 	mov	r2,r23
   28810:	dfc00817 	ldw	ra,32(sp)
   28814:	ddc00717 	ldw	r23,28(sp)
   28818:	dd800617 	ldw	r22,24(sp)
   2881c:	dd400517 	ldw	r21,20(sp)
   28820:	dd000417 	ldw	r20,16(sp)
   28824:	dcc00317 	ldw	r19,12(sp)
   28828:	dc800217 	ldw	r18,8(sp)
   2882c:	dc400117 	ldw	r17,4(sp)
   28830:	dc000017 	ldw	r16,0(sp)
   28834:	dec00904 	addi	sp,sp,36
   28838:	f800283a 	ret
   2883c:	002f883a 	mov	r23,zero
   28840:	003ff206 	br	2880c <_gp+0xfffeb9ec>

00028844 <_setlocale_r>:
   28844:	30001b26 	beq	r6,zero,288b4 <_setlocale_r+0x70>
   28848:	014000f4 	movhi	r5,3
   2884c:	defffe04 	addi	sp,sp,-8
   28850:	294c0704 	addi	r5,r5,12316
   28854:	3009883a 	mov	r4,r6
   28858:	dc000015 	stw	r16,0(sp)
   2885c:	dfc00115 	stw	ra,4(sp)
   28860:	3021883a 	mov	r16,r6
   28864:	00239640 	call	23964 <strcmp>
   28868:	1000061e 	bne	r2,zero,28884 <_setlocale_r+0x40>
   2886c:	008000f4 	movhi	r2,3
   28870:	108c0604 	addi	r2,r2,12312
   28874:	dfc00117 	ldw	ra,4(sp)
   28878:	dc000017 	ldw	r16,0(sp)
   2887c:	dec00204 	addi	sp,sp,8
   28880:	f800283a 	ret
   28884:	014000f4 	movhi	r5,3
   28888:	294c0604 	addi	r5,r5,12312
   2888c:	8009883a 	mov	r4,r16
   28890:	00239640 	call	23964 <strcmp>
   28894:	103ff526 	beq	r2,zero,2886c <_gp+0xfffeba4c>
   28898:	014000f4 	movhi	r5,3
   2889c:	294bf104 	addi	r5,r5,12228
   288a0:	8009883a 	mov	r4,r16
   288a4:	00239640 	call	23964 <strcmp>
   288a8:	103ff026 	beq	r2,zero,2886c <_gp+0xfffeba4c>
   288ac:	0005883a 	mov	r2,zero
   288b0:	003ff006 	br	28874 <_gp+0xfffeba54>
   288b4:	008000f4 	movhi	r2,3
   288b8:	108c0604 	addi	r2,r2,12312
   288bc:	f800283a 	ret

000288c0 <__locale_charset>:
   288c0:	008000f4 	movhi	r2,3
   288c4:	108ebf04 	addi	r2,r2,15100
   288c8:	f800283a 	ret

000288cc <__locale_mb_cur_max>:
   288cc:	008000f4 	movhi	r2,3
   288d0:	10939a04 	addi	r2,r2,20072
   288d4:	10800017 	ldw	r2,0(r2)
   288d8:	f800283a 	ret

000288dc <__locale_msgcharset>:
   288dc:	008000f4 	movhi	r2,3
   288e0:	108eb704 	addi	r2,r2,15068
   288e4:	f800283a 	ret

000288e8 <__locale_cjk_lang>:
   288e8:	0005883a 	mov	r2,zero
   288ec:	f800283a 	ret

000288f0 <_localeconv_r>:
   288f0:	008000f4 	movhi	r2,3
   288f4:	108ec704 	addi	r2,r2,15132
   288f8:	f800283a 	ret

000288fc <setlocale>:
   288fc:	008000f4 	movhi	r2,3
   28900:	10939904 	addi	r2,r2,20068
   28904:	280d883a 	mov	r6,r5
   28908:	200b883a 	mov	r5,r4
   2890c:	11000017 	ldw	r4,0(r2)
   28910:	00288441 	jmpi	28844 <_setlocale_r>

00028914 <localeconv>:
   28914:	008000f4 	movhi	r2,3
   28918:	108ec704 	addi	r2,r2,15132
   2891c:	f800283a 	ret

00028920 <__smakebuf_r>:
   28920:	2880030b 	ldhu	r2,12(r5)
   28924:	10c0008c 	andi	r3,r2,2
   28928:	1800411e 	bne	r3,zero,28a30 <__smakebuf_r+0x110>
   2892c:	deffec04 	addi	sp,sp,-80
   28930:	dc000f15 	stw	r16,60(sp)
   28934:	2821883a 	mov	r16,r5
   28938:	2940038f 	ldh	r5,14(r5)
   2893c:	dc401015 	stw	r17,64(sp)
   28940:	dfc01315 	stw	ra,76(sp)
   28944:	dcc01215 	stw	r19,72(sp)
   28948:	dc801115 	stw	r18,68(sp)
   2894c:	2023883a 	mov	r17,r4
   28950:	28001c16 	blt	r5,zero,289c4 <__smakebuf_r+0xa4>
   28954:	d80d883a 	mov	r6,sp
   28958:	002c0400 	call	2c040 <_fstat_r>
   2895c:	10001816 	blt	r2,zero,289c0 <__smakebuf_r+0xa0>
   28960:	d8800117 	ldw	r2,4(sp)
   28964:	00e00014 	movui	r3,32768
   28968:	10bc000c 	andi	r2,r2,61440
   2896c:	14c80020 	cmpeqi	r19,r2,8192
   28970:	10c03726 	beq	r2,r3,28a50 <__smakebuf_r+0x130>
   28974:	80c0030b 	ldhu	r3,12(r16)
   28978:	18c20014 	ori	r3,r3,2048
   2897c:	80c0030d 	sth	r3,12(r16)
   28980:	00c80004 	movi	r3,8192
   28984:	10c0521e 	bne	r2,r3,28ad0 <__smakebuf_r+0x1b0>
   28988:	8140038f 	ldh	r5,14(r16)
   2898c:	8809883a 	mov	r4,r17
   28990:	002c09c0 	call	2c09c <_isatty_r>
   28994:	10004c26 	beq	r2,zero,28ac8 <__smakebuf_r+0x1a8>
   28998:	8080030b 	ldhu	r2,12(r16)
   2899c:	80c010c4 	addi	r3,r16,67
   289a0:	80c00015 	stw	r3,0(r16)
   289a4:	10800054 	ori	r2,r2,1
   289a8:	8080030d 	sth	r2,12(r16)
   289ac:	00800044 	movi	r2,1
   289b0:	80c00415 	stw	r3,16(r16)
   289b4:	80800515 	stw	r2,20(r16)
   289b8:	04810004 	movi	r18,1024
   289bc:	00000706 	br	289dc <__smakebuf_r+0xbc>
   289c0:	8080030b 	ldhu	r2,12(r16)
   289c4:	10c0200c 	andi	r3,r2,128
   289c8:	18001f1e 	bne	r3,zero,28a48 <__smakebuf_r+0x128>
   289cc:	04810004 	movi	r18,1024
   289d0:	10820014 	ori	r2,r2,2048
   289d4:	8080030d 	sth	r2,12(r16)
   289d8:	0027883a 	mov	r19,zero
   289dc:	900b883a 	mov	r5,r18
   289e0:	8809883a 	mov	r4,r17
   289e4:	0022b980 	call	22b98 <_malloc_r>
   289e8:	10002c26 	beq	r2,zero,28a9c <__smakebuf_r+0x17c>
   289ec:	80c0030b 	ldhu	r3,12(r16)
   289f0:	010000b4 	movhi	r4,2
   289f4:	211e8d04 	addi	r4,r4,31284
   289f8:	89000f15 	stw	r4,60(r17)
   289fc:	18c02014 	ori	r3,r3,128
   28a00:	80c0030d 	sth	r3,12(r16)
   28a04:	80800015 	stw	r2,0(r16)
   28a08:	80800415 	stw	r2,16(r16)
   28a0c:	84800515 	stw	r18,20(r16)
   28a10:	98001a1e 	bne	r19,zero,28a7c <__smakebuf_r+0x15c>
   28a14:	dfc01317 	ldw	ra,76(sp)
   28a18:	dcc01217 	ldw	r19,72(sp)
   28a1c:	dc801117 	ldw	r18,68(sp)
   28a20:	dc401017 	ldw	r17,64(sp)
   28a24:	dc000f17 	ldw	r16,60(sp)
   28a28:	dec01404 	addi	sp,sp,80
   28a2c:	f800283a 	ret
   28a30:	288010c4 	addi	r2,r5,67
   28a34:	28800015 	stw	r2,0(r5)
   28a38:	28800415 	stw	r2,16(r5)
   28a3c:	00800044 	movi	r2,1
   28a40:	28800515 	stw	r2,20(r5)
   28a44:	f800283a 	ret
   28a48:	04801004 	movi	r18,64
   28a4c:	003fe006 	br	289d0 <_gp+0xfffebbb0>
   28a50:	81000a17 	ldw	r4,40(r16)
   28a54:	00c000f4 	movhi	r3,3
   28a58:	18e94404 	addi	r3,r3,-23280
   28a5c:	20ffc51e 	bne	r4,r3,28974 <_gp+0xfffebb54>
   28a60:	8080030b 	ldhu	r2,12(r16)
   28a64:	04810004 	movi	r18,1024
   28a68:	84801315 	stw	r18,76(r16)
   28a6c:	1484b03a 	or	r2,r2,r18
   28a70:	8080030d 	sth	r2,12(r16)
   28a74:	0027883a 	mov	r19,zero
   28a78:	003fd806 	br	289dc <_gp+0xfffebbbc>
   28a7c:	8140038f 	ldh	r5,14(r16)
   28a80:	8809883a 	mov	r4,r17
   28a84:	002c09c0 	call	2c09c <_isatty_r>
   28a88:	103fe226 	beq	r2,zero,28a14 <_gp+0xfffebbf4>
   28a8c:	8080030b 	ldhu	r2,12(r16)
   28a90:	10800054 	ori	r2,r2,1
   28a94:	8080030d 	sth	r2,12(r16)
   28a98:	003fde06 	br	28a14 <_gp+0xfffebbf4>
   28a9c:	8080030b 	ldhu	r2,12(r16)
   28aa0:	10c0800c 	andi	r3,r2,512
   28aa4:	183fdb1e 	bne	r3,zero,28a14 <_gp+0xfffebbf4>
   28aa8:	10800094 	ori	r2,r2,2
   28aac:	80c010c4 	addi	r3,r16,67
   28ab0:	8080030d 	sth	r2,12(r16)
   28ab4:	00800044 	movi	r2,1
   28ab8:	80c00015 	stw	r3,0(r16)
   28abc:	80c00415 	stw	r3,16(r16)
   28ac0:	80800515 	stw	r2,20(r16)
   28ac4:	003fd306 	br	28a14 <_gp+0xfffebbf4>
   28ac8:	04810004 	movi	r18,1024
   28acc:	003fc306 	br	289dc <_gp+0xfffebbbc>
   28ad0:	0027883a 	mov	r19,zero
   28ad4:	04810004 	movi	r18,1024
   28ad8:	003fc006 	br	289dc <_gp+0xfffebbbc>

00028adc <memchr>:
   28adc:	208000cc 	andi	r2,r4,3
   28ae0:	280f883a 	mov	r7,r5
   28ae4:	10003426 	beq	r2,zero,28bb8 <memchr+0xdc>
   28ae8:	30bfffc4 	addi	r2,r6,-1
   28aec:	30001a26 	beq	r6,zero,28b58 <memchr+0x7c>
   28af0:	20c00003 	ldbu	r3,0(r4)
   28af4:	29803fcc 	andi	r6,r5,255
   28af8:	30c0051e 	bne	r6,r3,28b10 <memchr+0x34>
   28afc:	00001806 	br	28b60 <memchr+0x84>
   28b00:	10001526 	beq	r2,zero,28b58 <memchr+0x7c>
   28b04:	20c00003 	ldbu	r3,0(r4)
   28b08:	10bfffc4 	addi	r2,r2,-1
   28b0c:	30c01426 	beq	r6,r3,28b60 <memchr+0x84>
   28b10:	21000044 	addi	r4,r4,1
   28b14:	20c000cc 	andi	r3,r4,3
   28b18:	183ff91e 	bne	r3,zero,28b00 <_gp+0xfffebce0>
   28b1c:	020000c4 	movi	r8,3
   28b20:	40801136 	bltu	r8,r2,28b68 <memchr+0x8c>
   28b24:	10000c26 	beq	r2,zero,28b58 <memchr+0x7c>
   28b28:	20c00003 	ldbu	r3,0(r4)
   28b2c:	29403fcc 	andi	r5,r5,255
   28b30:	28c00b26 	beq	r5,r3,28b60 <memchr+0x84>
   28b34:	20c00044 	addi	r3,r4,1
   28b38:	39803fcc 	andi	r6,r7,255
   28b3c:	2089883a 	add	r4,r4,r2
   28b40:	00000306 	br	28b50 <memchr+0x74>
   28b44:	18c00044 	addi	r3,r3,1
   28b48:	197fffc3 	ldbu	r5,-1(r3)
   28b4c:	31400526 	beq	r6,r5,28b64 <memchr+0x88>
   28b50:	1805883a 	mov	r2,r3
   28b54:	20fffb1e 	bne	r4,r3,28b44 <_gp+0xfffebd24>
   28b58:	0005883a 	mov	r2,zero
   28b5c:	f800283a 	ret
   28b60:	2005883a 	mov	r2,r4
   28b64:	f800283a 	ret
   28b68:	28c03fcc 	andi	r3,r5,255
   28b6c:	1812923a 	slli	r9,r3,8
   28b70:	02ffbff4 	movhi	r11,65279
   28b74:	02a02074 	movhi	r10,32897
   28b78:	48d2b03a 	or	r9,r9,r3
   28b7c:	4806943a 	slli	r3,r9,16
   28b80:	5affbfc4 	addi	r11,r11,-257
   28b84:	52a02004 	addi	r10,r10,-32640
   28b88:	48d2b03a 	or	r9,r9,r3
   28b8c:	20c00017 	ldw	r3,0(r4)
   28b90:	48c6f03a 	xor	r3,r9,r3
   28b94:	1acd883a 	add	r6,r3,r11
   28b98:	00c6303a 	nor	r3,zero,r3
   28b9c:	30c6703a 	and	r3,r6,r3
   28ba0:	1a86703a 	and	r3,r3,r10
   28ba4:	183fe01e 	bne	r3,zero,28b28 <_gp+0xfffebd08>
   28ba8:	10bfff04 	addi	r2,r2,-4
   28bac:	21000104 	addi	r4,r4,4
   28bb0:	40bff636 	bltu	r8,r2,28b8c <_gp+0xfffebd6c>
   28bb4:	003fdb06 	br	28b24 <_gp+0xfffebd04>
   28bb8:	3005883a 	mov	r2,r6
   28bbc:	003fd706 	br	28b1c <_gp+0xfffebcfc>

00028bc0 <memcpy>:
   28bc0:	defffd04 	addi	sp,sp,-12
   28bc4:	dfc00215 	stw	ra,8(sp)
   28bc8:	dc400115 	stw	r17,4(sp)
   28bcc:	dc000015 	stw	r16,0(sp)
   28bd0:	00c003c4 	movi	r3,15
   28bd4:	2005883a 	mov	r2,r4
   28bd8:	1980452e 	bgeu	r3,r6,28cf0 <memcpy+0x130>
   28bdc:	2906b03a 	or	r3,r5,r4
   28be0:	18c000cc 	andi	r3,r3,3
   28be4:	1800441e 	bne	r3,zero,28cf8 <memcpy+0x138>
   28be8:	347ffc04 	addi	r17,r6,-16
   28bec:	8822d13a 	srli	r17,r17,4
   28bf0:	28c00104 	addi	r3,r5,4
   28bf4:	23400104 	addi	r13,r4,4
   28bf8:	8820913a 	slli	r16,r17,4
   28bfc:	2b000204 	addi	r12,r5,8
   28c00:	22c00204 	addi	r11,r4,8
   28c04:	84000504 	addi	r16,r16,20
   28c08:	2a800304 	addi	r10,r5,12
   28c0c:	22400304 	addi	r9,r4,12
   28c10:	2c21883a 	add	r16,r5,r16
   28c14:	2811883a 	mov	r8,r5
   28c18:	200f883a 	mov	r7,r4
   28c1c:	41000017 	ldw	r4,0(r8)
   28c20:	1fc00017 	ldw	ra,0(r3)
   28c24:	63c00017 	ldw	r15,0(r12)
   28c28:	39000015 	stw	r4,0(r7)
   28c2c:	53800017 	ldw	r14,0(r10)
   28c30:	6fc00015 	stw	ra,0(r13)
   28c34:	5bc00015 	stw	r15,0(r11)
   28c38:	4b800015 	stw	r14,0(r9)
   28c3c:	18c00404 	addi	r3,r3,16
   28c40:	39c00404 	addi	r7,r7,16
   28c44:	42000404 	addi	r8,r8,16
   28c48:	6b400404 	addi	r13,r13,16
   28c4c:	63000404 	addi	r12,r12,16
   28c50:	5ac00404 	addi	r11,r11,16
   28c54:	52800404 	addi	r10,r10,16
   28c58:	4a400404 	addi	r9,r9,16
   28c5c:	1c3fef1e 	bne	r3,r16,28c1c <_gp+0xfffebdfc>
   28c60:	89c00044 	addi	r7,r17,1
   28c64:	380e913a 	slli	r7,r7,4
   28c68:	310003cc 	andi	r4,r6,15
   28c6c:	02c000c4 	movi	r11,3
   28c70:	11c7883a 	add	r3,r2,r7
   28c74:	29cb883a 	add	r5,r5,r7
   28c78:	5900212e 	bgeu	r11,r4,28d00 <memcpy+0x140>
   28c7c:	1813883a 	mov	r9,r3
   28c80:	2811883a 	mov	r8,r5
   28c84:	200f883a 	mov	r7,r4
   28c88:	42800017 	ldw	r10,0(r8)
   28c8c:	4a400104 	addi	r9,r9,4
   28c90:	39ffff04 	addi	r7,r7,-4
   28c94:	4abfff15 	stw	r10,-4(r9)
   28c98:	42000104 	addi	r8,r8,4
   28c9c:	59fffa36 	bltu	r11,r7,28c88 <_gp+0xfffebe68>
   28ca0:	213fff04 	addi	r4,r4,-4
   28ca4:	2008d0ba 	srli	r4,r4,2
   28ca8:	318000cc 	andi	r6,r6,3
   28cac:	21000044 	addi	r4,r4,1
   28cb0:	2109883a 	add	r4,r4,r4
   28cb4:	2109883a 	add	r4,r4,r4
   28cb8:	1907883a 	add	r3,r3,r4
   28cbc:	290b883a 	add	r5,r5,r4
   28cc0:	30000626 	beq	r6,zero,28cdc <memcpy+0x11c>
   28cc4:	198d883a 	add	r6,r3,r6
   28cc8:	29c00003 	ldbu	r7,0(r5)
   28ccc:	18c00044 	addi	r3,r3,1
   28cd0:	29400044 	addi	r5,r5,1
   28cd4:	19ffffc5 	stb	r7,-1(r3)
   28cd8:	19bffb1e 	bne	r3,r6,28cc8 <_gp+0xfffebea8>
   28cdc:	dfc00217 	ldw	ra,8(sp)
   28ce0:	dc400117 	ldw	r17,4(sp)
   28ce4:	dc000017 	ldw	r16,0(sp)
   28ce8:	dec00304 	addi	sp,sp,12
   28cec:	f800283a 	ret
   28cf0:	2007883a 	mov	r3,r4
   28cf4:	003ff206 	br	28cc0 <_gp+0xfffebea0>
   28cf8:	2007883a 	mov	r3,r4
   28cfc:	003ff106 	br	28cc4 <_gp+0xfffebea4>
   28d00:	200d883a 	mov	r6,r4
   28d04:	003fee06 	br	28cc0 <_gp+0xfffebea0>

00028d08 <memmove>:
   28d08:	2005883a 	mov	r2,r4
   28d0c:	29000b2e 	bgeu	r5,r4,28d3c <memmove+0x34>
   28d10:	298f883a 	add	r7,r5,r6
   28d14:	21c0092e 	bgeu	r4,r7,28d3c <memmove+0x34>
   28d18:	2187883a 	add	r3,r4,r6
   28d1c:	198bc83a 	sub	r5,r3,r6
   28d20:	30004826 	beq	r6,zero,28e44 <memmove+0x13c>
   28d24:	39ffffc4 	addi	r7,r7,-1
   28d28:	39000003 	ldbu	r4,0(r7)
   28d2c:	18ffffc4 	addi	r3,r3,-1
   28d30:	19000005 	stb	r4,0(r3)
   28d34:	28fffb1e 	bne	r5,r3,28d24 <_gp+0xfffebf04>
   28d38:	f800283a 	ret
   28d3c:	00c003c4 	movi	r3,15
   28d40:	1980412e 	bgeu	r3,r6,28e48 <memmove+0x140>
   28d44:	2886b03a 	or	r3,r5,r2
   28d48:	18c000cc 	andi	r3,r3,3
   28d4c:	1800401e 	bne	r3,zero,28e50 <memmove+0x148>
   28d50:	33fffc04 	addi	r15,r6,-16
   28d54:	781ed13a 	srli	r15,r15,4
   28d58:	28c00104 	addi	r3,r5,4
   28d5c:	13400104 	addi	r13,r2,4
   28d60:	781c913a 	slli	r14,r15,4
   28d64:	2b000204 	addi	r12,r5,8
   28d68:	12c00204 	addi	r11,r2,8
   28d6c:	73800504 	addi	r14,r14,20
   28d70:	2a800304 	addi	r10,r5,12
   28d74:	12400304 	addi	r9,r2,12
   28d78:	2b9d883a 	add	r14,r5,r14
   28d7c:	2811883a 	mov	r8,r5
   28d80:	100f883a 	mov	r7,r2
   28d84:	41000017 	ldw	r4,0(r8)
   28d88:	39c00404 	addi	r7,r7,16
   28d8c:	18c00404 	addi	r3,r3,16
   28d90:	393ffc15 	stw	r4,-16(r7)
   28d94:	193ffc17 	ldw	r4,-16(r3)
   28d98:	6b400404 	addi	r13,r13,16
   28d9c:	5ac00404 	addi	r11,r11,16
   28da0:	693ffc15 	stw	r4,-16(r13)
   28da4:	61000017 	ldw	r4,0(r12)
   28da8:	4a400404 	addi	r9,r9,16
   28dac:	42000404 	addi	r8,r8,16
   28db0:	593ffc15 	stw	r4,-16(r11)
   28db4:	51000017 	ldw	r4,0(r10)
   28db8:	63000404 	addi	r12,r12,16
   28dbc:	52800404 	addi	r10,r10,16
   28dc0:	493ffc15 	stw	r4,-16(r9)
   28dc4:	1bbfef1e 	bne	r3,r14,28d84 <_gp+0xfffebf64>
   28dc8:	79000044 	addi	r4,r15,1
   28dcc:	2008913a 	slli	r4,r4,4
   28dd0:	328003cc 	andi	r10,r6,15
   28dd4:	02c000c4 	movi	r11,3
   28dd8:	1107883a 	add	r3,r2,r4
   28ddc:	290b883a 	add	r5,r5,r4
   28de0:	5a801e2e 	bgeu	r11,r10,28e5c <memmove+0x154>
   28de4:	1813883a 	mov	r9,r3
   28de8:	2811883a 	mov	r8,r5
   28dec:	500f883a 	mov	r7,r10
   28df0:	41000017 	ldw	r4,0(r8)
   28df4:	4a400104 	addi	r9,r9,4
   28df8:	39ffff04 	addi	r7,r7,-4
   28dfc:	493fff15 	stw	r4,-4(r9)
   28e00:	42000104 	addi	r8,r8,4
   28e04:	59fffa36 	bltu	r11,r7,28df0 <_gp+0xfffebfd0>
   28e08:	513fff04 	addi	r4,r10,-4
   28e0c:	2008d0ba 	srli	r4,r4,2
   28e10:	318000cc 	andi	r6,r6,3
   28e14:	21000044 	addi	r4,r4,1
   28e18:	2109883a 	add	r4,r4,r4
   28e1c:	2109883a 	add	r4,r4,r4
   28e20:	1907883a 	add	r3,r3,r4
   28e24:	290b883a 	add	r5,r5,r4
   28e28:	30000b26 	beq	r6,zero,28e58 <memmove+0x150>
   28e2c:	198d883a 	add	r6,r3,r6
   28e30:	29c00003 	ldbu	r7,0(r5)
   28e34:	18c00044 	addi	r3,r3,1
   28e38:	29400044 	addi	r5,r5,1
   28e3c:	19ffffc5 	stb	r7,-1(r3)
   28e40:	19bffb1e 	bne	r3,r6,28e30 <_gp+0xfffec010>
   28e44:	f800283a 	ret
   28e48:	1007883a 	mov	r3,r2
   28e4c:	003ff606 	br	28e28 <_gp+0xfffec008>
   28e50:	1007883a 	mov	r3,r2
   28e54:	003ff506 	br	28e2c <_gp+0xfffec00c>
   28e58:	f800283a 	ret
   28e5c:	500d883a 	mov	r6,r10
   28e60:	003ff106 	br	28e28 <_gp+0xfffec008>

00028e64 <_Balloc>:
   28e64:	20801317 	ldw	r2,76(r4)
   28e68:	defffc04 	addi	sp,sp,-16
   28e6c:	dc400115 	stw	r17,4(sp)
   28e70:	dc000015 	stw	r16,0(sp)
   28e74:	dfc00315 	stw	ra,12(sp)
   28e78:	dc800215 	stw	r18,8(sp)
   28e7c:	2023883a 	mov	r17,r4
   28e80:	2821883a 	mov	r16,r5
   28e84:	10000f26 	beq	r2,zero,28ec4 <_Balloc+0x60>
   28e88:	8407883a 	add	r3,r16,r16
   28e8c:	18c7883a 	add	r3,r3,r3
   28e90:	10c7883a 	add	r3,r2,r3
   28e94:	18800017 	ldw	r2,0(r3)
   28e98:	10001126 	beq	r2,zero,28ee0 <_Balloc+0x7c>
   28e9c:	11000017 	ldw	r4,0(r2)
   28ea0:	19000015 	stw	r4,0(r3)
   28ea4:	10000415 	stw	zero,16(r2)
   28ea8:	10000315 	stw	zero,12(r2)
   28eac:	dfc00317 	ldw	ra,12(sp)
   28eb0:	dc800217 	ldw	r18,8(sp)
   28eb4:	dc400117 	ldw	r17,4(sp)
   28eb8:	dc000017 	ldw	r16,0(sp)
   28ebc:	dec00404 	addi	sp,sp,16
   28ec0:	f800283a 	ret
   28ec4:	01800844 	movi	r6,33
   28ec8:	01400104 	movi	r5,4
   28ecc:	002bc700 	call	2bc70 <_calloc_r>
   28ed0:	88801315 	stw	r2,76(r17)
   28ed4:	103fec1e 	bne	r2,zero,28e88 <_gp+0xfffec068>
   28ed8:	0005883a 	mov	r2,zero
   28edc:	003ff306 	br	28eac <_gp+0xfffec08c>
   28ee0:	01400044 	movi	r5,1
   28ee4:	2c24983a 	sll	r18,r5,r16
   28ee8:	8809883a 	mov	r4,r17
   28eec:	91800144 	addi	r6,r18,5
   28ef0:	318d883a 	add	r6,r6,r6
   28ef4:	318d883a 	add	r6,r6,r6
   28ef8:	002bc700 	call	2bc70 <_calloc_r>
   28efc:	103ff626 	beq	r2,zero,28ed8 <_gp+0xfffec0b8>
   28f00:	14000115 	stw	r16,4(r2)
   28f04:	14800215 	stw	r18,8(r2)
   28f08:	003fe606 	br	28ea4 <_gp+0xfffec084>

00028f0c <_Bfree>:
   28f0c:	28000826 	beq	r5,zero,28f30 <_Bfree+0x24>
   28f10:	28c00117 	ldw	r3,4(r5)
   28f14:	20801317 	ldw	r2,76(r4)
   28f18:	18c7883a 	add	r3,r3,r3
   28f1c:	18c7883a 	add	r3,r3,r3
   28f20:	10c5883a 	add	r2,r2,r3
   28f24:	10c00017 	ldw	r3,0(r2)
   28f28:	28c00015 	stw	r3,0(r5)
   28f2c:	11400015 	stw	r5,0(r2)
   28f30:	f800283a 	ret

00028f34 <__multadd>:
   28f34:	defffa04 	addi	sp,sp,-24
   28f38:	dc800315 	stw	r18,12(sp)
   28f3c:	dc400215 	stw	r17,8(sp)
   28f40:	dc000115 	stw	r16,4(sp)
   28f44:	2823883a 	mov	r17,r5
   28f48:	2c000417 	ldw	r16,16(r5)
   28f4c:	dfc00515 	stw	ra,20(sp)
   28f50:	dcc00415 	stw	r19,16(sp)
   28f54:	2025883a 	mov	r18,r4
   28f58:	29400504 	addi	r5,r5,20
   28f5c:	0011883a 	mov	r8,zero
   28f60:	28c00017 	ldw	r3,0(r5)
   28f64:	29400104 	addi	r5,r5,4
   28f68:	42000044 	addi	r8,r8,1
   28f6c:	18bfffcc 	andi	r2,r3,65535
   28f70:	1185383a 	mul	r2,r2,r6
   28f74:	1806d43a 	srli	r3,r3,16
   28f78:	11cf883a 	add	r7,r2,r7
   28f7c:	3808d43a 	srli	r4,r7,16
   28f80:	1987383a 	mul	r3,r3,r6
   28f84:	38bfffcc 	andi	r2,r7,65535
   28f88:	1907883a 	add	r3,r3,r4
   28f8c:	1808943a 	slli	r4,r3,16
   28f90:	180ed43a 	srli	r7,r3,16
   28f94:	2085883a 	add	r2,r4,r2
   28f98:	28bfff15 	stw	r2,-4(r5)
   28f9c:	443ff016 	blt	r8,r16,28f60 <_gp+0xfffec140>
   28fa0:	38000926 	beq	r7,zero,28fc8 <__multadd+0x94>
   28fa4:	88800217 	ldw	r2,8(r17)
   28fa8:	80800f0e 	bge	r16,r2,28fe8 <__multadd+0xb4>
   28fac:	80800144 	addi	r2,r16,5
   28fb0:	1085883a 	add	r2,r2,r2
   28fb4:	1085883a 	add	r2,r2,r2
   28fb8:	8885883a 	add	r2,r17,r2
   28fbc:	11c00015 	stw	r7,0(r2)
   28fc0:	84000044 	addi	r16,r16,1
   28fc4:	8c000415 	stw	r16,16(r17)
   28fc8:	8805883a 	mov	r2,r17
   28fcc:	dfc00517 	ldw	ra,20(sp)
   28fd0:	dcc00417 	ldw	r19,16(sp)
   28fd4:	dc800317 	ldw	r18,12(sp)
   28fd8:	dc400217 	ldw	r17,8(sp)
   28fdc:	dc000117 	ldw	r16,4(sp)
   28fe0:	dec00604 	addi	sp,sp,24
   28fe4:	f800283a 	ret
   28fe8:	89400117 	ldw	r5,4(r17)
   28fec:	9009883a 	mov	r4,r18
   28ff0:	d9c00015 	stw	r7,0(sp)
   28ff4:	29400044 	addi	r5,r5,1
   28ff8:	0028e640 	call	28e64 <_Balloc>
   28ffc:	89800417 	ldw	r6,16(r17)
   29000:	89400304 	addi	r5,r17,12
   29004:	11000304 	addi	r4,r2,12
   29008:	31800084 	addi	r6,r6,2
   2900c:	318d883a 	add	r6,r6,r6
   29010:	318d883a 	add	r6,r6,r6
   29014:	1027883a 	mov	r19,r2
   29018:	0028bc00 	call	28bc0 <memcpy>
   2901c:	d9c00017 	ldw	r7,0(sp)
   29020:	88000a26 	beq	r17,zero,2904c <__multadd+0x118>
   29024:	88c00117 	ldw	r3,4(r17)
   29028:	90801317 	ldw	r2,76(r18)
   2902c:	18c7883a 	add	r3,r3,r3
   29030:	18c7883a 	add	r3,r3,r3
   29034:	10c5883a 	add	r2,r2,r3
   29038:	10c00017 	ldw	r3,0(r2)
   2903c:	88c00015 	stw	r3,0(r17)
   29040:	14400015 	stw	r17,0(r2)
   29044:	9823883a 	mov	r17,r19
   29048:	003fd806 	br	28fac <_gp+0xfffec18c>
   2904c:	9823883a 	mov	r17,r19
   29050:	003fd606 	br	28fac <_gp+0xfffec18c>

00029054 <__s2b>:
   29054:	defff904 	addi	sp,sp,-28
   29058:	dc400115 	stw	r17,4(sp)
   2905c:	dc000015 	stw	r16,0(sp)
   29060:	2023883a 	mov	r17,r4
   29064:	2821883a 	mov	r16,r5
   29068:	39000204 	addi	r4,r7,8
   2906c:	01400244 	movi	r5,9
   29070:	dcc00315 	stw	r19,12(sp)
   29074:	dc800215 	stw	r18,8(sp)
   29078:	dfc00615 	stw	ra,24(sp)
   2907c:	dd400515 	stw	r21,20(sp)
   29080:	dd000415 	stw	r20,16(sp)
   29084:	3825883a 	mov	r18,r7
   29088:	3027883a 	mov	r19,r6
   2908c:	002cfa00 	call	2cfa0 <__divsi3>
   29090:	00c00044 	movi	r3,1
   29094:	000b883a 	mov	r5,zero
   29098:	1880030e 	bge	r3,r2,290a8 <__s2b+0x54>
   2909c:	18c7883a 	add	r3,r3,r3
   290a0:	29400044 	addi	r5,r5,1
   290a4:	18bffd16 	blt	r3,r2,2909c <_gp+0xfffec27c>
   290a8:	8809883a 	mov	r4,r17
   290ac:	0028e640 	call	28e64 <_Balloc>
   290b0:	d8c00717 	ldw	r3,28(sp)
   290b4:	10c00515 	stw	r3,20(r2)
   290b8:	00c00044 	movi	r3,1
   290bc:	10c00415 	stw	r3,16(r2)
   290c0:	00c00244 	movi	r3,9
   290c4:	1cc0210e 	bge	r3,r19,2914c <__s2b+0xf8>
   290c8:	80eb883a 	add	r21,r16,r3
   290cc:	a829883a 	mov	r20,r21
   290d0:	84e1883a 	add	r16,r16,r19
   290d4:	a1c00007 	ldb	r7,0(r20)
   290d8:	01800284 	movi	r6,10
   290dc:	a5000044 	addi	r20,r20,1
   290e0:	100b883a 	mov	r5,r2
   290e4:	39fff404 	addi	r7,r7,-48
   290e8:	8809883a 	mov	r4,r17
   290ec:	0028f340 	call	28f34 <__multadd>
   290f0:	a43ff81e 	bne	r20,r16,290d4 <_gp+0xfffec2b4>
   290f4:	ace1883a 	add	r16,r21,r19
   290f8:	843ffe04 	addi	r16,r16,-8
   290fc:	9c800a0e 	bge	r19,r18,29128 <__s2b+0xd4>
   29100:	94e5c83a 	sub	r18,r18,r19
   29104:	84a5883a 	add	r18,r16,r18
   29108:	81c00007 	ldb	r7,0(r16)
   2910c:	01800284 	movi	r6,10
   29110:	84000044 	addi	r16,r16,1
   29114:	100b883a 	mov	r5,r2
   29118:	39fff404 	addi	r7,r7,-48
   2911c:	8809883a 	mov	r4,r17
   29120:	0028f340 	call	28f34 <__multadd>
   29124:	84bff81e 	bne	r16,r18,29108 <_gp+0xfffec2e8>
   29128:	dfc00617 	ldw	ra,24(sp)
   2912c:	dd400517 	ldw	r21,20(sp)
   29130:	dd000417 	ldw	r20,16(sp)
   29134:	dcc00317 	ldw	r19,12(sp)
   29138:	dc800217 	ldw	r18,8(sp)
   2913c:	dc400117 	ldw	r17,4(sp)
   29140:	dc000017 	ldw	r16,0(sp)
   29144:	dec00704 	addi	sp,sp,28
   29148:	f800283a 	ret
   2914c:	84000284 	addi	r16,r16,10
   29150:	1827883a 	mov	r19,r3
   29154:	003fe906 	br	290fc <_gp+0xfffec2dc>

00029158 <__hi0bits>:
   29158:	20bfffec 	andhi	r2,r4,65535
   2915c:	1000141e 	bne	r2,zero,291b0 <__hi0bits+0x58>
   29160:	2008943a 	slli	r4,r4,16
   29164:	00800404 	movi	r2,16
   29168:	20ffc02c 	andhi	r3,r4,65280
   2916c:	1800021e 	bne	r3,zero,29178 <__hi0bits+0x20>
   29170:	2008923a 	slli	r4,r4,8
   29174:	10800204 	addi	r2,r2,8
   29178:	20fc002c 	andhi	r3,r4,61440
   2917c:	1800021e 	bne	r3,zero,29188 <__hi0bits+0x30>
   29180:	2008913a 	slli	r4,r4,4
   29184:	10800104 	addi	r2,r2,4
   29188:	20f0002c 	andhi	r3,r4,49152
   2918c:	1800031e 	bne	r3,zero,2919c <__hi0bits+0x44>
   29190:	2109883a 	add	r4,r4,r4
   29194:	10800084 	addi	r2,r2,2
   29198:	2109883a 	add	r4,r4,r4
   2919c:	20000316 	blt	r4,zero,291ac <__hi0bits+0x54>
   291a0:	2110002c 	andhi	r4,r4,16384
   291a4:	2000041e 	bne	r4,zero,291b8 <__hi0bits+0x60>
   291a8:	00800804 	movi	r2,32
   291ac:	f800283a 	ret
   291b0:	0005883a 	mov	r2,zero
   291b4:	003fec06 	br	29168 <_gp+0xfffec348>
   291b8:	10800044 	addi	r2,r2,1
   291bc:	f800283a 	ret

000291c0 <__lo0bits>:
   291c0:	20c00017 	ldw	r3,0(r4)
   291c4:	188001cc 	andi	r2,r3,7
   291c8:	10000826 	beq	r2,zero,291ec <__lo0bits+0x2c>
   291cc:	1880004c 	andi	r2,r3,1
   291d0:	1000211e 	bne	r2,zero,29258 <__lo0bits+0x98>
   291d4:	1880008c 	andi	r2,r3,2
   291d8:	1000211e 	bne	r2,zero,29260 <__lo0bits+0xa0>
   291dc:	1806d0ba 	srli	r3,r3,2
   291e0:	00800084 	movi	r2,2
   291e4:	20c00015 	stw	r3,0(r4)
   291e8:	f800283a 	ret
   291ec:	18bfffcc 	andi	r2,r3,65535
   291f0:	10001326 	beq	r2,zero,29240 <__lo0bits+0x80>
   291f4:	0005883a 	mov	r2,zero
   291f8:	19403fcc 	andi	r5,r3,255
   291fc:	2800021e 	bne	r5,zero,29208 <__lo0bits+0x48>
   29200:	1806d23a 	srli	r3,r3,8
   29204:	10800204 	addi	r2,r2,8
   29208:	194003cc 	andi	r5,r3,15
   2920c:	2800021e 	bne	r5,zero,29218 <__lo0bits+0x58>
   29210:	1806d13a 	srli	r3,r3,4
   29214:	10800104 	addi	r2,r2,4
   29218:	194000cc 	andi	r5,r3,3
   2921c:	2800021e 	bne	r5,zero,29228 <__lo0bits+0x68>
   29220:	1806d0ba 	srli	r3,r3,2
   29224:	10800084 	addi	r2,r2,2
   29228:	1940004c 	andi	r5,r3,1
   2922c:	2800081e 	bne	r5,zero,29250 <__lo0bits+0x90>
   29230:	1806d07a 	srli	r3,r3,1
   29234:	1800051e 	bne	r3,zero,2924c <__lo0bits+0x8c>
   29238:	00800804 	movi	r2,32
   2923c:	f800283a 	ret
   29240:	1806d43a 	srli	r3,r3,16
   29244:	00800404 	movi	r2,16
   29248:	003feb06 	br	291f8 <_gp+0xfffec3d8>
   2924c:	10800044 	addi	r2,r2,1
   29250:	20c00015 	stw	r3,0(r4)
   29254:	f800283a 	ret
   29258:	0005883a 	mov	r2,zero
   2925c:	f800283a 	ret
   29260:	1806d07a 	srli	r3,r3,1
   29264:	00800044 	movi	r2,1
   29268:	20c00015 	stw	r3,0(r4)
   2926c:	f800283a 	ret

00029270 <__i2b>:
   29270:	defffd04 	addi	sp,sp,-12
   29274:	dc000015 	stw	r16,0(sp)
   29278:	04000044 	movi	r16,1
   2927c:	dc400115 	stw	r17,4(sp)
   29280:	2823883a 	mov	r17,r5
   29284:	800b883a 	mov	r5,r16
   29288:	dfc00215 	stw	ra,8(sp)
   2928c:	0028e640 	call	28e64 <_Balloc>
   29290:	14400515 	stw	r17,20(r2)
   29294:	14000415 	stw	r16,16(r2)
   29298:	dfc00217 	ldw	ra,8(sp)
   2929c:	dc400117 	ldw	r17,4(sp)
   292a0:	dc000017 	ldw	r16,0(sp)
   292a4:	dec00304 	addi	sp,sp,12
   292a8:	f800283a 	ret

000292ac <__multiply>:
   292ac:	defffa04 	addi	sp,sp,-24
   292b0:	dcc00315 	stw	r19,12(sp)
   292b4:	dc800215 	stw	r18,8(sp)
   292b8:	34c00417 	ldw	r19,16(r6)
   292bc:	2c800417 	ldw	r18,16(r5)
   292c0:	dd000415 	stw	r20,16(sp)
   292c4:	dc400115 	stw	r17,4(sp)
   292c8:	dfc00515 	stw	ra,20(sp)
   292cc:	dc000015 	stw	r16,0(sp)
   292d0:	2829883a 	mov	r20,r5
   292d4:	3023883a 	mov	r17,r6
   292d8:	94c0050e 	bge	r18,r19,292f0 <__multiply+0x44>
   292dc:	9007883a 	mov	r3,r18
   292e0:	3029883a 	mov	r20,r6
   292e4:	9825883a 	mov	r18,r19
   292e8:	2823883a 	mov	r17,r5
   292ec:	1827883a 	mov	r19,r3
   292f0:	a0800217 	ldw	r2,8(r20)
   292f4:	94e1883a 	add	r16,r18,r19
   292f8:	a1400117 	ldw	r5,4(r20)
   292fc:	1400010e 	bge	r2,r16,29304 <__multiply+0x58>
   29300:	29400044 	addi	r5,r5,1
   29304:	0028e640 	call	28e64 <_Balloc>
   29308:	8415883a 	add	r10,r16,r16
   2930c:	12c00504 	addi	r11,r2,20
   29310:	5295883a 	add	r10,r10,r10
   29314:	5a95883a 	add	r10,r11,r10
   29318:	5807883a 	mov	r3,r11
   2931c:	5a80032e 	bgeu	r11,r10,2932c <__multiply+0x80>
   29320:	18000015 	stw	zero,0(r3)
   29324:	18c00104 	addi	r3,r3,4
   29328:	1abffd36 	bltu	r3,r10,29320 <_gp+0xfffec500>
   2932c:	9ce7883a 	add	r19,r19,r19
   29330:	94a5883a 	add	r18,r18,r18
   29334:	89800504 	addi	r6,r17,20
   29338:	9ce7883a 	add	r19,r19,r19
   2933c:	a3400504 	addi	r13,r20,20
   29340:	94a5883a 	add	r18,r18,r18
   29344:	34d9883a 	add	r12,r6,r19
   29348:	6c93883a 	add	r9,r13,r18
   2934c:	3300422e 	bgeu	r6,r12,29458 <__multiply+0x1ac>
   29350:	37c00017 	ldw	ra,0(r6)
   29354:	fbffffcc 	andi	r15,ra,65535
   29358:	78001b26 	beq	r15,zero,293c8 <__multiply+0x11c>
   2935c:	5811883a 	mov	r8,r11
   29360:	681d883a 	mov	r14,r13
   29364:	000f883a 	mov	r7,zero
   29368:	71000017 	ldw	r4,0(r14)
   2936c:	40c00017 	ldw	r3,0(r8)
   29370:	73800104 	addi	r14,r14,4
   29374:	217fffcc 	andi	r5,r4,65535
   29378:	2bcb383a 	mul	r5,r5,r15
   2937c:	2008d43a 	srli	r4,r4,16
   29380:	1c7fffcc 	andi	r17,r3,65535
   29384:	2c4b883a 	add	r5,r5,r17
   29388:	29cb883a 	add	r5,r5,r7
   2938c:	23c9383a 	mul	r4,r4,r15
   29390:	1806d43a 	srli	r3,r3,16
   29394:	280ed43a 	srli	r7,r5,16
   29398:	297fffcc 	andi	r5,r5,65535
   2939c:	20c7883a 	add	r3,r4,r3
   293a0:	19c7883a 	add	r3,r3,r7
   293a4:	1808943a 	slli	r4,r3,16
   293a8:	4023883a 	mov	r17,r8
   293ac:	180ed43a 	srli	r7,r3,16
   293b0:	214ab03a 	or	r5,r4,r5
   293b4:	41400015 	stw	r5,0(r8)
   293b8:	42000104 	addi	r8,r8,4
   293bc:	727fea36 	bltu	r14,r9,29368 <_gp+0xfffec548>
   293c0:	89c00115 	stw	r7,4(r17)
   293c4:	37c00017 	ldw	ra,0(r6)
   293c8:	f83ed43a 	srli	ra,ra,16
   293cc:	f8001f26 	beq	ra,zero,2944c <__multiply+0x1a0>
   293d0:	58c00017 	ldw	r3,0(r11)
   293d4:	681d883a 	mov	r14,r13
   293d8:	581f883a 	mov	r15,r11
   293dc:	1811883a 	mov	r8,r3
   293e0:	5825883a 	mov	r18,r11
   293e4:	000f883a 	mov	r7,zero
   293e8:	00000106 	br	293f0 <__multiply+0x144>
   293ec:	8825883a 	mov	r18,r17
   293f0:	7140000b 	ldhu	r5,0(r14)
   293f4:	4010d43a 	srli	r8,r8,16
   293f8:	193fffcc 	andi	r4,r3,65535
   293fc:	2fcb383a 	mul	r5,r5,ra
   29400:	7bc00104 	addi	r15,r15,4
   29404:	73800104 	addi	r14,r14,4
   29408:	2a0b883a 	add	r5,r5,r8
   2940c:	29cb883a 	add	r5,r5,r7
   29410:	2806943a 	slli	r3,r5,16
   29414:	94400104 	addi	r17,r18,4
   29418:	280ad43a 	srli	r5,r5,16
   2941c:	1908b03a 	or	r4,r3,r4
   29420:	793fff15 	stw	r4,-4(r15)
   29424:	70ffff17 	ldw	r3,-4(r14)
   29428:	8a000017 	ldw	r8,0(r17)
   2942c:	1806d43a 	srli	r3,r3,16
   29430:	413fffcc 	andi	r4,r8,65535
   29434:	1fc7383a 	mul	r3,r3,ra
   29438:	1907883a 	add	r3,r3,r4
   2943c:	1947883a 	add	r3,r3,r5
   29440:	180ed43a 	srli	r7,r3,16
   29444:	727fe936 	bltu	r14,r9,293ec <_gp+0xfffec5cc>
   29448:	90c00115 	stw	r3,4(r18)
   2944c:	31800104 	addi	r6,r6,4
   29450:	5ac00104 	addi	r11,r11,4
   29454:	333fbe36 	bltu	r6,r12,29350 <_gp+0xfffec530>
   29458:	0400090e 	bge	zero,r16,29480 <__multiply+0x1d4>
   2945c:	50ffff17 	ldw	r3,-4(r10)
   29460:	52bfff04 	addi	r10,r10,-4
   29464:	18000326 	beq	r3,zero,29474 <__multiply+0x1c8>
   29468:	00000506 	br	29480 <__multiply+0x1d4>
   2946c:	50c00017 	ldw	r3,0(r10)
   29470:	1800031e 	bne	r3,zero,29480 <__multiply+0x1d4>
   29474:	843fffc4 	addi	r16,r16,-1
   29478:	52bfff04 	addi	r10,r10,-4
   2947c:	803ffb1e 	bne	r16,zero,2946c <_gp+0xfffec64c>
   29480:	14000415 	stw	r16,16(r2)
   29484:	dfc00517 	ldw	ra,20(sp)
   29488:	dd000417 	ldw	r20,16(sp)
   2948c:	dcc00317 	ldw	r19,12(sp)
   29490:	dc800217 	ldw	r18,8(sp)
   29494:	dc400117 	ldw	r17,4(sp)
   29498:	dc000017 	ldw	r16,0(sp)
   2949c:	dec00604 	addi	sp,sp,24
   294a0:	f800283a 	ret

000294a4 <__pow5mult>:
   294a4:	defffa04 	addi	sp,sp,-24
   294a8:	dcc00315 	stw	r19,12(sp)
   294ac:	dc000015 	stw	r16,0(sp)
   294b0:	dfc00515 	stw	ra,20(sp)
   294b4:	dd000415 	stw	r20,16(sp)
   294b8:	dc800215 	stw	r18,8(sp)
   294bc:	dc400115 	stw	r17,4(sp)
   294c0:	308000cc 	andi	r2,r6,3
   294c4:	3021883a 	mov	r16,r6
   294c8:	2027883a 	mov	r19,r4
   294cc:	10002f1e 	bne	r2,zero,2958c <__pow5mult+0xe8>
   294d0:	2825883a 	mov	r18,r5
   294d4:	8021d0ba 	srai	r16,r16,2
   294d8:	80001a26 	beq	r16,zero,29544 <__pow5mult+0xa0>
   294dc:	9c401217 	ldw	r17,72(r19)
   294e0:	8800061e 	bne	r17,zero,294fc <__pow5mult+0x58>
   294e4:	00003406 	br	295b8 <__pow5mult+0x114>
   294e8:	8021d07a 	srai	r16,r16,1
   294ec:	80001526 	beq	r16,zero,29544 <__pow5mult+0xa0>
   294f0:	88800017 	ldw	r2,0(r17)
   294f4:	10001c26 	beq	r2,zero,29568 <__pow5mult+0xc4>
   294f8:	1023883a 	mov	r17,r2
   294fc:	8080004c 	andi	r2,r16,1
   29500:	103ff926 	beq	r2,zero,294e8 <_gp+0xfffec6c8>
   29504:	880d883a 	mov	r6,r17
   29508:	900b883a 	mov	r5,r18
   2950c:	9809883a 	mov	r4,r19
   29510:	00292ac0 	call	292ac <__multiply>
   29514:	90001b26 	beq	r18,zero,29584 <__pow5mult+0xe0>
   29518:	91000117 	ldw	r4,4(r18)
   2951c:	98c01317 	ldw	r3,76(r19)
   29520:	8021d07a 	srai	r16,r16,1
   29524:	2109883a 	add	r4,r4,r4
   29528:	2109883a 	add	r4,r4,r4
   2952c:	1907883a 	add	r3,r3,r4
   29530:	19000017 	ldw	r4,0(r3)
   29534:	91000015 	stw	r4,0(r18)
   29538:	1c800015 	stw	r18,0(r3)
   2953c:	1025883a 	mov	r18,r2
   29540:	803feb1e 	bne	r16,zero,294f0 <_gp+0xfffec6d0>
   29544:	9005883a 	mov	r2,r18
   29548:	dfc00517 	ldw	ra,20(sp)
   2954c:	dd000417 	ldw	r20,16(sp)
   29550:	dcc00317 	ldw	r19,12(sp)
   29554:	dc800217 	ldw	r18,8(sp)
   29558:	dc400117 	ldw	r17,4(sp)
   2955c:	dc000017 	ldw	r16,0(sp)
   29560:	dec00604 	addi	sp,sp,24
   29564:	f800283a 	ret
   29568:	880d883a 	mov	r6,r17
   2956c:	880b883a 	mov	r5,r17
   29570:	9809883a 	mov	r4,r19
   29574:	00292ac0 	call	292ac <__multiply>
   29578:	88800015 	stw	r2,0(r17)
   2957c:	10000015 	stw	zero,0(r2)
   29580:	003fdd06 	br	294f8 <_gp+0xfffec6d8>
   29584:	1025883a 	mov	r18,r2
   29588:	003fd706 	br	294e8 <_gp+0xfffec6c8>
   2958c:	10bfffc4 	addi	r2,r2,-1
   29590:	1085883a 	add	r2,r2,r2
   29594:	00c000f4 	movhi	r3,3
   29598:	18cc0a04 	addi	r3,r3,12328
   2959c:	1085883a 	add	r2,r2,r2
   295a0:	1885883a 	add	r2,r3,r2
   295a4:	11800017 	ldw	r6,0(r2)
   295a8:	000f883a 	mov	r7,zero
   295ac:	0028f340 	call	28f34 <__multadd>
   295b0:	1025883a 	mov	r18,r2
   295b4:	003fc706 	br	294d4 <_gp+0xfffec6b4>
   295b8:	05000044 	movi	r20,1
   295bc:	a00b883a 	mov	r5,r20
   295c0:	9809883a 	mov	r4,r19
   295c4:	0028e640 	call	28e64 <_Balloc>
   295c8:	1023883a 	mov	r17,r2
   295cc:	00809c44 	movi	r2,625
   295d0:	88800515 	stw	r2,20(r17)
   295d4:	8d000415 	stw	r20,16(r17)
   295d8:	9c401215 	stw	r17,72(r19)
   295dc:	88000015 	stw	zero,0(r17)
   295e0:	003fc606 	br	294fc <_gp+0xfffec6dc>

000295e4 <__lshift>:
   295e4:	defff904 	addi	sp,sp,-28
   295e8:	dd400515 	stw	r21,20(sp)
   295ec:	dcc00315 	stw	r19,12(sp)
   295f0:	302bd17a 	srai	r21,r6,5
   295f4:	2cc00417 	ldw	r19,16(r5)
   295f8:	28800217 	ldw	r2,8(r5)
   295fc:	dd000415 	stw	r20,16(sp)
   29600:	ace7883a 	add	r19,r21,r19
   29604:	dc800215 	stw	r18,8(sp)
   29608:	dc400115 	stw	r17,4(sp)
   2960c:	dc000015 	stw	r16,0(sp)
   29610:	dfc00615 	stw	ra,24(sp)
   29614:	9c000044 	addi	r16,r19,1
   29618:	2823883a 	mov	r17,r5
   2961c:	3029883a 	mov	r20,r6
   29620:	2025883a 	mov	r18,r4
   29624:	29400117 	ldw	r5,4(r5)
   29628:	1400030e 	bge	r2,r16,29638 <__lshift+0x54>
   2962c:	1085883a 	add	r2,r2,r2
   29630:	29400044 	addi	r5,r5,1
   29634:	143ffd16 	blt	r2,r16,2962c <_gp+0xfffec80c>
   29638:	9009883a 	mov	r4,r18
   2963c:	0028e640 	call	28e64 <_Balloc>
   29640:	10c00504 	addi	r3,r2,20
   29644:	0540070e 	bge	zero,r21,29664 <__lshift+0x80>
   29648:	ad6b883a 	add	r21,r21,r21
   2964c:	ad6b883a 	add	r21,r21,r21
   29650:	1809883a 	mov	r4,r3
   29654:	1d47883a 	add	r3,r3,r21
   29658:	20000015 	stw	zero,0(r4)
   2965c:	21000104 	addi	r4,r4,4
   29660:	193ffd1e 	bne	r3,r4,29658 <_gp+0xfffec838>
   29664:	8a000417 	ldw	r8,16(r17)
   29668:	89000504 	addi	r4,r17,20
   2966c:	a18007cc 	andi	r6,r20,31
   29670:	4211883a 	add	r8,r8,r8
   29674:	4211883a 	add	r8,r8,r8
   29678:	2211883a 	add	r8,r4,r8
   2967c:	30002326 	beq	r6,zero,2970c <__lshift+0x128>
   29680:	02400804 	movi	r9,32
   29684:	4993c83a 	sub	r9,r9,r6
   29688:	000b883a 	mov	r5,zero
   2968c:	21c00017 	ldw	r7,0(r4)
   29690:	1815883a 	mov	r10,r3
   29694:	18c00104 	addi	r3,r3,4
   29698:	398e983a 	sll	r7,r7,r6
   2969c:	21000104 	addi	r4,r4,4
   296a0:	394ab03a 	or	r5,r7,r5
   296a4:	197fff15 	stw	r5,-4(r3)
   296a8:	217fff17 	ldw	r5,-4(r4)
   296ac:	2a4ad83a 	srl	r5,r5,r9
   296b0:	223ff636 	bltu	r4,r8,2968c <_gp+0xfffec86c>
   296b4:	51400115 	stw	r5,4(r10)
   296b8:	28001a1e 	bne	r5,zero,29724 <__lshift+0x140>
   296bc:	843fffc4 	addi	r16,r16,-1
   296c0:	14000415 	stw	r16,16(r2)
   296c4:	88000826 	beq	r17,zero,296e8 <__lshift+0x104>
   296c8:	89000117 	ldw	r4,4(r17)
   296cc:	90c01317 	ldw	r3,76(r18)
   296d0:	2109883a 	add	r4,r4,r4
   296d4:	2109883a 	add	r4,r4,r4
   296d8:	1907883a 	add	r3,r3,r4
   296dc:	19000017 	ldw	r4,0(r3)
   296e0:	89000015 	stw	r4,0(r17)
   296e4:	1c400015 	stw	r17,0(r3)
   296e8:	dfc00617 	ldw	ra,24(sp)
   296ec:	dd400517 	ldw	r21,20(sp)
   296f0:	dd000417 	ldw	r20,16(sp)
   296f4:	dcc00317 	ldw	r19,12(sp)
   296f8:	dc800217 	ldw	r18,8(sp)
   296fc:	dc400117 	ldw	r17,4(sp)
   29700:	dc000017 	ldw	r16,0(sp)
   29704:	dec00704 	addi	sp,sp,28
   29708:	f800283a 	ret
   2970c:	21400017 	ldw	r5,0(r4)
   29710:	18c00104 	addi	r3,r3,4
   29714:	21000104 	addi	r4,r4,4
   29718:	197fff15 	stw	r5,-4(r3)
   2971c:	223ffb36 	bltu	r4,r8,2970c <_gp+0xfffec8ec>
   29720:	003fe606 	br	296bc <_gp+0xfffec89c>
   29724:	9c000084 	addi	r16,r19,2
   29728:	003fe406 	br	296bc <_gp+0xfffec89c>

0002972c <__mcmp>:
   2972c:	20800417 	ldw	r2,16(r4)
   29730:	28c00417 	ldw	r3,16(r5)
   29734:	10c5c83a 	sub	r2,r2,r3
   29738:	1000111e 	bne	r2,zero,29780 <__mcmp+0x54>
   2973c:	18c7883a 	add	r3,r3,r3
   29740:	18c7883a 	add	r3,r3,r3
   29744:	21000504 	addi	r4,r4,20
   29748:	29400504 	addi	r5,r5,20
   2974c:	20c5883a 	add	r2,r4,r3
   29750:	28cb883a 	add	r5,r5,r3
   29754:	00000106 	br	2975c <__mcmp+0x30>
   29758:	20800a2e 	bgeu	r4,r2,29784 <__mcmp+0x58>
   2975c:	10bfff04 	addi	r2,r2,-4
   29760:	297fff04 	addi	r5,r5,-4
   29764:	11800017 	ldw	r6,0(r2)
   29768:	28c00017 	ldw	r3,0(r5)
   2976c:	30fffa26 	beq	r6,r3,29758 <_gp+0xfffec938>
   29770:	30c00236 	bltu	r6,r3,2977c <__mcmp+0x50>
   29774:	00800044 	movi	r2,1
   29778:	f800283a 	ret
   2977c:	00bfffc4 	movi	r2,-1
   29780:	f800283a 	ret
   29784:	0005883a 	mov	r2,zero
   29788:	f800283a 	ret

0002978c <__mdiff>:
   2978c:	28c00417 	ldw	r3,16(r5)
   29790:	30800417 	ldw	r2,16(r6)
   29794:	defffa04 	addi	sp,sp,-24
   29798:	dcc00315 	stw	r19,12(sp)
   2979c:	dc800215 	stw	r18,8(sp)
   297a0:	dfc00515 	stw	ra,20(sp)
   297a4:	dd000415 	stw	r20,16(sp)
   297a8:	dc400115 	stw	r17,4(sp)
   297ac:	dc000015 	stw	r16,0(sp)
   297b0:	1887c83a 	sub	r3,r3,r2
   297b4:	2825883a 	mov	r18,r5
   297b8:	3027883a 	mov	r19,r6
   297bc:	1800141e 	bne	r3,zero,29810 <__mdiff+0x84>
   297c0:	1085883a 	add	r2,r2,r2
   297c4:	1085883a 	add	r2,r2,r2
   297c8:	2a000504 	addi	r8,r5,20
   297cc:	34000504 	addi	r16,r6,20
   297d0:	4087883a 	add	r3,r8,r2
   297d4:	8085883a 	add	r2,r16,r2
   297d8:	00000106 	br	297e0 <__mdiff+0x54>
   297dc:	40c0592e 	bgeu	r8,r3,29944 <__mdiff+0x1b8>
   297e0:	18ffff04 	addi	r3,r3,-4
   297e4:	10bfff04 	addi	r2,r2,-4
   297e8:	19c00017 	ldw	r7,0(r3)
   297ec:	11400017 	ldw	r5,0(r2)
   297f0:	397ffa26 	beq	r7,r5,297dc <_gp+0xfffec9bc>
   297f4:	3940592e 	bgeu	r7,r5,2995c <__mdiff+0x1d0>
   297f8:	9005883a 	mov	r2,r18
   297fc:	4023883a 	mov	r17,r8
   29800:	9825883a 	mov	r18,r19
   29804:	05000044 	movi	r20,1
   29808:	1027883a 	mov	r19,r2
   2980c:	00000406 	br	29820 <__mdiff+0x94>
   29810:	18005616 	blt	r3,zero,2996c <__mdiff+0x1e0>
   29814:	34400504 	addi	r17,r6,20
   29818:	2c000504 	addi	r16,r5,20
   2981c:	0029883a 	mov	r20,zero
   29820:	91400117 	ldw	r5,4(r18)
   29824:	0028e640 	call	28e64 <_Balloc>
   29828:	92400417 	ldw	r9,16(r18)
   2982c:	9b000417 	ldw	r12,16(r19)
   29830:	12c00504 	addi	r11,r2,20
   29834:	4a51883a 	add	r8,r9,r9
   29838:	6319883a 	add	r12,r12,r12
   2983c:	4211883a 	add	r8,r8,r8
   29840:	6319883a 	add	r12,r12,r12
   29844:	15000315 	stw	r20,12(r2)
   29848:	8211883a 	add	r8,r16,r8
   2984c:	8b19883a 	add	r12,r17,r12
   29850:	0007883a 	mov	r3,zero
   29854:	81400017 	ldw	r5,0(r16)
   29858:	89c00017 	ldw	r7,0(r17)
   2985c:	59800104 	addi	r6,r11,4
   29860:	293fffcc 	andi	r4,r5,65535
   29864:	20c7883a 	add	r3,r4,r3
   29868:	393fffcc 	andi	r4,r7,65535
   2986c:	1909c83a 	sub	r4,r3,r4
   29870:	280ad43a 	srli	r5,r5,16
   29874:	380ed43a 	srli	r7,r7,16
   29878:	2007d43a 	srai	r3,r4,16
   2987c:	213fffcc 	andi	r4,r4,65535
   29880:	29cbc83a 	sub	r5,r5,r7
   29884:	28c7883a 	add	r3,r5,r3
   29888:	180a943a 	slli	r5,r3,16
   2988c:	8c400104 	addi	r17,r17,4
   29890:	84000104 	addi	r16,r16,4
   29894:	2908b03a 	or	r4,r5,r4
   29898:	59000015 	stw	r4,0(r11)
   2989c:	1807d43a 	srai	r3,r3,16
   298a0:	3015883a 	mov	r10,r6
   298a4:	3017883a 	mov	r11,r6
   298a8:	8b3fea36 	bltu	r17,r12,29854 <_gp+0xfffeca34>
   298ac:	8200162e 	bgeu	r16,r8,29908 <__mdiff+0x17c>
   298b0:	8017883a 	mov	r11,r16
   298b4:	59400017 	ldw	r5,0(r11)
   298b8:	31800104 	addi	r6,r6,4
   298bc:	5ac00104 	addi	r11,r11,4
   298c0:	293fffcc 	andi	r4,r5,65535
   298c4:	20c7883a 	add	r3,r4,r3
   298c8:	280ed43a 	srli	r7,r5,16
   298cc:	180bd43a 	srai	r5,r3,16
   298d0:	193fffcc 	andi	r4,r3,65535
   298d4:	3947883a 	add	r3,r7,r5
   298d8:	180a943a 	slli	r5,r3,16
   298dc:	1807d43a 	srai	r3,r3,16
   298e0:	2908b03a 	or	r4,r5,r4
   298e4:	313fff15 	stw	r4,-4(r6)
   298e8:	5a3ff236 	bltu	r11,r8,298b4 <_gp+0xfffeca94>
   298ec:	0406303a 	nor	r3,zero,r16
   298f0:	1a07883a 	add	r3,r3,r8
   298f4:	1806d0ba 	srli	r3,r3,2
   298f8:	18c00044 	addi	r3,r3,1
   298fc:	18c7883a 	add	r3,r3,r3
   29900:	18c7883a 	add	r3,r3,r3
   29904:	50d5883a 	add	r10,r10,r3
   29908:	50ffff04 	addi	r3,r10,-4
   2990c:	2000041e 	bne	r4,zero,29920 <__mdiff+0x194>
   29910:	18ffff04 	addi	r3,r3,-4
   29914:	19000017 	ldw	r4,0(r3)
   29918:	4a7fffc4 	addi	r9,r9,-1
   2991c:	203ffc26 	beq	r4,zero,29910 <_gp+0xfffecaf0>
   29920:	12400415 	stw	r9,16(r2)
   29924:	dfc00517 	ldw	ra,20(sp)
   29928:	dd000417 	ldw	r20,16(sp)
   2992c:	dcc00317 	ldw	r19,12(sp)
   29930:	dc800217 	ldw	r18,8(sp)
   29934:	dc400117 	ldw	r17,4(sp)
   29938:	dc000017 	ldw	r16,0(sp)
   2993c:	dec00604 	addi	sp,sp,24
   29940:	f800283a 	ret
   29944:	000b883a 	mov	r5,zero
   29948:	0028e640 	call	28e64 <_Balloc>
   2994c:	00c00044 	movi	r3,1
   29950:	10c00415 	stw	r3,16(r2)
   29954:	10000515 	stw	zero,20(r2)
   29958:	003ff206 	br	29924 <_gp+0xfffecb04>
   2995c:	8023883a 	mov	r17,r16
   29960:	0029883a 	mov	r20,zero
   29964:	4021883a 	mov	r16,r8
   29968:	003fad06 	br	29820 <_gp+0xfffeca00>
   2996c:	9005883a 	mov	r2,r18
   29970:	94400504 	addi	r17,r18,20
   29974:	9c000504 	addi	r16,r19,20
   29978:	9825883a 	mov	r18,r19
   2997c:	05000044 	movi	r20,1
   29980:	1027883a 	mov	r19,r2
   29984:	003fa606 	br	29820 <_gp+0xfffeca00>

00029988 <__ulp>:
   29988:	295ffc2c 	andhi	r5,r5,32752
   2998c:	00bf3034 	movhi	r2,64704
   29990:	2887883a 	add	r3,r5,r2
   29994:	00c0020e 	bge	zero,r3,299a0 <__ulp+0x18>
   29998:	0005883a 	mov	r2,zero
   2999c:	f800283a 	ret
   299a0:	00c7c83a 	sub	r3,zero,r3
   299a4:	1807d53a 	srai	r3,r3,20
   299a8:	008004c4 	movi	r2,19
   299ac:	10c00b0e 	bge	r2,r3,299dc <__ulp+0x54>
   299b0:	18bffb04 	addi	r2,r3,-20
   299b4:	01000784 	movi	r4,30
   299b8:	0007883a 	mov	r3,zero
   299bc:	20800516 	blt	r4,r2,299d4 <__ulp+0x4c>
   299c0:	010007c4 	movi	r4,31
   299c4:	2089c83a 	sub	r4,r4,r2
   299c8:	00800044 	movi	r2,1
   299cc:	1104983a 	sll	r2,r2,r4
   299d0:	f800283a 	ret
   299d4:	00800044 	movi	r2,1
   299d8:	f800283a 	ret
   299dc:	01400234 	movhi	r5,8
   299e0:	28c7d83a 	sra	r3,r5,r3
   299e4:	0005883a 	mov	r2,zero
   299e8:	f800283a 	ret

000299ec <__b2d>:
   299ec:	defffa04 	addi	sp,sp,-24
   299f0:	dc000015 	stw	r16,0(sp)
   299f4:	24000417 	ldw	r16,16(r4)
   299f8:	dc400115 	stw	r17,4(sp)
   299fc:	24400504 	addi	r17,r4,20
   29a00:	8421883a 	add	r16,r16,r16
   29a04:	8421883a 	add	r16,r16,r16
   29a08:	8c21883a 	add	r16,r17,r16
   29a0c:	dc800215 	stw	r18,8(sp)
   29a10:	84bfff17 	ldw	r18,-4(r16)
   29a14:	dd000415 	stw	r20,16(sp)
   29a18:	dcc00315 	stw	r19,12(sp)
   29a1c:	9009883a 	mov	r4,r18
   29a20:	2829883a 	mov	r20,r5
   29a24:	dfc00515 	stw	ra,20(sp)
   29a28:	00291580 	call	29158 <__hi0bits>
   29a2c:	00c00804 	movi	r3,32
   29a30:	1889c83a 	sub	r4,r3,r2
   29a34:	a1000015 	stw	r4,0(r20)
   29a38:	01000284 	movi	r4,10
   29a3c:	84ffff04 	addi	r19,r16,-4
   29a40:	20801216 	blt	r4,r2,29a8c <__b2d+0xa0>
   29a44:	018002c4 	movi	r6,11
   29a48:	308dc83a 	sub	r6,r6,r2
   29a4c:	9186d83a 	srl	r3,r18,r6
   29a50:	18cffc34 	orhi	r3,r3,16368
   29a54:	8cc0212e 	bgeu	r17,r19,29adc <__b2d+0xf0>
   29a58:	813ffe17 	ldw	r4,-8(r16)
   29a5c:	218cd83a 	srl	r6,r4,r6
   29a60:	10800544 	addi	r2,r2,21
   29a64:	9084983a 	sll	r2,r18,r2
   29a68:	1184b03a 	or	r2,r2,r6
   29a6c:	dfc00517 	ldw	ra,20(sp)
   29a70:	dd000417 	ldw	r20,16(sp)
   29a74:	dcc00317 	ldw	r19,12(sp)
   29a78:	dc800217 	ldw	r18,8(sp)
   29a7c:	dc400117 	ldw	r17,4(sp)
   29a80:	dc000017 	ldw	r16,0(sp)
   29a84:	dec00604 	addi	sp,sp,24
   29a88:	f800283a 	ret
   29a8c:	8cc00f2e 	bgeu	r17,r19,29acc <__b2d+0xe0>
   29a90:	117ffd44 	addi	r5,r2,-11
   29a94:	80bffe17 	ldw	r2,-8(r16)
   29a98:	28000e26 	beq	r5,zero,29ad4 <__b2d+0xe8>
   29a9c:	1949c83a 	sub	r4,r3,r5
   29aa0:	9164983a 	sll	r18,r18,r5
   29aa4:	1106d83a 	srl	r3,r2,r4
   29aa8:	81bffe04 	addi	r6,r16,-8
   29aac:	948ffc34 	orhi	r18,r18,16368
   29ab0:	90c6b03a 	or	r3,r18,r3
   29ab4:	89800e2e 	bgeu	r17,r6,29af0 <__b2d+0x104>
   29ab8:	81bffd17 	ldw	r6,-12(r16)
   29abc:	1144983a 	sll	r2,r2,r5
   29ac0:	310ad83a 	srl	r5,r6,r4
   29ac4:	2884b03a 	or	r2,r5,r2
   29ac8:	003fe806 	br	29a6c <_gp+0xfffecc4c>
   29acc:	10bffd44 	addi	r2,r2,-11
   29ad0:	1000041e 	bne	r2,zero,29ae4 <__b2d+0xf8>
   29ad4:	90cffc34 	orhi	r3,r18,16368
   29ad8:	003fe406 	br	29a6c <_gp+0xfffecc4c>
   29adc:	000d883a 	mov	r6,zero
   29ae0:	003fdf06 	br	29a60 <_gp+0xfffecc40>
   29ae4:	90a4983a 	sll	r18,r18,r2
   29ae8:	0005883a 	mov	r2,zero
   29aec:	003ff906 	br	29ad4 <_gp+0xfffeccb4>
   29af0:	1144983a 	sll	r2,r2,r5
   29af4:	003fdd06 	br	29a6c <_gp+0xfffecc4c>

00029af8 <__d2b>:
   29af8:	defff804 	addi	sp,sp,-32
   29afc:	dc000215 	stw	r16,8(sp)
   29b00:	3021883a 	mov	r16,r6
   29b04:	dc400315 	stw	r17,12(sp)
   29b08:	8022907a 	slli	r17,r16,1
   29b0c:	dd000615 	stw	r20,24(sp)
   29b10:	2829883a 	mov	r20,r5
   29b14:	01400044 	movi	r5,1
   29b18:	dcc00515 	stw	r19,20(sp)
   29b1c:	dc800415 	stw	r18,16(sp)
   29b20:	dfc00715 	stw	ra,28(sp)
   29b24:	3825883a 	mov	r18,r7
   29b28:	8822d57a 	srli	r17,r17,21
   29b2c:	0028e640 	call	28e64 <_Balloc>
   29b30:	1027883a 	mov	r19,r2
   29b34:	00800434 	movhi	r2,16
   29b38:	10bfffc4 	addi	r2,r2,-1
   29b3c:	808c703a 	and	r6,r16,r2
   29b40:	88000126 	beq	r17,zero,29b48 <__d2b+0x50>
   29b44:	31800434 	orhi	r6,r6,16
   29b48:	d9800015 	stw	r6,0(sp)
   29b4c:	a0002426 	beq	r20,zero,29be0 <__d2b+0xe8>
   29b50:	d9000104 	addi	r4,sp,4
   29b54:	dd000115 	stw	r20,4(sp)
   29b58:	00291c00 	call	291c0 <__lo0bits>
   29b5c:	d8c00017 	ldw	r3,0(sp)
   29b60:	10002f1e 	bne	r2,zero,29c20 <__d2b+0x128>
   29b64:	d9000117 	ldw	r4,4(sp)
   29b68:	99000515 	stw	r4,20(r19)
   29b6c:	1821003a 	cmpeq	r16,r3,zero
   29b70:	01000084 	movi	r4,2
   29b74:	2421c83a 	sub	r16,r4,r16
   29b78:	98c00615 	stw	r3,24(r19)
   29b7c:	9c000415 	stw	r16,16(r19)
   29b80:	88001f1e 	bne	r17,zero,29c00 <__d2b+0x108>
   29b84:	10bef384 	addi	r2,r2,-1074
   29b88:	90800015 	stw	r2,0(r18)
   29b8c:	00900034 	movhi	r2,16384
   29b90:	10bfffc4 	addi	r2,r2,-1
   29b94:	8085883a 	add	r2,r16,r2
   29b98:	1085883a 	add	r2,r2,r2
   29b9c:	1085883a 	add	r2,r2,r2
   29ba0:	9885883a 	add	r2,r19,r2
   29ba4:	11000517 	ldw	r4,20(r2)
   29ba8:	8020917a 	slli	r16,r16,5
   29bac:	00291580 	call	29158 <__hi0bits>
   29bb0:	d8c00817 	ldw	r3,32(sp)
   29bb4:	8085c83a 	sub	r2,r16,r2
   29bb8:	18800015 	stw	r2,0(r3)
   29bbc:	9805883a 	mov	r2,r19
   29bc0:	dfc00717 	ldw	ra,28(sp)
   29bc4:	dd000617 	ldw	r20,24(sp)
   29bc8:	dcc00517 	ldw	r19,20(sp)
   29bcc:	dc800417 	ldw	r18,16(sp)
   29bd0:	dc400317 	ldw	r17,12(sp)
   29bd4:	dc000217 	ldw	r16,8(sp)
   29bd8:	dec00804 	addi	sp,sp,32
   29bdc:	f800283a 	ret
   29be0:	d809883a 	mov	r4,sp
   29be4:	00291c00 	call	291c0 <__lo0bits>
   29be8:	d8c00017 	ldw	r3,0(sp)
   29bec:	04000044 	movi	r16,1
   29bf0:	9c000415 	stw	r16,16(r19)
   29bf4:	98c00515 	stw	r3,20(r19)
   29bf8:	10800804 	addi	r2,r2,32
   29bfc:	883fe126 	beq	r17,zero,29b84 <_gp+0xfffecd64>
   29c00:	00c00d44 	movi	r3,53
   29c04:	8c7ef344 	addi	r17,r17,-1075
   29c08:	88a3883a 	add	r17,r17,r2
   29c0c:	1885c83a 	sub	r2,r3,r2
   29c10:	d8c00817 	ldw	r3,32(sp)
   29c14:	94400015 	stw	r17,0(r18)
   29c18:	18800015 	stw	r2,0(r3)
   29c1c:	003fe706 	br	29bbc <_gp+0xfffecd9c>
   29c20:	01000804 	movi	r4,32
   29c24:	2089c83a 	sub	r4,r4,r2
   29c28:	1908983a 	sll	r4,r3,r4
   29c2c:	d9400117 	ldw	r5,4(sp)
   29c30:	1886d83a 	srl	r3,r3,r2
   29c34:	2148b03a 	or	r4,r4,r5
   29c38:	99000515 	stw	r4,20(r19)
   29c3c:	d8c00015 	stw	r3,0(sp)
   29c40:	003fca06 	br	29b6c <_gp+0xfffecd4c>

00029c44 <__ratio>:
   29c44:	defff904 	addi	sp,sp,-28
   29c48:	dc400315 	stw	r17,12(sp)
   29c4c:	2823883a 	mov	r17,r5
   29c50:	d9400104 	addi	r5,sp,4
   29c54:	dfc00615 	stw	ra,24(sp)
   29c58:	dcc00515 	stw	r19,20(sp)
   29c5c:	dc800415 	stw	r18,16(sp)
   29c60:	2027883a 	mov	r19,r4
   29c64:	dc000215 	stw	r16,8(sp)
   29c68:	00299ec0 	call	299ec <__b2d>
   29c6c:	d80b883a 	mov	r5,sp
   29c70:	8809883a 	mov	r4,r17
   29c74:	1025883a 	mov	r18,r2
   29c78:	1821883a 	mov	r16,r3
   29c7c:	00299ec0 	call	299ec <__b2d>
   29c80:	8a000417 	ldw	r8,16(r17)
   29c84:	99000417 	ldw	r4,16(r19)
   29c88:	d9400117 	ldw	r5,4(sp)
   29c8c:	2209c83a 	sub	r4,r4,r8
   29c90:	2010917a 	slli	r8,r4,5
   29c94:	d9000017 	ldw	r4,0(sp)
   29c98:	2909c83a 	sub	r4,r5,r4
   29c9c:	4109883a 	add	r4,r8,r4
   29ca0:	01000e0e 	bge	zero,r4,29cdc <__ratio+0x98>
   29ca4:	2008953a 	slli	r4,r4,20
   29ca8:	2421883a 	add	r16,r4,r16
   29cac:	100d883a 	mov	r6,r2
   29cb0:	180f883a 	mov	r7,r3
   29cb4:	9009883a 	mov	r4,r18
   29cb8:	800b883a 	mov	r5,r16
   29cbc:	002da000 	call	2da00 <__divdf3>
   29cc0:	dfc00617 	ldw	ra,24(sp)
   29cc4:	dcc00517 	ldw	r19,20(sp)
   29cc8:	dc800417 	ldw	r18,16(sp)
   29ccc:	dc400317 	ldw	r17,12(sp)
   29cd0:	dc000217 	ldw	r16,8(sp)
   29cd4:	dec00704 	addi	sp,sp,28
   29cd8:	f800283a 	ret
   29cdc:	2008953a 	slli	r4,r4,20
   29ce0:	1907c83a 	sub	r3,r3,r4
   29ce4:	003ff106 	br	29cac <_gp+0xfffece8c>

00029ce8 <_mprec_log10>:
   29ce8:	defffe04 	addi	sp,sp,-8
   29cec:	dc000015 	stw	r16,0(sp)
   29cf0:	dfc00115 	stw	ra,4(sp)
   29cf4:	008005c4 	movi	r2,23
   29cf8:	2021883a 	mov	r16,r4
   29cfc:	11000d0e 	bge	r2,r4,29d34 <_mprec_log10+0x4c>
   29d00:	0005883a 	mov	r2,zero
   29d04:	00cffc34 	movhi	r3,16368
   29d08:	843fffc4 	addi	r16,r16,-1
   29d0c:	000d883a 	mov	r6,zero
   29d10:	01d00934 	movhi	r7,16420
   29d14:	1009883a 	mov	r4,r2
   29d18:	180b883a 	mov	r5,r3
   29d1c:	002e5400 	call	2e540 <__muldf3>
   29d20:	803ff91e 	bne	r16,zero,29d08 <_gp+0xfffecee8>
   29d24:	dfc00117 	ldw	ra,4(sp)
   29d28:	dc000017 	ldw	r16,0(sp)
   29d2c:	dec00204 	addi	sp,sp,8
   29d30:	f800283a 	ret
   29d34:	202090fa 	slli	r16,r4,3
   29d38:	008000f4 	movhi	r2,3
   29d3c:	108c2104 	addi	r2,r2,12420
   29d40:	1421883a 	add	r16,r2,r16
   29d44:	80800017 	ldw	r2,0(r16)
   29d48:	80c00117 	ldw	r3,4(r16)
   29d4c:	dfc00117 	ldw	ra,4(sp)
   29d50:	dc000017 	ldw	r16,0(sp)
   29d54:	dec00204 	addi	sp,sp,8
   29d58:	f800283a 	ret

00029d5c <__copybits>:
   29d5c:	297fffc4 	addi	r5,r5,-1
   29d60:	280fd17a 	srai	r7,r5,5
   29d64:	30c00417 	ldw	r3,16(r6)
   29d68:	30800504 	addi	r2,r6,20
   29d6c:	39c00044 	addi	r7,r7,1
   29d70:	18c7883a 	add	r3,r3,r3
   29d74:	39cf883a 	add	r7,r7,r7
   29d78:	18c7883a 	add	r3,r3,r3
   29d7c:	39cf883a 	add	r7,r7,r7
   29d80:	10c7883a 	add	r3,r2,r3
   29d84:	21cf883a 	add	r7,r4,r7
   29d88:	10c00d2e 	bgeu	r2,r3,29dc0 <__copybits+0x64>
   29d8c:	200b883a 	mov	r5,r4
   29d90:	12000017 	ldw	r8,0(r2)
   29d94:	29400104 	addi	r5,r5,4
   29d98:	10800104 	addi	r2,r2,4
   29d9c:	2a3fff15 	stw	r8,-4(r5)
   29da0:	10fffb36 	bltu	r2,r3,29d90 <_gp+0xfffecf70>
   29da4:	1985c83a 	sub	r2,r3,r6
   29da8:	10bffac4 	addi	r2,r2,-21
   29dac:	1004d0ba 	srli	r2,r2,2
   29db0:	10800044 	addi	r2,r2,1
   29db4:	1085883a 	add	r2,r2,r2
   29db8:	1085883a 	add	r2,r2,r2
   29dbc:	2089883a 	add	r4,r4,r2
   29dc0:	21c0032e 	bgeu	r4,r7,29dd0 <__copybits+0x74>
   29dc4:	20000015 	stw	zero,0(r4)
   29dc8:	21000104 	addi	r4,r4,4
   29dcc:	21fffd36 	bltu	r4,r7,29dc4 <_gp+0xfffecfa4>
   29dd0:	f800283a 	ret

00029dd4 <__any_on>:
   29dd4:	20c00417 	ldw	r3,16(r4)
   29dd8:	2805d17a 	srai	r2,r5,5
   29ddc:	21000504 	addi	r4,r4,20
   29de0:	18800d0e 	bge	r3,r2,29e18 <__any_on+0x44>
   29de4:	18c7883a 	add	r3,r3,r3
   29de8:	18c7883a 	add	r3,r3,r3
   29dec:	20c7883a 	add	r3,r4,r3
   29df0:	20c0192e 	bgeu	r4,r3,29e58 <__any_on+0x84>
   29df4:	18bfff17 	ldw	r2,-4(r3)
   29df8:	18ffff04 	addi	r3,r3,-4
   29dfc:	1000041e 	bne	r2,zero,29e10 <__any_on+0x3c>
   29e00:	20c0142e 	bgeu	r4,r3,29e54 <__any_on+0x80>
   29e04:	18ffff04 	addi	r3,r3,-4
   29e08:	19400017 	ldw	r5,0(r3)
   29e0c:	283ffc26 	beq	r5,zero,29e00 <_gp+0xfffecfe0>
   29e10:	00800044 	movi	r2,1
   29e14:	f800283a 	ret
   29e18:	10c00a0e 	bge	r2,r3,29e44 <__any_on+0x70>
   29e1c:	1085883a 	add	r2,r2,r2
   29e20:	1085883a 	add	r2,r2,r2
   29e24:	294007cc 	andi	r5,r5,31
   29e28:	2087883a 	add	r3,r4,r2
   29e2c:	283ff026 	beq	r5,zero,29df0 <_gp+0xfffecfd0>
   29e30:	19800017 	ldw	r6,0(r3)
   29e34:	3144d83a 	srl	r2,r6,r5
   29e38:	114a983a 	sll	r5,r2,r5
   29e3c:	317ff41e 	bne	r6,r5,29e10 <_gp+0xfffecff0>
   29e40:	003feb06 	br	29df0 <_gp+0xfffecfd0>
   29e44:	1085883a 	add	r2,r2,r2
   29e48:	1085883a 	add	r2,r2,r2
   29e4c:	2087883a 	add	r3,r4,r2
   29e50:	003fe706 	br	29df0 <_gp+0xfffecfd0>
   29e54:	f800283a 	ret
   29e58:	0005883a 	mov	r2,zero
   29e5c:	f800283a 	ret

00029e60 <_realloc_r>:
   29e60:	defff604 	addi	sp,sp,-40
   29e64:	dc800215 	stw	r18,8(sp)
   29e68:	dfc00915 	stw	ra,36(sp)
   29e6c:	df000815 	stw	fp,32(sp)
   29e70:	ddc00715 	stw	r23,28(sp)
   29e74:	dd800615 	stw	r22,24(sp)
   29e78:	dd400515 	stw	r21,20(sp)
   29e7c:	dd000415 	stw	r20,16(sp)
   29e80:	dcc00315 	stw	r19,12(sp)
   29e84:	dc400115 	stw	r17,4(sp)
   29e88:	dc000015 	stw	r16,0(sp)
   29e8c:	3025883a 	mov	r18,r6
   29e90:	2800b726 	beq	r5,zero,2a170 <_realloc_r+0x310>
   29e94:	282b883a 	mov	r21,r5
   29e98:	2029883a 	mov	r20,r4
   29e9c:	00300540 	call	30054 <__malloc_lock>
   29ea0:	a8bfff17 	ldw	r2,-4(r21)
   29ea4:	043fff04 	movi	r16,-4
   29ea8:	90c002c4 	addi	r3,r18,11
   29eac:	01000584 	movi	r4,22
   29eb0:	acfffe04 	addi	r19,r21,-8
   29eb4:	1420703a 	and	r16,r2,r16
   29eb8:	20c0332e 	bgeu	r4,r3,29f88 <_realloc_r+0x128>
   29ebc:	047ffe04 	movi	r17,-8
   29ec0:	1c62703a 	and	r17,r3,r17
   29ec4:	8807883a 	mov	r3,r17
   29ec8:	88005816 	blt	r17,zero,2a02c <_realloc_r+0x1cc>
   29ecc:	8c805736 	bltu	r17,r18,2a02c <_realloc_r+0x1cc>
   29ed0:	80c0300e 	bge	r16,r3,29f94 <_realloc_r+0x134>
   29ed4:	070000f4 	movhi	fp,3
   29ed8:	e70cac04 	addi	fp,fp,12976
   29edc:	e1c00217 	ldw	r7,8(fp)
   29ee0:	9c09883a 	add	r4,r19,r16
   29ee4:	22000117 	ldw	r8,4(r4)
   29ee8:	21c06326 	beq	r4,r7,2a078 <_realloc_r+0x218>
   29eec:	017fff84 	movi	r5,-2
   29ef0:	414a703a 	and	r5,r8,r5
   29ef4:	214b883a 	add	r5,r4,r5
   29ef8:	29800117 	ldw	r6,4(r5)
   29efc:	3180004c 	andi	r6,r6,1
   29f00:	30003f26 	beq	r6,zero,2a000 <_realloc_r+0x1a0>
   29f04:	1080004c 	andi	r2,r2,1
   29f08:	10008326 	beq	r2,zero,2a118 <_realloc_r+0x2b8>
   29f0c:	900b883a 	mov	r5,r18
   29f10:	a009883a 	mov	r4,r20
   29f14:	0022b980 	call	22b98 <_malloc_r>
   29f18:	1025883a 	mov	r18,r2
   29f1c:	10011e26 	beq	r2,zero,2a398 <_realloc_r+0x538>
   29f20:	a93fff17 	ldw	r4,-4(r21)
   29f24:	10fffe04 	addi	r3,r2,-8
   29f28:	00bfff84 	movi	r2,-2
   29f2c:	2084703a 	and	r2,r4,r2
   29f30:	9885883a 	add	r2,r19,r2
   29f34:	1880ee26 	beq	r3,r2,2a2f0 <_realloc_r+0x490>
   29f38:	81bfff04 	addi	r6,r16,-4
   29f3c:	00800904 	movi	r2,36
   29f40:	1180b836 	bltu	r2,r6,2a224 <_realloc_r+0x3c4>
   29f44:	00c004c4 	movi	r3,19
   29f48:	19809636 	bltu	r3,r6,2a1a4 <_realloc_r+0x344>
   29f4c:	9005883a 	mov	r2,r18
   29f50:	a807883a 	mov	r3,r21
   29f54:	19000017 	ldw	r4,0(r3)
   29f58:	11000015 	stw	r4,0(r2)
   29f5c:	19000117 	ldw	r4,4(r3)
   29f60:	11000115 	stw	r4,4(r2)
   29f64:	18c00217 	ldw	r3,8(r3)
   29f68:	10c00215 	stw	r3,8(r2)
   29f6c:	a80b883a 	mov	r5,r21
   29f70:	a009883a 	mov	r4,r20
   29f74:	0027ef00 	call	27ef0 <_free_r>
   29f78:	a009883a 	mov	r4,r20
   29f7c:	00300780 	call	30078 <__malloc_unlock>
   29f80:	9005883a 	mov	r2,r18
   29f84:	00001206 	br	29fd0 <_realloc_r+0x170>
   29f88:	00c00404 	movi	r3,16
   29f8c:	1823883a 	mov	r17,r3
   29f90:	003fce06 	br	29ecc <_gp+0xfffed0ac>
   29f94:	a825883a 	mov	r18,r21
   29f98:	8445c83a 	sub	r2,r16,r17
   29f9c:	00c003c4 	movi	r3,15
   29fa0:	18802636 	bltu	r3,r2,2a03c <_realloc_r+0x1dc>
   29fa4:	99800117 	ldw	r6,4(r19)
   29fa8:	9c07883a 	add	r3,r19,r16
   29fac:	3180004c 	andi	r6,r6,1
   29fb0:	3420b03a 	or	r16,r6,r16
   29fb4:	9c000115 	stw	r16,4(r19)
   29fb8:	18800117 	ldw	r2,4(r3)
   29fbc:	10800054 	ori	r2,r2,1
   29fc0:	18800115 	stw	r2,4(r3)
   29fc4:	a009883a 	mov	r4,r20
   29fc8:	00300780 	call	30078 <__malloc_unlock>
   29fcc:	9005883a 	mov	r2,r18
   29fd0:	dfc00917 	ldw	ra,36(sp)
   29fd4:	df000817 	ldw	fp,32(sp)
   29fd8:	ddc00717 	ldw	r23,28(sp)
   29fdc:	dd800617 	ldw	r22,24(sp)
   29fe0:	dd400517 	ldw	r21,20(sp)
   29fe4:	dd000417 	ldw	r20,16(sp)
   29fe8:	dcc00317 	ldw	r19,12(sp)
   29fec:	dc800217 	ldw	r18,8(sp)
   29ff0:	dc400117 	ldw	r17,4(sp)
   29ff4:	dc000017 	ldw	r16,0(sp)
   29ff8:	dec00a04 	addi	sp,sp,40
   29ffc:	f800283a 	ret
   2a000:	017fff04 	movi	r5,-4
   2a004:	414a703a 	and	r5,r8,r5
   2a008:	814d883a 	add	r6,r16,r5
   2a00c:	30c01f16 	blt	r6,r3,2a08c <_realloc_r+0x22c>
   2a010:	20800317 	ldw	r2,12(r4)
   2a014:	20c00217 	ldw	r3,8(r4)
   2a018:	a825883a 	mov	r18,r21
   2a01c:	3021883a 	mov	r16,r6
   2a020:	18800315 	stw	r2,12(r3)
   2a024:	10c00215 	stw	r3,8(r2)
   2a028:	003fdb06 	br	29f98 <_gp+0xfffed178>
   2a02c:	00800304 	movi	r2,12
   2a030:	a0800015 	stw	r2,0(r20)
   2a034:	0005883a 	mov	r2,zero
   2a038:	003fe506 	br	29fd0 <_gp+0xfffed1b0>
   2a03c:	98c00117 	ldw	r3,4(r19)
   2a040:	9c4b883a 	add	r5,r19,r17
   2a044:	11000054 	ori	r4,r2,1
   2a048:	18c0004c 	andi	r3,r3,1
   2a04c:	1c62b03a 	or	r17,r3,r17
   2a050:	9c400115 	stw	r17,4(r19)
   2a054:	29000115 	stw	r4,4(r5)
   2a058:	2885883a 	add	r2,r5,r2
   2a05c:	10c00117 	ldw	r3,4(r2)
   2a060:	29400204 	addi	r5,r5,8
   2a064:	a009883a 	mov	r4,r20
   2a068:	18c00054 	ori	r3,r3,1
   2a06c:	10c00115 	stw	r3,4(r2)
   2a070:	0027ef00 	call	27ef0 <_free_r>
   2a074:	003fd306 	br	29fc4 <_gp+0xfffed1a4>
   2a078:	017fff04 	movi	r5,-4
   2a07c:	414a703a 	and	r5,r8,r5
   2a080:	89800404 	addi	r6,r17,16
   2a084:	8151883a 	add	r8,r16,r5
   2a088:	4180590e 	bge	r8,r6,2a1f0 <_realloc_r+0x390>
   2a08c:	1080004c 	andi	r2,r2,1
   2a090:	103f9e1e 	bne	r2,zero,29f0c <_gp+0xfffed0ec>
   2a094:	adbffe17 	ldw	r22,-8(r21)
   2a098:	00bfff04 	movi	r2,-4
   2a09c:	9dadc83a 	sub	r22,r19,r22
   2a0a0:	b1800117 	ldw	r6,4(r22)
   2a0a4:	3084703a 	and	r2,r6,r2
   2a0a8:	20002026 	beq	r4,zero,2a12c <_realloc_r+0x2cc>
   2a0ac:	80af883a 	add	r23,r16,r2
   2a0b0:	b96f883a 	add	r23,r23,r5
   2a0b4:	21c05f26 	beq	r4,r7,2a234 <_realloc_r+0x3d4>
   2a0b8:	b8c01c16 	blt	r23,r3,2a12c <_realloc_r+0x2cc>
   2a0bc:	20800317 	ldw	r2,12(r4)
   2a0c0:	20c00217 	ldw	r3,8(r4)
   2a0c4:	81bfff04 	addi	r6,r16,-4
   2a0c8:	01000904 	movi	r4,36
   2a0cc:	18800315 	stw	r2,12(r3)
   2a0d0:	10c00215 	stw	r3,8(r2)
   2a0d4:	b0c00217 	ldw	r3,8(r22)
   2a0d8:	b0800317 	ldw	r2,12(r22)
   2a0dc:	b4800204 	addi	r18,r22,8
   2a0e0:	18800315 	stw	r2,12(r3)
   2a0e4:	10c00215 	stw	r3,8(r2)
   2a0e8:	21801b36 	bltu	r4,r6,2a158 <_realloc_r+0x2f8>
   2a0ec:	008004c4 	movi	r2,19
   2a0f0:	1180352e 	bgeu	r2,r6,2a1c8 <_realloc_r+0x368>
   2a0f4:	a8800017 	ldw	r2,0(r21)
   2a0f8:	b0800215 	stw	r2,8(r22)
   2a0fc:	a8800117 	ldw	r2,4(r21)
   2a100:	b0800315 	stw	r2,12(r22)
   2a104:	008006c4 	movi	r2,27
   2a108:	11807f36 	bltu	r2,r6,2a308 <_realloc_r+0x4a8>
   2a10c:	b0800404 	addi	r2,r22,16
   2a110:	ad400204 	addi	r21,r21,8
   2a114:	00002d06 	br	2a1cc <_realloc_r+0x36c>
   2a118:	adbffe17 	ldw	r22,-8(r21)
   2a11c:	00bfff04 	movi	r2,-4
   2a120:	9dadc83a 	sub	r22,r19,r22
   2a124:	b1000117 	ldw	r4,4(r22)
   2a128:	2084703a 	and	r2,r4,r2
   2a12c:	b03f7726 	beq	r22,zero,29f0c <_gp+0xfffed0ec>
   2a130:	80af883a 	add	r23,r16,r2
   2a134:	b8ff7516 	blt	r23,r3,29f0c <_gp+0xfffed0ec>
   2a138:	b0800317 	ldw	r2,12(r22)
   2a13c:	b0c00217 	ldw	r3,8(r22)
   2a140:	81bfff04 	addi	r6,r16,-4
   2a144:	01000904 	movi	r4,36
   2a148:	18800315 	stw	r2,12(r3)
   2a14c:	10c00215 	stw	r3,8(r2)
   2a150:	b4800204 	addi	r18,r22,8
   2a154:	21bfe52e 	bgeu	r4,r6,2a0ec <_gp+0xfffed2cc>
   2a158:	a80b883a 	mov	r5,r21
   2a15c:	9009883a 	mov	r4,r18
   2a160:	0028d080 	call	28d08 <memmove>
   2a164:	b821883a 	mov	r16,r23
   2a168:	b027883a 	mov	r19,r22
   2a16c:	003f8a06 	br	29f98 <_gp+0xfffed178>
   2a170:	300b883a 	mov	r5,r6
   2a174:	dfc00917 	ldw	ra,36(sp)
   2a178:	df000817 	ldw	fp,32(sp)
   2a17c:	ddc00717 	ldw	r23,28(sp)
   2a180:	dd800617 	ldw	r22,24(sp)
   2a184:	dd400517 	ldw	r21,20(sp)
   2a188:	dd000417 	ldw	r20,16(sp)
   2a18c:	dcc00317 	ldw	r19,12(sp)
   2a190:	dc800217 	ldw	r18,8(sp)
   2a194:	dc400117 	ldw	r17,4(sp)
   2a198:	dc000017 	ldw	r16,0(sp)
   2a19c:	dec00a04 	addi	sp,sp,40
   2a1a0:	0022b981 	jmpi	22b98 <_malloc_r>
   2a1a4:	a8c00017 	ldw	r3,0(r21)
   2a1a8:	90c00015 	stw	r3,0(r18)
   2a1ac:	a8c00117 	ldw	r3,4(r21)
   2a1b0:	90c00115 	stw	r3,4(r18)
   2a1b4:	00c006c4 	movi	r3,27
   2a1b8:	19804536 	bltu	r3,r6,2a2d0 <_realloc_r+0x470>
   2a1bc:	90800204 	addi	r2,r18,8
   2a1c0:	a8c00204 	addi	r3,r21,8
   2a1c4:	003f6306 	br	29f54 <_gp+0xfffed134>
   2a1c8:	9005883a 	mov	r2,r18
   2a1cc:	a8c00017 	ldw	r3,0(r21)
   2a1d0:	b821883a 	mov	r16,r23
   2a1d4:	b027883a 	mov	r19,r22
   2a1d8:	10c00015 	stw	r3,0(r2)
   2a1dc:	a8c00117 	ldw	r3,4(r21)
   2a1e0:	10c00115 	stw	r3,4(r2)
   2a1e4:	a8c00217 	ldw	r3,8(r21)
   2a1e8:	10c00215 	stw	r3,8(r2)
   2a1ec:	003f6a06 	br	29f98 <_gp+0xfffed178>
   2a1f0:	9c67883a 	add	r19,r19,r17
   2a1f4:	4445c83a 	sub	r2,r8,r17
   2a1f8:	e4c00215 	stw	r19,8(fp)
   2a1fc:	10800054 	ori	r2,r2,1
   2a200:	98800115 	stw	r2,4(r19)
   2a204:	a8bfff17 	ldw	r2,-4(r21)
   2a208:	a009883a 	mov	r4,r20
   2a20c:	1080004c 	andi	r2,r2,1
   2a210:	1462b03a 	or	r17,r2,r17
   2a214:	ac7fff15 	stw	r17,-4(r21)
   2a218:	00300780 	call	30078 <__malloc_unlock>
   2a21c:	a805883a 	mov	r2,r21
   2a220:	003f6b06 	br	29fd0 <_gp+0xfffed1b0>
   2a224:	a80b883a 	mov	r5,r21
   2a228:	9009883a 	mov	r4,r18
   2a22c:	0028d080 	call	28d08 <memmove>
   2a230:	003f4e06 	br	29f6c <_gp+0xfffed14c>
   2a234:	89000404 	addi	r4,r17,16
   2a238:	b93fbc16 	blt	r23,r4,2a12c <_gp+0xfffed30c>
   2a23c:	b0800317 	ldw	r2,12(r22)
   2a240:	b0c00217 	ldw	r3,8(r22)
   2a244:	81bfff04 	addi	r6,r16,-4
   2a248:	01000904 	movi	r4,36
   2a24c:	18800315 	stw	r2,12(r3)
   2a250:	10c00215 	stw	r3,8(r2)
   2a254:	b4800204 	addi	r18,r22,8
   2a258:	21804336 	bltu	r4,r6,2a368 <_realloc_r+0x508>
   2a25c:	008004c4 	movi	r2,19
   2a260:	11803f2e 	bgeu	r2,r6,2a360 <_realloc_r+0x500>
   2a264:	a8800017 	ldw	r2,0(r21)
   2a268:	b0800215 	stw	r2,8(r22)
   2a26c:	a8800117 	ldw	r2,4(r21)
   2a270:	b0800315 	stw	r2,12(r22)
   2a274:	008006c4 	movi	r2,27
   2a278:	11803f36 	bltu	r2,r6,2a378 <_realloc_r+0x518>
   2a27c:	b0800404 	addi	r2,r22,16
   2a280:	ad400204 	addi	r21,r21,8
   2a284:	a8c00017 	ldw	r3,0(r21)
   2a288:	10c00015 	stw	r3,0(r2)
   2a28c:	a8c00117 	ldw	r3,4(r21)
   2a290:	10c00115 	stw	r3,4(r2)
   2a294:	a8c00217 	ldw	r3,8(r21)
   2a298:	10c00215 	stw	r3,8(r2)
   2a29c:	b447883a 	add	r3,r22,r17
   2a2a0:	bc45c83a 	sub	r2,r23,r17
   2a2a4:	e0c00215 	stw	r3,8(fp)
   2a2a8:	10800054 	ori	r2,r2,1
   2a2ac:	18800115 	stw	r2,4(r3)
   2a2b0:	b0800117 	ldw	r2,4(r22)
   2a2b4:	a009883a 	mov	r4,r20
   2a2b8:	1080004c 	andi	r2,r2,1
   2a2bc:	1462b03a 	or	r17,r2,r17
   2a2c0:	b4400115 	stw	r17,4(r22)
   2a2c4:	00300780 	call	30078 <__malloc_unlock>
   2a2c8:	9005883a 	mov	r2,r18
   2a2cc:	003f4006 	br	29fd0 <_gp+0xfffed1b0>
   2a2d0:	a8c00217 	ldw	r3,8(r21)
   2a2d4:	90c00215 	stw	r3,8(r18)
   2a2d8:	a8c00317 	ldw	r3,12(r21)
   2a2dc:	90c00315 	stw	r3,12(r18)
   2a2e0:	30801126 	beq	r6,r2,2a328 <_realloc_r+0x4c8>
   2a2e4:	90800404 	addi	r2,r18,16
   2a2e8:	a8c00404 	addi	r3,r21,16
   2a2ec:	003f1906 	br	29f54 <_gp+0xfffed134>
   2a2f0:	90ffff17 	ldw	r3,-4(r18)
   2a2f4:	00bfff04 	movi	r2,-4
   2a2f8:	a825883a 	mov	r18,r21
   2a2fc:	1884703a 	and	r2,r3,r2
   2a300:	80a1883a 	add	r16,r16,r2
   2a304:	003f2406 	br	29f98 <_gp+0xfffed178>
   2a308:	a8800217 	ldw	r2,8(r21)
   2a30c:	b0800415 	stw	r2,16(r22)
   2a310:	a8800317 	ldw	r2,12(r21)
   2a314:	b0800515 	stw	r2,20(r22)
   2a318:	31000a26 	beq	r6,r4,2a344 <_realloc_r+0x4e4>
   2a31c:	b0800604 	addi	r2,r22,24
   2a320:	ad400404 	addi	r21,r21,16
   2a324:	003fa906 	br	2a1cc <_gp+0xfffed3ac>
   2a328:	a9000417 	ldw	r4,16(r21)
   2a32c:	90800604 	addi	r2,r18,24
   2a330:	a8c00604 	addi	r3,r21,24
   2a334:	91000415 	stw	r4,16(r18)
   2a338:	a9000517 	ldw	r4,20(r21)
   2a33c:	91000515 	stw	r4,20(r18)
   2a340:	003f0406 	br	29f54 <_gp+0xfffed134>
   2a344:	a8c00417 	ldw	r3,16(r21)
   2a348:	ad400604 	addi	r21,r21,24
   2a34c:	b0800804 	addi	r2,r22,32
   2a350:	b0c00615 	stw	r3,24(r22)
   2a354:	a8ffff17 	ldw	r3,-4(r21)
   2a358:	b0c00715 	stw	r3,28(r22)
   2a35c:	003f9b06 	br	2a1cc <_gp+0xfffed3ac>
   2a360:	9005883a 	mov	r2,r18
   2a364:	003fc706 	br	2a284 <_gp+0xfffed464>
   2a368:	a80b883a 	mov	r5,r21
   2a36c:	9009883a 	mov	r4,r18
   2a370:	0028d080 	call	28d08 <memmove>
   2a374:	003fc906 	br	2a29c <_gp+0xfffed47c>
   2a378:	a8800217 	ldw	r2,8(r21)
   2a37c:	b0800415 	stw	r2,16(r22)
   2a380:	a8800317 	ldw	r2,12(r21)
   2a384:	b0800515 	stw	r2,20(r22)
   2a388:	31000726 	beq	r6,r4,2a3a8 <_realloc_r+0x548>
   2a38c:	b0800604 	addi	r2,r22,24
   2a390:	ad400404 	addi	r21,r21,16
   2a394:	003fbb06 	br	2a284 <_gp+0xfffed464>
   2a398:	a009883a 	mov	r4,r20
   2a39c:	00300780 	call	30078 <__malloc_unlock>
   2a3a0:	0005883a 	mov	r2,zero
   2a3a4:	003f0a06 	br	29fd0 <_gp+0xfffed1b0>
   2a3a8:	a8c00417 	ldw	r3,16(r21)
   2a3ac:	ad400604 	addi	r21,r21,24
   2a3b0:	b0800804 	addi	r2,r22,32
   2a3b4:	b0c00615 	stw	r3,24(r22)
   2a3b8:	a8ffff17 	ldw	r3,-4(r21)
   2a3bc:	b0c00715 	stw	r3,28(r22)
   2a3c0:	003fb006 	br	2a284 <_gp+0xfffed464>

0002a3c4 <__fpclassifyd>:
   2a3c4:	00a00034 	movhi	r2,32768
   2a3c8:	10bfffc4 	addi	r2,r2,-1
   2a3cc:	2884703a 	and	r2,r5,r2
   2a3d0:	10000726 	beq	r2,zero,2a3f0 <__fpclassifyd+0x2c>
   2a3d4:	00fffc34 	movhi	r3,65520
   2a3d8:	019ff834 	movhi	r6,32736
   2a3dc:	28c7883a 	add	r3,r5,r3
   2a3e0:	31bfffc4 	addi	r6,r6,-1
   2a3e4:	30c00536 	bltu	r6,r3,2a3fc <__fpclassifyd+0x38>
   2a3e8:	00800104 	movi	r2,4
   2a3ec:	f800283a 	ret
   2a3f0:	2000021e 	bne	r4,zero,2a3fc <__fpclassifyd+0x38>
   2a3f4:	00800084 	movi	r2,2
   2a3f8:	f800283a 	ret
   2a3fc:	00dffc34 	movhi	r3,32752
   2a400:	019ff834 	movhi	r6,32736
   2a404:	28cb883a 	add	r5,r5,r3
   2a408:	31bfffc4 	addi	r6,r6,-1
   2a40c:	317ff62e 	bgeu	r6,r5,2a3e8 <_gp+0xfffed5c8>
   2a410:	01400434 	movhi	r5,16
   2a414:	297fffc4 	addi	r5,r5,-1
   2a418:	28800236 	bltu	r5,r2,2a424 <__fpclassifyd+0x60>
   2a41c:	008000c4 	movi	r2,3
   2a420:	f800283a 	ret
   2a424:	10c00226 	beq	r2,r3,2a430 <__fpclassifyd+0x6c>
   2a428:	0005883a 	mov	r2,zero
   2a42c:	f800283a 	ret
   2a430:	2005003a 	cmpeq	r2,r4,zero
   2a434:	f800283a 	ret

0002a438 <__sread>:
   2a438:	defffe04 	addi	sp,sp,-8
   2a43c:	dc000015 	stw	r16,0(sp)
   2a440:	2821883a 	mov	r16,r5
   2a444:	2940038f 	ldh	r5,14(r5)
   2a448:	dfc00115 	stw	ra,4(sp)
   2a44c:	002c1500 	call	2c150 <_read_r>
   2a450:	10000716 	blt	r2,zero,2a470 <__sread+0x38>
   2a454:	80c01417 	ldw	r3,80(r16)
   2a458:	1887883a 	add	r3,r3,r2
   2a45c:	80c01415 	stw	r3,80(r16)
   2a460:	dfc00117 	ldw	ra,4(sp)
   2a464:	dc000017 	ldw	r16,0(sp)
   2a468:	dec00204 	addi	sp,sp,8
   2a46c:	f800283a 	ret
   2a470:	80c0030b 	ldhu	r3,12(r16)
   2a474:	18fbffcc 	andi	r3,r3,61439
   2a478:	80c0030d 	sth	r3,12(r16)
   2a47c:	dfc00117 	ldw	ra,4(sp)
   2a480:	dc000017 	ldw	r16,0(sp)
   2a484:	dec00204 	addi	sp,sp,8
   2a488:	f800283a 	ret

0002a48c <__seofread>:
   2a48c:	0005883a 	mov	r2,zero
   2a490:	f800283a 	ret

0002a494 <__swrite>:
   2a494:	2880030b 	ldhu	r2,12(r5)
   2a498:	defffb04 	addi	sp,sp,-20
   2a49c:	dcc00315 	stw	r19,12(sp)
   2a4a0:	dc800215 	stw	r18,8(sp)
   2a4a4:	dc400115 	stw	r17,4(sp)
   2a4a8:	dc000015 	stw	r16,0(sp)
   2a4ac:	dfc00415 	stw	ra,16(sp)
   2a4b0:	10c0400c 	andi	r3,r2,256
   2a4b4:	2821883a 	mov	r16,r5
   2a4b8:	2023883a 	mov	r17,r4
   2a4bc:	3025883a 	mov	r18,r6
   2a4c0:	3827883a 	mov	r19,r7
   2a4c4:	18000526 	beq	r3,zero,2a4dc <__swrite+0x48>
   2a4c8:	2940038f 	ldh	r5,14(r5)
   2a4cc:	01c00084 	movi	r7,2
   2a4d0:	000d883a 	mov	r6,zero
   2a4d4:	002c0f00 	call	2c0f0 <_lseek_r>
   2a4d8:	8080030b 	ldhu	r2,12(r16)
   2a4dc:	8140038f 	ldh	r5,14(r16)
   2a4e0:	10bbffcc 	andi	r2,r2,61439
   2a4e4:	980f883a 	mov	r7,r19
   2a4e8:	900d883a 	mov	r6,r18
   2a4ec:	8809883a 	mov	r4,r17
   2a4f0:	8080030d 	sth	r2,12(r16)
   2a4f4:	dfc00417 	ldw	ra,16(sp)
   2a4f8:	dcc00317 	ldw	r19,12(sp)
   2a4fc:	dc800217 	ldw	r18,8(sp)
   2a500:	dc400117 	ldw	r17,4(sp)
   2a504:	dc000017 	ldw	r16,0(sp)
   2a508:	dec00504 	addi	sp,sp,20
   2a50c:	002bbbc1 	jmpi	2bbbc <_write_r>

0002a510 <__sseek>:
   2a510:	defffe04 	addi	sp,sp,-8
   2a514:	dc000015 	stw	r16,0(sp)
   2a518:	2821883a 	mov	r16,r5
   2a51c:	2940038f 	ldh	r5,14(r5)
   2a520:	dfc00115 	stw	ra,4(sp)
   2a524:	002c0f00 	call	2c0f0 <_lseek_r>
   2a528:	00ffffc4 	movi	r3,-1
   2a52c:	10c00826 	beq	r2,r3,2a550 <__sseek+0x40>
   2a530:	80c0030b 	ldhu	r3,12(r16)
   2a534:	80801415 	stw	r2,80(r16)
   2a538:	18c40014 	ori	r3,r3,4096
   2a53c:	80c0030d 	sth	r3,12(r16)
   2a540:	dfc00117 	ldw	ra,4(sp)
   2a544:	dc000017 	ldw	r16,0(sp)
   2a548:	dec00204 	addi	sp,sp,8
   2a54c:	f800283a 	ret
   2a550:	80c0030b 	ldhu	r3,12(r16)
   2a554:	18fbffcc 	andi	r3,r3,61439
   2a558:	80c0030d 	sth	r3,12(r16)
   2a55c:	dfc00117 	ldw	ra,4(sp)
   2a560:	dc000017 	ldw	r16,0(sp)
   2a564:	dec00204 	addi	sp,sp,8
   2a568:	f800283a 	ret

0002a56c <__sclose>:
   2a56c:	2940038f 	ldh	r5,14(r5)
   2a570:	002bc1c1 	jmpi	2bc1c <_close_r>

0002a574 <__sprint_r.part.0>:
   2a574:	28801917 	ldw	r2,100(r5)
   2a578:	defff604 	addi	sp,sp,-40
   2a57c:	dd400515 	stw	r21,20(sp)
   2a580:	dfc00915 	stw	ra,36(sp)
   2a584:	df000815 	stw	fp,32(sp)
   2a588:	ddc00715 	stw	r23,28(sp)
   2a58c:	dd800615 	stw	r22,24(sp)
   2a590:	dd000415 	stw	r20,16(sp)
   2a594:	dcc00315 	stw	r19,12(sp)
   2a598:	dc800215 	stw	r18,8(sp)
   2a59c:	dc400115 	stw	r17,4(sp)
   2a5a0:	dc000015 	stw	r16,0(sp)
   2a5a4:	1088000c 	andi	r2,r2,8192
   2a5a8:	302b883a 	mov	r21,r6
   2a5ac:	10002e26 	beq	r2,zero,2a668 <__sprint_r.part.0+0xf4>
   2a5b0:	30800217 	ldw	r2,8(r6)
   2a5b4:	35800017 	ldw	r22,0(r6)
   2a5b8:	10002926 	beq	r2,zero,2a660 <__sprint_r.part.0+0xec>
   2a5bc:	2827883a 	mov	r19,r5
   2a5c0:	2029883a 	mov	r20,r4
   2a5c4:	b5c00104 	addi	r23,r22,4
   2a5c8:	04bfffc4 	movi	r18,-1
   2a5cc:	bc400017 	ldw	r17,0(r23)
   2a5d0:	b4000017 	ldw	r16,0(r22)
   2a5d4:	0039883a 	mov	fp,zero
   2a5d8:	8822d0ba 	srli	r17,r17,2
   2a5dc:	8800031e 	bne	r17,zero,2a5ec <__sprint_r.part.0+0x78>
   2a5e0:	00001806 	br	2a644 <__sprint_r.part.0+0xd0>
   2a5e4:	84000104 	addi	r16,r16,4
   2a5e8:	8f001526 	beq	r17,fp,2a640 <__sprint_r.part.0+0xcc>
   2a5ec:	81400017 	ldw	r5,0(r16)
   2a5f0:	980d883a 	mov	r6,r19
   2a5f4:	a009883a 	mov	r4,r20
   2a5f8:	002bf9c0 	call	2bf9c <_fputwc_r>
   2a5fc:	e7000044 	addi	fp,fp,1
   2a600:	14bff81e 	bne	r2,r18,2a5e4 <_gp+0xfffed7c4>
   2a604:	9005883a 	mov	r2,r18
   2a608:	a8000215 	stw	zero,8(r21)
   2a60c:	a8000115 	stw	zero,4(r21)
   2a610:	dfc00917 	ldw	ra,36(sp)
   2a614:	df000817 	ldw	fp,32(sp)
   2a618:	ddc00717 	ldw	r23,28(sp)
   2a61c:	dd800617 	ldw	r22,24(sp)
   2a620:	dd400517 	ldw	r21,20(sp)
   2a624:	dd000417 	ldw	r20,16(sp)
   2a628:	dcc00317 	ldw	r19,12(sp)
   2a62c:	dc800217 	ldw	r18,8(sp)
   2a630:	dc400117 	ldw	r17,4(sp)
   2a634:	dc000017 	ldw	r16,0(sp)
   2a638:	dec00a04 	addi	sp,sp,40
   2a63c:	f800283a 	ret
   2a640:	a8800217 	ldw	r2,8(r21)
   2a644:	8c63883a 	add	r17,r17,r17
   2a648:	8c63883a 	add	r17,r17,r17
   2a64c:	1445c83a 	sub	r2,r2,r17
   2a650:	a8800215 	stw	r2,8(r21)
   2a654:	b5800204 	addi	r22,r22,8
   2a658:	bdc00204 	addi	r23,r23,8
   2a65c:	103fdb1e 	bne	r2,zero,2a5cc <_gp+0xfffed7ac>
   2a660:	0005883a 	mov	r2,zero
   2a664:	003fe806 	br	2a608 <_gp+0xfffed7e8>
   2a668:	00282000 	call	28200 <__sfvwrite_r>
   2a66c:	003fe606 	br	2a608 <_gp+0xfffed7e8>

0002a670 <__sprint_r>:
   2a670:	30c00217 	ldw	r3,8(r6)
   2a674:	18000126 	beq	r3,zero,2a67c <__sprint_r+0xc>
   2a678:	002a5741 	jmpi	2a574 <__sprint_r.part.0>
   2a67c:	30000115 	stw	zero,4(r6)
   2a680:	0005883a 	mov	r2,zero
   2a684:	f800283a 	ret

0002a688 <___vfiprintf_internal_r>:
   2a688:	deffc904 	addi	sp,sp,-220
   2a68c:	df003515 	stw	fp,212(sp)
   2a690:	dd003115 	stw	r20,196(sp)
   2a694:	dfc03615 	stw	ra,216(sp)
   2a698:	ddc03415 	stw	r23,208(sp)
   2a69c:	dd803315 	stw	r22,204(sp)
   2a6a0:	dd403215 	stw	r21,200(sp)
   2a6a4:	dcc03015 	stw	r19,192(sp)
   2a6a8:	dc802f15 	stw	r18,188(sp)
   2a6ac:	dc402e15 	stw	r17,184(sp)
   2a6b0:	dc002d15 	stw	r16,180(sp)
   2a6b4:	d9002015 	stw	r4,128(sp)
   2a6b8:	d9c02215 	stw	r7,136(sp)
   2a6bc:	2829883a 	mov	r20,r5
   2a6c0:	3039883a 	mov	fp,r6
   2a6c4:	20000226 	beq	r4,zero,2a6d0 <___vfiprintf_internal_r+0x48>
   2a6c8:	20800e17 	ldw	r2,56(r4)
   2a6cc:	1000cf26 	beq	r2,zero,2aa0c <___vfiprintf_internal_r+0x384>
   2a6d0:	a080030b 	ldhu	r2,12(r20)
   2a6d4:	10c8000c 	andi	r3,r2,8192
   2a6d8:	1800061e 	bne	r3,zero,2a6f4 <___vfiprintf_internal_r+0x6c>
   2a6dc:	a1001917 	ldw	r4,100(r20)
   2a6e0:	00f7ffc4 	movi	r3,-8193
   2a6e4:	10880014 	ori	r2,r2,8192
   2a6e8:	20c6703a 	and	r3,r4,r3
   2a6ec:	a080030d 	sth	r2,12(r20)
   2a6f0:	a0c01915 	stw	r3,100(r20)
   2a6f4:	10c0020c 	andi	r3,r2,8
   2a6f8:	1800a926 	beq	r3,zero,2a9a0 <___vfiprintf_internal_r+0x318>
   2a6fc:	a0c00417 	ldw	r3,16(r20)
   2a700:	1800a726 	beq	r3,zero,2a9a0 <___vfiprintf_internal_r+0x318>
   2a704:	1080068c 	andi	r2,r2,26
   2a708:	00c00284 	movi	r3,10
   2a70c:	10c0ac26 	beq	r2,r3,2a9c0 <___vfiprintf_internal_r+0x338>
   2a710:	da801a04 	addi	r10,sp,104
   2a714:	da801e15 	stw	r10,120(sp)
   2a718:	d8801e17 	ldw	r2,120(sp)
   2a71c:	da8019c4 	addi	r10,sp,103
   2a720:	058000f4 	movhi	r22,3
   2a724:	05c000f4 	movhi	r23,3
   2a728:	da801f15 	stw	r10,124(sp)
   2a72c:	1295c83a 	sub	r10,r2,r10
   2a730:	b58c5704 	addi	r22,r22,12636
   2a734:	bdcc5304 	addi	r23,r23,12620
   2a738:	dec01a15 	stw	sp,104(sp)
   2a73c:	d8001c15 	stw	zero,112(sp)
   2a740:	d8001b15 	stw	zero,108(sp)
   2a744:	d8002615 	stw	zero,152(sp)
   2a748:	d8002315 	stw	zero,140(sp)
   2a74c:	da802715 	stw	r10,156(sp)
   2a750:	d811883a 	mov	r8,sp
   2a754:	dd002115 	stw	r20,132(sp)
   2a758:	e021883a 	mov	r16,fp
   2a75c:	80800007 	ldb	r2,0(r16)
   2a760:	1003ea26 	beq	r2,zero,2b70c <___vfiprintf_internal_r+0x1084>
   2a764:	00c00944 	movi	r3,37
   2a768:	8025883a 	mov	r18,r16
   2a76c:	10c0021e 	bne	r2,r3,2a778 <___vfiprintf_internal_r+0xf0>
   2a770:	00001606 	br	2a7cc <___vfiprintf_internal_r+0x144>
   2a774:	10c00326 	beq	r2,r3,2a784 <___vfiprintf_internal_r+0xfc>
   2a778:	94800044 	addi	r18,r18,1
   2a77c:	90800007 	ldb	r2,0(r18)
   2a780:	103ffc1e 	bne	r2,zero,2a774 <_gp+0xfffed954>
   2a784:	9423c83a 	sub	r17,r18,r16
   2a788:	88001026 	beq	r17,zero,2a7cc <___vfiprintf_internal_r+0x144>
   2a78c:	d8c01c17 	ldw	r3,112(sp)
   2a790:	d8801b17 	ldw	r2,108(sp)
   2a794:	44000015 	stw	r16,0(r8)
   2a798:	88c7883a 	add	r3,r17,r3
   2a79c:	10800044 	addi	r2,r2,1
   2a7a0:	44400115 	stw	r17,4(r8)
   2a7a4:	d8c01c15 	stw	r3,112(sp)
   2a7a8:	d8801b15 	stw	r2,108(sp)
   2a7ac:	010001c4 	movi	r4,7
   2a7b0:	2080760e 	bge	r4,r2,2a98c <___vfiprintf_internal_r+0x304>
   2a7b4:	1803821e 	bne	r3,zero,2b5c0 <___vfiprintf_internal_r+0xf38>
   2a7b8:	da802317 	ldw	r10,140(sp)
   2a7bc:	d8001b15 	stw	zero,108(sp)
   2a7c0:	d811883a 	mov	r8,sp
   2a7c4:	5455883a 	add	r10,r10,r17
   2a7c8:	da802315 	stw	r10,140(sp)
   2a7cc:	90800007 	ldb	r2,0(r18)
   2a7d0:	10044626 	beq	r2,zero,2b8ec <___vfiprintf_internal_r+0x1264>
   2a7d4:	90c00047 	ldb	r3,1(r18)
   2a7d8:	94000044 	addi	r16,r18,1
   2a7dc:	d8001d85 	stb	zero,118(sp)
   2a7e0:	0009883a 	mov	r4,zero
   2a7e4:	000f883a 	mov	r7,zero
   2a7e8:	027fffc4 	movi	r9,-1
   2a7ec:	0023883a 	mov	r17,zero
   2a7f0:	0029883a 	mov	r20,zero
   2a7f4:	01401604 	movi	r5,88
   2a7f8:	01800244 	movi	r6,9
   2a7fc:	03400a84 	movi	r13,42
   2a800:	03001b04 	movi	r12,108
   2a804:	84000044 	addi	r16,r16,1
   2a808:	18bff804 	addi	r2,r3,-32
   2a80c:	28827336 	bltu	r5,r2,2b1dc <___vfiprintf_internal_r+0xb54>
   2a810:	100490ba 	slli	r2,r2,2
   2a814:	028000f4 	movhi	r10,3
   2a818:	52aa0a04 	addi	r10,r10,-22488
   2a81c:	1285883a 	add	r2,r2,r10
   2a820:	10800017 	ldw	r2,0(r2)
   2a824:	1000683a 	jmp	r2
   2a828:	0002af10 	cmplti	zero,zero,2748
   2a82c:	0002b1dc 	xori	zero,zero,2759
   2a830:	0002b1dc 	xori	zero,zero,2759
   2a834:	0002af30 	cmpltui	zero,zero,2748
   2a838:	0002b1dc 	xori	zero,zero,2759
   2a83c:	0002b1dc 	xori	zero,zero,2759
   2a840:	0002b1dc 	xori	zero,zero,2759
   2a844:	0002b1dc 	xori	zero,zero,2759
   2a848:	0002b1dc 	xori	zero,zero,2759
   2a84c:	0002b1dc 	xori	zero,zero,2759
   2a850:	0002b118 	cmpnei	zero,zero,2756
   2a854:	0002b134 	movhi	zero,2756
   2a858:	0002b1dc 	xori	zero,zero,2759
   2a85c:	0002aa1c 	xori	zero,zero,2728
   2a860:	0002b144 	movi	zero,2757
   2a864:	0002b1dc 	xori	zero,zero,2759
   2a868:	0002af3c 	xorhi	zero,zero,2748
   2a86c:	0002af48 	cmpgei	zero,zero,2749
   2a870:	0002af48 	cmpgei	zero,zero,2749
   2a874:	0002af48 	cmpgei	zero,zero,2749
   2a878:	0002af48 	cmpgei	zero,zero,2749
   2a87c:	0002af48 	cmpgei	zero,zero,2749
   2a880:	0002af48 	cmpgei	zero,zero,2749
   2a884:	0002af48 	cmpgei	zero,zero,2749
   2a888:	0002af48 	cmpgei	zero,zero,2749
   2a88c:	0002af48 	cmpgei	zero,zero,2749
   2a890:	0002b1dc 	xori	zero,zero,2759
   2a894:	0002b1dc 	xori	zero,zero,2759
   2a898:	0002b1dc 	xori	zero,zero,2759
   2a89c:	0002b1dc 	xori	zero,zero,2759
   2a8a0:	0002b1dc 	xori	zero,zero,2759
   2a8a4:	0002b1dc 	xori	zero,zero,2759
   2a8a8:	0002b1dc 	xori	zero,zero,2759
   2a8ac:	0002b1dc 	xori	zero,zero,2759
   2a8b0:	0002b1dc 	xori	zero,zero,2759
   2a8b4:	0002b1dc 	xori	zero,zero,2759
   2a8b8:	0002af74 	movhi	zero,2749
   2a8bc:	0002b1dc 	xori	zero,zero,2759
   2a8c0:	0002b1dc 	xori	zero,zero,2759
   2a8c4:	0002b1dc 	xori	zero,zero,2759
   2a8c8:	0002b1dc 	xori	zero,zero,2759
   2a8cc:	0002b1dc 	xori	zero,zero,2759
   2a8d0:	0002b1dc 	xori	zero,zero,2759
   2a8d4:	0002b1dc 	xori	zero,zero,2759
   2a8d8:	0002b1dc 	xori	zero,zero,2759
   2a8dc:	0002b1dc 	xori	zero,zero,2759
   2a8e0:	0002b1dc 	xori	zero,zero,2759
   2a8e4:	0002afac 	andhi	zero,zero,2750
   2a8e8:	0002b1dc 	xori	zero,zero,2759
   2a8ec:	0002b1dc 	xori	zero,zero,2759
   2a8f0:	0002b1dc 	xori	zero,zero,2759
   2a8f4:	0002b1dc 	xori	zero,zero,2759
   2a8f8:	0002b1dc 	xori	zero,zero,2759
   2a8fc:	0002b004 	movi	zero,2752
   2a900:	0002b1dc 	xori	zero,zero,2759
   2a904:	0002b1dc 	xori	zero,zero,2759
   2a908:	0002b074 	movhi	zero,2753
   2a90c:	0002b1dc 	xori	zero,zero,2759
   2a910:	0002b1dc 	xori	zero,zero,2759
   2a914:	0002b1dc 	xori	zero,zero,2759
   2a918:	0002b1dc 	xori	zero,zero,2759
   2a91c:	0002b1dc 	xori	zero,zero,2759
   2a920:	0002b1dc 	xori	zero,zero,2759
   2a924:	0002b1dc 	xori	zero,zero,2759
   2a928:	0002b1dc 	xori	zero,zero,2759
   2a92c:	0002b1dc 	xori	zero,zero,2759
   2a930:	0002b1dc 	xori	zero,zero,2759
   2a934:	0002ae20 	cmpeqi	zero,zero,2744
   2a938:	0002ae4c 	andi	zero,zero,2745
   2a93c:	0002b1dc 	xori	zero,zero,2759
   2a940:	0002b1dc 	xori	zero,zero,2759
   2a944:	0002b1dc 	xori	zero,zero,2759
   2a948:	0002b184 	movi	zero,2758
   2a94c:	0002ae4c 	andi	zero,zero,2745
   2a950:	0002b1dc 	xori	zero,zero,2759
   2a954:	0002b1dc 	xori	zero,zero,2759
   2a958:	0002ace0 	cmpeqi	zero,zero,2739
   2a95c:	0002b1dc 	xori	zero,zero,2759
   2a960:	0002acf0 	cmpltui	zero,zero,2739
   2a964:	0002ad2c 	andhi	zero,zero,2740
   2a968:	0002aa28 	cmpgeui	zero,zero,2728
   2a96c:	0002acd4 	movui	zero,2739
   2a970:	0002b1dc 	xori	zero,zero,2759
   2a974:	0002b0b0 	cmpltui	zero,zero,2754
   2a978:	0002b1dc 	xori	zero,zero,2759
   2a97c:	0002b108 	cmpgei	zero,zero,2756
   2a980:	0002b1dc 	xori	zero,zero,2759
   2a984:	0002b1dc 	xori	zero,zero,2759
   2a988:	0002adcc 	andi	zero,zero,2743
   2a98c:	42000204 	addi	r8,r8,8
   2a990:	da802317 	ldw	r10,140(sp)
   2a994:	5455883a 	add	r10,r10,r17
   2a998:	da802315 	stw	r10,140(sp)
   2a99c:	003f8b06 	br	2a7cc <_gp+0xfffed9ac>
   2a9a0:	d9002017 	ldw	r4,128(sp)
   2a9a4:	a00b883a 	mov	r5,r20
   2a9a8:	0025da80 	call	25da8 <__swsetup_r>
   2a9ac:	1003b11e 	bne	r2,zero,2b874 <___vfiprintf_internal_r+0x11ec>
   2a9b0:	a080030b 	ldhu	r2,12(r20)
   2a9b4:	00c00284 	movi	r3,10
   2a9b8:	1080068c 	andi	r2,r2,26
   2a9bc:	10ff541e 	bne	r2,r3,2a710 <_gp+0xfffed8f0>
   2a9c0:	a080038f 	ldh	r2,14(r20)
   2a9c4:	103f5216 	blt	r2,zero,2a710 <_gp+0xfffed8f0>
   2a9c8:	d9c02217 	ldw	r7,136(sp)
   2a9cc:	d9002017 	ldw	r4,128(sp)
   2a9d0:	e00d883a 	mov	r6,fp
   2a9d4:	a00b883a 	mov	r5,r20
   2a9d8:	002bb000 	call	2bb00 <__sbprintf>
   2a9dc:	dfc03617 	ldw	ra,216(sp)
   2a9e0:	df003517 	ldw	fp,212(sp)
   2a9e4:	ddc03417 	ldw	r23,208(sp)
   2a9e8:	dd803317 	ldw	r22,204(sp)
   2a9ec:	dd403217 	ldw	r21,200(sp)
   2a9f0:	dd003117 	ldw	r20,196(sp)
   2a9f4:	dcc03017 	ldw	r19,192(sp)
   2a9f8:	dc802f17 	ldw	r18,188(sp)
   2a9fc:	dc402e17 	ldw	r17,184(sp)
   2aa00:	dc002d17 	ldw	r16,180(sp)
   2aa04:	dec03704 	addi	sp,sp,220
   2aa08:	f800283a 	ret
   2aa0c:	0027d7c0 	call	27d7c <__sinit>
   2aa10:	003f2f06 	br	2a6d0 <_gp+0xfffed8b0>
   2aa14:	0463c83a 	sub	r17,zero,r17
   2aa18:	d8802215 	stw	r2,136(sp)
   2aa1c:	a5000114 	ori	r20,r20,4
   2aa20:	80c00007 	ldb	r3,0(r16)
   2aa24:	003f7706 	br	2a804 <_gp+0xfffed9e4>
   2aa28:	00800c04 	movi	r2,48
   2aa2c:	da802217 	ldw	r10,136(sp)
   2aa30:	d8801d05 	stb	r2,116(sp)
   2aa34:	00801e04 	movi	r2,120
   2aa38:	d8801d45 	stb	r2,117(sp)
   2aa3c:	d8001d85 	stb	zero,118(sp)
   2aa40:	50c00104 	addi	r3,r10,4
   2aa44:	54800017 	ldw	r18,0(r10)
   2aa48:	0027883a 	mov	r19,zero
   2aa4c:	a0800094 	ori	r2,r20,2
   2aa50:	48030b16 	blt	r9,zero,2b680 <___vfiprintf_internal_r+0xff8>
   2aa54:	00bfdfc4 	movi	r2,-129
   2aa58:	a096703a 	and	r11,r20,r2
   2aa5c:	d8c02215 	stw	r3,136(sp)
   2aa60:	5d000094 	ori	r20,r11,2
   2aa64:	90032b1e 	bne	r18,zero,2b714 <___vfiprintf_internal_r+0x108c>
   2aa68:	008000f4 	movhi	r2,3
   2aa6c:	108bf204 	addi	r2,r2,12232
   2aa70:	d8802615 	stw	r2,152(sp)
   2aa74:	0039883a 	mov	fp,zero
   2aa78:	48017b1e 	bne	r9,zero,2b068 <___vfiprintf_internal_r+0x9e0>
   2aa7c:	0013883a 	mov	r9,zero
   2aa80:	0027883a 	mov	r19,zero
   2aa84:	dd401a04 	addi	r21,sp,104
   2aa88:	4825883a 	mov	r18,r9
   2aa8c:	4cc0010e 	bge	r9,r19,2aa94 <___vfiprintf_internal_r+0x40c>
   2aa90:	9825883a 	mov	r18,r19
   2aa94:	e7003fcc 	andi	fp,fp,255
   2aa98:	e700201c 	xori	fp,fp,128
   2aa9c:	e73fe004 	addi	fp,fp,-128
   2aaa0:	e0000126 	beq	fp,zero,2aaa8 <___vfiprintf_internal_r+0x420>
   2aaa4:	94800044 	addi	r18,r18,1
   2aaa8:	a380008c 	andi	r14,r20,2
   2aaac:	70000126 	beq	r14,zero,2aab4 <___vfiprintf_internal_r+0x42c>
   2aab0:	94800084 	addi	r18,r18,2
   2aab4:	a700210c 	andi	fp,r20,132
   2aab8:	e001df1e 	bne	fp,zero,2b238 <___vfiprintf_internal_r+0xbb0>
   2aabc:	8c87c83a 	sub	r3,r17,r18
   2aac0:	00c1dd0e 	bge	zero,r3,2b238 <___vfiprintf_internal_r+0xbb0>
   2aac4:	01c00404 	movi	r7,16
   2aac8:	d8801c17 	ldw	r2,112(sp)
   2aacc:	38c3ad0e 	bge	r7,r3,2b984 <___vfiprintf_internal_r+0x12fc>
   2aad0:	028000f4 	movhi	r10,3
   2aad4:	528c5704 	addi	r10,r10,12636
   2aad8:	dc002915 	stw	r16,164(sp)
   2aadc:	d9801b17 	ldw	r6,108(sp)
   2aae0:	da802415 	stw	r10,144(sp)
   2aae4:	03c001c4 	movi	r15,7
   2aae8:	da402515 	stw	r9,148(sp)
   2aaec:	db802815 	stw	r14,160(sp)
   2aaf0:	1821883a 	mov	r16,r3
   2aaf4:	00000506 	br	2ab0c <___vfiprintf_internal_r+0x484>
   2aaf8:	31400084 	addi	r5,r6,2
   2aafc:	42000204 	addi	r8,r8,8
   2ab00:	200d883a 	mov	r6,r4
   2ab04:	843ffc04 	addi	r16,r16,-16
   2ab08:	3c000d0e 	bge	r7,r16,2ab40 <___vfiprintf_internal_r+0x4b8>
   2ab0c:	10800404 	addi	r2,r2,16
   2ab10:	31000044 	addi	r4,r6,1
   2ab14:	45800015 	stw	r22,0(r8)
   2ab18:	41c00115 	stw	r7,4(r8)
   2ab1c:	d8801c15 	stw	r2,112(sp)
   2ab20:	d9001b15 	stw	r4,108(sp)
   2ab24:	793ff40e 	bge	r15,r4,2aaf8 <_gp+0xfffedcd8>
   2ab28:	1001b51e 	bne	r2,zero,2b200 <___vfiprintf_internal_r+0xb78>
   2ab2c:	843ffc04 	addi	r16,r16,-16
   2ab30:	000d883a 	mov	r6,zero
   2ab34:	01400044 	movi	r5,1
   2ab38:	d811883a 	mov	r8,sp
   2ab3c:	3c3ff316 	blt	r7,r16,2ab0c <_gp+0xfffedcec>
   2ab40:	8007883a 	mov	r3,r16
   2ab44:	da402517 	ldw	r9,148(sp)
   2ab48:	db802817 	ldw	r14,160(sp)
   2ab4c:	dc002917 	ldw	r16,164(sp)
   2ab50:	da802417 	ldw	r10,144(sp)
   2ab54:	1885883a 	add	r2,r3,r2
   2ab58:	40c00115 	stw	r3,4(r8)
   2ab5c:	42800015 	stw	r10,0(r8)
   2ab60:	d8801c15 	stw	r2,112(sp)
   2ab64:	d9401b15 	stw	r5,108(sp)
   2ab68:	00c001c4 	movi	r3,7
   2ab6c:	19426016 	blt	r3,r5,2b4f0 <___vfiprintf_internal_r+0xe68>
   2ab70:	d8c01d87 	ldb	r3,118(sp)
   2ab74:	42000204 	addi	r8,r8,8
   2ab78:	29000044 	addi	r4,r5,1
   2ab7c:	1801b31e 	bne	r3,zero,2b24c <___vfiprintf_internal_r+0xbc4>
   2ab80:	7001c026 	beq	r14,zero,2b284 <___vfiprintf_internal_r+0xbfc>
   2ab84:	d8c01d04 	addi	r3,sp,116
   2ab88:	10800084 	addi	r2,r2,2
   2ab8c:	40c00015 	stw	r3,0(r8)
   2ab90:	00c00084 	movi	r3,2
   2ab94:	40c00115 	stw	r3,4(r8)
   2ab98:	d8801c15 	stw	r2,112(sp)
   2ab9c:	d9001b15 	stw	r4,108(sp)
   2aba0:	00c001c4 	movi	r3,7
   2aba4:	1902650e 	bge	r3,r4,2b53c <___vfiprintf_internal_r+0xeb4>
   2aba8:	10029a1e 	bne	r2,zero,2b614 <___vfiprintf_internal_r+0xf8c>
   2abac:	00c02004 	movi	r3,128
   2abb0:	01000044 	movi	r4,1
   2abb4:	000b883a 	mov	r5,zero
   2abb8:	d811883a 	mov	r8,sp
   2abbc:	e0c1b31e 	bne	fp,r3,2b28c <___vfiprintf_internal_r+0xc04>
   2abc0:	8cb9c83a 	sub	fp,r17,r18
   2abc4:	0701b10e 	bge	zero,fp,2b28c <___vfiprintf_internal_r+0xc04>
   2abc8:	01c00404 	movi	r7,16
   2abcc:	3f03890e 	bge	r7,fp,2b9f4 <___vfiprintf_internal_r+0x136c>
   2abd0:	00c000f4 	movhi	r3,3
   2abd4:	18cc5304 	addi	r3,r3,12620
   2abd8:	d8c02415 	stw	r3,144(sp)
   2abdc:	8007883a 	mov	r3,r16
   2abe0:	034001c4 	movi	r13,7
   2abe4:	e021883a 	mov	r16,fp
   2abe8:	da402515 	stw	r9,148(sp)
   2abec:	1839883a 	mov	fp,r3
   2abf0:	00000506 	br	2ac08 <___vfiprintf_internal_r+0x580>
   2abf4:	29800084 	addi	r6,r5,2
   2abf8:	42000204 	addi	r8,r8,8
   2abfc:	180b883a 	mov	r5,r3
   2ac00:	843ffc04 	addi	r16,r16,-16
   2ac04:	3c000d0e 	bge	r7,r16,2ac3c <___vfiprintf_internal_r+0x5b4>
   2ac08:	10800404 	addi	r2,r2,16
   2ac0c:	28c00044 	addi	r3,r5,1
   2ac10:	45c00015 	stw	r23,0(r8)
   2ac14:	41c00115 	stw	r7,4(r8)
   2ac18:	d8801c15 	stw	r2,112(sp)
   2ac1c:	d8c01b15 	stw	r3,108(sp)
   2ac20:	68fff40e 	bge	r13,r3,2abf4 <_gp+0xfffeddd4>
   2ac24:	1002241e 	bne	r2,zero,2b4b8 <___vfiprintf_internal_r+0xe30>
   2ac28:	843ffc04 	addi	r16,r16,-16
   2ac2c:	01800044 	movi	r6,1
   2ac30:	000b883a 	mov	r5,zero
   2ac34:	d811883a 	mov	r8,sp
   2ac38:	3c3ff316 	blt	r7,r16,2ac08 <_gp+0xfffedde8>
   2ac3c:	da402517 	ldw	r9,148(sp)
   2ac40:	e007883a 	mov	r3,fp
   2ac44:	8039883a 	mov	fp,r16
   2ac48:	1821883a 	mov	r16,r3
   2ac4c:	d8c02417 	ldw	r3,144(sp)
   2ac50:	1705883a 	add	r2,r2,fp
   2ac54:	47000115 	stw	fp,4(r8)
   2ac58:	40c00015 	stw	r3,0(r8)
   2ac5c:	d8801c15 	stw	r2,112(sp)
   2ac60:	d9801b15 	stw	r6,108(sp)
   2ac64:	00c001c4 	movi	r3,7
   2ac68:	19827616 	blt	r3,r6,2b644 <___vfiprintf_internal_r+0xfbc>
   2ac6c:	4cf9c83a 	sub	fp,r9,r19
   2ac70:	42000204 	addi	r8,r8,8
   2ac74:	31000044 	addi	r4,r6,1
   2ac78:	300b883a 	mov	r5,r6
   2ac7c:	07018516 	blt	zero,fp,2b294 <___vfiprintf_internal_r+0xc0c>
   2ac80:	9885883a 	add	r2,r19,r2
   2ac84:	45400015 	stw	r21,0(r8)
   2ac88:	44c00115 	stw	r19,4(r8)
   2ac8c:	d8801c15 	stw	r2,112(sp)
   2ac90:	d9001b15 	stw	r4,108(sp)
   2ac94:	00c001c4 	movi	r3,7
   2ac98:	1901dd0e 	bge	r3,r4,2b410 <___vfiprintf_internal_r+0xd88>
   2ac9c:	1002401e 	bne	r2,zero,2b5a0 <___vfiprintf_internal_r+0xf18>
   2aca0:	d8001b15 	stw	zero,108(sp)
   2aca4:	a2c0010c 	andi	r11,r20,4
   2aca8:	58000226 	beq	r11,zero,2acb4 <___vfiprintf_internal_r+0x62c>
   2acac:	8ca7c83a 	sub	r19,r17,r18
   2acb0:	04c2f216 	blt	zero,r19,2b87c <___vfiprintf_internal_r+0x11f4>
   2acb4:	8c80010e 	bge	r17,r18,2acbc <___vfiprintf_internal_r+0x634>
   2acb8:	9023883a 	mov	r17,r18
   2acbc:	da802317 	ldw	r10,140(sp)
   2acc0:	5455883a 	add	r10,r10,r17
   2acc4:	da802315 	stw	r10,140(sp)
   2acc8:	d8001b15 	stw	zero,108(sp)
   2accc:	d811883a 	mov	r8,sp
   2acd0:	003ea206 	br	2a75c <_gp+0xfffed93c>
   2acd4:	a5000814 	ori	r20,r20,32
   2acd8:	80c00007 	ldb	r3,0(r16)
   2acdc:	003ec906 	br	2a804 <_gp+0xfffed9e4>
   2ace0:	80c00007 	ldb	r3,0(r16)
   2ace4:	1b030926 	beq	r3,r12,2b90c <___vfiprintf_internal_r+0x1284>
   2ace8:	a5000414 	ori	r20,r20,16
   2acec:	003ec506 	br	2a804 <_gp+0xfffed9e4>
   2acf0:	21003fcc 	andi	r4,r4,255
   2acf4:	20035e1e 	bne	r4,zero,2ba70 <___vfiprintf_internal_r+0x13e8>
   2acf8:	a080080c 	andi	r2,r20,32
   2acfc:	1002a526 	beq	r2,zero,2b794 <___vfiprintf_internal_r+0x110c>
   2ad00:	da802217 	ldw	r10,136(sp)
   2ad04:	50800017 	ldw	r2,0(r10)
   2ad08:	da802317 	ldw	r10,140(sp)
   2ad0c:	5007d7fa 	srai	r3,r10,31
   2ad10:	da802217 	ldw	r10,136(sp)
   2ad14:	10c00115 	stw	r3,4(r2)
   2ad18:	52800104 	addi	r10,r10,4
   2ad1c:	da802215 	stw	r10,136(sp)
   2ad20:	da802317 	ldw	r10,140(sp)
   2ad24:	12800015 	stw	r10,0(r2)
   2ad28:	003e8c06 	br	2a75c <_gp+0xfffed93c>
   2ad2c:	21003fcc 	andi	r4,r4,255
   2ad30:	2003511e 	bne	r4,zero,2ba78 <___vfiprintf_internal_r+0x13f0>
   2ad34:	a080080c 	andi	r2,r20,32
   2ad38:	1000a126 	beq	r2,zero,2afc0 <___vfiprintf_internal_r+0x938>
   2ad3c:	da802217 	ldw	r10,136(sp)
   2ad40:	d8001d85 	stb	zero,118(sp)
   2ad44:	50800204 	addi	r2,r10,8
   2ad48:	54800017 	ldw	r18,0(r10)
   2ad4c:	54c00117 	ldw	r19,4(r10)
   2ad50:	4802b416 	blt	r9,zero,2b824 <___vfiprintf_internal_r+0x119c>
   2ad54:	013fdfc4 	movi	r4,-129
   2ad58:	94c6b03a 	or	r3,r18,r19
   2ad5c:	d8802215 	stw	r2,136(sp)
   2ad60:	a128703a 	and	r20,r20,r4
   2ad64:	1800a226 	beq	r3,zero,2aff0 <___vfiprintf_internal_r+0x968>
   2ad68:	0039883a 	mov	fp,zero
   2ad6c:	dd401a04 	addi	r21,sp,104
   2ad70:	9006d0fa 	srli	r3,r18,3
   2ad74:	9808977a 	slli	r4,r19,29
   2ad78:	9826d0fa 	srli	r19,r19,3
   2ad7c:	948001cc 	andi	r18,r18,7
   2ad80:	90800c04 	addi	r2,r18,48
   2ad84:	ad7fffc4 	addi	r21,r21,-1
   2ad88:	20e4b03a 	or	r18,r4,r3
   2ad8c:	a8800005 	stb	r2,0(r21)
   2ad90:	94c6b03a 	or	r3,r18,r19
   2ad94:	183ff61e 	bne	r3,zero,2ad70 <_gp+0xfffedf50>
   2ad98:	a0c0004c 	andi	r3,r20,1
   2ad9c:	18005926 	beq	r3,zero,2af04 <___vfiprintf_internal_r+0x87c>
   2ada0:	10803fcc 	andi	r2,r2,255
   2ada4:	1080201c 	xori	r2,r2,128
   2ada8:	10bfe004 	addi	r2,r2,-128
   2adac:	00c00c04 	movi	r3,48
   2adb0:	10c05426 	beq	r2,r3,2af04 <___vfiprintf_internal_r+0x87c>
   2adb4:	da801e17 	ldw	r10,120(sp)
   2adb8:	a8bfffc4 	addi	r2,r21,-1
   2adbc:	a8ffffc5 	stb	r3,-1(r21)
   2adc0:	50a7c83a 	sub	r19,r10,r2
   2adc4:	102b883a 	mov	r21,r2
   2adc8:	003f2f06 	br	2aa88 <_gp+0xfffedc68>
   2adcc:	21003fcc 	andi	r4,r4,255
   2add0:	2003421e 	bne	r4,zero,2badc <___vfiprintf_internal_r+0x1454>
   2add4:	008000f4 	movhi	r2,3
   2add8:	108bf204 	addi	r2,r2,12232
   2addc:	d8802615 	stw	r2,152(sp)
   2ade0:	a080080c 	andi	r2,r20,32
   2ade4:	1000aa26 	beq	r2,zero,2b090 <___vfiprintf_internal_r+0xa08>
   2ade8:	da802217 	ldw	r10,136(sp)
   2adec:	54800017 	ldw	r18,0(r10)
   2adf0:	54c00117 	ldw	r19,4(r10)
   2adf4:	52800204 	addi	r10,r10,8
   2adf8:	da802215 	stw	r10,136(sp)
   2adfc:	a080004c 	andi	r2,r20,1
   2ae00:	1001d226 	beq	r2,zero,2b54c <___vfiprintf_internal_r+0xec4>
   2ae04:	94c4b03a 	or	r2,r18,r19
   2ae08:	1002351e 	bne	r2,zero,2b6e0 <___vfiprintf_internal_r+0x1058>
   2ae0c:	d8001d85 	stb	zero,118(sp)
   2ae10:	48022216 	blt	r9,zero,2b69c <___vfiprintf_internal_r+0x1014>
   2ae14:	00bfdfc4 	movi	r2,-129
   2ae18:	a0a8703a 	and	r20,r20,r2
   2ae1c:	003f1506 	br	2aa74 <_gp+0xfffedc54>
   2ae20:	da802217 	ldw	r10,136(sp)
   2ae24:	04800044 	movi	r18,1
   2ae28:	d8001d85 	stb	zero,118(sp)
   2ae2c:	50800017 	ldw	r2,0(r10)
   2ae30:	52800104 	addi	r10,r10,4
   2ae34:	da802215 	stw	r10,136(sp)
   2ae38:	d8801005 	stb	r2,64(sp)
   2ae3c:	9027883a 	mov	r19,r18
   2ae40:	dd401004 	addi	r21,sp,64
   2ae44:	0013883a 	mov	r9,zero
   2ae48:	003f1706 	br	2aaa8 <_gp+0xfffedc88>
   2ae4c:	21003fcc 	andi	r4,r4,255
   2ae50:	2003201e 	bne	r4,zero,2bad4 <___vfiprintf_internal_r+0x144c>
   2ae54:	a080080c 	andi	r2,r20,32
   2ae58:	10004b26 	beq	r2,zero,2af88 <___vfiprintf_internal_r+0x900>
   2ae5c:	da802217 	ldw	r10,136(sp)
   2ae60:	50800117 	ldw	r2,4(r10)
   2ae64:	54800017 	ldw	r18,0(r10)
   2ae68:	52800204 	addi	r10,r10,8
   2ae6c:	da802215 	stw	r10,136(sp)
   2ae70:	1027883a 	mov	r19,r2
   2ae74:	10022c16 	blt	r2,zero,2b728 <___vfiprintf_internal_r+0x10a0>
   2ae78:	df001d83 	ldbu	fp,118(sp)
   2ae7c:	48007216 	blt	r9,zero,2b048 <___vfiprintf_internal_r+0x9c0>
   2ae80:	00ffdfc4 	movi	r3,-129
   2ae84:	94c4b03a 	or	r2,r18,r19
   2ae88:	a0e8703a 	and	r20,r20,r3
   2ae8c:	1000cc26 	beq	r2,zero,2b1c0 <___vfiprintf_internal_r+0xb38>
   2ae90:	98021026 	beq	r19,zero,2b6d4 <___vfiprintf_internal_r+0x104c>
   2ae94:	dc402415 	stw	r17,144(sp)
   2ae98:	dc002515 	stw	r16,148(sp)
   2ae9c:	9823883a 	mov	r17,r19
   2aea0:	9021883a 	mov	r16,r18
   2aea4:	dd401a04 	addi	r21,sp,104
   2aea8:	4825883a 	mov	r18,r9
   2aeac:	4027883a 	mov	r19,r8
   2aeb0:	8009883a 	mov	r4,r16
   2aeb4:	880b883a 	mov	r5,r17
   2aeb8:	01800284 	movi	r6,10
   2aebc:	000f883a 	mov	r7,zero
   2aec0:	002ca680 	call	2ca68 <__umoddi3>
   2aec4:	10800c04 	addi	r2,r2,48
   2aec8:	ad7fffc4 	addi	r21,r21,-1
   2aecc:	8009883a 	mov	r4,r16
   2aed0:	880b883a 	mov	r5,r17
   2aed4:	a8800005 	stb	r2,0(r21)
   2aed8:	01800284 	movi	r6,10
   2aedc:	000f883a 	mov	r7,zero
   2aee0:	002c4f00 	call	2c4f0 <__udivdi3>
   2aee4:	1021883a 	mov	r16,r2
   2aee8:	10c4b03a 	or	r2,r2,r3
   2aeec:	1823883a 	mov	r17,r3
   2aef0:	103fef1e 	bne	r2,zero,2aeb0 <_gp+0xfffee090>
   2aef4:	dc402417 	ldw	r17,144(sp)
   2aef8:	dc002517 	ldw	r16,148(sp)
   2aefc:	9013883a 	mov	r9,r18
   2af00:	9811883a 	mov	r8,r19
   2af04:	da801e17 	ldw	r10,120(sp)
   2af08:	5567c83a 	sub	r19,r10,r21
   2af0c:	003ede06 	br	2aa88 <_gp+0xfffedc68>
   2af10:	38803fcc 	andi	r2,r7,255
   2af14:	1080201c 	xori	r2,r2,128
   2af18:	10bfe004 	addi	r2,r2,-128
   2af1c:	1002371e 	bne	r2,zero,2b7fc <___vfiprintf_internal_r+0x1174>
   2af20:	01000044 	movi	r4,1
   2af24:	01c00804 	movi	r7,32
   2af28:	80c00007 	ldb	r3,0(r16)
   2af2c:	003e3506 	br	2a804 <_gp+0xfffed9e4>
   2af30:	a5000054 	ori	r20,r20,1
   2af34:	80c00007 	ldb	r3,0(r16)
   2af38:	003e3206 	br	2a804 <_gp+0xfffed9e4>
   2af3c:	a5002014 	ori	r20,r20,128
   2af40:	80c00007 	ldb	r3,0(r16)
   2af44:	003e2f06 	br	2a804 <_gp+0xfffed9e4>
   2af48:	8015883a 	mov	r10,r16
   2af4c:	0023883a 	mov	r17,zero
   2af50:	18bff404 	addi	r2,r3,-48
   2af54:	50c00007 	ldb	r3,0(r10)
   2af58:	8c4002a4 	muli	r17,r17,10
   2af5c:	84000044 	addi	r16,r16,1
   2af60:	8015883a 	mov	r10,r16
   2af64:	1463883a 	add	r17,r2,r17
   2af68:	18bff404 	addi	r2,r3,-48
   2af6c:	30bff92e 	bgeu	r6,r2,2af54 <_gp+0xfffee134>
   2af70:	003e2506 	br	2a808 <_gp+0xfffed9e8>
   2af74:	21003fcc 	andi	r4,r4,255
   2af78:	2002d41e 	bne	r4,zero,2bacc <___vfiprintf_internal_r+0x1444>
   2af7c:	a5000414 	ori	r20,r20,16
   2af80:	a080080c 	andi	r2,r20,32
   2af84:	103fb51e 	bne	r2,zero,2ae5c <_gp+0xfffee03c>
   2af88:	a080040c 	andi	r2,r20,16
   2af8c:	1001f826 	beq	r2,zero,2b770 <___vfiprintf_internal_r+0x10e8>
   2af90:	da802217 	ldw	r10,136(sp)
   2af94:	54800017 	ldw	r18,0(r10)
   2af98:	52800104 	addi	r10,r10,4
   2af9c:	da802215 	stw	r10,136(sp)
   2afa0:	9027d7fa 	srai	r19,r18,31
   2afa4:	9805883a 	mov	r2,r19
   2afa8:	003fb206 	br	2ae74 <_gp+0xfffee054>
   2afac:	21003fcc 	andi	r4,r4,255
   2afb0:	2002c41e 	bne	r4,zero,2bac4 <___vfiprintf_internal_r+0x143c>
   2afb4:	a5000414 	ori	r20,r20,16
   2afb8:	a080080c 	andi	r2,r20,32
   2afbc:	103f5f1e 	bne	r2,zero,2ad3c <_gp+0xfffedf1c>
   2afc0:	a080040c 	andi	r2,r20,16
   2afc4:	10020f26 	beq	r2,zero,2b804 <___vfiprintf_internal_r+0x117c>
   2afc8:	da802217 	ldw	r10,136(sp)
   2afcc:	d8001d85 	stb	zero,118(sp)
   2afd0:	0027883a 	mov	r19,zero
   2afd4:	50800104 	addi	r2,r10,4
   2afd8:	54800017 	ldw	r18,0(r10)
   2afdc:	48021116 	blt	r9,zero,2b824 <___vfiprintf_internal_r+0x119c>
   2afe0:	00ffdfc4 	movi	r3,-129
   2afe4:	d8802215 	stw	r2,136(sp)
   2afe8:	a0e8703a 	and	r20,r20,r3
   2afec:	903f5e1e 	bne	r18,zero,2ad68 <_gp+0xfffedf48>
   2aff0:	0039883a 	mov	fp,zero
   2aff4:	4802a626 	beq	r9,zero,2ba90 <___vfiprintf_internal_r+0x1408>
   2aff8:	0025883a 	mov	r18,zero
   2affc:	0027883a 	mov	r19,zero
   2b000:	003f5a06 	br	2ad6c <_gp+0xfffedf4c>
   2b004:	21003fcc 	andi	r4,r4,255
   2b008:	20029f1e 	bne	r4,zero,2ba88 <___vfiprintf_internal_r+0x1400>
   2b00c:	a5000414 	ori	r20,r20,16
   2b010:	a080080c 	andi	r2,r20,32
   2b014:	10005e1e 	bne	r2,zero,2b190 <___vfiprintf_internal_r+0xb08>
   2b018:	a080040c 	andi	r2,r20,16
   2b01c:	1001a21e 	bne	r2,zero,2b6a8 <___vfiprintf_internal_r+0x1020>
   2b020:	a080100c 	andi	r2,r20,64
   2b024:	d8001d85 	stb	zero,118(sp)
   2b028:	da802217 	ldw	r10,136(sp)
   2b02c:	1002231e 	bne	r2,zero,2b8bc <___vfiprintf_internal_r+0x1234>
   2b030:	50800104 	addi	r2,r10,4
   2b034:	54800017 	ldw	r18,0(r10)
   2b038:	0027883a 	mov	r19,zero
   2b03c:	4801a00e 	bge	r9,zero,2b6c0 <___vfiprintf_internal_r+0x1038>
   2b040:	d8802215 	stw	r2,136(sp)
   2b044:	0039883a 	mov	fp,zero
   2b048:	94c4b03a 	or	r2,r18,r19
   2b04c:	103f901e 	bne	r2,zero,2ae90 <_gp+0xfffee070>
   2b050:	00800044 	movi	r2,1
   2b054:	10803fcc 	andi	r2,r2,255
   2b058:	00c00044 	movi	r3,1
   2b05c:	10c05926 	beq	r2,r3,2b1c4 <___vfiprintf_internal_r+0xb3c>
   2b060:	00c00084 	movi	r3,2
   2b064:	10ffe41e 	bne	r2,r3,2aff8 <_gp+0xfffee1d8>
   2b068:	0025883a 	mov	r18,zero
   2b06c:	0027883a 	mov	r19,zero
   2b070:	00013d06 	br	2b568 <___vfiprintf_internal_r+0xee0>
   2b074:	21003fcc 	andi	r4,r4,255
   2b078:	2002811e 	bne	r4,zero,2ba80 <___vfiprintf_internal_r+0x13f8>
   2b07c:	008000f4 	movhi	r2,3
   2b080:	108bed04 	addi	r2,r2,12212
   2b084:	d8802615 	stw	r2,152(sp)
   2b088:	a080080c 	andi	r2,r20,32
   2b08c:	103f561e 	bne	r2,zero,2ade8 <_gp+0xfffedfc8>
   2b090:	a080040c 	andi	r2,r20,16
   2b094:	1001d126 	beq	r2,zero,2b7dc <___vfiprintf_internal_r+0x1154>
   2b098:	da802217 	ldw	r10,136(sp)
   2b09c:	0027883a 	mov	r19,zero
   2b0a0:	54800017 	ldw	r18,0(r10)
   2b0a4:	52800104 	addi	r10,r10,4
   2b0a8:	da802215 	stw	r10,136(sp)
   2b0ac:	003f5306 	br	2adfc <_gp+0xfffedfdc>
   2b0b0:	da802217 	ldw	r10,136(sp)
   2b0b4:	d8001d85 	stb	zero,118(sp)
   2b0b8:	55400017 	ldw	r21,0(r10)
   2b0bc:	50c00104 	addi	r3,r10,4
   2b0c0:	a8024226 	beq	r21,zero,2b9cc <___vfiprintf_internal_r+0x1344>
   2b0c4:	48021816 	blt	r9,zero,2b928 <___vfiprintf_internal_r+0x12a0>
   2b0c8:	480d883a 	mov	r6,r9
   2b0cc:	000b883a 	mov	r5,zero
   2b0d0:	a809883a 	mov	r4,r21
   2b0d4:	d8c02a15 	stw	r3,168(sp)
   2b0d8:	da002b15 	stw	r8,172(sp)
   2b0dc:	da402c15 	stw	r9,176(sp)
   2b0e0:	0028adc0 	call	28adc <memchr>
   2b0e4:	d8c02a17 	ldw	r3,168(sp)
   2b0e8:	da002b17 	ldw	r8,172(sp)
   2b0ec:	da402c17 	ldw	r9,176(sp)
   2b0f0:	10024826 	beq	r2,zero,2ba14 <___vfiprintf_internal_r+0x138c>
   2b0f4:	1567c83a 	sub	r19,r2,r21
   2b0f8:	df001d83 	ldbu	fp,118(sp)
   2b0fc:	d8c02215 	stw	r3,136(sp)
   2b100:	0013883a 	mov	r9,zero
   2b104:	003e6006 	br	2aa88 <_gp+0xfffedc68>
   2b108:	21003fcc 	andi	r4,r4,255
   2b10c:	203fc026 	beq	r4,zero,2b010 <_gp+0xfffee1f0>
   2b110:	d9c01d85 	stb	r7,118(sp)
   2b114:	003fbe06 	br	2b010 <_gp+0xfffee1f0>
   2b118:	da802217 	ldw	r10,136(sp)
   2b11c:	54400017 	ldw	r17,0(r10)
   2b120:	50800104 	addi	r2,r10,4
   2b124:	883e3b16 	blt	r17,zero,2aa14 <_gp+0xfffedbf4>
   2b128:	d8802215 	stw	r2,136(sp)
   2b12c:	80c00007 	ldb	r3,0(r16)
   2b130:	003db406 	br	2a804 <_gp+0xfffed9e4>
   2b134:	01000044 	movi	r4,1
   2b138:	01c00ac4 	movi	r7,43
   2b13c:	80c00007 	ldb	r3,0(r16)
   2b140:	003db006 	br	2a804 <_gp+0xfffed9e4>
   2b144:	80c00007 	ldb	r3,0(r16)
   2b148:	82800044 	addi	r10,r16,1
   2b14c:	1b423c26 	beq	r3,r13,2ba40 <___vfiprintf_internal_r+0x13b8>
   2b150:	18bff404 	addi	r2,r3,-48
   2b154:	0013883a 	mov	r9,zero
   2b158:	30822b36 	bltu	r6,r2,2ba08 <___vfiprintf_internal_r+0x1380>
   2b15c:	50c00007 	ldb	r3,0(r10)
   2b160:	4a4002a4 	muli	r9,r9,10
   2b164:	54000044 	addi	r16,r10,1
   2b168:	8015883a 	mov	r10,r16
   2b16c:	4893883a 	add	r9,r9,r2
   2b170:	18bff404 	addi	r2,r3,-48
   2b174:	30bff92e 	bgeu	r6,r2,2b15c <_gp+0xfffee33c>
   2b178:	483da30e 	bge	r9,zero,2a808 <_gp+0xfffed9e8>
   2b17c:	027fffc4 	movi	r9,-1
   2b180:	003da106 	br	2a808 <_gp+0xfffed9e8>
   2b184:	a5001014 	ori	r20,r20,64
   2b188:	80c00007 	ldb	r3,0(r16)
   2b18c:	003d9d06 	br	2a804 <_gp+0xfffed9e4>
   2b190:	da802217 	ldw	r10,136(sp)
   2b194:	d8001d85 	stb	zero,118(sp)
   2b198:	50c00204 	addi	r3,r10,8
   2b19c:	54800017 	ldw	r18,0(r10)
   2b1a0:	54c00117 	ldw	r19,4(r10)
   2b1a4:	4801ca16 	blt	r9,zero,2b8d0 <___vfiprintf_internal_r+0x1248>
   2b1a8:	013fdfc4 	movi	r4,-129
   2b1ac:	94c4b03a 	or	r2,r18,r19
   2b1b0:	d8c02215 	stw	r3,136(sp)
   2b1b4:	a128703a 	and	r20,r20,r4
   2b1b8:	0039883a 	mov	fp,zero
   2b1bc:	103f341e 	bne	r2,zero,2ae90 <_gp+0xfffee070>
   2b1c0:	483e2e26 	beq	r9,zero,2aa7c <_gp+0xfffedc5c>
   2b1c4:	0025883a 	mov	r18,zero
   2b1c8:	94800c04 	addi	r18,r18,48
   2b1cc:	dc8019c5 	stb	r18,103(sp)
   2b1d0:	dcc02717 	ldw	r19,156(sp)
   2b1d4:	dd4019c4 	addi	r21,sp,103
   2b1d8:	003e2b06 	br	2aa88 <_gp+0xfffedc68>
   2b1dc:	21003fcc 	andi	r4,r4,255
   2b1e0:	2002361e 	bne	r4,zero,2babc <___vfiprintf_internal_r+0x1434>
   2b1e4:	1801c126 	beq	r3,zero,2b8ec <___vfiprintf_internal_r+0x1264>
   2b1e8:	04800044 	movi	r18,1
   2b1ec:	d8c01005 	stb	r3,64(sp)
   2b1f0:	d8001d85 	stb	zero,118(sp)
   2b1f4:	9027883a 	mov	r19,r18
   2b1f8:	dd401004 	addi	r21,sp,64
   2b1fc:	003f1106 	br	2ae44 <_gp+0xfffee024>
   2b200:	d9402117 	ldw	r5,132(sp)
   2b204:	d9002017 	ldw	r4,128(sp)
   2b208:	d9801a04 	addi	r6,sp,104
   2b20c:	d9c02b15 	stw	r7,172(sp)
   2b210:	dbc02a15 	stw	r15,168(sp)
   2b214:	002a5740 	call	2a574 <__sprint_r.part.0>
   2b218:	d9c02b17 	ldw	r7,172(sp)
   2b21c:	dbc02a17 	ldw	r15,168(sp)
   2b220:	10006d1e 	bne	r2,zero,2b3d8 <___vfiprintf_internal_r+0xd50>
   2b224:	d9801b17 	ldw	r6,108(sp)
   2b228:	d8801c17 	ldw	r2,112(sp)
   2b22c:	d811883a 	mov	r8,sp
   2b230:	31400044 	addi	r5,r6,1
   2b234:	003e3306 	br	2ab04 <_gp+0xfffedce4>
   2b238:	d9401b17 	ldw	r5,108(sp)
   2b23c:	d8801c17 	ldw	r2,112(sp)
   2b240:	29000044 	addi	r4,r5,1
   2b244:	d8c01d87 	ldb	r3,118(sp)
   2b248:	183e4d26 	beq	r3,zero,2ab80 <_gp+0xfffedd60>
   2b24c:	00c00044 	movi	r3,1
   2b250:	d9401d84 	addi	r5,sp,118
   2b254:	10c5883a 	add	r2,r2,r3
   2b258:	41400015 	stw	r5,0(r8)
   2b25c:	40c00115 	stw	r3,4(r8)
   2b260:	d8801c15 	stw	r2,112(sp)
   2b264:	d9001b15 	stw	r4,108(sp)
   2b268:	014001c4 	movi	r5,7
   2b26c:	2900a90e 	bge	r5,r4,2b514 <___vfiprintf_internal_r+0xe8c>
   2b270:	1000da1e 	bne	r2,zero,2b5dc <___vfiprintf_internal_r+0xf54>
   2b274:	7000ab1e 	bne	r14,zero,2b524 <___vfiprintf_internal_r+0xe9c>
   2b278:	000b883a 	mov	r5,zero
   2b27c:	1809883a 	mov	r4,r3
   2b280:	d811883a 	mov	r8,sp
   2b284:	00c02004 	movi	r3,128
   2b288:	e0fe4d26 	beq	fp,r3,2abc0 <_gp+0xfffedda0>
   2b28c:	4cf9c83a 	sub	fp,r9,r19
   2b290:	073e7b0e 	bge	zero,fp,2ac80 <_gp+0xfffede60>
   2b294:	01c00404 	movi	r7,16
   2b298:	3f01900e 	bge	r7,fp,2b8dc <___vfiprintf_internal_r+0x1254>
   2b29c:	00c000f4 	movhi	r3,3
   2b2a0:	18cc5304 	addi	r3,r3,12620
   2b2a4:	d8c02415 	stw	r3,144(sp)
   2b2a8:	034001c4 	movi	r13,7
   2b2ac:	00000506 	br	2b2c4 <___vfiprintf_internal_r+0xc3c>
   2b2b0:	29000084 	addi	r4,r5,2
   2b2b4:	42000204 	addi	r8,r8,8
   2b2b8:	180b883a 	mov	r5,r3
   2b2bc:	e73ffc04 	addi	fp,fp,-16
   2b2c0:	3f000d0e 	bge	r7,fp,2b2f8 <___vfiprintf_internal_r+0xc70>
   2b2c4:	10800404 	addi	r2,r2,16
   2b2c8:	28c00044 	addi	r3,r5,1
   2b2cc:	45c00015 	stw	r23,0(r8)
   2b2d0:	41c00115 	stw	r7,4(r8)
   2b2d4:	d8801c15 	stw	r2,112(sp)
   2b2d8:	d8c01b15 	stw	r3,108(sp)
   2b2dc:	68fff40e 	bge	r13,r3,2b2b0 <_gp+0xfffee490>
   2b2e0:	1000101e 	bne	r2,zero,2b324 <___vfiprintf_internal_r+0xc9c>
   2b2e4:	e73ffc04 	addi	fp,fp,-16
   2b2e8:	01000044 	movi	r4,1
   2b2ec:	000b883a 	mov	r5,zero
   2b2f0:	d811883a 	mov	r8,sp
   2b2f4:	3f3ff316 	blt	r7,fp,2b2c4 <_gp+0xfffee4a4>
   2b2f8:	da802417 	ldw	r10,144(sp)
   2b2fc:	1705883a 	add	r2,r2,fp
   2b300:	47000115 	stw	fp,4(r8)
   2b304:	42800015 	stw	r10,0(r8)
   2b308:	d8801c15 	stw	r2,112(sp)
   2b30c:	d9001b15 	stw	r4,108(sp)
   2b310:	00c001c4 	movi	r3,7
   2b314:	19003616 	blt	r3,r4,2b3f0 <___vfiprintf_internal_r+0xd68>
   2b318:	42000204 	addi	r8,r8,8
   2b31c:	21000044 	addi	r4,r4,1
   2b320:	003e5706 	br	2ac80 <_gp+0xfffede60>
   2b324:	d9402117 	ldw	r5,132(sp)
   2b328:	d9002017 	ldw	r4,128(sp)
   2b32c:	d9801a04 	addi	r6,sp,104
   2b330:	d9c02b15 	stw	r7,172(sp)
   2b334:	db402a15 	stw	r13,168(sp)
   2b338:	002a5740 	call	2a574 <__sprint_r.part.0>
   2b33c:	d9c02b17 	ldw	r7,172(sp)
   2b340:	db402a17 	ldw	r13,168(sp)
   2b344:	1000241e 	bne	r2,zero,2b3d8 <___vfiprintf_internal_r+0xd50>
   2b348:	d9401b17 	ldw	r5,108(sp)
   2b34c:	d8801c17 	ldw	r2,112(sp)
   2b350:	d811883a 	mov	r8,sp
   2b354:	29000044 	addi	r4,r5,1
   2b358:	003fd806 	br	2b2bc <_gp+0xfffee49c>
   2b35c:	d9401b17 	ldw	r5,108(sp)
   2b360:	00c000f4 	movhi	r3,3
   2b364:	18cc5704 	addi	r3,r3,12636
   2b368:	d8c02415 	stw	r3,144(sp)
   2b36c:	29400044 	addi	r5,r5,1
   2b370:	d8c02417 	ldw	r3,144(sp)
   2b374:	14c5883a 	add	r2,r2,r19
   2b378:	44c00115 	stw	r19,4(r8)
   2b37c:	40c00015 	stw	r3,0(r8)
   2b380:	d8801c15 	stw	r2,112(sp)
   2b384:	d9401b15 	stw	r5,108(sp)
   2b388:	00c001c4 	movi	r3,7
   2b38c:	1940070e 	bge	r3,r5,2b3ac <___vfiprintf_internal_r+0xd24>
   2b390:	103e4826 	beq	r2,zero,2acb4 <_gp+0xfffede94>
   2b394:	d9402117 	ldw	r5,132(sp)
   2b398:	d9002017 	ldw	r4,128(sp)
   2b39c:	d9801a04 	addi	r6,sp,104
   2b3a0:	002a5740 	call	2a574 <__sprint_r.part.0>
   2b3a4:	10000c1e 	bne	r2,zero,2b3d8 <___vfiprintf_internal_r+0xd50>
   2b3a8:	d8801c17 	ldw	r2,112(sp)
   2b3ac:	8c80010e 	bge	r17,r18,2b3b4 <___vfiprintf_internal_r+0xd2c>
   2b3b0:	9023883a 	mov	r17,r18
   2b3b4:	da802317 	ldw	r10,140(sp)
   2b3b8:	5455883a 	add	r10,r10,r17
   2b3bc:	da802315 	stw	r10,140(sp)
   2b3c0:	103e4126 	beq	r2,zero,2acc8 <_gp+0xfffedea8>
   2b3c4:	d9402117 	ldw	r5,132(sp)
   2b3c8:	d9002017 	ldw	r4,128(sp)
   2b3cc:	d9801a04 	addi	r6,sp,104
   2b3d0:	002a5740 	call	2a574 <__sprint_r.part.0>
   2b3d4:	103e3c26 	beq	r2,zero,2acc8 <_gp+0xfffedea8>
   2b3d8:	dd002117 	ldw	r20,132(sp)
   2b3dc:	a080030b 	ldhu	r2,12(r20)
   2b3e0:	1080100c 	andi	r2,r2,64
   2b3e4:	1001231e 	bne	r2,zero,2b874 <___vfiprintf_internal_r+0x11ec>
   2b3e8:	d8802317 	ldw	r2,140(sp)
   2b3ec:	003d7b06 	br	2a9dc <_gp+0xfffedbbc>
   2b3f0:	1000991e 	bne	r2,zero,2b658 <___vfiprintf_internal_r+0xfd0>
   2b3f4:	00c00044 	movi	r3,1
   2b3f8:	9805883a 	mov	r2,r19
   2b3fc:	dd400015 	stw	r21,0(sp)
   2b400:	dcc00115 	stw	r19,4(sp)
   2b404:	dcc01c15 	stw	r19,112(sp)
   2b408:	d8c01b15 	stw	r3,108(sp)
   2b40c:	d811883a 	mov	r8,sp
   2b410:	42000204 	addi	r8,r8,8
   2b414:	a2c0010c 	andi	r11,r20,4
   2b418:	583fe426 	beq	r11,zero,2b3ac <_gp+0xfffee58c>
   2b41c:	8ca7c83a 	sub	r19,r17,r18
   2b420:	04ffe20e 	bge	zero,r19,2b3ac <_gp+0xfffee58c>
   2b424:	01c00404 	movi	r7,16
   2b428:	3cffcc0e 	bge	r7,r19,2b35c <_gp+0xfffee53c>
   2b42c:	028000f4 	movhi	r10,3
   2b430:	528c5704 	addi	r10,r10,12636
   2b434:	d9001b17 	ldw	r4,108(sp)
   2b438:	da802415 	stw	r10,144(sp)
   2b43c:	382b883a 	mov	r21,r7
   2b440:	050001c4 	movi	r20,7
   2b444:	df002017 	ldw	fp,128(sp)
   2b448:	00000506 	br	2b460 <___vfiprintf_internal_r+0xdd8>
   2b44c:	21400084 	addi	r5,r4,2
   2b450:	42000204 	addi	r8,r8,8
   2b454:	1809883a 	mov	r4,r3
   2b458:	9cfffc04 	addi	r19,r19,-16
   2b45c:	acffc40e 	bge	r21,r19,2b370 <_gp+0xfffee550>
   2b460:	10800404 	addi	r2,r2,16
   2b464:	20c00044 	addi	r3,r4,1
   2b468:	45800015 	stw	r22,0(r8)
   2b46c:	45400115 	stw	r21,4(r8)
   2b470:	d8801c15 	stw	r2,112(sp)
   2b474:	d8c01b15 	stw	r3,108(sp)
   2b478:	a0fff40e 	bge	r20,r3,2b44c <_gp+0xfffee62c>
   2b47c:	1000041e 	bne	r2,zero,2b490 <___vfiprintf_internal_r+0xe08>
   2b480:	01400044 	movi	r5,1
   2b484:	0009883a 	mov	r4,zero
   2b488:	d811883a 	mov	r8,sp
   2b48c:	003ff206 	br	2b458 <_gp+0xfffee638>
   2b490:	d9402117 	ldw	r5,132(sp)
   2b494:	d9801a04 	addi	r6,sp,104
   2b498:	e009883a 	mov	r4,fp
   2b49c:	002a5740 	call	2a574 <__sprint_r.part.0>
   2b4a0:	103fcd1e 	bne	r2,zero,2b3d8 <_gp+0xfffee5b8>
   2b4a4:	d9001b17 	ldw	r4,108(sp)
   2b4a8:	d8801c17 	ldw	r2,112(sp)
   2b4ac:	d811883a 	mov	r8,sp
   2b4b0:	21400044 	addi	r5,r4,1
   2b4b4:	003fe806 	br	2b458 <_gp+0xfffee638>
   2b4b8:	d9402117 	ldw	r5,132(sp)
   2b4bc:	d9002017 	ldw	r4,128(sp)
   2b4c0:	d9801a04 	addi	r6,sp,104
   2b4c4:	d9c02b15 	stw	r7,172(sp)
   2b4c8:	db402a15 	stw	r13,168(sp)
   2b4cc:	002a5740 	call	2a574 <__sprint_r.part.0>
   2b4d0:	d9c02b17 	ldw	r7,172(sp)
   2b4d4:	db402a17 	ldw	r13,168(sp)
   2b4d8:	103fbf1e 	bne	r2,zero,2b3d8 <_gp+0xfffee5b8>
   2b4dc:	d9401b17 	ldw	r5,108(sp)
   2b4e0:	d8801c17 	ldw	r2,112(sp)
   2b4e4:	d811883a 	mov	r8,sp
   2b4e8:	29800044 	addi	r6,r5,1
   2b4ec:	003dc406 	br	2ac00 <_gp+0xfffedde0>
   2b4f0:	1000d21e 	bne	r2,zero,2b83c <___vfiprintf_internal_r+0x11b4>
   2b4f4:	d8c01d87 	ldb	r3,118(sp)
   2b4f8:	18009526 	beq	r3,zero,2b750 <___vfiprintf_internal_r+0x10c8>
   2b4fc:	00800044 	movi	r2,1
   2b500:	d8c01d84 	addi	r3,sp,118
   2b504:	1009883a 	mov	r4,r2
   2b508:	d8c00015 	stw	r3,0(sp)
   2b50c:	d8800115 	stw	r2,4(sp)
   2b510:	d811883a 	mov	r8,sp
   2b514:	200b883a 	mov	r5,r4
   2b518:	42000204 	addi	r8,r8,8
   2b51c:	21000044 	addi	r4,r4,1
   2b520:	003d9706 	br	2ab80 <_gp+0xfffedd60>
   2b524:	d9001d04 	addi	r4,sp,116
   2b528:	00800084 	movi	r2,2
   2b52c:	d9000015 	stw	r4,0(sp)
   2b530:	d8800115 	stw	r2,4(sp)
   2b534:	1809883a 	mov	r4,r3
   2b538:	d811883a 	mov	r8,sp
   2b53c:	200b883a 	mov	r5,r4
   2b540:	42000204 	addi	r8,r8,8
   2b544:	21000044 	addi	r4,r4,1
   2b548:	003f4e06 	br	2b284 <_gp+0xfffee464>
   2b54c:	d8001d85 	stb	zero,118(sp)
   2b550:	48005016 	blt	r9,zero,2b694 <___vfiprintf_internal_r+0x100c>
   2b554:	00ffdfc4 	movi	r3,-129
   2b558:	94c4b03a 	or	r2,r18,r19
   2b55c:	a0e8703a 	and	r20,r20,r3
   2b560:	103d4426 	beq	r2,zero,2aa74 <_gp+0xfffedc54>
   2b564:	0039883a 	mov	fp,zero
   2b568:	d9002617 	ldw	r4,152(sp)
   2b56c:	dd401a04 	addi	r21,sp,104
   2b570:	908003cc 	andi	r2,r18,15
   2b574:	9806973a 	slli	r3,r19,28
   2b578:	2085883a 	add	r2,r4,r2
   2b57c:	9024d13a 	srli	r18,r18,4
   2b580:	10800003 	ldbu	r2,0(r2)
   2b584:	9826d13a 	srli	r19,r19,4
   2b588:	ad7fffc4 	addi	r21,r21,-1
   2b58c:	1ca4b03a 	or	r18,r3,r18
   2b590:	a8800005 	stb	r2,0(r21)
   2b594:	94c4b03a 	or	r2,r18,r19
   2b598:	103ff51e 	bne	r2,zero,2b570 <_gp+0xfffee750>
   2b59c:	003e5906 	br	2af04 <_gp+0xfffee0e4>
   2b5a0:	d9402117 	ldw	r5,132(sp)
   2b5a4:	d9002017 	ldw	r4,128(sp)
   2b5a8:	d9801a04 	addi	r6,sp,104
   2b5ac:	002a5740 	call	2a574 <__sprint_r.part.0>
   2b5b0:	103f891e 	bne	r2,zero,2b3d8 <_gp+0xfffee5b8>
   2b5b4:	d8801c17 	ldw	r2,112(sp)
   2b5b8:	d811883a 	mov	r8,sp
   2b5bc:	003f9506 	br	2b414 <_gp+0xfffee5f4>
   2b5c0:	d9402117 	ldw	r5,132(sp)
   2b5c4:	d9002017 	ldw	r4,128(sp)
   2b5c8:	d9801a04 	addi	r6,sp,104
   2b5cc:	002a5740 	call	2a574 <__sprint_r.part.0>
   2b5d0:	103f811e 	bne	r2,zero,2b3d8 <_gp+0xfffee5b8>
   2b5d4:	d811883a 	mov	r8,sp
   2b5d8:	003ced06 	br	2a990 <_gp+0xfffedb70>
   2b5dc:	d9402117 	ldw	r5,132(sp)
   2b5e0:	d9002017 	ldw	r4,128(sp)
   2b5e4:	d9801a04 	addi	r6,sp,104
   2b5e8:	da402c15 	stw	r9,176(sp)
   2b5ec:	db802a15 	stw	r14,168(sp)
   2b5f0:	002a5740 	call	2a574 <__sprint_r.part.0>
   2b5f4:	da402c17 	ldw	r9,176(sp)
   2b5f8:	db802a17 	ldw	r14,168(sp)
   2b5fc:	103f761e 	bne	r2,zero,2b3d8 <_gp+0xfffee5b8>
   2b600:	d9401b17 	ldw	r5,108(sp)
   2b604:	d8801c17 	ldw	r2,112(sp)
   2b608:	d811883a 	mov	r8,sp
   2b60c:	29000044 	addi	r4,r5,1
   2b610:	003d5b06 	br	2ab80 <_gp+0xfffedd60>
   2b614:	d9402117 	ldw	r5,132(sp)
   2b618:	d9002017 	ldw	r4,128(sp)
   2b61c:	d9801a04 	addi	r6,sp,104
   2b620:	da402c15 	stw	r9,176(sp)
   2b624:	002a5740 	call	2a574 <__sprint_r.part.0>
   2b628:	da402c17 	ldw	r9,176(sp)
   2b62c:	103f6a1e 	bne	r2,zero,2b3d8 <_gp+0xfffee5b8>
   2b630:	d9401b17 	ldw	r5,108(sp)
   2b634:	d8801c17 	ldw	r2,112(sp)
   2b638:	d811883a 	mov	r8,sp
   2b63c:	29000044 	addi	r4,r5,1
   2b640:	003f1006 	br	2b284 <_gp+0xfffee464>
   2b644:	1000c31e 	bne	r2,zero,2b954 <___vfiprintf_internal_r+0x12cc>
   2b648:	01000044 	movi	r4,1
   2b64c:	000b883a 	mov	r5,zero
   2b650:	d811883a 	mov	r8,sp
   2b654:	003f0d06 	br	2b28c <_gp+0xfffee46c>
   2b658:	d9402117 	ldw	r5,132(sp)
   2b65c:	d9002017 	ldw	r4,128(sp)
   2b660:	d9801a04 	addi	r6,sp,104
   2b664:	002a5740 	call	2a574 <__sprint_r.part.0>
   2b668:	103f5b1e 	bne	r2,zero,2b3d8 <_gp+0xfffee5b8>
   2b66c:	d9001b17 	ldw	r4,108(sp)
   2b670:	d8801c17 	ldw	r2,112(sp)
   2b674:	d811883a 	mov	r8,sp
   2b678:	21000044 	addi	r4,r4,1
   2b67c:	003d8006 	br	2ac80 <_gp+0xfffede60>
   2b680:	010000f4 	movhi	r4,3
   2b684:	210bf204 	addi	r4,r4,12232
   2b688:	d9002615 	stw	r4,152(sp)
   2b68c:	d8c02215 	stw	r3,136(sp)
   2b690:	1029883a 	mov	r20,r2
   2b694:	94c4b03a 	or	r2,r18,r19
   2b698:	103fb21e 	bne	r2,zero,2b564 <_gp+0xfffee744>
   2b69c:	0039883a 	mov	fp,zero
   2b6a0:	00800084 	movi	r2,2
   2b6a4:	003e6b06 	br	2b054 <_gp+0xfffee234>
   2b6a8:	da802217 	ldw	r10,136(sp)
   2b6ac:	d8001d85 	stb	zero,118(sp)
   2b6b0:	0027883a 	mov	r19,zero
   2b6b4:	50800104 	addi	r2,r10,4
   2b6b8:	54800017 	ldw	r18,0(r10)
   2b6bc:	483e6016 	blt	r9,zero,2b040 <_gp+0xfffee220>
   2b6c0:	00ffdfc4 	movi	r3,-129
   2b6c4:	d8802215 	stw	r2,136(sp)
   2b6c8:	a0e8703a 	and	r20,r20,r3
   2b6cc:	0039883a 	mov	fp,zero
   2b6d0:	903ebb26 	beq	r18,zero,2b1c0 <_gp+0xfffee3a0>
   2b6d4:	00800244 	movi	r2,9
   2b6d8:	14bdee36 	bltu	r2,r18,2ae94 <_gp+0xfffee074>
   2b6dc:	003eba06 	br	2b1c8 <_gp+0xfffee3a8>
   2b6e0:	00800c04 	movi	r2,48
   2b6e4:	d8c01d45 	stb	r3,117(sp)
   2b6e8:	d8801d05 	stb	r2,116(sp)
   2b6ec:	d8001d85 	stb	zero,118(sp)
   2b6f0:	a0c00094 	ori	r3,r20,2
   2b6f4:	4800a916 	blt	r9,zero,2b99c <___vfiprintf_internal_r+0x1314>
   2b6f8:	00bfdfc4 	movi	r2,-129
   2b6fc:	a096703a 	and	r11,r20,r2
   2b700:	5d000094 	ori	r20,r11,2
   2b704:	0039883a 	mov	fp,zero
   2b708:	003f9706 	br	2b568 <_gp+0xfffee748>
   2b70c:	8025883a 	mov	r18,r16
   2b710:	003c2e06 	br	2a7cc <_gp+0xfffed9ac>
   2b714:	008000f4 	movhi	r2,3
   2b718:	108bf204 	addi	r2,r2,12232
   2b71c:	0039883a 	mov	fp,zero
   2b720:	d8802615 	stw	r2,152(sp)
   2b724:	003f9006 	br	2b568 <_gp+0xfffee748>
   2b728:	04a5c83a 	sub	r18,zero,r18
   2b72c:	07000b44 	movi	fp,45
   2b730:	9004c03a 	cmpne	r2,r18,zero
   2b734:	04e7c83a 	sub	r19,zero,r19
   2b738:	df001d85 	stb	fp,118(sp)
   2b73c:	98a7c83a 	sub	r19,r19,r2
   2b740:	48009f16 	blt	r9,zero,2b9c0 <___vfiprintf_internal_r+0x1338>
   2b744:	00bfdfc4 	movi	r2,-129
   2b748:	a0a8703a 	and	r20,r20,r2
   2b74c:	003dd006 	br	2ae90 <_gp+0xfffee070>
   2b750:	70004c26 	beq	r14,zero,2b884 <___vfiprintf_internal_r+0x11fc>
   2b754:	00800084 	movi	r2,2
   2b758:	d8c01d04 	addi	r3,sp,116
   2b75c:	d8c00015 	stw	r3,0(sp)
   2b760:	d8800115 	stw	r2,4(sp)
   2b764:	01000044 	movi	r4,1
   2b768:	d811883a 	mov	r8,sp
   2b76c:	003f7306 	br	2b53c <_gp+0xfffee71c>
   2b770:	a080100c 	andi	r2,r20,64
   2b774:	da802217 	ldw	r10,136(sp)
   2b778:	103e0626 	beq	r2,zero,2af94 <_gp+0xfffee174>
   2b77c:	5480000f 	ldh	r18,0(r10)
   2b780:	52800104 	addi	r10,r10,4
   2b784:	da802215 	stw	r10,136(sp)
   2b788:	9027d7fa 	srai	r19,r18,31
   2b78c:	9805883a 	mov	r2,r19
   2b790:	003db806 	br	2ae74 <_gp+0xfffee054>
   2b794:	a080040c 	andi	r2,r20,16
   2b798:	1000091e 	bne	r2,zero,2b7c0 <___vfiprintf_internal_r+0x1138>
   2b79c:	a2c0100c 	andi	r11,r20,64
   2b7a0:	58000726 	beq	r11,zero,2b7c0 <___vfiprintf_internal_r+0x1138>
   2b7a4:	da802217 	ldw	r10,136(sp)
   2b7a8:	50800017 	ldw	r2,0(r10)
   2b7ac:	52800104 	addi	r10,r10,4
   2b7b0:	da802215 	stw	r10,136(sp)
   2b7b4:	da802317 	ldw	r10,140(sp)
   2b7b8:	1280000d 	sth	r10,0(r2)
   2b7bc:	003be706 	br	2a75c <_gp+0xfffed93c>
   2b7c0:	da802217 	ldw	r10,136(sp)
   2b7c4:	50800017 	ldw	r2,0(r10)
   2b7c8:	52800104 	addi	r10,r10,4
   2b7cc:	da802215 	stw	r10,136(sp)
   2b7d0:	da802317 	ldw	r10,140(sp)
   2b7d4:	12800015 	stw	r10,0(r2)
   2b7d8:	003be006 	br	2a75c <_gp+0xfffed93c>
   2b7dc:	a080100c 	andi	r2,r20,64
   2b7e0:	da802217 	ldw	r10,136(sp)
   2b7e4:	10003026 	beq	r2,zero,2b8a8 <___vfiprintf_internal_r+0x1220>
   2b7e8:	5480000b 	ldhu	r18,0(r10)
   2b7ec:	52800104 	addi	r10,r10,4
   2b7f0:	0027883a 	mov	r19,zero
   2b7f4:	da802215 	stw	r10,136(sp)
   2b7f8:	003d8006 	br	2adfc <_gp+0xfffedfdc>
   2b7fc:	80c00007 	ldb	r3,0(r16)
   2b800:	003c0006 	br	2a804 <_gp+0xfffed9e4>
   2b804:	a080100c 	andi	r2,r20,64
   2b808:	d8001d85 	stb	zero,118(sp)
   2b80c:	da802217 	ldw	r10,136(sp)
   2b810:	1000201e 	bne	r2,zero,2b894 <___vfiprintf_internal_r+0x120c>
   2b814:	50800104 	addi	r2,r10,4
   2b818:	54800017 	ldw	r18,0(r10)
   2b81c:	0027883a 	mov	r19,zero
   2b820:	483def0e 	bge	r9,zero,2afe0 <_gp+0xfffee1c0>
   2b824:	94c6b03a 	or	r3,r18,r19
   2b828:	d8802215 	stw	r2,136(sp)
   2b82c:	183d4e1e 	bne	r3,zero,2ad68 <_gp+0xfffedf48>
   2b830:	0039883a 	mov	fp,zero
   2b834:	0005883a 	mov	r2,zero
   2b838:	003e0606 	br	2b054 <_gp+0xfffee234>
   2b83c:	d9402117 	ldw	r5,132(sp)
   2b840:	d9002017 	ldw	r4,128(sp)
   2b844:	d9801a04 	addi	r6,sp,104
   2b848:	da402c15 	stw	r9,176(sp)
   2b84c:	db802a15 	stw	r14,168(sp)
   2b850:	002a5740 	call	2a574 <__sprint_r.part.0>
   2b854:	da402c17 	ldw	r9,176(sp)
   2b858:	db802a17 	ldw	r14,168(sp)
   2b85c:	103ede1e 	bne	r2,zero,2b3d8 <_gp+0xfffee5b8>
   2b860:	d9401b17 	ldw	r5,108(sp)
   2b864:	d8801c17 	ldw	r2,112(sp)
   2b868:	d811883a 	mov	r8,sp
   2b86c:	29000044 	addi	r4,r5,1
   2b870:	003e7406 	br	2b244 <_gp+0xfffee424>
   2b874:	00bfffc4 	movi	r2,-1
   2b878:	003c5806 	br	2a9dc <_gp+0xfffedbbc>
   2b87c:	d811883a 	mov	r8,sp
   2b880:	003ee806 	br	2b424 <_gp+0xfffee604>
   2b884:	000b883a 	mov	r5,zero
   2b888:	01000044 	movi	r4,1
   2b88c:	d811883a 	mov	r8,sp
   2b890:	003e7c06 	br	2b284 <_gp+0xfffee464>
   2b894:	50800104 	addi	r2,r10,4
   2b898:	5480000b 	ldhu	r18,0(r10)
   2b89c:	0027883a 	mov	r19,zero
   2b8a0:	483dcf0e 	bge	r9,zero,2afe0 <_gp+0xfffee1c0>
   2b8a4:	003fdf06 	br	2b824 <_gp+0xfffeea04>
   2b8a8:	54800017 	ldw	r18,0(r10)
   2b8ac:	52800104 	addi	r10,r10,4
   2b8b0:	0027883a 	mov	r19,zero
   2b8b4:	da802215 	stw	r10,136(sp)
   2b8b8:	003d5006 	br	2adfc <_gp+0xfffedfdc>
   2b8bc:	50800104 	addi	r2,r10,4
   2b8c0:	5480000b 	ldhu	r18,0(r10)
   2b8c4:	0027883a 	mov	r19,zero
   2b8c8:	483f7d0e 	bge	r9,zero,2b6c0 <_gp+0xfffee8a0>
   2b8cc:	003ddc06 	br	2b040 <_gp+0xfffee220>
   2b8d0:	d8c02215 	stw	r3,136(sp)
   2b8d4:	0039883a 	mov	fp,zero
   2b8d8:	003ddb06 	br	2b048 <_gp+0xfffee228>
   2b8dc:	028000f4 	movhi	r10,3
   2b8e0:	528c5304 	addi	r10,r10,12620
   2b8e4:	da802415 	stw	r10,144(sp)
   2b8e8:	003e8306 	br	2b2f8 <_gp+0xfffee4d8>
   2b8ec:	d8801c17 	ldw	r2,112(sp)
   2b8f0:	dd002117 	ldw	r20,132(sp)
   2b8f4:	103eb926 	beq	r2,zero,2b3dc <_gp+0xfffee5bc>
   2b8f8:	d9002017 	ldw	r4,128(sp)
   2b8fc:	d9801a04 	addi	r6,sp,104
   2b900:	a00b883a 	mov	r5,r20
   2b904:	002a5740 	call	2a574 <__sprint_r.part.0>
   2b908:	003eb406 	br	2b3dc <_gp+0xfffee5bc>
   2b90c:	80c00043 	ldbu	r3,1(r16)
   2b910:	a5000814 	ori	r20,r20,32
   2b914:	84000044 	addi	r16,r16,1
   2b918:	18c03fcc 	andi	r3,r3,255
   2b91c:	18c0201c 	xori	r3,r3,128
   2b920:	18ffe004 	addi	r3,r3,-128
   2b924:	003bb706 	br	2a804 <_gp+0xfffed9e4>
   2b928:	a809883a 	mov	r4,r21
   2b92c:	d8c02a15 	stw	r3,168(sp)
   2b930:	da002b15 	stw	r8,172(sp)
   2b934:	0023a400 	call	23a40 <strlen>
   2b938:	d8c02a17 	ldw	r3,168(sp)
   2b93c:	1027883a 	mov	r19,r2
   2b940:	df001d83 	ldbu	fp,118(sp)
   2b944:	d8c02215 	stw	r3,136(sp)
   2b948:	0013883a 	mov	r9,zero
   2b94c:	da002b17 	ldw	r8,172(sp)
   2b950:	003c4d06 	br	2aa88 <_gp+0xfffedc68>
   2b954:	d9402117 	ldw	r5,132(sp)
   2b958:	d9002017 	ldw	r4,128(sp)
   2b95c:	d9801a04 	addi	r6,sp,104
   2b960:	da402c15 	stw	r9,176(sp)
   2b964:	002a5740 	call	2a574 <__sprint_r.part.0>
   2b968:	da402c17 	ldw	r9,176(sp)
   2b96c:	103e9a1e 	bne	r2,zero,2b3d8 <_gp+0xfffee5b8>
   2b970:	d9401b17 	ldw	r5,108(sp)
   2b974:	d8801c17 	ldw	r2,112(sp)
   2b978:	d811883a 	mov	r8,sp
   2b97c:	29000044 	addi	r4,r5,1
   2b980:	003e4206 	br	2b28c <_gp+0xfffee46c>
   2b984:	d9401b17 	ldw	r5,108(sp)
   2b988:	010000f4 	movhi	r4,3
   2b98c:	210c5704 	addi	r4,r4,12636
   2b990:	d9002415 	stw	r4,144(sp)
   2b994:	29400044 	addi	r5,r5,1
   2b998:	003c6d06 	br	2ab50 <_gp+0xfffedd30>
   2b99c:	0039883a 	mov	fp,zero
   2b9a0:	00800084 	movi	r2,2
   2b9a4:	10803fcc 	andi	r2,r2,255
   2b9a8:	01000044 	movi	r4,1
   2b9ac:	11001e26 	beq	r2,r4,2ba28 <___vfiprintf_internal_r+0x13a0>
   2b9b0:	01000084 	movi	r4,2
   2b9b4:	11001e1e 	bne	r2,r4,2ba30 <___vfiprintf_internal_r+0x13a8>
   2b9b8:	1829883a 	mov	r20,r3
   2b9bc:	003eea06 	br	2b568 <_gp+0xfffee748>
   2b9c0:	a007883a 	mov	r3,r20
   2b9c4:	00800044 	movi	r2,1
   2b9c8:	003ff606 	br	2b9a4 <_gp+0xfffeeb84>
   2b9cc:	00800184 	movi	r2,6
   2b9d0:	1240012e 	bgeu	r2,r9,2b9d8 <___vfiprintf_internal_r+0x1350>
   2b9d4:	1013883a 	mov	r9,r2
   2b9d8:	4827883a 	mov	r19,r9
   2b9dc:	4825883a 	mov	r18,r9
   2b9e0:	48001516 	blt	r9,zero,2ba38 <___vfiprintf_internal_r+0x13b0>
   2b9e4:	054000f4 	movhi	r21,3
   2b9e8:	d8c02215 	stw	r3,136(sp)
   2b9ec:	ad4bf704 	addi	r21,r21,12252
   2b9f0:	003d1406 	br	2ae44 <_gp+0xfffee024>
   2b9f4:	028000f4 	movhi	r10,3
   2b9f8:	528c5304 	addi	r10,r10,12620
   2b9fc:	da802415 	stw	r10,144(sp)
   2ba00:	200d883a 	mov	r6,r4
   2ba04:	003c9106 	br	2ac4c <_gp+0xfffede2c>
   2ba08:	5021883a 	mov	r16,r10
   2ba0c:	0013883a 	mov	r9,zero
   2ba10:	003b7d06 	br	2a808 <_gp+0xfffed9e8>
   2ba14:	4827883a 	mov	r19,r9
   2ba18:	df001d83 	ldbu	fp,118(sp)
   2ba1c:	d8c02215 	stw	r3,136(sp)
   2ba20:	0013883a 	mov	r9,zero
   2ba24:	003c1806 	br	2aa88 <_gp+0xfffedc68>
   2ba28:	1829883a 	mov	r20,r3
   2ba2c:	003d1806 	br	2ae90 <_gp+0xfffee070>
   2ba30:	1829883a 	mov	r20,r3
   2ba34:	003ccd06 	br	2ad6c <_gp+0xfffedf4c>
   2ba38:	0025883a 	mov	r18,zero
   2ba3c:	003fe906 	br	2b9e4 <_gp+0xfffeebc4>
   2ba40:	d8802217 	ldw	r2,136(sp)
   2ba44:	80c00043 	ldbu	r3,1(r16)
   2ba48:	5021883a 	mov	r16,r10
   2ba4c:	12400017 	ldw	r9,0(r2)
   2ba50:	10800104 	addi	r2,r2,4
   2ba54:	d8802215 	stw	r2,136(sp)
   2ba58:	483faf0e 	bge	r9,zero,2b918 <_gp+0xfffeeaf8>
   2ba5c:	18c03fcc 	andi	r3,r3,255
   2ba60:	18c0201c 	xori	r3,r3,128
   2ba64:	027fffc4 	movi	r9,-1
   2ba68:	18ffe004 	addi	r3,r3,-128
   2ba6c:	003b6506 	br	2a804 <_gp+0xfffed9e4>
   2ba70:	d9c01d85 	stb	r7,118(sp)
   2ba74:	003ca006 	br	2acf8 <_gp+0xfffeded8>
   2ba78:	d9c01d85 	stb	r7,118(sp)
   2ba7c:	003cad06 	br	2ad34 <_gp+0xfffedf14>
   2ba80:	d9c01d85 	stb	r7,118(sp)
   2ba84:	003d7d06 	br	2b07c <_gp+0xfffee25c>
   2ba88:	d9c01d85 	stb	r7,118(sp)
   2ba8c:	003d5f06 	br	2b00c <_gp+0xfffee1ec>
   2ba90:	a080004c 	andi	r2,r20,1
   2ba94:	0039883a 	mov	fp,zero
   2ba98:	10000526 	beq	r2,zero,2bab0 <___vfiprintf_internal_r+0x1428>
   2ba9c:	00800c04 	movi	r2,48
   2baa0:	d88019c5 	stb	r2,103(sp)
   2baa4:	dcc02717 	ldw	r19,156(sp)
   2baa8:	dd4019c4 	addi	r21,sp,103
   2baac:	003bf606 	br	2aa88 <_gp+0xfffedc68>
   2bab0:	0027883a 	mov	r19,zero
   2bab4:	dd401a04 	addi	r21,sp,104
   2bab8:	003bf306 	br	2aa88 <_gp+0xfffedc68>
   2babc:	d9c01d85 	stb	r7,118(sp)
   2bac0:	003dc806 	br	2b1e4 <_gp+0xfffee3c4>
   2bac4:	d9c01d85 	stb	r7,118(sp)
   2bac8:	003d3a06 	br	2afb4 <_gp+0xfffee194>
   2bacc:	d9c01d85 	stb	r7,118(sp)
   2bad0:	003d2a06 	br	2af7c <_gp+0xfffee15c>
   2bad4:	d9c01d85 	stb	r7,118(sp)
   2bad8:	003cde06 	br	2ae54 <_gp+0xfffee034>
   2badc:	d9c01d85 	stb	r7,118(sp)
   2bae0:	003cbc06 	br	2add4 <_gp+0xfffedfb4>

0002bae4 <__vfiprintf_internal>:
   2bae4:	008000f4 	movhi	r2,3
   2bae8:	10939904 	addi	r2,r2,20068
   2baec:	300f883a 	mov	r7,r6
   2baf0:	280d883a 	mov	r6,r5
   2baf4:	200b883a 	mov	r5,r4
   2baf8:	11000017 	ldw	r4,0(r2)
   2bafc:	002a6881 	jmpi	2a688 <___vfiprintf_internal_r>

0002bb00 <__sbprintf>:
   2bb00:	2880030b 	ldhu	r2,12(r5)
   2bb04:	2ac01917 	ldw	r11,100(r5)
   2bb08:	2a80038b 	ldhu	r10,14(r5)
   2bb0c:	2a400717 	ldw	r9,28(r5)
   2bb10:	2a000917 	ldw	r8,36(r5)
   2bb14:	defee204 	addi	sp,sp,-1144
   2bb18:	00c10004 	movi	r3,1024
   2bb1c:	dc011a15 	stw	r16,1128(sp)
   2bb20:	10bfff4c 	andi	r2,r2,65533
   2bb24:	2821883a 	mov	r16,r5
   2bb28:	d8cb883a 	add	r5,sp,r3
   2bb2c:	dc811c15 	stw	r18,1136(sp)
   2bb30:	dc411b15 	stw	r17,1132(sp)
   2bb34:	dfc11d15 	stw	ra,1140(sp)
   2bb38:	2025883a 	mov	r18,r4
   2bb3c:	d881030d 	sth	r2,1036(sp)
   2bb40:	dac11915 	stw	r11,1124(sp)
   2bb44:	da81038d 	sth	r10,1038(sp)
   2bb48:	da410715 	stw	r9,1052(sp)
   2bb4c:	da010915 	stw	r8,1060(sp)
   2bb50:	dec10015 	stw	sp,1024(sp)
   2bb54:	dec10415 	stw	sp,1040(sp)
   2bb58:	d8c10215 	stw	r3,1032(sp)
   2bb5c:	d8c10515 	stw	r3,1044(sp)
   2bb60:	d8010615 	stw	zero,1048(sp)
   2bb64:	002a6880 	call	2a688 <___vfiprintf_internal_r>
   2bb68:	1023883a 	mov	r17,r2
   2bb6c:	10000416 	blt	r2,zero,2bb80 <__sbprintf+0x80>
   2bb70:	d9410004 	addi	r5,sp,1024
   2bb74:	9009883a 	mov	r4,r18
   2bb78:	00279a00 	call	279a0 <_fflush_r>
   2bb7c:	10000d1e 	bne	r2,zero,2bbb4 <__sbprintf+0xb4>
   2bb80:	d881030b 	ldhu	r2,1036(sp)
   2bb84:	1080100c 	andi	r2,r2,64
   2bb88:	10000326 	beq	r2,zero,2bb98 <__sbprintf+0x98>
   2bb8c:	8080030b 	ldhu	r2,12(r16)
   2bb90:	10801014 	ori	r2,r2,64
   2bb94:	8080030d 	sth	r2,12(r16)
   2bb98:	8805883a 	mov	r2,r17
   2bb9c:	dfc11d17 	ldw	ra,1140(sp)
   2bba0:	dc811c17 	ldw	r18,1136(sp)
   2bba4:	dc411b17 	ldw	r17,1132(sp)
   2bba8:	dc011a17 	ldw	r16,1128(sp)
   2bbac:	dec11e04 	addi	sp,sp,1144
   2bbb0:	f800283a 	ret
   2bbb4:	047fffc4 	movi	r17,-1
   2bbb8:	003ff106 	br	2bb80 <_gp+0xfffeed60>

0002bbbc <_write_r>:
   2bbbc:	defffd04 	addi	sp,sp,-12
   2bbc0:	2805883a 	mov	r2,r5
   2bbc4:	dc000015 	stw	r16,0(sp)
   2bbc8:	040000f4 	movhi	r16,3
   2bbcc:	dc400115 	stw	r17,4(sp)
   2bbd0:	300b883a 	mov	r5,r6
   2bbd4:	841aa604 	addi	r16,r16,27288
   2bbd8:	2023883a 	mov	r17,r4
   2bbdc:	380d883a 	mov	r6,r7
   2bbe0:	1009883a 	mov	r4,r2
   2bbe4:	dfc00215 	stw	ra,8(sp)
   2bbe8:	80000015 	stw	zero,0(r16)
   2bbec:	003074c0 	call	3074c <write>
   2bbf0:	00ffffc4 	movi	r3,-1
   2bbf4:	10c00526 	beq	r2,r3,2bc0c <_write_r+0x50>
   2bbf8:	dfc00217 	ldw	ra,8(sp)
   2bbfc:	dc400117 	ldw	r17,4(sp)
   2bc00:	dc000017 	ldw	r16,0(sp)
   2bc04:	dec00304 	addi	sp,sp,12
   2bc08:	f800283a 	ret
   2bc0c:	80c00017 	ldw	r3,0(r16)
   2bc10:	183ff926 	beq	r3,zero,2bbf8 <_gp+0xfffeedd8>
   2bc14:	88c00015 	stw	r3,0(r17)
   2bc18:	003ff706 	br	2bbf8 <_gp+0xfffeedd8>

0002bc1c <_close_r>:
   2bc1c:	defffd04 	addi	sp,sp,-12
   2bc20:	dc000015 	stw	r16,0(sp)
   2bc24:	040000f4 	movhi	r16,3
   2bc28:	dc400115 	stw	r17,4(sp)
   2bc2c:	841aa604 	addi	r16,r16,27288
   2bc30:	2023883a 	mov	r17,r4
   2bc34:	2809883a 	mov	r4,r5
   2bc38:	dfc00215 	stw	ra,8(sp)
   2bc3c:	80000015 	stw	zero,0(r16)
   2bc40:	002f7f80 	call	2f7f8 <close>
   2bc44:	00ffffc4 	movi	r3,-1
   2bc48:	10c00526 	beq	r2,r3,2bc60 <_close_r+0x44>
   2bc4c:	dfc00217 	ldw	ra,8(sp)
   2bc50:	dc400117 	ldw	r17,4(sp)
   2bc54:	dc000017 	ldw	r16,0(sp)
   2bc58:	dec00304 	addi	sp,sp,12
   2bc5c:	f800283a 	ret
   2bc60:	80c00017 	ldw	r3,0(r16)
   2bc64:	183ff926 	beq	r3,zero,2bc4c <_gp+0xfffeee2c>
   2bc68:	88c00015 	stw	r3,0(r17)
   2bc6c:	003ff706 	br	2bc4c <_gp+0xfffeee2c>

0002bc70 <_calloc_r>:
   2bc70:	298b383a 	mul	r5,r5,r6
   2bc74:	defffe04 	addi	sp,sp,-8
   2bc78:	dfc00115 	stw	ra,4(sp)
   2bc7c:	dc000015 	stw	r16,0(sp)
   2bc80:	0022b980 	call	22b98 <_malloc_r>
   2bc84:	10002926 	beq	r2,zero,2bd2c <_calloc_r+0xbc>
   2bc88:	11bfff17 	ldw	r6,-4(r2)
   2bc8c:	1021883a 	mov	r16,r2
   2bc90:	00bfff04 	movi	r2,-4
   2bc94:	308c703a 	and	r6,r6,r2
   2bc98:	00c00904 	movi	r3,36
   2bc9c:	308d883a 	add	r6,r6,r2
   2bca0:	19801636 	bltu	r3,r6,2bcfc <_calloc_r+0x8c>
   2bca4:	008004c4 	movi	r2,19
   2bca8:	11800b2e 	bgeu	r2,r6,2bcd8 <_calloc_r+0x68>
   2bcac:	80000015 	stw	zero,0(r16)
   2bcb0:	80000115 	stw	zero,4(r16)
   2bcb4:	008006c4 	movi	r2,27
   2bcb8:	11801a2e 	bgeu	r2,r6,2bd24 <_calloc_r+0xb4>
   2bcbc:	80000215 	stw	zero,8(r16)
   2bcc0:	80000315 	stw	zero,12(r16)
   2bcc4:	30c0151e 	bne	r6,r3,2bd1c <_calloc_r+0xac>
   2bcc8:	80000415 	stw	zero,16(r16)
   2bccc:	80800604 	addi	r2,r16,24
   2bcd0:	80000515 	stw	zero,20(r16)
   2bcd4:	00000106 	br	2bcdc <_calloc_r+0x6c>
   2bcd8:	8005883a 	mov	r2,r16
   2bcdc:	10000015 	stw	zero,0(r2)
   2bce0:	10000115 	stw	zero,4(r2)
   2bce4:	10000215 	stw	zero,8(r2)
   2bce8:	8005883a 	mov	r2,r16
   2bcec:	dfc00117 	ldw	ra,4(sp)
   2bcf0:	dc000017 	ldw	r16,0(sp)
   2bcf4:	dec00204 	addi	sp,sp,8
   2bcf8:	f800283a 	ret
   2bcfc:	000b883a 	mov	r5,zero
   2bd00:	8009883a 	mov	r4,r16
   2bd04:	00233a40 	call	233a4 <memset>
   2bd08:	8005883a 	mov	r2,r16
   2bd0c:	dfc00117 	ldw	ra,4(sp)
   2bd10:	dc000017 	ldw	r16,0(sp)
   2bd14:	dec00204 	addi	sp,sp,8
   2bd18:	f800283a 	ret
   2bd1c:	80800404 	addi	r2,r16,16
   2bd20:	003fee06 	br	2bcdc <_gp+0xfffeeebc>
   2bd24:	80800204 	addi	r2,r16,8
   2bd28:	003fec06 	br	2bcdc <_gp+0xfffeeebc>
   2bd2c:	0005883a 	mov	r2,zero
   2bd30:	003fee06 	br	2bcec <_gp+0xfffeeecc>

0002bd34 <_fclose_r>:
   2bd34:	28003926 	beq	r5,zero,2be1c <_fclose_r+0xe8>
   2bd38:	defffc04 	addi	sp,sp,-16
   2bd3c:	dc400115 	stw	r17,4(sp)
   2bd40:	dc000015 	stw	r16,0(sp)
   2bd44:	dfc00315 	stw	ra,12(sp)
   2bd48:	dc800215 	stw	r18,8(sp)
   2bd4c:	2023883a 	mov	r17,r4
   2bd50:	2821883a 	mov	r16,r5
   2bd54:	20000226 	beq	r4,zero,2bd60 <_fclose_r+0x2c>
   2bd58:	20800e17 	ldw	r2,56(r4)
   2bd5c:	10002726 	beq	r2,zero,2bdfc <_fclose_r+0xc8>
   2bd60:	8080030f 	ldh	r2,12(r16)
   2bd64:	1000071e 	bne	r2,zero,2bd84 <_fclose_r+0x50>
   2bd68:	0005883a 	mov	r2,zero
   2bd6c:	dfc00317 	ldw	ra,12(sp)
   2bd70:	dc800217 	ldw	r18,8(sp)
   2bd74:	dc400117 	ldw	r17,4(sp)
   2bd78:	dc000017 	ldw	r16,0(sp)
   2bd7c:	dec00404 	addi	sp,sp,16
   2bd80:	f800283a 	ret
   2bd84:	800b883a 	mov	r5,r16
   2bd88:	8809883a 	mov	r4,r17
   2bd8c:	00277840 	call	27784 <__sflush_r>
   2bd90:	1025883a 	mov	r18,r2
   2bd94:	80800b17 	ldw	r2,44(r16)
   2bd98:	10000426 	beq	r2,zero,2bdac <_fclose_r+0x78>
   2bd9c:	81400717 	ldw	r5,28(r16)
   2bda0:	8809883a 	mov	r4,r17
   2bda4:	103ee83a 	callr	r2
   2bda8:	10001616 	blt	r2,zero,2be04 <_fclose_r+0xd0>
   2bdac:	8080030b 	ldhu	r2,12(r16)
   2bdb0:	1080200c 	andi	r2,r2,128
   2bdb4:	1000151e 	bne	r2,zero,2be0c <_fclose_r+0xd8>
   2bdb8:	81400c17 	ldw	r5,48(r16)
   2bdbc:	28000526 	beq	r5,zero,2bdd4 <_fclose_r+0xa0>
   2bdc0:	80801004 	addi	r2,r16,64
   2bdc4:	28800226 	beq	r5,r2,2bdd0 <_fclose_r+0x9c>
   2bdc8:	8809883a 	mov	r4,r17
   2bdcc:	0027ef00 	call	27ef0 <_free_r>
   2bdd0:	80000c15 	stw	zero,48(r16)
   2bdd4:	81401117 	ldw	r5,68(r16)
   2bdd8:	28000326 	beq	r5,zero,2bde8 <_fclose_r+0xb4>
   2bddc:	8809883a 	mov	r4,r17
   2bde0:	0027ef00 	call	27ef0 <_free_r>
   2bde4:	80001115 	stw	zero,68(r16)
   2bde8:	0027d8c0 	call	27d8c <__sfp_lock_acquire>
   2bdec:	8000030d 	sth	zero,12(r16)
   2bdf0:	0027d900 	call	27d90 <__sfp_lock_release>
   2bdf4:	9005883a 	mov	r2,r18
   2bdf8:	003fdc06 	br	2bd6c <_gp+0xfffeef4c>
   2bdfc:	0027d7c0 	call	27d7c <__sinit>
   2be00:	003fd706 	br	2bd60 <_gp+0xfffeef40>
   2be04:	04bfffc4 	movi	r18,-1
   2be08:	003fe806 	br	2bdac <_gp+0xfffeef8c>
   2be0c:	81400417 	ldw	r5,16(r16)
   2be10:	8809883a 	mov	r4,r17
   2be14:	0027ef00 	call	27ef0 <_free_r>
   2be18:	003fe706 	br	2bdb8 <_gp+0xfffeef98>
   2be1c:	0005883a 	mov	r2,zero
   2be20:	f800283a 	ret

0002be24 <fclose>:
   2be24:	008000f4 	movhi	r2,3
   2be28:	10939904 	addi	r2,r2,20068
   2be2c:	200b883a 	mov	r5,r4
   2be30:	11000017 	ldw	r4,0(r2)
   2be34:	002bd341 	jmpi	2bd34 <_fclose_r>

0002be38 <__fputwc>:
   2be38:	defff804 	addi	sp,sp,-32
   2be3c:	dcc00415 	stw	r19,16(sp)
   2be40:	dc800315 	stw	r18,12(sp)
   2be44:	dc000115 	stw	r16,4(sp)
   2be48:	dfc00715 	stw	ra,28(sp)
   2be4c:	dd400615 	stw	r21,24(sp)
   2be50:	dd000515 	stw	r20,20(sp)
   2be54:	dc400215 	stw	r17,8(sp)
   2be58:	2027883a 	mov	r19,r4
   2be5c:	2825883a 	mov	r18,r5
   2be60:	3021883a 	mov	r16,r6
   2be64:	00288cc0 	call	288cc <__locale_mb_cur_max>
   2be68:	00c00044 	movi	r3,1
   2be6c:	10c03e26 	beq	r2,r3,2bf68 <__fputwc+0x130>
   2be70:	81c01704 	addi	r7,r16,92
   2be74:	900d883a 	mov	r6,r18
   2be78:	d80b883a 	mov	r5,sp
   2be7c:	9809883a 	mov	r4,r19
   2be80:	002c3080 	call	2c308 <_wcrtomb_r>
   2be84:	1029883a 	mov	r20,r2
   2be88:	00bfffc4 	movi	r2,-1
   2be8c:	a0802026 	beq	r20,r2,2bf10 <__fputwc+0xd8>
   2be90:	d9400003 	ldbu	r5,0(sp)
   2be94:	a0001c26 	beq	r20,zero,2bf08 <__fputwc+0xd0>
   2be98:	0023883a 	mov	r17,zero
   2be9c:	05400284 	movi	r21,10
   2bea0:	00000906 	br	2bec8 <__fputwc+0x90>
   2bea4:	80800017 	ldw	r2,0(r16)
   2bea8:	11400005 	stb	r5,0(r2)
   2beac:	80c00017 	ldw	r3,0(r16)
   2beb0:	18c00044 	addi	r3,r3,1
   2beb4:	80c00015 	stw	r3,0(r16)
   2beb8:	8c400044 	addi	r17,r17,1
   2bebc:	dc45883a 	add	r2,sp,r17
   2bec0:	8d00112e 	bgeu	r17,r20,2bf08 <__fputwc+0xd0>
   2bec4:	11400003 	ldbu	r5,0(r2)
   2bec8:	80c00217 	ldw	r3,8(r16)
   2becc:	18ffffc4 	addi	r3,r3,-1
   2bed0:	80c00215 	stw	r3,8(r16)
   2bed4:	183ff30e 	bge	r3,zero,2bea4 <_gp+0xfffef084>
   2bed8:	80800617 	ldw	r2,24(r16)
   2bedc:	18801916 	blt	r3,r2,2bf44 <__fputwc+0x10c>
   2bee0:	80800017 	ldw	r2,0(r16)
   2bee4:	11400005 	stb	r5,0(r2)
   2bee8:	80800017 	ldw	r2,0(r16)
   2beec:	10c00003 	ldbu	r3,0(r2)
   2bef0:	10800044 	addi	r2,r2,1
   2bef4:	1d402326 	beq	r3,r21,2bf84 <__fputwc+0x14c>
   2bef8:	80800015 	stw	r2,0(r16)
   2befc:	8c400044 	addi	r17,r17,1
   2bf00:	dc45883a 	add	r2,sp,r17
   2bf04:	8d3fef36 	bltu	r17,r20,2bec4 <_gp+0xfffef0a4>
   2bf08:	9005883a 	mov	r2,r18
   2bf0c:	00000406 	br	2bf20 <__fputwc+0xe8>
   2bf10:	80c0030b 	ldhu	r3,12(r16)
   2bf14:	a005883a 	mov	r2,r20
   2bf18:	18c01014 	ori	r3,r3,64
   2bf1c:	80c0030d 	sth	r3,12(r16)
   2bf20:	dfc00717 	ldw	ra,28(sp)
   2bf24:	dd400617 	ldw	r21,24(sp)
   2bf28:	dd000517 	ldw	r20,20(sp)
   2bf2c:	dcc00417 	ldw	r19,16(sp)
   2bf30:	dc800317 	ldw	r18,12(sp)
   2bf34:	dc400217 	ldw	r17,8(sp)
   2bf38:	dc000117 	ldw	r16,4(sp)
   2bf3c:	dec00804 	addi	sp,sp,32
   2bf40:	f800283a 	ret
   2bf44:	800d883a 	mov	r6,r16
   2bf48:	29403fcc 	andi	r5,r5,255
   2bf4c:	9809883a 	mov	r4,r19
   2bf50:	002c1b00 	call	2c1b0 <__swbuf_r>
   2bf54:	10bfffe0 	cmpeqi	r2,r2,-1
   2bf58:	10803fcc 	andi	r2,r2,255
   2bf5c:	103fd626 	beq	r2,zero,2beb8 <_gp+0xfffef098>
   2bf60:	00bfffc4 	movi	r2,-1
   2bf64:	003fee06 	br	2bf20 <_gp+0xfffef100>
   2bf68:	90ffffc4 	addi	r3,r18,-1
   2bf6c:	01003f84 	movi	r4,254
   2bf70:	20ffbf36 	bltu	r4,r3,2be70 <_gp+0xfffef050>
   2bf74:	900b883a 	mov	r5,r18
   2bf78:	dc800005 	stb	r18,0(sp)
   2bf7c:	1029883a 	mov	r20,r2
   2bf80:	003fc506 	br	2be98 <_gp+0xfffef078>
   2bf84:	800d883a 	mov	r6,r16
   2bf88:	a80b883a 	mov	r5,r21
   2bf8c:	9809883a 	mov	r4,r19
   2bf90:	002c1b00 	call	2c1b0 <__swbuf_r>
   2bf94:	10bfffe0 	cmpeqi	r2,r2,-1
   2bf98:	003fef06 	br	2bf58 <_gp+0xfffef138>

0002bf9c <_fputwc_r>:
   2bf9c:	3080030b 	ldhu	r2,12(r6)
   2bfa0:	10c8000c 	andi	r3,r2,8192
   2bfa4:	1800051e 	bne	r3,zero,2bfbc <_fputwc_r+0x20>
   2bfa8:	30c01917 	ldw	r3,100(r6)
   2bfac:	10880014 	ori	r2,r2,8192
   2bfb0:	3080030d 	sth	r2,12(r6)
   2bfb4:	18880014 	ori	r2,r3,8192
   2bfb8:	30801915 	stw	r2,100(r6)
   2bfbc:	002be381 	jmpi	2be38 <__fputwc>

0002bfc0 <fputwc>:
   2bfc0:	008000f4 	movhi	r2,3
   2bfc4:	defffc04 	addi	sp,sp,-16
   2bfc8:	10939904 	addi	r2,r2,20068
   2bfcc:	dc000115 	stw	r16,4(sp)
   2bfd0:	14000017 	ldw	r16,0(r2)
   2bfd4:	dc400215 	stw	r17,8(sp)
   2bfd8:	dfc00315 	stw	ra,12(sp)
   2bfdc:	2023883a 	mov	r17,r4
   2bfe0:	80000226 	beq	r16,zero,2bfec <fputwc+0x2c>
   2bfe4:	80800e17 	ldw	r2,56(r16)
   2bfe8:	10001026 	beq	r2,zero,2c02c <fputwc+0x6c>
   2bfec:	2880030b 	ldhu	r2,12(r5)
   2bff0:	10c8000c 	andi	r3,r2,8192
   2bff4:	1800051e 	bne	r3,zero,2c00c <fputwc+0x4c>
   2bff8:	28c01917 	ldw	r3,100(r5)
   2bffc:	10880014 	ori	r2,r2,8192
   2c000:	2880030d 	sth	r2,12(r5)
   2c004:	18880014 	ori	r2,r3,8192
   2c008:	28801915 	stw	r2,100(r5)
   2c00c:	280d883a 	mov	r6,r5
   2c010:	8009883a 	mov	r4,r16
   2c014:	880b883a 	mov	r5,r17
   2c018:	dfc00317 	ldw	ra,12(sp)
   2c01c:	dc400217 	ldw	r17,8(sp)
   2c020:	dc000117 	ldw	r16,4(sp)
   2c024:	dec00404 	addi	sp,sp,16
   2c028:	002be381 	jmpi	2be38 <__fputwc>
   2c02c:	8009883a 	mov	r4,r16
   2c030:	d9400015 	stw	r5,0(sp)
   2c034:	0027d7c0 	call	27d7c <__sinit>
   2c038:	d9400017 	ldw	r5,0(sp)
   2c03c:	003feb06 	br	2bfec <_gp+0xfffef1cc>

0002c040 <_fstat_r>:
   2c040:	defffd04 	addi	sp,sp,-12
   2c044:	2805883a 	mov	r2,r5
   2c048:	dc000015 	stw	r16,0(sp)
   2c04c:	040000f4 	movhi	r16,3
   2c050:	dc400115 	stw	r17,4(sp)
   2c054:	841aa604 	addi	r16,r16,27288
   2c058:	2023883a 	mov	r17,r4
   2c05c:	300b883a 	mov	r5,r6
   2c060:	1009883a 	mov	r4,r2
   2c064:	dfc00215 	stw	ra,8(sp)
   2c068:	80000015 	stw	zero,0(r16)
   2c06c:	002fac00 	call	2fac0 <fstat>
   2c070:	00ffffc4 	movi	r3,-1
   2c074:	10c00526 	beq	r2,r3,2c08c <_fstat_r+0x4c>
   2c078:	dfc00217 	ldw	ra,8(sp)
   2c07c:	dc400117 	ldw	r17,4(sp)
   2c080:	dc000017 	ldw	r16,0(sp)
   2c084:	dec00304 	addi	sp,sp,12
   2c088:	f800283a 	ret
   2c08c:	80c00017 	ldw	r3,0(r16)
   2c090:	183ff926 	beq	r3,zero,2c078 <_gp+0xfffef258>
   2c094:	88c00015 	stw	r3,0(r17)
   2c098:	003ff706 	br	2c078 <_gp+0xfffef258>

0002c09c <_isatty_r>:
   2c09c:	defffd04 	addi	sp,sp,-12
   2c0a0:	dc000015 	stw	r16,0(sp)
   2c0a4:	040000f4 	movhi	r16,3
   2c0a8:	dc400115 	stw	r17,4(sp)
   2c0ac:	841aa604 	addi	r16,r16,27288
   2c0b0:	2023883a 	mov	r17,r4
   2c0b4:	2809883a 	mov	r4,r5
   2c0b8:	dfc00215 	stw	ra,8(sp)
   2c0bc:	80000015 	stw	zero,0(r16)
   2c0c0:	002fbcc0 	call	2fbcc <isatty>
   2c0c4:	00ffffc4 	movi	r3,-1
   2c0c8:	10c00526 	beq	r2,r3,2c0e0 <_isatty_r+0x44>
   2c0cc:	dfc00217 	ldw	ra,8(sp)
   2c0d0:	dc400117 	ldw	r17,4(sp)
   2c0d4:	dc000017 	ldw	r16,0(sp)
   2c0d8:	dec00304 	addi	sp,sp,12
   2c0dc:	f800283a 	ret
   2c0e0:	80c00017 	ldw	r3,0(r16)
   2c0e4:	183ff926 	beq	r3,zero,2c0cc <_gp+0xfffef2ac>
   2c0e8:	88c00015 	stw	r3,0(r17)
   2c0ec:	003ff706 	br	2c0cc <_gp+0xfffef2ac>

0002c0f0 <_lseek_r>:
   2c0f0:	defffd04 	addi	sp,sp,-12
   2c0f4:	2805883a 	mov	r2,r5
   2c0f8:	dc000015 	stw	r16,0(sp)
   2c0fc:	040000f4 	movhi	r16,3
   2c100:	dc400115 	stw	r17,4(sp)
   2c104:	300b883a 	mov	r5,r6
   2c108:	841aa604 	addi	r16,r16,27288
   2c10c:	2023883a 	mov	r17,r4
   2c110:	380d883a 	mov	r6,r7
   2c114:	1009883a 	mov	r4,r2
   2c118:	dfc00215 	stw	ra,8(sp)
   2c11c:	80000015 	stw	zero,0(r16)
   2c120:	002ff040 	call	2ff04 <lseek>
   2c124:	00ffffc4 	movi	r3,-1
   2c128:	10c00526 	beq	r2,r3,2c140 <_lseek_r+0x50>
   2c12c:	dfc00217 	ldw	ra,8(sp)
   2c130:	dc400117 	ldw	r17,4(sp)
   2c134:	dc000017 	ldw	r16,0(sp)
   2c138:	dec00304 	addi	sp,sp,12
   2c13c:	f800283a 	ret
   2c140:	80c00017 	ldw	r3,0(r16)
   2c144:	183ff926 	beq	r3,zero,2c12c <_gp+0xfffef30c>
   2c148:	88c00015 	stw	r3,0(r17)
   2c14c:	003ff706 	br	2c12c <_gp+0xfffef30c>

0002c150 <_read_r>:
   2c150:	defffd04 	addi	sp,sp,-12
   2c154:	2805883a 	mov	r2,r5
   2c158:	dc000015 	stw	r16,0(sp)
   2c15c:	040000f4 	movhi	r16,3
   2c160:	dc400115 	stw	r17,4(sp)
   2c164:	300b883a 	mov	r5,r6
   2c168:	841aa604 	addi	r16,r16,27288
   2c16c:	2023883a 	mov	r17,r4
   2c170:	380d883a 	mov	r6,r7
   2c174:	1009883a 	mov	r4,r2
   2c178:	dfc00215 	stw	ra,8(sp)
   2c17c:	80000015 	stw	zero,0(r16)
   2c180:	003032c0 	call	3032c <read>
   2c184:	00ffffc4 	movi	r3,-1
   2c188:	10c00526 	beq	r2,r3,2c1a0 <_read_r+0x50>
   2c18c:	dfc00217 	ldw	ra,8(sp)
   2c190:	dc400117 	ldw	r17,4(sp)
   2c194:	dc000017 	ldw	r16,0(sp)
   2c198:	dec00304 	addi	sp,sp,12
   2c19c:	f800283a 	ret
   2c1a0:	80c00017 	ldw	r3,0(r16)
   2c1a4:	183ff926 	beq	r3,zero,2c18c <_gp+0xfffef36c>
   2c1a8:	88c00015 	stw	r3,0(r17)
   2c1ac:	003ff706 	br	2c18c <_gp+0xfffef36c>

0002c1b0 <__swbuf_r>:
   2c1b0:	defffb04 	addi	sp,sp,-20
   2c1b4:	dcc00315 	stw	r19,12(sp)
   2c1b8:	dc800215 	stw	r18,8(sp)
   2c1bc:	dc000015 	stw	r16,0(sp)
   2c1c0:	dfc00415 	stw	ra,16(sp)
   2c1c4:	dc400115 	stw	r17,4(sp)
   2c1c8:	2025883a 	mov	r18,r4
   2c1cc:	2827883a 	mov	r19,r5
   2c1d0:	3021883a 	mov	r16,r6
   2c1d4:	20000226 	beq	r4,zero,2c1e0 <__swbuf_r+0x30>
   2c1d8:	20800e17 	ldw	r2,56(r4)
   2c1dc:	10004226 	beq	r2,zero,2c2e8 <__swbuf_r+0x138>
   2c1e0:	80800617 	ldw	r2,24(r16)
   2c1e4:	8100030b 	ldhu	r4,12(r16)
   2c1e8:	80800215 	stw	r2,8(r16)
   2c1ec:	2080020c 	andi	r2,r4,8
   2c1f0:	10003626 	beq	r2,zero,2c2cc <__swbuf_r+0x11c>
   2c1f4:	80c00417 	ldw	r3,16(r16)
   2c1f8:	18003426 	beq	r3,zero,2c2cc <__swbuf_r+0x11c>
   2c1fc:	2088000c 	andi	r2,r4,8192
   2c200:	9c403fcc 	andi	r17,r19,255
   2c204:	10001a26 	beq	r2,zero,2c270 <__swbuf_r+0xc0>
   2c208:	80800017 	ldw	r2,0(r16)
   2c20c:	81000517 	ldw	r4,20(r16)
   2c210:	10c7c83a 	sub	r3,r2,r3
   2c214:	1900200e 	bge	r3,r4,2c298 <__swbuf_r+0xe8>
   2c218:	18c00044 	addi	r3,r3,1
   2c21c:	81000217 	ldw	r4,8(r16)
   2c220:	11400044 	addi	r5,r2,1
   2c224:	81400015 	stw	r5,0(r16)
   2c228:	213fffc4 	addi	r4,r4,-1
   2c22c:	81000215 	stw	r4,8(r16)
   2c230:	14c00005 	stb	r19,0(r2)
   2c234:	80800517 	ldw	r2,20(r16)
   2c238:	10c01e26 	beq	r2,r3,2c2b4 <__swbuf_r+0x104>
   2c23c:	8080030b 	ldhu	r2,12(r16)
   2c240:	1080004c 	andi	r2,r2,1
   2c244:	10000226 	beq	r2,zero,2c250 <__swbuf_r+0xa0>
   2c248:	00800284 	movi	r2,10
   2c24c:	88801926 	beq	r17,r2,2c2b4 <__swbuf_r+0x104>
   2c250:	8805883a 	mov	r2,r17
   2c254:	dfc00417 	ldw	ra,16(sp)
   2c258:	dcc00317 	ldw	r19,12(sp)
   2c25c:	dc800217 	ldw	r18,8(sp)
   2c260:	dc400117 	ldw	r17,4(sp)
   2c264:	dc000017 	ldw	r16,0(sp)
   2c268:	dec00504 	addi	sp,sp,20
   2c26c:	f800283a 	ret
   2c270:	81401917 	ldw	r5,100(r16)
   2c274:	00b7ffc4 	movi	r2,-8193
   2c278:	21080014 	ori	r4,r4,8192
   2c27c:	2884703a 	and	r2,r5,r2
   2c280:	80801915 	stw	r2,100(r16)
   2c284:	80800017 	ldw	r2,0(r16)
   2c288:	8100030d 	sth	r4,12(r16)
   2c28c:	81000517 	ldw	r4,20(r16)
   2c290:	10c7c83a 	sub	r3,r2,r3
   2c294:	193fe016 	blt	r3,r4,2c218 <_gp+0xfffef3f8>
   2c298:	800b883a 	mov	r5,r16
   2c29c:	9009883a 	mov	r4,r18
   2c2a0:	00279a00 	call	279a0 <_fflush_r>
   2c2a4:	1000071e 	bne	r2,zero,2c2c4 <__swbuf_r+0x114>
   2c2a8:	80800017 	ldw	r2,0(r16)
   2c2ac:	00c00044 	movi	r3,1
   2c2b0:	003fda06 	br	2c21c <_gp+0xfffef3fc>
   2c2b4:	800b883a 	mov	r5,r16
   2c2b8:	9009883a 	mov	r4,r18
   2c2bc:	00279a00 	call	279a0 <_fflush_r>
   2c2c0:	103fe326 	beq	r2,zero,2c250 <_gp+0xfffef430>
   2c2c4:	00bfffc4 	movi	r2,-1
   2c2c8:	003fe206 	br	2c254 <_gp+0xfffef434>
   2c2cc:	800b883a 	mov	r5,r16
   2c2d0:	9009883a 	mov	r4,r18
   2c2d4:	0025da80 	call	25da8 <__swsetup_r>
   2c2d8:	103ffa1e 	bne	r2,zero,2c2c4 <_gp+0xfffef4a4>
   2c2dc:	8100030b 	ldhu	r4,12(r16)
   2c2e0:	80c00417 	ldw	r3,16(r16)
   2c2e4:	003fc506 	br	2c1fc <_gp+0xfffef3dc>
   2c2e8:	0027d7c0 	call	27d7c <__sinit>
   2c2ec:	003fbc06 	br	2c1e0 <_gp+0xfffef3c0>

0002c2f0 <__swbuf>:
   2c2f0:	008000f4 	movhi	r2,3
   2c2f4:	10939904 	addi	r2,r2,20068
   2c2f8:	280d883a 	mov	r6,r5
   2c2fc:	200b883a 	mov	r5,r4
   2c300:	11000017 	ldw	r4,0(r2)
   2c304:	002c1b01 	jmpi	2c1b0 <__swbuf_r>

0002c308 <_wcrtomb_r>:
   2c308:	defff604 	addi	sp,sp,-40
   2c30c:	008000f4 	movhi	r2,3
   2c310:	dc800815 	stw	r18,32(sp)
   2c314:	dc400715 	stw	r17,28(sp)
   2c318:	dc000615 	stw	r16,24(sp)
   2c31c:	10939b04 	addi	r2,r2,20076
   2c320:	dfc00915 	stw	ra,36(sp)
   2c324:	2021883a 	mov	r16,r4
   2c328:	3823883a 	mov	r17,r7
   2c32c:	14800017 	ldw	r18,0(r2)
   2c330:	28001426 	beq	r5,zero,2c384 <_wcrtomb_r+0x7c>
   2c334:	d9400415 	stw	r5,16(sp)
   2c338:	d9800515 	stw	r6,20(sp)
   2c33c:	00288c00 	call	288c0 <__locale_charset>
   2c340:	d9800517 	ldw	r6,20(sp)
   2c344:	d9400417 	ldw	r5,16(sp)
   2c348:	100f883a 	mov	r7,r2
   2c34c:	dc400015 	stw	r17,0(sp)
   2c350:	8009883a 	mov	r4,r16
   2c354:	903ee83a 	callr	r18
   2c358:	00ffffc4 	movi	r3,-1
   2c35c:	10c0031e 	bne	r2,r3,2c36c <_wcrtomb_r+0x64>
   2c360:	88000015 	stw	zero,0(r17)
   2c364:	00c02284 	movi	r3,138
   2c368:	80c00015 	stw	r3,0(r16)
   2c36c:	dfc00917 	ldw	ra,36(sp)
   2c370:	dc800817 	ldw	r18,32(sp)
   2c374:	dc400717 	ldw	r17,28(sp)
   2c378:	dc000617 	ldw	r16,24(sp)
   2c37c:	dec00a04 	addi	sp,sp,40
   2c380:	f800283a 	ret
   2c384:	00288c00 	call	288c0 <__locale_charset>
   2c388:	100f883a 	mov	r7,r2
   2c38c:	dc400015 	stw	r17,0(sp)
   2c390:	000d883a 	mov	r6,zero
   2c394:	d9400104 	addi	r5,sp,4
   2c398:	8009883a 	mov	r4,r16
   2c39c:	903ee83a 	callr	r18
   2c3a0:	003fed06 	br	2c358 <_gp+0xfffef538>

0002c3a4 <wcrtomb>:
   2c3a4:	defff604 	addi	sp,sp,-40
   2c3a8:	008000f4 	movhi	r2,3
   2c3ac:	dc800615 	stw	r18,24(sp)
   2c3b0:	dc400515 	stw	r17,20(sp)
   2c3b4:	10939904 	addi	r2,r2,20068
   2c3b8:	dfc00915 	stw	ra,36(sp)
   2c3bc:	dd000815 	stw	r20,32(sp)
   2c3c0:	dcc00715 	stw	r19,28(sp)
   2c3c4:	dc000415 	stw	r16,16(sp)
   2c3c8:	3025883a 	mov	r18,r6
   2c3cc:	14400017 	ldw	r17,0(r2)
   2c3d0:	20001926 	beq	r4,zero,2c438 <wcrtomb+0x94>
   2c3d4:	008000f4 	movhi	r2,3
   2c3d8:	10939b04 	addi	r2,r2,20076
   2c3dc:	15000017 	ldw	r20,0(r2)
   2c3e0:	2021883a 	mov	r16,r4
   2c3e4:	2827883a 	mov	r19,r5
   2c3e8:	00288c00 	call	288c0 <__locale_charset>
   2c3ec:	100f883a 	mov	r7,r2
   2c3f0:	dc800015 	stw	r18,0(sp)
   2c3f4:	980d883a 	mov	r6,r19
   2c3f8:	800b883a 	mov	r5,r16
   2c3fc:	8809883a 	mov	r4,r17
   2c400:	a03ee83a 	callr	r20
   2c404:	00ffffc4 	movi	r3,-1
   2c408:	10c0031e 	bne	r2,r3,2c418 <wcrtomb+0x74>
   2c40c:	90000015 	stw	zero,0(r18)
   2c410:	00c02284 	movi	r3,138
   2c414:	88c00015 	stw	r3,0(r17)
   2c418:	dfc00917 	ldw	ra,36(sp)
   2c41c:	dd000817 	ldw	r20,32(sp)
   2c420:	dcc00717 	ldw	r19,28(sp)
   2c424:	dc800617 	ldw	r18,24(sp)
   2c428:	dc400517 	ldw	r17,20(sp)
   2c42c:	dc000417 	ldw	r16,16(sp)
   2c430:	dec00a04 	addi	sp,sp,40
   2c434:	f800283a 	ret
   2c438:	008000f4 	movhi	r2,3
   2c43c:	10939b04 	addi	r2,r2,20076
   2c440:	14000017 	ldw	r16,0(r2)
   2c444:	00288c00 	call	288c0 <__locale_charset>
   2c448:	100f883a 	mov	r7,r2
   2c44c:	dc800015 	stw	r18,0(sp)
   2c450:	000d883a 	mov	r6,zero
   2c454:	d9400104 	addi	r5,sp,4
   2c458:	8809883a 	mov	r4,r17
   2c45c:	803ee83a 	callr	r16
   2c460:	003fe806 	br	2c404 <_gp+0xfffef5e4>

0002c464 <__ascii_wctomb>:
   2c464:	28000526 	beq	r5,zero,2c47c <__ascii_wctomb+0x18>
   2c468:	00803fc4 	movi	r2,255
   2c46c:	11800536 	bltu	r2,r6,2c484 <__ascii_wctomb+0x20>
   2c470:	29800005 	stb	r6,0(r5)
   2c474:	00800044 	movi	r2,1
   2c478:	f800283a 	ret
   2c47c:	0005883a 	mov	r2,zero
   2c480:	f800283a 	ret
   2c484:	00802284 	movi	r2,138
   2c488:	20800015 	stw	r2,0(r4)
   2c48c:	00bfffc4 	movi	r2,-1
   2c490:	f800283a 	ret

0002c494 <_wctomb_r>:
   2c494:	008000f4 	movhi	r2,3
   2c498:	defff904 	addi	sp,sp,-28
   2c49c:	10939b04 	addi	r2,r2,20076
   2c4a0:	dfc00615 	stw	ra,24(sp)
   2c4a4:	dc400515 	stw	r17,20(sp)
   2c4a8:	dc000415 	stw	r16,16(sp)
   2c4ac:	3823883a 	mov	r17,r7
   2c4b0:	14000017 	ldw	r16,0(r2)
   2c4b4:	d9000115 	stw	r4,4(sp)
   2c4b8:	d9400215 	stw	r5,8(sp)
   2c4bc:	d9800315 	stw	r6,12(sp)
   2c4c0:	00288c00 	call	288c0 <__locale_charset>
   2c4c4:	d9800317 	ldw	r6,12(sp)
   2c4c8:	d9400217 	ldw	r5,8(sp)
   2c4cc:	d9000117 	ldw	r4,4(sp)
   2c4d0:	100f883a 	mov	r7,r2
   2c4d4:	dc400015 	stw	r17,0(sp)
   2c4d8:	803ee83a 	callr	r16
   2c4dc:	dfc00617 	ldw	ra,24(sp)
   2c4e0:	dc400517 	ldw	r17,20(sp)
   2c4e4:	dc000417 	ldw	r16,16(sp)
   2c4e8:	dec00704 	addi	sp,sp,28
   2c4ec:	f800283a 	ret

0002c4f0 <__udivdi3>:
   2c4f0:	defff504 	addi	sp,sp,-44
   2c4f4:	dcc00415 	stw	r19,16(sp)
   2c4f8:	dc000115 	stw	r16,4(sp)
   2c4fc:	dfc00a15 	stw	ra,40(sp)
   2c500:	df000915 	stw	fp,36(sp)
   2c504:	ddc00815 	stw	r23,32(sp)
   2c508:	dd800715 	stw	r22,28(sp)
   2c50c:	dd400615 	stw	r21,24(sp)
   2c510:	dd000515 	stw	r20,20(sp)
   2c514:	dc800315 	stw	r18,12(sp)
   2c518:	dc400215 	stw	r17,8(sp)
   2c51c:	2027883a 	mov	r19,r4
   2c520:	2821883a 	mov	r16,r5
   2c524:	3800411e 	bne	r7,zero,2c62c <__udivdi3+0x13c>
   2c528:	3023883a 	mov	r17,r6
   2c52c:	2025883a 	mov	r18,r4
   2c530:	2980522e 	bgeu	r5,r6,2c67c <__udivdi3+0x18c>
   2c534:	00bfffd4 	movui	r2,65535
   2c538:	282d883a 	mov	r22,r5
   2c53c:	1180a836 	bltu	r2,r6,2c7e0 <__udivdi3+0x2f0>
   2c540:	00803fc4 	movi	r2,255
   2c544:	1185803a 	cmpltu	r2,r2,r6
   2c548:	100490fa 	slli	r2,r2,3
   2c54c:	3086d83a 	srl	r3,r6,r2
   2c550:	010000f4 	movhi	r4,3
   2c554:	210c5b04 	addi	r4,r4,12652
   2c558:	20c7883a 	add	r3,r4,r3
   2c55c:	18c00003 	ldbu	r3,0(r3)
   2c560:	1885883a 	add	r2,r3,r2
   2c564:	00c00804 	movi	r3,32
   2c568:	1887c83a 	sub	r3,r3,r2
   2c56c:	18000526 	beq	r3,zero,2c584 <__udivdi3+0x94>
   2c570:	80e0983a 	sll	r16,r16,r3
   2c574:	9884d83a 	srl	r2,r19,r2
   2c578:	30e2983a 	sll	r17,r6,r3
   2c57c:	98e4983a 	sll	r18,r19,r3
   2c580:	142cb03a 	or	r22,r2,r16
   2c584:	882ad43a 	srli	r21,r17,16
   2c588:	b009883a 	mov	r4,r22
   2c58c:	8d3fffcc 	andi	r20,r17,65535
   2c590:	a80b883a 	mov	r5,r21
   2c594:	002d0fc0 	call	2d0fc <__umodsi3>
   2c598:	b009883a 	mov	r4,r22
   2c59c:	a80b883a 	mov	r5,r21
   2c5a0:	1027883a 	mov	r19,r2
   2c5a4:	002d0980 	call	2d098 <__udivsi3>
   2c5a8:	102d883a 	mov	r22,r2
   2c5ac:	9826943a 	slli	r19,r19,16
   2c5b0:	9004d43a 	srli	r2,r18,16
   2c5b4:	a5a1383a 	mul	r16,r20,r22
   2c5b8:	14c4b03a 	or	r2,r2,r19
   2c5bc:	1400052e 	bgeu	r2,r16,2c5d4 <__udivdi3+0xe4>
   2c5c0:	1445883a 	add	r2,r2,r17
   2c5c4:	b0ffffc4 	addi	r3,r22,-1
   2c5c8:	14400136 	bltu	r2,r17,2c5d0 <__udivdi3+0xe0>
   2c5cc:	14012336 	bltu	r2,r16,2ca5c <__udivdi3+0x56c>
   2c5d0:	182d883a 	mov	r22,r3
   2c5d4:	1421c83a 	sub	r16,r2,r16
   2c5d8:	a80b883a 	mov	r5,r21
   2c5dc:	8009883a 	mov	r4,r16
   2c5e0:	002d0fc0 	call	2d0fc <__umodsi3>
   2c5e4:	1027883a 	mov	r19,r2
   2c5e8:	a80b883a 	mov	r5,r21
   2c5ec:	8009883a 	mov	r4,r16
   2c5f0:	002d0980 	call	2d098 <__udivsi3>
   2c5f4:	9826943a 	slli	r19,r19,16
   2c5f8:	a0a9383a 	mul	r20,r20,r2
   2c5fc:	94bfffcc 	andi	r18,r18,65535
   2c600:	94e4b03a 	or	r18,r18,r19
   2c604:	9500052e 	bgeu	r18,r20,2c61c <__udivdi3+0x12c>
   2c608:	8ca5883a 	add	r18,r17,r18
   2c60c:	10ffffc4 	addi	r3,r2,-1
   2c610:	9440f136 	bltu	r18,r17,2c9d8 <__udivdi3+0x4e8>
   2c614:	9500f02e 	bgeu	r18,r20,2c9d8 <__udivdi3+0x4e8>
   2c618:	10bfff84 	addi	r2,r2,-2
   2c61c:	b00c943a 	slli	r6,r22,16
   2c620:	0007883a 	mov	r3,zero
   2c624:	3084b03a 	or	r2,r6,r2
   2c628:	00005906 	br	2c790 <__udivdi3+0x2a0>
   2c62c:	29c05636 	bltu	r5,r7,2c788 <__udivdi3+0x298>
   2c630:	00bfffd4 	movui	r2,65535
   2c634:	11c0622e 	bgeu	r2,r7,2c7c0 <__udivdi3+0x2d0>
   2c638:	00804034 	movhi	r2,256
   2c63c:	10bfffc4 	addi	r2,r2,-1
   2c640:	11c0ee36 	bltu	r2,r7,2c9fc <__udivdi3+0x50c>
   2c644:	00800404 	movi	r2,16
   2c648:	3886d83a 	srl	r3,r7,r2
   2c64c:	010000f4 	movhi	r4,3
   2c650:	210c5b04 	addi	r4,r4,12652
   2c654:	20c7883a 	add	r3,r4,r3
   2c658:	18c00003 	ldbu	r3,0(r3)
   2c65c:	05400804 	movi	r21,32
   2c660:	1885883a 	add	r2,r3,r2
   2c664:	a8abc83a 	sub	r21,r21,r2
   2c668:	a800621e 	bne	r21,zero,2c7f4 <__udivdi3+0x304>
   2c66c:	3c00e936 	bltu	r7,r16,2ca14 <__udivdi3+0x524>
   2c670:	9985403a 	cmpgeu	r2,r19,r6
   2c674:	0007883a 	mov	r3,zero
   2c678:	00004506 	br	2c790 <__udivdi3+0x2a0>
   2c67c:	3000041e 	bne	r6,zero,2c690 <__udivdi3+0x1a0>
   2c680:	000b883a 	mov	r5,zero
   2c684:	01000044 	movi	r4,1
   2c688:	002d0980 	call	2d098 <__udivsi3>
   2c68c:	1023883a 	mov	r17,r2
   2c690:	00bfffd4 	movui	r2,65535
   2c694:	14404e2e 	bgeu	r2,r17,2c7d0 <__udivdi3+0x2e0>
   2c698:	00804034 	movhi	r2,256
   2c69c:	10bfffc4 	addi	r2,r2,-1
   2c6a0:	1440d836 	bltu	r2,r17,2ca04 <__udivdi3+0x514>
   2c6a4:	00800404 	movi	r2,16
   2c6a8:	8886d83a 	srl	r3,r17,r2
   2c6ac:	010000f4 	movhi	r4,3
   2c6b0:	210c5b04 	addi	r4,r4,12652
   2c6b4:	20c7883a 	add	r3,r4,r3
   2c6b8:	18c00003 	ldbu	r3,0(r3)
   2c6bc:	1885883a 	add	r2,r3,r2
   2c6c0:	00c00804 	movi	r3,32
   2c6c4:	1887c83a 	sub	r3,r3,r2
   2c6c8:	18008f1e 	bne	r3,zero,2c908 <__udivdi3+0x418>
   2c6cc:	882ad43a 	srli	r21,r17,16
   2c6d0:	8461c83a 	sub	r16,r16,r17
   2c6d4:	8d3fffcc 	andi	r20,r17,65535
   2c6d8:	00c00044 	movi	r3,1
   2c6dc:	8009883a 	mov	r4,r16
   2c6e0:	a80b883a 	mov	r5,r21
   2c6e4:	d8c00015 	stw	r3,0(sp)
   2c6e8:	002d0fc0 	call	2d0fc <__umodsi3>
   2c6ec:	8009883a 	mov	r4,r16
   2c6f0:	a80b883a 	mov	r5,r21
   2c6f4:	1027883a 	mov	r19,r2
   2c6f8:	002d0980 	call	2d098 <__udivsi3>
   2c6fc:	9826943a 	slli	r19,r19,16
   2c700:	9008d43a 	srli	r4,r18,16
   2c704:	1521383a 	mul	r16,r2,r20
   2c708:	102d883a 	mov	r22,r2
   2c70c:	24c8b03a 	or	r4,r4,r19
   2c710:	d8c00017 	ldw	r3,0(sp)
   2c714:	2400052e 	bgeu	r4,r16,2c72c <__udivdi3+0x23c>
   2c718:	2449883a 	add	r4,r4,r17
   2c71c:	b0bfffc4 	addi	r2,r22,-1
   2c720:	24400136 	bltu	r4,r17,2c728 <__udivdi3+0x238>
   2c724:	2400ca36 	bltu	r4,r16,2ca50 <__udivdi3+0x560>
   2c728:	102d883a 	mov	r22,r2
   2c72c:	2421c83a 	sub	r16,r4,r16
   2c730:	a80b883a 	mov	r5,r21
   2c734:	8009883a 	mov	r4,r16
   2c738:	d8c00015 	stw	r3,0(sp)
   2c73c:	002d0fc0 	call	2d0fc <__umodsi3>
   2c740:	1027883a 	mov	r19,r2
   2c744:	a80b883a 	mov	r5,r21
   2c748:	8009883a 	mov	r4,r16
   2c74c:	002d0980 	call	2d098 <__udivsi3>
   2c750:	9826943a 	slli	r19,r19,16
   2c754:	1529383a 	mul	r20,r2,r20
   2c758:	94bfffcc 	andi	r18,r18,65535
   2c75c:	94e4b03a 	or	r18,r18,r19
   2c760:	d8c00017 	ldw	r3,0(sp)
   2c764:	9500052e 	bgeu	r18,r20,2c77c <__udivdi3+0x28c>
   2c768:	8ca5883a 	add	r18,r17,r18
   2c76c:	113fffc4 	addi	r4,r2,-1
   2c770:	94409736 	bltu	r18,r17,2c9d0 <__udivdi3+0x4e0>
   2c774:	9500962e 	bgeu	r18,r20,2c9d0 <__udivdi3+0x4e0>
   2c778:	10bfff84 	addi	r2,r2,-2
   2c77c:	b00c943a 	slli	r6,r22,16
   2c780:	3084b03a 	or	r2,r6,r2
   2c784:	00000206 	br	2c790 <__udivdi3+0x2a0>
   2c788:	0007883a 	mov	r3,zero
   2c78c:	0005883a 	mov	r2,zero
   2c790:	dfc00a17 	ldw	ra,40(sp)
   2c794:	df000917 	ldw	fp,36(sp)
   2c798:	ddc00817 	ldw	r23,32(sp)
   2c79c:	dd800717 	ldw	r22,28(sp)
   2c7a0:	dd400617 	ldw	r21,24(sp)
   2c7a4:	dd000517 	ldw	r20,20(sp)
   2c7a8:	dcc00417 	ldw	r19,16(sp)
   2c7ac:	dc800317 	ldw	r18,12(sp)
   2c7b0:	dc400217 	ldw	r17,8(sp)
   2c7b4:	dc000117 	ldw	r16,4(sp)
   2c7b8:	dec00b04 	addi	sp,sp,44
   2c7bc:	f800283a 	ret
   2c7c0:	00803fc4 	movi	r2,255
   2c7c4:	11c5803a 	cmpltu	r2,r2,r7
   2c7c8:	100490fa 	slli	r2,r2,3
   2c7cc:	003f9e06 	br	2c648 <_gp+0xfffef828>
   2c7d0:	00803fc4 	movi	r2,255
   2c7d4:	1445803a 	cmpltu	r2,r2,r17
   2c7d8:	100490fa 	slli	r2,r2,3
   2c7dc:	003fb206 	br	2c6a8 <_gp+0xfffef888>
   2c7e0:	00804034 	movhi	r2,256
   2c7e4:	10bfffc4 	addi	r2,r2,-1
   2c7e8:	11808836 	bltu	r2,r6,2ca0c <__udivdi3+0x51c>
   2c7ec:	00800404 	movi	r2,16
   2c7f0:	003f5606 	br	2c54c <_gp+0xfffef72c>
   2c7f4:	30aed83a 	srl	r23,r6,r2
   2c7f8:	3d4e983a 	sll	r7,r7,r21
   2c7fc:	80acd83a 	srl	r22,r16,r2
   2c800:	9884d83a 	srl	r2,r19,r2
   2c804:	3deeb03a 	or	r23,r7,r23
   2c808:	b824d43a 	srli	r18,r23,16
   2c80c:	8560983a 	sll	r16,r16,r21
   2c810:	b009883a 	mov	r4,r22
   2c814:	900b883a 	mov	r5,r18
   2c818:	3568983a 	sll	r20,r6,r21
   2c81c:	1420b03a 	or	r16,r2,r16
   2c820:	002d0fc0 	call	2d0fc <__umodsi3>
   2c824:	b009883a 	mov	r4,r22
   2c828:	900b883a 	mov	r5,r18
   2c82c:	1023883a 	mov	r17,r2
   2c830:	002d0980 	call	2d098 <__udivsi3>
   2c834:	8808943a 	slli	r4,r17,16
   2c838:	bf3fffcc 	andi	fp,r23,65535
   2c83c:	8006d43a 	srli	r3,r16,16
   2c840:	e0a3383a 	mul	r17,fp,r2
   2c844:	100d883a 	mov	r6,r2
   2c848:	1906b03a 	or	r3,r3,r4
   2c84c:	1c40042e 	bgeu	r3,r17,2c860 <__udivdi3+0x370>
   2c850:	1dc7883a 	add	r3,r3,r23
   2c854:	10bfffc4 	addi	r2,r2,-1
   2c858:	1dc0752e 	bgeu	r3,r23,2ca30 <__udivdi3+0x540>
   2c85c:	100d883a 	mov	r6,r2
   2c860:	1c63c83a 	sub	r17,r3,r17
   2c864:	900b883a 	mov	r5,r18
   2c868:	8809883a 	mov	r4,r17
   2c86c:	d9800015 	stw	r6,0(sp)
   2c870:	002d0fc0 	call	2d0fc <__umodsi3>
   2c874:	102d883a 	mov	r22,r2
   2c878:	8809883a 	mov	r4,r17
   2c87c:	900b883a 	mov	r5,r18
   2c880:	002d0980 	call	2d098 <__udivsi3>
   2c884:	b02c943a 	slli	r22,r22,16
   2c888:	e089383a 	mul	r4,fp,r2
   2c88c:	843fffcc 	andi	r16,r16,65535
   2c890:	85a0b03a 	or	r16,r16,r22
   2c894:	d9800017 	ldw	r6,0(sp)
   2c898:	8100042e 	bgeu	r16,r4,2c8ac <__udivdi3+0x3bc>
   2c89c:	85e1883a 	add	r16,r16,r23
   2c8a0:	10ffffc4 	addi	r3,r2,-1
   2c8a4:	85c05e2e 	bgeu	r16,r23,2ca20 <__udivdi3+0x530>
   2c8a8:	1805883a 	mov	r2,r3
   2c8ac:	300c943a 	slli	r6,r6,16
   2c8b0:	a17fffcc 	andi	r5,r20,65535
   2c8b4:	a028d43a 	srli	r20,r20,16
   2c8b8:	3084b03a 	or	r2,r6,r2
   2c8bc:	10ffffcc 	andi	r3,r2,65535
   2c8c0:	100cd43a 	srli	r6,r2,16
   2c8c4:	194f383a 	mul	r7,r3,r5
   2c8c8:	1d07383a 	mul	r3,r3,r20
   2c8cc:	314b383a 	mul	r5,r6,r5
   2c8d0:	3810d43a 	srli	r8,r7,16
   2c8d4:	8121c83a 	sub	r16,r16,r4
   2c8d8:	1947883a 	add	r3,r3,r5
   2c8dc:	40c7883a 	add	r3,r8,r3
   2c8e0:	350d383a 	mul	r6,r6,r20
   2c8e4:	1940022e 	bgeu	r3,r5,2c8f0 <__udivdi3+0x400>
   2c8e8:	01000074 	movhi	r4,1
   2c8ec:	310d883a 	add	r6,r6,r4
   2c8f0:	1828d43a 	srli	r20,r3,16
   2c8f4:	a18d883a 	add	r6,r20,r6
   2c8f8:	81803e36 	bltu	r16,r6,2c9f4 <__udivdi3+0x504>
   2c8fc:	81803826 	beq	r16,r6,2c9e0 <__udivdi3+0x4f0>
   2c900:	0007883a 	mov	r3,zero
   2c904:	003fa206 	br	2c790 <_gp+0xfffef970>
   2c908:	88e2983a 	sll	r17,r17,r3
   2c90c:	80a8d83a 	srl	r20,r16,r2
   2c910:	80e0983a 	sll	r16,r16,r3
   2c914:	882ad43a 	srli	r21,r17,16
   2c918:	9884d83a 	srl	r2,r19,r2
   2c91c:	a009883a 	mov	r4,r20
   2c920:	a80b883a 	mov	r5,r21
   2c924:	142eb03a 	or	r23,r2,r16
   2c928:	98e4983a 	sll	r18,r19,r3
   2c92c:	002d0fc0 	call	2d0fc <__umodsi3>
   2c930:	a009883a 	mov	r4,r20
   2c934:	a80b883a 	mov	r5,r21
   2c938:	1021883a 	mov	r16,r2
   2c93c:	002d0980 	call	2d098 <__udivsi3>
   2c940:	1039883a 	mov	fp,r2
   2c944:	8d3fffcc 	andi	r20,r17,65535
   2c948:	8020943a 	slli	r16,r16,16
   2c94c:	b804d43a 	srli	r2,r23,16
   2c950:	a72d383a 	mul	r22,r20,fp
   2c954:	1404b03a 	or	r2,r2,r16
   2c958:	1580062e 	bgeu	r2,r22,2c974 <__udivdi3+0x484>
   2c95c:	1445883a 	add	r2,r2,r17
   2c960:	e0ffffc4 	addi	r3,fp,-1
   2c964:	14403836 	bltu	r2,r17,2ca48 <__udivdi3+0x558>
   2c968:	1580372e 	bgeu	r2,r22,2ca48 <__udivdi3+0x558>
   2c96c:	e73fff84 	addi	fp,fp,-2
   2c970:	1445883a 	add	r2,r2,r17
   2c974:	15adc83a 	sub	r22,r2,r22
   2c978:	a80b883a 	mov	r5,r21
   2c97c:	b009883a 	mov	r4,r22
   2c980:	002d0fc0 	call	2d0fc <__umodsi3>
   2c984:	1027883a 	mov	r19,r2
   2c988:	b009883a 	mov	r4,r22
   2c98c:	a80b883a 	mov	r5,r21
   2c990:	002d0980 	call	2d098 <__udivsi3>
   2c994:	9826943a 	slli	r19,r19,16
   2c998:	a0a1383a 	mul	r16,r20,r2
   2c99c:	b93fffcc 	andi	r4,r23,65535
   2c9a0:	24c8b03a 	or	r4,r4,r19
   2c9a4:	2400062e 	bgeu	r4,r16,2c9c0 <__udivdi3+0x4d0>
   2c9a8:	2449883a 	add	r4,r4,r17
   2c9ac:	10ffffc4 	addi	r3,r2,-1
   2c9b0:	24402336 	bltu	r4,r17,2ca40 <__udivdi3+0x550>
   2c9b4:	2400222e 	bgeu	r4,r16,2ca40 <__udivdi3+0x550>
   2c9b8:	10bfff84 	addi	r2,r2,-2
   2c9bc:	2449883a 	add	r4,r4,r17
   2c9c0:	e038943a 	slli	fp,fp,16
   2c9c4:	2421c83a 	sub	r16,r4,r16
   2c9c8:	e086b03a 	or	r3,fp,r2
   2c9cc:	003f4306 	br	2c6dc <_gp+0xfffef8bc>
   2c9d0:	2005883a 	mov	r2,r4
   2c9d4:	003f6906 	br	2c77c <_gp+0xfffef95c>
   2c9d8:	1805883a 	mov	r2,r3
   2c9dc:	003f0f06 	br	2c61c <_gp+0xfffef7fc>
   2c9e0:	1806943a 	slli	r3,r3,16
   2c9e4:	9d66983a 	sll	r19,r19,r21
   2c9e8:	39ffffcc 	andi	r7,r7,65535
   2c9ec:	19c7883a 	add	r3,r3,r7
   2c9f0:	98ffc32e 	bgeu	r19,r3,2c900 <_gp+0xfffefae0>
   2c9f4:	10bfffc4 	addi	r2,r2,-1
   2c9f8:	003fc106 	br	2c900 <_gp+0xfffefae0>
   2c9fc:	00800604 	movi	r2,24
   2ca00:	003f1106 	br	2c648 <_gp+0xfffef828>
   2ca04:	00800604 	movi	r2,24
   2ca08:	003f2706 	br	2c6a8 <_gp+0xfffef888>
   2ca0c:	00800604 	movi	r2,24
   2ca10:	003ece06 	br	2c54c <_gp+0xfffef72c>
   2ca14:	0007883a 	mov	r3,zero
   2ca18:	00800044 	movi	r2,1
   2ca1c:	003f5c06 	br	2c790 <_gp+0xfffef970>
   2ca20:	813fa12e 	bgeu	r16,r4,2c8a8 <_gp+0xfffefa88>
   2ca24:	10bfff84 	addi	r2,r2,-2
   2ca28:	85e1883a 	add	r16,r16,r23
   2ca2c:	003f9f06 	br	2c8ac <_gp+0xfffefa8c>
   2ca30:	1c7f8a2e 	bgeu	r3,r17,2c85c <_gp+0xfffefa3c>
   2ca34:	31bfff84 	addi	r6,r6,-2
   2ca38:	1dc7883a 	add	r3,r3,r23
   2ca3c:	003f8806 	br	2c860 <_gp+0xfffefa40>
   2ca40:	1805883a 	mov	r2,r3
   2ca44:	003fde06 	br	2c9c0 <_gp+0xfffefba0>
   2ca48:	1839883a 	mov	fp,r3
   2ca4c:	003fc906 	br	2c974 <_gp+0xfffefb54>
   2ca50:	b5bfff84 	addi	r22,r22,-2
   2ca54:	2449883a 	add	r4,r4,r17
   2ca58:	003f3406 	br	2c72c <_gp+0xfffef90c>
   2ca5c:	b5bfff84 	addi	r22,r22,-2
   2ca60:	1445883a 	add	r2,r2,r17
   2ca64:	003edb06 	br	2c5d4 <_gp+0xfffef7b4>

0002ca68 <__umoddi3>:
   2ca68:	defff404 	addi	sp,sp,-48
   2ca6c:	df000a15 	stw	fp,40(sp)
   2ca70:	dc400315 	stw	r17,12(sp)
   2ca74:	dc000215 	stw	r16,8(sp)
   2ca78:	dfc00b15 	stw	ra,44(sp)
   2ca7c:	ddc00915 	stw	r23,36(sp)
   2ca80:	dd800815 	stw	r22,32(sp)
   2ca84:	dd400715 	stw	r21,28(sp)
   2ca88:	dd000615 	stw	r20,24(sp)
   2ca8c:	dcc00515 	stw	r19,20(sp)
   2ca90:	dc800415 	stw	r18,16(sp)
   2ca94:	2021883a 	mov	r16,r4
   2ca98:	2823883a 	mov	r17,r5
   2ca9c:	2839883a 	mov	fp,r5
   2caa0:	38003c1e 	bne	r7,zero,2cb94 <__umoddi3+0x12c>
   2caa4:	3027883a 	mov	r19,r6
   2caa8:	2029883a 	mov	r20,r4
   2caac:	2980512e 	bgeu	r5,r6,2cbf4 <__umoddi3+0x18c>
   2cab0:	00bfffd4 	movui	r2,65535
   2cab4:	11809a36 	bltu	r2,r6,2cd20 <__umoddi3+0x2b8>
   2cab8:	01003fc4 	movi	r4,255
   2cabc:	2189803a 	cmpltu	r4,r4,r6
   2cac0:	200890fa 	slli	r4,r4,3
   2cac4:	3104d83a 	srl	r2,r6,r4
   2cac8:	00c000f4 	movhi	r3,3
   2cacc:	18cc5b04 	addi	r3,r3,12652
   2cad0:	1885883a 	add	r2,r3,r2
   2cad4:	10c00003 	ldbu	r3,0(r2)
   2cad8:	00800804 	movi	r2,32
   2cadc:	1909883a 	add	r4,r3,r4
   2cae0:	1125c83a 	sub	r18,r2,r4
   2cae4:	90000526 	beq	r18,zero,2cafc <__umoddi3+0x94>
   2cae8:	8ca2983a 	sll	r17,r17,r18
   2caec:	8108d83a 	srl	r4,r16,r4
   2caf0:	34a6983a 	sll	r19,r6,r18
   2caf4:	84a8983a 	sll	r20,r16,r18
   2caf8:	2478b03a 	or	fp,r4,r17
   2cafc:	982ed43a 	srli	r23,r19,16
   2cb00:	e009883a 	mov	r4,fp
   2cb04:	9dbfffcc 	andi	r22,r19,65535
   2cb08:	b80b883a 	mov	r5,r23
   2cb0c:	002d0fc0 	call	2d0fc <__umodsi3>
   2cb10:	e009883a 	mov	r4,fp
   2cb14:	b80b883a 	mov	r5,r23
   2cb18:	102b883a 	mov	r21,r2
   2cb1c:	002d0980 	call	2d098 <__udivsi3>
   2cb20:	a806943a 	slli	r3,r21,16
   2cb24:	a008d43a 	srli	r4,r20,16
   2cb28:	b085383a 	mul	r2,r22,r2
   2cb2c:	20c8b03a 	or	r4,r4,r3
   2cb30:	2080032e 	bgeu	r4,r2,2cb40 <__umoddi3+0xd8>
   2cb34:	24c9883a 	add	r4,r4,r19
   2cb38:	24c00136 	bltu	r4,r19,2cb40 <__umoddi3+0xd8>
   2cb3c:	20811036 	bltu	r4,r2,2cf80 <__umoddi3+0x518>
   2cb40:	20abc83a 	sub	r21,r4,r2
   2cb44:	b80b883a 	mov	r5,r23
   2cb48:	a809883a 	mov	r4,r21
   2cb4c:	002d0fc0 	call	2d0fc <__umodsi3>
   2cb50:	1023883a 	mov	r17,r2
   2cb54:	b80b883a 	mov	r5,r23
   2cb58:	a809883a 	mov	r4,r21
   2cb5c:	002d0980 	call	2d098 <__udivsi3>
   2cb60:	8822943a 	slli	r17,r17,16
   2cb64:	b085383a 	mul	r2,r22,r2
   2cb68:	a0ffffcc 	andi	r3,r20,65535
   2cb6c:	1c46b03a 	or	r3,r3,r17
   2cb70:	1880042e 	bgeu	r3,r2,2cb84 <__umoddi3+0x11c>
   2cb74:	1cc7883a 	add	r3,r3,r19
   2cb78:	1cc00236 	bltu	r3,r19,2cb84 <__umoddi3+0x11c>
   2cb7c:	1880012e 	bgeu	r3,r2,2cb84 <__umoddi3+0x11c>
   2cb80:	1cc7883a 	add	r3,r3,r19
   2cb84:	1885c83a 	sub	r2,r3,r2
   2cb88:	1484d83a 	srl	r2,r2,r18
   2cb8c:	0007883a 	mov	r3,zero
   2cb90:	00004f06 	br	2ccd0 <__umoddi3+0x268>
   2cb94:	29c04c36 	bltu	r5,r7,2ccc8 <__umoddi3+0x260>
   2cb98:	00bfffd4 	movui	r2,65535
   2cb9c:	11c0582e 	bgeu	r2,r7,2cd00 <__umoddi3+0x298>
   2cba0:	00804034 	movhi	r2,256
   2cba4:	10bfffc4 	addi	r2,r2,-1
   2cba8:	11c0e736 	bltu	r2,r7,2cf48 <__umoddi3+0x4e0>
   2cbac:	01000404 	movi	r4,16
   2cbb0:	3904d83a 	srl	r2,r7,r4
   2cbb4:	00c000f4 	movhi	r3,3
   2cbb8:	18cc5b04 	addi	r3,r3,12652
   2cbbc:	1885883a 	add	r2,r3,r2
   2cbc0:	14c00003 	ldbu	r19,0(r2)
   2cbc4:	00c00804 	movi	r3,32
   2cbc8:	9927883a 	add	r19,r19,r4
   2cbcc:	1ce9c83a 	sub	r20,r3,r19
   2cbd0:	a000581e 	bne	r20,zero,2cd34 <__umoddi3+0x2cc>
   2cbd4:	3c400136 	bltu	r7,r17,2cbdc <__umoddi3+0x174>
   2cbd8:	8180eb36 	bltu	r16,r6,2cf88 <__umoddi3+0x520>
   2cbdc:	8185c83a 	sub	r2,r16,r6
   2cbe0:	89e3c83a 	sub	r17,r17,r7
   2cbe4:	8089803a 	cmpltu	r4,r16,r2
   2cbe8:	8939c83a 	sub	fp,r17,r4
   2cbec:	e007883a 	mov	r3,fp
   2cbf0:	00003706 	br	2ccd0 <__umoddi3+0x268>
   2cbf4:	3000041e 	bne	r6,zero,2cc08 <__umoddi3+0x1a0>
   2cbf8:	000b883a 	mov	r5,zero
   2cbfc:	01000044 	movi	r4,1
   2cc00:	002d0980 	call	2d098 <__udivsi3>
   2cc04:	1027883a 	mov	r19,r2
   2cc08:	00bfffd4 	movui	r2,65535
   2cc0c:	14c0402e 	bgeu	r2,r19,2cd10 <__umoddi3+0x2a8>
   2cc10:	00804034 	movhi	r2,256
   2cc14:	10bfffc4 	addi	r2,r2,-1
   2cc18:	14c0cd36 	bltu	r2,r19,2cf50 <__umoddi3+0x4e8>
   2cc1c:	00800404 	movi	r2,16
   2cc20:	9886d83a 	srl	r3,r19,r2
   2cc24:	010000f4 	movhi	r4,3
   2cc28:	210c5b04 	addi	r4,r4,12652
   2cc2c:	20c7883a 	add	r3,r4,r3
   2cc30:	18c00003 	ldbu	r3,0(r3)
   2cc34:	1887883a 	add	r3,r3,r2
   2cc38:	00800804 	movi	r2,32
   2cc3c:	10e5c83a 	sub	r18,r2,r3
   2cc40:	9000901e 	bne	r18,zero,2ce84 <__umoddi3+0x41c>
   2cc44:	982cd43a 	srli	r22,r19,16
   2cc48:	8ce3c83a 	sub	r17,r17,r19
   2cc4c:	9d7fffcc 	andi	r21,r19,65535
   2cc50:	b00b883a 	mov	r5,r22
   2cc54:	8809883a 	mov	r4,r17
   2cc58:	002d0fc0 	call	2d0fc <__umodsi3>
   2cc5c:	8809883a 	mov	r4,r17
   2cc60:	b00b883a 	mov	r5,r22
   2cc64:	1021883a 	mov	r16,r2
   2cc68:	002d0980 	call	2d098 <__udivsi3>
   2cc6c:	8006943a 	slli	r3,r16,16
   2cc70:	a008d43a 	srli	r4,r20,16
   2cc74:	1545383a 	mul	r2,r2,r21
   2cc78:	20c8b03a 	or	r4,r4,r3
   2cc7c:	2080042e 	bgeu	r4,r2,2cc90 <__umoddi3+0x228>
   2cc80:	24c9883a 	add	r4,r4,r19
   2cc84:	24c00236 	bltu	r4,r19,2cc90 <__umoddi3+0x228>
   2cc88:	2080012e 	bgeu	r4,r2,2cc90 <__umoddi3+0x228>
   2cc8c:	24c9883a 	add	r4,r4,r19
   2cc90:	20a1c83a 	sub	r16,r4,r2
   2cc94:	b00b883a 	mov	r5,r22
   2cc98:	8009883a 	mov	r4,r16
   2cc9c:	002d0fc0 	call	2d0fc <__umodsi3>
   2cca0:	1023883a 	mov	r17,r2
   2cca4:	b00b883a 	mov	r5,r22
   2cca8:	8009883a 	mov	r4,r16
   2ccac:	002d0980 	call	2d098 <__udivsi3>
   2ccb0:	8822943a 	slli	r17,r17,16
   2ccb4:	1545383a 	mul	r2,r2,r21
   2ccb8:	a53fffcc 	andi	r20,r20,65535
   2ccbc:	a446b03a 	or	r3,r20,r17
   2ccc0:	18bfb02e 	bgeu	r3,r2,2cb84 <_gp+0xfffefd64>
   2ccc4:	003fab06 	br	2cb74 <_gp+0xfffefd54>
   2ccc8:	2005883a 	mov	r2,r4
   2cccc:	2807883a 	mov	r3,r5
   2ccd0:	dfc00b17 	ldw	ra,44(sp)
   2ccd4:	df000a17 	ldw	fp,40(sp)
   2ccd8:	ddc00917 	ldw	r23,36(sp)
   2ccdc:	dd800817 	ldw	r22,32(sp)
   2cce0:	dd400717 	ldw	r21,28(sp)
   2cce4:	dd000617 	ldw	r20,24(sp)
   2cce8:	dcc00517 	ldw	r19,20(sp)
   2ccec:	dc800417 	ldw	r18,16(sp)
   2ccf0:	dc400317 	ldw	r17,12(sp)
   2ccf4:	dc000217 	ldw	r16,8(sp)
   2ccf8:	dec00c04 	addi	sp,sp,48
   2ccfc:	f800283a 	ret
   2cd00:	04c03fc4 	movi	r19,255
   2cd04:	99c9803a 	cmpltu	r4,r19,r7
   2cd08:	200890fa 	slli	r4,r4,3
   2cd0c:	003fa806 	br	2cbb0 <_gp+0xfffefd90>
   2cd10:	00803fc4 	movi	r2,255
   2cd14:	14c5803a 	cmpltu	r2,r2,r19
   2cd18:	100490fa 	slli	r2,r2,3
   2cd1c:	003fc006 	br	2cc20 <_gp+0xfffefe00>
   2cd20:	00804034 	movhi	r2,256
   2cd24:	10bfffc4 	addi	r2,r2,-1
   2cd28:	11808b36 	bltu	r2,r6,2cf58 <__umoddi3+0x4f0>
   2cd2c:	01000404 	movi	r4,16
   2cd30:	003f6406 	br	2cac4 <_gp+0xfffefca4>
   2cd34:	34c4d83a 	srl	r2,r6,r19
   2cd38:	3d0e983a 	sll	r7,r7,r20
   2cd3c:	8cf8d83a 	srl	fp,r17,r19
   2cd40:	8d10983a 	sll	r8,r17,r20
   2cd44:	38aab03a 	or	r21,r7,r2
   2cd48:	a82cd43a 	srli	r22,r21,16
   2cd4c:	84e2d83a 	srl	r17,r16,r19
   2cd50:	e009883a 	mov	r4,fp
   2cd54:	b00b883a 	mov	r5,r22
   2cd58:	8a22b03a 	or	r17,r17,r8
   2cd5c:	3524983a 	sll	r18,r6,r20
   2cd60:	002d0fc0 	call	2d0fc <__umodsi3>
   2cd64:	e009883a 	mov	r4,fp
   2cd68:	b00b883a 	mov	r5,r22
   2cd6c:	102f883a 	mov	r23,r2
   2cd70:	002d0980 	call	2d098 <__udivsi3>
   2cd74:	100d883a 	mov	r6,r2
   2cd78:	b808943a 	slli	r4,r23,16
   2cd7c:	aa3fffcc 	andi	r8,r21,65535
   2cd80:	8804d43a 	srli	r2,r17,16
   2cd84:	41af383a 	mul	r23,r8,r6
   2cd88:	8520983a 	sll	r16,r16,r20
   2cd8c:	1104b03a 	or	r2,r2,r4
   2cd90:	15c0042e 	bgeu	r2,r23,2cda4 <__umoddi3+0x33c>
   2cd94:	1545883a 	add	r2,r2,r21
   2cd98:	30ffffc4 	addi	r3,r6,-1
   2cd9c:	1540742e 	bgeu	r2,r21,2cf70 <__umoddi3+0x508>
   2cda0:	180d883a 	mov	r6,r3
   2cda4:	15efc83a 	sub	r23,r2,r23
   2cda8:	b00b883a 	mov	r5,r22
   2cdac:	b809883a 	mov	r4,r23
   2cdb0:	d9800115 	stw	r6,4(sp)
   2cdb4:	da000015 	stw	r8,0(sp)
   2cdb8:	002d0fc0 	call	2d0fc <__umodsi3>
   2cdbc:	b00b883a 	mov	r5,r22
   2cdc0:	b809883a 	mov	r4,r23
   2cdc4:	1039883a 	mov	fp,r2
   2cdc8:	002d0980 	call	2d098 <__udivsi3>
   2cdcc:	da000017 	ldw	r8,0(sp)
   2cdd0:	e038943a 	slli	fp,fp,16
   2cdd4:	100b883a 	mov	r5,r2
   2cdd8:	4089383a 	mul	r4,r8,r2
   2cddc:	8a3fffcc 	andi	r8,r17,65535
   2cde0:	4710b03a 	or	r8,r8,fp
   2cde4:	d9800117 	ldw	r6,4(sp)
   2cde8:	4100042e 	bgeu	r8,r4,2cdfc <__umoddi3+0x394>
   2cdec:	4551883a 	add	r8,r8,r21
   2cdf0:	10bfffc4 	addi	r2,r2,-1
   2cdf4:	45405a2e 	bgeu	r8,r21,2cf60 <__umoddi3+0x4f8>
   2cdf8:	100b883a 	mov	r5,r2
   2cdfc:	300c943a 	slli	r6,r6,16
   2ce00:	91ffffcc 	andi	r7,r18,65535
   2ce04:	9004d43a 	srli	r2,r18,16
   2ce08:	314cb03a 	or	r6,r6,r5
   2ce0c:	317fffcc 	andi	r5,r6,65535
   2ce10:	300cd43a 	srli	r6,r6,16
   2ce14:	29d3383a 	mul	r9,r5,r7
   2ce18:	288b383a 	mul	r5,r5,r2
   2ce1c:	31cf383a 	mul	r7,r6,r7
   2ce20:	4806d43a 	srli	r3,r9,16
   2ce24:	4111c83a 	sub	r8,r8,r4
   2ce28:	29cb883a 	add	r5,r5,r7
   2ce2c:	194b883a 	add	r5,r3,r5
   2ce30:	3085383a 	mul	r2,r6,r2
   2ce34:	29c0022e 	bgeu	r5,r7,2ce40 <__umoddi3+0x3d8>
   2ce38:	00c00074 	movhi	r3,1
   2ce3c:	10c5883a 	add	r2,r2,r3
   2ce40:	2808d43a 	srli	r4,r5,16
   2ce44:	280a943a 	slli	r5,r5,16
   2ce48:	4a7fffcc 	andi	r9,r9,65535
   2ce4c:	2085883a 	add	r2,r4,r2
   2ce50:	2a4b883a 	add	r5,r5,r9
   2ce54:	40803636 	bltu	r8,r2,2cf30 <__umoddi3+0x4c8>
   2ce58:	40804d26 	beq	r8,r2,2cf90 <__umoddi3+0x528>
   2ce5c:	4089c83a 	sub	r4,r8,r2
   2ce60:	280f883a 	mov	r7,r5
   2ce64:	81cfc83a 	sub	r7,r16,r7
   2ce68:	81c7803a 	cmpltu	r3,r16,r7
   2ce6c:	20c7c83a 	sub	r3,r4,r3
   2ce70:	1cc4983a 	sll	r2,r3,r19
   2ce74:	3d0ed83a 	srl	r7,r7,r20
   2ce78:	1d06d83a 	srl	r3,r3,r20
   2ce7c:	11c4b03a 	or	r2,r2,r7
   2ce80:	003f9306 	br	2ccd0 <_gp+0xfffefeb0>
   2ce84:	9ca6983a 	sll	r19,r19,r18
   2ce88:	88e8d83a 	srl	r20,r17,r3
   2ce8c:	80c4d83a 	srl	r2,r16,r3
   2ce90:	982cd43a 	srli	r22,r19,16
   2ce94:	8ca2983a 	sll	r17,r17,r18
   2ce98:	a009883a 	mov	r4,r20
   2ce9c:	b00b883a 	mov	r5,r22
   2cea0:	1478b03a 	or	fp,r2,r17
   2cea4:	002d0fc0 	call	2d0fc <__umodsi3>
   2cea8:	a009883a 	mov	r4,r20
   2ceac:	b00b883a 	mov	r5,r22
   2ceb0:	1023883a 	mov	r17,r2
   2ceb4:	002d0980 	call	2d098 <__udivsi3>
   2ceb8:	9d7fffcc 	andi	r21,r19,65535
   2cebc:	880a943a 	slli	r5,r17,16
   2cec0:	e008d43a 	srli	r4,fp,16
   2cec4:	a885383a 	mul	r2,r21,r2
   2cec8:	84a8983a 	sll	r20,r16,r18
   2cecc:	2148b03a 	or	r4,r4,r5
   2ced0:	2080042e 	bgeu	r4,r2,2cee4 <__umoddi3+0x47c>
   2ced4:	24c9883a 	add	r4,r4,r19
   2ced8:	24c00236 	bltu	r4,r19,2cee4 <__umoddi3+0x47c>
   2cedc:	2080012e 	bgeu	r4,r2,2cee4 <__umoddi3+0x47c>
   2cee0:	24c9883a 	add	r4,r4,r19
   2cee4:	20a3c83a 	sub	r17,r4,r2
   2cee8:	b00b883a 	mov	r5,r22
   2ceec:	8809883a 	mov	r4,r17
   2cef0:	002d0fc0 	call	2d0fc <__umodsi3>
   2cef4:	102f883a 	mov	r23,r2
   2cef8:	8809883a 	mov	r4,r17
   2cefc:	b00b883a 	mov	r5,r22
   2cf00:	002d0980 	call	2d098 <__udivsi3>
   2cf04:	b82e943a 	slli	r23,r23,16
   2cf08:	a885383a 	mul	r2,r21,r2
   2cf0c:	e13fffcc 	andi	r4,fp,65535
   2cf10:	25c8b03a 	or	r4,r4,r23
   2cf14:	2080042e 	bgeu	r4,r2,2cf28 <__umoddi3+0x4c0>
   2cf18:	24c9883a 	add	r4,r4,r19
   2cf1c:	24c00236 	bltu	r4,r19,2cf28 <__umoddi3+0x4c0>
   2cf20:	2080012e 	bgeu	r4,r2,2cf28 <__umoddi3+0x4c0>
   2cf24:	24c9883a 	add	r4,r4,r19
   2cf28:	20a3c83a 	sub	r17,r4,r2
   2cf2c:	003f4806 	br	2cc50 <_gp+0xfffefe30>
   2cf30:	2c8fc83a 	sub	r7,r5,r18
   2cf34:	1545c83a 	sub	r2,r2,r21
   2cf38:	29cb803a 	cmpltu	r5,r5,r7
   2cf3c:	1145c83a 	sub	r2,r2,r5
   2cf40:	4089c83a 	sub	r4,r8,r2
   2cf44:	003fc706 	br	2ce64 <_gp+0xffff0044>
   2cf48:	01000604 	movi	r4,24
   2cf4c:	003f1806 	br	2cbb0 <_gp+0xfffefd90>
   2cf50:	00800604 	movi	r2,24
   2cf54:	003f3206 	br	2cc20 <_gp+0xfffefe00>
   2cf58:	01000604 	movi	r4,24
   2cf5c:	003ed906 	br	2cac4 <_gp+0xfffefca4>
   2cf60:	413fa52e 	bgeu	r8,r4,2cdf8 <_gp+0xfffeffd8>
   2cf64:	297fff84 	addi	r5,r5,-2
   2cf68:	4551883a 	add	r8,r8,r21
   2cf6c:	003fa306 	br	2cdfc <_gp+0xfffeffdc>
   2cf70:	15ff8b2e 	bgeu	r2,r23,2cda0 <_gp+0xfffeff80>
   2cf74:	31bfff84 	addi	r6,r6,-2
   2cf78:	1545883a 	add	r2,r2,r21
   2cf7c:	003f8906 	br	2cda4 <_gp+0xfffeff84>
   2cf80:	24c9883a 	add	r4,r4,r19
   2cf84:	003eee06 	br	2cb40 <_gp+0xfffefd20>
   2cf88:	8005883a 	mov	r2,r16
   2cf8c:	003f1706 	br	2cbec <_gp+0xfffefdcc>
   2cf90:	817fe736 	bltu	r16,r5,2cf30 <_gp+0xffff0110>
   2cf94:	280f883a 	mov	r7,r5
   2cf98:	0009883a 	mov	r4,zero
   2cf9c:	003fb106 	br	2ce64 <_gp+0xffff0044>

0002cfa0 <__divsi3>:
   2cfa0:	20001b16 	blt	r4,zero,2d010 <__divsi3+0x70>
   2cfa4:	000f883a 	mov	r7,zero
   2cfa8:	28001616 	blt	r5,zero,2d004 <__divsi3+0x64>
   2cfac:	200d883a 	mov	r6,r4
   2cfb0:	29001a2e 	bgeu	r5,r4,2d01c <__divsi3+0x7c>
   2cfb4:	00800804 	movi	r2,32
   2cfb8:	00c00044 	movi	r3,1
   2cfbc:	00000106 	br	2cfc4 <__divsi3+0x24>
   2cfc0:	10000d26 	beq	r2,zero,2cff8 <__divsi3+0x58>
   2cfc4:	294b883a 	add	r5,r5,r5
   2cfc8:	10bfffc4 	addi	r2,r2,-1
   2cfcc:	18c7883a 	add	r3,r3,r3
   2cfd0:	293ffb36 	bltu	r5,r4,2cfc0 <_gp+0xffff01a0>
   2cfd4:	0005883a 	mov	r2,zero
   2cfd8:	18000726 	beq	r3,zero,2cff8 <__divsi3+0x58>
   2cfdc:	0005883a 	mov	r2,zero
   2cfe0:	31400236 	bltu	r6,r5,2cfec <__divsi3+0x4c>
   2cfe4:	314dc83a 	sub	r6,r6,r5
   2cfe8:	10c4b03a 	or	r2,r2,r3
   2cfec:	1806d07a 	srli	r3,r3,1
   2cff0:	280ad07a 	srli	r5,r5,1
   2cff4:	183ffa1e 	bne	r3,zero,2cfe0 <_gp+0xffff01c0>
   2cff8:	38000126 	beq	r7,zero,2d000 <__divsi3+0x60>
   2cffc:	0085c83a 	sub	r2,zero,r2
   2d000:	f800283a 	ret
   2d004:	014bc83a 	sub	r5,zero,r5
   2d008:	39c0005c 	xori	r7,r7,1
   2d00c:	003fe706 	br	2cfac <_gp+0xffff018c>
   2d010:	0109c83a 	sub	r4,zero,r4
   2d014:	01c00044 	movi	r7,1
   2d018:	003fe306 	br	2cfa8 <_gp+0xffff0188>
   2d01c:	00c00044 	movi	r3,1
   2d020:	003fee06 	br	2cfdc <_gp+0xffff01bc>

0002d024 <__modsi3>:
   2d024:	20001716 	blt	r4,zero,2d084 <__modsi3+0x60>
   2d028:	000f883a 	mov	r7,zero
   2d02c:	2005883a 	mov	r2,r4
   2d030:	28001216 	blt	r5,zero,2d07c <__modsi3+0x58>
   2d034:	2900162e 	bgeu	r5,r4,2d090 <__modsi3+0x6c>
   2d038:	01800804 	movi	r6,32
   2d03c:	00c00044 	movi	r3,1
   2d040:	00000106 	br	2d048 <__modsi3+0x24>
   2d044:	30000a26 	beq	r6,zero,2d070 <__modsi3+0x4c>
   2d048:	294b883a 	add	r5,r5,r5
   2d04c:	31bfffc4 	addi	r6,r6,-1
   2d050:	18c7883a 	add	r3,r3,r3
   2d054:	293ffb36 	bltu	r5,r4,2d044 <_gp+0xffff0224>
   2d058:	18000526 	beq	r3,zero,2d070 <__modsi3+0x4c>
   2d05c:	1806d07a 	srli	r3,r3,1
   2d060:	11400136 	bltu	r2,r5,2d068 <__modsi3+0x44>
   2d064:	1145c83a 	sub	r2,r2,r5
   2d068:	280ad07a 	srli	r5,r5,1
   2d06c:	183ffb1e 	bne	r3,zero,2d05c <_gp+0xffff023c>
   2d070:	38000126 	beq	r7,zero,2d078 <__modsi3+0x54>
   2d074:	0085c83a 	sub	r2,zero,r2
   2d078:	f800283a 	ret
   2d07c:	014bc83a 	sub	r5,zero,r5
   2d080:	003fec06 	br	2d034 <_gp+0xffff0214>
   2d084:	0109c83a 	sub	r4,zero,r4
   2d088:	01c00044 	movi	r7,1
   2d08c:	003fe706 	br	2d02c <_gp+0xffff020c>
   2d090:	00c00044 	movi	r3,1
   2d094:	003ff106 	br	2d05c <_gp+0xffff023c>

0002d098 <__udivsi3>:
   2d098:	200d883a 	mov	r6,r4
   2d09c:	2900152e 	bgeu	r5,r4,2d0f4 <__udivsi3+0x5c>
   2d0a0:	28001416 	blt	r5,zero,2d0f4 <__udivsi3+0x5c>
   2d0a4:	00800804 	movi	r2,32
   2d0a8:	00c00044 	movi	r3,1
   2d0ac:	00000206 	br	2d0b8 <__udivsi3+0x20>
   2d0b0:	10000e26 	beq	r2,zero,2d0ec <__udivsi3+0x54>
   2d0b4:	28000516 	blt	r5,zero,2d0cc <__udivsi3+0x34>
   2d0b8:	294b883a 	add	r5,r5,r5
   2d0bc:	10bfffc4 	addi	r2,r2,-1
   2d0c0:	18c7883a 	add	r3,r3,r3
   2d0c4:	293ffa36 	bltu	r5,r4,2d0b0 <_gp+0xffff0290>
   2d0c8:	18000826 	beq	r3,zero,2d0ec <__udivsi3+0x54>
   2d0cc:	0005883a 	mov	r2,zero
   2d0d0:	31400236 	bltu	r6,r5,2d0dc <__udivsi3+0x44>
   2d0d4:	314dc83a 	sub	r6,r6,r5
   2d0d8:	10c4b03a 	or	r2,r2,r3
   2d0dc:	1806d07a 	srli	r3,r3,1
   2d0e0:	280ad07a 	srli	r5,r5,1
   2d0e4:	183ffa1e 	bne	r3,zero,2d0d0 <_gp+0xffff02b0>
   2d0e8:	f800283a 	ret
   2d0ec:	0005883a 	mov	r2,zero
   2d0f0:	f800283a 	ret
   2d0f4:	00c00044 	movi	r3,1
   2d0f8:	003ff406 	br	2d0cc <_gp+0xffff02ac>

0002d0fc <__umodsi3>:
   2d0fc:	2005883a 	mov	r2,r4
   2d100:	2900122e 	bgeu	r5,r4,2d14c <__umodsi3+0x50>
   2d104:	28001116 	blt	r5,zero,2d14c <__umodsi3+0x50>
   2d108:	01800804 	movi	r6,32
   2d10c:	00c00044 	movi	r3,1
   2d110:	00000206 	br	2d11c <__umodsi3+0x20>
   2d114:	30000c26 	beq	r6,zero,2d148 <__umodsi3+0x4c>
   2d118:	28000516 	blt	r5,zero,2d130 <__umodsi3+0x34>
   2d11c:	294b883a 	add	r5,r5,r5
   2d120:	31bfffc4 	addi	r6,r6,-1
   2d124:	18c7883a 	add	r3,r3,r3
   2d128:	293ffa36 	bltu	r5,r4,2d114 <_gp+0xffff02f4>
   2d12c:	18000626 	beq	r3,zero,2d148 <__umodsi3+0x4c>
   2d130:	1806d07a 	srli	r3,r3,1
   2d134:	11400136 	bltu	r2,r5,2d13c <__umodsi3+0x40>
   2d138:	1145c83a 	sub	r2,r2,r5
   2d13c:	280ad07a 	srli	r5,r5,1
   2d140:	183ffb1e 	bne	r3,zero,2d130 <_gp+0xffff0310>
   2d144:	f800283a 	ret
   2d148:	f800283a 	ret
   2d14c:	00c00044 	movi	r3,1
   2d150:	003ff706 	br	2d130 <_gp+0xffff0310>

0002d154 <__adddf3>:
   2d154:	02c00434 	movhi	r11,16
   2d158:	5affffc4 	addi	r11,r11,-1
   2d15c:	2806d7fa 	srli	r3,r5,31
   2d160:	2ad4703a 	and	r10,r5,r11
   2d164:	3ad2703a 	and	r9,r7,r11
   2d168:	3804d53a 	srli	r2,r7,20
   2d16c:	3018d77a 	srli	r12,r6,29
   2d170:	280ad53a 	srli	r5,r5,20
   2d174:	501490fa 	slli	r10,r10,3
   2d178:	2010d77a 	srli	r8,r4,29
   2d17c:	481290fa 	slli	r9,r9,3
   2d180:	380ed7fa 	srli	r7,r7,31
   2d184:	defffb04 	addi	sp,sp,-20
   2d188:	dc800215 	stw	r18,8(sp)
   2d18c:	dc400115 	stw	r17,4(sp)
   2d190:	dc000015 	stw	r16,0(sp)
   2d194:	dfc00415 	stw	ra,16(sp)
   2d198:	dcc00315 	stw	r19,12(sp)
   2d19c:	1c803fcc 	andi	r18,r3,255
   2d1a0:	2c01ffcc 	andi	r16,r5,2047
   2d1a4:	5210b03a 	or	r8,r10,r8
   2d1a8:	202290fa 	slli	r17,r4,3
   2d1ac:	1081ffcc 	andi	r2,r2,2047
   2d1b0:	4b12b03a 	or	r9,r9,r12
   2d1b4:	300c90fa 	slli	r6,r6,3
   2d1b8:	91c07526 	beq	r18,r7,2d390 <__adddf3+0x23c>
   2d1bc:	8087c83a 	sub	r3,r16,r2
   2d1c0:	00c0ab0e 	bge	zero,r3,2d470 <__adddf3+0x31c>
   2d1c4:	10002a1e 	bne	r2,zero,2d270 <__adddf3+0x11c>
   2d1c8:	4984b03a 	or	r2,r9,r6
   2d1cc:	1000961e 	bne	r2,zero,2d428 <__adddf3+0x2d4>
   2d1d0:	888001cc 	andi	r2,r17,7
   2d1d4:	10000726 	beq	r2,zero,2d1f4 <__adddf3+0xa0>
   2d1d8:	888003cc 	andi	r2,r17,15
   2d1dc:	00c00104 	movi	r3,4
   2d1e0:	10c00426 	beq	r2,r3,2d1f4 <__adddf3+0xa0>
   2d1e4:	88c7883a 	add	r3,r17,r3
   2d1e8:	1c63803a 	cmpltu	r17,r3,r17
   2d1ec:	4451883a 	add	r8,r8,r17
   2d1f0:	1823883a 	mov	r17,r3
   2d1f4:	4080202c 	andhi	r2,r8,128
   2d1f8:	10005926 	beq	r2,zero,2d360 <__adddf3+0x20c>
   2d1fc:	84000044 	addi	r16,r16,1
   2d200:	0081ffc4 	movi	r2,2047
   2d204:	8080ba26 	beq	r16,r2,2d4f0 <__adddf3+0x39c>
   2d208:	00bfe034 	movhi	r2,65408
   2d20c:	10bfffc4 	addi	r2,r2,-1
   2d210:	4090703a 	and	r8,r8,r2
   2d214:	4004977a 	slli	r2,r8,29
   2d218:	4010927a 	slli	r8,r8,9
   2d21c:	8822d0fa 	srli	r17,r17,3
   2d220:	8401ffcc 	andi	r16,r16,2047
   2d224:	4010d33a 	srli	r8,r8,12
   2d228:	9007883a 	mov	r3,r18
   2d22c:	1444b03a 	or	r2,r2,r17
   2d230:	8401ffcc 	andi	r16,r16,2047
   2d234:	8020953a 	slli	r16,r16,20
   2d238:	18c03fcc 	andi	r3,r3,255
   2d23c:	01000434 	movhi	r4,16
   2d240:	213fffc4 	addi	r4,r4,-1
   2d244:	180697fa 	slli	r3,r3,31
   2d248:	4110703a 	and	r8,r8,r4
   2d24c:	4410b03a 	or	r8,r8,r16
   2d250:	40c6b03a 	or	r3,r8,r3
   2d254:	dfc00417 	ldw	ra,16(sp)
   2d258:	dcc00317 	ldw	r19,12(sp)
   2d25c:	dc800217 	ldw	r18,8(sp)
   2d260:	dc400117 	ldw	r17,4(sp)
   2d264:	dc000017 	ldw	r16,0(sp)
   2d268:	dec00504 	addi	sp,sp,20
   2d26c:	f800283a 	ret
   2d270:	0081ffc4 	movi	r2,2047
   2d274:	80bfd626 	beq	r16,r2,2d1d0 <_gp+0xffff03b0>
   2d278:	4a402034 	orhi	r9,r9,128
   2d27c:	00800e04 	movi	r2,56
   2d280:	10c09f16 	blt	r2,r3,2d500 <__adddf3+0x3ac>
   2d284:	008007c4 	movi	r2,31
   2d288:	10c0c216 	blt	r2,r3,2d594 <__adddf3+0x440>
   2d28c:	00800804 	movi	r2,32
   2d290:	10c5c83a 	sub	r2,r2,r3
   2d294:	488a983a 	sll	r5,r9,r2
   2d298:	30c8d83a 	srl	r4,r6,r3
   2d29c:	3084983a 	sll	r2,r6,r2
   2d2a0:	48c6d83a 	srl	r3,r9,r3
   2d2a4:	290cb03a 	or	r6,r5,r4
   2d2a8:	1004c03a 	cmpne	r2,r2,zero
   2d2ac:	308cb03a 	or	r6,r6,r2
   2d2b0:	898dc83a 	sub	r6,r17,r6
   2d2b4:	89a3803a 	cmpltu	r17,r17,r6
   2d2b8:	40d1c83a 	sub	r8,r8,r3
   2d2bc:	4451c83a 	sub	r8,r8,r17
   2d2c0:	3023883a 	mov	r17,r6
   2d2c4:	4080202c 	andhi	r2,r8,128
   2d2c8:	10002326 	beq	r2,zero,2d358 <__adddf3+0x204>
   2d2cc:	04c02034 	movhi	r19,128
   2d2d0:	9cffffc4 	addi	r19,r19,-1
   2d2d4:	44e6703a 	and	r19,r8,r19
   2d2d8:	98007626 	beq	r19,zero,2d4b4 <__adddf3+0x360>
   2d2dc:	9809883a 	mov	r4,r19
   2d2e0:	002f7580 	call	2f758 <__clzsi2>
   2d2e4:	10fffe04 	addi	r3,r2,-8
   2d2e8:	010007c4 	movi	r4,31
   2d2ec:	20c07716 	blt	r4,r3,2d4cc <__adddf3+0x378>
   2d2f0:	00800804 	movi	r2,32
   2d2f4:	10c5c83a 	sub	r2,r2,r3
   2d2f8:	8884d83a 	srl	r2,r17,r2
   2d2fc:	98d0983a 	sll	r8,r19,r3
   2d300:	88e2983a 	sll	r17,r17,r3
   2d304:	1204b03a 	or	r2,r2,r8
   2d308:	1c007416 	blt	r3,r16,2d4dc <__adddf3+0x388>
   2d30c:	1c21c83a 	sub	r16,r3,r16
   2d310:	82000044 	addi	r8,r16,1
   2d314:	00c007c4 	movi	r3,31
   2d318:	1a009116 	blt	r3,r8,2d560 <__adddf3+0x40c>
   2d31c:	00c00804 	movi	r3,32
   2d320:	1a07c83a 	sub	r3,r3,r8
   2d324:	8a08d83a 	srl	r4,r17,r8
   2d328:	88e2983a 	sll	r17,r17,r3
   2d32c:	10c6983a 	sll	r3,r2,r3
   2d330:	1210d83a 	srl	r8,r2,r8
   2d334:	8804c03a 	cmpne	r2,r17,zero
   2d338:	1906b03a 	or	r3,r3,r4
   2d33c:	18a2b03a 	or	r17,r3,r2
   2d340:	0021883a 	mov	r16,zero
   2d344:	003fa206 	br	2d1d0 <_gp+0xffff03b0>
   2d348:	1890b03a 	or	r8,r3,r2
   2d34c:	40017d26 	beq	r8,zero,2d944 <__adddf3+0x7f0>
   2d350:	1011883a 	mov	r8,r2
   2d354:	1823883a 	mov	r17,r3
   2d358:	888001cc 	andi	r2,r17,7
   2d35c:	103f9e1e 	bne	r2,zero,2d1d8 <_gp+0xffff03b8>
   2d360:	4004977a 	slli	r2,r8,29
   2d364:	8822d0fa 	srli	r17,r17,3
   2d368:	4010d0fa 	srli	r8,r8,3
   2d36c:	9007883a 	mov	r3,r18
   2d370:	1444b03a 	or	r2,r2,r17
   2d374:	0101ffc4 	movi	r4,2047
   2d378:	81002426 	beq	r16,r4,2d40c <__adddf3+0x2b8>
   2d37c:	8120703a 	and	r16,r16,r4
   2d380:	01000434 	movhi	r4,16
   2d384:	213fffc4 	addi	r4,r4,-1
   2d388:	4110703a 	and	r8,r8,r4
   2d38c:	003fa806 	br	2d230 <_gp+0xffff0410>
   2d390:	8089c83a 	sub	r4,r16,r2
   2d394:	01005e0e 	bge	zero,r4,2d510 <__adddf3+0x3bc>
   2d398:	10002b26 	beq	r2,zero,2d448 <__adddf3+0x2f4>
   2d39c:	0081ffc4 	movi	r2,2047
   2d3a0:	80bf8b26 	beq	r16,r2,2d1d0 <_gp+0xffff03b0>
   2d3a4:	4a402034 	orhi	r9,r9,128
   2d3a8:	00800e04 	movi	r2,56
   2d3ac:	1100a40e 	bge	r2,r4,2d640 <__adddf3+0x4ec>
   2d3b0:	498cb03a 	or	r6,r9,r6
   2d3b4:	300ac03a 	cmpne	r5,r6,zero
   2d3b8:	0013883a 	mov	r9,zero
   2d3bc:	2c4b883a 	add	r5,r5,r17
   2d3c0:	2c63803a 	cmpltu	r17,r5,r17
   2d3c4:	4a11883a 	add	r8,r9,r8
   2d3c8:	8a11883a 	add	r8,r17,r8
   2d3cc:	2823883a 	mov	r17,r5
   2d3d0:	4080202c 	andhi	r2,r8,128
   2d3d4:	103fe026 	beq	r2,zero,2d358 <_gp+0xffff0538>
   2d3d8:	84000044 	addi	r16,r16,1
   2d3dc:	0081ffc4 	movi	r2,2047
   2d3e0:	8080d226 	beq	r16,r2,2d72c <__adddf3+0x5d8>
   2d3e4:	00bfe034 	movhi	r2,65408
   2d3e8:	10bfffc4 	addi	r2,r2,-1
   2d3ec:	4090703a 	and	r8,r8,r2
   2d3f0:	880ad07a 	srli	r5,r17,1
   2d3f4:	400897fa 	slli	r4,r8,31
   2d3f8:	88c0004c 	andi	r3,r17,1
   2d3fc:	28e2b03a 	or	r17,r5,r3
   2d400:	4010d07a 	srli	r8,r8,1
   2d404:	2462b03a 	or	r17,r4,r17
   2d408:	003f7106 	br	2d1d0 <_gp+0xffff03b0>
   2d40c:	4088b03a 	or	r4,r8,r2
   2d410:	20014526 	beq	r4,zero,2d928 <__adddf3+0x7d4>
   2d414:	01000434 	movhi	r4,16
   2d418:	42000234 	orhi	r8,r8,8
   2d41c:	213fffc4 	addi	r4,r4,-1
   2d420:	4110703a 	and	r8,r8,r4
   2d424:	003f8206 	br	2d230 <_gp+0xffff0410>
   2d428:	18ffffc4 	addi	r3,r3,-1
   2d42c:	1800491e 	bne	r3,zero,2d554 <__adddf3+0x400>
   2d430:	898bc83a 	sub	r5,r17,r6
   2d434:	8963803a 	cmpltu	r17,r17,r5
   2d438:	4251c83a 	sub	r8,r8,r9
   2d43c:	4451c83a 	sub	r8,r8,r17
   2d440:	2823883a 	mov	r17,r5
   2d444:	003f9f06 	br	2d2c4 <_gp+0xffff04a4>
   2d448:	4984b03a 	or	r2,r9,r6
   2d44c:	103f6026 	beq	r2,zero,2d1d0 <_gp+0xffff03b0>
   2d450:	213fffc4 	addi	r4,r4,-1
   2d454:	2000931e 	bne	r4,zero,2d6a4 <__adddf3+0x550>
   2d458:	898d883a 	add	r6,r17,r6
   2d45c:	3463803a 	cmpltu	r17,r6,r17
   2d460:	4251883a 	add	r8,r8,r9
   2d464:	8a11883a 	add	r8,r17,r8
   2d468:	3023883a 	mov	r17,r6
   2d46c:	003fd806 	br	2d3d0 <_gp+0xffff05b0>
   2d470:	1800541e 	bne	r3,zero,2d5c4 <__adddf3+0x470>
   2d474:	80800044 	addi	r2,r16,1
   2d478:	1081ffcc 	andi	r2,r2,2047
   2d47c:	00c00044 	movi	r3,1
   2d480:	1880a00e 	bge	r3,r2,2d704 <__adddf3+0x5b0>
   2d484:	8989c83a 	sub	r4,r17,r6
   2d488:	8905803a 	cmpltu	r2,r17,r4
   2d48c:	4267c83a 	sub	r19,r8,r9
   2d490:	98a7c83a 	sub	r19,r19,r2
   2d494:	9880202c 	andhi	r2,r19,128
   2d498:	10006326 	beq	r2,zero,2d628 <__adddf3+0x4d4>
   2d49c:	3463c83a 	sub	r17,r6,r17
   2d4a0:	4a07c83a 	sub	r3,r9,r8
   2d4a4:	344d803a 	cmpltu	r6,r6,r17
   2d4a8:	19a7c83a 	sub	r19,r3,r6
   2d4ac:	3825883a 	mov	r18,r7
   2d4b0:	983f8a1e 	bne	r19,zero,2d2dc <_gp+0xffff04bc>
   2d4b4:	8809883a 	mov	r4,r17
   2d4b8:	002f7580 	call	2f758 <__clzsi2>
   2d4bc:	10800804 	addi	r2,r2,32
   2d4c0:	10fffe04 	addi	r3,r2,-8
   2d4c4:	010007c4 	movi	r4,31
   2d4c8:	20ff890e 	bge	r4,r3,2d2f0 <_gp+0xffff04d0>
   2d4cc:	10bff604 	addi	r2,r2,-40
   2d4d0:	8884983a 	sll	r2,r17,r2
   2d4d4:	0023883a 	mov	r17,zero
   2d4d8:	1c3f8c0e 	bge	r3,r16,2d30c <_gp+0xffff04ec>
   2d4dc:	023fe034 	movhi	r8,65408
   2d4e0:	423fffc4 	addi	r8,r8,-1
   2d4e4:	80e1c83a 	sub	r16,r16,r3
   2d4e8:	1210703a 	and	r8,r2,r8
   2d4ec:	003f3806 	br	2d1d0 <_gp+0xffff03b0>
   2d4f0:	9007883a 	mov	r3,r18
   2d4f4:	0011883a 	mov	r8,zero
   2d4f8:	0005883a 	mov	r2,zero
   2d4fc:	003f4c06 	br	2d230 <_gp+0xffff0410>
   2d500:	498cb03a 	or	r6,r9,r6
   2d504:	300cc03a 	cmpne	r6,r6,zero
   2d508:	0007883a 	mov	r3,zero
   2d50c:	003f6806 	br	2d2b0 <_gp+0xffff0490>
   2d510:	20009c1e 	bne	r4,zero,2d784 <__adddf3+0x630>
   2d514:	80800044 	addi	r2,r16,1
   2d518:	1141ffcc 	andi	r5,r2,2047
   2d51c:	01000044 	movi	r4,1
   2d520:	2140670e 	bge	r4,r5,2d6c0 <__adddf3+0x56c>
   2d524:	0101ffc4 	movi	r4,2047
   2d528:	11007f26 	beq	r2,r4,2d728 <__adddf3+0x5d4>
   2d52c:	898d883a 	add	r6,r17,r6
   2d530:	4247883a 	add	r3,r8,r9
   2d534:	3451803a 	cmpltu	r8,r6,r17
   2d538:	40d1883a 	add	r8,r8,r3
   2d53c:	402297fa 	slli	r17,r8,31
   2d540:	300cd07a 	srli	r6,r6,1
   2d544:	4010d07a 	srli	r8,r8,1
   2d548:	1021883a 	mov	r16,r2
   2d54c:	89a2b03a 	or	r17,r17,r6
   2d550:	003f1f06 	br	2d1d0 <_gp+0xffff03b0>
   2d554:	0081ffc4 	movi	r2,2047
   2d558:	80bf481e 	bne	r16,r2,2d27c <_gp+0xffff045c>
   2d55c:	003f1c06 	br	2d1d0 <_gp+0xffff03b0>
   2d560:	843ff844 	addi	r16,r16,-31
   2d564:	01000804 	movi	r4,32
   2d568:	1406d83a 	srl	r3,r2,r16
   2d56c:	41005026 	beq	r8,r4,2d6b0 <__adddf3+0x55c>
   2d570:	01001004 	movi	r4,64
   2d574:	2211c83a 	sub	r8,r4,r8
   2d578:	1204983a 	sll	r2,r2,r8
   2d57c:	88a2b03a 	or	r17,r17,r2
   2d580:	8822c03a 	cmpne	r17,r17,zero
   2d584:	1c62b03a 	or	r17,r3,r17
   2d588:	0011883a 	mov	r8,zero
   2d58c:	0021883a 	mov	r16,zero
   2d590:	003f7106 	br	2d358 <_gp+0xffff0538>
   2d594:	193ff804 	addi	r4,r3,-32
   2d598:	00800804 	movi	r2,32
   2d59c:	4908d83a 	srl	r4,r9,r4
   2d5a0:	18804526 	beq	r3,r2,2d6b8 <__adddf3+0x564>
   2d5a4:	00801004 	movi	r2,64
   2d5a8:	10c5c83a 	sub	r2,r2,r3
   2d5ac:	4886983a 	sll	r3,r9,r2
   2d5b0:	198cb03a 	or	r6,r3,r6
   2d5b4:	300cc03a 	cmpne	r6,r6,zero
   2d5b8:	218cb03a 	or	r6,r4,r6
   2d5bc:	0007883a 	mov	r3,zero
   2d5c0:	003f3b06 	br	2d2b0 <_gp+0xffff0490>
   2d5c4:	80002a26 	beq	r16,zero,2d670 <__adddf3+0x51c>
   2d5c8:	0101ffc4 	movi	r4,2047
   2d5cc:	11006826 	beq	r2,r4,2d770 <__adddf3+0x61c>
   2d5d0:	00c7c83a 	sub	r3,zero,r3
   2d5d4:	42002034 	orhi	r8,r8,128
   2d5d8:	01000e04 	movi	r4,56
   2d5dc:	20c07c16 	blt	r4,r3,2d7d0 <__adddf3+0x67c>
   2d5e0:	010007c4 	movi	r4,31
   2d5e4:	20c0da16 	blt	r4,r3,2d950 <__adddf3+0x7fc>
   2d5e8:	01000804 	movi	r4,32
   2d5ec:	20c9c83a 	sub	r4,r4,r3
   2d5f0:	4114983a 	sll	r10,r8,r4
   2d5f4:	88cad83a 	srl	r5,r17,r3
   2d5f8:	8908983a 	sll	r4,r17,r4
   2d5fc:	40c6d83a 	srl	r3,r8,r3
   2d600:	5162b03a 	or	r17,r10,r5
   2d604:	2008c03a 	cmpne	r4,r4,zero
   2d608:	8922b03a 	or	r17,r17,r4
   2d60c:	3463c83a 	sub	r17,r6,r17
   2d610:	48c7c83a 	sub	r3,r9,r3
   2d614:	344d803a 	cmpltu	r6,r6,r17
   2d618:	1991c83a 	sub	r8,r3,r6
   2d61c:	1021883a 	mov	r16,r2
   2d620:	3825883a 	mov	r18,r7
   2d624:	003f2706 	br	2d2c4 <_gp+0xffff04a4>
   2d628:	24d0b03a 	or	r8,r4,r19
   2d62c:	40001b1e 	bne	r8,zero,2d69c <__adddf3+0x548>
   2d630:	0005883a 	mov	r2,zero
   2d634:	0007883a 	mov	r3,zero
   2d638:	0021883a 	mov	r16,zero
   2d63c:	003f4d06 	br	2d374 <_gp+0xffff0554>
   2d640:	008007c4 	movi	r2,31
   2d644:	11003c16 	blt	r2,r4,2d738 <__adddf3+0x5e4>
   2d648:	00800804 	movi	r2,32
   2d64c:	1105c83a 	sub	r2,r2,r4
   2d650:	488e983a 	sll	r7,r9,r2
   2d654:	310ad83a 	srl	r5,r6,r4
   2d658:	3084983a 	sll	r2,r6,r2
   2d65c:	4912d83a 	srl	r9,r9,r4
   2d660:	394ab03a 	or	r5,r7,r5
   2d664:	1004c03a 	cmpne	r2,r2,zero
   2d668:	288ab03a 	or	r5,r5,r2
   2d66c:	003f5306 	br	2d3bc <_gp+0xffff059c>
   2d670:	4448b03a 	or	r4,r8,r17
   2d674:	20003e26 	beq	r4,zero,2d770 <__adddf3+0x61c>
   2d678:	00c6303a 	nor	r3,zero,r3
   2d67c:	18003a1e 	bne	r3,zero,2d768 <__adddf3+0x614>
   2d680:	3463c83a 	sub	r17,r6,r17
   2d684:	4a07c83a 	sub	r3,r9,r8
   2d688:	344d803a 	cmpltu	r6,r6,r17
   2d68c:	1991c83a 	sub	r8,r3,r6
   2d690:	1021883a 	mov	r16,r2
   2d694:	3825883a 	mov	r18,r7
   2d698:	003f0a06 	br	2d2c4 <_gp+0xffff04a4>
   2d69c:	2023883a 	mov	r17,r4
   2d6a0:	003f0d06 	br	2d2d8 <_gp+0xffff04b8>
   2d6a4:	0081ffc4 	movi	r2,2047
   2d6a8:	80bf3f1e 	bne	r16,r2,2d3a8 <_gp+0xffff0588>
   2d6ac:	003ec806 	br	2d1d0 <_gp+0xffff03b0>
   2d6b0:	0005883a 	mov	r2,zero
   2d6b4:	003fb106 	br	2d57c <_gp+0xffff075c>
   2d6b8:	0007883a 	mov	r3,zero
   2d6bc:	003fbc06 	br	2d5b0 <_gp+0xffff0790>
   2d6c0:	4444b03a 	or	r2,r8,r17
   2d6c4:	8000871e 	bne	r16,zero,2d8e4 <__adddf3+0x790>
   2d6c8:	1000ba26 	beq	r2,zero,2d9b4 <__adddf3+0x860>
   2d6cc:	4984b03a 	or	r2,r9,r6
   2d6d0:	103ebf26 	beq	r2,zero,2d1d0 <_gp+0xffff03b0>
   2d6d4:	8985883a 	add	r2,r17,r6
   2d6d8:	4247883a 	add	r3,r8,r9
   2d6dc:	1451803a 	cmpltu	r8,r2,r17
   2d6e0:	40d1883a 	add	r8,r8,r3
   2d6e4:	40c0202c 	andhi	r3,r8,128
   2d6e8:	1023883a 	mov	r17,r2
   2d6ec:	183f1a26 	beq	r3,zero,2d358 <_gp+0xffff0538>
   2d6f0:	00bfe034 	movhi	r2,65408
   2d6f4:	10bfffc4 	addi	r2,r2,-1
   2d6f8:	2021883a 	mov	r16,r4
   2d6fc:	4090703a 	and	r8,r8,r2
   2d700:	003eb306 	br	2d1d0 <_gp+0xffff03b0>
   2d704:	4444b03a 	or	r2,r8,r17
   2d708:	8000291e 	bne	r16,zero,2d7b0 <__adddf3+0x65c>
   2d70c:	10004b1e 	bne	r2,zero,2d83c <__adddf3+0x6e8>
   2d710:	4990b03a 	or	r8,r9,r6
   2d714:	40008b26 	beq	r8,zero,2d944 <__adddf3+0x7f0>
   2d718:	4811883a 	mov	r8,r9
   2d71c:	3023883a 	mov	r17,r6
   2d720:	3825883a 	mov	r18,r7
   2d724:	003eaa06 	br	2d1d0 <_gp+0xffff03b0>
   2d728:	1021883a 	mov	r16,r2
   2d72c:	0011883a 	mov	r8,zero
   2d730:	0005883a 	mov	r2,zero
   2d734:	003f0f06 	br	2d374 <_gp+0xffff0554>
   2d738:	217ff804 	addi	r5,r4,-32
   2d73c:	00800804 	movi	r2,32
   2d740:	494ad83a 	srl	r5,r9,r5
   2d744:	20807d26 	beq	r4,r2,2d93c <__adddf3+0x7e8>
   2d748:	00801004 	movi	r2,64
   2d74c:	1109c83a 	sub	r4,r2,r4
   2d750:	4912983a 	sll	r9,r9,r4
   2d754:	498cb03a 	or	r6,r9,r6
   2d758:	300cc03a 	cmpne	r6,r6,zero
   2d75c:	298ab03a 	or	r5,r5,r6
   2d760:	0013883a 	mov	r9,zero
   2d764:	003f1506 	br	2d3bc <_gp+0xffff059c>
   2d768:	0101ffc4 	movi	r4,2047
   2d76c:	113f9a1e 	bne	r2,r4,2d5d8 <_gp+0xffff07b8>
   2d770:	4811883a 	mov	r8,r9
   2d774:	3023883a 	mov	r17,r6
   2d778:	1021883a 	mov	r16,r2
   2d77c:	3825883a 	mov	r18,r7
   2d780:	003e9306 	br	2d1d0 <_gp+0xffff03b0>
   2d784:	8000161e 	bne	r16,zero,2d7e0 <__adddf3+0x68c>
   2d788:	444ab03a 	or	r5,r8,r17
   2d78c:	28005126 	beq	r5,zero,2d8d4 <__adddf3+0x780>
   2d790:	0108303a 	nor	r4,zero,r4
   2d794:	20004d1e 	bne	r4,zero,2d8cc <__adddf3+0x778>
   2d798:	89a3883a 	add	r17,r17,r6
   2d79c:	4253883a 	add	r9,r8,r9
   2d7a0:	898d803a 	cmpltu	r6,r17,r6
   2d7a4:	3251883a 	add	r8,r6,r9
   2d7a8:	1021883a 	mov	r16,r2
   2d7ac:	003f0806 	br	2d3d0 <_gp+0xffff05b0>
   2d7b0:	1000301e 	bne	r2,zero,2d874 <__adddf3+0x720>
   2d7b4:	4984b03a 	or	r2,r9,r6
   2d7b8:	10007126 	beq	r2,zero,2d980 <__adddf3+0x82c>
   2d7bc:	4811883a 	mov	r8,r9
   2d7c0:	3023883a 	mov	r17,r6
   2d7c4:	3825883a 	mov	r18,r7
   2d7c8:	0401ffc4 	movi	r16,2047
   2d7cc:	003e8006 	br	2d1d0 <_gp+0xffff03b0>
   2d7d0:	4462b03a 	or	r17,r8,r17
   2d7d4:	8822c03a 	cmpne	r17,r17,zero
   2d7d8:	0007883a 	mov	r3,zero
   2d7dc:	003f8b06 	br	2d60c <_gp+0xffff07ec>
   2d7e0:	0141ffc4 	movi	r5,2047
   2d7e4:	11403b26 	beq	r2,r5,2d8d4 <__adddf3+0x780>
   2d7e8:	0109c83a 	sub	r4,zero,r4
   2d7ec:	42002034 	orhi	r8,r8,128
   2d7f0:	01400e04 	movi	r5,56
   2d7f4:	29006716 	blt	r5,r4,2d994 <__adddf3+0x840>
   2d7f8:	014007c4 	movi	r5,31
   2d7fc:	29007016 	blt	r5,r4,2d9c0 <__adddf3+0x86c>
   2d800:	01400804 	movi	r5,32
   2d804:	290bc83a 	sub	r5,r5,r4
   2d808:	4154983a 	sll	r10,r8,r5
   2d80c:	890ed83a 	srl	r7,r17,r4
   2d810:	894a983a 	sll	r5,r17,r5
   2d814:	4108d83a 	srl	r4,r8,r4
   2d818:	51e2b03a 	or	r17,r10,r7
   2d81c:	280ac03a 	cmpne	r5,r5,zero
   2d820:	8962b03a 	or	r17,r17,r5
   2d824:	89a3883a 	add	r17,r17,r6
   2d828:	2253883a 	add	r9,r4,r9
   2d82c:	898d803a 	cmpltu	r6,r17,r6
   2d830:	3251883a 	add	r8,r6,r9
   2d834:	1021883a 	mov	r16,r2
   2d838:	003ee506 	br	2d3d0 <_gp+0xffff05b0>
   2d83c:	4984b03a 	or	r2,r9,r6
   2d840:	103e6326 	beq	r2,zero,2d1d0 <_gp+0xffff03b0>
   2d844:	8987c83a 	sub	r3,r17,r6
   2d848:	88c9803a 	cmpltu	r4,r17,r3
   2d84c:	4245c83a 	sub	r2,r8,r9
   2d850:	1105c83a 	sub	r2,r2,r4
   2d854:	1100202c 	andhi	r4,r2,128
   2d858:	203ebb26 	beq	r4,zero,2d348 <_gp+0xffff0528>
   2d85c:	3463c83a 	sub	r17,r6,r17
   2d860:	4a07c83a 	sub	r3,r9,r8
   2d864:	344d803a 	cmpltu	r6,r6,r17
   2d868:	1991c83a 	sub	r8,r3,r6
   2d86c:	3825883a 	mov	r18,r7
   2d870:	003e5706 	br	2d1d0 <_gp+0xffff03b0>
   2d874:	4984b03a 	or	r2,r9,r6
   2d878:	10002e26 	beq	r2,zero,2d934 <__adddf3+0x7e0>
   2d87c:	4004d0fa 	srli	r2,r8,3
   2d880:	8822d0fa 	srli	r17,r17,3
   2d884:	4010977a 	slli	r8,r8,29
   2d888:	10c0022c 	andhi	r3,r2,8
   2d88c:	4462b03a 	or	r17,r8,r17
   2d890:	18000826 	beq	r3,zero,2d8b4 <__adddf3+0x760>
   2d894:	4808d0fa 	srli	r4,r9,3
   2d898:	20c0022c 	andhi	r3,r4,8
   2d89c:	1800051e 	bne	r3,zero,2d8b4 <__adddf3+0x760>
   2d8a0:	300cd0fa 	srli	r6,r6,3
   2d8a4:	4806977a 	slli	r3,r9,29
   2d8a8:	2005883a 	mov	r2,r4
   2d8ac:	3825883a 	mov	r18,r7
   2d8b0:	19a2b03a 	or	r17,r3,r6
   2d8b4:	8810d77a 	srli	r8,r17,29
   2d8b8:	100490fa 	slli	r2,r2,3
   2d8bc:	882290fa 	slli	r17,r17,3
   2d8c0:	0401ffc4 	movi	r16,2047
   2d8c4:	4090b03a 	or	r8,r8,r2
   2d8c8:	003e4106 	br	2d1d0 <_gp+0xffff03b0>
   2d8cc:	0141ffc4 	movi	r5,2047
   2d8d0:	117fc71e 	bne	r2,r5,2d7f0 <_gp+0xffff09d0>
   2d8d4:	4811883a 	mov	r8,r9
   2d8d8:	3023883a 	mov	r17,r6
   2d8dc:	1021883a 	mov	r16,r2
   2d8e0:	003e3b06 	br	2d1d0 <_gp+0xffff03b0>
   2d8e4:	10002f26 	beq	r2,zero,2d9a4 <__adddf3+0x850>
   2d8e8:	4984b03a 	or	r2,r9,r6
   2d8ec:	10001126 	beq	r2,zero,2d934 <__adddf3+0x7e0>
   2d8f0:	4004d0fa 	srli	r2,r8,3
   2d8f4:	8822d0fa 	srli	r17,r17,3
   2d8f8:	4010977a 	slli	r8,r8,29
   2d8fc:	10c0022c 	andhi	r3,r2,8
   2d900:	4462b03a 	or	r17,r8,r17
   2d904:	183feb26 	beq	r3,zero,2d8b4 <_gp+0xffff0a94>
   2d908:	4808d0fa 	srli	r4,r9,3
   2d90c:	20c0022c 	andhi	r3,r4,8
   2d910:	183fe81e 	bne	r3,zero,2d8b4 <_gp+0xffff0a94>
   2d914:	300cd0fa 	srli	r6,r6,3
   2d918:	4806977a 	slli	r3,r9,29
   2d91c:	2005883a 	mov	r2,r4
   2d920:	19a2b03a 	or	r17,r3,r6
   2d924:	003fe306 	br	2d8b4 <_gp+0xffff0a94>
   2d928:	0011883a 	mov	r8,zero
   2d92c:	0005883a 	mov	r2,zero
   2d930:	003e3f06 	br	2d230 <_gp+0xffff0410>
   2d934:	0401ffc4 	movi	r16,2047
   2d938:	003e2506 	br	2d1d0 <_gp+0xffff03b0>
   2d93c:	0013883a 	mov	r9,zero
   2d940:	003f8406 	br	2d754 <_gp+0xffff0934>
   2d944:	0005883a 	mov	r2,zero
   2d948:	0007883a 	mov	r3,zero
   2d94c:	003e8906 	br	2d374 <_gp+0xffff0554>
   2d950:	197ff804 	addi	r5,r3,-32
   2d954:	01000804 	movi	r4,32
   2d958:	414ad83a 	srl	r5,r8,r5
   2d95c:	19002426 	beq	r3,r4,2d9f0 <__adddf3+0x89c>
   2d960:	01001004 	movi	r4,64
   2d964:	20c7c83a 	sub	r3,r4,r3
   2d968:	40c6983a 	sll	r3,r8,r3
   2d96c:	1c46b03a 	or	r3,r3,r17
   2d970:	1806c03a 	cmpne	r3,r3,zero
   2d974:	28e2b03a 	or	r17,r5,r3
   2d978:	0007883a 	mov	r3,zero
   2d97c:	003f2306 	br	2d60c <_gp+0xffff07ec>
   2d980:	0007883a 	mov	r3,zero
   2d984:	5811883a 	mov	r8,r11
   2d988:	00bfffc4 	movi	r2,-1
   2d98c:	0401ffc4 	movi	r16,2047
   2d990:	003e7806 	br	2d374 <_gp+0xffff0554>
   2d994:	4462b03a 	or	r17,r8,r17
   2d998:	8822c03a 	cmpne	r17,r17,zero
   2d99c:	0009883a 	mov	r4,zero
   2d9a0:	003fa006 	br	2d824 <_gp+0xffff0a04>
   2d9a4:	4811883a 	mov	r8,r9
   2d9a8:	3023883a 	mov	r17,r6
   2d9ac:	0401ffc4 	movi	r16,2047
   2d9b0:	003e0706 	br	2d1d0 <_gp+0xffff03b0>
   2d9b4:	4811883a 	mov	r8,r9
   2d9b8:	3023883a 	mov	r17,r6
   2d9bc:	003e0406 	br	2d1d0 <_gp+0xffff03b0>
   2d9c0:	21fff804 	addi	r7,r4,-32
   2d9c4:	01400804 	movi	r5,32
   2d9c8:	41ced83a 	srl	r7,r8,r7
   2d9cc:	21400a26 	beq	r4,r5,2d9f8 <__adddf3+0x8a4>
   2d9d0:	01401004 	movi	r5,64
   2d9d4:	2909c83a 	sub	r4,r5,r4
   2d9d8:	4108983a 	sll	r4,r8,r4
   2d9dc:	2448b03a 	or	r4,r4,r17
   2d9e0:	2008c03a 	cmpne	r4,r4,zero
   2d9e4:	3922b03a 	or	r17,r7,r4
   2d9e8:	0009883a 	mov	r4,zero
   2d9ec:	003f8d06 	br	2d824 <_gp+0xffff0a04>
   2d9f0:	0007883a 	mov	r3,zero
   2d9f4:	003fdd06 	br	2d96c <_gp+0xffff0b4c>
   2d9f8:	0009883a 	mov	r4,zero
   2d9fc:	003ff706 	br	2d9dc <_gp+0xffff0bbc>

0002da00 <__divdf3>:
   2da00:	defff204 	addi	sp,sp,-56
   2da04:	dd400915 	stw	r21,36(sp)
   2da08:	282ad53a 	srli	r21,r5,20
   2da0c:	dd000815 	stw	r20,32(sp)
   2da10:	2828d7fa 	srli	r20,r5,31
   2da14:	dc000415 	stw	r16,16(sp)
   2da18:	04000434 	movhi	r16,16
   2da1c:	df000c15 	stw	fp,48(sp)
   2da20:	843fffc4 	addi	r16,r16,-1
   2da24:	dfc00d15 	stw	ra,52(sp)
   2da28:	ddc00b15 	stw	r23,44(sp)
   2da2c:	dd800a15 	stw	r22,40(sp)
   2da30:	dcc00715 	stw	r19,28(sp)
   2da34:	dc800615 	stw	r18,24(sp)
   2da38:	dc400515 	stw	r17,20(sp)
   2da3c:	ad41ffcc 	andi	r21,r21,2047
   2da40:	2c20703a 	and	r16,r5,r16
   2da44:	a7003fcc 	andi	fp,r20,255
   2da48:	a8006126 	beq	r21,zero,2dbd0 <__divdf3+0x1d0>
   2da4c:	0081ffc4 	movi	r2,2047
   2da50:	2025883a 	mov	r18,r4
   2da54:	a8803726 	beq	r21,r2,2db34 <__divdf3+0x134>
   2da58:	80800434 	orhi	r2,r16,16
   2da5c:	100490fa 	slli	r2,r2,3
   2da60:	2020d77a 	srli	r16,r4,29
   2da64:	202490fa 	slli	r18,r4,3
   2da68:	ad7f0044 	addi	r21,r21,-1023
   2da6c:	80a0b03a 	or	r16,r16,r2
   2da70:	0027883a 	mov	r19,zero
   2da74:	0013883a 	mov	r9,zero
   2da78:	3804d53a 	srli	r2,r7,20
   2da7c:	382cd7fa 	srli	r22,r7,31
   2da80:	04400434 	movhi	r17,16
   2da84:	8c7fffc4 	addi	r17,r17,-1
   2da88:	1081ffcc 	andi	r2,r2,2047
   2da8c:	3011883a 	mov	r8,r6
   2da90:	3c62703a 	and	r17,r7,r17
   2da94:	b5c03fcc 	andi	r23,r22,255
   2da98:	10006c26 	beq	r2,zero,2dc4c <__divdf3+0x24c>
   2da9c:	00c1ffc4 	movi	r3,2047
   2daa0:	10c06426 	beq	r2,r3,2dc34 <__divdf3+0x234>
   2daa4:	88c00434 	orhi	r3,r17,16
   2daa8:	180690fa 	slli	r3,r3,3
   2daac:	3022d77a 	srli	r17,r6,29
   2dab0:	301090fa 	slli	r8,r6,3
   2dab4:	10bf0044 	addi	r2,r2,-1023
   2dab8:	88e2b03a 	or	r17,r17,r3
   2dabc:	000f883a 	mov	r7,zero
   2dac0:	a58cf03a 	xor	r6,r20,r22
   2dac4:	3cc8b03a 	or	r4,r7,r19
   2dac8:	a8abc83a 	sub	r21,r21,r2
   2dacc:	008003c4 	movi	r2,15
   2dad0:	3007883a 	mov	r3,r6
   2dad4:	34c03fcc 	andi	r19,r6,255
   2dad8:	11009036 	bltu	r2,r4,2dd1c <__divdf3+0x31c>
   2dadc:	200890ba 	slli	r4,r4,2
   2dae0:	008000f4 	movhi	r2,3
   2dae4:	10b6bd04 	addi	r2,r2,-9484
   2dae8:	2089883a 	add	r4,r4,r2
   2daec:	20800017 	ldw	r2,0(r4)
   2daf0:	1000683a 	jmp	r2
   2daf4:	0002dd1c 	xori	zero,zero,2932
   2daf8:	0002db6c 	andhi	zero,zero,2925
   2dafc:	0002dd0c 	andi	zero,zero,2932
   2db00:	0002db60 	cmpeqi	zero,zero,2925
   2db04:	0002dd0c 	andi	zero,zero,2932
   2db08:	0002dce0 	cmpeqi	zero,zero,2931
   2db0c:	0002dd0c 	andi	zero,zero,2932
   2db10:	0002db60 	cmpeqi	zero,zero,2925
   2db14:	0002db6c 	andhi	zero,zero,2925
   2db18:	0002db6c 	andhi	zero,zero,2925
   2db1c:	0002dce0 	cmpeqi	zero,zero,2931
   2db20:	0002db60 	cmpeqi	zero,zero,2925
   2db24:	0002db50 	cmplti	zero,zero,2925
   2db28:	0002db50 	cmplti	zero,zero,2925
   2db2c:	0002db50 	cmplti	zero,zero,2925
   2db30:	0002e000 	call	2e00 <__reset-0x1d200>
   2db34:	2404b03a 	or	r2,r4,r16
   2db38:	1000661e 	bne	r2,zero,2dcd4 <__divdf3+0x2d4>
   2db3c:	04c00204 	movi	r19,8
   2db40:	0021883a 	mov	r16,zero
   2db44:	0025883a 	mov	r18,zero
   2db48:	02400084 	movi	r9,2
   2db4c:	003fca06 	br	2da78 <_gp+0xffff0c58>
   2db50:	8023883a 	mov	r17,r16
   2db54:	9011883a 	mov	r8,r18
   2db58:	e02f883a 	mov	r23,fp
   2db5c:	480f883a 	mov	r7,r9
   2db60:	00800084 	movi	r2,2
   2db64:	3881311e 	bne	r7,r2,2e02c <__divdf3+0x62c>
   2db68:	b827883a 	mov	r19,r23
   2db6c:	98c0004c 	andi	r3,r19,1
   2db70:	0081ffc4 	movi	r2,2047
   2db74:	000b883a 	mov	r5,zero
   2db78:	0025883a 	mov	r18,zero
   2db7c:	1004953a 	slli	r2,r2,20
   2db80:	18c03fcc 	andi	r3,r3,255
   2db84:	04400434 	movhi	r17,16
   2db88:	8c7fffc4 	addi	r17,r17,-1
   2db8c:	180697fa 	slli	r3,r3,31
   2db90:	2c4a703a 	and	r5,r5,r17
   2db94:	288ab03a 	or	r5,r5,r2
   2db98:	28c6b03a 	or	r3,r5,r3
   2db9c:	9005883a 	mov	r2,r18
   2dba0:	dfc00d17 	ldw	ra,52(sp)
   2dba4:	df000c17 	ldw	fp,48(sp)
   2dba8:	ddc00b17 	ldw	r23,44(sp)
   2dbac:	dd800a17 	ldw	r22,40(sp)
   2dbb0:	dd400917 	ldw	r21,36(sp)
   2dbb4:	dd000817 	ldw	r20,32(sp)
   2dbb8:	dcc00717 	ldw	r19,28(sp)
   2dbbc:	dc800617 	ldw	r18,24(sp)
   2dbc0:	dc400517 	ldw	r17,20(sp)
   2dbc4:	dc000417 	ldw	r16,16(sp)
   2dbc8:	dec00e04 	addi	sp,sp,56
   2dbcc:	f800283a 	ret
   2dbd0:	2404b03a 	or	r2,r4,r16
   2dbd4:	2027883a 	mov	r19,r4
   2dbd8:	10003926 	beq	r2,zero,2dcc0 <__divdf3+0x2c0>
   2dbdc:	80012e26 	beq	r16,zero,2e098 <__divdf3+0x698>
   2dbe0:	8009883a 	mov	r4,r16
   2dbe4:	d9800315 	stw	r6,12(sp)
   2dbe8:	d9c00215 	stw	r7,8(sp)
   2dbec:	002f7580 	call	2f758 <__clzsi2>
   2dbf0:	d9800317 	ldw	r6,12(sp)
   2dbf4:	d9c00217 	ldw	r7,8(sp)
   2dbf8:	113ffd44 	addi	r4,r2,-11
   2dbfc:	00c00704 	movi	r3,28
   2dc00:	19012116 	blt	r3,r4,2e088 <__divdf3+0x688>
   2dc04:	00c00744 	movi	r3,29
   2dc08:	147ffe04 	addi	r17,r2,-8
   2dc0c:	1907c83a 	sub	r3,r3,r4
   2dc10:	8460983a 	sll	r16,r16,r17
   2dc14:	98c6d83a 	srl	r3,r19,r3
   2dc18:	9c64983a 	sll	r18,r19,r17
   2dc1c:	1c20b03a 	or	r16,r3,r16
   2dc20:	1080fcc4 	addi	r2,r2,1011
   2dc24:	00abc83a 	sub	r21,zero,r2
   2dc28:	0027883a 	mov	r19,zero
   2dc2c:	0013883a 	mov	r9,zero
   2dc30:	003f9106 	br	2da78 <_gp+0xffff0c58>
   2dc34:	3446b03a 	or	r3,r6,r17
   2dc38:	18001f1e 	bne	r3,zero,2dcb8 <__divdf3+0x2b8>
   2dc3c:	0023883a 	mov	r17,zero
   2dc40:	0011883a 	mov	r8,zero
   2dc44:	01c00084 	movi	r7,2
   2dc48:	003f9d06 	br	2dac0 <_gp+0xffff0ca0>
   2dc4c:	3446b03a 	or	r3,r6,r17
   2dc50:	18001526 	beq	r3,zero,2dca8 <__divdf3+0x2a8>
   2dc54:	88011b26 	beq	r17,zero,2e0c4 <__divdf3+0x6c4>
   2dc58:	8809883a 	mov	r4,r17
   2dc5c:	d9800315 	stw	r6,12(sp)
   2dc60:	da400115 	stw	r9,4(sp)
   2dc64:	002f7580 	call	2f758 <__clzsi2>
   2dc68:	d9800317 	ldw	r6,12(sp)
   2dc6c:	da400117 	ldw	r9,4(sp)
   2dc70:	113ffd44 	addi	r4,r2,-11
   2dc74:	00c00704 	movi	r3,28
   2dc78:	19010e16 	blt	r3,r4,2e0b4 <__divdf3+0x6b4>
   2dc7c:	00c00744 	movi	r3,29
   2dc80:	123ffe04 	addi	r8,r2,-8
   2dc84:	1907c83a 	sub	r3,r3,r4
   2dc88:	8a22983a 	sll	r17,r17,r8
   2dc8c:	30c6d83a 	srl	r3,r6,r3
   2dc90:	3210983a 	sll	r8,r6,r8
   2dc94:	1c62b03a 	or	r17,r3,r17
   2dc98:	1080fcc4 	addi	r2,r2,1011
   2dc9c:	0085c83a 	sub	r2,zero,r2
   2dca0:	000f883a 	mov	r7,zero
   2dca4:	003f8606 	br	2dac0 <_gp+0xffff0ca0>
   2dca8:	0023883a 	mov	r17,zero
   2dcac:	0011883a 	mov	r8,zero
   2dcb0:	01c00044 	movi	r7,1
   2dcb4:	003f8206 	br	2dac0 <_gp+0xffff0ca0>
   2dcb8:	01c000c4 	movi	r7,3
   2dcbc:	003f8006 	br	2dac0 <_gp+0xffff0ca0>
   2dcc0:	04c00104 	movi	r19,4
   2dcc4:	0021883a 	mov	r16,zero
   2dcc8:	0025883a 	mov	r18,zero
   2dccc:	02400044 	movi	r9,1
   2dcd0:	003f6906 	br	2da78 <_gp+0xffff0c58>
   2dcd4:	04c00304 	movi	r19,12
   2dcd8:	024000c4 	movi	r9,3
   2dcdc:	003f6606 	br	2da78 <_gp+0xffff0c58>
   2dce0:	01400434 	movhi	r5,16
   2dce4:	0007883a 	mov	r3,zero
   2dce8:	297fffc4 	addi	r5,r5,-1
   2dcec:	04bfffc4 	movi	r18,-1
   2dcf0:	0081ffc4 	movi	r2,2047
   2dcf4:	003fa106 	br	2db7c <_gp+0xffff0d5c>
   2dcf8:	00c00044 	movi	r3,1
   2dcfc:	1887c83a 	sub	r3,r3,r2
   2dd00:	01000e04 	movi	r4,56
   2dd04:	20c1210e 	bge	r4,r3,2e18c <__divdf3+0x78c>
   2dd08:	98c0004c 	andi	r3,r19,1
   2dd0c:	0005883a 	mov	r2,zero
   2dd10:	000b883a 	mov	r5,zero
   2dd14:	0025883a 	mov	r18,zero
   2dd18:	003f9806 	br	2db7c <_gp+0xffff0d5c>
   2dd1c:	8c00fd36 	bltu	r17,r16,2e114 <__divdf3+0x714>
   2dd20:	8440fb26 	beq	r16,r17,2e110 <__divdf3+0x710>
   2dd24:	8007883a 	mov	r3,r16
   2dd28:	ad7fffc4 	addi	r21,r21,-1
   2dd2c:	0021883a 	mov	r16,zero
   2dd30:	4004d63a 	srli	r2,r8,24
   2dd34:	8822923a 	slli	r17,r17,8
   2dd38:	1809883a 	mov	r4,r3
   2dd3c:	402c923a 	slli	r22,r8,8
   2dd40:	88b8b03a 	or	fp,r17,r2
   2dd44:	e028d43a 	srli	r20,fp,16
   2dd48:	d8c00015 	stw	r3,0(sp)
   2dd4c:	e5ffffcc 	andi	r23,fp,65535
   2dd50:	a00b883a 	mov	r5,r20
   2dd54:	002d0980 	call	2d098 <__udivsi3>
   2dd58:	d8c00017 	ldw	r3,0(sp)
   2dd5c:	a00b883a 	mov	r5,r20
   2dd60:	d8800315 	stw	r2,12(sp)
   2dd64:	1809883a 	mov	r4,r3
   2dd68:	002d0fc0 	call	2d0fc <__umodsi3>
   2dd6c:	d9800317 	ldw	r6,12(sp)
   2dd70:	1006943a 	slli	r3,r2,16
   2dd74:	9004d43a 	srli	r2,r18,16
   2dd78:	b9a3383a 	mul	r17,r23,r6
   2dd7c:	10c4b03a 	or	r2,r2,r3
   2dd80:	1440062e 	bgeu	r2,r17,2dd9c <__divdf3+0x39c>
   2dd84:	1705883a 	add	r2,r2,fp
   2dd88:	30ffffc4 	addi	r3,r6,-1
   2dd8c:	1700ee36 	bltu	r2,fp,2e148 <__divdf3+0x748>
   2dd90:	1440ed2e 	bgeu	r2,r17,2e148 <__divdf3+0x748>
   2dd94:	31bfff84 	addi	r6,r6,-2
   2dd98:	1705883a 	add	r2,r2,fp
   2dd9c:	1463c83a 	sub	r17,r2,r17
   2dda0:	a00b883a 	mov	r5,r20
   2dda4:	8809883a 	mov	r4,r17
   2dda8:	d9800315 	stw	r6,12(sp)
   2ddac:	002d0980 	call	2d098 <__udivsi3>
   2ddb0:	a00b883a 	mov	r5,r20
   2ddb4:	8809883a 	mov	r4,r17
   2ddb8:	d8800215 	stw	r2,8(sp)
   2ddbc:	002d0fc0 	call	2d0fc <__umodsi3>
   2ddc0:	d9c00217 	ldw	r7,8(sp)
   2ddc4:	1004943a 	slli	r2,r2,16
   2ddc8:	94bfffcc 	andi	r18,r18,65535
   2ddcc:	b9d1383a 	mul	r8,r23,r7
   2ddd0:	90a4b03a 	or	r18,r18,r2
   2ddd4:	d9800317 	ldw	r6,12(sp)
   2ddd8:	9200062e 	bgeu	r18,r8,2ddf4 <__divdf3+0x3f4>
   2dddc:	9725883a 	add	r18,r18,fp
   2dde0:	38bfffc4 	addi	r2,r7,-1
   2dde4:	9700d636 	bltu	r18,fp,2e140 <__divdf3+0x740>
   2dde8:	9200d52e 	bgeu	r18,r8,2e140 <__divdf3+0x740>
   2ddec:	39ffff84 	addi	r7,r7,-2
   2ddf0:	9725883a 	add	r18,r18,fp
   2ddf4:	3004943a 	slli	r2,r6,16
   2ddf8:	b012d43a 	srli	r9,r22,16
   2ddfc:	b1bfffcc 	andi	r6,r22,65535
   2de00:	11e2b03a 	or	r17,r2,r7
   2de04:	8806d43a 	srli	r3,r17,16
   2de08:	893fffcc 	andi	r4,r17,65535
   2de0c:	218b383a 	mul	r5,r4,r6
   2de10:	30c5383a 	mul	r2,r6,r3
   2de14:	2249383a 	mul	r4,r4,r9
   2de18:	280ed43a 	srli	r7,r5,16
   2de1c:	9225c83a 	sub	r18,r18,r8
   2de20:	2089883a 	add	r4,r4,r2
   2de24:	3909883a 	add	r4,r7,r4
   2de28:	1a47383a 	mul	r3,r3,r9
   2de2c:	2080022e 	bgeu	r4,r2,2de38 <__divdf3+0x438>
   2de30:	00800074 	movhi	r2,1
   2de34:	1887883a 	add	r3,r3,r2
   2de38:	2004d43a 	srli	r2,r4,16
   2de3c:	2008943a 	slli	r4,r4,16
   2de40:	297fffcc 	andi	r5,r5,65535
   2de44:	10c7883a 	add	r3,r2,r3
   2de48:	2149883a 	add	r4,r4,r5
   2de4c:	90c0a536 	bltu	r18,r3,2e0e4 <__divdf3+0x6e4>
   2de50:	90c0bf26 	beq	r18,r3,2e150 <__divdf3+0x750>
   2de54:	90c7c83a 	sub	r3,r18,r3
   2de58:	810fc83a 	sub	r7,r16,r4
   2de5c:	81e5803a 	cmpltu	r18,r16,r7
   2de60:	1ca5c83a 	sub	r18,r3,r18
   2de64:	e480c126 	beq	fp,r18,2e16c <__divdf3+0x76c>
   2de68:	a00b883a 	mov	r5,r20
   2de6c:	9009883a 	mov	r4,r18
   2de70:	d9800315 	stw	r6,12(sp)
   2de74:	d9c00215 	stw	r7,8(sp)
   2de78:	da400115 	stw	r9,4(sp)
   2de7c:	002d0980 	call	2d098 <__udivsi3>
   2de80:	a00b883a 	mov	r5,r20
   2de84:	9009883a 	mov	r4,r18
   2de88:	d8800015 	stw	r2,0(sp)
   2de8c:	002d0fc0 	call	2d0fc <__umodsi3>
   2de90:	d9c00217 	ldw	r7,8(sp)
   2de94:	da000017 	ldw	r8,0(sp)
   2de98:	1006943a 	slli	r3,r2,16
   2de9c:	3804d43a 	srli	r2,r7,16
   2dea0:	ba21383a 	mul	r16,r23,r8
   2dea4:	d9800317 	ldw	r6,12(sp)
   2dea8:	10c4b03a 	or	r2,r2,r3
   2deac:	da400117 	ldw	r9,4(sp)
   2deb0:	1400062e 	bgeu	r2,r16,2decc <__divdf3+0x4cc>
   2deb4:	1705883a 	add	r2,r2,fp
   2deb8:	40ffffc4 	addi	r3,r8,-1
   2debc:	1700ad36 	bltu	r2,fp,2e174 <__divdf3+0x774>
   2dec0:	1400ac2e 	bgeu	r2,r16,2e174 <__divdf3+0x774>
   2dec4:	423fff84 	addi	r8,r8,-2
   2dec8:	1705883a 	add	r2,r2,fp
   2decc:	1421c83a 	sub	r16,r2,r16
   2ded0:	a00b883a 	mov	r5,r20
   2ded4:	8009883a 	mov	r4,r16
   2ded8:	d9800315 	stw	r6,12(sp)
   2dedc:	d9c00215 	stw	r7,8(sp)
   2dee0:	da000015 	stw	r8,0(sp)
   2dee4:	da400115 	stw	r9,4(sp)
   2dee8:	002d0980 	call	2d098 <__udivsi3>
   2deec:	8009883a 	mov	r4,r16
   2def0:	a00b883a 	mov	r5,r20
   2def4:	1025883a 	mov	r18,r2
   2def8:	002d0fc0 	call	2d0fc <__umodsi3>
   2defc:	d9c00217 	ldw	r7,8(sp)
   2df00:	1004943a 	slli	r2,r2,16
   2df04:	bcaf383a 	mul	r23,r23,r18
   2df08:	393fffcc 	andi	r4,r7,65535
   2df0c:	2088b03a 	or	r4,r4,r2
   2df10:	d9800317 	ldw	r6,12(sp)
   2df14:	da000017 	ldw	r8,0(sp)
   2df18:	da400117 	ldw	r9,4(sp)
   2df1c:	25c0062e 	bgeu	r4,r23,2df38 <__divdf3+0x538>
   2df20:	2709883a 	add	r4,r4,fp
   2df24:	90bfffc4 	addi	r2,r18,-1
   2df28:	27009436 	bltu	r4,fp,2e17c <__divdf3+0x77c>
   2df2c:	25c0932e 	bgeu	r4,r23,2e17c <__divdf3+0x77c>
   2df30:	94bfff84 	addi	r18,r18,-2
   2df34:	2709883a 	add	r4,r4,fp
   2df38:	4004943a 	slli	r2,r8,16
   2df3c:	25efc83a 	sub	r23,r4,r23
   2df40:	1490b03a 	or	r8,r2,r18
   2df44:	4008d43a 	srli	r4,r8,16
   2df48:	40ffffcc 	andi	r3,r8,65535
   2df4c:	30c5383a 	mul	r2,r6,r3
   2df50:	1a47383a 	mul	r3,r3,r9
   2df54:	310d383a 	mul	r6,r6,r4
   2df58:	100ad43a 	srli	r5,r2,16
   2df5c:	4913383a 	mul	r9,r9,r4
   2df60:	1987883a 	add	r3,r3,r6
   2df64:	28c7883a 	add	r3,r5,r3
   2df68:	1980022e 	bgeu	r3,r6,2df74 <__divdf3+0x574>
   2df6c:	01000074 	movhi	r4,1
   2df70:	4913883a 	add	r9,r9,r4
   2df74:	1808d43a 	srli	r4,r3,16
   2df78:	1806943a 	slli	r3,r3,16
   2df7c:	10bfffcc 	andi	r2,r2,65535
   2df80:	2253883a 	add	r9,r4,r9
   2df84:	1887883a 	add	r3,r3,r2
   2df88:	ba403836 	bltu	r23,r9,2e06c <__divdf3+0x66c>
   2df8c:	ba403626 	beq	r23,r9,2e068 <__divdf3+0x668>
   2df90:	42000054 	ori	r8,r8,1
   2df94:	a880ffc4 	addi	r2,r21,1023
   2df98:	00bf570e 	bge	zero,r2,2dcf8 <_gp+0xffff0ed8>
   2df9c:	40c001cc 	andi	r3,r8,7
   2dfa0:	18000726 	beq	r3,zero,2dfc0 <__divdf3+0x5c0>
   2dfa4:	40c003cc 	andi	r3,r8,15
   2dfa8:	01000104 	movi	r4,4
   2dfac:	19000426 	beq	r3,r4,2dfc0 <__divdf3+0x5c0>
   2dfb0:	4107883a 	add	r3,r8,r4
   2dfb4:	1a11803a 	cmpltu	r8,r3,r8
   2dfb8:	8a23883a 	add	r17,r17,r8
   2dfbc:	1811883a 	mov	r8,r3
   2dfc0:	88c0402c 	andhi	r3,r17,256
   2dfc4:	18000426 	beq	r3,zero,2dfd8 <__divdf3+0x5d8>
   2dfc8:	00ffc034 	movhi	r3,65280
   2dfcc:	18ffffc4 	addi	r3,r3,-1
   2dfd0:	a8810004 	addi	r2,r21,1024
   2dfd4:	88e2703a 	and	r17,r17,r3
   2dfd8:	00c1ff84 	movi	r3,2046
   2dfdc:	18bee316 	blt	r3,r2,2db6c <_gp+0xffff0d4c>
   2dfe0:	8824977a 	slli	r18,r17,29
   2dfe4:	4010d0fa 	srli	r8,r8,3
   2dfe8:	8822927a 	slli	r17,r17,9
   2dfec:	1081ffcc 	andi	r2,r2,2047
   2dff0:	9224b03a 	or	r18,r18,r8
   2dff4:	880ad33a 	srli	r5,r17,12
   2dff8:	98c0004c 	andi	r3,r19,1
   2dffc:	003edf06 	br	2db7c <_gp+0xffff0d5c>
   2e000:	8080022c 	andhi	r2,r16,8
   2e004:	10001226 	beq	r2,zero,2e050 <__divdf3+0x650>
   2e008:	8880022c 	andhi	r2,r17,8
   2e00c:	1000101e 	bne	r2,zero,2e050 <__divdf3+0x650>
   2e010:	00800434 	movhi	r2,16
   2e014:	89400234 	orhi	r5,r17,8
   2e018:	10bfffc4 	addi	r2,r2,-1
   2e01c:	b007883a 	mov	r3,r22
   2e020:	288a703a 	and	r5,r5,r2
   2e024:	4025883a 	mov	r18,r8
   2e028:	003f3106 	br	2dcf0 <_gp+0xffff0ed0>
   2e02c:	008000c4 	movi	r2,3
   2e030:	3880a626 	beq	r7,r2,2e2cc <__divdf3+0x8cc>
   2e034:	00800044 	movi	r2,1
   2e038:	3880521e 	bne	r7,r2,2e184 <__divdf3+0x784>
   2e03c:	b807883a 	mov	r3,r23
   2e040:	0005883a 	mov	r2,zero
   2e044:	000b883a 	mov	r5,zero
   2e048:	0025883a 	mov	r18,zero
   2e04c:	003ecb06 	br	2db7c <_gp+0xffff0d5c>
   2e050:	00800434 	movhi	r2,16
   2e054:	81400234 	orhi	r5,r16,8
   2e058:	10bfffc4 	addi	r2,r2,-1
   2e05c:	a007883a 	mov	r3,r20
   2e060:	288a703a 	and	r5,r5,r2
   2e064:	003f2206 	br	2dcf0 <_gp+0xffff0ed0>
   2e068:	183fca26 	beq	r3,zero,2df94 <_gp+0xffff1174>
   2e06c:	e5ef883a 	add	r23,fp,r23
   2e070:	40bfffc4 	addi	r2,r8,-1
   2e074:	bf00392e 	bgeu	r23,fp,2e15c <__divdf3+0x75c>
   2e078:	1011883a 	mov	r8,r2
   2e07c:	ba7fc41e 	bne	r23,r9,2df90 <_gp+0xffff1170>
   2e080:	b0ffc31e 	bne	r22,r3,2df90 <_gp+0xffff1170>
   2e084:	003fc306 	br	2df94 <_gp+0xffff1174>
   2e088:	143ff604 	addi	r16,r2,-40
   2e08c:	9c20983a 	sll	r16,r19,r16
   2e090:	0025883a 	mov	r18,zero
   2e094:	003ee206 	br	2dc20 <_gp+0xffff0e00>
   2e098:	d9800315 	stw	r6,12(sp)
   2e09c:	d9c00215 	stw	r7,8(sp)
   2e0a0:	002f7580 	call	2f758 <__clzsi2>
   2e0a4:	10800804 	addi	r2,r2,32
   2e0a8:	d9c00217 	ldw	r7,8(sp)
   2e0ac:	d9800317 	ldw	r6,12(sp)
   2e0b0:	003ed106 	br	2dbf8 <_gp+0xffff0dd8>
   2e0b4:	147ff604 	addi	r17,r2,-40
   2e0b8:	3462983a 	sll	r17,r6,r17
   2e0bc:	0011883a 	mov	r8,zero
   2e0c0:	003ef506 	br	2dc98 <_gp+0xffff0e78>
   2e0c4:	3009883a 	mov	r4,r6
   2e0c8:	d9800315 	stw	r6,12(sp)
   2e0cc:	da400115 	stw	r9,4(sp)
   2e0d0:	002f7580 	call	2f758 <__clzsi2>
   2e0d4:	10800804 	addi	r2,r2,32
   2e0d8:	da400117 	ldw	r9,4(sp)
   2e0dc:	d9800317 	ldw	r6,12(sp)
   2e0e0:	003ee306 	br	2dc70 <_gp+0xffff0e50>
   2e0e4:	85a1883a 	add	r16,r16,r22
   2e0e8:	8585803a 	cmpltu	r2,r16,r22
   2e0ec:	1705883a 	add	r2,r2,fp
   2e0f0:	14a5883a 	add	r18,r2,r18
   2e0f4:	88bfffc4 	addi	r2,r17,-1
   2e0f8:	e4800c2e 	bgeu	fp,r18,2e12c <__divdf3+0x72c>
   2e0fc:	90c03e36 	bltu	r18,r3,2e1f8 <__divdf3+0x7f8>
   2e100:	1c806926 	beq	r3,r18,2e2a8 <__divdf3+0x8a8>
   2e104:	90c7c83a 	sub	r3,r18,r3
   2e108:	1023883a 	mov	r17,r2
   2e10c:	003f5206 	br	2de58 <_gp+0xffff1038>
   2e110:	923f0436 	bltu	r18,r8,2dd24 <_gp+0xffff0f04>
   2e114:	800897fa 	slli	r4,r16,31
   2e118:	9004d07a 	srli	r2,r18,1
   2e11c:	8006d07a 	srli	r3,r16,1
   2e120:	902097fa 	slli	r16,r18,31
   2e124:	20a4b03a 	or	r18,r4,r2
   2e128:	003f0106 	br	2dd30 <_gp+0xffff0f10>
   2e12c:	e4bff51e 	bne	fp,r18,2e104 <_gp+0xffff12e4>
   2e130:	85bff22e 	bgeu	r16,r22,2e0fc <_gp+0xffff12dc>
   2e134:	e0c7c83a 	sub	r3,fp,r3
   2e138:	1023883a 	mov	r17,r2
   2e13c:	003f4606 	br	2de58 <_gp+0xffff1038>
   2e140:	100f883a 	mov	r7,r2
   2e144:	003f2b06 	br	2ddf4 <_gp+0xffff0fd4>
   2e148:	180d883a 	mov	r6,r3
   2e14c:	003f1306 	br	2dd9c <_gp+0xffff0f7c>
   2e150:	813fe436 	bltu	r16,r4,2e0e4 <_gp+0xffff12c4>
   2e154:	0007883a 	mov	r3,zero
   2e158:	003f3f06 	br	2de58 <_gp+0xffff1038>
   2e15c:	ba402c36 	bltu	r23,r9,2e210 <__divdf3+0x810>
   2e160:	4dc05426 	beq	r9,r23,2e2b4 <__divdf3+0x8b4>
   2e164:	1011883a 	mov	r8,r2
   2e168:	003f8906 	br	2df90 <_gp+0xffff1170>
   2e16c:	023fffc4 	movi	r8,-1
   2e170:	003f8806 	br	2df94 <_gp+0xffff1174>
   2e174:	1811883a 	mov	r8,r3
   2e178:	003f5406 	br	2decc <_gp+0xffff10ac>
   2e17c:	1025883a 	mov	r18,r2
   2e180:	003f6d06 	br	2df38 <_gp+0xffff1118>
   2e184:	b827883a 	mov	r19,r23
   2e188:	003f8206 	br	2df94 <_gp+0xffff1174>
   2e18c:	010007c4 	movi	r4,31
   2e190:	20c02616 	blt	r4,r3,2e22c <__divdf3+0x82c>
   2e194:	00800804 	movi	r2,32
   2e198:	10c5c83a 	sub	r2,r2,r3
   2e19c:	888a983a 	sll	r5,r17,r2
   2e1a0:	40c8d83a 	srl	r4,r8,r3
   2e1a4:	4084983a 	sll	r2,r8,r2
   2e1a8:	88e2d83a 	srl	r17,r17,r3
   2e1ac:	2906b03a 	or	r3,r5,r4
   2e1b0:	1004c03a 	cmpne	r2,r2,zero
   2e1b4:	1886b03a 	or	r3,r3,r2
   2e1b8:	188001cc 	andi	r2,r3,7
   2e1bc:	10000726 	beq	r2,zero,2e1dc <__divdf3+0x7dc>
   2e1c0:	188003cc 	andi	r2,r3,15
   2e1c4:	01000104 	movi	r4,4
   2e1c8:	11000426 	beq	r2,r4,2e1dc <__divdf3+0x7dc>
   2e1cc:	1805883a 	mov	r2,r3
   2e1d0:	10c00104 	addi	r3,r2,4
   2e1d4:	1885803a 	cmpltu	r2,r3,r2
   2e1d8:	88a3883a 	add	r17,r17,r2
   2e1dc:	8880202c 	andhi	r2,r17,128
   2e1e0:	10002726 	beq	r2,zero,2e280 <__divdf3+0x880>
   2e1e4:	98c0004c 	andi	r3,r19,1
   2e1e8:	00800044 	movi	r2,1
   2e1ec:	000b883a 	mov	r5,zero
   2e1f0:	0025883a 	mov	r18,zero
   2e1f4:	003e6106 	br	2db7c <_gp+0xffff0d5c>
   2e1f8:	85a1883a 	add	r16,r16,r22
   2e1fc:	8585803a 	cmpltu	r2,r16,r22
   2e200:	1705883a 	add	r2,r2,fp
   2e204:	14a5883a 	add	r18,r2,r18
   2e208:	8c7fff84 	addi	r17,r17,-2
   2e20c:	003f1106 	br	2de54 <_gp+0xffff1034>
   2e210:	b589883a 	add	r4,r22,r22
   2e214:	25ad803a 	cmpltu	r22,r4,r22
   2e218:	b739883a 	add	fp,r22,fp
   2e21c:	40bfff84 	addi	r2,r8,-2
   2e220:	bf2f883a 	add	r23,r23,fp
   2e224:	202d883a 	mov	r22,r4
   2e228:	003f9306 	br	2e078 <_gp+0xffff1258>
   2e22c:	013ff844 	movi	r4,-31
   2e230:	2085c83a 	sub	r2,r4,r2
   2e234:	8888d83a 	srl	r4,r17,r2
   2e238:	00800804 	movi	r2,32
   2e23c:	18802126 	beq	r3,r2,2e2c4 <__divdf3+0x8c4>
   2e240:	00801004 	movi	r2,64
   2e244:	10c5c83a 	sub	r2,r2,r3
   2e248:	8884983a 	sll	r2,r17,r2
   2e24c:	1204b03a 	or	r2,r2,r8
   2e250:	1004c03a 	cmpne	r2,r2,zero
   2e254:	2084b03a 	or	r2,r4,r2
   2e258:	144001cc 	andi	r17,r2,7
   2e25c:	88000d1e 	bne	r17,zero,2e294 <__divdf3+0x894>
   2e260:	000b883a 	mov	r5,zero
   2e264:	1024d0fa 	srli	r18,r2,3
   2e268:	98c0004c 	andi	r3,r19,1
   2e26c:	0005883a 	mov	r2,zero
   2e270:	9464b03a 	or	r18,r18,r17
   2e274:	003e4106 	br	2db7c <_gp+0xffff0d5c>
   2e278:	1007883a 	mov	r3,r2
   2e27c:	0023883a 	mov	r17,zero
   2e280:	880a927a 	slli	r5,r17,9
   2e284:	1805883a 	mov	r2,r3
   2e288:	8822977a 	slli	r17,r17,29
   2e28c:	280ad33a 	srli	r5,r5,12
   2e290:	003ff406 	br	2e264 <_gp+0xffff1444>
   2e294:	10c003cc 	andi	r3,r2,15
   2e298:	01000104 	movi	r4,4
   2e29c:	193ff626 	beq	r3,r4,2e278 <_gp+0xffff1458>
   2e2a0:	0023883a 	mov	r17,zero
   2e2a4:	003fca06 	br	2e1d0 <_gp+0xffff13b0>
   2e2a8:	813fd336 	bltu	r16,r4,2e1f8 <_gp+0xffff13d8>
   2e2ac:	1023883a 	mov	r17,r2
   2e2b0:	003fa806 	br	2e154 <_gp+0xffff1334>
   2e2b4:	b0ffd636 	bltu	r22,r3,2e210 <_gp+0xffff13f0>
   2e2b8:	1011883a 	mov	r8,r2
   2e2bc:	b0ff341e 	bne	r22,r3,2df90 <_gp+0xffff1170>
   2e2c0:	003f3406 	br	2df94 <_gp+0xffff1174>
   2e2c4:	0005883a 	mov	r2,zero
   2e2c8:	003fe006 	br	2e24c <_gp+0xffff142c>
   2e2cc:	00800434 	movhi	r2,16
   2e2d0:	89400234 	orhi	r5,r17,8
   2e2d4:	10bfffc4 	addi	r2,r2,-1
   2e2d8:	b807883a 	mov	r3,r23
   2e2dc:	288a703a 	and	r5,r5,r2
   2e2e0:	4025883a 	mov	r18,r8
   2e2e4:	003e8206 	br	2dcf0 <_gp+0xffff0ed0>

0002e2e8 <__eqdf2>:
   2e2e8:	2804d53a 	srli	r2,r5,20
   2e2ec:	3806d53a 	srli	r3,r7,20
   2e2f0:	02000434 	movhi	r8,16
   2e2f4:	423fffc4 	addi	r8,r8,-1
   2e2f8:	1081ffcc 	andi	r2,r2,2047
   2e2fc:	0281ffc4 	movi	r10,2047
   2e300:	2a12703a 	and	r9,r5,r8
   2e304:	18c1ffcc 	andi	r3,r3,2047
   2e308:	3a10703a 	and	r8,r7,r8
   2e30c:	280ad7fa 	srli	r5,r5,31
   2e310:	380ed7fa 	srli	r7,r7,31
   2e314:	12801026 	beq	r2,r10,2e358 <__eqdf2+0x70>
   2e318:	0281ffc4 	movi	r10,2047
   2e31c:	1a800a26 	beq	r3,r10,2e348 <__eqdf2+0x60>
   2e320:	10c00226 	beq	r2,r3,2e32c <__eqdf2+0x44>
   2e324:	00800044 	movi	r2,1
   2e328:	f800283a 	ret
   2e32c:	4a3ffd1e 	bne	r9,r8,2e324 <_gp+0xffff1504>
   2e330:	21bffc1e 	bne	r4,r6,2e324 <_gp+0xffff1504>
   2e334:	29c00c26 	beq	r5,r7,2e368 <__eqdf2+0x80>
   2e338:	103ffa1e 	bne	r2,zero,2e324 <_gp+0xffff1504>
   2e33c:	2244b03a 	or	r2,r4,r9
   2e340:	1004c03a 	cmpne	r2,r2,zero
   2e344:	f800283a 	ret
   2e348:	3214b03a 	or	r10,r6,r8
   2e34c:	503ff426 	beq	r10,zero,2e320 <_gp+0xffff1500>
   2e350:	00800044 	movi	r2,1
   2e354:	f800283a 	ret
   2e358:	2254b03a 	or	r10,r4,r9
   2e35c:	503fee26 	beq	r10,zero,2e318 <_gp+0xffff14f8>
   2e360:	00800044 	movi	r2,1
   2e364:	f800283a 	ret
   2e368:	0005883a 	mov	r2,zero
   2e36c:	f800283a 	ret

0002e370 <__gedf2>:
   2e370:	2804d53a 	srli	r2,r5,20
   2e374:	3806d53a 	srli	r3,r7,20
   2e378:	02000434 	movhi	r8,16
   2e37c:	423fffc4 	addi	r8,r8,-1
   2e380:	1081ffcc 	andi	r2,r2,2047
   2e384:	0241ffc4 	movi	r9,2047
   2e388:	2a14703a 	and	r10,r5,r8
   2e38c:	18c1ffcc 	andi	r3,r3,2047
   2e390:	3a10703a 	and	r8,r7,r8
   2e394:	280ad7fa 	srli	r5,r5,31
   2e398:	380ed7fa 	srli	r7,r7,31
   2e39c:	12401d26 	beq	r2,r9,2e414 <__gedf2+0xa4>
   2e3a0:	0241ffc4 	movi	r9,2047
   2e3a4:	1a401226 	beq	r3,r9,2e3f0 <__gedf2+0x80>
   2e3a8:	1000081e 	bne	r2,zero,2e3cc <__gedf2+0x5c>
   2e3ac:	2296b03a 	or	r11,r4,r10
   2e3b0:	5813003a 	cmpeq	r9,r11,zero
   2e3b4:	1800091e 	bne	r3,zero,2e3dc <__gedf2+0x6c>
   2e3b8:	3218b03a 	or	r12,r6,r8
   2e3bc:	6000071e 	bne	r12,zero,2e3dc <__gedf2+0x6c>
   2e3c0:	0005883a 	mov	r2,zero
   2e3c4:	5800101e 	bne	r11,zero,2e408 <__gedf2+0x98>
   2e3c8:	f800283a 	ret
   2e3cc:	18000c1e 	bne	r3,zero,2e400 <__gedf2+0x90>
   2e3d0:	3212b03a 	or	r9,r6,r8
   2e3d4:	48000c26 	beq	r9,zero,2e408 <__gedf2+0x98>
   2e3d8:	0013883a 	mov	r9,zero
   2e3dc:	39c03fcc 	andi	r7,r7,255
   2e3e0:	48000826 	beq	r9,zero,2e404 <__gedf2+0x94>
   2e3e4:	38000926 	beq	r7,zero,2e40c <__gedf2+0x9c>
   2e3e8:	00800044 	movi	r2,1
   2e3ec:	f800283a 	ret
   2e3f0:	3212b03a 	or	r9,r6,r8
   2e3f4:	483fec26 	beq	r9,zero,2e3a8 <_gp+0xffff1588>
   2e3f8:	00bfff84 	movi	r2,-2
   2e3fc:	f800283a 	ret
   2e400:	39c03fcc 	andi	r7,r7,255
   2e404:	29c00626 	beq	r5,r7,2e420 <__gedf2+0xb0>
   2e408:	283ff726 	beq	r5,zero,2e3e8 <_gp+0xffff15c8>
   2e40c:	00bfffc4 	movi	r2,-1
   2e410:	f800283a 	ret
   2e414:	2292b03a 	or	r9,r4,r10
   2e418:	483fe126 	beq	r9,zero,2e3a0 <_gp+0xffff1580>
   2e41c:	003ff606 	br	2e3f8 <_gp+0xffff15d8>
   2e420:	18bff916 	blt	r3,r2,2e408 <_gp+0xffff15e8>
   2e424:	10c00316 	blt	r2,r3,2e434 <__gedf2+0xc4>
   2e428:	42bff736 	bltu	r8,r10,2e408 <_gp+0xffff15e8>
   2e42c:	52000326 	beq	r10,r8,2e43c <__gedf2+0xcc>
   2e430:	5200042e 	bgeu	r10,r8,2e444 <__gedf2+0xd4>
   2e434:	283fec1e 	bne	r5,zero,2e3e8 <_gp+0xffff15c8>
   2e438:	003ff406 	br	2e40c <_gp+0xffff15ec>
   2e43c:	313ff236 	bltu	r6,r4,2e408 <_gp+0xffff15e8>
   2e440:	21bffc36 	bltu	r4,r6,2e434 <_gp+0xffff1614>
   2e444:	0005883a 	mov	r2,zero
   2e448:	f800283a 	ret

0002e44c <__ledf2>:
   2e44c:	2804d53a 	srli	r2,r5,20
   2e450:	3810d53a 	srli	r8,r7,20
   2e454:	00c00434 	movhi	r3,16
   2e458:	18ffffc4 	addi	r3,r3,-1
   2e45c:	1081ffcc 	andi	r2,r2,2047
   2e460:	0241ffc4 	movi	r9,2047
   2e464:	28d4703a 	and	r10,r5,r3
   2e468:	4201ffcc 	andi	r8,r8,2047
   2e46c:	38c6703a 	and	r3,r7,r3
   2e470:	280ad7fa 	srli	r5,r5,31
   2e474:	380ed7fa 	srli	r7,r7,31
   2e478:	12401f26 	beq	r2,r9,2e4f8 <__ledf2+0xac>
   2e47c:	0241ffc4 	movi	r9,2047
   2e480:	42401426 	beq	r8,r9,2e4d4 <__ledf2+0x88>
   2e484:	1000091e 	bne	r2,zero,2e4ac <__ledf2+0x60>
   2e488:	2296b03a 	or	r11,r4,r10
   2e48c:	5813003a 	cmpeq	r9,r11,zero
   2e490:	29403fcc 	andi	r5,r5,255
   2e494:	40000a1e 	bne	r8,zero,2e4c0 <__ledf2+0x74>
   2e498:	30d8b03a 	or	r12,r6,r3
   2e49c:	6000081e 	bne	r12,zero,2e4c0 <__ledf2+0x74>
   2e4a0:	0005883a 	mov	r2,zero
   2e4a4:	5800111e 	bne	r11,zero,2e4ec <__ledf2+0xa0>
   2e4a8:	f800283a 	ret
   2e4ac:	29403fcc 	andi	r5,r5,255
   2e4b0:	40000c1e 	bne	r8,zero,2e4e4 <__ledf2+0x98>
   2e4b4:	30d2b03a 	or	r9,r6,r3
   2e4b8:	48000c26 	beq	r9,zero,2e4ec <__ledf2+0xa0>
   2e4bc:	0013883a 	mov	r9,zero
   2e4c0:	39c03fcc 	andi	r7,r7,255
   2e4c4:	48000826 	beq	r9,zero,2e4e8 <__ledf2+0x9c>
   2e4c8:	38001126 	beq	r7,zero,2e510 <__ledf2+0xc4>
   2e4cc:	00800044 	movi	r2,1
   2e4d0:	f800283a 	ret
   2e4d4:	30d2b03a 	or	r9,r6,r3
   2e4d8:	483fea26 	beq	r9,zero,2e484 <_gp+0xffff1664>
   2e4dc:	00800084 	movi	r2,2
   2e4e0:	f800283a 	ret
   2e4e4:	39c03fcc 	andi	r7,r7,255
   2e4e8:	39400726 	beq	r7,r5,2e508 <__ledf2+0xbc>
   2e4ec:	2800081e 	bne	r5,zero,2e510 <__ledf2+0xc4>
   2e4f0:	00800044 	movi	r2,1
   2e4f4:	f800283a 	ret
   2e4f8:	2292b03a 	or	r9,r4,r10
   2e4fc:	483fdf26 	beq	r9,zero,2e47c <_gp+0xffff165c>
   2e500:	00800084 	movi	r2,2
   2e504:	f800283a 	ret
   2e508:	4080030e 	bge	r8,r2,2e518 <__ledf2+0xcc>
   2e50c:	383fef26 	beq	r7,zero,2e4cc <_gp+0xffff16ac>
   2e510:	00bfffc4 	movi	r2,-1
   2e514:	f800283a 	ret
   2e518:	123feb16 	blt	r2,r8,2e4c8 <_gp+0xffff16a8>
   2e51c:	1abff336 	bltu	r3,r10,2e4ec <_gp+0xffff16cc>
   2e520:	50c00326 	beq	r10,r3,2e530 <__ledf2+0xe4>
   2e524:	50c0042e 	bgeu	r10,r3,2e538 <__ledf2+0xec>
   2e528:	283fe81e 	bne	r5,zero,2e4cc <_gp+0xffff16ac>
   2e52c:	003ff806 	br	2e510 <_gp+0xffff16f0>
   2e530:	313fee36 	bltu	r6,r4,2e4ec <_gp+0xffff16cc>
   2e534:	21bffc36 	bltu	r4,r6,2e528 <_gp+0xffff1708>
   2e538:	0005883a 	mov	r2,zero
   2e53c:	f800283a 	ret

0002e540 <__muldf3>:
   2e540:	defff304 	addi	sp,sp,-52
   2e544:	2804d53a 	srli	r2,r5,20
   2e548:	dd800915 	stw	r22,36(sp)
   2e54c:	282cd7fa 	srli	r22,r5,31
   2e550:	dc000315 	stw	r16,12(sp)
   2e554:	04000434 	movhi	r16,16
   2e558:	dd400815 	stw	r21,32(sp)
   2e55c:	dc800515 	stw	r18,20(sp)
   2e560:	843fffc4 	addi	r16,r16,-1
   2e564:	dfc00c15 	stw	ra,48(sp)
   2e568:	df000b15 	stw	fp,44(sp)
   2e56c:	ddc00a15 	stw	r23,40(sp)
   2e570:	dd000715 	stw	r20,28(sp)
   2e574:	dcc00615 	stw	r19,24(sp)
   2e578:	dc400415 	stw	r17,16(sp)
   2e57c:	1481ffcc 	andi	r18,r2,2047
   2e580:	2c20703a 	and	r16,r5,r16
   2e584:	b02b883a 	mov	r21,r22
   2e588:	b2403fcc 	andi	r9,r22,255
   2e58c:	90006026 	beq	r18,zero,2e710 <__muldf3+0x1d0>
   2e590:	0081ffc4 	movi	r2,2047
   2e594:	2029883a 	mov	r20,r4
   2e598:	90803626 	beq	r18,r2,2e674 <__muldf3+0x134>
   2e59c:	80800434 	orhi	r2,r16,16
   2e5a0:	100490fa 	slli	r2,r2,3
   2e5a4:	2020d77a 	srli	r16,r4,29
   2e5a8:	202890fa 	slli	r20,r4,3
   2e5ac:	94bf0044 	addi	r18,r18,-1023
   2e5b0:	80a0b03a 	or	r16,r16,r2
   2e5b4:	0027883a 	mov	r19,zero
   2e5b8:	0039883a 	mov	fp,zero
   2e5bc:	3804d53a 	srli	r2,r7,20
   2e5c0:	382ed7fa 	srli	r23,r7,31
   2e5c4:	04400434 	movhi	r17,16
   2e5c8:	8c7fffc4 	addi	r17,r17,-1
   2e5cc:	1081ffcc 	andi	r2,r2,2047
   2e5d0:	3011883a 	mov	r8,r6
   2e5d4:	3c62703a 	and	r17,r7,r17
   2e5d8:	ba803fcc 	andi	r10,r23,255
   2e5dc:	10006d26 	beq	r2,zero,2e794 <__muldf3+0x254>
   2e5e0:	00c1ffc4 	movi	r3,2047
   2e5e4:	10c06526 	beq	r2,r3,2e77c <__muldf3+0x23c>
   2e5e8:	88c00434 	orhi	r3,r17,16
   2e5ec:	180690fa 	slli	r3,r3,3
   2e5f0:	3022d77a 	srli	r17,r6,29
   2e5f4:	301090fa 	slli	r8,r6,3
   2e5f8:	10bf0044 	addi	r2,r2,-1023
   2e5fc:	88e2b03a 	or	r17,r17,r3
   2e600:	000b883a 	mov	r5,zero
   2e604:	9085883a 	add	r2,r18,r2
   2e608:	2cc8b03a 	or	r4,r5,r19
   2e60c:	00c003c4 	movi	r3,15
   2e610:	bdacf03a 	xor	r22,r23,r22
   2e614:	12c00044 	addi	r11,r2,1
   2e618:	19009936 	bltu	r3,r4,2e880 <__muldf3+0x340>
   2e61c:	200890ba 	slli	r4,r4,2
   2e620:	00c000f4 	movhi	r3,3
   2e624:	18f98d04 	addi	r3,r3,-6604
   2e628:	20c9883a 	add	r4,r4,r3
   2e62c:	20c00017 	ldw	r3,0(r4)
   2e630:	1800683a 	jmp	r3
   2e634:	0002e880 	call	2e88 <__reset-0x1d178>
   2e638:	0002e694 	movui	zero,2970
   2e63c:	0002e694 	movui	zero,2970
   2e640:	0002e690 	cmplti	zero,zero,2970
   2e644:	0002e85c 	xori	zero,zero,2977
   2e648:	0002e85c 	xori	zero,zero,2977
   2e64c:	0002e844 	movi	zero,2977
   2e650:	0002e690 	cmplti	zero,zero,2970
   2e654:	0002e85c 	xori	zero,zero,2977
   2e658:	0002e844 	movi	zero,2977
   2e65c:	0002e85c 	xori	zero,zero,2977
   2e660:	0002e690 	cmplti	zero,zero,2970
   2e664:	0002e86c 	andhi	zero,zero,2977
   2e668:	0002e86c 	andhi	zero,zero,2977
   2e66c:	0002e86c 	andhi	zero,zero,2977
   2e670:	0002ea88 	cmpgei	zero,zero,2986
   2e674:	2404b03a 	or	r2,r4,r16
   2e678:	10006f1e 	bne	r2,zero,2e838 <__muldf3+0x2f8>
   2e67c:	04c00204 	movi	r19,8
   2e680:	0021883a 	mov	r16,zero
   2e684:	0029883a 	mov	r20,zero
   2e688:	07000084 	movi	fp,2
   2e68c:	003fcb06 	br	2e5bc <_gp+0xffff179c>
   2e690:	502d883a 	mov	r22,r10
   2e694:	00800084 	movi	r2,2
   2e698:	28805726 	beq	r5,r2,2e7f8 <__muldf3+0x2b8>
   2e69c:	008000c4 	movi	r2,3
   2e6a0:	28816626 	beq	r5,r2,2ec3c <__muldf3+0x6fc>
   2e6a4:	00800044 	movi	r2,1
   2e6a8:	2881411e 	bne	r5,r2,2ebb0 <__muldf3+0x670>
   2e6ac:	b02b883a 	mov	r21,r22
   2e6b0:	0005883a 	mov	r2,zero
   2e6b4:	000b883a 	mov	r5,zero
   2e6b8:	0029883a 	mov	r20,zero
   2e6bc:	1004953a 	slli	r2,r2,20
   2e6c0:	a8c03fcc 	andi	r3,r21,255
   2e6c4:	04400434 	movhi	r17,16
   2e6c8:	8c7fffc4 	addi	r17,r17,-1
   2e6cc:	180697fa 	slli	r3,r3,31
   2e6d0:	2c4a703a 	and	r5,r5,r17
   2e6d4:	288ab03a 	or	r5,r5,r2
   2e6d8:	28c6b03a 	or	r3,r5,r3
   2e6dc:	a005883a 	mov	r2,r20
   2e6e0:	dfc00c17 	ldw	ra,48(sp)
   2e6e4:	df000b17 	ldw	fp,44(sp)
   2e6e8:	ddc00a17 	ldw	r23,40(sp)
   2e6ec:	dd800917 	ldw	r22,36(sp)
   2e6f0:	dd400817 	ldw	r21,32(sp)
   2e6f4:	dd000717 	ldw	r20,28(sp)
   2e6f8:	dcc00617 	ldw	r19,24(sp)
   2e6fc:	dc800517 	ldw	r18,20(sp)
   2e700:	dc400417 	ldw	r17,16(sp)
   2e704:	dc000317 	ldw	r16,12(sp)
   2e708:	dec00d04 	addi	sp,sp,52
   2e70c:	f800283a 	ret
   2e710:	2404b03a 	or	r2,r4,r16
   2e714:	2027883a 	mov	r19,r4
   2e718:	10004226 	beq	r2,zero,2e824 <__muldf3+0x2e4>
   2e71c:	8000fc26 	beq	r16,zero,2eb10 <__muldf3+0x5d0>
   2e720:	8009883a 	mov	r4,r16
   2e724:	d9800215 	stw	r6,8(sp)
   2e728:	d9c00015 	stw	r7,0(sp)
   2e72c:	da400115 	stw	r9,4(sp)
   2e730:	002f7580 	call	2f758 <__clzsi2>
   2e734:	d9800217 	ldw	r6,8(sp)
   2e738:	d9c00017 	ldw	r7,0(sp)
   2e73c:	da400117 	ldw	r9,4(sp)
   2e740:	113ffd44 	addi	r4,r2,-11
   2e744:	00c00704 	movi	r3,28
   2e748:	1900ed16 	blt	r3,r4,2eb00 <__muldf3+0x5c0>
   2e74c:	00c00744 	movi	r3,29
   2e750:	147ffe04 	addi	r17,r2,-8
   2e754:	1907c83a 	sub	r3,r3,r4
   2e758:	8460983a 	sll	r16,r16,r17
   2e75c:	98c6d83a 	srl	r3,r19,r3
   2e760:	9c68983a 	sll	r20,r19,r17
   2e764:	1c20b03a 	or	r16,r3,r16
   2e768:	1080fcc4 	addi	r2,r2,1011
   2e76c:	00a5c83a 	sub	r18,zero,r2
   2e770:	0027883a 	mov	r19,zero
   2e774:	0039883a 	mov	fp,zero
   2e778:	003f9006 	br	2e5bc <_gp+0xffff179c>
   2e77c:	3446b03a 	or	r3,r6,r17
   2e780:	1800261e 	bne	r3,zero,2e81c <__muldf3+0x2dc>
   2e784:	0023883a 	mov	r17,zero
   2e788:	0011883a 	mov	r8,zero
   2e78c:	01400084 	movi	r5,2
   2e790:	003f9c06 	br	2e604 <_gp+0xffff17e4>
   2e794:	3446b03a 	or	r3,r6,r17
   2e798:	18001c26 	beq	r3,zero,2e80c <__muldf3+0x2cc>
   2e79c:	8800ce26 	beq	r17,zero,2ead8 <__muldf3+0x598>
   2e7a0:	8809883a 	mov	r4,r17
   2e7a4:	d9800215 	stw	r6,8(sp)
   2e7a8:	da400115 	stw	r9,4(sp)
   2e7ac:	da800015 	stw	r10,0(sp)
   2e7b0:	002f7580 	call	2f758 <__clzsi2>
   2e7b4:	d9800217 	ldw	r6,8(sp)
   2e7b8:	da400117 	ldw	r9,4(sp)
   2e7bc:	da800017 	ldw	r10,0(sp)
   2e7c0:	113ffd44 	addi	r4,r2,-11
   2e7c4:	00c00704 	movi	r3,28
   2e7c8:	1900bf16 	blt	r3,r4,2eac8 <__muldf3+0x588>
   2e7cc:	00c00744 	movi	r3,29
   2e7d0:	123ffe04 	addi	r8,r2,-8
   2e7d4:	1907c83a 	sub	r3,r3,r4
   2e7d8:	8a22983a 	sll	r17,r17,r8
   2e7dc:	30c6d83a 	srl	r3,r6,r3
   2e7e0:	3210983a 	sll	r8,r6,r8
   2e7e4:	1c62b03a 	or	r17,r3,r17
   2e7e8:	1080fcc4 	addi	r2,r2,1011
   2e7ec:	0085c83a 	sub	r2,zero,r2
   2e7f0:	000b883a 	mov	r5,zero
   2e7f4:	003f8306 	br	2e604 <_gp+0xffff17e4>
   2e7f8:	b02b883a 	mov	r21,r22
   2e7fc:	0081ffc4 	movi	r2,2047
   2e800:	000b883a 	mov	r5,zero
   2e804:	0029883a 	mov	r20,zero
   2e808:	003fac06 	br	2e6bc <_gp+0xffff189c>
   2e80c:	0023883a 	mov	r17,zero
   2e810:	0011883a 	mov	r8,zero
   2e814:	01400044 	movi	r5,1
   2e818:	003f7a06 	br	2e604 <_gp+0xffff17e4>
   2e81c:	014000c4 	movi	r5,3
   2e820:	003f7806 	br	2e604 <_gp+0xffff17e4>
   2e824:	04c00104 	movi	r19,4
   2e828:	0021883a 	mov	r16,zero
   2e82c:	0029883a 	mov	r20,zero
   2e830:	07000044 	movi	fp,1
   2e834:	003f6106 	br	2e5bc <_gp+0xffff179c>
   2e838:	04c00304 	movi	r19,12
   2e83c:	070000c4 	movi	fp,3
   2e840:	003f5e06 	br	2e5bc <_gp+0xffff179c>
   2e844:	01400434 	movhi	r5,16
   2e848:	002b883a 	mov	r21,zero
   2e84c:	297fffc4 	addi	r5,r5,-1
   2e850:	053fffc4 	movi	r20,-1
   2e854:	0081ffc4 	movi	r2,2047
   2e858:	003f9806 	br	2e6bc <_gp+0xffff189c>
   2e85c:	8023883a 	mov	r17,r16
   2e860:	a011883a 	mov	r8,r20
   2e864:	e00b883a 	mov	r5,fp
   2e868:	003f8a06 	br	2e694 <_gp+0xffff1874>
   2e86c:	8023883a 	mov	r17,r16
   2e870:	a011883a 	mov	r8,r20
   2e874:	482d883a 	mov	r22,r9
   2e878:	e00b883a 	mov	r5,fp
   2e87c:	003f8506 	br	2e694 <_gp+0xffff1874>
   2e880:	a00ad43a 	srli	r5,r20,16
   2e884:	401ad43a 	srli	r13,r8,16
   2e888:	a53fffcc 	andi	r20,r20,65535
   2e88c:	423fffcc 	andi	r8,r8,65535
   2e890:	4519383a 	mul	r12,r8,r20
   2e894:	4147383a 	mul	r3,r8,r5
   2e898:	6d09383a 	mul	r4,r13,r20
   2e89c:	600cd43a 	srli	r6,r12,16
   2e8a0:	2b5d383a 	mul	r14,r5,r13
   2e8a4:	20c9883a 	add	r4,r4,r3
   2e8a8:	310d883a 	add	r6,r6,r4
   2e8ac:	30c0022e 	bgeu	r6,r3,2e8b8 <__muldf3+0x378>
   2e8b0:	00c00074 	movhi	r3,1
   2e8b4:	70dd883a 	add	r14,r14,r3
   2e8b8:	8826d43a 	srli	r19,r17,16
   2e8bc:	8bffffcc 	andi	r15,r17,65535
   2e8c0:	7d23383a 	mul	r17,r15,r20
   2e8c4:	7949383a 	mul	r4,r15,r5
   2e8c8:	9d29383a 	mul	r20,r19,r20
   2e8cc:	8814d43a 	srli	r10,r17,16
   2e8d0:	3012943a 	slli	r9,r6,16
   2e8d4:	a129883a 	add	r20,r20,r4
   2e8d8:	633fffcc 	andi	r12,r12,65535
   2e8dc:	5515883a 	add	r10,r10,r20
   2e8e0:	3006d43a 	srli	r3,r6,16
   2e8e4:	4b13883a 	add	r9,r9,r12
   2e8e8:	2ccb383a 	mul	r5,r5,r19
   2e8ec:	5100022e 	bgeu	r10,r4,2e8f8 <__muldf3+0x3b8>
   2e8f0:	01000074 	movhi	r4,1
   2e8f4:	290b883a 	add	r5,r5,r4
   2e8f8:	802ad43a 	srli	r21,r16,16
   2e8fc:	843fffcc 	andi	r16,r16,65535
   2e900:	440d383a 	mul	r6,r8,r16
   2e904:	4565383a 	mul	r18,r8,r21
   2e908:	8349383a 	mul	r4,r16,r13
   2e90c:	500e943a 	slli	r7,r10,16
   2e910:	3010d43a 	srli	r8,r6,16
   2e914:	5028d43a 	srli	r20,r10,16
   2e918:	2489883a 	add	r4,r4,r18
   2e91c:	8abfffcc 	andi	r10,r17,65535
   2e920:	3a95883a 	add	r10,r7,r10
   2e924:	4119883a 	add	r12,r8,r4
   2e928:	a169883a 	add	r20,r20,r5
   2e92c:	1a87883a 	add	r3,r3,r10
   2e930:	6d5b383a 	mul	r13,r13,r21
   2e934:	6480022e 	bgeu	r12,r18,2e940 <__muldf3+0x400>
   2e938:	01000074 	movhi	r4,1
   2e93c:	691b883a 	add	r13,r13,r4
   2e940:	7c25383a 	mul	r18,r15,r16
   2e944:	7d4b383a 	mul	r5,r15,r21
   2e948:	84cf383a 	mul	r7,r16,r19
   2e94c:	901ed43a 	srli	r15,r18,16
   2e950:	6008d43a 	srli	r4,r12,16
   2e954:	6010943a 	slli	r8,r12,16
   2e958:	394f883a 	add	r7,r7,r5
   2e95c:	333fffcc 	andi	r12,r6,65535
   2e960:	79df883a 	add	r15,r15,r7
   2e964:	235b883a 	add	r13,r4,r13
   2e968:	9d63383a 	mul	r17,r19,r21
   2e96c:	4309883a 	add	r4,r8,r12
   2e970:	7940022e 	bgeu	r15,r5,2e97c <__muldf3+0x43c>
   2e974:	01400074 	movhi	r5,1
   2e978:	8963883a 	add	r17,r17,r5
   2e97c:	780a943a 	slli	r5,r15,16
   2e980:	91bfffcc 	andi	r6,r18,65535
   2e984:	70c7883a 	add	r3,r14,r3
   2e988:	298d883a 	add	r6,r5,r6
   2e98c:	1a8f803a 	cmpltu	r7,r3,r10
   2e990:	350b883a 	add	r5,r6,r20
   2e994:	20c7883a 	add	r3,r4,r3
   2e998:	3955883a 	add	r10,r7,r5
   2e99c:	1909803a 	cmpltu	r4,r3,r4
   2e9a0:	6a91883a 	add	r8,r13,r10
   2e9a4:	780cd43a 	srli	r6,r15,16
   2e9a8:	2219883a 	add	r12,r4,r8
   2e9ac:	2d0b803a 	cmpltu	r5,r5,r20
   2e9b0:	51cf803a 	cmpltu	r7,r10,r7
   2e9b4:	29ceb03a 	or	r7,r5,r7
   2e9b8:	4351803a 	cmpltu	r8,r8,r13
   2e9bc:	610b803a 	cmpltu	r5,r12,r4
   2e9c0:	4148b03a 	or	r4,r8,r5
   2e9c4:	398f883a 	add	r7,r7,r6
   2e9c8:	3909883a 	add	r4,r7,r4
   2e9cc:	1810927a 	slli	r8,r3,9
   2e9d0:	2449883a 	add	r4,r4,r17
   2e9d4:	2008927a 	slli	r4,r4,9
   2e9d8:	6022d5fa 	srli	r17,r12,23
   2e9dc:	1806d5fa 	srli	r3,r3,23
   2e9e0:	4252b03a 	or	r9,r8,r9
   2e9e4:	600a927a 	slli	r5,r12,9
   2e9e8:	4810c03a 	cmpne	r8,r9,zero
   2e9ec:	2462b03a 	or	r17,r4,r17
   2e9f0:	40c6b03a 	or	r3,r8,r3
   2e9f4:	8900402c 	andhi	r4,r17,256
   2e9f8:	1950b03a 	or	r8,r3,r5
   2e9fc:	20000726 	beq	r4,zero,2ea1c <__muldf3+0x4dc>
   2ea00:	4006d07a 	srli	r3,r8,1
   2ea04:	880497fa 	slli	r2,r17,31
   2ea08:	4200004c 	andi	r8,r8,1
   2ea0c:	8822d07a 	srli	r17,r17,1
   2ea10:	1a10b03a 	or	r8,r3,r8
   2ea14:	1210b03a 	or	r8,r2,r8
   2ea18:	5805883a 	mov	r2,r11
   2ea1c:	1140ffc4 	addi	r5,r2,1023
   2ea20:	0140440e 	bge	zero,r5,2eb34 <__muldf3+0x5f4>
   2ea24:	40c001cc 	andi	r3,r8,7
   2ea28:	18000726 	beq	r3,zero,2ea48 <__muldf3+0x508>
   2ea2c:	40c003cc 	andi	r3,r8,15
   2ea30:	01000104 	movi	r4,4
   2ea34:	19000426 	beq	r3,r4,2ea48 <__muldf3+0x508>
   2ea38:	4107883a 	add	r3,r8,r4
   2ea3c:	1a11803a 	cmpltu	r8,r3,r8
   2ea40:	8a23883a 	add	r17,r17,r8
   2ea44:	1811883a 	mov	r8,r3
   2ea48:	88c0402c 	andhi	r3,r17,256
   2ea4c:	18000426 	beq	r3,zero,2ea60 <__muldf3+0x520>
   2ea50:	11410004 	addi	r5,r2,1024
   2ea54:	00bfc034 	movhi	r2,65280
   2ea58:	10bfffc4 	addi	r2,r2,-1
   2ea5c:	88a2703a 	and	r17,r17,r2
   2ea60:	0081ff84 	movi	r2,2046
   2ea64:	117f6416 	blt	r2,r5,2e7f8 <_gp+0xffff19d8>
   2ea68:	8828977a 	slli	r20,r17,29
   2ea6c:	4010d0fa 	srli	r8,r8,3
   2ea70:	8822927a 	slli	r17,r17,9
   2ea74:	2881ffcc 	andi	r2,r5,2047
   2ea78:	a228b03a 	or	r20,r20,r8
   2ea7c:	880ad33a 	srli	r5,r17,12
   2ea80:	b02b883a 	mov	r21,r22
   2ea84:	003f0d06 	br	2e6bc <_gp+0xffff189c>
   2ea88:	8080022c 	andhi	r2,r16,8
   2ea8c:	10000926 	beq	r2,zero,2eab4 <__muldf3+0x574>
   2ea90:	8880022c 	andhi	r2,r17,8
   2ea94:	1000071e 	bne	r2,zero,2eab4 <__muldf3+0x574>
   2ea98:	00800434 	movhi	r2,16
   2ea9c:	89400234 	orhi	r5,r17,8
   2eaa0:	10bfffc4 	addi	r2,r2,-1
   2eaa4:	b82b883a 	mov	r21,r23
   2eaa8:	288a703a 	and	r5,r5,r2
   2eaac:	4029883a 	mov	r20,r8
   2eab0:	003f6806 	br	2e854 <_gp+0xffff1a34>
   2eab4:	00800434 	movhi	r2,16
   2eab8:	81400234 	orhi	r5,r16,8
   2eabc:	10bfffc4 	addi	r2,r2,-1
   2eac0:	288a703a 	and	r5,r5,r2
   2eac4:	003f6306 	br	2e854 <_gp+0xffff1a34>
   2eac8:	147ff604 	addi	r17,r2,-40
   2eacc:	3462983a 	sll	r17,r6,r17
   2ead0:	0011883a 	mov	r8,zero
   2ead4:	003f4406 	br	2e7e8 <_gp+0xffff19c8>
   2ead8:	3009883a 	mov	r4,r6
   2eadc:	d9800215 	stw	r6,8(sp)
   2eae0:	da400115 	stw	r9,4(sp)
   2eae4:	da800015 	stw	r10,0(sp)
   2eae8:	002f7580 	call	2f758 <__clzsi2>
   2eaec:	10800804 	addi	r2,r2,32
   2eaf0:	da800017 	ldw	r10,0(sp)
   2eaf4:	da400117 	ldw	r9,4(sp)
   2eaf8:	d9800217 	ldw	r6,8(sp)
   2eafc:	003f3006 	br	2e7c0 <_gp+0xffff19a0>
   2eb00:	143ff604 	addi	r16,r2,-40
   2eb04:	9c20983a 	sll	r16,r19,r16
   2eb08:	0029883a 	mov	r20,zero
   2eb0c:	003f1606 	br	2e768 <_gp+0xffff1948>
   2eb10:	d9800215 	stw	r6,8(sp)
   2eb14:	d9c00015 	stw	r7,0(sp)
   2eb18:	da400115 	stw	r9,4(sp)
   2eb1c:	002f7580 	call	2f758 <__clzsi2>
   2eb20:	10800804 	addi	r2,r2,32
   2eb24:	da400117 	ldw	r9,4(sp)
   2eb28:	d9c00017 	ldw	r7,0(sp)
   2eb2c:	d9800217 	ldw	r6,8(sp)
   2eb30:	003f0306 	br	2e740 <_gp+0xffff1920>
   2eb34:	00c00044 	movi	r3,1
   2eb38:	1947c83a 	sub	r3,r3,r5
   2eb3c:	00800e04 	movi	r2,56
   2eb40:	10feda16 	blt	r2,r3,2e6ac <_gp+0xffff188c>
   2eb44:	008007c4 	movi	r2,31
   2eb48:	10c01b16 	blt	r2,r3,2ebb8 <__muldf3+0x678>
   2eb4c:	00800804 	movi	r2,32
   2eb50:	10c5c83a 	sub	r2,r2,r3
   2eb54:	888a983a 	sll	r5,r17,r2
   2eb58:	40c8d83a 	srl	r4,r8,r3
   2eb5c:	4084983a 	sll	r2,r8,r2
   2eb60:	88e2d83a 	srl	r17,r17,r3
   2eb64:	2906b03a 	or	r3,r5,r4
   2eb68:	1004c03a 	cmpne	r2,r2,zero
   2eb6c:	1886b03a 	or	r3,r3,r2
   2eb70:	188001cc 	andi	r2,r3,7
   2eb74:	10000726 	beq	r2,zero,2eb94 <__muldf3+0x654>
   2eb78:	188003cc 	andi	r2,r3,15
   2eb7c:	01000104 	movi	r4,4
   2eb80:	11000426 	beq	r2,r4,2eb94 <__muldf3+0x654>
   2eb84:	1805883a 	mov	r2,r3
   2eb88:	10c00104 	addi	r3,r2,4
   2eb8c:	1885803a 	cmpltu	r2,r3,r2
   2eb90:	88a3883a 	add	r17,r17,r2
   2eb94:	8880202c 	andhi	r2,r17,128
   2eb98:	10001c26 	beq	r2,zero,2ec0c <__muldf3+0x6cc>
   2eb9c:	b02b883a 	mov	r21,r22
   2eba0:	00800044 	movi	r2,1
   2eba4:	000b883a 	mov	r5,zero
   2eba8:	0029883a 	mov	r20,zero
   2ebac:	003ec306 	br	2e6bc <_gp+0xffff189c>
   2ebb0:	5805883a 	mov	r2,r11
   2ebb4:	003f9906 	br	2ea1c <_gp+0xffff1bfc>
   2ebb8:	00bff844 	movi	r2,-31
   2ebbc:	1145c83a 	sub	r2,r2,r5
   2ebc0:	8888d83a 	srl	r4,r17,r2
   2ebc4:	00800804 	movi	r2,32
   2ebc8:	18801a26 	beq	r3,r2,2ec34 <__muldf3+0x6f4>
   2ebcc:	00801004 	movi	r2,64
   2ebd0:	10c5c83a 	sub	r2,r2,r3
   2ebd4:	8884983a 	sll	r2,r17,r2
   2ebd8:	1204b03a 	or	r2,r2,r8
   2ebdc:	1004c03a 	cmpne	r2,r2,zero
   2ebe0:	2084b03a 	or	r2,r4,r2
   2ebe4:	144001cc 	andi	r17,r2,7
   2ebe8:	88000d1e 	bne	r17,zero,2ec20 <__muldf3+0x6e0>
   2ebec:	000b883a 	mov	r5,zero
   2ebf0:	1028d0fa 	srli	r20,r2,3
   2ebf4:	b02b883a 	mov	r21,r22
   2ebf8:	0005883a 	mov	r2,zero
   2ebfc:	a468b03a 	or	r20,r20,r17
   2ec00:	003eae06 	br	2e6bc <_gp+0xffff189c>
   2ec04:	1007883a 	mov	r3,r2
   2ec08:	0023883a 	mov	r17,zero
   2ec0c:	880a927a 	slli	r5,r17,9
   2ec10:	1805883a 	mov	r2,r3
   2ec14:	8822977a 	slli	r17,r17,29
   2ec18:	280ad33a 	srli	r5,r5,12
   2ec1c:	003ff406 	br	2ebf0 <_gp+0xffff1dd0>
   2ec20:	10c003cc 	andi	r3,r2,15
   2ec24:	01000104 	movi	r4,4
   2ec28:	193ff626 	beq	r3,r4,2ec04 <_gp+0xffff1de4>
   2ec2c:	0023883a 	mov	r17,zero
   2ec30:	003fd506 	br	2eb88 <_gp+0xffff1d68>
   2ec34:	0005883a 	mov	r2,zero
   2ec38:	003fe706 	br	2ebd8 <_gp+0xffff1db8>
   2ec3c:	00800434 	movhi	r2,16
   2ec40:	89400234 	orhi	r5,r17,8
   2ec44:	10bfffc4 	addi	r2,r2,-1
   2ec48:	b02b883a 	mov	r21,r22
   2ec4c:	288a703a 	and	r5,r5,r2
   2ec50:	4029883a 	mov	r20,r8
   2ec54:	003eff06 	br	2e854 <_gp+0xffff1a34>

0002ec58 <__subdf3>:
   2ec58:	02000434 	movhi	r8,16
   2ec5c:	423fffc4 	addi	r8,r8,-1
   2ec60:	defffb04 	addi	sp,sp,-20
   2ec64:	2a14703a 	and	r10,r5,r8
   2ec68:	3812d53a 	srli	r9,r7,20
   2ec6c:	3a10703a 	and	r8,r7,r8
   2ec70:	2006d77a 	srli	r3,r4,29
   2ec74:	3004d77a 	srli	r2,r6,29
   2ec78:	dc000015 	stw	r16,0(sp)
   2ec7c:	501490fa 	slli	r10,r10,3
   2ec80:	2820d53a 	srli	r16,r5,20
   2ec84:	401090fa 	slli	r8,r8,3
   2ec88:	dc800215 	stw	r18,8(sp)
   2ec8c:	dc400115 	stw	r17,4(sp)
   2ec90:	dfc00415 	stw	ra,16(sp)
   2ec94:	202290fa 	slli	r17,r4,3
   2ec98:	dcc00315 	stw	r19,12(sp)
   2ec9c:	4a41ffcc 	andi	r9,r9,2047
   2eca0:	0101ffc4 	movi	r4,2047
   2eca4:	2824d7fa 	srli	r18,r5,31
   2eca8:	8401ffcc 	andi	r16,r16,2047
   2ecac:	50c6b03a 	or	r3,r10,r3
   2ecb0:	380ed7fa 	srli	r7,r7,31
   2ecb4:	408ab03a 	or	r5,r8,r2
   2ecb8:	300c90fa 	slli	r6,r6,3
   2ecbc:	49009626 	beq	r9,r4,2ef18 <__subdf3+0x2c0>
   2ecc0:	39c0005c 	xori	r7,r7,1
   2ecc4:	8245c83a 	sub	r2,r16,r9
   2ecc8:	3c807426 	beq	r7,r18,2ee9c <__subdf3+0x244>
   2eccc:	0080af0e 	bge	zero,r2,2ef8c <__subdf3+0x334>
   2ecd0:	48002a1e 	bne	r9,zero,2ed7c <__subdf3+0x124>
   2ecd4:	2988b03a 	or	r4,r5,r6
   2ecd8:	20009a1e 	bne	r4,zero,2ef44 <__subdf3+0x2ec>
   2ecdc:	888001cc 	andi	r2,r17,7
   2ece0:	10000726 	beq	r2,zero,2ed00 <__subdf3+0xa8>
   2ece4:	888003cc 	andi	r2,r17,15
   2ece8:	01000104 	movi	r4,4
   2ecec:	11000426 	beq	r2,r4,2ed00 <__subdf3+0xa8>
   2ecf0:	890b883a 	add	r5,r17,r4
   2ecf4:	2c63803a 	cmpltu	r17,r5,r17
   2ecf8:	1c47883a 	add	r3,r3,r17
   2ecfc:	2823883a 	mov	r17,r5
   2ed00:	1880202c 	andhi	r2,r3,128
   2ed04:	10005926 	beq	r2,zero,2ee6c <__subdf3+0x214>
   2ed08:	84000044 	addi	r16,r16,1
   2ed0c:	0081ffc4 	movi	r2,2047
   2ed10:	8080be26 	beq	r16,r2,2f00c <__subdf3+0x3b4>
   2ed14:	017fe034 	movhi	r5,65408
   2ed18:	297fffc4 	addi	r5,r5,-1
   2ed1c:	1946703a 	and	r3,r3,r5
   2ed20:	1804977a 	slli	r2,r3,29
   2ed24:	1806927a 	slli	r3,r3,9
   2ed28:	8822d0fa 	srli	r17,r17,3
   2ed2c:	8401ffcc 	andi	r16,r16,2047
   2ed30:	180ad33a 	srli	r5,r3,12
   2ed34:	9100004c 	andi	r4,r18,1
   2ed38:	1444b03a 	or	r2,r2,r17
   2ed3c:	80c1ffcc 	andi	r3,r16,2047
   2ed40:	1820953a 	slli	r16,r3,20
   2ed44:	20c03fcc 	andi	r3,r4,255
   2ed48:	180897fa 	slli	r4,r3,31
   2ed4c:	00c00434 	movhi	r3,16
   2ed50:	18ffffc4 	addi	r3,r3,-1
   2ed54:	28c6703a 	and	r3,r5,r3
   2ed58:	1c06b03a 	or	r3,r3,r16
   2ed5c:	1906b03a 	or	r3,r3,r4
   2ed60:	dfc00417 	ldw	ra,16(sp)
   2ed64:	dcc00317 	ldw	r19,12(sp)
   2ed68:	dc800217 	ldw	r18,8(sp)
   2ed6c:	dc400117 	ldw	r17,4(sp)
   2ed70:	dc000017 	ldw	r16,0(sp)
   2ed74:	dec00504 	addi	sp,sp,20
   2ed78:	f800283a 	ret
   2ed7c:	0101ffc4 	movi	r4,2047
   2ed80:	813fd626 	beq	r16,r4,2ecdc <_gp+0xffff1ebc>
   2ed84:	29402034 	orhi	r5,r5,128
   2ed88:	01000e04 	movi	r4,56
   2ed8c:	2080a316 	blt	r4,r2,2f01c <__subdf3+0x3c4>
   2ed90:	010007c4 	movi	r4,31
   2ed94:	2080c616 	blt	r4,r2,2f0b0 <__subdf3+0x458>
   2ed98:	01000804 	movi	r4,32
   2ed9c:	2089c83a 	sub	r4,r4,r2
   2eda0:	2910983a 	sll	r8,r5,r4
   2eda4:	308ed83a 	srl	r7,r6,r2
   2eda8:	3108983a 	sll	r4,r6,r4
   2edac:	2884d83a 	srl	r2,r5,r2
   2edb0:	41ccb03a 	or	r6,r8,r7
   2edb4:	2008c03a 	cmpne	r4,r4,zero
   2edb8:	310cb03a 	or	r6,r6,r4
   2edbc:	898dc83a 	sub	r6,r17,r6
   2edc0:	89a3803a 	cmpltu	r17,r17,r6
   2edc4:	1887c83a 	sub	r3,r3,r2
   2edc8:	1c47c83a 	sub	r3,r3,r17
   2edcc:	3023883a 	mov	r17,r6
   2edd0:	1880202c 	andhi	r2,r3,128
   2edd4:	10002326 	beq	r2,zero,2ee64 <__subdf3+0x20c>
   2edd8:	04c02034 	movhi	r19,128
   2eddc:	9cffffc4 	addi	r19,r19,-1
   2ede0:	1ce6703a 	and	r19,r3,r19
   2ede4:	98007a26 	beq	r19,zero,2efd0 <__subdf3+0x378>
   2ede8:	9809883a 	mov	r4,r19
   2edec:	002f7580 	call	2f758 <__clzsi2>
   2edf0:	113ffe04 	addi	r4,r2,-8
   2edf4:	00c007c4 	movi	r3,31
   2edf8:	19007b16 	blt	r3,r4,2efe8 <__subdf3+0x390>
   2edfc:	00800804 	movi	r2,32
   2ee00:	1105c83a 	sub	r2,r2,r4
   2ee04:	8884d83a 	srl	r2,r17,r2
   2ee08:	9906983a 	sll	r3,r19,r4
   2ee0c:	8922983a 	sll	r17,r17,r4
   2ee10:	10c4b03a 	or	r2,r2,r3
   2ee14:	24007816 	blt	r4,r16,2eff8 <__subdf3+0x3a0>
   2ee18:	2421c83a 	sub	r16,r4,r16
   2ee1c:	80c00044 	addi	r3,r16,1
   2ee20:	010007c4 	movi	r4,31
   2ee24:	20c09516 	blt	r4,r3,2f07c <__subdf3+0x424>
   2ee28:	01400804 	movi	r5,32
   2ee2c:	28cbc83a 	sub	r5,r5,r3
   2ee30:	88c8d83a 	srl	r4,r17,r3
   2ee34:	8962983a 	sll	r17,r17,r5
   2ee38:	114a983a 	sll	r5,r2,r5
   2ee3c:	10c6d83a 	srl	r3,r2,r3
   2ee40:	8804c03a 	cmpne	r2,r17,zero
   2ee44:	290ab03a 	or	r5,r5,r4
   2ee48:	28a2b03a 	or	r17,r5,r2
   2ee4c:	0021883a 	mov	r16,zero
   2ee50:	003fa206 	br	2ecdc <_gp+0xffff1ebc>
   2ee54:	2090b03a 	or	r8,r4,r2
   2ee58:	40018e26 	beq	r8,zero,2f494 <__subdf3+0x83c>
   2ee5c:	1007883a 	mov	r3,r2
   2ee60:	2023883a 	mov	r17,r4
   2ee64:	888001cc 	andi	r2,r17,7
   2ee68:	103f9e1e 	bne	r2,zero,2ece4 <_gp+0xffff1ec4>
   2ee6c:	1804977a 	slli	r2,r3,29
   2ee70:	8822d0fa 	srli	r17,r17,3
   2ee74:	1810d0fa 	srli	r8,r3,3
   2ee78:	9100004c 	andi	r4,r18,1
   2ee7c:	1444b03a 	or	r2,r2,r17
   2ee80:	00c1ffc4 	movi	r3,2047
   2ee84:	80c02826 	beq	r16,r3,2ef28 <__subdf3+0x2d0>
   2ee88:	01400434 	movhi	r5,16
   2ee8c:	297fffc4 	addi	r5,r5,-1
   2ee90:	80e0703a 	and	r16,r16,r3
   2ee94:	414a703a 	and	r5,r8,r5
   2ee98:	003fa806 	br	2ed3c <_gp+0xffff1f1c>
   2ee9c:	0080630e 	bge	zero,r2,2f02c <__subdf3+0x3d4>
   2eea0:	48003026 	beq	r9,zero,2ef64 <__subdf3+0x30c>
   2eea4:	0101ffc4 	movi	r4,2047
   2eea8:	813f8c26 	beq	r16,r4,2ecdc <_gp+0xffff1ebc>
   2eeac:	29402034 	orhi	r5,r5,128
   2eeb0:	01000e04 	movi	r4,56
   2eeb4:	2080a90e 	bge	r4,r2,2f15c <__subdf3+0x504>
   2eeb8:	298cb03a 	or	r6,r5,r6
   2eebc:	3012c03a 	cmpne	r9,r6,zero
   2eec0:	0005883a 	mov	r2,zero
   2eec4:	4c53883a 	add	r9,r9,r17
   2eec8:	4c63803a 	cmpltu	r17,r9,r17
   2eecc:	10c7883a 	add	r3,r2,r3
   2eed0:	88c7883a 	add	r3,r17,r3
   2eed4:	4823883a 	mov	r17,r9
   2eed8:	1880202c 	andhi	r2,r3,128
   2eedc:	1000d026 	beq	r2,zero,2f220 <__subdf3+0x5c8>
   2eee0:	84000044 	addi	r16,r16,1
   2eee4:	0081ffc4 	movi	r2,2047
   2eee8:	8080fe26 	beq	r16,r2,2f2e4 <__subdf3+0x68c>
   2eeec:	00bfe034 	movhi	r2,65408
   2eef0:	10bfffc4 	addi	r2,r2,-1
   2eef4:	1886703a 	and	r3,r3,r2
   2eef8:	880ad07a 	srli	r5,r17,1
   2eefc:	180497fa 	slli	r2,r3,31
   2ef00:	8900004c 	andi	r4,r17,1
   2ef04:	2922b03a 	or	r17,r5,r4
   2ef08:	1806d07a 	srli	r3,r3,1
   2ef0c:	1462b03a 	or	r17,r2,r17
   2ef10:	3825883a 	mov	r18,r7
   2ef14:	003f7106 	br	2ecdc <_gp+0xffff1ebc>
   2ef18:	2984b03a 	or	r2,r5,r6
   2ef1c:	103f6826 	beq	r2,zero,2ecc0 <_gp+0xffff1ea0>
   2ef20:	39c03fcc 	andi	r7,r7,255
   2ef24:	003f6706 	br	2ecc4 <_gp+0xffff1ea4>
   2ef28:	4086b03a 	or	r3,r8,r2
   2ef2c:	18015226 	beq	r3,zero,2f478 <__subdf3+0x820>
   2ef30:	00c00434 	movhi	r3,16
   2ef34:	41400234 	orhi	r5,r8,8
   2ef38:	18ffffc4 	addi	r3,r3,-1
   2ef3c:	28ca703a 	and	r5,r5,r3
   2ef40:	003f7e06 	br	2ed3c <_gp+0xffff1f1c>
   2ef44:	10bfffc4 	addi	r2,r2,-1
   2ef48:	1000491e 	bne	r2,zero,2f070 <__subdf3+0x418>
   2ef4c:	898fc83a 	sub	r7,r17,r6
   2ef50:	89e3803a 	cmpltu	r17,r17,r7
   2ef54:	1947c83a 	sub	r3,r3,r5
   2ef58:	1c47c83a 	sub	r3,r3,r17
   2ef5c:	3823883a 	mov	r17,r7
   2ef60:	003f9b06 	br	2edd0 <_gp+0xffff1fb0>
   2ef64:	2988b03a 	or	r4,r5,r6
   2ef68:	203f5c26 	beq	r4,zero,2ecdc <_gp+0xffff1ebc>
   2ef6c:	10bfffc4 	addi	r2,r2,-1
   2ef70:	1000931e 	bne	r2,zero,2f1c0 <__subdf3+0x568>
   2ef74:	898d883a 	add	r6,r17,r6
   2ef78:	3463803a 	cmpltu	r17,r6,r17
   2ef7c:	1947883a 	add	r3,r3,r5
   2ef80:	88c7883a 	add	r3,r17,r3
   2ef84:	3023883a 	mov	r17,r6
   2ef88:	003fd306 	br	2eed8 <_gp+0xffff20b8>
   2ef8c:	1000541e 	bne	r2,zero,2f0e0 <__subdf3+0x488>
   2ef90:	80800044 	addi	r2,r16,1
   2ef94:	1081ffcc 	andi	r2,r2,2047
   2ef98:	01000044 	movi	r4,1
   2ef9c:	2080a20e 	bge	r4,r2,2f228 <__subdf3+0x5d0>
   2efa0:	8989c83a 	sub	r4,r17,r6
   2efa4:	8905803a 	cmpltu	r2,r17,r4
   2efa8:	1967c83a 	sub	r19,r3,r5
   2efac:	98a7c83a 	sub	r19,r19,r2
   2efb0:	9880202c 	andhi	r2,r19,128
   2efb4:	10006326 	beq	r2,zero,2f144 <__subdf3+0x4ec>
   2efb8:	3463c83a 	sub	r17,r6,r17
   2efbc:	28c7c83a 	sub	r3,r5,r3
   2efc0:	344d803a 	cmpltu	r6,r6,r17
   2efc4:	19a7c83a 	sub	r19,r3,r6
   2efc8:	3825883a 	mov	r18,r7
   2efcc:	983f861e 	bne	r19,zero,2ede8 <_gp+0xffff1fc8>
   2efd0:	8809883a 	mov	r4,r17
   2efd4:	002f7580 	call	2f758 <__clzsi2>
   2efd8:	10800804 	addi	r2,r2,32
   2efdc:	113ffe04 	addi	r4,r2,-8
   2efe0:	00c007c4 	movi	r3,31
   2efe4:	193f850e 	bge	r3,r4,2edfc <_gp+0xffff1fdc>
   2efe8:	10bff604 	addi	r2,r2,-40
   2efec:	8884983a 	sll	r2,r17,r2
   2eff0:	0023883a 	mov	r17,zero
   2eff4:	243f880e 	bge	r4,r16,2ee18 <_gp+0xffff1ff8>
   2eff8:	00ffe034 	movhi	r3,65408
   2effc:	18ffffc4 	addi	r3,r3,-1
   2f000:	8121c83a 	sub	r16,r16,r4
   2f004:	10c6703a 	and	r3,r2,r3
   2f008:	003f3406 	br	2ecdc <_gp+0xffff1ebc>
   2f00c:	9100004c 	andi	r4,r18,1
   2f010:	000b883a 	mov	r5,zero
   2f014:	0005883a 	mov	r2,zero
   2f018:	003f4806 	br	2ed3c <_gp+0xffff1f1c>
   2f01c:	298cb03a 	or	r6,r5,r6
   2f020:	300cc03a 	cmpne	r6,r6,zero
   2f024:	0005883a 	mov	r2,zero
   2f028:	003f6406 	br	2edbc <_gp+0xffff1f9c>
   2f02c:	10009a1e 	bne	r2,zero,2f298 <__subdf3+0x640>
   2f030:	82400044 	addi	r9,r16,1
   2f034:	4881ffcc 	andi	r2,r9,2047
   2f038:	02800044 	movi	r10,1
   2f03c:	5080670e 	bge	r10,r2,2f1dc <__subdf3+0x584>
   2f040:	0081ffc4 	movi	r2,2047
   2f044:	4880af26 	beq	r9,r2,2f304 <__subdf3+0x6ac>
   2f048:	898d883a 	add	r6,r17,r6
   2f04c:	1945883a 	add	r2,r3,r5
   2f050:	3447803a 	cmpltu	r3,r6,r17
   2f054:	1887883a 	add	r3,r3,r2
   2f058:	182297fa 	slli	r17,r3,31
   2f05c:	300cd07a 	srli	r6,r6,1
   2f060:	1806d07a 	srli	r3,r3,1
   2f064:	4821883a 	mov	r16,r9
   2f068:	89a2b03a 	or	r17,r17,r6
   2f06c:	003f1b06 	br	2ecdc <_gp+0xffff1ebc>
   2f070:	0101ffc4 	movi	r4,2047
   2f074:	813f441e 	bne	r16,r4,2ed88 <_gp+0xffff1f68>
   2f078:	003f1806 	br	2ecdc <_gp+0xffff1ebc>
   2f07c:	843ff844 	addi	r16,r16,-31
   2f080:	01400804 	movi	r5,32
   2f084:	1408d83a 	srl	r4,r2,r16
   2f088:	19405026 	beq	r3,r5,2f1cc <__subdf3+0x574>
   2f08c:	01401004 	movi	r5,64
   2f090:	28c7c83a 	sub	r3,r5,r3
   2f094:	10c4983a 	sll	r2,r2,r3
   2f098:	88a2b03a 	or	r17,r17,r2
   2f09c:	8822c03a 	cmpne	r17,r17,zero
   2f0a0:	2462b03a 	or	r17,r4,r17
   2f0a4:	0007883a 	mov	r3,zero
   2f0a8:	0021883a 	mov	r16,zero
   2f0ac:	003f6d06 	br	2ee64 <_gp+0xffff2044>
   2f0b0:	11fff804 	addi	r7,r2,-32
   2f0b4:	01000804 	movi	r4,32
   2f0b8:	29ced83a 	srl	r7,r5,r7
   2f0bc:	11004526 	beq	r2,r4,2f1d4 <__subdf3+0x57c>
   2f0c0:	01001004 	movi	r4,64
   2f0c4:	2089c83a 	sub	r4,r4,r2
   2f0c8:	2904983a 	sll	r2,r5,r4
   2f0cc:	118cb03a 	or	r6,r2,r6
   2f0d0:	300cc03a 	cmpne	r6,r6,zero
   2f0d4:	398cb03a 	or	r6,r7,r6
   2f0d8:	0005883a 	mov	r2,zero
   2f0dc:	003f3706 	br	2edbc <_gp+0xffff1f9c>
   2f0e0:	80002a26 	beq	r16,zero,2f18c <__subdf3+0x534>
   2f0e4:	0101ffc4 	movi	r4,2047
   2f0e8:	49006626 	beq	r9,r4,2f284 <__subdf3+0x62c>
   2f0ec:	0085c83a 	sub	r2,zero,r2
   2f0f0:	18c02034 	orhi	r3,r3,128
   2f0f4:	01000e04 	movi	r4,56
   2f0f8:	20807e16 	blt	r4,r2,2f2f4 <__subdf3+0x69c>
   2f0fc:	010007c4 	movi	r4,31
   2f100:	2080e716 	blt	r4,r2,2f4a0 <__subdf3+0x848>
   2f104:	01000804 	movi	r4,32
   2f108:	2089c83a 	sub	r4,r4,r2
   2f10c:	1914983a 	sll	r10,r3,r4
   2f110:	8890d83a 	srl	r8,r17,r2
   2f114:	8908983a 	sll	r4,r17,r4
   2f118:	1884d83a 	srl	r2,r3,r2
   2f11c:	5222b03a 	or	r17,r10,r8
   2f120:	2006c03a 	cmpne	r3,r4,zero
   2f124:	88e2b03a 	or	r17,r17,r3
   2f128:	3463c83a 	sub	r17,r6,r17
   2f12c:	2885c83a 	sub	r2,r5,r2
   2f130:	344d803a 	cmpltu	r6,r6,r17
   2f134:	1187c83a 	sub	r3,r2,r6
   2f138:	4821883a 	mov	r16,r9
   2f13c:	3825883a 	mov	r18,r7
   2f140:	003f2306 	br	2edd0 <_gp+0xffff1fb0>
   2f144:	24d0b03a 	or	r8,r4,r19
   2f148:	40001b1e 	bne	r8,zero,2f1b8 <__subdf3+0x560>
   2f14c:	0005883a 	mov	r2,zero
   2f150:	0009883a 	mov	r4,zero
   2f154:	0021883a 	mov	r16,zero
   2f158:	003f4906 	br	2ee80 <_gp+0xffff2060>
   2f15c:	010007c4 	movi	r4,31
   2f160:	20803a16 	blt	r4,r2,2f24c <__subdf3+0x5f4>
   2f164:	01000804 	movi	r4,32
   2f168:	2089c83a 	sub	r4,r4,r2
   2f16c:	2912983a 	sll	r9,r5,r4
   2f170:	3090d83a 	srl	r8,r6,r2
   2f174:	3108983a 	sll	r4,r6,r4
   2f178:	2884d83a 	srl	r2,r5,r2
   2f17c:	4a12b03a 	or	r9,r9,r8
   2f180:	2008c03a 	cmpne	r4,r4,zero
   2f184:	4912b03a 	or	r9,r9,r4
   2f188:	003f4e06 	br	2eec4 <_gp+0xffff20a4>
   2f18c:	1c48b03a 	or	r4,r3,r17
   2f190:	20003c26 	beq	r4,zero,2f284 <__subdf3+0x62c>
   2f194:	0084303a 	nor	r2,zero,r2
   2f198:	1000381e 	bne	r2,zero,2f27c <__subdf3+0x624>
   2f19c:	3463c83a 	sub	r17,r6,r17
   2f1a0:	28c5c83a 	sub	r2,r5,r3
   2f1a4:	344d803a 	cmpltu	r6,r6,r17
   2f1a8:	1187c83a 	sub	r3,r2,r6
   2f1ac:	4821883a 	mov	r16,r9
   2f1b0:	3825883a 	mov	r18,r7
   2f1b4:	003f0606 	br	2edd0 <_gp+0xffff1fb0>
   2f1b8:	2023883a 	mov	r17,r4
   2f1bc:	003f0906 	br	2ede4 <_gp+0xffff1fc4>
   2f1c0:	0101ffc4 	movi	r4,2047
   2f1c4:	813f3a1e 	bne	r16,r4,2eeb0 <_gp+0xffff2090>
   2f1c8:	003ec406 	br	2ecdc <_gp+0xffff1ebc>
   2f1cc:	0005883a 	mov	r2,zero
   2f1d0:	003fb106 	br	2f098 <_gp+0xffff2278>
   2f1d4:	0005883a 	mov	r2,zero
   2f1d8:	003fbc06 	br	2f0cc <_gp+0xffff22ac>
   2f1dc:	1c44b03a 	or	r2,r3,r17
   2f1e0:	80008e1e 	bne	r16,zero,2f41c <__subdf3+0x7c4>
   2f1e4:	1000c826 	beq	r2,zero,2f508 <__subdf3+0x8b0>
   2f1e8:	2984b03a 	or	r2,r5,r6
   2f1ec:	103ebb26 	beq	r2,zero,2ecdc <_gp+0xffff1ebc>
   2f1f0:	8989883a 	add	r4,r17,r6
   2f1f4:	1945883a 	add	r2,r3,r5
   2f1f8:	2447803a 	cmpltu	r3,r4,r17
   2f1fc:	1887883a 	add	r3,r3,r2
   2f200:	1880202c 	andhi	r2,r3,128
   2f204:	2023883a 	mov	r17,r4
   2f208:	103f1626 	beq	r2,zero,2ee64 <_gp+0xffff2044>
   2f20c:	00bfe034 	movhi	r2,65408
   2f210:	10bfffc4 	addi	r2,r2,-1
   2f214:	5021883a 	mov	r16,r10
   2f218:	1886703a 	and	r3,r3,r2
   2f21c:	003eaf06 	br	2ecdc <_gp+0xffff1ebc>
   2f220:	3825883a 	mov	r18,r7
   2f224:	003f0f06 	br	2ee64 <_gp+0xffff2044>
   2f228:	1c44b03a 	or	r2,r3,r17
   2f22c:	8000251e 	bne	r16,zero,2f2c4 <__subdf3+0x66c>
   2f230:	1000661e 	bne	r2,zero,2f3cc <__subdf3+0x774>
   2f234:	2990b03a 	or	r8,r5,r6
   2f238:	40009626 	beq	r8,zero,2f494 <__subdf3+0x83c>
   2f23c:	2807883a 	mov	r3,r5
   2f240:	3023883a 	mov	r17,r6
   2f244:	3825883a 	mov	r18,r7
   2f248:	003ea406 	br	2ecdc <_gp+0xffff1ebc>
   2f24c:	127ff804 	addi	r9,r2,-32
   2f250:	01000804 	movi	r4,32
   2f254:	2a52d83a 	srl	r9,r5,r9
   2f258:	11008c26 	beq	r2,r4,2f48c <__subdf3+0x834>
   2f25c:	01001004 	movi	r4,64
   2f260:	2085c83a 	sub	r2,r4,r2
   2f264:	2884983a 	sll	r2,r5,r2
   2f268:	118cb03a 	or	r6,r2,r6
   2f26c:	300cc03a 	cmpne	r6,r6,zero
   2f270:	4992b03a 	or	r9,r9,r6
   2f274:	0005883a 	mov	r2,zero
   2f278:	003f1206 	br	2eec4 <_gp+0xffff20a4>
   2f27c:	0101ffc4 	movi	r4,2047
   2f280:	493f9c1e 	bne	r9,r4,2f0f4 <_gp+0xffff22d4>
   2f284:	2807883a 	mov	r3,r5
   2f288:	3023883a 	mov	r17,r6
   2f28c:	4821883a 	mov	r16,r9
   2f290:	3825883a 	mov	r18,r7
   2f294:	003e9106 	br	2ecdc <_gp+0xffff1ebc>
   2f298:	80001f1e 	bne	r16,zero,2f318 <__subdf3+0x6c0>
   2f29c:	1c48b03a 	or	r4,r3,r17
   2f2a0:	20005a26 	beq	r4,zero,2f40c <__subdf3+0x7b4>
   2f2a4:	0084303a 	nor	r2,zero,r2
   2f2a8:	1000561e 	bne	r2,zero,2f404 <__subdf3+0x7ac>
   2f2ac:	89a3883a 	add	r17,r17,r6
   2f2b0:	1945883a 	add	r2,r3,r5
   2f2b4:	898d803a 	cmpltu	r6,r17,r6
   2f2b8:	3087883a 	add	r3,r6,r2
   2f2bc:	4821883a 	mov	r16,r9
   2f2c0:	003f0506 	br	2eed8 <_gp+0xffff20b8>
   2f2c4:	10002b1e 	bne	r2,zero,2f374 <__subdf3+0x71c>
   2f2c8:	2984b03a 	or	r2,r5,r6
   2f2cc:	10008026 	beq	r2,zero,2f4d0 <__subdf3+0x878>
   2f2d0:	2807883a 	mov	r3,r5
   2f2d4:	3023883a 	mov	r17,r6
   2f2d8:	3825883a 	mov	r18,r7
   2f2dc:	0401ffc4 	movi	r16,2047
   2f2e0:	003e7e06 	br	2ecdc <_gp+0xffff1ebc>
   2f2e4:	3809883a 	mov	r4,r7
   2f2e8:	0011883a 	mov	r8,zero
   2f2ec:	0005883a 	mov	r2,zero
   2f2f0:	003ee306 	br	2ee80 <_gp+0xffff2060>
   2f2f4:	1c62b03a 	or	r17,r3,r17
   2f2f8:	8822c03a 	cmpne	r17,r17,zero
   2f2fc:	0005883a 	mov	r2,zero
   2f300:	003f8906 	br	2f128 <_gp+0xffff2308>
   2f304:	3809883a 	mov	r4,r7
   2f308:	4821883a 	mov	r16,r9
   2f30c:	0011883a 	mov	r8,zero
   2f310:	0005883a 	mov	r2,zero
   2f314:	003eda06 	br	2ee80 <_gp+0xffff2060>
   2f318:	0101ffc4 	movi	r4,2047
   2f31c:	49003b26 	beq	r9,r4,2f40c <__subdf3+0x7b4>
   2f320:	0085c83a 	sub	r2,zero,r2
   2f324:	18c02034 	orhi	r3,r3,128
   2f328:	01000e04 	movi	r4,56
   2f32c:	20806e16 	blt	r4,r2,2f4e8 <__subdf3+0x890>
   2f330:	010007c4 	movi	r4,31
   2f334:	20807716 	blt	r4,r2,2f514 <__subdf3+0x8bc>
   2f338:	01000804 	movi	r4,32
   2f33c:	2089c83a 	sub	r4,r4,r2
   2f340:	1914983a 	sll	r10,r3,r4
   2f344:	8890d83a 	srl	r8,r17,r2
   2f348:	8908983a 	sll	r4,r17,r4
   2f34c:	1884d83a 	srl	r2,r3,r2
   2f350:	5222b03a 	or	r17,r10,r8
   2f354:	2006c03a 	cmpne	r3,r4,zero
   2f358:	88e2b03a 	or	r17,r17,r3
   2f35c:	89a3883a 	add	r17,r17,r6
   2f360:	1145883a 	add	r2,r2,r5
   2f364:	898d803a 	cmpltu	r6,r17,r6
   2f368:	3087883a 	add	r3,r6,r2
   2f36c:	4821883a 	mov	r16,r9
   2f370:	003ed906 	br	2eed8 <_gp+0xffff20b8>
   2f374:	2984b03a 	or	r2,r5,r6
   2f378:	10004226 	beq	r2,zero,2f484 <__subdf3+0x82c>
   2f37c:	1808d0fa 	srli	r4,r3,3
   2f380:	8822d0fa 	srli	r17,r17,3
   2f384:	1806977a 	slli	r3,r3,29
   2f388:	2080022c 	andhi	r2,r4,8
   2f38c:	1c62b03a 	or	r17,r3,r17
   2f390:	10000826 	beq	r2,zero,2f3b4 <__subdf3+0x75c>
   2f394:	2812d0fa 	srli	r9,r5,3
   2f398:	4880022c 	andhi	r2,r9,8
   2f39c:	1000051e 	bne	r2,zero,2f3b4 <__subdf3+0x75c>
   2f3a0:	300cd0fa 	srli	r6,r6,3
   2f3a4:	2804977a 	slli	r2,r5,29
   2f3a8:	4809883a 	mov	r4,r9
   2f3ac:	3825883a 	mov	r18,r7
   2f3b0:	11a2b03a 	or	r17,r2,r6
   2f3b4:	8806d77a 	srli	r3,r17,29
   2f3b8:	200890fa 	slli	r4,r4,3
   2f3bc:	882290fa 	slli	r17,r17,3
   2f3c0:	0401ffc4 	movi	r16,2047
   2f3c4:	1906b03a 	or	r3,r3,r4
   2f3c8:	003e4406 	br	2ecdc <_gp+0xffff1ebc>
   2f3cc:	2984b03a 	or	r2,r5,r6
   2f3d0:	103e4226 	beq	r2,zero,2ecdc <_gp+0xffff1ebc>
   2f3d4:	8989c83a 	sub	r4,r17,r6
   2f3d8:	8911803a 	cmpltu	r8,r17,r4
   2f3dc:	1945c83a 	sub	r2,r3,r5
   2f3e0:	1205c83a 	sub	r2,r2,r8
   2f3e4:	1200202c 	andhi	r8,r2,128
   2f3e8:	403e9a26 	beq	r8,zero,2ee54 <_gp+0xffff2034>
   2f3ec:	3463c83a 	sub	r17,r6,r17
   2f3f0:	28c5c83a 	sub	r2,r5,r3
   2f3f4:	344d803a 	cmpltu	r6,r6,r17
   2f3f8:	1187c83a 	sub	r3,r2,r6
   2f3fc:	3825883a 	mov	r18,r7
   2f400:	003e3606 	br	2ecdc <_gp+0xffff1ebc>
   2f404:	0101ffc4 	movi	r4,2047
   2f408:	493fc71e 	bne	r9,r4,2f328 <_gp+0xffff2508>
   2f40c:	2807883a 	mov	r3,r5
   2f410:	3023883a 	mov	r17,r6
   2f414:	4821883a 	mov	r16,r9
   2f418:	003e3006 	br	2ecdc <_gp+0xffff1ebc>
   2f41c:	10003626 	beq	r2,zero,2f4f8 <__subdf3+0x8a0>
   2f420:	2984b03a 	or	r2,r5,r6
   2f424:	10001726 	beq	r2,zero,2f484 <__subdf3+0x82c>
   2f428:	1808d0fa 	srli	r4,r3,3
   2f42c:	8822d0fa 	srli	r17,r17,3
   2f430:	1806977a 	slli	r3,r3,29
   2f434:	2080022c 	andhi	r2,r4,8
   2f438:	1c62b03a 	or	r17,r3,r17
   2f43c:	10000726 	beq	r2,zero,2f45c <__subdf3+0x804>
   2f440:	2812d0fa 	srli	r9,r5,3
   2f444:	4880022c 	andhi	r2,r9,8
   2f448:	1000041e 	bne	r2,zero,2f45c <__subdf3+0x804>
   2f44c:	300cd0fa 	srli	r6,r6,3
   2f450:	2804977a 	slli	r2,r5,29
   2f454:	4809883a 	mov	r4,r9
   2f458:	11a2b03a 	or	r17,r2,r6
   2f45c:	8806d77a 	srli	r3,r17,29
   2f460:	200890fa 	slli	r4,r4,3
   2f464:	882290fa 	slli	r17,r17,3
   2f468:	3825883a 	mov	r18,r7
   2f46c:	1906b03a 	or	r3,r3,r4
   2f470:	0401ffc4 	movi	r16,2047
   2f474:	003e1906 	br	2ecdc <_gp+0xffff1ebc>
   2f478:	000b883a 	mov	r5,zero
   2f47c:	0005883a 	mov	r2,zero
   2f480:	003e2e06 	br	2ed3c <_gp+0xffff1f1c>
   2f484:	0401ffc4 	movi	r16,2047
   2f488:	003e1406 	br	2ecdc <_gp+0xffff1ebc>
   2f48c:	0005883a 	mov	r2,zero
   2f490:	003f7506 	br	2f268 <_gp+0xffff2448>
   2f494:	0005883a 	mov	r2,zero
   2f498:	0009883a 	mov	r4,zero
   2f49c:	003e7806 	br	2ee80 <_gp+0xffff2060>
   2f4a0:	123ff804 	addi	r8,r2,-32
   2f4a4:	01000804 	movi	r4,32
   2f4a8:	1a10d83a 	srl	r8,r3,r8
   2f4ac:	11002526 	beq	r2,r4,2f544 <__subdf3+0x8ec>
   2f4b0:	01001004 	movi	r4,64
   2f4b4:	2085c83a 	sub	r2,r4,r2
   2f4b8:	1884983a 	sll	r2,r3,r2
   2f4bc:	1444b03a 	or	r2,r2,r17
   2f4c0:	1004c03a 	cmpne	r2,r2,zero
   2f4c4:	40a2b03a 	or	r17,r8,r2
   2f4c8:	0005883a 	mov	r2,zero
   2f4cc:	003f1606 	br	2f128 <_gp+0xffff2308>
   2f4d0:	02000434 	movhi	r8,16
   2f4d4:	0009883a 	mov	r4,zero
   2f4d8:	423fffc4 	addi	r8,r8,-1
   2f4dc:	00bfffc4 	movi	r2,-1
   2f4e0:	0401ffc4 	movi	r16,2047
   2f4e4:	003e6606 	br	2ee80 <_gp+0xffff2060>
   2f4e8:	1c62b03a 	or	r17,r3,r17
   2f4ec:	8822c03a 	cmpne	r17,r17,zero
   2f4f0:	0005883a 	mov	r2,zero
   2f4f4:	003f9906 	br	2f35c <_gp+0xffff253c>
   2f4f8:	2807883a 	mov	r3,r5
   2f4fc:	3023883a 	mov	r17,r6
   2f500:	0401ffc4 	movi	r16,2047
   2f504:	003df506 	br	2ecdc <_gp+0xffff1ebc>
   2f508:	2807883a 	mov	r3,r5
   2f50c:	3023883a 	mov	r17,r6
   2f510:	003df206 	br	2ecdc <_gp+0xffff1ebc>
   2f514:	123ff804 	addi	r8,r2,-32
   2f518:	01000804 	movi	r4,32
   2f51c:	1a10d83a 	srl	r8,r3,r8
   2f520:	11000a26 	beq	r2,r4,2f54c <__subdf3+0x8f4>
   2f524:	01001004 	movi	r4,64
   2f528:	2085c83a 	sub	r2,r4,r2
   2f52c:	1884983a 	sll	r2,r3,r2
   2f530:	1444b03a 	or	r2,r2,r17
   2f534:	1004c03a 	cmpne	r2,r2,zero
   2f538:	40a2b03a 	or	r17,r8,r2
   2f53c:	0005883a 	mov	r2,zero
   2f540:	003f8606 	br	2f35c <_gp+0xffff253c>
   2f544:	0005883a 	mov	r2,zero
   2f548:	003fdc06 	br	2f4bc <_gp+0xffff269c>
   2f54c:	0005883a 	mov	r2,zero
   2f550:	003ff706 	br	2f530 <_gp+0xffff2710>

0002f554 <__fixdfsi>:
   2f554:	280cd53a 	srli	r6,r5,20
   2f558:	00c00434 	movhi	r3,16
   2f55c:	18ffffc4 	addi	r3,r3,-1
   2f560:	3181ffcc 	andi	r6,r6,2047
   2f564:	01c0ff84 	movi	r7,1022
   2f568:	28c6703a 	and	r3,r5,r3
   2f56c:	280ad7fa 	srli	r5,r5,31
   2f570:	3980120e 	bge	r7,r6,2f5bc <__fixdfsi+0x68>
   2f574:	00810744 	movi	r2,1053
   2f578:	11800c16 	blt	r2,r6,2f5ac <__fixdfsi+0x58>
   2f57c:	00810cc4 	movi	r2,1075
   2f580:	1185c83a 	sub	r2,r2,r6
   2f584:	01c007c4 	movi	r7,31
   2f588:	18c00434 	orhi	r3,r3,16
   2f58c:	38800d16 	blt	r7,r2,2f5c4 <__fixdfsi+0x70>
   2f590:	31befb44 	addi	r6,r6,-1043
   2f594:	2084d83a 	srl	r2,r4,r2
   2f598:	1986983a 	sll	r3,r3,r6
   2f59c:	1884b03a 	or	r2,r3,r2
   2f5a0:	28000726 	beq	r5,zero,2f5c0 <__fixdfsi+0x6c>
   2f5a4:	0085c83a 	sub	r2,zero,r2
   2f5a8:	f800283a 	ret
   2f5ac:	00a00034 	movhi	r2,32768
   2f5b0:	10bfffc4 	addi	r2,r2,-1
   2f5b4:	2885883a 	add	r2,r5,r2
   2f5b8:	f800283a 	ret
   2f5bc:	0005883a 	mov	r2,zero
   2f5c0:	f800283a 	ret
   2f5c4:	008104c4 	movi	r2,1043
   2f5c8:	1185c83a 	sub	r2,r2,r6
   2f5cc:	1884d83a 	srl	r2,r3,r2
   2f5d0:	003ff306 	br	2f5a0 <_gp+0xffff2780>

0002f5d4 <__floatsidf>:
   2f5d4:	defffd04 	addi	sp,sp,-12
   2f5d8:	dfc00215 	stw	ra,8(sp)
   2f5dc:	dc400115 	stw	r17,4(sp)
   2f5e0:	dc000015 	stw	r16,0(sp)
   2f5e4:	20002b26 	beq	r4,zero,2f694 <__floatsidf+0xc0>
   2f5e8:	2023883a 	mov	r17,r4
   2f5ec:	2020d7fa 	srli	r16,r4,31
   2f5f0:	20002d16 	blt	r4,zero,2f6a8 <__floatsidf+0xd4>
   2f5f4:	8809883a 	mov	r4,r17
   2f5f8:	002f7580 	call	2f758 <__clzsi2>
   2f5fc:	01410784 	movi	r5,1054
   2f600:	288bc83a 	sub	r5,r5,r2
   2f604:	01010cc4 	movi	r4,1075
   2f608:	2149c83a 	sub	r4,r4,r5
   2f60c:	00c007c4 	movi	r3,31
   2f610:	1900160e 	bge	r3,r4,2f66c <__floatsidf+0x98>
   2f614:	00c104c4 	movi	r3,1043
   2f618:	1947c83a 	sub	r3,r3,r5
   2f61c:	88c6983a 	sll	r3,r17,r3
   2f620:	00800434 	movhi	r2,16
   2f624:	10bfffc4 	addi	r2,r2,-1
   2f628:	1886703a 	and	r3,r3,r2
   2f62c:	2941ffcc 	andi	r5,r5,2047
   2f630:	800d883a 	mov	r6,r16
   2f634:	0005883a 	mov	r2,zero
   2f638:	280a953a 	slli	r5,r5,20
   2f63c:	31803fcc 	andi	r6,r6,255
   2f640:	01000434 	movhi	r4,16
   2f644:	300c97fa 	slli	r6,r6,31
   2f648:	213fffc4 	addi	r4,r4,-1
   2f64c:	1906703a 	and	r3,r3,r4
   2f650:	1946b03a 	or	r3,r3,r5
   2f654:	1986b03a 	or	r3,r3,r6
   2f658:	dfc00217 	ldw	ra,8(sp)
   2f65c:	dc400117 	ldw	r17,4(sp)
   2f660:	dc000017 	ldw	r16,0(sp)
   2f664:	dec00304 	addi	sp,sp,12
   2f668:	f800283a 	ret
   2f66c:	00c002c4 	movi	r3,11
   2f670:	1887c83a 	sub	r3,r3,r2
   2f674:	88c6d83a 	srl	r3,r17,r3
   2f678:	8904983a 	sll	r2,r17,r4
   2f67c:	01000434 	movhi	r4,16
   2f680:	213fffc4 	addi	r4,r4,-1
   2f684:	2941ffcc 	andi	r5,r5,2047
   2f688:	1906703a 	and	r3,r3,r4
   2f68c:	800d883a 	mov	r6,r16
   2f690:	003fe906 	br	2f638 <_gp+0xffff2818>
   2f694:	000d883a 	mov	r6,zero
   2f698:	000b883a 	mov	r5,zero
   2f69c:	0007883a 	mov	r3,zero
   2f6a0:	0005883a 	mov	r2,zero
   2f6a4:	003fe406 	br	2f638 <_gp+0xffff2818>
   2f6a8:	0123c83a 	sub	r17,zero,r4
   2f6ac:	003fd106 	br	2f5f4 <_gp+0xffff27d4>

0002f6b0 <__floatunsidf>:
   2f6b0:	defffe04 	addi	sp,sp,-8
   2f6b4:	dc000015 	stw	r16,0(sp)
   2f6b8:	dfc00115 	stw	ra,4(sp)
   2f6bc:	2021883a 	mov	r16,r4
   2f6c0:	20002226 	beq	r4,zero,2f74c <__floatunsidf+0x9c>
   2f6c4:	002f7580 	call	2f758 <__clzsi2>
   2f6c8:	01010784 	movi	r4,1054
   2f6cc:	2089c83a 	sub	r4,r4,r2
   2f6d0:	01810cc4 	movi	r6,1075
   2f6d4:	310dc83a 	sub	r6,r6,r4
   2f6d8:	00c007c4 	movi	r3,31
   2f6dc:	1980120e 	bge	r3,r6,2f728 <__floatunsidf+0x78>
   2f6e0:	00c104c4 	movi	r3,1043
   2f6e4:	1907c83a 	sub	r3,r3,r4
   2f6e8:	80ca983a 	sll	r5,r16,r3
   2f6ec:	00800434 	movhi	r2,16
   2f6f0:	10bfffc4 	addi	r2,r2,-1
   2f6f4:	2101ffcc 	andi	r4,r4,2047
   2f6f8:	0021883a 	mov	r16,zero
   2f6fc:	288a703a 	and	r5,r5,r2
   2f700:	2008953a 	slli	r4,r4,20
   2f704:	00c00434 	movhi	r3,16
   2f708:	18ffffc4 	addi	r3,r3,-1
   2f70c:	28c6703a 	and	r3,r5,r3
   2f710:	8005883a 	mov	r2,r16
   2f714:	1906b03a 	or	r3,r3,r4
   2f718:	dfc00117 	ldw	ra,4(sp)
   2f71c:	dc000017 	ldw	r16,0(sp)
   2f720:	dec00204 	addi	sp,sp,8
   2f724:	f800283a 	ret
   2f728:	00c002c4 	movi	r3,11
   2f72c:	188bc83a 	sub	r5,r3,r2
   2f730:	814ad83a 	srl	r5,r16,r5
   2f734:	00c00434 	movhi	r3,16
   2f738:	18ffffc4 	addi	r3,r3,-1
   2f73c:	81a0983a 	sll	r16,r16,r6
   2f740:	2101ffcc 	andi	r4,r4,2047
   2f744:	28ca703a 	and	r5,r5,r3
   2f748:	003fed06 	br	2f700 <_gp+0xffff28e0>
   2f74c:	0009883a 	mov	r4,zero
   2f750:	000b883a 	mov	r5,zero
   2f754:	003fea06 	br	2f700 <_gp+0xffff28e0>

0002f758 <__clzsi2>:
   2f758:	00bfffd4 	movui	r2,65535
   2f75c:	11000536 	bltu	r2,r4,2f774 <__clzsi2+0x1c>
   2f760:	00803fc4 	movi	r2,255
   2f764:	11000f36 	bltu	r2,r4,2f7a4 <__clzsi2+0x4c>
   2f768:	00800804 	movi	r2,32
   2f76c:	0007883a 	mov	r3,zero
   2f770:	00000506 	br	2f788 <__clzsi2+0x30>
   2f774:	00804034 	movhi	r2,256
   2f778:	10bfffc4 	addi	r2,r2,-1
   2f77c:	11000c2e 	bgeu	r2,r4,2f7b0 <__clzsi2+0x58>
   2f780:	00800204 	movi	r2,8
   2f784:	00c00604 	movi	r3,24
   2f788:	20c8d83a 	srl	r4,r4,r3
   2f78c:	00c000f4 	movhi	r3,3
   2f790:	18cc5b04 	addi	r3,r3,12652
   2f794:	1909883a 	add	r4,r3,r4
   2f798:	20c00003 	ldbu	r3,0(r4)
   2f79c:	10c5c83a 	sub	r2,r2,r3
   2f7a0:	f800283a 	ret
   2f7a4:	00800604 	movi	r2,24
   2f7a8:	00c00204 	movi	r3,8
   2f7ac:	003ff606 	br	2f788 <_gp+0xffff2968>
   2f7b0:	00800404 	movi	r2,16
   2f7b4:	1007883a 	mov	r3,r2
   2f7b8:	003ff306 	br	2f788 <_gp+0xffff2968>

0002f7bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2f7bc:	defffe04 	addi	sp,sp,-8
   2f7c0:	dfc00115 	stw	ra,4(sp)
   2f7c4:	df000015 	stw	fp,0(sp)
   2f7c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2f7cc:	d0a01917 	ldw	r2,-32668(gp)
   2f7d0:	10000326 	beq	r2,zero,2f7e0 <alt_get_errno+0x24>
   2f7d4:	d0a01917 	ldw	r2,-32668(gp)
   2f7d8:	103ee83a 	callr	r2
   2f7dc:	00000106 	br	2f7e4 <alt_get_errno+0x28>
   2f7e0:	d0a71e04 	addi	r2,gp,-25480
}
   2f7e4:	e037883a 	mov	sp,fp
   2f7e8:	dfc00117 	ldw	ra,4(sp)
   2f7ec:	df000017 	ldw	fp,0(sp)
   2f7f0:	dec00204 	addi	sp,sp,8
   2f7f4:	f800283a 	ret

0002f7f8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   2f7f8:	defffb04 	addi	sp,sp,-20
   2f7fc:	dfc00415 	stw	ra,16(sp)
   2f800:	df000315 	stw	fp,12(sp)
   2f804:	df000304 	addi	fp,sp,12
   2f808:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   2f80c:	e0bfff17 	ldw	r2,-4(fp)
   2f810:	10000616 	blt	r2,zero,2f82c <close+0x34>
   2f814:	e0bfff17 	ldw	r2,-4(fp)
   2f818:	10c00324 	muli	r3,r2,12
   2f81c:	008000f4 	movhi	r2,3
   2f820:	108edf04 	addi	r2,r2,15228
   2f824:	1885883a 	add	r2,r3,r2
   2f828:	00000106 	br	2f830 <close+0x38>
   2f82c:	0005883a 	mov	r2,zero
   2f830:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   2f834:	e0bffd17 	ldw	r2,-12(fp)
   2f838:	10001926 	beq	r2,zero,2f8a0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   2f83c:	e0bffd17 	ldw	r2,-12(fp)
   2f840:	10800017 	ldw	r2,0(r2)
   2f844:	10800417 	ldw	r2,16(r2)
   2f848:	10000626 	beq	r2,zero,2f864 <close+0x6c>
   2f84c:	e0bffd17 	ldw	r2,-12(fp)
   2f850:	10800017 	ldw	r2,0(r2)
   2f854:	10800417 	ldw	r2,16(r2)
   2f858:	e13ffd17 	ldw	r4,-12(fp)
   2f85c:	103ee83a 	callr	r2
   2f860:	00000106 	br	2f868 <close+0x70>
   2f864:	0005883a 	mov	r2,zero
   2f868:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   2f86c:	e13fff17 	ldw	r4,-4(fp)
   2f870:	00304280 	call	30428 <alt_release_fd>
    if (rval < 0)
   2f874:	e0bffe17 	ldw	r2,-8(fp)
   2f878:	1000070e 	bge	r2,zero,2f898 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   2f87c:	002f7bc0 	call	2f7bc <alt_get_errno>
   2f880:	1007883a 	mov	r3,r2
   2f884:	e0bffe17 	ldw	r2,-8(fp)
   2f888:	0085c83a 	sub	r2,zero,r2
   2f88c:	18800015 	stw	r2,0(r3)
      return -1;
   2f890:	00bfffc4 	movi	r2,-1
   2f894:	00000706 	br	2f8b4 <close+0xbc>
    }
    return 0;
   2f898:	0005883a 	mov	r2,zero
   2f89c:	00000506 	br	2f8b4 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2f8a0:	002f7bc0 	call	2f7bc <alt_get_errno>
   2f8a4:	1007883a 	mov	r3,r2
   2f8a8:	00801444 	movi	r2,81
   2f8ac:	18800015 	stw	r2,0(r3)
    return -1;
   2f8b0:	00bfffc4 	movi	r2,-1
  }
}
   2f8b4:	e037883a 	mov	sp,fp
   2f8b8:	dfc00117 	ldw	ra,4(sp)
   2f8bc:	df000017 	ldw	fp,0(sp)
   2f8c0:	dec00204 	addi	sp,sp,8
   2f8c4:	f800283a 	ret

0002f8c8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   2f8c8:	defffc04 	addi	sp,sp,-16
   2f8cc:	df000315 	stw	fp,12(sp)
   2f8d0:	df000304 	addi	fp,sp,12
   2f8d4:	e13ffd15 	stw	r4,-12(fp)
   2f8d8:	e17ffe15 	stw	r5,-8(fp)
   2f8dc:	e1bfff15 	stw	r6,-4(fp)
  return len;
   2f8e0:	e0bfff17 	ldw	r2,-4(fp)
}
   2f8e4:	e037883a 	mov	sp,fp
   2f8e8:	df000017 	ldw	fp,0(sp)
   2f8ec:	dec00104 	addi	sp,sp,4
   2f8f0:	f800283a 	ret

0002f8f4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   2f8f4:	defffd04 	addi	sp,sp,-12
   2f8f8:	df000215 	stw	fp,8(sp)
   2f8fc:	df000204 	addi	fp,sp,8
   2f900:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   2f904:	0001883a 	nop
   2f908:	e0bfff17 	ldw	r2,-4(fp)
   2f90c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   2f910:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   2f914:	10000226 	beq	r2,zero,2f920 <_exit+0x2c>
    ALT_SIM_FAIL();
   2f918:	002af070 	cmpltui	zero,zero,43969
   2f91c:	00000106 	br	2f924 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   2f920:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   2f924:	003fff06 	br	2f924 <_gp+0xffff2b04>

0002f928 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2f928:	defffe04 	addi	sp,sp,-8
   2f92c:	dfc00115 	stw	ra,4(sp)
   2f930:	df000015 	stw	fp,0(sp)
   2f934:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2f938:	d0a01917 	ldw	r2,-32668(gp)
   2f93c:	10000326 	beq	r2,zero,2f94c <alt_get_errno+0x24>
   2f940:	d0a01917 	ldw	r2,-32668(gp)
   2f944:	103ee83a 	callr	r2
   2f948:	00000106 	br	2f950 <alt_get_errno+0x28>
   2f94c:	d0a71e04 	addi	r2,gp,-25480
}
   2f950:	e037883a 	mov	sp,fp
   2f954:	dfc00117 	ldw	ra,4(sp)
   2f958:	df000017 	ldw	fp,0(sp)
   2f95c:	dec00204 	addi	sp,sp,8
   2f960:	f800283a 	ret

0002f964 <fcntl>:
 *
 * ALT_FCNTL is mapped onto the fcntl() system call in alt_syscall.h
 */
 
int ALT_FCNTL (int file, int cmd, ...)
{ 
   2f964:	defff704 	addi	sp,sp,-36
   2f968:	dfc00615 	stw	ra,24(sp)
   2f96c:	df000515 	stw	fp,20(sp)
   2f970:	df000504 	addi	fp,sp,20
   2f974:	e13ffe15 	stw	r4,-8(fp)
   2f978:	e17fff15 	stw	r5,-4(fp)
   2f97c:	e1800215 	stw	r6,8(fp)
   2f980:	e1c00315 	stw	r7,12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2f984:	e0bffe17 	ldw	r2,-8(fp)
   2f988:	10000616 	blt	r2,zero,2f9a4 <fcntl+0x40>
   2f98c:	e0bffe17 	ldw	r2,-8(fp)
   2f990:	10c00324 	muli	r3,r2,12
   2f994:	008000f4 	movhi	r2,3
   2f998:	108edf04 	addi	r2,r2,15228
   2f99c:	1885883a 	add	r2,r3,r2
   2f9a0:	00000106 	br	2f9a8 <fcntl+0x44>
   2f9a4:	0005883a 	mov	r2,zero
   2f9a8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   2f9ac:	e0bffb17 	ldw	r2,-20(fp)
   2f9b0:	10002a26 	beq	r2,zero,2fa5c <fcntl+0xf8>
  {
    switch (cmd)
   2f9b4:	e0bfff17 	ldw	r2,-4(fp)
   2f9b8:	10c000e0 	cmpeqi	r3,r2,3
   2f9bc:	1800031e 	bne	r3,zero,2f9cc <fcntl+0x68>
   2f9c0:	10800120 	cmpeqi	r2,r2,4
   2f9c4:	1000071e 	bne	r2,zero,2f9e4 <fcntl+0x80>
   2f9c8:	00001e06 	br	2fa44 <fcntl+0xe0>
    {
    case F_GETFL:
      return fd->fd_flags & ~((alt_u32) ALT_FD_FLAGS_MASK);
   2f9cc:	e0bffb17 	ldw	r2,-20(fp)
   2f9d0:	10c00217 	ldw	r3,8(r2)
   2f9d4:	00900034 	movhi	r2,16384
   2f9d8:	10bfffc4 	addi	r2,r2,-1
   2f9dc:	1884703a 	and	r2,r3,r2
   2f9e0:	00002306 	br	2fa70 <fcntl+0x10c>
    case F_SETFL:
      va_start(argp, cmd);
   2f9e4:	e0800204 	addi	r2,fp,8
   2f9e8:	e0bffd15 	stw	r2,-12(fp)
      flags = va_arg(argp, long);
   2f9ec:	e0bffd17 	ldw	r2,-12(fp)
   2f9f0:	10c00104 	addi	r3,r2,4
   2f9f4:	e0fffd15 	stw	r3,-12(fp)
   2f9f8:	10800017 	ldw	r2,0(r2)
   2f9fc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags &= ~ALT_FCNTL_FLAGS_MASK;
   2fa00:	e0bffb17 	ldw	r2,-20(fp)
   2fa04:	10c00217 	ldw	r3,8(r2)
   2fa08:	00affdc4 	movi	r2,-16393
   2fa0c:	1886703a 	and	r3,r3,r2
   2fa10:	e0bffb17 	ldw	r2,-20(fp)
   2fa14:	10c00215 	stw	r3,8(r2)
      fd->fd_flags |= (flags & ALT_FCNTL_FLAGS_MASK);
   2fa18:	e0bffb17 	ldw	r2,-20(fp)
   2fa1c:	10800217 	ldw	r2,8(r2)
   2fa20:	1007883a 	mov	r3,r2
   2fa24:	e0bffc17 	ldw	r2,-16(fp)
   2fa28:	1090020c 	andi	r2,r2,16392
   2fa2c:	1884b03a 	or	r2,r3,r2
   2fa30:	1007883a 	mov	r3,r2
   2fa34:	e0bffb17 	ldw	r2,-20(fp)
   2fa38:	10c00215 	stw	r3,8(r2)
      va_end(argp);
      return 0;
   2fa3c:	0005883a 	mov	r2,zero
   2fa40:	00000b06 	br	2fa70 <fcntl+0x10c>
    default:
      ALT_ERRNO = EINVAL;
   2fa44:	002f9280 	call	2f928 <alt_get_errno>
   2fa48:	1007883a 	mov	r3,r2
   2fa4c:	00800584 	movi	r2,22
   2fa50:	18800015 	stw	r2,0(r3)
      return -1;
   2fa54:	00bfffc4 	movi	r2,-1
   2fa58:	00000506 	br	2fa70 <fcntl+0x10c>
    }
  }

  ALT_ERRNO = EBADFD;
   2fa5c:	002f9280 	call	2f928 <alt_get_errno>
   2fa60:	1007883a 	mov	r3,r2
   2fa64:	00801444 	movi	r2,81
   2fa68:	18800015 	stw	r2,0(r3)
  return -1;
   2fa6c:	00bfffc4 	movi	r2,-1
}
   2fa70:	e037883a 	mov	sp,fp
   2fa74:	dfc00117 	ldw	ra,4(sp)
   2fa78:	df000017 	ldw	fp,0(sp)
   2fa7c:	dec00404 	addi	sp,sp,16
   2fa80:	f800283a 	ret

0002fa84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2fa84:	defffe04 	addi	sp,sp,-8
   2fa88:	dfc00115 	stw	ra,4(sp)
   2fa8c:	df000015 	stw	fp,0(sp)
   2fa90:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2fa94:	d0a01917 	ldw	r2,-32668(gp)
   2fa98:	10000326 	beq	r2,zero,2faa8 <alt_get_errno+0x24>
   2fa9c:	d0a01917 	ldw	r2,-32668(gp)
   2faa0:	103ee83a 	callr	r2
   2faa4:	00000106 	br	2faac <alt_get_errno+0x28>
   2faa8:	d0a71e04 	addi	r2,gp,-25480
}
   2faac:	e037883a 	mov	sp,fp
   2fab0:	dfc00117 	ldw	ra,4(sp)
   2fab4:	df000017 	ldw	fp,0(sp)
   2fab8:	dec00204 	addi	sp,sp,8
   2fabc:	f800283a 	ret

0002fac0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   2fac0:	defffb04 	addi	sp,sp,-20
   2fac4:	dfc00415 	stw	ra,16(sp)
   2fac8:	df000315 	stw	fp,12(sp)
   2facc:	df000304 	addi	fp,sp,12
   2fad0:	e13ffe15 	stw	r4,-8(fp)
   2fad4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2fad8:	e0bffe17 	ldw	r2,-8(fp)
   2fadc:	10000616 	blt	r2,zero,2faf8 <fstat+0x38>
   2fae0:	e0bffe17 	ldw	r2,-8(fp)
   2fae4:	10c00324 	muli	r3,r2,12
   2fae8:	008000f4 	movhi	r2,3
   2faec:	108edf04 	addi	r2,r2,15228
   2faf0:	1885883a 	add	r2,r3,r2
   2faf4:	00000106 	br	2fafc <fstat+0x3c>
   2faf8:	0005883a 	mov	r2,zero
   2fafc:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   2fb00:	e0bffd17 	ldw	r2,-12(fp)
   2fb04:	10001026 	beq	r2,zero,2fb48 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   2fb08:	e0bffd17 	ldw	r2,-12(fp)
   2fb0c:	10800017 	ldw	r2,0(r2)
   2fb10:	10800817 	ldw	r2,32(r2)
   2fb14:	10000726 	beq	r2,zero,2fb34 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   2fb18:	e0bffd17 	ldw	r2,-12(fp)
   2fb1c:	10800017 	ldw	r2,0(r2)
   2fb20:	10800817 	ldw	r2,32(r2)
   2fb24:	e17fff17 	ldw	r5,-4(fp)
   2fb28:	e13ffd17 	ldw	r4,-12(fp)
   2fb2c:	103ee83a 	callr	r2
   2fb30:	00000a06 	br	2fb5c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   2fb34:	e0bfff17 	ldw	r2,-4(fp)
   2fb38:	00c80004 	movi	r3,8192
   2fb3c:	10c00115 	stw	r3,4(r2)
      return 0;
   2fb40:	0005883a 	mov	r2,zero
   2fb44:	00000506 	br	2fb5c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2fb48:	002fa840 	call	2fa84 <alt_get_errno>
   2fb4c:	1007883a 	mov	r3,r2
   2fb50:	00801444 	movi	r2,81
   2fb54:	18800015 	stw	r2,0(r3)
    return -1;
   2fb58:	00bfffc4 	movi	r2,-1
  }
}
   2fb5c:	e037883a 	mov	sp,fp
   2fb60:	dfc00117 	ldw	ra,4(sp)
   2fb64:	df000017 	ldw	fp,0(sp)
   2fb68:	dec00204 	addi	sp,sp,8
   2fb6c:	f800283a 	ret

0002fb70 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
   2fb70:	deffff04 	addi	sp,sp,-4
   2fb74:	df000015 	stw	fp,0(sp)
   2fb78:	d839883a 	mov	fp,sp
  return 0;
   2fb7c:	0005883a 	mov	r2,zero
}
   2fb80:	e037883a 	mov	sp,fp
   2fb84:	df000017 	ldw	fp,0(sp)
   2fb88:	dec00104 	addi	sp,sp,4
   2fb8c:	f800283a 	ret

0002fb90 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2fb90:	defffe04 	addi	sp,sp,-8
   2fb94:	dfc00115 	stw	ra,4(sp)
   2fb98:	df000015 	stw	fp,0(sp)
   2fb9c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2fba0:	d0a01917 	ldw	r2,-32668(gp)
   2fba4:	10000326 	beq	r2,zero,2fbb4 <alt_get_errno+0x24>
   2fba8:	d0a01917 	ldw	r2,-32668(gp)
   2fbac:	103ee83a 	callr	r2
   2fbb0:	00000106 	br	2fbb8 <alt_get_errno+0x28>
   2fbb4:	d0a71e04 	addi	r2,gp,-25480
}
   2fbb8:	e037883a 	mov	sp,fp
   2fbbc:	dfc00117 	ldw	ra,4(sp)
   2fbc0:	df000017 	ldw	fp,0(sp)
   2fbc4:	dec00204 	addi	sp,sp,8
   2fbc8:	f800283a 	ret

0002fbcc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   2fbcc:	deffed04 	addi	sp,sp,-76
   2fbd0:	dfc01215 	stw	ra,72(sp)
   2fbd4:	df001115 	stw	fp,68(sp)
   2fbd8:	df001104 	addi	fp,sp,68
   2fbdc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2fbe0:	e0bfff17 	ldw	r2,-4(fp)
   2fbe4:	10000616 	blt	r2,zero,2fc00 <isatty+0x34>
   2fbe8:	e0bfff17 	ldw	r2,-4(fp)
   2fbec:	10c00324 	muli	r3,r2,12
   2fbf0:	008000f4 	movhi	r2,3
   2fbf4:	108edf04 	addi	r2,r2,15228
   2fbf8:	1885883a 	add	r2,r3,r2
   2fbfc:	00000106 	br	2fc04 <isatty+0x38>
   2fc00:	0005883a 	mov	r2,zero
   2fc04:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   2fc08:	e0bfef17 	ldw	r2,-68(fp)
   2fc0c:	10000e26 	beq	r2,zero,2fc48 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   2fc10:	e0bfef17 	ldw	r2,-68(fp)
   2fc14:	10800017 	ldw	r2,0(r2)
   2fc18:	10800817 	ldw	r2,32(r2)
   2fc1c:	1000021e 	bne	r2,zero,2fc28 <isatty+0x5c>
    {
      return 1;
   2fc20:	00800044 	movi	r2,1
   2fc24:	00000d06 	br	2fc5c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   2fc28:	e0bff004 	addi	r2,fp,-64
   2fc2c:	100b883a 	mov	r5,r2
   2fc30:	e13fff17 	ldw	r4,-4(fp)
   2fc34:	002fac00 	call	2fac0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   2fc38:	e0bff117 	ldw	r2,-60(fp)
   2fc3c:	10880020 	cmpeqi	r2,r2,8192
   2fc40:	10803fcc 	andi	r2,r2,255
   2fc44:	00000506 	br	2fc5c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2fc48:	002fb900 	call	2fb90 <alt_get_errno>
   2fc4c:	1007883a 	mov	r3,r2
   2fc50:	00801444 	movi	r2,81
   2fc54:	18800015 	stw	r2,0(r3)
    return 0;
   2fc58:	0005883a 	mov	r2,zero
  }
}
   2fc5c:	e037883a 	mov	sp,fp
   2fc60:	dfc00117 	ldw	ra,4(sp)
   2fc64:	df000017 	ldw	fp,0(sp)
   2fc68:	dec00204 	addi	sp,sp,8
   2fc6c:	f800283a 	ret

0002fc70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2fc70:	defffe04 	addi	sp,sp,-8
   2fc74:	dfc00115 	stw	ra,4(sp)
   2fc78:	df000015 	stw	fp,0(sp)
   2fc7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2fc80:	d0a01917 	ldw	r2,-32668(gp)
   2fc84:	10000326 	beq	r2,zero,2fc94 <alt_get_errno+0x24>
   2fc88:	d0a01917 	ldw	r2,-32668(gp)
   2fc8c:	103ee83a 	callr	r2
   2fc90:	00000106 	br	2fc98 <alt_get_errno+0x28>
   2fc94:	d0a71e04 	addi	r2,gp,-25480
}
   2fc98:	e037883a 	mov	sp,fp
   2fc9c:	dfc00117 	ldw	ra,4(sp)
   2fca0:	df000017 	ldw	fp,0(sp)
   2fca4:	dec00204 	addi	sp,sp,8
   2fca8:	f800283a 	ret

0002fcac <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
   2fcac:	defffb04 	addi	sp,sp,-20
   2fcb0:	dfc00415 	stw	ra,16(sp)
   2fcb4:	df000315 	stw	fp,12(sp)
   2fcb8:	df000304 	addi	fp,sp,12
   2fcbc:	e13ffe15 	stw	r4,-8(fp)
   2fcc0:	e17fff15 	stw	r5,-4(fp)
  int status = 0;
   2fcc4:	e03ffd15 	stw	zero,-12(fp)

  if (pid <= 0)
   2fcc8:	e0bffe17 	ldw	r2,-8(fp)
   2fccc:	00802f16 	blt	zero,r2,2fd8c <kill+0xe0>
  {
    switch (sig)
   2fcd0:	e0bfff17 	ldw	r2,-4(fp)
   2fcd4:	10800828 	cmpgeui	r2,r2,32
   2fcd8:	1000291e 	bne	r2,zero,2fd80 <kill+0xd4>
   2fcdc:	e0bfff17 	ldw	r2,-4(fp)
   2fce0:	100690ba 	slli	r3,r2,2
   2fce4:	008000f4 	movhi	r2,3
   2fce8:	10bf3e04 	addi	r2,r2,-776
   2fcec:	1885883a 	add	r2,r3,r2
   2fcf0:	10800017 	ldw	r2,0(r2)
   2fcf4:	1000683a 	jmp	r2
   2fcf8:	0002fda0 	cmpeqi	zero,zero,3062
   2fcfc:	0002fd80 	call	2fd8 <__reset-0x1d028>
   2fd00:	0002fd80 	call	2fd8 <__reset-0x1d028>
   2fd04:	0002fd78 	rdprs	zero,zero,3061
   2fd08:	0002fd78 	rdprs	zero,zero,3061
   2fd0c:	0002fd78 	rdprs	zero,zero,3061
   2fd10:	0002fd78 	rdprs	zero,zero,3061
   2fd14:	0002fd80 	call	2fd8 <__reset-0x1d028>
   2fd18:	0002fd78 	rdprs	zero,zero,3061
   2fd1c:	0002fd78 	rdprs	zero,zero,3061
   2fd20:	0002fd78 	rdprs	zero,zero,3061
   2fd24:	0002fd78 	rdprs	zero,zero,3061
   2fd28:	0002fd78 	rdprs	zero,zero,3061
   2fd2c:	0002fd78 	rdprs	zero,zero,3061
   2fd30:	0002fd78 	rdprs	zero,zero,3061
   2fd34:	0002fd78 	rdprs	zero,zero,3061
   2fd38:	0002fda0 	cmpeqi	zero,zero,3062
   2fd3c:	0002fd80 	call	2fd8 <__reset-0x1d028>
   2fd40:	0002fd80 	call	2fd8 <__reset-0x1d028>
   2fd44:	0002fd80 	call	2fd8 <__reset-0x1d028>
   2fd48:	0002fda0 	cmpeqi	zero,zero,3062
   2fd4c:	0002fd80 	call	2fd8 <__reset-0x1d028>
   2fd50:	0002fd80 	call	2fd8 <__reset-0x1d028>
   2fd54:	0002fd78 	rdprs	zero,zero,3061
   2fd58:	0002fd78 	rdprs	zero,zero,3061
   2fd5c:	0002fd78 	rdprs	zero,zero,3061
   2fd60:	0002fd78 	rdprs	zero,zero,3061
   2fd64:	0002fd78 	rdprs	zero,zero,3061
   2fd68:	0002fd80 	call	2fd8 <__reset-0x1d028>
   2fd6c:	0002fd80 	call	2fd8 <__reset-0x1d028>
   2fd70:	0002fd78 	rdprs	zero,zero,3061
   2fd74:	0002fd78 	rdprs	zero,zero,3061
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
   2fd78:	0009883a 	mov	r4,zero
   2fd7c:	002f8f40 	call	2f8f4 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
   2fd80:	00800584 	movi	r2,22
   2fd84:	e0bffd15 	stw	r2,-12(fp)
   2fd88:	00000606 	br	2fda4 <kill+0xf8>
    }
  }

  else if (pid > 0)
   2fd8c:	e0bffe17 	ldw	r2,-8(fp)
   2fd90:	0080040e 	bge	zero,r2,2fda4 <kill+0xf8>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
   2fd94:	008000c4 	movi	r2,3
   2fd98:	e0bffd15 	stw	r2,-12(fp)
   2fd9c:	00000106 	br	2fda4 <kill+0xf8>
    {
    case 0:

      /* The null signal is used to check that a pid is valid. */

      break;
   2fda0:	0001883a 	nop
    /* Attempted to signal a non-existant process */

    status = ESRCH;
  }

  if (status)
   2fda4:	e0bffd17 	ldw	r2,-12(fp)
   2fda8:	10000626 	beq	r2,zero,2fdc4 <kill+0x118>
  {
    ALT_ERRNO = status;
   2fdac:	002fc700 	call	2fc70 <alt_get_errno>
   2fdb0:	1007883a 	mov	r3,r2
   2fdb4:	e0bffd17 	ldw	r2,-12(fp)
   2fdb8:	18800015 	stw	r2,0(r3)
    return -1;
   2fdbc:	00bfffc4 	movi	r2,-1
   2fdc0:	00000106 	br	2fdc8 <kill+0x11c>
  }

  return 0;
   2fdc4:	0005883a 	mov	r2,zero
}
   2fdc8:	e037883a 	mov	sp,fp
   2fdcc:	dfc00117 	ldw	ra,4(sp)
   2fdd0:	df000017 	ldw	fp,0(sp)
   2fdd4:	dec00204 	addi	sp,sp,8
   2fdd8:	f800283a 	ret

0002fddc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   2fddc:	defffc04 	addi	sp,sp,-16
   2fde0:	df000315 	stw	fp,12(sp)
   2fde4:	df000304 	addi	fp,sp,12
   2fde8:	e13ffd15 	stw	r4,-12(fp)
   2fdec:	e17ffe15 	stw	r5,-8(fp)
   2fdf0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   2fdf4:	e0fffe17 	ldw	r3,-8(fp)
   2fdf8:	e0bffd17 	ldw	r2,-12(fp)
   2fdfc:	18800c26 	beq	r3,r2,2fe30 <alt_load_section+0x54>
  {
    while( to != end )
   2fe00:	00000806 	br	2fe24 <alt_load_section+0x48>
    {
      *to++ = *from++;
   2fe04:	e0bffe17 	ldw	r2,-8(fp)
   2fe08:	10c00104 	addi	r3,r2,4
   2fe0c:	e0fffe15 	stw	r3,-8(fp)
   2fe10:	e0fffd17 	ldw	r3,-12(fp)
   2fe14:	19000104 	addi	r4,r3,4
   2fe18:	e13ffd15 	stw	r4,-12(fp)
   2fe1c:	18c00017 	ldw	r3,0(r3)
   2fe20:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   2fe24:	e0fffe17 	ldw	r3,-8(fp)
   2fe28:	e0bfff17 	ldw	r2,-4(fp)
   2fe2c:	18bff51e 	bne	r3,r2,2fe04 <_gp+0xffff2fe4>
    {
      *to++ = *from++;
    }
  }
}
   2fe30:	0001883a 	nop
   2fe34:	e037883a 	mov	sp,fp
   2fe38:	df000017 	ldw	fp,0(sp)
   2fe3c:	dec00104 	addi	sp,sp,4
   2fe40:	f800283a 	ret

0002fe44 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   2fe44:	defffe04 	addi	sp,sp,-8
   2fe48:	dfc00115 	stw	ra,4(sp)
   2fe4c:	df000015 	stw	fp,0(sp)
   2fe50:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   2fe54:	018000f4 	movhi	r6,3
   2fe58:	3193a604 	addi	r6,r6,20120
   2fe5c:	014000f4 	movhi	r5,3
   2fe60:	294cac04 	addi	r5,r5,12976
   2fe64:	010000f4 	movhi	r4,3
   2fe68:	2113a604 	addi	r4,r4,20120
   2fe6c:	002fddc0 	call	2fddc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   2fe70:	018000b4 	movhi	r6,2
   2fe74:	31809104 	addi	r6,r6,580
   2fe78:	014000b4 	movhi	r5,2
   2fe7c:	29400804 	addi	r5,r5,32
   2fe80:	010000b4 	movhi	r4,2
   2fe84:	21000804 	addi	r4,r4,32
   2fe88:	002fddc0 	call	2fddc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   2fe8c:	018000f4 	movhi	r6,3
   2fe90:	318cac04 	addi	r6,r6,12976
   2fe94:	014000f4 	movhi	r5,3
   2fe98:	294b4504 	addi	r5,r5,11540
   2fe9c:	010000f4 	movhi	r4,3
   2fea0:	210b4504 	addi	r4,r4,11540
   2fea4:	002fddc0 	call	2fddc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   2fea8:	0031fe80 	call	31fe8 <alt_dcache_flush_all>
  alt_icache_flush_all();
   2feac:	003240c0 	call	3240c <alt_icache_flush_all>
}
   2feb0:	0001883a 	nop
   2feb4:	e037883a 	mov	sp,fp
   2feb8:	dfc00117 	ldw	ra,4(sp)
   2febc:	df000017 	ldw	fp,0(sp)
   2fec0:	dec00204 	addi	sp,sp,8
   2fec4:	f800283a 	ret

0002fec8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2fec8:	defffe04 	addi	sp,sp,-8
   2fecc:	dfc00115 	stw	ra,4(sp)
   2fed0:	df000015 	stw	fp,0(sp)
   2fed4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2fed8:	d0a01917 	ldw	r2,-32668(gp)
   2fedc:	10000326 	beq	r2,zero,2feec <alt_get_errno+0x24>
   2fee0:	d0a01917 	ldw	r2,-32668(gp)
   2fee4:	103ee83a 	callr	r2
   2fee8:	00000106 	br	2fef0 <alt_get_errno+0x28>
   2feec:	d0a71e04 	addi	r2,gp,-25480
}
   2fef0:	e037883a 	mov	sp,fp
   2fef4:	dfc00117 	ldw	ra,4(sp)
   2fef8:	df000017 	ldw	fp,0(sp)
   2fefc:	dec00204 	addi	sp,sp,8
   2ff00:	f800283a 	ret

0002ff04 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   2ff04:	defff904 	addi	sp,sp,-28
   2ff08:	dfc00615 	stw	ra,24(sp)
   2ff0c:	df000515 	stw	fp,20(sp)
   2ff10:	df000504 	addi	fp,sp,20
   2ff14:	e13ffd15 	stw	r4,-12(fp)
   2ff18:	e17ffe15 	stw	r5,-8(fp)
   2ff1c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   2ff20:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2ff24:	e0bffd17 	ldw	r2,-12(fp)
   2ff28:	10000616 	blt	r2,zero,2ff44 <lseek+0x40>
   2ff2c:	e0bffd17 	ldw	r2,-12(fp)
   2ff30:	10c00324 	muli	r3,r2,12
   2ff34:	008000f4 	movhi	r2,3
   2ff38:	108edf04 	addi	r2,r2,15228
   2ff3c:	1885883a 	add	r2,r3,r2
   2ff40:	00000106 	br	2ff48 <lseek+0x44>
   2ff44:	0005883a 	mov	r2,zero
   2ff48:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   2ff4c:	e0bffc17 	ldw	r2,-16(fp)
   2ff50:	10001026 	beq	r2,zero,2ff94 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   2ff54:	e0bffc17 	ldw	r2,-16(fp)
   2ff58:	10800017 	ldw	r2,0(r2)
   2ff5c:	10800717 	ldw	r2,28(r2)
   2ff60:	10000926 	beq	r2,zero,2ff88 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   2ff64:	e0bffc17 	ldw	r2,-16(fp)
   2ff68:	10800017 	ldw	r2,0(r2)
   2ff6c:	10800717 	ldw	r2,28(r2)
   2ff70:	e1bfff17 	ldw	r6,-4(fp)
   2ff74:	e17ffe17 	ldw	r5,-8(fp)
   2ff78:	e13ffc17 	ldw	r4,-16(fp)
   2ff7c:	103ee83a 	callr	r2
   2ff80:	e0bffb15 	stw	r2,-20(fp)
   2ff84:	00000506 	br	2ff9c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   2ff88:	00bfde84 	movi	r2,-134
   2ff8c:	e0bffb15 	stw	r2,-20(fp)
   2ff90:	00000206 	br	2ff9c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   2ff94:	00bfebc4 	movi	r2,-81
   2ff98:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   2ff9c:	e0bffb17 	ldw	r2,-20(fp)
   2ffa0:	1000070e 	bge	r2,zero,2ffc0 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   2ffa4:	002fec80 	call	2fec8 <alt_get_errno>
   2ffa8:	1007883a 	mov	r3,r2
   2ffac:	e0bffb17 	ldw	r2,-20(fp)
   2ffb0:	0085c83a 	sub	r2,zero,r2
   2ffb4:	18800015 	stw	r2,0(r3)
    rc = -1;
   2ffb8:	00bfffc4 	movi	r2,-1
   2ffbc:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   2ffc0:	e0bffb17 	ldw	r2,-20(fp)
}
   2ffc4:	e037883a 	mov	sp,fp
   2ffc8:	dfc00117 	ldw	ra,4(sp)
   2ffcc:	df000017 	ldw	fp,0(sp)
   2ffd0:	dec00204 	addi	sp,sp,8
   2ffd4:	f800283a 	ret

0002ffd8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   2ffd8:	defffd04 	addi	sp,sp,-12
   2ffdc:	dfc00215 	stw	ra,8(sp)
   2ffe0:	df000115 	stw	fp,4(sp)
   2ffe4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   2ffe8:	0009883a 	mov	r4,zero
   2ffec:	00308780 	call	30878 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   2fff0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   2fff4:	00308b00 	call	308b0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   2fff8:	018000f4 	movhi	r6,3
   2fffc:	318c9e04 	addi	r6,r6,12920
   30000:	014000f4 	movhi	r5,3
   30004:	294c9e04 	addi	r5,r5,12920
   30008:	010000f4 	movhi	r4,3
   3000c:	210c9e04 	addi	r4,r4,12920
   30010:	00327a40 	call	327a4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   30014:	00321100 	call	32110 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   30018:	010000f4 	movhi	r4,3
   3001c:	21085c04 	addi	r4,r4,8560
   30020:	00329700 	call	32970 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   30024:	d0a72217 	ldw	r2,-25464(gp)
   30028:	d0e72317 	ldw	r3,-25460(gp)
   3002c:	d1272417 	ldw	r4,-25456(gp)
   30030:	200d883a 	mov	r6,r4
   30034:	180b883a 	mov	r5,r3
   30038:	1009883a 	mov	r4,r2
   3003c:	00206d40 	call	206d4 <main>
   30040:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   30044:	01000044 	movi	r4,1
   30048:	002f7f80 	call	2f7f8 <close>
  exit (result);
   3004c:	e13fff17 	ldw	r4,-4(fp)
   30050:	00329840 	call	32984 <exit>

00030054 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   30054:	defffe04 	addi	sp,sp,-8
   30058:	df000115 	stw	fp,4(sp)
   3005c:	df000104 	addi	fp,sp,4
   30060:	e13fff15 	stw	r4,-4(fp)
}
   30064:	0001883a 	nop
   30068:	e037883a 	mov	sp,fp
   3006c:	df000017 	ldw	fp,0(sp)
   30070:	dec00104 	addi	sp,sp,4
   30074:	f800283a 	ret

00030078 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   30078:	defffe04 	addi	sp,sp,-8
   3007c:	df000115 	stw	fp,4(sp)
   30080:	df000104 	addi	fp,sp,4
   30084:	e13fff15 	stw	r4,-4(fp)
}
   30088:	0001883a 	nop
   3008c:	e037883a 	mov	sp,fp
   30090:	df000017 	ldw	fp,0(sp)
   30094:	dec00104 	addi	sp,sp,4
   30098:	f800283a 	ret

0003009c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   3009c:	defffe04 	addi	sp,sp,-8
   300a0:	dfc00115 	stw	ra,4(sp)
   300a4:	df000015 	stw	fp,0(sp)
   300a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   300ac:	d0a01917 	ldw	r2,-32668(gp)
   300b0:	10000326 	beq	r2,zero,300c0 <alt_get_errno+0x24>
   300b4:	d0a01917 	ldw	r2,-32668(gp)
   300b8:	103ee83a 	callr	r2
   300bc:	00000106 	br	300c4 <alt_get_errno+0x28>
   300c0:	d0a71e04 	addi	r2,gp,-25480
}
   300c4:	e037883a 	mov	sp,fp
   300c8:	dfc00117 	ldw	ra,4(sp)
   300cc:	df000017 	ldw	fp,0(sp)
   300d0:	dec00204 	addi	sp,sp,8
   300d4:	f800283a 	ret

000300d8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   300d8:	defffd04 	addi	sp,sp,-12
   300dc:	df000215 	stw	fp,8(sp)
   300e0:	df000204 	addi	fp,sp,8
   300e4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   300e8:	e0bfff17 	ldw	r2,-4(fp)
   300ec:	10800217 	ldw	r2,8(r2)
   300f0:	10d00034 	orhi	r3,r2,16384
   300f4:	e0bfff17 	ldw	r2,-4(fp)
   300f8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   300fc:	e03ffe15 	stw	zero,-8(fp)
   30100:	00001d06 	br	30178 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   30104:	008000f4 	movhi	r2,3
   30108:	108edf04 	addi	r2,r2,15228
   3010c:	e0fffe17 	ldw	r3,-8(fp)
   30110:	18c00324 	muli	r3,r3,12
   30114:	10c5883a 	add	r2,r2,r3
   30118:	10c00017 	ldw	r3,0(r2)
   3011c:	e0bfff17 	ldw	r2,-4(fp)
   30120:	10800017 	ldw	r2,0(r2)
   30124:	1880111e 	bne	r3,r2,3016c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   30128:	008000f4 	movhi	r2,3
   3012c:	108edf04 	addi	r2,r2,15228
   30130:	e0fffe17 	ldw	r3,-8(fp)
   30134:	18c00324 	muli	r3,r3,12
   30138:	10c5883a 	add	r2,r2,r3
   3013c:	10800204 	addi	r2,r2,8
   30140:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   30144:	1000090e 	bge	r2,zero,3016c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   30148:	e0bffe17 	ldw	r2,-8(fp)
   3014c:	10c00324 	muli	r3,r2,12
   30150:	008000f4 	movhi	r2,3
   30154:	108edf04 	addi	r2,r2,15228
   30158:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   3015c:	e0bfff17 	ldw	r2,-4(fp)
   30160:	18800226 	beq	r3,r2,3016c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   30164:	00bffcc4 	movi	r2,-13
   30168:	00000806 	br	3018c <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   3016c:	e0bffe17 	ldw	r2,-8(fp)
   30170:	10800044 	addi	r2,r2,1
   30174:	e0bffe15 	stw	r2,-8(fp)
   30178:	d0a01817 	ldw	r2,-32672(gp)
   3017c:	1007883a 	mov	r3,r2
   30180:	e0bffe17 	ldw	r2,-8(fp)
   30184:	18bfdf2e 	bgeu	r3,r2,30104 <_gp+0xffff32e4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   30188:	0005883a 	mov	r2,zero
}
   3018c:	e037883a 	mov	sp,fp
   30190:	df000017 	ldw	fp,0(sp)
   30194:	dec00104 	addi	sp,sp,4
   30198:	f800283a 	ret

0003019c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   3019c:	defff604 	addi	sp,sp,-40
   301a0:	dfc00915 	stw	ra,36(sp)
   301a4:	df000815 	stw	fp,32(sp)
   301a8:	df000804 	addi	fp,sp,32
   301ac:	e13ffd15 	stw	r4,-12(fp)
   301b0:	e17ffe15 	stw	r5,-8(fp)
   301b4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   301b8:	00bfffc4 	movi	r2,-1
   301bc:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   301c0:	00bffb44 	movi	r2,-19
   301c4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   301c8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   301cc:	d1601604 	addi	r5,gp,-32680
   301d0:	e13ffd17 	ldw	r4,-12(fp)
   301d4:	00321d00 	call	321d0 <alt_find_dev>
   301d8:	e0bff815 	stw	r2,-32(fp)
   301dc:	e0bff817 	ldw	r2,-32(fp)
   301e0:	1000051e 	bne	r2,zero,301f8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   301e4:	e13ffd17 	ldw	r4,-12(fp)
   301e8:	00322600 	call	32260 <alt_find_file>
   301ec:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   301f0:	00800044 	movi	r2,1
   301f4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   301f8:	e0bff817 	ldw	r2,-32(fp)
   301fc:	10002926 	beq	r2,zero,302a4 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   30200:	e13ff817 	ldw	r4,-32(fp)
   30204:	00323680 	call	32368 <alt_get_fd>
   30208:	e0bff915 	stw	r2,-28(fp)
   3020c:	e0bff917 	ldw	r2,-28(fp)
   30210:	1000030e 	bge	r2,zero,30220 <open+0x84>
    {
      status = index;
   30214:	e0bff917 	ldw	r2,-28(fp)
   30218:	e0bffa15 	stw	r2,-24(fp)
   3021c:	00002306 	br	302ac <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   30220:	e0bff917 	ldw	r2,-28(fp)
   30224:	10c00324 	muli	r3,r2,12
   30228:	008000f4 	movhi	r2,3
   3022c:	108edf04 	addi	r2,r2,15228
   30230:	1885883a 	add	r2,r3,r2
   30234:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   30238:	e0fffe17 	ldw	r3,-8(fp)
   3023c:	00900034 	movhi	r2,16384
   30240:	10bfffc4 	addi	r2,r2,-1
   30244:	1886703a 	and	r3,r3,r2
   30248:	e0bffc17 	ldw	r2,-16(fp)
   3024c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   30250:	e0bffb17 	ldw	r2,-20(fp)
   30254:	1000051e 	bne	r2,zero,3026c <open+0xd0>
   30258:	e13ffc17 	ldw	r4,-16(fp)
   3025c:	00300d80 	call	300d8 <alt_file_locked>
   30260:	e0bffa15 	stw	r2,-24(fp)
   30264:	e0bffa17 	ldw	r2,-24(fp)
   30268:	10001016 	blt	r2,zero,302ac <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   3026c:	e0bff817 	ldw	r2,-32(fp)
   30270:	10800317 	ldw	r2,12(r2)
   30274:	10000826 	beq	r2,zero,30298 <open+0xfc>
   30278:	e0bff817 	ldw	r2,-32(fp)
   3027c:	10800317 	ldw	r2,12(r2)
   30280:	e1ffff17 	ldw	r7,-4(fp)
   30284:	e1bffe17 	ldw	r6,-8(fp)
   30288:	e17ffd17 	ldw	r5,-12(fp)
   3028c:	e13ffc17 	ldw	r4,-16(fp)
   30290:	103ee83a 	callr	r2
   30294:	00000106 	br	3029c <open+0x100>
   30298:	0005883a 	mov	r2,zero
   3029c:	e0bffa15 	stw	r2,-24(fp)
   302a0:	00000206 	br	302ac <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   302a4:	00bffb44 	movi	r2,-19
   302a8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   302ac:	e0bffa17 	ldw	r2,-24(fp)
   302b0:	1000090e 	bge	r2,zero,302d8 <open+0x13c>
  {
    alt_release_fd (index);  
   302b4:	e13ff917 	ldw	r4,-28(fp)
   302b8:	00304280 	call	30428 <alt_release_fd>
    ALT_ERRNO = -status;
   302bc:	003009c0 	call	3009c <alt_get_errno>
   302c0:	1007883a 	mov	r3,r2
   302c4:	e0bffa17 	ldw	r2,-24(fp)
   302c8:	0085c83a 	sub	r2,zero,r2
   302cc:	18800015 	stw	r2,0(r3)
    return -1;
   302d0:	00bfffc4 	movi	r2,-1
   302d4:	00000106 	br	302dc <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   302d8:	e0bff917 	ldw	r2,-28(fp)
}
   302dc:	e037883a 	mov	sp,fp
   302e0:	dfc00117 	ldw	ra,4(sp)
   302e4:	df000017 	ldw	fp,0(sp)
   302e8:	dec00204 	addi	sp,sp,8
   302ec:	f800283a 	ret

000302f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   302f0:	defffe04 	addi	sp,sp,-8
   302f4:	dfc00115 	stw	ra,4(sp)
   302f8:	df000015 	stw	fp,0(sp)
   302fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   30300:	d0a01917 	ldw	r2,-32668(gp)
   30304:	10000326 	beq	r2,zero,30314 <alt_get_errno+0x24>
   30308:	d0a01917 	ldw	r2,-32668(gp)
   3030c:	103ee83a 	callr	r2
   30310:	00000106 	br	30318 <alt_get_errno+0x28>
   30314:	d0a71e04 	addi	r2,gp,-25480
}
   30318:	e037883a 	mov	sp,fp
   3031c:	dfc00117 	ldw	ra,4(sp)
   30320:	df000017 	ldw	fp,0(sp)
   30324:	dec00204 	addi	sp,sp,8
   30328:	f800283a 	ret

0003032c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   3032c:	defff904 	addi	sp,sp,-28
   30330:	dfc00615 	stw	ra,24(sp)
   30334:	df000515 	stw	fp,20(sp)
   30338:	df000504 	addi	fp,sp,20
   3033c:	e13ffd15 	stw	r4,-12(fp)
   30340:	e17ffe15 	stw	r5,-8(fp)
   30344:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   30348:	e0bffd17 	ldw	r2,-12(fp)
   3034c:	10000616 	blt	r2,zero,30368 <read+0x3c>
   30350:	e0bffd17 	ldw	r2,-12(fp)
   30354:	10c00324 	muli	r3,r2,12
   30358:	008000f4 	movhi	r2,3
   3035c:	108edf04 	addi	r2,r2,15228
   30360:	1885883a 	add	r2,r3,r2
   30364:	00000106 	br	3036c <read+0x40>
   30368:	0005883a 	mov	r2,zero
   3036c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   30370:	e0bffb17 	ldw	r2,-20(fp)
   30374:	10002226 	beq	r2,zero,30400 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   30378:	e0bffb17 	ldw	r2,-20(fp)
   3037c:	10800217 	ldw	r2,8(r2)
   30380:	108000cc 	andi	r2,r2,3
   30384:	10800060 	cmpeqi	r2,r2,1
   30388:	1000181e 	bne	r2,zero,303ec <read+0xc0>
        (fd->dev->read))
   3038c:	e0bffb17 	ldw	r2,-20(fp)
   30390:	10800017 	ldw	r2,0(r2)
   30394:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   30398:	10001426 	beq	r2,zero,303ec <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   3039c:	e0bffb17 	ldw	r2,-20(fp)
   303a0:	10800017 	ldw	r2,0(r2)
   303a4:	10800517 	ldw	r2,20(r2)
   303a8:	e0ffff17 	ldw	r3,-4(fp)
   303ac:	180d883a 	mov	r6,r3
   303b0:	e17ffe17 	ldw	r5,-8(fp)
   303b4:	e13ffb17 	ldw	r4,-20(fp)
   303b8:	103ee83a 	callr	r2
   303bc:	e0bffc15 	stw	r2,-16(fp)
   303c0:	e0bffc17 	ldw	r2,-16(fp)
   303c4:	1000070e 	bge	r2,zero,303e4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   303c8:	00302f00 	call	302f0 <alt_get_errno>
   303cc:	1007883a 	mov	r3,r2
   303d0:	e0bffc17 	ldw	r2,-16(fp)
   303d4:	0085c83a 	sub	r2,zero,r2
   303d8:	18800015 	stw	r2,0(r3)
          return -1;
   303dc:	00bfffc4 	movi	r2,-1
   303e0:	00000c06 	br	30414 <read+0xe8>
        }
        return rval;
   303e4:	e0bffc17 	ldw	r2,-16(fp)
   303e8:	00000a06 	br	30414 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   303ec:	00302f00 	call	302f0 <alt_get_errno>
   303f0:	1007883a 	mov	r3,r2
   303f4:	00800344 	movi	r2,13
   303f8:	18800015 	stw	r2,0(r3)
   303fc:	00000406 	br	30410 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   30400:	00302f00 	call	302f0 <alt_get_errno>
   30404:	1007883a 	mov	r3,r2
   30408:	00801444 	movi	r2,81
   3040c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   30410:	00bfffc4 	movi	r2,-1
}
   30414:	e037883a 	mov	sp,fp
   30418:	dfc00117 	ldw	ra,4(sp)
   3041c:	df000017 	ldw	fp,0(sp)
   30420:	dec00204 	addi	sp,sp,8
   30424:	f800283a 	ret

00030428 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   30428:	defffe04 	addi	sp,sp,-8
   3042c:	df000115 	stw	fp,4(sp)
   30430:	df000104 	addi	fp,sp,4
   30434:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   30438:	e0bfff17 	ldw	r2,-4(fp)
   3043c:	108000d0 	cmplti	r2,r2,3
   30440:	10000d1e 	bne	r2,zero,30478 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   30444:	008000f4 	movhi	r2,3
   30448:	108edf04 	addi	r2,r2,15228
   3044c:	e0ffff17 	ldw	r3,-4(fp)
   30450:	18c00324 	muli	r3,r3,12
   30454:	10c5883a 	add	r2,r2,r3
   30458:	10800204 	addi	r2,r2,8
   3045c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   30460:	008000f4 	movhi	r2,3
   30464:	108edf04 	addi	r2,r2,15228
   30468:	e0ffff17 	ldw	r3,-4(fp)
   3046c:	18c00324 	muli	r3,r3,12
   30470:	10c5883a 	add	r2,r2,r3
   30474:	10000015 	stw	zero,0(r2)
  }
}
   30478:	0001883a 	nop
   3047c:	e037883a 	mov	sp,fp
   30480:	df000017 	ldw	fp,0(sp)
   30484:	dec00104 	addi	sp,sp,4
   30488:	f800283a 	ret

0003048c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   3048c:	defff904 	addi	sp,sp,-28
   30490:	df000615 	stw	fp,24(sp)
   30494:	df000604 	addi	fp,sp,24
   30498:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3049c:	0005303a 	rdctl	r2,status
   304a0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   304a4:	e0fffe17 	ldw	r3,-8(fp)
   304a8:	00bfff84 	movi	r2,-2
   304ac:	1884703a 	and	r2,r3,r2
   304b0:	1001703a 	wrctl	status,r2
  
  return context;
   304b4:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   304b8:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   304bc:	d0a01a17 	ldw	r2,-32664(gp)
   304c0:	10c000c4 	addi	r3,r2,3
   304c4:	00bfff04 	movi	r2,-4
   304c8:	1884703a 	and	r2,r3,r2
   304cc:	d0a01a15 	stw	r2,-32664(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   304d0:	d0e01a17 	ldw	r3,-32664(gp)
   304d4:	e0bfff17 	ldw	r2,-4(fp)
   304d8:	1887883a 	add	r3,r3,r2
   304dc:	00800134 	movhi	r2,4
   304e0:	10a1a804 	addi	r2,r2,-31072
   304e4:	10c0062e 	bgeu	r2,r3,30500 <sbrk+0x74>
   304e8:	e0bffb17 	ldw	r2,-20(fp)
   304ec:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   304f0:	e0bffa17 	ldw	r2,-24(fp)
   304f4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   304f8:	00bfffc4 	movi	r2,-1
   304fc:	00000b06 	br	3052c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   30500:	d0a01a17 	ldw	r2,-32664(gp)
   30504:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   30508:	d0e01a17 	ldw	r3,-32664(gp)
   3050c:	e0bfff17 	ldw	r2,-4(fp)
   30510:	1885883a 	add	r2,r3,r2
   30514:	d0a01a15 	stw	r2,-32664(gp)
   30518:	e0bffb17 	ldw	r2,-20(fp)
   3051c:	e0bffc15 	stw	r2,-16(fp)
   30520:	e0bffc17 	ldw	r2,-16(fp)
   30524:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   30528:	e0bffd17 	ldw	r2,-12(fp)
} 
   3052c:	e037883a 	mov	sp,fp
   30530:	df000017 	ldw	fp,0(sp)
   30534:	dec00104 	addi	sp,sp,4
   30538:	f800283a 	ret

0003053c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   3053c:	defffa04 	addi	sp,sp,-24
   30540:	df000515 	stw	fp,20(sp)
   30544:	df000504 	addi	fp,sp,20
   30548:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3054c:	0005303a 	rdctl	r2,status
   30550:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   30554:	e0fffc17 	ldw	r3,-16(fp)
   30558:	00bfff84 	movi	r2,-2
   3055c:	1884703a 	and	r2,r3,r2
   30560:	1001703a 	wrctl	status,r2
  
  return context;
   30564:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   30568:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   3056c:	e0bfff17 	ldw	r2,-4(fp)
   30570:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   30574:	e0bffd17 	ldw	r2,-12(fp)
   30578:	10800017 	ldw	r2,0(r2)
   3057c:	e0fffd17 	ldw	r3,-12(fp)
   30580:	18c00117 	ldw	r3,4(r3)
   30584:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   30588:	e0bffd17 	ldw	r2,-12(fp)
   3058c:	10800117 	ldw	r2,4(r2)
   30590:	e0fffd17 	ldw	r3,-12(fp)
   30594:	18c00017 	ldw	r3,0(r3)
   30598:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   3059c:	e0bffd17 	ldw	r2,-12(fp)
   305a0:	e0fffd17 	ldw	r3,-12(fp)
   305a4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   305a8:	e0bffd17 	ldw	r2,-12(fp)
   305ac:	e0fffd17 	ldw	r3,-12(fp)
   305b0:	10c00015 	stw	r3,0(r2)
   305b4:	e0bffb17 	ldw	r2,-20(fp)
   305b8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   305bc:	e0bffe17 	ldw	r2,-8(fp)
   305c0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   305c4:	0001883a 	nop
   305c8:	e037883a 	mov	sp,fp
   305cc:	df000017 	ldw	fp,0(sp)
   305d0:	dec00104 	addi	sp,sp,4
   305d4:	f800283a 	ret

000305d8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   305d8:	defffb04 	addi	sp,sp,-20
   305dc:	dfc00415 	stw	ra,16(sp)
   305e0:	df000315 	stw	fp,12(sp)
   305e4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   305e8:	d0a01b17 	ldw	r2,-32660(gp)
   305ec:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   305f0:	d0a72617 	ldw	r2,-25448(gp)
   305f4:	10800044 	addi	r2,r2,1
   305f8:	d0a72615 	stw	r2,-25448(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   305fc:	00002e06 	br	306b8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   30600:	e0bffd17 	ldw	r2,-12(fp)
   30604:	10800017 	ldw	r2,0(r2)
   30608:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   3060c:	e0bffd17 	ldw	r2,-12(fp)
   30610:	10800403 	ldbu	r2,16(r2)
   30614:	10803fcc 	andi	r2,r2,255
   30618:	10000426 	beq	r2,zero,3062c <alt_tick+0x54>
   3061c:	d0a72617 	ldw	r2,-25448(gp)
   30620:	1000021e 	bne	r2,zero,3062c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   30624:	e0bffd17 	ldw	r2,-12(fp)
   30628:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   3062c:	e0bffd17 	ldw	r2,-12(fp)
   30630:	10800217 	ldw	r2,8(r2)
   30634:	d0e72617 	ldw	r3,-25448(gp)
   30638:	18801d36 	bltu	r3,r2,306b0 <alt_tick+0xd8>
   3063c:	e0bffd17 	ldw	r2,-12(fp)
   30640:	10800403 	ldbu	r2,16(r2)
   30644:	10803fcc 	andi	r2,r2,255
   30648:	1000191e 	bne	r2,zero,306b0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   3064c:	e0bffd17 	ldw	r2,-12(fp)
   30650:	10800317 	ldw	r2,12(r2)
   30654:	e0fffd17 	ldw	r3,-12(fp)
   30658:	18c00517 	ldw	r3,20(r3)
   3065c:	1809883a 	mov	r4,r3
   30660:	103ee83a 	callr	r2
   30664:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   30668:	e0bfff17 	ldw	r2,-4(fp)
   3066c:	1000031e 	bne	r2,zero,3067c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   30670:	e13ffd17 	ldw	r4,-12(fp)
   30674:	003053c0 	call	3053c <alt_alarm_stop>
   30678:	00000d06 	br	306b0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   3067c:	e0bffd17 	ldw	r2,-12(fp)
   30680:	10c00217 	ldw	r3,8(r2)
   30684:	e0bfff17 	ldw	r2,-4(fp)
   30688:	1887883a 	add	r3,r3,r2
   3068c:	e0bffd17 	ldw	r2,-12(fp)
   30690:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   30694:	e0bffd17 	ldw	r2,-12(fp)
   30698:	10c00217 	ldw	r3,8(r2)
   3069c:	d0a72617 	ldw	r2,-25448(gp)
   306a0:	1880032e 	bgeu	r3,r2,306b0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   306a4:	e0bffd17 	ldw	r2,-12(fp)
   306a8:	00c00044 	movi	r3,1
   306ac:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   306b0:	e0bffe17 	ldw	r2,-8(fp)
   306b4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   306b8:	e0fffd17 	ldw	r3,-12(fp)
   306bc:	d0a01b04 	addi	r2,gp,-32660
   306c0:	18bfcf1e 	bne	r3,r2,30600 <_gp+0xffff37e0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   306c4:	0001883a 	nop
}
   306c8:	0001883a 	nop
   306cc:	e037883a 	mov	sp,fp
   306d0:	dfc00117 	ldw	ra,4(sp)
   306d4:	df000017 	ldw	fp,0(sp)
   306d8:	dec00204 	addi	sp,sp,8
   306dc:	f800283a 	ret

000306e0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   306e0:	defffd04 	addi	sp,sp,-12
   306e4:	dfc00215 	stw	ra,8(sp)
   306e8:	df000115 	stw	fp,4(sp)
   306ec:	df000104 	addi	fp,sp,4
   306f0:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   306f4:	e13fff17 	ldw	r4,-4(fp)
   306f8:	0031e900 	call	31e90 <alt_busy_sleep>
}
   306fc:	e037883a 	mov	sp,fp
   30700:	dfc00117 	ldw	ra,4(sp)
   30704:	df000017 	ldw	fp,0(sp)
   30708:	dec00204 	addi	sp,sp,8
   3070c:	f800283a 	ret

00030710 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   30710:	defffe04 	addi	sp,sp,-8
   30714:	dfc00115 	stw	ra,4(sp)
   30718:	df000015 	stw	fp,0(sp)
   3071c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   30720:	d0a01917 	ldw	r2,-32668(gp)
   30724:	10000326 	beq	r2,zero,30734 <alt_get_errno+0x24>
   30728:	d0a01917 	ldw	r2,-32668(gp)
   3072c:	103ee83a 	callr	r2
   30730:	00000106 	br	30738 <alt_get_errno+0x28>
   30734:	d0a71e04 	addi	r2,gp,-25480
}
   30738:	e037883a 	mov	sp,fp
   3073c:	dfc00117 	ldw	ra,4(sp)
   30740:	df000017 	ldw	fp,0(sp)
   30744:	dec00204 	addi	sp,sp,8
   30748:	f800283a 	ret

0003074c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   3074c:	defff904 	addi	sp,sp,-28
   30750:	dfc00615 	stw	ra,24(sp)
   30754:	df000515 	stw	fp,20(sp)
   30758:	df000504 	addi	fp,sp,20
   3075c:	e13ffd15 	stw	r4,-12(fp)
   30760:	e17ffe15 	stw	r5,-8(fp)
   30764:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   30768:	e0bffd17 	ldw	r2,-12(fp)
   3076c:	10000616 	blt	r2,zero,30788 <write+0x3c>
   30770:	e0bffd17 	ldw	r2,-12(fp)
   30774:	10c00324 	muli	r3,r2,12
   30778:	008000f4 	movhi	r2,3
   3077c:	108edf04 	addi	r2,r2,15228
   30780:	1885883a 	add	r2,r3,r2
   30784:	00000106 	br	3078c <write+0x40>
   30788:	0005883a 	mov	r2,zero
   3078c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   30790:	e0bffb17 	ldw	r2,-20(fp)
   30794:	10002126 	beq	r2,zero,3081c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   30798:	e0bffb17 	ldw	r2,-20(fp)
   3079c:	10800217 	ldw	r2,8(r2)
   307a0:	108000cc 	andi	r2,r2,3
   307a4:	10001826 	beq	r2,zero,30808 <write+0xbc>
   307a8:	e0bffb17 	ldw	r2,-20(fp)
   307ac:	10800017 	ldw	r2,0(r2)
   307b0:	10800617 	ldw	r2,24(r2)
   307b4:	10001426 	beq	r2,zero,30808 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   307b8:	e0bffb17 	ldw	r2,-20(fp)
   307bc:	10800017 	ldw	r2,0(r2)
   307c0:	10800617 	ldw	r2,24(r2)
   307c4:	e0ffff17 	ldw	r3,-4(fp)
   307c8:	180d883a 	mov	r6,r3
   307cc:	e17ffe17 	ldw	r5,-8(fp)
   307d0:	e13ffb17 	ldw	r4,-20(fp)
   307d4:	103ee83a 	callr	r2
   307d8:	e0bffc15 	stw	r2,-16(fp)
   307dc:	e0bffc17 	ldw	r2,-16(fp)
   307e0:	1000070e 	bge	r2,zero,30800 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   307e4:	00307100 	call	30710 <alt_get_errno>
   307e8:	1007883a 	mov	r3,r2
   307ec:	e0bffc17 	ldw	r2,-16(fp)
   307f0:	0085c83a 	sub	r2,zero,r2
   307f4:	18800015 	stw	r2,0(r3)
        return -1;
   307f8:	00bfffc4 	movi	r2,-1
   307fc:	00000c06 	br	30830 <write+0xe4>
      }
      return rval;
   30800:	e0bffc17 	ldw	r2,-16(fp)
   30804:	00000a06 	br	30830 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   30808:	00307100 	call	30710 <alt_get_errno>
   3080c:	1007883a 	mov	r3,r2
   30810:	00800344 	movi	r2,13
   30814:	18800015 	stw	r2,0(r3)
   30818:	00000406 	br	3082c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   3081c:	00307100 	call	30710 <alt_get_errno>
   30820:	1007883a 	mov	r3,r2
   30824:	00801444 	movi	r2,81
   30828:	18800015 	stw	r2,0(r3)
  }
  return -1;
   3082c:	00bfffc4 	movi	r2,-1
}
   30830:	e037883a 	mov	sp,fp
   30834:	dfc00117 	ldw	ra,4(sp)
   30838:	df000017 	ldw	fp,0(sp)
   3083c:	dec00204 	addi	sp,sp,8
   30840:	f800283a 	ret

00030844 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   30844:	defffd04 	addi	sp,sp,-12
   30848:	dfc00215 	stw	ra,8(sp)
   3084c:	df000115 	stw	fp,4(sp)
   30850:	df000104 	addi	fp,sp,4
   30854:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   30858:	d1601604 	addi	r5,gp,-32680
   3085c:	e13fff17 	ldw	r4,-4(fp)
   30860:	003206c0 	call	3206c <alt_dev_llist_insert>
}
   30864:	e037883a 	mov	sp,fp
   30868:	dfc00117 	ldw	ra,4(sp)
   3086c:	df000017 	ldw	fp,0(sp)
   30870:	dec00204 	addi	sp,sp,8
   30874:	f800283a 	ret

00030878 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   30878:	defffd04 	addi	sp,sp,-12
   3087c:	dfc00215 	stw	ra,8(sp)
   30880:	df000115 	stw	fp,4(sp)
   30884:	df000104 	addi	fp,sp,4
   30888:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   3088c:	00328200 	call	32820 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   30890:	00800044 	movi	r2,1
   30894:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   30898:	0001883a 	nop
   3089c:	e037883a 	mov	sp,fp
   308a0:	dfc00117 	ldw	ra,4(sp)
   308a4:	df000017 	ldw	fp,0(sp)
   308a8:	dec00204 	addi	sp,sp,8
   308ac:	f800283a 	ret

000308b0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   308b0:	defffe04 	addi	sp,sp,-8
   308b4:	dfc00115 	stw	ra,4(sp)
   308b8:	df000015 	stw	fp,0(sp)
   308bc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   308c0:	01c0fa04 	movi	r7,1000
   308c4:	01800044 	movi	r6,1
   308c8:	000b883a 	mov	r5,zero
   308cc:	01000134 	movhi	r4,4
   308d0:	21040804 	addi	r4,r4,4128
   308d4:	00314100 	call	31410 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   308d8:	000d883a 	mov	r6,zero
   308dc:	000b883a 	mov	r5,zero
   308e0:	010000f4 	movhi	r4,3
   308e4:	210f4904 	addi	r4,r4,15652
   308e8:	0030a940 	call	30a94 <altera_avalon_jtag_uart_init>
   308ec:	010000f4 	movhi	r4,3
   308f0:	210f3f04 	addi	r4,r4,15612
   308f4:	00308440 	call	30844 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( HC_05_UART, hc_05_uart);
   308f8:	01800084 	movi	r6,2
   308fc:	000b883a 	mov	r5,zero
   30900:	010000f4 	movhi	r4,3
   30904:	21136104 	addi	r4,r4,19844
   30908:	003159c0 	call	3159c <altera_avalon_uart_init>
   3090c:	010000f4 	movhi	r4,3
   30910:	21135704 	addi	r4,r4,19804
   30914:	00308440 	call	30844 <alt_dev_reg>
}
   30918:	0001883a 	nop
   3091c:	e037883a 	mov	sp,fp
   30920:	dfc00117 	ldw	ra,4(sp)
   30924:	df000017 	ldw	fp,0(sp)
   30928:	dec00204 	addi	sp,sp,8
   3092c:	f800283a 	ret

00030930 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   30930:	defffa04 	addi	sp,sp,-24
   30934:	dfc00515 	stw	ra,20(sp)
   30938:	df000415 	stw	fp,16(sp)
   3093c:	df000404 	addi	fp,sp,16
   30940:	e13ffd15 	stw	r4,-12(fp)
   30944:	e17ffe15 	stw	r5,-8(fp)
   30948:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   3094c:	e0bffd17 	ldw	r2,-12(fp)
   30950:	10800017 	ldw	r2,0(r2)
   30954:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   30958:	e0bffc17 	ldw	r2,-16(fp)
   3095c:	10c00a04 	addi	r3,r2,40
   30960:	e0bffd17 	ldw	r2,-12(fp)
   30964:	10800217 	ldw	r2,8(r2)
   30968:	100f883a 	mov	r7,r2
   3096c:	e1bfff17 	ldw	r6,-4(fp)
   30970:	e17ffe17 	ldw	r5,-8(fp)
   30974:	1809883a 	mov	r4,r3
   30978:	0030f580 	call	30f58 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   3097c:	e037883a 	mov	sp,fp
   30980:	dfc00117 	ldw	ra,4(sp)
   30984:	df000017 	ldw	fp,0(sp)
   30988:	dec00204 	addi	sp,sp,8
   3098c:	f800283a 	ret

00030990 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   30990:	defffa04 	addi	sp,sp,-24
   30994:	dfc00515 	stw	ra,20(sp)
   30998:	df000415 	stw	fp,16(sp)
   3099c:	df000404 	addi	fp,sp,16
   309a0:	e13ffd15 	stw	r4,-12(fp)
   309a4:	e17ffe15 	stw	r5,-8(fp)
   309a8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   309ac:	e0bffd17 	ldw	r2,-12(fp)
   309b0:	10800017 	ldw	r2,0(r2)
   309b4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   309b8:	e0bffc17 	ldw	r2,-16(fp)
   309bc:	10c00a04 	addi	r3,r2,40
   309c0:	e0bffd17 	ldw	r2,-12(fp)
   309c4:	10800217 	ldw	r2,8(r2)
   309c8:	100f883a 	mov	r7,r2
   309cc:	e1bfff17 	ldw	r6,-4(fp)
   309d0:	e17ffe17 	ldw	r5,-8(fp)
   309d4:	1809883a 	mov	r4,r3
   309d8:	00311740 	call	31174 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   309dc:	e037883a 	mov	sp,fp
   309e0:	dfc00117 	ldw	ra,4(sp)
   309e4:	df000017 	ldw	fp,0(sp)
   309e8:	dec00204 	addi	sp,sp,8
   309ec:	f800283a 	ret

000309f0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   309f0:	defffc04 	addi	sp,sp,-16
   309f4:	dfc00315 	stw	ra,12(sp)
   309f8:	df000215 	stw	fp,8(sp)
   309fc:	df000204 	addi	fp,sp,8
   30a00:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   30a04:	e0bfff17 	ldw	r2,-4(fp)
   30a08:	10800017 	ldw	r2,0(r2)
   30a0c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   30a10:	e0bffe17 	ldw	r2,-8(fp)
   30a14:	10c00a04 	addi	r3,r2,40
   30a18:	e0bfff17 	ldw	r2,-4(fp)
   30a1c:	10800217 	ldw	r2,8(r2)
   30a20:	100b883a 	mov	r5,r2
   30a24:	1809883a 	mov	r4,r3
   30a28:	0030e000 	call	30e00 <altera_avalon_jtag_uart_close>
}
   30a2c:	e037883a 	mov	sp,fp
   30a30:	dfc00117 	ldw	ra,4(sp)
   30a34:	df000017 	ldw	fp,0(sp)
   30a38:	dec00204 	addi	sp,sp,8
   30a3c:	f800283a 	ret

00030a40 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   30a40:	defffa04 	addi	sp,sp,-24
   30a44:	dfc00515 	stw	ra,20(sp)
   30a48:	df000415 	stw	fp,16(sp)
   30a4c:	df000404 	addi	fp,sp,16
   30a50:	e13ffd15 	stw	r4,-12(fp)
   30a54:	e17ffe15 	stw	r5,-8(fp)
   30a58:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   30a5c:	e0bffd17 	ldw	r2,-12(fp)
   30a60:	10800017 	ldw	r2,0(r2)
   30a64:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   30a68:	e0bffc17 	ldw	r2,-16(fp)
   30a6c:	10800a04 	addi	r2,r2,40
   30a70:	e1bfff17 	ldw	r6,-4(fp)
   30a74:	e17ffe17 	ldw	r5,-8(fp)
   30a78:	1009883a 	mov	r4,r2
   30a7c:	0030e680 	call	30e68 <altera_avalon_jtag_uart_ioctl>
}
   30a80:	e037883a 	mov	sp,fp
   30a84:	dfc00117 	ldw	ra,4(sp)
   30a88:	df000017 	ldw	fp,0(sp)
   30a8c:	dec00204 	addi	sp,sp,8
   30a90:	f800283a 	ret

00030a94 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   30a94:	defffa04 	addi	sp,sp,-24
   30a98:	dfc00515 	stw	ra,20(sp)
   30a9c:	df000415 	stw	fp,16(sp)
   30aa0:	df000404 	addi	fp,sp,16
   30aa4:	e13ffd15 	stw	r4,-12(fp)
   30aa8:	e17ffe15 	stw	r5,-8(fp)
   30aac:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   30ab0:	e0bffd17 	ldw	r2,-12(fp)
   30ab4:	00c00044 	movi	r3,1
   30ab8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   30abc:	e0bffd17 	ldw	r2,-12(fp)
   30ac0:	10800017 	ldw	r2,0(r2)
   30ac4:	10800104 	addi	r2,r2,4
   30ac8:	1007883a 	mov	r3,r2
   30acc:	e0bffd17 	ldw	r2,-12(fp)
   30ad0:	10800817 	ldw	r2,32(r2)
   30ad4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   30ad8:	e0bffe17 	ldw	r2,-8(fp)
   30adc:	e0ffff17 	ldw	r3,-4(fp)
   30ae0:	d8000015 	stw	zero,0(sp)
   30ae4:	e1fffd17 	ldw	r7,-12(fp)
   30ae8:	018000f4 	movhi	r6,3
   30aec:	3182d504 	addi	r6,r6,2900
   30af0:	180b883a 	mov	r5,r3
   30af4:	1009883a 	mov	r4,r2
   30af8:	00324400 	call	32440 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   30afc:	e0bffd17 	ldw	r2,-12(fp)
   30b00:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   30b04:	e0bffd17 	ldw	r2,-12(fp)
   30b08:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   30b0c:	d0e72517 	ldw	r3,-25452(gp)
   30b10:	e1fffd17 	ldw	r7,-12(fp)
   30b14:	018000f4 	movhi	r6,3
   30b18:	31835804 	addi	r6,r6,3424
   30b1c:	180b883a 	mov	r5,r3
   30b20:	1009883a 	mov	r4,r2
   30b24:	0031d640 	call	31d64 <alt_alarm_start>
   30b28:	1000040e 	bge	r2,zero,30b3c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   30b2c:	e0fffd17 	ldw	r3,-12(fp)
   30b30:	00a00034 	movhi	r2,32768
   30b34:	10bfffc4 	addi	r2,r2,-1
   30b38:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   30b3c:	0001883a 	nop
   30b40:	e037883a 	mov	sp,fp
   30b44:	dfc00117 	ldw	ra,4(sp)
   30b48:	df000017 	ldw	fp,0(sp)
   30b4c:	dec00204 	addi	sp,sp,8
   30b50:	f800283a 	ret

00030b54 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   30b54:	defff804 	addi	sp,sp,-32
   30b58:	df000715 	stw	fp,28(sp)
   30b5c:	df000704 	addi	fp,sp,28
   30b60:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   30b64:	e0bfff17 	ldw	r2,-4(fp)
   30b68:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   30b6c:	e0bffb17 	ldw	r2,-20(fp)
   30b70:	10800017 	ldw	r2,0(r2)
   30b74:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   30b78:	e0bffc17 	ldw	r2,-16(fp)
   30b7c:	10800104 	addi	r2,r2,4
   30b80:	10800037 	ldwio	r2,0(r2)
   30b84:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   30b88:	e0bffd17 	ldw	r2,-12(fp)
   30b8c:	1080c00c 	andi	r2,r2,768
   30b90:	10006d26 	beq	r2,zero,30d48 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   30b94:	e0bffd17 	ldw	r2,-12(fp)
   30b98:	1080400c 	andi	r2,r2,256
   30b9c:	10003526 	beq	r2,zero,30c74 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   30ba0:	00800074 	movhi	r2,1
   30ba4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   30ba8:	e0bffb17 	ldw	r2,-20(fp)
   30bac:	10800a17 	ldw	r2,40(r2)
   30bb0:	10800044 	addi	r2,r2,1
   30bb4:	1081ffcc 	andi	r2,r2,2047
   30bb8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   30bbc:	e0bffb17 	ldw	r2,-20(fp)
   30bc0:	10c00b17 	ldw	r3,44(r2)
   30bc4:	e0bffe17 	ldw	r2,-8(fp)
   30bc8:	18801526 	beq	r3,r2,30c20 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   30bcc:	e0bffc17 	ldw	r2,-16(fp)
   30bd0:	10800037 	ldwio	r2,0(r2)
   30bd4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   30bd8:	e0bff917 	ldw	r2,-28(fp)
   30bdc:	10a0000c 	andi	r2,r2,32768
   30be0:	10001126 	beq	r2,zero,30c28 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   30be4:	e0bffb17 	ldw	r2,-20(fp)
   30be8:	10800a17 	ldw	r2,40(r2)
   30bec:	e0fff917 	ldw	r3,-28(fp)
   30bf0:	1809883a 	mov	r4,r3
   30bf4:	e0fffb17 	ldw	r3,-20(fp)
   30bf8:	1885883a 	add	r2,r3,r2
   30bfc:	10800e04 	addi	r2,r2,56
   30c00:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   30c04:	e0bffb17 	ldw	r2,-20(fp)
   30c08:	10800a17 	ldw	r2,40(r2)
   30c0c:	10800044 	addi	r2,r2,1
   30c10:	10c1ffcc 	andi	r3,r2,2047
   30c14:	e0bffb17 	ldw	r2,-20(fp)
   30c18:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   30c1c:	003fe206 	br	30ba8 <_gp+0xffff3d88>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   30c20:	0001883a 	nop
   30c24:	00000106 	br	30c2c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   30c28:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   30c2c:	e0bff917 	ldw	r2,-28(fp)
   30c30:	10bfffec 	andhi	r2,r2,65535
   30c34:	10000f26 	beq	r2,zero,30c74 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   30c38:	e0bffb17 	ldw	r2,-20(fp)
   30c3c:	10c00817 	ldw	r3,32(r2)
   30c40:	00bfff84 	movi	r2,-2
   30c44:	1886703a 	and	r3,r3,r2
   30c48:	e0bffb17 	ldw	r2,-20(fp)
   30c4c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   30c50:	e0bffc17 	ldw	r2,-16(fp)
   30c54:	10800104 	addi	r2,r2,4
   30c58:	1007883a 	mov	r3,r2
   30c5c:	e0bffb17 	ldw	r2,-20(fp)
   30c60:	10800817 	ldw	r2,32(r2)
   30c64:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   30c68:	e0bffc17 	ldw	r2,-16(fp)
   30c6c:	10800104 	addi	r2,r2,4
   30c70:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   30c74:	e0bffd17 	ldw	r2,-12(fp)
   30c78:	1080800c 	andi	r2,r2,512
   30c7c:	103fbe26 	beq	r2,zero,30b78 <_gp+0xffff3d58>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   30c80:	e0bffd17 	ldw	r2,-12(fp)
   30c84:	1004d43a 	srli	r2,r2,16
   30c88:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   30c8c:	00001406 	br	30ce0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   30c90:	e0bffc17 	ldw	r2,-16(fp)
   30c94:	e0fffb17 	ldw	r3,-20(fp)
   30c98:	18c00d17 	ldw	r3,52(r3)
   30c9c:	e13ffb17 	ldw	r4,-20(fp)
   30ca0:	20c7883a 	add	r3,r4,r3
   30ca4:	18c20e04 	addi	r3,r3,2104
   30ca8:	18c00003 	ldbu	r3,0(r3)
   30cac:	18c03fcc 	andi	r3,r3,255
   30cb0:	18c0201c 	xori	r3,r3,128
   30cb4:	18ffe004 	addi	r3,r3,-128
   30cb8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   30cbc:	e0bffb17 	ldw	r2,-20(fp)
   30cc0:	10800d17 	ldw	r2,52(r2)
   30cc4:	10800044 	addi	r2,r2,1
   30cc8:	10c1ffcc 	andi	r3,r2,2047
   30ccc:	e0bffb17 	ldw	r2,-20(fp)
   30cd0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   30cd4:	e0bffa17 	ldw	r2,-24(fp)
   30cd8:	10bfffc4 	addi	r2,r2,-1
   30cdc:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   30ce0:	e0bffa17 	ldw	r2,-24(fp)
   30ce4:	10000526 	beq	r2,zero,30cfc <altera_avalon_jtag_uart_irq+0x1a8>
   30ce8:	e0bffb17 	ldw	r2,-20(fp)
   30cec:	10c00d17 	ldw	r3,52(r2)
   30cf0:	e0bffb17 	ldw	r2,-20(fp)
   30cf4:	10800c17 	ldw	r2,48(r2)
   30cf8:	18bfe51e 	bne	r3,r2,30c90 <_gp+0xffff3e70>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   30cfc:	e0bffa17 	ldw	r2,-24(fp)
   30d00:	103f9d26 	beq	r2,zero,30b78 <_gp+0xffff3d58>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   30d04:	e0bffb17 	ldw	r2,-20(fp)
   30d08:	10c00817 	ldw	r3,32(r2)
   30d0c:	00bfff44 	movi	r2,-3
   30d10:	1886703a 	and	r3,r3,r2
   30d14:	e0bffb17 	ldw	r2,-20(fp)
   30d18:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   30d1c:	e0bffb17 	ldw	r2,-20(fp)
   30d20:	10800017 	ldw	r2,0(r2)
   30d24:	10800104 	addi	r2,r2,4
   30d28:	1007883a 	mov	r3,r2
   30d2c:	e0bffb17 	ldw	r2,-20(fp)
   30d30:	10800817 	ldw	r2,32(r2)
   30d34:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   30d38:	e0bffc17 	ldw	r2,-16(fp)
   30d3c:	10800104 	addi	r2,r2,4
   30d40:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   30d44:	003f8c06 	br	30b78 <_gp+0xffff3d58>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   30d48:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   30d4c:	0001883a 	nop
   30d50:	e037883a 	mov	sp,fp
   30d54:	df000017 	ldw	fp,0(sp)
   30d58:	dec00104 	addi	sp,sp,4
   30d5c:	f800283a 	ret

00030d60 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   30d60:	defff804 	addi	sp,sp,-32
   30d64:	df000715 	stw	fp,28(sp)
   30d68:	df000704 	addi	fp,sp,28
   30d6c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   30d70:	e0bffb17 	ldw	r2,-20(fp)
   30d74:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   30d78:	e0bff917 	ldw	r2,-28(fp)
   30d7c:	10800017 	ldw	r2,0(r2)
   30d80:	10800104 	addi	r2,r2,4
   30d84:	10800037 	ldwio	r2,0(r2)
   30d88:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   30d8c:	e0bffa17 	ldw	r2,-24(fp)
   30d90:	1081000c 	andi	r2,r2,1024
   30d94:	10000b26 	beq	r2,zero,30dc4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   30d98:	e0bff917 	ldw	r2,-28(fp)
   30d9c:	10800017 	ldw	r2,0(r2)
   30da0:	10800104 	addi	r2,r2,4
   30da4:	1007883a 	mov	r3,r2
   30da8:	e0bff917 	ldw	r2,-28(fp)
   30dac:	10800817 	ldw	r2,32(r2)
   30db0:	10810014 	ori	r2,r2,1024
   30db4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   30db8:	e0bff917 	ldw	r2,-28(fp)
   30dbc:	10000915 	stw	zero,36(r2)
   30dc0:	00000a06 	br	30dec <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   30dc4:	e0bff917 	ldw	r2,-28(fp)
   30dc8:	10c00917 	ldw	r3,36(r2)
   30dcc:	00a00034 	movhi	r2,32768
   30dd0:	10bfff04 	addi	r2,r2,-4
   30dd4:	10c00536 	bltu	r2,r3,30dec <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   30dd8:	e0bff917 	ldw	r2,-28(fp)
   30ddc:	10800917 	ldw	r2,36(r2)
   30de0:	10c00044 	addi	r3,r2,1
   30de4:	e0bff917 	ldw	r2,-28(fp)
   30de8:	10c00915 	stw	r3,36(r2)
   30dec:	d0a72517 	ldw	r2,-25452(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   30df0:	e037883a 	mov	sp,fp
   30df4:	df000017 	ldw	fp,0(sp)
   30df8:	dec00104 	addi	sp,sp,4
   30dfc:	f800283a 	ret

00030e00 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   30e00:	defffd04 	addi	sp,sp,-12
   30e04:	df000215 	stw	fp,8(sp)
   30e08:	df000204 	addi	fp,sp,8
   30e0c:	e13ffe15 	stw	r4,-8(fp)
   30e10:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   30e14:	00000506 	br	30e2c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   30e18:	e0bfff17 	ldw	r2,-4(fp)
   30e1c:	1090000c 	andi	r2,r2,16384
   30e20:	10000226 	beq	r2,zero,30e2c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   30e24:	00bffd44 	movi	r2,-11
   30e28:	00000b06 	br	30e58 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   30e2c:	e0bffe17 	ldw	r2,-8(fp)
   30e30:	10c00d17 	ldw	r3,52(r2)
   30e34:	e0bffe17 	ldw	r2,-8(fp)
   30e38:	10800c17 	ldw	r2,48(r2)
   30e3c:	18800526 	beq	r3,r2,30e54 <altera_avalon_jtag_uart_close+0x54>
   30e40:	e0bffe17 	ldw	r2,-8(fp)
   30e44:	10c00917 	ldw	r3,36(r2)
   30e48:	e0bffe17 	ldw	r2,-8(fp)
   30e4c:	10800117 	ldw	r2,4(r2)
   30e50:	18bff136 	bltu	r3,r2,30e18 <_gp+0xffff3ff8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   30e54:	0005883a 	mov	r2,zero
}
   30e58:	e037883a 	mov	sp,fp
   30e5c:	df000017 	ldw	fp,0(sp)
   30e60:	dec00104 	addi	sp,sp,4
   30e64:	f800283a 	ret

00030e68 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   30e68:	defffa04 	addi	sp,sp,-24
   30e6c:	df000515 	stw	fp,20(sp)
   30e70:	df000504 	addi	fp,sp,20
   30e74:	e13ffd15 	stw	r4,-12(fp)
   30e78:	e17ffe15 	stw	r5,-8(fp)
   30e7c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   30e80:	00bff9c4 	movi	r2,-25
   30e84:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   30e88:	e0bffe17 	ldw	r2,-8(fp)
   30e8c:	10da8060 	cmpeqi	r3,r2,27137
   30e90:	1800031e 	bne	r3,zero,30ea0 <altera_avalon_jtag_uart_ioctl+0x38>
   30e94:	109a80a0 	cmpeqi	r2,r2,27138
   30e98:	1000181e 	bne	r2,zero,30efc <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   30e9c:	00002906 	br	30f44 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   30ea0:	e0bffd17 	ldw	r2,-12(fp)
   30ea4:	10c00117 	ldw	r3,4(r2)
   30ea8:	00a00034 	movhi	r2,32768
   30eac:	10bfffc4 	addi	r2,r2,-1
   30eb0:	18802126 	beq	r3,r2,30f38 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   30eb4:	e0bfff17 	ldw	r2,-4(fp)
   30eb8:	10800017 	ldw	r2,0(r2)
   30ebc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   30ec0:	e0bffc17 	ldw	r2,-16(fp)
   30ec4:	10800090 	cmplti	r2,r2,2
   30ec8:	1000061e 	bne	r2,zero,30ee4 <altera_avalon_jtag_uart_ioctl+0x7c>
   30ecc:	e0fffc17 	ldw	r3,-16(fp)
   30ed0:	00a00034 	movhi	r2,32768
   30ed4:	10bfffc4 	addi	r2,r2,-1
   30ed8:	18800226 	beq	r3,r2,30ee4 <altera_avalon_jtag_uart_ioctl+0x7c>
   30edc:	e0bffc17 	ldw	r2,-16(fp)
   30ee0:	00000206 	br	30eec <altera_avalon_jtag_uart_ioctl+0x84>
   30ee4:	00a00034 	movhi	r2,32768
   30ee8:	10bfff84 	addi	r2,r2,-2
   30eec:	e0fffd17 	ldw	r3,-12(fp)
   30ef0:	18800115 	stw	r2,4(r3)
      rc = 0;
   30ef4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   30ef8:	00000f06 	br	30f38 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   30efc:	e0bffd17 	ldw	r2,-12(fp)
   30f00:	10c00117 	ldw	r3,4(r2)
   30f04:	00a00034 	movhi	r2,32768
   30f08:	10bfffc4 	addi	r2,r2,-1
   30f0c:	18800c26 	beq	r3,r2,30f40 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   30f10:	e0bffd17 	ldw	r2,-12(fp)
   30f14:	10c00917 	ldw	r3,36(r2)
   30f18:	e0bffd17 	ldw	r2,-12(fp)
   30f1c:	10800117 	ldw	r2,4(r2)
   30f20:	1885803a 	cmpltu	r2,r3,r2
   30f24:	10c03fcc 	andi	r3,r2,255
   30f28:	e0bfff17 	ldw	r2,-4(fp)
   30f2c:	10c00015 	stw	r3,0(r2)
      rc = 0;
   30f30:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   30f34:	00000206 	br	30f40 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   30f38:	0001883a 	nop
   30f3c:	00000106 	br	30f44 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   30f40:	0001883a 	nop

  default:
    break;
  }

  return rc;
   30f44:	e0bffb17 	ldw	r2,-20(fp)
}
   30f48:	e037883a 	mov	sp,fp
   30f4c:	df000017 	ldw	fp,0(sp)
   30f50:	dec00104 	addi	sp,sp,4
   30f54:	f800283a 	ret

00030f58 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   30f58:	defff304 	addi	sp,sp,-52
   30f5c:	dfc00c15 	stw	ra,48(sp)
   30f60:	df000b15 	stw	fp,44(sp)
   30f64:	df000b04 	addi	fp,sp,44
   30f68:	e13ffc15 	stw	r4,-16(fp)
   30f6c:	e17ffd15 	stw	r5,-12(fp)
   30f70:	e1bffe15 	stw	r6,-8(fp)
   30f74:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   30f78:	e0bffd17 	ldw	r2,-12(fp)
   30f7c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   30f80:	00004706 	br	310a0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   30f84:	e0bffc17 	ldw	r2,-16(fp)
   30f88:	10800a17 	ldw	r2,40(r2)
   30f8c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   30f90:	e0bffc17 	ldw	r2,-16(fp)
   30f94:	10800b17 	ldw	r2,44(r2)
   30f98:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   30f9c:	e0fff717 	ldw	r3,-36(fp)
   30fa0:	e0bff817 	ldw	r2,-32(fp)
   30fa4:	18800536 	bltu	r3,r2,30fbc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   30fa8:	e0fff717 	ldw	r3,-36(fp)
   30fac:	e0bff817 	ldw	r2,-32(fp)
   30fb0:	1885c83a 	sub	r2,r3,r2
   30fb4:	e0bff615 	stw	r2,-40(fp)
   30fb8:	00000406 	br	30fcc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   30fbc:	00c20004 	movi	r3,2048
   30fc0:	e0bff817 	ldw	r2,-32(fp)
   30fc4:	1885c83a 	sub	r2,r3,r2
   30fc8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   30fcc:	e0bff617 	ldw	r2,-40(fp)
   30fd0:	10001e26 	beq	r2,zero,3104c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   30fd4:	e0fffe17 	ldw	r3,-8(fp)
   30fd8:	e0bff617 	ldw	r2,-40(fp)
   30fdc:	1880022e 	bgeu	r3,r2,30fe8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   30fe0:	e0bffe17 	ldw	r2,-8(fp)
   30fe4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   30fe8:	e0bffc17 	ldw	r2,-16(fp)
   30fec:	10c00e04 	addi	r3,r2,56
   30ff0:	e0bff817 	ldw	r2,-32(fp)
   30ff4:	1885883a 	add	r2,r3,r2
   30ff8:	e1bff617 	ldw	r6,-40(fp)
   30ffc:	100b883a 	mov	r5,r2
   31000:	e13ff517 	ldw	r4,-44(fp)
   31004:	0028bc00 	call	28bc0 <memcpy>
      ptr   += n;
   31008:	e0fff517 	ldw	r3,-44(fp)
   3100c:	e0bff617 	ldw	r2,-40(fp)
   31010:	1885883a 	add	r2,r3,r2
   31014:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   31018:	e0fffe17 	ldw	r3,-8(fp)
   3101c:	e0bff617 	ldw	r2,-40(fp)
   31020:	1885c83a 	sub	r2,r3,r2
   31024:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   31028:	e0fff817 	ldw	r3,-32(fp)
   3102c:	e0bff617 	ldw	r2,-40(fp)
   31030:	1885883a 	add	r2,r3,r2
   31034:	10c1ffcc 	andi	r3,r2,2047
   31038:	e0bffc17 	ldw	r2,-16(fp)
   3103c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   31040:	e0bffe17 	ldw	r2,-8(fp)
   31044:	00bfcf16 	blt	zero,r2,30f84 <_gp+0xffff4164>
   31048:	00000106 	br	31050 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   3104c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   31050:	e0fff517 	ldw	r3,-44(fp)
   31054:	e0bffd17 	ldw	r2,-12(fp)
   31058:	1880141e 	bne	r3,r2,310ac <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   3105c:	e0bfff17 	ldw	r2,-4(fp)
   31060:	1090000c 	andi	r2,r2,16384
   31064:	1000131e 	bne	r2,zero,310b4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   31068:	0001883a 	nop
   3106c:	e0bffc17 	ldw	r2,-16(fp)
   31070:	10c00a17 	ldw	r3,40(r2)
   31074:	e0bff717 	ldw	r2,-36(fp)
   31078:	1880051e 	bne	r3,r2,31090 <altera_avalon_jtag_uart_read+0x138>
   3107c:	e0bffc17 	ldw	r2,-16(fp)
   31080:	10c00917 	ldw	r3,36(r2)
   31084:	e0bffc17 	ldw	r2,-16(fp)
   31088:	10800117 	ldw	r2,4(r2)
   3108c:	18bff736 	bltu	r3,r2,3106c <_gp+0xffff424c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   31090:	e0bffc17 	ldw	r2,-16(fp)
   31094:	10c00a17 	ldw	r3,40(r2)
   31098:	e0bff717 	ldw	r2,-36(fp)
   3109c:	18800726 	beq	r3,r2,310bc <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   310a0:	e0bffe17 	ldw	r2,-8(fp)
   310a4:	00bfb716 	blt	zero,r2,30f84 <_gp+0xffff4164>
   310a8:	00000506 	br	310c0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   310ac:	0001883a 	nop
   310b0:	00000306 	br	310c0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   310b4:	0001883a 	nop
   310b8:	00000106 	br	310c0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   310bc:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   310c0:	e0fff517 	ldw	r3,-44(fp)
   310c4:	e0bffd17 	ldw	r2,-12(fp)
   310c8:	18801826 	beq	r3,r2,3112c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   310cc:	0005303a 	rdctl	r2,status
   310d0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   310d4:	e0fffb17 	ldw	r3,-20(fp)
   310d8:	00bfff84 	movi	r2,-2
   310dc:	1884703a 	and	r2,r3,r2
   310e0:	1001703a 	wrctl	status,r2
  
  return context;
   310e4:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   310e8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   310ec:	e0bffc17 	ldw	r2,-16(fp)
   310f0:	10800817 	ldw	r2,32(r2)
   310f4:	10c00054 	ori	r3,r2,1
   310f8:	e0bffc17 	ldw	r2,-16(fp)
   310fc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   31100:	e0bffc17 	ldw	r2,-16(fp)
   31104:	10800017 	ldw	r2,0(r2)
   31108:	10800104 	addi	r2,r2,4
   3110c:	1007883a 	mov	r3,r2
   31110:	e0bffc17 	ldw	r2,-16(fp)
   31114:	10800817 	ldw	r2,32(r2)
   31118:	18800035 	stwio	r2,0(r3)
   3111c:	e0bffa17 	ldw	r2,-24(fp)
   31120:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   31124:	e0bff917 	ldw	r2,-28(fp)
   31128:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   3112c:	e0fff517 	ldw	r3,-44(fp)
   31130:	e0bffd17 	ldw	r2,-12(fp)
   31134:	18800426 	beq	r3,r2,31148 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   31138:	e0fff517 	ldw	r3,-44(fp)
   3113c:	e0bffd17 	ldw	r2,-12(fp)
   31140:	1885c83a 	sub	r2,r3,r2
   31144:	00000606 	br	31160 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   31148:	e0bfff17 	ldw	r2,-4(fp)
   3114c:	1090000c 	andi	r2,r2,16384
   31150:	10000226 	beq	r2,zero,3115c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   31154:	00bffd44 	movi	r2,-11
   31158:	00000106 	br	31160 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   3115c:	00bffec4 	movi	r2,-5
}
   31160:	e037883a 	mov	sp,fp
   31164:	dfc00117 	ldw	ra,4(sp)
   31168:	df000017 	ldw	fp,0(sp)
   3116c:	dec00204 	addi	sp,sp,8
   31170:	f800283a 	ret

00031174 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   31174:	defff304 	addi	sp,sp,-52
   31178:	dfc00c15 	stw	ra,48(sp)
   3117c:	df000b15 	stw	fp,44(sp)
   31180:	df000b04 	addi	fp,sp,44
   31184:	e13ffc15 	stw	r4,-16(fp)
   31188:	e17ffd15 	stw	r5,-12(fp)
   3118c:	e1bffe15 	stw	r6,-8(fp)
   31190:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   31194:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   31198:	e0bffd17 	ldw	r2,-12(fp)
   3119c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   311a0:	00003706 	br	31280 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   311a4:	e0bffc17 	ldw	r2,-16(fp)
   311a8:	10800c17 	ldw	r2,48(r2)
   311ac:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   311b0:	e0bffc17 	ldw	r2,-16(fp)
   311b4:	10800d17 	ldw	r2,52(r2)
   311b8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   311bc:	e0fff917 	ldw	r3,-28(fp)
   311c0:	e0bff517 	ldw	r2,-44(fp)
   311c4:	1880062e 	bgeu	r3,r2,311e0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   311c8:	e0fff517 	ldw	r3,-44(fp)
   311cc:	e0bff917 	ldw	r2,-28(fp)
   311d0:	1885c83a 	sub	r2,r3,r2
   311d4:	10bfffc4 	addi	r2,r2,-1
   311d8:	e0bff615 	stw	r2,-40(fp)
   311dc:	00000b06 	br	3120c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   311e0:	e0bff517 	ldw	r2,-44(fp)
   311e4:	10000526 	beq	r2,zero,311fc <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   311e8:	00c20004 	movi	r3,2048
   311ec:	e0bff917 	ldw	r2,-28(fp)
   311f0:	1885c83a 	sub	r2,r3,r2
   311f4:	e0bff615 	stw	r2,-40(fp)
   311f8:	00000406 	br	3120c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   311fc:	00c1ffc4 	movi	r3,2047
   31200:	e0bff917 	ldw	r2,-28(fp)
   31204:	1885c83a 	sub	r2,r3,r2
   31208:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   3120c:	e0bff617 	ldw	r2,-40(fp)
   31210:	10001e26 	beq	r2,zero,3128c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   31214:	e0fffe17 	ldw	r3,-8(fp)
   31218:	e0bff617 	ldw	r2,-40(fp)
   3121c:	1880022e 	bgeu	r3,r2,31228 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   31220:	e0bffe17 	ldw	r2,-8(fp)
   31224:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   31228:	e0bffc17 	ldw	r2,-16(fp)
   3122c:	10c20e04 	addi	r3,r2,2104
   31230:	e0bff917 	ldw	r2,-28(fp)
   31234:	1885883a 	add	r2,r3,r2
   31238:	e1bff617 	ldw	r6,-40(fp)
   3123c:	e17ffd17 	ldw	r5,-12(fp)
   31240:	1009883a 	mov	r4,r2
   31244:	0028bc00 	call	28bc0 <memcpy>
      ptr   += n;
   31248:	e0fffd17 	ldw	r3,-12(fp)
   3124c:	e0bff617 	ldw	r2,-40(fp)
   31250:	1885883a 	add	r2,r3,r2
   31254:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   31258:	e0fffe17 	ldw	r3,-8(fp)
   3125c:	e0bff617 	ldw	r2,-40(fp)
   31260:	1885c83a 	sub	r2,r3,r2
   31264:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   31268:	e0fff917 	ldw	r3,-28(fp)
   3126c:	e0bff617 	ldw	r2,-40(fp)
   31270:	1885883a 	add	r2,r3,r2
   31274:	10c1ffcc 	andi	r3,r2,2047
   31278:	e0bffc17 	ldw	r2,-16(fp)
   3127c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   31280:	e0bffe17 	ldw	r2,-8(fp)
   31284:	00bfc716 	blt	zero,r2,311a4 <_gp+0xffff4384>
   31288:	00000106 	br	31290 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   3128c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   31290:	0005303a 	rdctl	r2,status
   31294:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   31298:	e0fffb17 	ldw	r3,-20(fp)
   3129c:	00bfff84 	movi	r2,-2
   312a0:	1884703a 	and	r2,r3,r2
   312a4:	1001703a 	wrctl	status,r2
  
  return context;
   312a8:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   312ac:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   312b0:	e0bffc17 	ldw	r2,-16(fp)
   312b4:	10800817 	ldw	r2,32(r2)
   312b8:	10c00094 	ori	r3,r2,2
   312bc:	e0bffc17 	ldw	r2,-16(fp)
   312c0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   312c4:	e0bffc17 	ldw	r2,-16(fp)
   312c8:	10800017 	ldw	r2,0(r2)
   312cc:	10800104 	addi	r2,r2,4
   312d0:	1007883a 	mov	r3,r2
   312d4:	e0bffc17 	ldw	r2,-16(fp)
   312d8:	10800817 	ldw	r2,32(r2)
   312dc:	18800035 	stwio	r2,0(r3)
   312e0:	e0bffa17 	ldw	r2,-24(fp)
   312e4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   312e8:	e0bff817 	ldw	r2,-32(fp)
   312ec:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   312f0:	e0bffe17 	ldw	r2,-8(fp)
   312f4:	0080100e 	bge	zero,r2,31338 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   312f8:	e0bfff17 	ldw	r2,-4(fp)
   312fc:	1090000c 	andi	r2,r2,16384
   31300:	1000101e 	bne	r2,zero,31344 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   31304:	0001883a 	nop
   31308:	e0bffc17 	ldw	r2,-16(fp)
   3130c:	10c00d17 	ldw	r3,52(r2)
   31310:	e0bff517 	ldw	r2,-44(fp)
   31314:	1880051e 	bne	r3,r2,3132c <altera_avalon_jtag_uart_write+0x1b8>
   31318:	e0bffc17 	ldw	r2,-16(fp)
   3131c:	10c00917 	ldw	r3,36(r2)
   31320:	e0bffc17 	ldw	r2,-16(fp)
   31324:	10800117 	ldw	r2,4(r2)
   31328:	18bff736 	bltu	r3,r2,31308 <_gp+0xffff44e8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   3132c:	e0bffc17 	ldw	r2,-16(fp)
   31330:	10800917 	ldw	r2,36(r2)
   31334:	1000051e 	bne	r2,zero,3134c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   31338:	e0bffe17 	ldw	r2,-8(fp)
   3133c:	00bfd016 	blt	zero,r2,31280 <_gp+0xffff4460>
   31340:	00000306 	br	31350 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   31344:	0001883a 	nop
   31348:	00000106 	br	31350 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   3134c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   31350:	e0fffd17 	ldw	r3,-12(fp)
   31354:	e0bff717 	ldw	r2,-36(fp)
   31358:	18800426 	beq	r3,r2,3136c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   3135c:	e0fffd17 	ldw	r3,-12(fp)
   31360:	e0bff717 	ldw	r2,-36(fp)
   31364:	1885c83a 	sub	r2,r3,r2
   31368:	00000606 	br	31384 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   3136c:	e0bfff17 	ldw	r2,-4(fp)
   31370:	1090000c 	andi	r2,r2,16384
   31374:	10000226 	beq	r2,zero,31380 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   31378:	00bffd44 	movi	r2,-11
   3137c:	00000106 	br	31384 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   31380:	00bffec4 	movi	r2,-5
}
   31384:	e037883a 	mov	sp,fp
   31388:	dfc00117 	ldw	ra,4(sp)
   3138c:	df000017 	ldw	fp,0(sp)
   31390:	dec00204 	addi	sp,sp,8
   31394:	f800283a 	ret

00031398 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   31398:	defffa04 	addi	sp,sp,-24
   3139c:	dfc00515 	stw	ra,20(sp)
   313a0:	df000415 	stw	fp,16(sp)
   313a4:	df000404 	addi	fp,sp,16
   313a8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   313ac:	0007883a 	mov	r3,zero
   313b0:	e0bfff17 	ldw	r2,-4(fp)
   313b4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   313b8:	e0bfff17 	ldw	r2,-4(fp)
   313bc:	10800104 	addi	r2,r2,4
   313c0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   313c4:	0005303a 	rdctl	r2,status
   313c8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   313cc:	e0fffd17 	ldw	r3,-12(fp)
   313d0:	00bfff84 	movi	r2,-2
   313d4:	1884703a 	and	r2,r3,r2
   313d8:	1001703a 	wrctl	status,r2
  
  return context;
   313dc:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   313e0:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   313e4:	00305d80 	call	305d8 <alt_tick>
   313e8:	e0bffc17 	ldw	r2,-16(fp)
   313ec:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   313f0:	e0bffe17 	ldw	r2,-8(fp)
   313f4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   313f8:	0001883a 	nop
   313fc:	e037883a 	mov	sp,fp
   31400:	dfc00117 	ldw	ra,4(sp)
   31404:	df000017 	ldw	fp,0(sp)
   31408:	dec00204 	addi	sp,sp,8
   3140c:	f800283a 	ret

00031410 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   31410:	defff804 	addi	sp,sp,-32
   31414:	dfc00715 	stw	ra,28(sp)
   31418:	df000615 	stw	fp,24(sp)
   3141c:	df000604 	addi	fp,sp,24
   31420:	e13ffc15 	stw	r4,-16(fp)
   31424:	e17ffd15 	stw	r5,-12(fp)
   31428:	e1bffe15 	stw	r6,-8(fp)
   3142c:	e1ffff15 	stw	r7,-4(fp)
   31430:	e0bfff17 	ldw	r2,-4(fp)
   31434:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   31438:	d0a72517 	ldw	r2,-25452(gp)
   3143c:	1000021e 	bne	r2,zero,31448 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   31440:	e0bffb17 	ldw	r2,-20(fp)
   31444:	d0a72515 	stw	r2,-25452(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   31448:	e0bffc17 	ldw	r2,-16(fp)
   3144c:	10800104 	addi	r2,r2,4
   31450:	00c001c4 	movi	r3,7
   31454:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   31458:	d8000015 	stw	zero,0(sp)
   3145c:	e1fffc17 	ldw	r7,-16(fp)
   31460:	018000f4 	movhi	r6,3
   31464:	3184e604 	addi	r6,r6,5016
   31468:	e17ffe17 	ldw	r5,-8(fp)
   3146c:	e13ffd17 	ldw	r4,-12(fp)
   31470:	00324400 	call	32440 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   31474:	0001883a 	nop
   31478:	e037883a 	mov	sp,fp
   3147c:	dfc00117 	ldw	ra,4(sp)
   31480:	df000017 	ldw	fp,0(sp)
   31484:	dec00204 	addi	sp,sp,8
   31488:	f800283a 	ret

0003148c <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   3148c:	defffa04 	addi	sp,sp,-24
   31490:	dfc00515 	stw	ra,20(sp)
   31494:	df000415 	stw	fp,16(sp)
   31498:	df000404 	addi	fp,sp,16
   3149c:	e13ffd15 	stw	r4,-12(fp)
   314a0:	e17ffe15 	stw	r5,-8(fp)
   314a4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   314a8:	e0bffd17 	ldw	r2,-12(fp)
   314ac:	10800017 	ldw	r2,0(r2)
   314b0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
   314b4:	e0bffc17 	ldw	r2,-16(fp)
   314b8:	10c00a04 	addi	r3,r2,40
   314bc:	e0bffd17 	ldw	r2,-12(fp)
   314c0:	10800217 	ldw	r2,8(r2)
   314c4:	100f883a 	mov	r7,r2
   314c8:	e1bfff17 	ldw	r6,-4(fp)
   314cc:	e17ffe17 	ldw	r5,-8(fp)
   314d0:	1809883a 	mov	r4,r3
   314d4:	00319a00 	call	319a0 <altera_avalon_uart_read>
      fd->fd_flags);
}
   314d8:	e037883a 	mov	sp,fp
   314dc:	dfc00117 	ldw	ra,4(sp)
   314e0:	df000017 	ldw	fp,0(sp)
   314e4:	dec00204 	addi	sp,sp,8
   314e8:	f800283a 	ret

000314ec <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   314ec:	defffa04 	addi	sp,sp,-24
   314f0:	dfc00515 	stw	ra,20(sp)
   314f4:	df000415 	stw	fp,16(sp)
   314f8:	df000404 	addi	fp,sp,16
   314fc:	e13ffd15 	stw	r4,-12(fp)
   31500:	e17ffe15 	stw	r5,-8(fp)
   31504:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   31508:	e0bffd17 	ldw	r2,-12(fp)
   3150c:	10800017 	ldw	r2,0(r2)
   31510:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
   31514:	e0bffc17 	ldw	r2,-16(fp)
   31518:	10c00a04 	addi	r3,r2,40
   3151c:	e0bffd17 	ldw	r2,-12(fp)
   31520:	10800217 	ldw	r2,8(r2)
   31524:	100f883a 	mov	r7,r2
   31528:	e1bfff17 	ldw	r6,-4(fp)
   3152c:	e17ffe17 	ldw	r5,-8(fp)
   31530:	1809883a 	mov	r4,r3
   31534:	0031bb80 	call	31bb8 <altera_avalon_uart_write>
      fd->fd_flags);
}
   31538:	e037883a 	mov	sp,fp
   3153c:	dfc00117 	ldw	ra,4(sp)
   31540:	df000017 	ldw	fp,0(sp)
   31544:	dec00204 	addi	sp,sp,8
   31548:	f800283a 	ret

0003154c <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
   3154c:	defffc04 	addi	sp,sp,-16
   31550:	dfc00315 	stw	ra,12(sp)
   31554:	df000215 	stw	fp,8(sp)
   31558:	df000204 	addi	fp,sp,8
   3155c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   31560:	e0bfff17 	ldw	r2,-4(fp)
   31564:	10800017 	ldw	r2,0(r2)
   31568:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
   3156c:	e0bffe17 	ldw	r2,-8(fp)
   31570:	10c00a04 	addi	r3,r2,40
   31574:	e0bfff17 	ldw	r2,-4(fp)
   31578:	10800217 	ldw	r2,8(r2)
   3157c:	100b883a 	mov	r5,r2
   31580:	1809883a 	mov	r4,r3
   31584:	00319100 	call	31910 <altera_avalon_uart_close>
}
   31588:	e037883a 	mov	sp,fp
   3158c:	dfc00117 	ldw	ra,4(sp)
   31590:	df000017 	ldw	fp,0(sp)
   31594:	dec00204 	addi	sp,sp,8
   31598:	f800283a 	ret

0003159c <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
   3159c:	defff804 	addi	sp,sp,-32
   315a0:	dfc00715 	stw	ra,28(sp)
   315a4:	df000615 	stw	fp,24(sp)
   315a8:	df000604 	addi	fp,sp,24
   315ac:	e13ffd15 	stw	r4,-12(fp)
   315b0:	e17ffe15 	stw	r5,-8(fp)
   315b4:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
   315b8:	e0bffd17 	ldw	r2,-12(fp)
   315bc:	10800017 	ldw	r2,0(r2)
   315c0:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   315c4:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   315c8:	1000041e 	bne	r2,zero,315dc <altera_avalon_uart_init+0x40>
   315cc:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   315d0:	1000021e 	bne	r2,zero,315dc <altera_avalon_uart_init+0x40>
   315d4:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   315d8:	10000226 	beq	r2,zero,315e4 <altera_avalon_uart_init+0x48>
   315dc:	00800044 	movi	r2,1
   315e0:	00000106 	br	315e8 <altera_avalon_uart_init+0x4c>
   315e4:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   315e8:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
   315ec:	e0bffc17 	ldw	r2,-16(fp)
   315f0:	10000f1e 	bne	r2,zero,31630 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
   315f4:	e0bffd17 	ldw	r2,-12(fp)
   315f8:	00c32004 	movi	r3,3200
   315fc:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
   31600:	e0bffb17 	ldw	r2,-20(fp)
   31604:	10800304 	addi	r2,r2,12
   31608:	e0fffd17 	ldw	r3,-12(fp)
   3160c:	18c00117 	ldw	r3,4(r3)
   31610:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
   31614:	d8000015 	stw	zero,0(sp)
   31618:	e1fffd17 	ldw	r7,-12(fp)
   3161c:	018000f4 	movhi	r6,3
   31620:	31859204 	addi	r6,r6,5704
   31624:	e17fff17 	ldw	r5,-4(fp)
   31628:	e13ffe17 	ldw	r4,-8(fp)
   3162c:	00324400 	call	32440 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
   31630:	0001883a 	nop
   31634:	e037883a 	mov	sp,fp
   31638:	dfc00117 	ldw	ra,4(sp)
   3163c:	df000017 	ldw	fp,0(sp)
   31640:	dec00204 	addi	sp,sp,8
   31644:	f800283a 	ret

00031648 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
   31648:	defffa04 	addi	sp,sp,-24
   3164c:	dfc00515 	stw	ra,20(sp)
   31650:	df000415 	stw	fp,16(sp)
   31654:	df000404 	addi	fp,sp,16
   31658:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
   3165c:	e0bfff17 	ldw	r2,-4(fp)
   31660:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
   31664:	e0bffc17 	ldw	r2,-16(fp)
   31668:	10800017 	ldw	r2,0(r2)
   3166c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
   31670:	e0bffd17 	ldw	r2,-12(fp)
   31674:	10800204 	addi	r2,r2,8
   31678:	10800037 	ldwio	r2,0(r2)
   3167c:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
   31680:	e0bffd17 	ldw	r2,-12(fp)
   31684:	10800204 	addi	r2,r2,8
   31688:	0007883a 	mov	r3,zero
   3168c:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
   31690:	e0bffd17 	ldw	r2,-12(fp)
   31694:	10800204 	addi	r2,r2,8
   31698:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   3169c:	e0bffe17 	ldw	r2,-8(fp)
   316a0:	1080200c 	andi	r2,r2,128
   316a4:	10000326 	beq	r2,zero,316b4 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
   316a8:	e17ffe17 	ldw	r5,-8(fp)
   316ac:	e13ffc17 	ldw	r4,-16(fp)
   316b0:	00316e40 	call	316e4 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
   316b4:	e0bffe17 	ldw	r2,-8(fp)
   316b8:	1081100c 	andi	r2,r2,1088
   316bc:	10000326 	beq	r2,zero,316cc <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
   316c0:	e17ffe17 	ldw	r5,-8(fp)
   316c4:	e13ffc17 	ldw	r4,-16(fp)
   316c8:	00317c80 	call	317c8 <altera_avalon_uart_txirq>
  }
  

}
   316cc:	0001883a 	nop
   316d0:	e037883a 	mov	sp,fp
   316d4:	dfc00117 	ldw	ra,4(sp)
   316d8:	df000017 	ldw	fp,0(sp)
   316dc:	dec00204 	addi	sp,sp,8
   316e0:	f800283a 	ret

000316e4 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   316e4:	defffc04 	addi	sp,sp,-16
   316e8:	df000315 	stw	fp,12(sp)
   316ec:	df000304 	addi	fp,sp,12
   316f0:	e13ffe15 	stw	r4,-8(fp)
   316f4:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   316f8:	e0bfff17 	ldw	r2,-4(fp)
   316fc:	108000cc 	andi	r2,r2,3
   31700:	10002c1e 	bne	r2,zero,317b4 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
   31704:	e0bffe17 	ldw	r2,-8(fp)
   31708:	10800317 	ldw	r2,12(r2)
   3170c:	e0bffe17 	ldw	r2,-8(fp)
   31710:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   31714:	e0bffe17 	ldw	r2,-8(fp)
   31718:	10800317 	ldw	r2,12(r2)
   3171c:	10800044 	addi	r2,r2,1
   31720:	10800fcc 	andi	r2,r2,63
   31724:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   31728:	e0bffe17 	ldw	r2,-8(fp)
   3172c:	10800317 	ldw	r2,12(r2)
   31730:	e0fffe17 	ldw	r3,-8(fp)
   31734:	18c00017 	ldw	r3,0(r3)
   31738:	18c00037 	ldwio	r3,0(r3)
   3173c:	1809883a 	mov	r4,r3
   31740:	e0fffe17 	ldw	r3,-8(fp)
   31744:	1885883a 	add	r2,r3,r2
   31748:	10800704 	addi	r2,r2,28
   3174c:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
   31750:	e0bffe17 	ldw	r2,-8(fp)
   31754:	e0fffd17 	ldw	r3,-12(fp)
   31758:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   3175c:	e0bffe17 	ldw	r2,-8(fp)
   31760:	10800317 	ldw	r2,12(r2)
   31764:	10800044 	addi	r2,r2,1
   31768:	10800fcc 	andi	r2,r2,63
   3176c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
   31770:	e0bffe17 	ldw	r2,-8(fp)
   31774:	10c00217 	ldw	r3,8(r2)
   31778:	e0bffd17 	ldw	r2,-12(fp)
   3177c:	18800e1e 	bne	r3,r2,317b8 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   31780:	e0bffe17 	ldw	r2,-8(fp)
   31784:	10c00117 	ldw	r3,4(r2)
   31788:	00bfdfc4 	movi	r2,-129
   3178c:	1886703a 	and	r3,r3,r2
   31790:	e0bffe17 	ldw	r2,-8(fp)
   31794:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
   31798:	e0bffe17 	ldw	r2,-8(fp)
   3179c:	10800017 	ldw	r2,0(r2)
   317a0:	10800304 	addi	r2,r2,12
   317a4:	e0fffe17 	ldw	r3,-8(fp)
   317a8:	18c00117 	ldw	r3,4(r3)
   317ac:	10c00035 	stwio	r3,0(r2)
   317b0:	00000106 	br	317b8 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
   317b4:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
   317b8:	e037883a 	mov	sp,fp
   317bc:	df000017 	ldw	fp,0(sp)
   317c0:	dec00104 	addi	sp,sp,4
   317c4:	f800283a 	ret

000317c8 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   317c8:	defffb04 	addi	sp,sp,-20
   317cc:	df000415 	stw	fp,16(sp)
   317d0:	df000404 	addi	fp,sp,16
   317d4:	e13ffc15 	stw	r4,-16(fp)
   317d8:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
   317dc:	e0bffc17 	ldw	r2,-16(fp)
   317e0:	10c00417 	ldw	r3,16(r2)
   317e4:	e0bffc17 	ldw	r2,-16(fp)
   317e8:	10800517 	ldw	r2,20(r2)
   317ec:	18803226 	beq	r3,r2,318b8 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   317f0:	e0bffc17 	ldw	r2,-16(fp)
   317f4:	10800617 	ldw	r2,24(r2)
   317f8:	1080008c 	andi	r2,r2,2
   317fc:	10000326 	beq	r2,zero,3180c <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   31800:	e0bffd17 	ldw	r2,-12(fp)
   31804:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   31808:	10001d26 	beq	r2,zero,31880 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
   3180c:	e0bffc17 	ldw	r2,-16(fp)
   31810:	10800417 	ldw	r2,16(r2)
   31814:	e0bffc17 	ldw	r2,-16(fp)
   31818:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
   3181c:	e0bffc17 	ldw	r2,-16(fp)
   31820:	10800017 	ldw	r2,0(r2)
   31824:	10800104 	addi	r2,r2,4
   31828:	e0fffc17 	ldw	r3,-16(fp)
   3182c:	18c00417 	ldw	r3,16(r3)
   31830:	e13ffc17 	ldw	r4,-16(fp)
   31834:	20c7883a 	add	r3,r4,r3
   31838:	18c01704 	addi	r3,r3,92
   3183c:	18c00003 	ldbu	r3,0(r3)
   31840:	18c03fcc 	andi	r3,r3,255
   31844:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
   31848:	e0bffc17 	ldw	r2,-16(fp)
   3184c:	10800417 	ldw	r2,16(r2)
   31850:	10800044 	addi	r2,r2,1
   31854:	e0fffc17 	ldw	r3,-16(fp)
   31858:	18800415 	stw	r2,16(r3)
   3185c:	10c00fcc 	andi	r3,r2,63
   31860:	e0bffc17 	ldw	r2,-16(fp)
   31864:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   31868:	e0bffc17 	ldw	r2,-16(fp)
   3186c:	10800117 	ldw	r2,4(r2)
   31870:	10c01014 	ori	r3,r2,64
   31874:	e0bffc17 	ldw	r2,-16(fp)
   31878:	10c00115 	stw	r3,4(r2)
   3187c:	00000e06 	br	318b8 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
   31880:	e0bffc17 	ldw	r2,-16(fp)
   31884:	10800017 	ldw	r2,0(r2)
   31888:	10800204 	addi	r2,r2,8
   3188c:	10800037 	ldwio	r2,0(r2)
   31890:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   31894:	e0bffd17 	ldw	r2,-12(fp)
   31898:	1082000c 	andi	r2,r2,2048
   3189c:	1000061e 	bne	r2,zero,318b8 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   318a0:	e0bffc17 	ldw	r2,-16(fp)
   318a4:	10c00117 	ldw	r3,4(r2)
   318a8:	00bfefc4 	movi	r2,-65
   318ac:	1886703a 	and	r3,r3,r2
   318b0:	e0bffc17 	ldw	r2,-16(fp)
   318b4:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
   318b8:	e0bffc17 	ldw	r2,-16(fp)
   318bc:	10c00417 	ldw	r3,16(r2)
   318c0:	e0bffc17 	ldw	r2,-16(fp)
   318c4:	10800517 	ldw	r2,20(r2)
   318c8:	1880061e 	bne	r3,r2,318e4 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   318cc:	e0bffc17 	ldw	r2,-16(fp)
   318d0:	10c00117 	ldw	r3,4(r2)
   318d4:	00beefc4 	movi	r2,-1089
   318d8:	1886703a 	and	r3,r3,r2
   318dc:	e0bffc17 	ldw	r2,-16(fp)
   318e0:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   318e4:	e0bffc17 	ldw	r2,-16(fp)
   318e8:	10800017 	ldw	r2,0(r2)
   318ec:	10800304 	addi	r2,r2,12
   318f0:	e0fffc17 	ldw	r3,-16(fp)
   318f4:	18c00117 	ldw	r3,4(r3)
   318f8:	10c00035 	stwio	r3,0(r2)
}
   318fc:	0001883a 	nop
   31900:	e037883a 	mov	sp,fp
   31904:	df000017 	ldw	fp,0(sp)
   31908:	dec00104 	addi	sp,sp,4
   3190c:	f800283a 	ret

00031910 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
   31910:	defffd04 	addi	sp,sp,-12
   31914:	df000215 	stw	fp,8(sp)
   31918:	df000204 	addi	fp,sp,8
   3191c:	e13ffe15 	stw	r4,-8(fp)
   31920:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   31924:	00000506 	br	3193c <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   31928:	e0bfff17 	ldw	r2,-4(fp)
   3192c:	1090000c 	andi	r2,r2,16384
   31930:	10000226 	beq	r2,zero,3193c <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
   31934:	00bffd44 	movi	r2,-11
   31938:	00000606 	br	31954 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   3193c:	e0bffe17 	ldw	r2,-8(fp)
   31940:	10c00417 	ldw	r3,16(r2)
   31944:	e0bffe17 	ldw	r2,-8(fp)
   31948:	10800517 	ldw	r2,20(r2)
   3194c:	18bff61e 	bne	r3,r2,31928 <_gp+0xffff4b08>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   31950:	0005883a 	mov	r2,zero
}
   31954:	e037883a 	mov	sp,fp
   31958:	df000017 	ldw	fp,0(sp)
   3195c:	dec00104 	addi	sp,sp,4
   31960:	f800283a 	ret

00031964 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   31964:	defffe04 	addi	sp,sp,-8
   31968:	dfc00115 	stw	ra,4(sp)
   3196c:	df000015 	stw	fp,0(sp)
   31970:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   31974:	d0a01917 	ldw	r2,-32668(gp)
   31978:	10000326 	beq	r2,zero,31988 <alt_get_errno+0x24>
   3197c:	d0a01917 	ldw	r2,-32668(gp)
   31980:	103ee83a 	callr	r2
   31984:	00000106 	br	3198c <alt_get_errno+0x28>
   31988:	d0a71e04 	addi	r2,gp,-25480
}
   3198c:	e037883a 	mov	sp,fp
   31990:	dfc00117 	ldw	ra,4(sp)
   31994:	df000017 	ldw	fp,0(sp)
   31998:	dec00204 	addi	sp,sp,8
   3199c:	f800283a 	ret

000319a0 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   319a0:	defff204 	addi	sp,sp,-56
   319a4:	dfc00d15 	stw	ra,52(sp)
   319a8:	df000c15 	stw	fp,48(sp)
   319ac:	df000c04 	addi	fp,sp,48
   319b0:	e13ffc15 	stw	r4,-16(fp)
   319b4:	e17ffd15 	stw	r5,-12(fp)
   319b8:	e1bffe15 	stw	r6,-8(fp)
   319bc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
   319c0:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
   319c4:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
   319c8:	e0bfff17 	ldw	r2,-4(fp)
   319cc:	1090000c 	andi	r2,r2,16384
   319d0:	1005003a 	cmpeq	r2,r2,zero
   319d4:	10803fcc 	andi	r2,r2,255
   319d8:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   319dc:	00001306 	br	31a2c <altera_avalon_uart_read+0x8c>
    {
      count++;
   319e0:	e0bff517 	ldw	r2,-44(fp)
   319e4:	10800044 	addi	r2,r2,1
   319e8:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
   319ec:	e0bffd17 	ldw	r2,-12(fp)
   319f0:	10c00044 	addi	r3,r2,1
   319f4:	e0fffd15 	stw	r3,-12(fp)
   319f8:	e0fffc17 	ldw	r3,-16(fp)
   319fc:	18c00217 	ldw	r3,8(r3)
   31a00:	e13ffc17 	ldw	r4,-16(fp)
   31a04:	20c7883a 	add	r3,r4,r3
   31a08:	18c00704 	addi	r3,r3,28
   31a0c:	18c00003 	ldbu	r3,0(r3)
   31a10:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
   31a14:	e0bffc17 	ldw	r2,-16(fp)
   31a18:	10800217 	ldw	r2,8(r2)
   31a1c:	10800044 	addi	r2,r2,1
   31a20:	10c00fcc 	andi	r3,r2,63
   31a24:	e0bffc17 	ldw	r2,-16(fp)
   31a28:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   31a2c:	e0fff517 	ldw	r3,-44(fp)
   31a30:	e0bffe17 	ldw	r2,-8(fp)
   31a34:	1880050e 	bge	r3,r2,31a4c <altera_avalon_uart_read+0xac>
   31a38:	e0bffc17 	ldw	r2,-16(fp)
   31a3c:	10c00217 	ldw	r3,8(r2)
   31a40:	e0bffc17 	ldw	r2,-16(fp)
   31a44:	10800317 	ldw	r2,12(r2)
   31a48:	18bfe51e 	bne	r3,r2,319e0 <_gp+0xffff4bc0>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
   31a4c:	e0bff517 	ldw	r2,-44(fp)
   31a50:	1000251e 	bne	r2,zero,31ae8 <altera_avalon_uart_read+0x148>
   31a54:	e0bffc17 	ldw	r2,-16(fp)
   31a58:	10c00217 	ldw	r3,8(r2)
   31a5c:	e0bffc17 	ldw	r2,-16(fp)
   31a60:	10800317 	ldw	r2,12(r2)
   31a64:	1880201e 	bne	r3,r2,31ae8 <altera_avalon_uart_read+0x148>
    {
      if (!block)
   31a68:	e0bff617 	ldw	r2,-40(fp)
   31a6c:	1000071e 	bne	r2,zero,31a8c <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
   31a70:	00319640 	call	31964 <alt_get_errno>
   31a74:	1007883a 	mov	r3,r2
   31a78:	008002c4 	movi	r2,11
   31a7c:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
   31a80:	00800044 	movi	r2,1
   31a84:	e0bff405 	stb	r2,-48(fp)
        break;
   31a88:	00001b06 	br	31af8 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   31a8c:	0005303a 	rdctl	r2,status
   31a90:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   31a94:	e0fff917 	ldw	r3,-28(fp)
   31a98:	00bfff84 	movi	r2,-2
   31a9c:	1884703a 	and	r2,r3,r2
   31aa0:	1001703a 	wrctl	status,r2
  
  return context;
   31aa4:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
   31aa8:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   31aac:	e0bffc17 	ldw	r2,-16(fp)
   31ab0:	10800117 	ldw	r2,4(r2)
   31ab4:	10c02014 	ori	r3,r2,128
   31ab8:	e0bffc17 	ldw	r2,-16(fp)
   31abc:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   31ac0:	e0bffc17 	ldw	r2,-16(fp)
   31ac4:	10800017 	ldw	r2,0(r2)
   31ac8:	10800304 	addi	r2,r2,12
   31acc:	e0fffc17 	ldw	r3,-16(fp)
   31ad0:	18c00117 	ldw	r3,4(r3)
   31ad4:	10c00035 	stwio	r3,0(r2)
   31ad8:	e0bff817 	ldw	r2,-32(fp)
   31adc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   31ae0:	e0bffa17 	ldw	r2,-24(fp)
   31ae4:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
   31ae8:	e0bff517 	ldw	r2,-44(fp)
   31aec:	1000021e 	bne	r2,zero,31af8 <altera_avalon_uart_read+0x158>
   31af0:	e0bffe17 	ldw	r2,-8(fp)
   31af4:	103fcd1e 	bne	r2,zero,31a2c <_gp+0xffff4c0c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   31af8:	0005303a 	rdctl	r2,status
   31afc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   31b00:	e0fffb17 	ldw	r3,-20(fp)
   31b04:	00bfff84 	movi	r2,-2
   31b08:	1884703a 	and	r2,r3,r2
   31b0c:	1001703a 	wrctl	status,r2
  
  return context;
   31b10:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
   31b14:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   31b18:	e0bffc17 	ldw	r2,-16(fp)
   31b1c:	10800117 	ldw	r2,4(r2)
   31b20:	10c02014 	ori	r3,r2,128
   31b24:	e0bffc17 	ldw	r2,-16(fp)
   31b28:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   31b2c:	e0bffc17 	ldw	r2,-16(fp)
   31b30:	10800017 	ldw	r2,0(r2)
   31b34:	10800304 	addi	r2,r2,12
   31b38:	e0fffc17 	ldw	r3,-16(fp)
   31b3c:	18c00117 	ldw	r3,4(r3)
   31b40:	10c00035 	stwio	r3,0(r2)
   31b44:	e0bff817 	ldw	r2,-32(fp)
   31b48:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   31b4c:	e0bff717 	ldw	r2,-36(fp)
   31b50:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
   31b54:	e0bff403 	ldbu	r2,-48(fp)
   31b58:	10000226 	beq	r2,zero,31b64 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
   31b5c:	00bffd44 	movi	r2,-11
   31b60:	00000106 	br	31b68 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
   31b64:	e0bff517 	ldw	r2,-44(fp)
  }
}
   31b68:	e037883a 	mov	sp,fp
   31b6c:	dfc00117 	ldw	ra,4(sp)
   31b70:	df000017 	ldw	fp,0(sp)
   31b74:	dec00204 	addi	sp,sp,8
   31b78:	f800283a 	ret

00031b7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   31b7c:	defffe04 	addi	sp,sp,-8
   31b80:	dfc00115 	stw	ra,4(sp)
   31b84:	df000015 	stw	fp,0(sp)
   31b88:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   31b8c:	d0a01917 	ldw	r2,-32668(gp)
   31b90:	10000326 	beq	r2,zero,31ba0 <alt_get_errno+0x24>
   31b94:	d0a01917 	ldw	r2,-32668(gp)
   31b98:	103ee83a 	callr	r2
   31b9c:	00000106 	br	31ba4 <alt_get_errno+0x28>
   31ba0:	d0a71e04 	addi	r2,gp,-25480
}
   31ba4:	e037883a 	mov	sp,fp
   31ba8:	dfc00117 	ldw	ra,4(sp)
   31bac:	df000017 	ldw	fp,0(sp)
   31bb0:	dec00204 	addi	sp,sp,8
   31bb4:	f800283a 	ret

00031bb8 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   31bb8:	defff204 	addi	sp,sp,-56
   31bbc:	dfc00d15 	stw	ra,52(sp)
   31bc0:	df000c15 	stw	fp,48(sp)
   31bc4:	df000c04 	addi	fp,sp,48
   31bc8:	e13ffc15 	stw	r4,-16(fp)
   31bcc:	e17ffd15 	stw	r5,-12(fp)
   31bd0:	e1bffe15 	stw	r6,-8(fp)
   31bd4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
   31bd8:	e0bffe17 	ldw	r2,-8(fp)
   31bdc:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
   31be0:	e0bfff17 	ldw	r2,-4(fp)
   31be4:	1090000c 	andi	r2,r2,16384
   31be8:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   31bec:	00003c06 	br	31ce0 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   31bf0:	e0bffc17 	ldw	r2,-16(fp)
   31bf4:	10800517 	ldw	r2,20(r2)
   31bf8:	10800044 	addi	r2,r2,1
   31bfc:	10800fcc 	andi	r2,r2,63
   31c00:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
   31c04:	e0bffc17 	ldw	r2,-16(fp)
   31c08:	10c00417 	ldw	r3,16(r2)
   31c0c:	e0bff717 	ldw	r2,-36(fp)
   31c10:	1880221e 	bne	r3,r2,31c9c <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
   31c14:	e0bff517 	ldw	r2,-44(fp)
   31c18:	10000526 	beq	r2,zero,31c30 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
   31c1c:	0031b7c0 	call	31b7c <alt_get_errno>
   31c20:	1007883a 	mov	r3,r2
   31c24:	008002c4 	movi	r2,11
   31c28:	18800015 	stw	r2,0(r3)
        break;
   31c2c:	00002e06 	br	31ce8 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   31c30:	0005303a 	rdctl	r2,status
   31c34:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   31c38:	e0fff917 	ldw	r3,-28(fp)
   31c3c:	00bfff84 	movi	r2,-2
   31c40:	1884703a 	and	r2,r3,r2
   31c44:	1001703a 	wrctl	status,r2
  
  return context;
   31c48:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
   31c4c:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   31c50:	e0bffc17 	ldw	r2,-16(fp)
   31c54:	10800117 	ldw	r2,4(r2)
   31c58:	10c11014 	ori	r3,r2,1088
   31c5c:	e0bffc17 	ldw	r2,-16(fp)
   31c60:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   31c64:	e0bffc17 	ldw	r2,-16(fp)
   31c68:	10800017 	ldw	r2,0(r2)
   31c6c:	10800304 	addi	r2,r2,12
   31c70:	e0fffc17 	ldw	r3,-16(fp)
   31c74:	18c00117 	ldw	r3,4(r3)
   31c78:	10c00035 	stwio	r3,0(r2)
   31c7c:	e0bff817 	ldw	r2,-32(fp)
   31c80:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   31c84:	e0bff617 	ldw	r2,-40(fp)
   31c88:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
   31c8c:	e0bffc17 	ldw	r2,-16(fp)
   31c90:	10c00417 	ldw	r3,16(r2)
   31c94:	e0bff717 	ldw	r2,-36(fp)
   31c98:	18bffc26 	beq	r3,r2,31c8c <_gp+0xffff4e6c>
      }
    }

    count--;
   31c9c:	e0bff417 	ldw	r2,-48(fp)
   31ca0:	10bfffc4 	addi	r2,r2,-1
   31ca4:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
   31ca8:	e0bffc17 	ldw	r2,-16(fp)
   31cac:	10c00517 	ldw	r3,20(r2)
   31cb0:	e0bffd17 	ldw	r2,-12(fp)
   31cb4:	11000044 	addi	r4,r2,1
   31cb8:	e13ffd15 	stw	r4,-12(fp)
   31cbc:	10800003 	ldbu	r2,0(r2)
   31cc0:	1009883a 	mov	r4,r2
   31cc4:	e0bffc17 	ldw	r2,-16(fp)
   31cc8:	10c5883a 	add	r2,r2,r3
   31ccc:	10801704 	addi	r2,r2,92
   31cd0:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
   31cd4:	e0bffc17 	ldw	r2,-16(fp)
   31cd8:	e0fff717 	ldw	r3,-36(fp)
   31cdc:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   31ce0:	e0bff417 	ldw	r2,-48(fp)
   31ce4:	103fc21e 	bne	r2,zero,31bf0 <_gp+0xffff4dd0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   31ce8:	0005303a 	rdctl	r2,status
   31cec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   31cf0:	e0fffb17 	ldw	r3,-20(fp)
   31cf4:	00bfff84 	movi	r2,-2
   31cf8:	1884703a 	and	r2,r3,r2
   31cfc:	1001703a 	wrctl	status,r2
  
  return context;
   31d00:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
   31d04:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   31d08:	e0bffc17 	ldw	r2,-16(fp)
   31d0c:	10800117 	ldw	r2,4(r2)
   31d10:	10c11014 	ori	r3,r2,1088
   31d14:	e0bffc17 	ldw	r2,-16(fp)
   31d18:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   31d1c:	e0bffc17 	ldw	r2,-16(fp)
   31d20:	10800017 	ldw	r2,0(r2)
   31d24:	10800304 	addi	r2,r2,12
   31d28:	e0fffc17 	ldw	r3,-16(fp)
   31d2c:	18c00117 	ldw	r3,4(r3)
   31d30:	10c00035 	stwio	r3,0(r2)
   31d34:	e0bff817 	ldw	r2,-32(fp)
   31d38:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   31d3c:	e0bffa17 	ldw	r2,-24(fp)
   31d40:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
   31d44:	e0fffe17 	ldw	r3,-8(fp)
   31d48:	e0bff417 	ldw	r2,-48(fp)
   31d4c:	1885c83a 	sub	r2,r3,r2
}
   31d50:	e037883a 	mov	sp,fp
   31d54:	dfc00117 	ldw	ra,4(sp)
   31d58:	df000017 	ldw	fp,0(sp)
   31d5c:	dec00204 	addi	sp,sp,8
   31d60:	f800283a 	ret

00031d64 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   31d64:	defff504 	addi	sp,sp,-44
   31d68:	df000a15 	stw	fp,40(sp)
   31d6c:	df000a04 	addi	fp,sp,40
   31d70:	e13ffc15 	stw	r4,-16(fp)
   31d74:	e17ffd15 	stw	r5,-12(fp)
   31d78:	e1bffe15 	stw	r6,-8(fp)
   31d7c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   31d80:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   31d84:	d0a72517 	ldw	r2,-25452(gp)
  
  if (alt_ticks_per_second ())
   31d88:	10003c26 	beq	r2,zero,31e7c <alt_alarm_start+0x118>
  {
    if (alarm)
   31d8c:	e0bffc17 	ldw	r2,-16(fp)
   31d90:	10003826 	beq	r2,zero,31e74 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   31d94:	e0bffc17 	ldw	r2,-16(fp)
   31d98:	e0fffe17 	ldw	r3,-8(fp)
   31d9c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   31da0:	e0bffc17 	ldw	r2,-16(fp)
   31da4:	e0ffff17 	ldw	r3,-4(fp)
   31da8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   31dac:	0005303a 	rdctl	r2,status
   31db0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   31db4:	e0fff917 	ldw	r3,-28(fp)
   31db8:	00bfff84 	movi	r2,-2
   31dbc:	1884703a 	and	r2,r3,r2
   31dc0:	1001703a 	wrctl	status,r2
  
  return context;
   31dc4:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   31dc8:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   31dcc:	d0a72617 	ldw	r2,-25448(gp)
      
      current_nticks = alt_nticks();
   31dd0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   31dd4:	e0fffd17 	ldw	r3,-12(fp)
   31dd8:	e0bff617 	ldw	r2,-40(fp)
   31ddc:	1885883a 	add	r2,r3,r2
   31de0:	10c00044 	addi	r3,r2,1
   31de4:	e0bffc17 	ldw	r2,-16(fp)
   31de8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   31dec:	e0bffc17 	ldw	r2,-16(fp)
   31df0:	10c00217 	ldw	r3,8(r2)
   31df4:	e0bff617 	ldw	r2,-40(fp)
   31df8:	1880042e 	bgeu	r3,r2,31e0c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   31dfc:	e0bffc17 	ldw	r2,-16(fp)
   31e00:	00c00044 	movi	r3,1
   31e04:	10c00405 	stb	r3,16(r2)
   31e08:	00000206 	br	31e14 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   31e0c:	e0bffc17 	ldw	r2,-16(fp)
   31e10:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   31e14:	e0bffc17 	ldw	r2,-16(fp)
   31e18:	d0e01b04 	addi	r3,gp,-32660
   31e1c:	e0fffa15 	stw	r3,-24(fp)
   31e20:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   31e24:	e0bffb17 	ldw	r2,-20(fp)
   31e28:	e0fffa17 	ldw	r3,-24(fp)
   31e2c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   31e30:	e0bffa17 	ldw	r2,-24(fp)
   31e34:	10c00017 	ldw	r3,0(r2)
   31e38:	e0bffb17 	ldw	r2,-20(fp)
   31e3c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   31e40:	e0bffa17 	ldw	r2,-24(fp)
   31e44:	10800017 	ldw	r2,0(r2)
   31e48:	e0fffb17 	ldw	r3,-20(fp)
   31e4c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   31e50:	e0bffa17 	ldw	r2,-24(fp)
   31e54:	e0fffb17 	ldw	r3,-20(fp)
   31e58:	10c00015 	stw	r3,0(r2)
   31e5c:	e0bff817 	ldw	r2,-32(fp)
   31e60:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   31e64:	e0bff717 	ldw	r2,-36(fp)
   31e68:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   31e6c:	0005883a 	mov	r2,zero
   31e70:	00000306 	br	31e80 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   31e74:	00bffa84 	movi	r2,-22
   31e78:	00000106 	br	31e80 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   31e7c:	00bfde84 	movi	r2,-134
  }
}
   31e80:	e037883a 	mov	sp,fp
   31e84:	df000017 	ldw	fp,0(sp)
   31e88:	dec00104 	addi	sp,sp,4
   31e8c:	f800283a 	ret

00031e90 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   31e90:	defffa04 	addi	sp,sp,-24
   31e94:	dfc00515 	stw	ra,20(sp)
   31e98:	df000415 	stw	fp,16(sp)
   31e9c:	df000404 	addi	fp,sp,16
   31ea0:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   31ea4:	008000c4 	movi	r2,3
   31ea8:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   31eac:	e0fffd17 	ldw	r3,-12(fp)
   31eb0:	008003f4 	movhi	r2,15
   31eb4:	10909004 	addi	r2,r2,16960
   31eb8:	1885383a 	mul	r2,r3,r2
   31ebc:	100b883a 	mov	r5,r2
   31ec0:	0100bef4 	movhi	r4,763
   31ec4:	213c2004 	addi	r4,r4,-3968
   31ec8:	002d0980 	call	2d098 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   31ecc:	100b883a 	mov	r5,r2
   31ed0:	01200034 	movhi	r4,32768
   31ed4:	213fffc4 	addi	r4,r4,-1
   31ed8:	002d0980 	call	2d098 <__udivsi3>
   31edc:	100b883a 	mov	r5,r2
   31ee0:	e13fff17 	ldw	r4,-4(fp)
   31ee4:	002d0980 	call	2d098 <__udivsi3>
   31ee8:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   31eec:	e0bffe17 	ldw	r2,-8(fp)
   31ef0:	10002a26 	beq	r2,zero,31f9c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   31ef4:	e03ffc15 	stw	zero,-16(fp)
   31ef8:	00001706 	br	31f58 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   31efc:	00a00034 	movhi	r2,32768
   31f00:	10bfffc4 	addi	r2,r2,-1
   31f04:	10bfffc4 	addi	r2,r2,-1
   31f08:	103ffe1e 	bne	r2,zero,31f04 <_gp+0xffff50e4>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   31f0c:	e0fffd17 	ldw	r3,-12(fp)
   31f10:	008003f4 	movhi	r2,15
   31f14:	10909004 	addi	r2,r2,16960
   31f18:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   31f1c:	100b883a 	mov	r5,r2
   31f20:	0100bef4 	movhi	r4,763
   31f24:	213c2004 	addi	r4,r4,-3968
   31f28:	002d0980 	call	2d098 <__udivsi3>
   31f2c:	100b883a 	mov	r5,r2
   31f30:	01200034 	movhi	r4,32768
   31f34:	213fffc4 	addi	r4,r4,-1
   31f38:	002d0980 	call	2d098 <__udivsi3>
   31f3c:	1007883a 	mov	r3,r2
   31f40:	e0bfff17 	ldw	r2,-4(fp)
   31f44:	10c5c83a 	sub	r2,r2,r3
   31f48:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   31f4c:	e0bffc17 	ldw	r2,-16(fp)
   31f50:	10800044 	addi	r2,r2,1
   31f54:	e0bffc15 	stw	r2,-16(fp)
   31f58:	e0fffc17 	ldw	r3,-16(fp)
   31f5c:	e0bffe17 	ldw	r2,-8(fp)
   31f60:	18bfe616 	blt	r3,r2,31efc <_gp+0xffff50dc>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   31f64:	e0fffd17 	ldw	r3,-12(fp)
   31f68:	008003f4 	movhi	r2,15
   31f6c:	10909004 	addi	r2,r2,16960
   31f70:	1885383a 	mul	r2,r3,r2
   31f74:	100b883a 	mov	r5,r2
   31f78:	0100bef4 	movhi	r4,763
   31f7c:	213c2004 	addi	r4,r4,-3968
   31f80:	002d0980 	call	2d098 <__udivsi3>
   31f84:	1007883a 	mov	r3,r2
   31f88:	e0bfff17 	ldw	r2,-4(fp)
   31f8c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   31f90:	10bfffc4 	addi	r2,r2,-1
   31f94:	103ffe1e 	bne	r2,zero,31f90 <_gp+0xffff5170>
   31f98:	00000d06 	br	31fd0 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   31f9c:	e0fffd17 	ldw	r3,-12(fp)
   31fa0:	008003f4 	movhi	r2,15
   31fa4:	10909004 	addi	r2,r2,16960
   31fa8:	1885383a 	mul	r2,r3,r2
   31fac:	100b883a 	mov	r5,r2
   31fb0:	0100bef4 	movhi	r4,763
   31fb4:	213c2004 	addi	r4,r4,-3968
   31fb8:	002d0980 	call	2d098 <__udivsi3>
   31fbc:	1007883a 	mov	r3,r2
   31fc0:	e0bfff17 	ldw	r2,-4(fp)
   31fc4:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   31fc8:	10bfffc4 	addi	r2,r2,-1
   31fcc:	00bffe16 	blt	zero,r2,31fc8 <_gp+0xffff51a8>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   31fd0:	0005883a 	mov	r2,zero
}
   31fd4:	e037883a 	mov	sp,fp
   31fd8:	dfc00117 	ldw	ra,4(sp)
   31fdc:	df000017 	ldw	fp,0(sp)
   31fe0:	dec00204 	addi	sp,sp,8
   31fe4:	f800283a 	ret

00031fe8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   31fe8:	defffe04 	addi	sp,sp,-8
   31fec:	df000115 	stw	fp,4(sp)
   31ff0:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   31ff4:	e03fff15 	stw	zero,-4(fp)
   31ff8:	00000506 	br	32010 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   31ffc:	e0bfff17 	ldw	r2,-4(fp)
   32000:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   32004:	e0bfff17 	ldw	r2,-4(fp)
   32008:	10800804 	addi	r2,r2,32
   3200c:	e0bfff15 	stw	r2,-4(fp)
   32010:	e0bfff17 	ldw	r2,-4(fp)
   32014:	10820030 	cmpltui	r2,r2,2048
   32018:	103ff81e 	bne	r2,zero,31ffc <_gp+0xffff51dc>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   3201c:	0001883a 	nop
   32020:	e037883a 	mov	sp,fp
   32024:	df000017 	ldw	fp,0(sp)
   32028:	dec00104 	addi	sp,sp,4
   3202c:	f800283a 	ret

00032030 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   32030:	defffe04 	addi	sp,sp,-8
   32034:	dfc00115 	stw	ra,4(sp)
   32038:	df000015 	stw	fp,0(sp)
   3203c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   32040:	d0a01917 	ldw	r2,-32668(gp)
   32044:	10000326 	beq	r2,zero,32054 <alt_get_errno+0x24>
   32048:	d0a01917 	ldw	r2,-32668(gp)
   3204c:	103ee83a 	callr	r2
   32050:	00000106 	br	32058 <alt_get_errno+0x28>
   32054:	d0a71e04 	addi	r2,gp,-25480
}
   32058:	e037883a 	mov	sp,fp
   3205c:	dfc00117 	ldw	ra,4(sp)
   32060:	df000017 	ldw	fp,0(sp)
   32064:	dec00204 	addi	sp,sp,8
   32068:	f800283a 	ret

0003206c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   3206c:	defffa04 	addi	sp,sp,-24
   32070:	dfc00515 	stw	ra,20(sp)
   32074:	df000415 	stw	fp,16(sp)
   32078:	df000404 	addi	fp,sp,16
   3207c:	e13ffe15 	stw	r4,-8(fp)
   32080:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   32084:	e0bffe17 	ldw	r2,-8(fp)
   32088:	10000326 	beq	r2,zero,32098 <alt_dev_llist_insert+0x2c>
   3208c:	e0bffe17 	ldw	r2,-8(fp)
   32090:	10800217 	ldw	r2,8(r2)
   32094:	1000061e 	bne	r2,zero,320b0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   32098:	00320300 	call	32030 <alt_get_errno>
   3209c:	1007883a 	mov	r3,r2
   320a0:	00800584 	movi	r2,22
   320a4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   320a8:	00bffa84 	movi	r2,-22
   320ac:	00001306 	br	320fc <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   320b0:	e0bffe17 	ldw	r2,-8(fp)
   320b4:	e0ffff17 	ldw	r3,-4(fp)
   320b8:	e0fffc15 	stw	r3,-16(fp)
   320bc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   320c0:	e0bffd17 	ldw	r2,-12(fp)
   320c4:	e0fffc17 	ldw	r3,-16(fp)
   320c8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   320cc:	e0bffc17 	ldw	r2,-16(fp)
   320d0:	10c00017 	ldw	r3,0(r2)
   320d4:	e0bffd17 	ldw	r2,-12(fp)
   320d8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   320dc:	e0bffc17 	ldw	r2,-16(fp)
   320e0:	10800017 	ldw	r2,0(r2)
   320e4:	e0fffd17 	ldw	r3,-12(fp)
   320e8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   320ec:	e0bffc17 	ldw	r2,-16(fp)
   320f0:	e0fffd17 	ldw	r3,-12(fp)
   320f4:	10c00015 	stw	r3,0(r2)

  return 0;  
   320f8:	0005883a 	mov	r2,zero
}
   320fc:	e037883a 	mov	sp,fp
   32100:	dfc00117 	ldw	ra,4(sp)
   32104:	df000017 	ldw	fp,0(sp)
   32108:	dec00204 	addi	sp,sp,8
   3210c:	f800283a 	ret

00032110 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   32110:	defffd04 	addi	sp,sp,-12
   32114:	dfc00215 	stw	ra,8(sp)
   32118:	df000115 	stw	fp,4(sp)
   3211c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   32120:	008000f4 	movhi	r2,3
   32124:	108b4404 	addi	r2,r2,11536
   32128:	e0bfff15 	stw	r2,-4(fp)
   3212c:	00000606 	br	32148 <_do_ctors+0x38>
        (*ctor) (); 
   32130:	e0bfff17 	ldw	r2,-4(fp)
   32134:	10800017 	ldw	r2,0(r2)
   32138:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   3213c:	e0bfff17 	ldw	r2,-4(fp)
   32140:	10bfff04 	addi	r2,r2,-4
   32144:	e0bfff15 	stw	r2,-4(fp)
   32148:	e0ffff17 	ldw	r3,-4(fp)
   3214c:	008000f4 	movhi	r2,3
   32150:	108b4344 	addi	r2,r2,11533
   32154:	18bff62e 	bgeu	r3,r2,32130 <_gp+0xffff5310>
        (*ctor) (); 
}
   32158:	0001883a 	nop
   3215c:	e037883a 	mov	sp,fp
   32160:	dfc00117 	ldw	ra,4(sp)
   32164:	df000017 	ldw	fp,0(sp)
   32168:	dec00204 	addi	sp,sp,8
   3216c:	f800283a 	ret

00032170 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   32170:	defffd04 	addi	sp,sp,-12
   32174:	dfc00215 	stw	ra,8(sp)
   32178:	df000115 	stw	fp,4(sp)
   3217c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   32180:	008000f4 	movhi	r2,3
   32184:	108b4404 	addi	r2,r2,11536
   32188:	e0bfff15 	stw	r2,-4(fp)
   3218c:	00000606 	br	321a8 <_do_dtors+0x38>
        (*dtor) (); 
   32190:	e0bfff17 	ldw	r2,-4(fp)
   32194:	10800017 	ldw	r2,0(r2)
   32198:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   3219c:	e0bfff17 	ldw	r2,-4(fp)
   321a0:	10bfff04 	addi	r2,r2,-4
   321a4:	e0bfff15 	stw	r2,-4(fp)
   321a8:	e0ffff17 	ldw	r3,-4(fp)
   321ac:	008000f4 	movhi	r2,3
   321b0:	108b4504 	addi	r2,r2,11540
   321b4:	18bff62e 	bgeu	r3,r2,32190 <_gp+0xffff5370>
        (*dtor) (); 
}
   321b8:	0001883a 	nop
   321bc:	e037883a 	mov	sp,fp
   321c0:	dfc00117 	ldw	ra,4(sp)
   321c4:	df000017 	ldw	fp,0(sp)
   321c8:	dec00204 	addi	sp,sp,8
   321cc:	f800283a 	ret

000321d0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   321d0:	defffa04 	addi	sp,sp,-24
   321d4:	dfc00515 	stw	ra,20(sp)
   321d8:	df000415 	stw	fp,16(sp)
   321dc:	df000404 	addi	fp,sp,16
   321e0:	e13ffe15 	stw	r4,-8(fp)
   321e4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   321e8:	e0bfff17 	ldw	r2,-4(fp)
   321ec:	10800017 	ldw	r2,0(r2)
   321f0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   321f4:	e13ffe17 	ldw	r4,-8(fp)
   321f8:	0023a400 	call	23a40 <strlen>
   321fc:	10800044 	addi	r2,r2,1
   32200:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   32204:	00000d06 	br	3223c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   32208:	e0bffc17 	ldw	r2,-16(fp)
   3220c:	10800217 	ldw	r2,8(r2)
   32210:	e0fffd17 	ldw	r3,-12(fp)
   32214:	180d883a 	mov	r6,r3
   32218:	e17ffe17 	ldw	r5,-8(fp)
   3221c:	1009883a 	mov	r4,r2
   32220:	00329bc0 	call	329bc <memcmp>
   32224:	1000021e 	bne	r2,zero,32230 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   32228:	e0bffc17 	ldw	r2,-16(fp)
   3222c:	00000706 	br	3224c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   32230:	e0bffc17 	ldw	r2,-16(fp)
   32234:	10800017 	ldw	r2,0(r2)
   32238:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   3223c:	e0fffc17 	ldw	r3,-16(fp)
   32240:	e0bfff17 	ldw	r2,-4(fp)
   32244:	18bff01e 	bne	r3,r2,32208 <_gp+0xffff53e8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   32248:	0005883a 	mov	r2,zero
}
   3224c:	e037883a 	mov	sp,fp
   32250:	dfc00117 	ldw	ra,4(sp)
   32254:	df000017 	ldw	fp,0(sp)
   32258:	dec00204 	addi	sp,sp,8
   3225c:	f800283a 	ret

00032260 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   32260:	defffb04 	addi	sp,sp,-20
   32264:	dfc00415 	stw	ra,16(sp)
   32268:	df000315 	stw	fp,12(sp)
   3226c:	df000304 	addi	fp,sp,12
   32270:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   32274:	d0a01417 	ldw	r2,-32688(gp)
   32278:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   3227c:	00003106 	br	32344 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   32280:	e0bffd17 	ldw	r2,-12(fp)
   32284:	10800217 	ldw	r2,8(r2)
   32288:	1009883a 	mov	r4,r2
   3228c:	0023a400 	call	23a40 <strlen>
   32290:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   32294:	e0bffd17 	ldw	r2,-12(fp)
   32298:	10c00217 	ldw	r3,8(r2)
   3229c:	e0bffe17 	ldw	r2,-8(fp)
   322a0:	10bfffc4 	addi	r2,r2,-1
   322a4:	1885883a 	add	r2,r3,r2
   322a8:	10800003 	ldbu	r2,0(r2)
   322ac:	10803fcc 	andi	r2,r2,255
   322b0:	1080201c 	xori	r2,r2,128
   322b4:	10bfe004 	addi	r2,r2,-128
   322b8:	10800bd8 	cmpnei	r2,r2,47
   322bc:	1000031e 	bne	r2,zero,322cc <alt_find_file+0x6c>
    {
      len -= 1;
   322c0:	e0bffe17 	ldw	r2,-8(fp)
   322c4:	10bfffc4 	addi	r2,r2,-1
   322c8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   322cc:	e0bffe17 	ldw	r2,-8(fp)
   322d0:	e0ffff17 	ldw	r3,-4(fp)
   322d4:	1885883a 	add	r2,r3,r2
   322d8:	10800003 	ldbu	r2,0(r2)
   322dc:	10803fcc 	andi	r2,r2,255
   322e0:	1080201c 	xori	r2,r2,128
   322e4:	10bfe004 	addi	r2,r2,-128
   322e8:	10800be0 	cmpeqi	r2,r2,47
   322ec:	1000081e 	bne	r2,zero,32310 <alt_find_file+0xb0>
   322f0:	e0bffe17 	ldw	r2,-8(fp)
   322f4:	e0ffff17 	ldw	r3,-4(fp)
   322f8:	1885883a 	add	r2,r3,r2
   322fc:	10800003 	ldbu	r2,0(r2)
   32300:	10803fcc 	andi	r2,r2,255
   32304:	1080201c 	xori	r2,r2,128
   32308:	10bfe004 	addi	r2,r2,-128
   3230c:	10000a1e 	bne	r2,zero,32338 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   32310:	e0bffd17 	ldw	r2,-12(fp)
   32314:	10800217 	ldw	r2,8(r2)
   32318:	e0fffe17 	ldw	r3,-8(fp)
   3231c:	180d883a 	mov	r6,r3
   32320:	e17fff17 	ldw	r5,-4(fp)
   32324:	1009883a 	mov	r4,r2
   32328:	00329bc0 	call	329bc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   3232c:	1000021e 	bne	r2,zero,32338 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   32330:	e0bffd17 	ldw	r2,-12(fp)
   32334:	00000706 	br	32354 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   32338:	e0bffd17 	ldw	r2,-12(fp)
   3233c:	10800017 	ldw	r2,0(r2)
   32340:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   32344:	e0fffd17 	ldw	r3,-12(fp)
   32348:	d0a01404 	addi	r2,gp,-32688
   3234c:	18bfcc1e 	bne	r3,r2,32280 <_gp+0xffff5460>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   32350:	0005883a 	mov	r2,zero
}
   32354:	e037883a 	mov	sp,fp
   32358:	dfc00117 	ldw	ra,4(sp)
   3235c:	df000017 	ldw	fp,0(sp)
   32360:	dec00204 	addi	sp,sp,8
   32364:	f800283a 	ret

00032368 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   32368:	defffc04 	addi	sp,sp,-16
   3236c:	df000315 	stw	fp,12(sp)
   32370:	df000304 	addi	fp,sp,12
   32374:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   32378:	00bffa04 	movi	r2,-24
   3237c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   32380:	e03ffd15 	stw	zero,-12(fp)
   32384:	00001906 	br	323ec <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   32388:	008000f4 	movhi	r2,3
   3238c:	108edf04 	addi	r2,r2,15228
   32390:	e0fffd17 	ldw	r3,-12(fp)
   32394:	18c00324 	muli	r3,r3,12
   32398:	10c5883a 	add	r2,r2,r3
   3239c:	10800017 	ldw	r2,0(r2)
   323a0:	10000f1e 	bne	r2,zero,323e0 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   323a4:	008000f4 	movhi	r2,3
   323a8:	108edf04 	addi	r2,r2,15228
   323ac:	e0fffd17 	ldw	r3,-12(fp)
   323b0:	18c00324 	muli	r3,r3,12
   323b4:	10c5883a 	add	r2,r2,r3
   323b8:	e0ffff17 	ldw	r3,-4(fp)
   323bc:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   323c0:	d0e01817 	ldw	r3,-32672(gp)
   323c4:	e0bffd17 	ldw	r2,-12(fp)
   323c8:	1880020e 	bge	r3,r2,323d4 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   323cc:	e0bffd17 	ldw	r2,-12(fp)
   323d0:	d0a01815 	stw	r2,-32672(gp)
      }
      rc = i;
   323d4:	e0bffd17 	ldw	r2,-12(fp)
   323d8:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   323dc:	00000606 	br	323f8 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   323e0:	e0bffd17 	ldw	r2,-12(fp)
   323e4:	10800044 	addi	r2,r2,1
   323e8:	e0bffd15 	stw	r2,-12(fp)
   323ec:	e0bffd17 	ldw	r2,-12(fp)
   323f0:	10800810 	cmplti	r2,r2,32
   323f4:	103fe41e 	bne	r2,zero,32388 <_gp+0xffff5568>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   323f8:	e0bffe17 	ldw	r2,-8(fp)
}
   323fc:	e037883a 	mov	sp,fp
   32400:	df000017 	ldw	fp,0(sp)
   32404:	dec00104 	addi	sp,sp,4
   32408:	f800283a 	ret

0003240c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   3240c:	defffe04 	addi	sp,sp,-8
   32410:	dfc00115 	stw	ra,4(sp)
   32414:	df000015 	stw	fp,0(sp)
   32418:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   3241c:	01440004 	movi	r5,4096
   32420:	0009883a 	mov	r4,zero
   32424:	00328440 	call	32844 <alt_icache_flush>
#endif
}
   32428:	0001883a 	nop
   3242c:	e037883a 	mov	sp,fp
   32430:	dfc00117 	ldw	ra,4(sp)
   32434:	df000017 	ldw	fp,0(sp)
   32438:	dec00204 	addi	sp,sp,8
   3243c:	f800283a 	ret

00032440 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   32440:	defff904 	addi	sp,sp,-28
   32444:	dfc00615 	stw	ra,24(sp)
   32448:	df000515 	stw	fp,20(sp)
   3244c:	df000504 	addi	fp,sp,20
   32450:	e13ffc15 	stw	r4,-16(fp)
   32454:	e17ffd15 	stw	r5,-12(fp)
   32458:	e1bffe15 	stw	r6,-8(fp)
   3245c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   32460:	e0800217 	ldw	r2,8(fp)
   32464:	d8800015 	stw	r2,0(sp)
   32468:	e1ffff17 	ldw	r7,-4(fp)
   3246c:	e1bffe17 	ldw	r6,-8(fp)
   32470:	e17ffd17 	ldw	r5,-12(fp)
   32474:	e13ffc17 	ldw	r4,-16(fp)
   32478:	00325f00 	call	325f0 <alt_iic_isr_register>
}  
   3247c:	e037883a 	mov	sp,fp
   32480:	dfc00117 	ldw	ra,4(sp)
   32484:	df000017 	ldw	fp,0(sp)
   32488:	dec00204 	addi	sp,sp,8
   3248c:	f800283a 	ret

00032490 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   32490:	defff904 	addi	sp,sp,-28
   32494:	df000615 	stw	fp,24(sp)
   32498:	df000604 	addi	fp,sp,24
   3249c:	e13ffe15 	stw	r4,-8(fp)
   324a0:	e17fff15 	stw	r5,-4(fp)
   324a4:	e0bfff17 	ldw	r2,-4(fp)
   324a8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   324ac:	0005303a 	rdctl	r2,status
   324b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   324b4:	e0fffb17 	ldw	r3,-20(fp)
   324b8:	00bfff84 	movi	r2,-2
   324bc:	1884703a 	and	r2,r3,r2
   324c0:	1001703a 	wrctl	status,r2
  
  return context;
   324c4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   324c8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   324cc:	00c00044 	movi	r3,1
   324d0:	e0bffa17 	ldw	r2,-24(fp)
   324d4:	1884983a 	sll	r2,r3,r2
   324d8:	1007883a 	mov	r3,r2
   324dc:	d0a72717 	ldw	r2,-25444(gp)
   324e0:	1884b03a 	or	r2,r3,r2
   324e4:	d0a72715 	stw	r2,-25444(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   324e8:	d0a72717 	ldw	r2,-25444(gp)
   324ec:	100170fa 	wrctl	ienable,r2
   324f0:	e0bffc17 	ldw	r2,-16(fp)
   324f4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   324f8:	e0bffd17 	ldw	r2,-12(fp)
   324fc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   32500:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   32504:	0001883a 	nop
}
   32508:	e037883a 	mov	sp,fp
   3250c:	df000017 	ldw	fp,0(sp)
   32510:	dec00104 	addi	sp,sp,4
   32514:	f800283a 	ret

00032518 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   32518:	defff904 	addi	sp,sp,-28
   3251c:	df000615 	stw	fp,24(sp)
   32520:	df000604 	addi	fp,sp,24
   32524:	e13ffe15 	stw	r4,-8(fp)
   32528:	e17fff15 	stw	r5,-4(fp)
   3252c:	e0bfff17 	ldw	r2,-4(fp)
   32530:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   32534:	0005303a 	rdctl	r2,status
   32538:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3253c:	e0fffb17 	ldw	r3,-20(fp)
   32540:	00bfff84 	movi	r2,-2
   32544:	1884703a 	and	r2,r3,r2
   32548:	1001703a 	wrctl	status,r2
  
  return context;
   3254c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   32550:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   32554:	00c00044 	movi	r3,1
   32558:	e0bffa17 	ldw	r2,-24(fp)
   3255c:	1884983a 	sll	r2,r3,r2
   32560:	0084303a 	nor	r2,zero,r2
   32564:	1007883a 	mov	r3,r2
   32568:	d0a72717 	ldw	r2,-25444(gp)
   3256c:	1884703a 	and	r2,r3,r2
   32570:	d0a72715 	stw	r2,-25444(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   32574:	d0a72717 	ldw	r2,-25444(gp)
   32578:	100170fa 	wrctl	ienable,r2
   3257c:	e0bffc17 	ldw	r2,-16(fp)
   32580:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   32584:	e0bffd17 	ldw	r2,-12(fp)
   32588:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   3258c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   32590:	0001883a 	nop
}
   32594:	e037883a 	mov	sp,fp
   32598:	df000017 	ldw	fp,0(sp)
   3259c:	dec00104 	addi	sp,sp,4
   325a0:	f800283a 	ret

000325a4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   325a4:	defffc04 	addi	sp,sp,-16
   325a8:	df000315 	stw	fp,12(sp)
   325ac:	df000304 	addi	fp,sp,12
   325b0:	e13ffe15 	stw	r4,-8(fp)
   325b4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   325b8:	000530fa 	rdctl	r2,ienable
   325bc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   325c0:	00c00044 	movi	r3,1
   325c4:	e0bfff17 	ldw	r2,-4(fp)
   325c8:	1884983a 	sll	r2,r3,r2
   325cc:	1007883a 	mov	r3,r2
   325d0:	e0bffd17 	ldw	r2,-12(fp)
   325d4:	1884703a 	and	r2,r3,r2
   325d8:	1004c03a 	cmpne	r2,r2,zero
   325dc:	10803fcc 	andi	r2,r2,255
}
   325e0:	e037883a 	mov	sp,fp
   325e4:	df000017 	ldw	fp,0(sp)
   325e8:	dec00104 	addi	sp,sp,4
   325ec:	f800283a 	ret

000325f0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   325f0:	defff504 	addi	sp,sp,-44
   325f4:	dfc00a15 	stw	ra,40(sp)
   325f8:	df000915 	stw	fp,36(sp)
   325fc:	df000904 	addi	fp,sp,36
   32600:	e13ffc15 	stw	r4,-16(fp)
   32604:	e17ffd15 	stw	r5,-12(fp)
   32608:	e1bffe15 	stw	r6,-8(fp)
   3260c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   32610:	00bffa84 	movi	r2,-22
   32614:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   32618:	e0bffd17 	ldw	r2,-12(fp)
   3261c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   32620:	e0bff817 	ldw	r2,-32(fp)
   32624:	10800808 	cmpgei	r2,r2,32
   32628:	1000271e 	bne	r2,zero,326c8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3262c:	0005303a 	rdctl	r2,status
   32630:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   32634:	e0fffb17 	ldw	r3,-20(fp)
   32638:	00bfff84 	movi	r2,-2
   3263c:	1884703a 	and	r2,r3,r2
   32640:	1001703a 	wrctl	status,r2
  
  return context;
   32644:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   32648:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   3264c:	008000f4 	movhi	r2,3
   32650:	109abf04 	addi	r2,r2,27388
   32654:	e0fff817 	ldw	r3,-32(fp)
   32658:	180690fa 	slli	r3,r3,3
   3265c:	10c5883a 	add	r2,r2,r3
   32660:	e0fffe17 	ldw	r3,-8(fp)
   32664:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   32668:	008000f4 	movhi	r2,3
   3266c:	109abf04 	addi	r2,r2,27388
   32670:	e0fff817 	ldw	r3,-32(fp)
   32674:	180690fa 	slli	r3,r3,3
   32678:	10c5883a 	add	r2,r2,r3
   3267c:	10800104 	addi	r2,r2,4
   32680:	e0ffff17 	ldw	r3,-4(fp)
   32684:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   32688:	e0bffe17 	ldw	r2,-8(fp)
   3268c:	10000526 	beq	r2,zero,326a4 <alt_iic_isr_register+0xb4>
   32690:	e0bff817 	ldw	r2,-32(fp)
   32694:	100b883a 	mov	r5,r2
   32698:	e13ffc17 	ldw	r4,-16(fp)
   3269c:	00324900 	call	32490 <alt_ic_irq_enable>
   326a0:	00000406 	br	326b4 <alt_iic_isr_register+0xc4>
   326a4:	e0bff817 	ldw	r2,-32(fp)
   326a8:	100b883a 	mov	r5,r2
   326ac:	e13ffc17 	ldw	r4,-16(fp)
   326b0:	00325180 	call	32518 <alt_ic_irq_disable>
   326b4:	e0bff715 	stw	r2,-36(fp)
   326b8:	e0bffa17 	ldw	r2,-24(fp)
   326bc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   326c0:	e0bff917 	ldw	r2,-28(fp)
   326c4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   326c8:	e0bff717 	ldw	r2,-36(fp)
}
   326cc:	e037883a 	mov	sp,fp
   326d0:	dfc00117 	ldw	ra,4(sp)
   326d4:	df000017 	ldw	fp,0(sp)
   326d8:	dec00204 	addi	sp,sp,8
   326dc:	f800283a 	ret

000326e0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   326e0:	defff904 	addi	sp,sp,-28
   326e4:	dfc00615 	stw	ra,24(sp)
   326e8:	df000515 	stw	fp,20(sp)
   326ec:	df000504 	addi	fp,sp,20
   326f0:	e13ffc15 	stw	r4,-16(fp)
   326f4:	e17ffd15 	stw	r5,-12(fp)
   326f8:	e1bffe15 	stw	r6,-8(fp)
   326fc:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   32700:	e1bfff17 	ldw	r6,-4(fp)
   32704:	e17ffe17 	ldw	r5,-8(fp)
   32708:	e13ffd17 	ldw	r4,-12(fp)
   3270c:	003019c0 	call	3019c <open>
   32710:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   32714:	e0bffb17 	ldw	r2,-20(fp)
   32718:	10001c16 	blt	r2,zero,3278c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   3271c:	008000f4 	movhi	r2,3
   32720:	108edf04 	addi	r2,r2,15228
   32724:	e0fffb17 	ldw	r3,-20(fp)
   32728:	18c00324 	muli	r3,r3,12
   3272c:	10c5883a 	add	r2,r2,r3
   32730:	10c00017 	ldw	r3,0(r2)
   32734:	e0bffc17 	ldw	r2,-16(fp)
   32738:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   3273c:	008000f4 	movhi	r2,3
   32740:	108edf04 	addi	r2,r2,15228
   32744:	e0fffb17 	ldw	r3,-20(fp)
   32748:	18c00324 	muli	r3,r3,12
   3274c:	10c5883a 	add	r2,r2,r3
   32750:	10800104 	addi	r2,r2,4
   32754:	10c00017 	ldw	r3,0(r2)
   32758:	e0bffc17 	ldw	r2,-16(fp)
   3275c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   32760:	008000f4 	movhi	r2,3
   32764:	108edf04 	addi	r2,r2,15228
   32768:	e0fffb17 	ldw	r3,-20(fp)
   3276c:	18c00324 	muli	r3,r3,12
   32770:	10c5883a 	add	r2,r2,r3
   32774:	10800204 	addi	r2,r2,8
   32778:	10c00017 	ldw	r3,0(r2)
   3277c:	e0bffc17 	ldw	r2,-16(fp)
   32780:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   32784:	e13ffb17 	ldw	r4,-20(fp)
   32788:	00304280 	call	30428 <alt_release_fd>
  }
} 
   3278c:	0001883a 	nop
   32790:	e037883a 	mov	sp,fp
   32794:	dfc00117 	ldw	ra,4(sp)
   32798:	df000017 	ldw	fp,0(sp)
   3279c:	dec00204 	addi	sp,sp,8
   327a0:	f800283a 	ret

000327a4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   327a4:	defffb04 	addi	sp,sp,-20
   327a8:	dfc00415 	stw	ra,16(sp)
   327ac:	df000315 	stw	fp,12(sp)
   327b0:	df000304 	addi	fp,sp,12
   327b4:	e13ffd15 	stw	r4,-12(fp)
   327b8:	e17ffe15 	stw	r5,-8(fp)
   327bc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   327c0:	01c07fc4 	movi	r7,511
   327c4:	01800044 	movi	r6,1
   327c8:	e17ffd17 	ldw	r5,-12(fp)
   327cc:	010000f4 	movhi	r4,3
   327d0:	210ee204 	addi	r4,r4,15240
   327d4:	00326e00 	call	326e0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   327d8:	01c07fc4 	movi	r7,511
   327dc:	000d883a 	mov	r6,zero
   327e0:	e17ffe17 	ldw	r5,-8(fp)
   327e4:	010000f4 	movhi	r4,3
   327e8:	210edf04 	addi	r4,r4,15228
   327ec:	00326e00 	call	326e0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   327f0:	01c07fc4 	movi	r7,511
   327f4:	01800044 	movi	r6,1
   327f8:	e17fff17 	ldw	r5,-4(fp)
   327fc:	010000f4 	movhi	r4,3
   32800:	210ee504 	addi	r4,r4,15252
   32804:	00326e00 	call	326e0 <alt_open_fd>
}  
   32808:	0001883a 	nop
   3280c:	e037883a 	mov	sp,fp
   32810:	dfc00117 	ldw	ra,4(sp)
   32814:	df000017 	ldw	fp,0(sp)
   32818:	dec00204 	addi	sp,sp,8
   3281c:	f800283a 	ret

00032820 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   32820:	deffff04 	addi	sp,sp,-4
   32824:	df000015 	stw	fp,0(sp)
   32828:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   3282c:	000170fa 	wrctl	ienable,zero
}
   32830:	0001883a 	nop
   32834:	e037883a 	mov	sp,fp
   32838:	df000017 	ldw	fp,0(sp)
   3283c:	dec00104 	addi	sp,sp,4
   32840:	f800283a 	ret

00032844 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   32844:	defffb04 	addi	sp,sp,-20
   32848:	df000415 	stw	fp,16(sp)
   3284c:	df000404 	addi	fp,sp,16
   32850:	e13ffe15 	stw	r4,-8(fp)
   32854:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   32858:	e0bfff17 	ldw	r2,-4(fp)
   3285c:	10840070 	cmpltui	r2,r2,4097
   32860:	1000021e 	bne	r2,zero,3286c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   32864:	00840004 	movi	r2,4096
   32868:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   3286c:	e0fffe17 	ldw	r3,-8(fp)
   32870:	e0bfff17 	ldw	r2,-4(fp)
   32874:	1885883a 	add	r2,r3,r2
   32878:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   3287c:	e0bffe17 	ldw	r2,-8(fp)
   32880:	e0bffc15 	stw	r2,-16(fp)
   32884:	00000506 	br	3289c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   32888:	e0bffc17 	ldw	r2,-16(fp)
   3288c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   32890:	e0bffc17 	ldw	r2,-16(fp)
   32894:	10800804 	addi	r2,r2,32
   32898:	e0bffc15 	stw	r2,-16(fp)
   3289c:	e0fffc17 	ldw	r3,-16(fp)
   328a0:	e0bffd17 	ldw	r2,-12(fp)
   328a4:	18bff836 	bltu	r3,r2,32888 <_gp+0xffff5a68>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   328a8:	e0bffe17 	ldw	r2,-8(fp)
   328ac:	108007cc 	andi	r2,r2,31
   328b0:	10000226 	beq	r2,zero,328bc <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   328b4:	e0bffc17 	ldw	r2,-16(fp)
   328b8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   328bc:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   328c0:	0001883a 	nop
   328c4:	e037883a 	mov	sp,fp
   328c8:	df000017 	ldw	fp,0(sp)
   328cc:	dec00104 	addi	sp,sp,4
   328d0:	f800283a 	ret

000328d4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   328d4:	defffe04 	addi	sp,sp,-8
   328d8:	df000115 	stw	fp,4(sp)
   328dc:	df000104 	addi	fp,sp,4
   328e0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   328e4:	e0bfff17 	ldw	r2,-4(fp)
   328e8:	10bffe84 	addi	r2,r2,-6
   328ec:	10c00428 	cmpgeui	r3,r2,16
   328f0:	18001a1e 	bne	r3,zero,3295c <alt_exception_cause_generated_bad_addr+0x88>
   328f4:	100690ba 	slli	r3,r2,2
   328f8:	008000f4 	movhi	r2,3
   328fc:	108a4304 	addi	r2,r2,10508
   32900:	1885883a 	add	r2,r3,r2
   32904:	10800017 	ldw	r2,0(r2)
   32908:	1000683a 	jmp	r2
   3290c:	0003294c 	andi	zero,zero,3237
   32910:	0003294c 	andi	zero,zero,3237
   32914:	0003295c 	xori	zero,zero,3237
   32918:	0003295c 	xori	zero,zero,3237
   3291c:	0003295c 	xori	zero,zero,3237
   32920:	0003294c 	andi	zero,zero,3237
   32924:	00032954 	movui	zero,3237
   32928:	0003295c 	xori	zero,zero,3237
   3292c:	0003294c 	andi	zero,zero,3237
   32930:	0003294c 	andi	zero,zero,3237
   32934:	0003295c 	xori	zero,zero,3237
   32938:	0003294c 	andi	zero,zero,3237
   3293c:	00032954 	movui	zero,3237
   32940:	0003295c 	xori	zero,zero,3237
   32944:	0003295c 	xori	zero,zero,3237
   32948:	0003294c 	andi	zero,zero,3237
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   3294c:	00800044 	movi	r2,1
   32950:	00000306 	br	32960 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   32954:	0005883a 	mov	r2,zero
   32958:	00000106 	br	32960 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   3295c:	0005883a 	mov	r2,zero
  }
}
   32960:	e037883a 	mov	sp,fp
   32964:	df000017 	ldw	fp,0(sp)
   32968:	dec00104 	addi	sp,sp,4
   3296c:	f800283a 	ret

00032970 <atexit>:
   32970:	200b883a 	mov	r5,r4
   32974:	000f883a 	mov	r7,zero
   32978:	000d883a 	mov	r6,zero
   3297c:	0009883a 	mov	r4,zero
   32980:	0032a381 	jmpi	32a38 <__register_exitproc>

00032984 <exit>:
   32984:	defffe04 	addi	sp,sp,-8
   32988:	000b883a 	mov	r5,zero
   3298c:	dc000015 	stw	r16,0(sp)
   32990:	dfc00115 	stw	ra,4(sp)
   32994:	2021883a 	mov	r16,r4
   32998:	0032b500 	call	32b50 <__call_exitprocs>
   3299c:	008000f4 	movhi	r2,3
   329a0:	10939804 	addi	r2,r2,20064
   329a4:	11000017 	ldw	r4,0(r2)
   329a8:	20800f17 	ldw	r2,60(r4)
   329ac:	10000126 	beq	r2,zero,329b4 <exit+0x30>
   329b0:	103ee83a 	callr	r2
   329b4:	8009883a 	mov	r4,r16
   329b8:	002f8f40 	call	2f8f4 <_exit>

000329bc <memcmp>:
   329bc:	01c000c4 	movi	r7,3
   329c0:	3980192e 	bgeu	r7,r6,32a28 <memcmp+0x6c>
   329c4:	2144b03a 	or	r2,r4,r5
   329c8:	11c4703a 	and	r2,r2,r7
   329cc:	10000f26 	beq	r2,zero,32a0c <memcmp+0x50>
   329d0:	20800003 	ldbu	r2,0(r4)
   329d4:	28c00003 	ldbu	r3,0(r5)
   329d8:	10c0151e 	bne	r2,r3,32a30 <memcmp+0x74>
   329dc:	31bfff84 	addi	r6,r6,-2
   329e0:	01ffffc4 	movi	r7,-1
   329e4:	00000406 	br	329f8 <memcmp+0x3c>
   329e8:	20800003 	ldbu	r2,0(r4)
   329ec:	28c00003 	ldbu	r3,0(r5)
   329f0:	31bfffc4 	addi	r6,r6,-1
   329f4:	10c00e1e 	bne	r2,r3,32a30 <memcmp+0x74>
   329f8:	21000044 	addi	r4,r4,1
   329fc:	29400044 	addi	r5,r5,1
   32a00:	31fff91e 	bne	r6,r7,329e8 <_gp+0xffff5bc8>
   32a04:	0005883a 	mov	r2,zero
   32a08:	f800283a 	ret
   32a0c:	20c00017 	ldw	r3,0(r4)
   32a10:	28800017 	ldw	r2,0(r5)
   32a14:	18bfee1e 	bne	r3,r2,329d0 <_gp+0xffff5bb0>
   32a18:	31bfff04 	addi	r6,r6,-4
   32a1c:	21000104 	addi	r4,r4,4
   32a20:	29400104 	addi	r5,r5,4
   32a24:	39bff936 	bltu	r7,r6,32a0c <_gp+0xffff5bec>
   32a28:	303fe91e 	bne	r6,zero,329d0 <_gp+0xffff5bb0>
   32a2c:	003ff506 	br	32a04 <_gp+0xffff5be4>
   32a30:	10c5c83a 	sub	r2,r2,r3
   32a34:	f800283a 	ret

00032a38 <__register_exitproc>:
   32a38:	defffa04 	addi	sp,sp,-24
   32a3c:	dc000315 	stw	r16,12(sp)
   32a40:	040000f4 	movhi	r16,3
   32a44:	84139804 	addi	r16,r16,20064
   32a48:	80c00017 	ldw	r3,0(r16)
   32a4c:	dc400415 	stw	r17,16(sp)
   32a50:	dfc00515 	stw	ra,20(sp)
   32a54:	18805217 	ldw	r2,328(r3)
   32a58:	2023883a 	mov	r17,r4
   32a5c:	10003726 	beq	r2,zero,32b3c <__register_exitproc+0x104>
   32a60:	10c00117 	ldw	r3,4(r2)
   32a64:	010007c4 	movi	r4,31
   32a68:	20c00e16 	blt	r4,r3,32aa4 <__register_exitproc+0x6c>
   32a6c:	1a000044 	addi	r8,r3,1
   32a70:	8800221e 	bne	r17,zero,32afc <__register_exitproc+0xc4>
   32a74:	18c00084 	addi	r3,r3,2
   32a78:	18c7883a 	add	r3,r3,r3
   32a7c:	18c7883a 	add	r3,r3,r3
   32a80:	12000115 	stw	r8,4(r2)
   32a84:	10c7883a 	add	r3,r2,r3
   32a88:	19400015 	stw	r5,0(r3)
   32a8c:	0005883a 	mov	r2,zero
   32a90:	dfc00517 	ldw	ra,20(sp)
   32a94:	dc400417 	ldw	r17,16(sp)
   32a98:	dc000317 	ldw	r16,12(sp)
   32a9c:	dec00604 	addi	sp,sp,24
   32aa0:	f800283a 	ret
   32aa4:	008000b4 	movhi	r2,2
   32aa8:	108adc04 	addi	r2,r2,11120
   32aac:	10002626 	beq	r2,zero,32b48 <__register_exitproc+0x110>
   32ab0:	01006404 	movi	r4,400
   32ab4:	d9400015 	stw	r5,0(sp)
   32ab8:	d9800115 	stw	r6,4(sp)
   32abc:	d9c00215 	stw	r7,8(sp)
   32ac0:	0022b700 	call	22b70 <malloc>
   32ac4:	d9400017 	ldw	r5,0(sp)
   32ac8:	d9800117 	ldw	r6,4(sp)
   32acc:	d9c00217 	ldw	r7,8(sp)
   32ad0:	10001d26 	beq	r2,zero,32b48 <__register_exitproc+0x110>
   32ad4:	81000017 	ldw	r4,0(r16)
   32ad8:	10000115 	stw	zero,4(r2)
   32adc:	02000044 	movi	r8,1
   32ae0:	22405217 	ldw	r9,328(r4)
   32ae4:	0007883a 	mov	r3,zero
   32ae8:	12400015 	stw	r9,0(r2)
   32aec:	20805215 	stw	r2,328(r4)
   32af0:	10006215 	stw	zero,392(r2)
   32af4:	10006315 	stw	zero,396(r2)
   32af8:	883fde26 	beq	r17,zero,32a74 <_gp+0xffff5c54>
   32afc:	18c9883a 	add	r4,r3,r3
   32b00:	2109883a 	add	r4,r4,r4
   32b04:	1109883a 	add	r4,r2,r4
   32b08:	21802215 	stw	r6,136(r4)
   32b0c:	01800044 	movi	r6,1
   32b10:	12406217 	ldw	r9,392(r2)
   32b14:	30cc983a 	sll	r6,r6,r3
   32b18:	4992b03a 	or	r9,r9,r6
   32b1c:	12406215 	stw	r9,392(r2)
   32b20:	21c04215 	stw	r7,264(r4)
   32b24:	01000084 	movi	r4,2
   32b28:	893fd21e 	bne	r17,r4,32a74 <_gp+0xffff5c54>
   32b2c:	11006317 	ldw	r4,396(r2)
   32b30:	218cb03a 	or	r6,r4,r6
   32b34:	11806315 	stw	r6,396(r2)
   32b38:	003fce06 	br	32a74 <_gp+0xffff5c54>
   32b3c:	18805304 	addi	r2,r3,332
   32b40:	18805215 	stw	r2,328(r3)
   32b44:	003fc606 	br	32a60 <_gp+0xffff5c40>
   32b48:	00bfffc4 	movi	r2,-1
   32b4c:	003fd006 	br	32a90 <_gp+0xffff5c70>

00032b50 <__call_exitprocs>:
   32b50:	defff504 	addi	sp,sp,-44
   32b54:	df000915 	stw	fp,36(sp)
   32b58:	dd400615 	stw	r21,24(sp)
   32b5c:	dc800315 	stw	r18,12(sp)
   32b60:	dfc00a15 	stw	ra,40(sp)
   32b64:	ddc00815 	stw	r23,32(sp)
   32b68:	dd800715 	stw	r22,28(sp)
   32b6c:	dd000515 	stw	r20,20(sp)
   32b70:	dcc00415 	stw	r19,16(sp)
   32b74:	dc400215 	stw	r17,8(sp)
   32b78:	dc000115 	stw	r16,4(sp)
   32b7c:	d9000015 	stw	r4,0(sp)
   32b80:	2839883a 	mov	fp,r5
   32b84:	04800044 	movi	r18,1
   32b88:	057fffc4 	movi	r21,-1
   32b8c:	008000f4 	movhi	r2,3
   32b90:	10939804 	addi	r2,r2,20064
   32b94:	12000017 	ldw	r8,0(r2)
   32b98:	45005217 	ldw	r20,328(r8)
   32b9c:	44c05204 	addi	r19,r8,328
   32ba0:	a0001c26 	beq	r20,zero,32c14 <__call_exitprocs+0xc4>
   32ba4:	a0800117 	ldw	r2,4(r20)
   32ba8:	15ffffc4 	addi	r23,r2,-1
   32bac:	b8000d16 	blt	r23,zero,32be4 <__call_exitprocs+0x94>
   32bb0:	14000044 	addi	r16,r2,1
   32bb4:	8421883a 	add	r16,r16,r16
   32bb8:	8421883a 	add	r16,r16,r16
   32bbc:	84402004 	addi	r17,r16,128
   32bc0:	a463883a 	add	r17,r20,r17
   32bc4:	a421883a 	add	r16,r20,r16
   32bc8:	e0001e26 	beq	fp,zero,32c44 <__call_exitprocs+0xf4>
   32bcc:	80804017 	ldw	r2,256(r16)
   32bd0:	e0801c26 	beq	fp,r2,32c44 <__call_exitprocs+0xf4>
   32bd4:	bdffffc4 	addi	r23,r23,-1
   32bd8:	843fff04 	addi	r16,r16,-4
   32bdc:	8c7fff04 	addi	r17,r17,-4
   32be0:	bd7ff91e 	bne	r23,r21,32bc8 <_gp+0xffff5da8>
   32be4:	008000b4 	movhi	r2,2
   32be8:	108ae104 	addi	r2,r2,11140
   32bec:	10000926 	beq	r2,zero,32c14 <__call_exitprocs+0xc4>
   32bf0:	a0800117 	ldw	r2,4(r20)
   32bf4:	1000301e 	bne	r2,zero,32cb8 <__call_exitprocs+0x168>
   32bf8:	a0800017 	ldw	r2,0(r20)
   32bfc:	10003226 	beq	r2,zero,32cc8 <__call_exitprocs+0x178>
   32c00:	a009883a 	mov	r4,r20
   32c04:	98800015 	stw	r2,0(r19)
   32c08:	0022b840 	call	22b84 <free>
   32c0c:	9d000017 	ldw	r20,0(r19)
   32c10:	a03fe41e 	bne	r20,zero,32ba4 <_gp+0xffff5d84>
   32c14:	dfc00a17 	ldw	ra,40(sp)
   32c18:	df000917 	ldw	fp,36(sp)
   32c1c:	ddc00817 	ldw	r23,32(sp)
   32c20:	dd800717 	ldw	r22,28(sp)
   32c24:	dd400617 	ldw	r21,24(sp)
   32c28:	dd000517 	ldw	r20,20(sp)
   32c2c:	dcc00417 	ldw	r19,16(sp)
   32c30:	dc800317 	ldw	r18,12(sp)
   32c34:	dc400217 	ldw	r17,8(sp)
   32c38:	dc000117 	ldw	r16,4(sp)
   32c3c:	dec00b04 	addi	sp,sp,44
   32c40:	f800283a 	ret
   32c44:	a0800117 	ldw	r2,4(r20)
   32c48:	80c00017 	ldw	r3,0(r16)
   32c4c:	10bfffc4 	addi	r2,r2,-1
   32c50:	15c01426 	beq	r2,r23,32ca4 <__call_exitprocs+0x154>
   32c54:	80000015 	stw	zero,0(r16)
   32c58:	183fde26 	beq	r3,zero,32bd4 <_gp+0xffff5db4>
   32c5c:	95c8983a 	sll	r4,r18,r23
   32c60:	a0806217 	ldw	r2,392(r20)
   32c64:	a5800117 	ldw	r22,4(r20)
   32c68:	2084703a 	and	r2,r4,r2
   32c6c:	10000b26 	beq	r2,zero,32c9c <__call_exitprocs+0x14c>
   32c70:	a0806317 	ldw	r2,396(r20)
   32c74:	2088703a 	and	r4,r4,r2
   32c78:	20000c1e 	bne	r4,zero,32cac <__call_exitprocs+0x15c>
   32c7c:	89400017 	ldw	r5,0(r17)
   32c80:	d9000017 	ldw	r4,0(sp)
   32c84:	183ee83a 	callr	r3
   32c88:	a0800117 	ldw	r2,4(r20)
   32c8c:	15bfbf1e 	bne	r2,r22,32b8c <_gp+0xffff5d6c>
   32c90:	98800017 	ldw	r2,0(r19)
   32c94:	153fcf26 	beq	r2,r20,32bd4 <_gp+0xffff5db4>
   32c98:	003fbc06 	br	32b8c <_gp+0xffff5d6c>
   32c9c:	183ee83a 	callr	r3
   32ca0:	003ff906 	br	32c88 <_gp+0xffff5e68>
   32ca4:	a5c00115 	stw	r23,4(r20)
   32ca8:	003feb06 	br	32c58 <_gp+0xffff5e38>
   32cac:	89000017 	ldw	r4,0(r17)
   32cb0:	183ee83a 	callr	r3
   32cb4:	003ff406 	br	32c88 <_gp+0xffff5e68>
   32cb8:	a0800017 	ldw	r2,0(r20)
   32cbc:	a027883a 	mov	r19,r20
   32cc0:	1029883a 	mov	r20,r2
   32cc4:	003fb606 	br	32ba0 <_gp+0xffff5d80>
   32cc8:	0005883a 	mov	r2,zero
   32ccc:	003ffb06 	br	32cbc <_gp+0xffff5e9c>
   32cd0:	0201ffff 	0x201ffff
   32cd4:	883a0000 	call	883a000 <_gp+0x87fd1e0>
   32cd8:	010d0bff 	0x10d0bff
   32cdc:	01010002 	0x1010002
	...
   32ce8:	010d0bff 	0x10d0bff
   32cec:	01010004 	movi	r4,1024
   32cf0:	00000100 	call	10 <__reset-0x1fff0>
   32cf4:	00000000 	call	0 <__reset-0x20000>
   32cf8:	01110bff 	0x1110bff
   32cfc:	01010004 	movi	r4,1024
   32d00:	7f000105 	stb	fp,4(r15)
   32d04:	007d0000 	call	7d000 <_gp+0x401e0>
   32d08:	00000000 	call	0 <__reset-0x20000>
   32d0c:	01883a00 	call	1883a0 <_gp+0x14b580>
   32d10:	00021dcc 	andi	zero,zero,2167
